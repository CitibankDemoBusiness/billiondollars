# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationInquiryLoanSpecificRecommendations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_amount': 'float',
        'tenor': 'str',
        'interest_rate': 'float',
        'handling_fee': 'float',
        'installment_amount': 'float',
        'annual_percentage_rate': 'float',
        'total_principal_amount': 'float',
        'total_interest_amount': 'float',
        'total_installment_amount': 'float',
        'repayment_schedule_issue_date': 'date',
        'repayment_schedule': 'list[ApplicationInquiryRepaymentSchedule]'
    }

    attribute_map = {
        'loan_amount': 'loanAmount',
        'tenor': 'tenor',
        'interest_rate': 'interestRate',
        'handling_fee': 'handlingFee',
        'installment_amount': 'installmentAmount',
        'annual_percentage_rate': 'annualPercentageRate',
        'total_principal_amount': 'totalPrincipalAmount',
        'total_interest_amount': 'totalInterestAmount',
        'total_installment_amount': 'totalInstallmentAmount',
        'repayment_schedule_issue_date': 'repaymentScheduleIssueDate',
        'repayment_schedule': 'repaymentSchedule'
    }

    def __init__(self, loan_amount=None, tenor=None, interest_rate=None, handling_fee=None, installment_amount=None, annual_percentage_rate=None, total_principal_amount=None, total_interest_amount=None, total_installment_amount=None, repayment_schedule_issue_date=None, repayment_schedule=None):  # noqa: E501
        """ApplicationInquiryLoanSpecificRecommendations - a model defined in Swagger"""  # noqa: E501
        self._loan_amount = None
        self._tenor = None
        self._interest_rate = None
        self._handling_fee = None
        self._installment_amount = None
        self._annual_percentage_rate = None
        self._total_principal_amount = None
        self._total_interest_amount = None
        self._total_installment_amount = None
        self._repayment_schedule_issue_date = None
        self._repayment_schedule = None
        self.discriminator = None
        if loan_amount is not None:
            self.loan_amount = loan_amount
        if tenor is not None:
            self.tenor = tenor
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if handling_fee is not None:
            self.handling_fee = handling_fee
        if installment_amount is not None:
            self.installment_amount = installment_amount
        if annual_percentage_rate is not None:
            self.annual_percentage_rate = annual_percentage_rate
        if total_principal_amount is not None:
            self.total_principal_amount = total_principal_amount
        if total_interest_amount is not None:
            self.total_interest_amount = total_interest_amount
        if total_installment_amount is not None:
            self.total_installment_amount = total_installment_amount
        if repayment_schedule_issue_date is not None:
            self.repayment_schedule_issue_date = repayment_schedule_issue_date
        if repayment_schedule is not None:
            self.repayment_schedule = repayment_schedule

    @property
    def loan_amount(self):
        """Gets the loan_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        Recommended loan amount.  # noqa: E501

        :return: The loan_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._loan_amount

    @loan_amount.setter
    def loan_amount(self, loan_amount):
        """Sets the loan_amount of this ApplicationInquiryLoanSpecificRecommendations.

        Recommended loan amount.  # noqa: E501

        :param loan_amount: The loan_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._loan_amount = loan_amount

    @property
    def tenor(self):
        """Gets the tenor of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        Tenor for the loan repayment.This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenor} resource to get valid values of this field with descriptions.  # noqa: E501

        :return: The tenor of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._tenor

    @tenor.setter
    def tenor(self, tenor):
        """Sets the tenor of this ApplicationInquiryLoanSpecificRecommendations.

        Tenor for the loan repayment.This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenor} resource to get valid values of this field with descriptions.  # noqa: E501

        :param tenor: The tenor of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: str
        """

        self._tenor = tenor

    @property
    def interest_rate(self):
        """Gets the interest_rate of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        The rate of interest applicable for the product  # noqa: E501

        :return: The interest_rate of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this ApplicationInquiryLoanSpecificRecommendations.

        The rate of interest applicable for the product  # noqa: E501

        :param interest_rate: The interest_rate of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def handling_fee(self):
        """Gets the handling_fee of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        One-time processing fee.  # noqa: E501

        :return: The handling_fee of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._handling_fee

    @handling_fee.setter
    def handling_fee(self, handling_fee):
        """Sets the handling_fee of this ApplicationInquiryLoanSpecificRecommendations.

        One-time processing fee.  # noqa: E501

        :param handling_fee: The handling_fee of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._handling_fee = handling_fee

    @property
    def installment_amount(self):
        """Gets the installment_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        Instalment amount to be paid.  # noqa: E501

        :return: The installment_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._installment_amount

    @installment_amount.setter
    def installment_amount(self, installment_amount):
        """Sets the installment_amount of this ApplicationInquiryLoanSpecificRecommendations.

        Instalment amount to be paid.  # noqa: E501

        :param installment_amount: The installment_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._installment_amount = installment_amount

    @property
    def annual_percentage_rate(self):
        """Gets the annual_percentage_rate of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        Applicable Annual Percentage Rate  # noqa: E501

        :return: The annual_percentage_rate of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._annual_percentage_rate

    @annual_percentage_rate.setter
    def annual_percentage_rate(self, annual_percentage_rate):
        """Sets the annual_percentage_rate of this ApplicationInquiryLoanSpecificRecommendations.

        Applicable Annual Percentage Rate  # noqa: E501

        :param annual_percentage_rate: The annual_percentage_rate of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._annual_percentage_rate = annual_percentage_rate

    @property
    def total_principal_amount(self):
        """Gets the total_principal_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        Total principal to be paid by customer  # noqa: E501

        :return: The total_principal_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._total_principal_amount

    @total_principal_amount.setter
    def total_principal_amount(self, total_principal_amount):
        """Sets the total_principal_amount of this ApplicationInquiryLoanSpecificRecommendations.

        Total principal to be paid by customer  # noqa: E501

        :param total_principal_amount: The total_principal_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._total_principal_amount = total_principal_amount

    @property
    def total_interest_amount(self):
        """Gets the total_interest_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        Total interest amount to be paid by applicant.  # noqa: E501

        :return: The total_interest_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_amount

    @total_interest_amount.setter
    def total_interest_amount(self, total_interest_amount):
        """Sets the total_interest_amount of this ApplicationInquiryLoanSpecificRecommendations.

        Total interest amount to be paid by applicant.  # noqa: E501

        :param total_interest_amount: The total_interest_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._total_interest_amount = total_interest_amount

    @property
    def total_installment_amount(self):
        """Gets the total_installment_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        Total instalment amount to be paid by customer  # noqa: E501

        :return: The total_installment_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._total_installment_amount

    @total_installment_amount.setter
    def total_installment_amount(self, total_installment_amount):
        """Sets the total_installment_amount of this ApplicationInquiryLoanSpecificRecommendations.

        Total instalment amount to be paid by customer  # noqa: E501

        :param total_installment_amount: The total_installment_amount of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._total_installment_amount = total_installment_amount

    @property
    def repayment_schedule_issue_date(self):
        """Gets the repayment_schedule_issue_date of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501

        Repayment schedule start date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The repayment_schedule_issue_date of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: date
        """
        return self._repayment_schedule_issue_date

    @repayment_schedule_issue_date.setter
    def repayment_schedule_issue_date(self, repayment_schedule_issue_date):
        """Sets the repayment_schedule_issue_date of this ApplicationInquiryLoanSpecificRecommendations.

        Repayment schedule start date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param repayment_schedule_issue_date: The repayment_schedule_issue_date of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: date
        """

        self._repayment_schedule_issue_date = repayment_schedule_issue_date

    @property
    def repayment_schedule(self):
        """Gets the repayment_schedule of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501


        :return: The repayment_schedule of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :rtype: list[ApplicationInquiryRepaymentSchedule]
        """
        return self._repayment_schedule

    @repayment_schedule.setter
    def repayment_schedule(self, repayment_schedule):
        """Sets the repayment_schedule of this ApplicationInquiryLoanSpecificRecommendations.


        :param repayment_schedule: The repayment_schedule of this ApplicationInquiryLoanSpecificRecommendations.  # noqa: E501
        :type: list[ApplicationInquiryRepaymentSchedule]
        """

        self._repayment_schedule = repayment_schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationInquiryLoanSpecificRecommendations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationInquiryLoanSpecificRecommendations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
