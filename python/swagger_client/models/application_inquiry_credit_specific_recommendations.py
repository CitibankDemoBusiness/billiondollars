# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationInquiryCreditSpecificRecommendations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recommended_credit_limit': 'float',
        'bt_maximum_loan_percentage': 'float',
        'bt_monthly_interest_rate': 'float',
        'epp_maximum_loan_percentage': 'float',
        'epp_monthly_interest_rate': 'float',
        'bt_campaign_id': 'str',
        'epp_promo_id': 'str'
    }

    attribute_map = {
        'recommended_credit_limit': 'recommendedCreditLimit',
        'bt_maximum_loan_percentage': 'btMaximumLoanPercentage',
        'bt_monthly_interest_rate': 'btMonthlyInterestRate',
        'epp_maximum_loan_percentage': 'eppMaximumLoanPercentage',
        'epp_monthly_interest_rate': 'eppMonthlyInterestRate',
        'bt_campaign_id': 'btCampaignId',
        'epp_promo_id': 'eppPromoId'
    }

    def __init__(self, recommended_credit_limit=None, bt_maximum_loan_percentage=None, bt_monthly_interest_rate=None, epp_maximum_loan_percentage=None, epp_monthly_interest_rate=None, bt_campaign_id=None, epp_promo_id=None):  # noqa: E501
        """ApplicationInquiryCreditSpecificRecommendations - a model defined in Swagger"""  # noqa: E501
        self._recommended_credit_limit = None
        self._bt_maximum_loan_percentage = None
        self._bt_monthly_interest_rate = None
        self._epp_maximum_loan_percentage = None
        self._epp_monthly_interest_rate = None
        self._bt_campaign_id = None
        self._epp_promo_id = None
        self.discriminator = None
        if recommended_credit_limit is not None:
            self.recommended_credit_limit = recommended_credit_limit
        if bt_maximum_loan_percentage is not None:
            self.bt_maximum_loan_percentage = bt_maximum_loan_percentage
        if bt_monthly_interest_rate is not None:
            self.bt_monthly_interest_rate = bt_monthly_interest_rate
        if epp_maximum_loan_percentage is not None:
            self.epp_maximum_loan_percentage = epp_maximum_loan_percentage
        if epp_monthly_interest_rate is not None:
            self.epp_monthly_interest_rate = epp_monthly_interest_rate
        if bt_campaign_id is not None:
            self.bt_campaign_id = bt_campaign_id
        if epp_promo_id is not None:
            self.epp_promo_id = epp_promo_id

    @property
    def recommended_credit_limit(self):
        """Gets the recommended_credit_limit of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501

        Recommended credit limit  # noqa: E501

        :return: The recommended_credit_limit of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._recommended_credit_limit

    @recommended_credit_limit.setter
    def recommended_credit_limit(self, recommended_credit_limit):
        """Sets the recommended_credit_limit of this ApplicationInquiryCreditSpecificRecommendations.

        Recommended credit limit  # noqa: E501

        :param recommended_credit_limit: The recommended_credit_limit of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._recommended_credit_limit = recommended_credit_limit

    @property
    def bt_maximum_loan_percentage(self):
        """Gets the bt_maximum_loan_percentage of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501

        Balance transfer maximum loan percentage. Applicable to Counter and Cross-sell offers  # noqa: E501

        :return: The bt_maximum_loan_percentage of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._bt_maximum_loan_percentage

    @bt_maximum_loan_percentage.setter
    def bt_maximum_loan_percentage(self, bt_maximum_loan_percentage):
        """Sets the bt_maximum_loan_percentage of this ApplicationInquiryCreditSpecificRecommendations.

        Balance transfer maximum loan percentage. Applicable to Counter and Cross-sell offers  # noqa: E501

        :param bt_maximum_loan_percentage: The bt_maximum_loan_percentage of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._bt_maximum_loan_percentage = bt_maximum_loan_percentage

    @property
    def bt_monthly_interest_rate(self):
        """Gets the bt_monthly_interest_rate of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501

        Balance transfer monthly interest rate. Applicable to Counter and Cross-sell offers  # noqa: E501

        :return: The bt_monthly_interest_rate of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._bt_monthly_interest_rate

    @bt_monthly_interest_rate.setter
    def bt_monthly_interest_rate(self, bt_monthly_interest_rate):
        """Sets the bt_monthly_interest_rate of this ApplicationInquiryCreditSpecificRecommendations.

        Balance transfer monthly interest rate. Applicable to Counter and Cross-sell offers  # noqa: E501

        :param bt_monthly_interest_rate: The bt_monthly_interest_rate of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._bt_monthly_interest_rate = bt_monthly_interest_rate

    @property
    def epp_maximum_loan_percentage(self):
        """Gets the epp_maximum_loan_percentage of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501

        Equal payment plan max loan percentage. Applicable to Counter and Cross-sell offers  # noqa: E501

        :return: The epp_maximum_loan_percentage of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._epp_maximum_loan_percentage

    @epp_maximum_loan_percentage.setter
    def epp_maximum_loan_percentage(self, epp_maximum_loan_percentage):
        """Sets the epp_maximum_loan_percentage of this ApplicationInquiryCreditSpecificRecommendations.

        Equal payment plan max loan percentage. Applicable to Counter and Cross-sell offers  # noqa: E501

        :param epp_maximum_loan_percentage: The epp_maximum_loan_percentage of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._epp_maximum_loan_percentage = epp_maximum_loan_percentage

    @property
    def epp_monthly_interest_rate(self):
        """Gets the epp_monthly_interest_rate of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501

        Equal payment plan monthly interest rate. Applicable to Counter and Cross-sell offers  # noqa: E501

        :return: The epp_monthly_interest_rate of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :rtype: float
        """
        return self._epp_monthly_interest_rate

    @epp_monthly_interest_rate.setter
    def epp_monthly_interest_rate(self, epp_monthly_interest_rate):
        """Sets the epp_monthly_interest_rate of this ApplicationInquiryCreditSpecificRecommendations.

        Equal payment plan monthly interest rate. Applicable to Counter and Cross-sell offers  # noqa: E501

        :param epp_monthly_interest_rate: The epp_monthly_interest_rate of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :type: float
        """

        self._epp_monthly_interest_rate = epp_monthly_interest_rate

    @property
    def bt_campaign_id(self):
        """Gets the bt_campaign_id of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501

        Balance transfer CampaignId. Applicable to Counter and Cross-sell offers.  # noqa: E501

        :return: The bt_campaign_id of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._bt_campaign_id

    @bt_campaign_id.setter
    def bt_campaign_id(self, bt_campaign_id):
        """Sets the bt_campaign_id of this ApplicationInquiryCreditSpecificRecommendations.

        Balance transfer CampaignId. Applicable to Counter and Cross-sell offers.  # noqa: E501

        :param bt_campaign_id: The bt_campaign_id of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :type: str
        """

        self._bt_campaign_id = bt_campaign_id

    @property
    def epp_promo_id(self):
        """Gets the epp_promo_id of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501

        PromoId of equal payment plan. Applicable for ready credit, Counter and Cross-sell offers  # noqa: E501

        :return: The epp_promo_id of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :rtype: str
        """
        return self._epp_promo_id

    @epp_promo_id.setter
    def epp_promo_id(self, epp_promo_id):
        """Sets the epp_promo_id of this ApplicationInquiryCreditSpecificRecommendations.

        PromoId of equal payment plan. Applicable for ready credit, Counter and Cross-sell offers  # noqa: E501

        :param epp_promo_id: The epp_promo_id of this ApplicationInquiryCreditSpecificRecommendations.  # noqa: E501
        :type: str
        """

        self._epp_promo_id = epp_promo_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationInquiryCreditSpecificRecommendations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationInquiryCreditSpecificRecommendations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
