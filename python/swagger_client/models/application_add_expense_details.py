# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationAddExpenseDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expense_type': 'str',
        'expense_amount': 'float',
        'frequency': 'str'
    }

    attribute_map = {
        'expense_type': 'expenseType',
        'expense_amount': 'expenseAmount',
        'frequency': 'frequency'
    }

    def __init__(self, expense_type=None, expense_amount=None, frequency=None):  # noqa: E501
        """ApplicationAddExpenseDetails - a model defined in Swagger"""  # noqa: E501
        self._expense_type = None
        self._expense_amount = None
        self._frequency = None
        self.discriminator = None
        if expense_type is not None:
            self.expense_type = expense_type
        if expense_amount is not None:
            self.expense_amount = expense_amount
        if frequency is not None:
            self.frequency = frequency

    @property
    def expense_type(self):
        """Gets the expense_type of this ApplicationAddExpenseDetails.  # noqa: E501

        Expense type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{expenseType} resource to get valid value of this field with description. You can use expenseType field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The expense_type of this ApplicationAddExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._expense_type

    @expense_type.setter
    def expense_type(self, expense_type):
        """Sets the expense_type of this ApplicationAddExpenseDetails.

        Expense type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{expenseType} resource to get valid value of this field with description. You can use expenseType field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param expense_type: The expense_type of this ApplicationAddExpenseDetails.  # noqa: E501
        :type: str
        """

        self._expense_type = expense_type

    @property
    def expense_amount(self):
        """Gets the expense_amount of this ApplicationAddExpenseDetails.  # noqa: E501

        Expenditure amount for an applicant  # noqa: E501

        :return: The expense_amount of this ApplicationAddExpenseDetails.  # noqa: E501
        :rtype: float
        """
        return self._expense_amount

    @expense_amount.setter
    def expense_amount(self, expense_amount):
        """Sets the expense_amount of this ApplicationAddExpenseDetails.

        Expenditure amount for an applicant  # noqa: E501

        :param expense_amount: The expense_amount of this ApplicationAddExpenseDetails.  # noqa: E501
        :type: float
        """

        self._expense_amount = expense_amount

    @property
    def frequency(self):
        """Gets the frequency of this ApplicationAddExpenseDetails.  # noqa: E501

        Expense Frequency. This is a reference data field. Please use /v1/apac/utilities/referenceData/{frequency} resource to get valid value of this field with description. You can use frequency field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The frequency of this ApplicationAddExpenseDetails.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ApplicationAddExpenseDetails.

        Expense Frequency. This is a reference data field. Please use /v1/apac/utilities/referenceData/{frequency} resource to get valid value of this field with description. You can use frequency field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param frequency: The frequency of this ApplicationAddExpenseDetails.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationAddExpenseDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationAddExpenseDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
