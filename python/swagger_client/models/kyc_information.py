# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KycInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'us_tax_status': 'str',
        'us_tax_id': 'str'
    }

    attribute_map = {
        'us_tax_status': 'usTaxStatus',
        'us_tax_id': 'usTaxId'
    }

    def __init__(self, us_tax_status=None, us_tax_id=None):  # noqa: E501
        """KycInformation - a model defined in Swagger"""  # noqa: E501
        self._us_tax_status = None
        self._us_tax_id = None
        self.discriminator = None
        if us_tax_status is not None:
            self.us_tax_status = us_tax_status
        if us_tax_id is not None:
            self.us_tax_id = us_tax_id

    @property
    def us_tax_status(self):
        """Gets the us_tax_status of this KycInformation.  # noqa: E501

        US Tax status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{usTaxStatus} resource to get possible values of this field with descriptions. You can use usTaxStatus field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The us_tax_status of this KycInformation.  # noqa: E501
        :rtype: str
        """
        return self._us_tax_status

    @us_tax_status.setter
    def us_tax_status(self, us_tax_status):
        """Sets the us_tax_status of this KycInformation.

        US Tax status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{usTaxStatus} resource to get possible values of this field with descriptions. You can use usTaxStatus field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param us_tax_status: The us_tax_status of this KycInformation.  # noqa: E501
        :type: str
        """

        self._us_tax_status = us_tax_status

    @property
    def us_tax_id(self):
        """Gets the us_tax_id of this KycInformation.  # noqa: E501

        US Tax ID  # noqa: E501

        :return: The us_tax_id of this KycInformation.  # noqa: E501
        :rtype: str
        """
        return self._us_tax_id

    @us_tax_id.setter
    def us_tax_id(self, us_tax_id):
        """Sets the us_tax_id of this KycInformation.

        US Tax ID  # noqa: E501

        :param us_tax_id: The us_tax_id of this KycInformation.  # noqa: E501
        :type: str
        """

        self._us_tax_id = us_tax_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KycInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
