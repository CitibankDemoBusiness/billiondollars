# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdditionalData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_of_children': 'float',
        'number_of_dependents': 'float',
        'staff_indicator': 'bool',
        'country_specific_group': 'CountrySpecificGroup'
    }

    attribute_map = {
        'number_of_children': 'numberOfChildren',
        'number_of_dependents': 'numberOfDependents',
        'staff_indicator': 'staffIndicator',
        'country_specific_group': 'countrySpecificGroup'
    }

    def __init__(self, number_of_children=None, number_of_dependents=None, staff_indicator=None, country_specific_group=None):  # noqa: E501
        """AdditionalData - a model defined in Swagger"""  # noqa: E501
        self._number_of_children = None
        self._number_of_dependents = None
        self._staff_indicator = None
        self._country_specific_group = None
        self.discriminator = None
        if number_of_children is not None:
            self.number_of_children = number_of_children
        if number_of_dependents is not None:
            self.number_of_dependents = number_of_dependents
        if staff_indicator is not None:
            self.staff_indicator = staff_indicator
        if country_specific_group is not None:
            self.country_specific_group = country_specific_group

    @property
    def number_of_children(self):
        """Gets the number_of_children of this AdditionalData.  # noqa: E501

        Number of children  # noqa: E501

        :return: The number_of_children of this AdditionalData.  # noqa: E501
        :rtype: float
        """
        return self._number_of_children

    @number_of_children.setter
    def number_of_children(self, number_of_children):
        """Sets the number_of_children of this AdditionalData.

        Number of children  # noqa: E501

        :param number_of_children: The number_of_children of this AdditionalData.  # noqa: E501
        :type: float
        """

        self._number_of_children = number_of_children

    @property
    def number_of_dependents(self):
        """Gets the number_of_dependents of this AdditionalData.  # noqa: E501

        Number of dependants  # noqa: E501

        :return: The number_of_dependents of this AdditionalData.  # noqa: E501
        :rtype: float
        """
        return self._number_of_dependents

    @number_of_dependents.setter
    def number_of_dependents(self, number_of_dependents):
        """Sets the number_of_dependents of this AdditionalData.

        Number of dependants  # noqa: E501

        :param number_of_dependents: The number_of_dependents of this AdditionalData.  # noqa: E501
        :type: float
        """

        self._number_of_dependents = number_of_dependents

    @property
    def staff_indicator(self):
        """Gets the staff_indicator of this AdditionalData.  # noqa: E501

        Indicates whether prospect is a Citi Staff. Valid values: true and false  # noqa: E501

        :return: The staff_indicator of this AdditionalData.  # noqa: E501
        :rtype: bool
        """
        return self._staff_indicator

    @staff_indicator.setter
    def staff_indicator(self, staff_indicator):
        """Sets the staff_indicator of this AdditionalData.

        Indicates whether prospect is a Citi Staff. Valid values: true and false  # noqa: E501

        :param staff_indicator: The staff_indicator of this AdditionalData.  # noqa: E501
        :type: bool
        """

        self._staff_indicator = staff_indicator

    @property
    def country_specific_group(self):
        """Gets the country_specific_group of this AdditionalData.  # noqa: E501


        :return: The country_specific_group of this AdditionalData.  # noqa: E501
        :rtype: CountrySpecificGroup
        """
        return self._country_specific_group

    @country_specific_group.setter
    def country_specific_group(self, country_specific_group):
        """Sets the country_specific_group of this AdditionalData.


        :param country_specific_group: The country_specific_group of this AdditionalData.  # noqa: E501
        :type: CountrySpecificGroup
        """

        self._country_specific_group = country_specific_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
