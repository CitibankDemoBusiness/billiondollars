# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditSpecificSelection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_credit_shield': 'bool',
        'emboss_name': 'str',
        'billing_address': 'str',
        'card_delivery_address': 'str',
        'pin_delivery_address': 'str',
        'requested_credit_limit': 'float',
        'offered_credit_limit_accepted_flag': 'bool',
        'atm_required_flag': 'bool',
        'cheque_book_required_flag': 'bool',
        'credit_limit_increase_indicator': 'bool'
    }

    attribute_map = {
        'request_credit_shield': 'requestCreditShield',
        'emboss_name': 'embossName',
        'billing_address': 'billingAddress',
        'card_delivery_address': 'cardDeliveryAddress',
        'pin_delivery_address': 'pinDeliveryAddress',
        'requested_credit_limit': 'requestedCreditLimit',
        'offered_credit_limit_accepted_flag': 'offeredCreditLimitAcceptedFlag',
        'atm_required_flag': 'atmRequiredFlag',
        'cheque_book_required_flag': 'chequeBookRequiredFlag',
        'credit_limit_increase_indicator': 'creditLimitIncreaseIndicator'
    }

    def __init__(self, request_credit_shield=None, emboss_name=None, billing_address=None, card_delivery_address=None, pin_delivery_address=None, requested_credit_limit=None, offered_credit_limit_accepted_flag=None, atm_required_flag=None, cheque_book_required_flag=None, credit_limit_increase_indicator=None):  # noqa: E501
        """CreditSpecificSelection - a model defined in Swagger"""  # noqa: E501
        self._request_credit_shield = None
        self._emboss_name = None
        self._billing_address = None
        self._card_delivery_address = None
        self._pin_delivery_address = None
        self._requested_credit_limit = None
        self._offered_credit_limit_accepted_flag = None
        self._atm_required_flag = None
        self._cheque_book_required_flag = None
        self._credit_limit_increase_indicator = None
        self.discriminator = None
        if request_credit_shield is not None:
            self.request_credit_shield = request_credit_shield
        if emboss_name is not None:
            self.emboss_name = emboss_name
        if billing_address is not None:
            self.billing_address = billing_address
        if card_delivery_address is not None:
            self.card_delivery_address = card_delivery_address
        if pin_delivery_address is not None:
            self.pin_delivery_address = pin_delivery_address
        if requested_credit_limit is not None:
            self.requested_credit_limit = requested_credit_limit
        if offered_credit_limit_accepted_flag is not None:
            self.offered_credit_limit_accepted_flag = offered_credit_limit_accepted_flag
        if atm_required_flag is not None:
            self.atm_required_flag = atm_required_flag
        if cheque_book_required_flag is not None:
            self.cheque_book_required_flag = cheque_book_required_flag
        if credit_limit_increase_indicator is not None:
            self.credit_limit_increase_indicator = credit_limit_increase_indicator

    @property
    def request_credit_shield(self):
        """Gets the request_credit_shield of this CreditSpecificSelection.  # noqa: E501

        Insurance enrolment for outstanding balance on the card. Valid values: true and false  # noqa: E501

        :return: The request_credit_shield of this CreditSpecificSelection.  # noqa: E501
        :rtype: bool
        """
        return self._request_credit_shield

    @request_credit_shield.setter
    def request_credit_shield(self, request_credit_shield):
        """Sets the request_credit_shield of this CreditSpecificSelection.

        Insurance enrolment for outstanding balance on the card. Valid values: true and false  # noqa: E501

        :param request_credit_shield: The request_credit_shield of this CreditSpecificSelection.  # noqa: E501
        :type: bool
        """

        self._request_credit_shield = request_credit_shield

    @property
    def emboss_name(self):
        """Gets the emboss_name of this CreditSpecificSelection.  # noqa: E501

        Name to be embossed on card  # noqa: E501

        :return: The emboss_name of this CreditSpecificSelection.  # noqa: E501
        :rtype: str
        """
        return self._emboss_name

    @emboss_name.setter
    def emboss_name(self, emboss_name):
        """Sets the emboss_name of this CreditSpecificSelection.

        Name to be embossed on card  # noqa: E501

        :param emboss_name: The emboss_name of this CreditSpecificSelection.  # noqa: E501
        :type: str
        """

        self._emboss_name = emboss_name

    @property
    def billing_address(self):
        """Gets the billing_address of this CreditSpecificSelection.  # noqa: E501

        Billing address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use billingAddress field as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The billing_address of this CreditSpecificSelection.  # noqa: E501
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CreditSpecificSelection.

        Billing address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use billingAddress field as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param billing_address: The billing_address of this CreditSpecificSelection.  # noqa: E501
        :type: str
        """

        self._billing_address = billing_address

    @property
    def card_delivery_address(self):
        """Gets the card_delivery_address of this CreditSpecificSelection.  # noqa: E501

        Card delivery address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use cardDeliveryAddress field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The card_delivery_address of this CreditSpecificSelection.  # noqa: E501
        :rtype: str
        """
        return self._card_delivery_address

    @card_delivery_address.setter
    def card_delivery_address(self, card_delivery_address):
        """Sets the card_delivery_address of this CreditSpecificSelection.

        Card delivery address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use cardDeliveryAddress field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param card_delivery_address: The card_delivery_address of this CreditSpecificSelection.  # noqa: E501
        :type: str
        """

        self._card_delivery_address = card_delivery_address

    @property
    def pin_delivery_address(self):
        """Gets the pin_delivery_address of this CreditSpecificSelection.  # noqa: E501

        Delivery address  for card pin of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid values of this field with descriptions. You can use pinDeliveryAddress field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The pin_delivery_address of this CreditSpecificSelection.  # noqa: E501
        :rtype: str
        """
        return self._pin_delivery_address

    @pin_delivery_address.setter
    def pin_delivery_address(self, pin_delivery_address):
        """Sets the pin_delivery_address of this CreditSpecificSelection.

        Delivery address  for card pin of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid values of this field with descriptions. You can use pinDeliveryAddress field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param pin_delivery_address: The pin_delivery_address of this CreditSpecificSelection.  # noqa: E501
        :type: str
        """

        self._pin_delivery_address = pin_delivery_address

    @property
    def requested_credit_limit(self):
        """Gets the requested_credit_limit of this CreditSpecificSelection.  # noqa: E501

        Credit limit accepted by customer  # noqa: E501

        :return: The requested_credit_limit of this CreditSpecificSelection.  # noqa: E501
        :rtype: float
        """
        return self._requested_credit_limit

    @requested_credit_limit.setter
    def requested_credit_limit(self, requested_credit_limit):
        """Sets the requested_credit_limit of this CreditSpecificSelection.

        Credit limit accepted by customer  # noqa: E501

        :param requested_credit_limit: The requested_credit_limit of this CreditSpecificSelection.  # noqa: E501
        :type: float
        """

        self._requested_credit_limit = requested_credit_limit

    @property
    def offered_credit_limit_accepted_flag(self):
        """Gets the offered_credit_limit_accepted_flag of this CreditSpecificSelection.  # noqa: E501

        Consent to offered credit limit and If the customer has not accepted Bankâ€™s approved credit limit then requestedCreditLimit is mandatory. Valid values: true and false  # noqa: E501

        :return: The offered_credit_limit_accepted_flag of this CreditSpecificSelection.  # noqa: E501
        :rtype: bool
        """
        return self._offered_credit_limit_accepted_flag

    @offered_credit_limit_accepted_flag.setter
    def offered_credit_limit_accepted_flag(self, offered_credit_limit_accepted_flag):
        """Sets the offered_credit_limit_accepted_flag of this CreditSpecificSelection.

        Consent to offered credit limit and If the customer has not accepted Bankâ€™s approved credit limit then requestedCreditLimit is mandatory. Valid values: true and false  # noqa: E501

        :param offered_credit_limit_accepted_flag: The offered_credit_limit_accepted_flag of this CreditSpecificSelection.  # noqa: E501
        :type: bool
        """

        self._offered_credit_limit_accepted_flag = offered_credit_limit_accepted_flag

    @property
    def atm_required_flag(self):
        """Gets the atm_required_flag of this CreditSpecificSelection.  # noqa: E501

        Option to get ATM card along with product. Valid values: true and false  # noqa: E501

        :return: The atm_required_flag of this CreditSpecificSelection.  # noqa: E501
        :rtype: bool
        """
        return self._atm_required_flag

    @atm_required_flag.setter
    def atm_required_flag(self, atm_required_flag):
        """Sets the atm_required_flag of this CreditSpecificSelection.

        Option to get ATM card along with product. Valid values: true and false  # noqa: E501

        :param atm_required_flag: The atm_required_flag of this CreditSpecificSelection.  # noqa: E501
        :type: bool
        """

        self._atm_required_flag = atm_required_flag

    @property
    def cheque_book_required_flag(self):
        """Gets the cheque_book_required_flag of this CreditSpecificSelection.  # noqa: E501

        Option to get cheque book along with product. Valid values: true and false  # noqa: E501

        :return: The cheque_book_required_flag of this CreditSpecificSelection.  # noqa: E501
        :rtype: bool
        """
        return self._cheque_book_required_flag

    @cheque_book_required_flag.setter
    def cheque_book_required_flag(self, cheque_book_required_flag):
        """Sets the cheque_book_required_flag of this CreditSpecificSelection.

        Option to get cheque book along with product. Valid values: true and false  # noqa: E501

        :param cheque_book_required_flag: The cheque_book_required_flag of this CreditSpecificSelection.  # noqa: E501
        :type: bool
        """

        self._cheque_book_required_flag = cheque_book_required_flag

    @property
    def credit_limit_increase_indicator(self):
        """Gets the credit_limit_increase_indicator of this CreditSpecificSelection.  # noqa: E501

        Option  to increase credit limit. Valid values: true and false  # noqa: E501

        :return: The credit_limit_increase_indicator of this CreditSpecificSelection.  # noqa: E501
        :rtype: bool
        """
        return self._credit_limit_increase_indicator

    @credit_limit_increase_indicator.setter
    def credit_limit_increase_indicator(self, credit_limit_increase_indicator):
        """Sets the credit_limit_increase_indicator of this CreditSpecificSelection.

        Option  to increase credit limit. Valid values: true and false  # noqa: E501

        :param credit_limit_increase_indicator: The credit_limit_increase_indicator of this CreditSpecificSelection.  # noqa: E501
        :type: bool
        """

        self._credit_limit_increase_indicator = credit_limit_increase_indicator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditSpecificSelection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditSpecificSelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
