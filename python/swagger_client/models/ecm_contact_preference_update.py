# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ECMContactPreferenceUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'e_statement_enrollment_flag': 'bool',
        'e_statement_enrollment_option': 'str'
    }

    attribute_map = {
        'e_statement_enrollment_flag': 'eStatementEnrollmentFlag',
        'e_statement_enrollment_option': 'eStatementEnrollmentOption'
    }

    def __init__(self, e_statement_enrollment_flag=None, e_statement_enrollment_option=None):  # noqa: E501
        """ECMContactPreferenceUpdate - a model defined in Swagger"""  # noqa: E501
        self._e_statement_enrollment_flag = None
        self._e_statement_enrollment_option = None
        self.discriminator = None
        if e_statement_enrollment_flag is not None:
            self.e_statement_enrollment_flag = e_statement_enrollment_flag
        if e_statement_enrollment_option is not None:
            self.e_statement_enrollment_option = e_statement_enrollment_option

    @property
    def e_statement_enrollment_flag(self):
        """Gets the e_statement_enrollment_flag of this ECMContactPreferenceUpdate.  # noqa: E501

        Applicants subscription for receiving statement over email. Valid values: true and false  # noqa: E501

        :return: The e_statement_enrollment_flag of this ECMContactPreferenceUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._e_statement_enrollment_flag

    @e_statement_enrollment_flag.setter
    def e_statement_enrollment_flag(self, e_statement_enrollment_flag):
        """Sets the e_statement_enrollment_flag of this ECMContactPreferenceUpdate.

        Applicants subscription for receiving statement over email. Valid values: true and false  # noqa: E501

        :param e_statement_enrollment_flag: The e_statement_enrollment_flag of this ECMContactPreferenceUpdate.  # noqa: E501
        :type: bool
        """

        self._e_statement_enrollment_flag = e_statement_enrollment_flag

    @property
    def e_statement_enrollment_option(self):
        """Gets the e_statement_enrollment_option of this ECMContactPreferenceUpdate.  # noqa: E501

        Customer preference for eStatement. This is a reference data field. Please use /v1/utilities/referenceData/{eStatementEnrollmentOption} resource to get valid value of this field with description.  # noqa: E501

        :return: The e_statement_enrollment_option of this ECMContactPreferenceUpdate.  # noqa: E501
        :rtype: str
        """
        return self._e_statement_enrollment_option

    @e_statement_enrollment_option.setter
    def e_statement_enrollment_option(self, e_statement_enrollment_option):
        """Sets the e_statement_enrollment_option of this ECMContactPreferenceUpdate.

        Customer preference for eStatement. This is a reference data field. Please use /v1/utilities/referenceData/{eStatementEnrollmentOption} resource to get valid value of this field with description.  # noqa: E501

        :param e_statement_enrollment_option: The e_statement_enrollment_option of this ECMContactPreferenceUpdate.  # noqa: E501
        :type: str
        """

        self._e_statement_enrollment_option = e_statement_enrollment_option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECMContactPreferenceUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECMContactPreferenceUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
