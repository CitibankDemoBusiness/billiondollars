# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SuggestedDisbursementAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_account_number': 'str',
        'account_reference_key': 'str',
        'account_type': 'str',
        'bank_name': 'str',
        'current_dda_flag': 'bool'
    }

    attribute_map = {
        'display_account_number': 'displayAccountNumber',
        'account_reference_key': 'accountReferenceKey',
        'account_type': 'accountType',
        'bank_name': 'bankName',
        'current_dda_flag': 'currentDdaFlag'
    }

    def __init__(self, display_account_number=None, account_reference_key=None, account_type=None, bank_name=None, current_dda_flag=None):  # noqa: E501
        """SuggestedDisbursementAccount - a model defined in Swagger"""  # noqa: E501
        self._display_account_number = None
        self._account_reference_key = None
        self._account_type = None
        self._bank_name = None
        self._current_dda_flag = None
        self.discriminator = None
        if display_account_number is not None:
            self.display_account_number = display_account_number
        if account_reference_key is not None:
            self.account_reference_key = account_reference_key
        if account_type is not None:
            self.account_type = account_type
        if bank_name is not None:
            self.bank_name = bank_name
        if current_dda_flag is not None:
            self.current_dda_flag = current_dda_flag

    @property
    def display_account_number(self):
        """Gets the display_account_number of this SuggestedDisbursementAccount.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this SuggestedDisbursementAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this SuggestedDisbursementAccount.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this SuggestedDisbursementAccount.  # noqa: E501
        :type: str
        """

        self._display_account_number = display_account_number

    @property
    def account_reference_key(self):
        """Gets the account_reference_key of this SuggestedDisbursementAccount.  # noqa: E501

        Account reference key for linking account in a customer session.  # noqa: E501

        :return: The account_reference_key of this SuggestedDisbursementAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_reference_key

    @account_reference_key.setter
    def account_reference_key(self, account_reference_key):
        """Sets the account_reference_key of this SuggestedDisbursementAccount.

        Account reference key for linking account in a customer session.  # noqa: E501

        :param account_reference_key: The account_reference_key of this SuggestedDisbursementAccount.  # noqa: E501
        :type: str
        """

        self._account_reference_key = account_reference_key

    @property
    def account_type(self):
        """Gets the account_type of this SuggestedDisbursementAccount.  # noqa: E501

        Type of the account. This is a reference data field. Please use /v1/utilities/referenceData/{accountType} resource to get valid value of this field with description.  # noqa: E501

        :return: The account_type of this SuggestedDisbursementAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this SuggestedDisbursementAccount.

        Type of the account. This is a reference data field. Please use /v1/utilities/referenceData/{accountType} resource to get valid value of this field with description.  # noqa: E501

        :param account_type: The account_type of this SuggestedDisbursementAccount.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def bank_name(self):
        """Gets the bank_name of this SuggestedDisbursementAccount.  # noqa: E501

        bank name to be displayed to customer  # noqa: E501

        :return: The bank_name of this SuggestedDisbursementAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this SuggestedDisbursementAccount.

        bank name to be displayed to customer  # noqa: E501

        :param bank_name: The bank_name of this SuggestedDisbursementAccount.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def current_dda_flag(self):
        """Gets the current_dda_flag of this SuggestedDisbursementAccount.  # noqa: E501

        Identifies whether account is current direct disbursement account or not. Valid values: true and false  # noqa: E501

        :return: The current_dda_flag of this SuggestedDisbursementAccount.  # noqa: E501
        :rtype: bool
        """
        return self._current_dda_flag

    @current_dda_flag.setter
    def current_dda_flag(self, current_dda_flag):
        """Sets the current_dda_flag of this SuggestedDisbursementAccount.

        Identifies whether account is current direct disbursement account or not. Valid values: true and false  # noqa: E501

        :param current_dda_flag: The current_dda_flag of this SuggestedDisbursementAccount.  # noqa: E501
        :type: bool
        """

        self._current_dda_flag = current_dda_flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuggestedDisbursementAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuggestedDisbursementAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
