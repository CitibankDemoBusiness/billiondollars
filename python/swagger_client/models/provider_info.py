# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProviderInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'detail': 'str',
        'field_id': 'str'
    }

    attribute_map = {
        'code': 'code',
        'detail': 'detail',
        'field_id': 'fieldId'
    }

    def __init__(self, code=None, detail=None, field_id=None):  # noqa: E501
        """ProviderInfo - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._detail = None
        self._field_id = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if detail is not None:
            self.detail = detail
        if field_id is not None:
            self.field_id = field_id

    @property
    def code(self):
        """Gets the code of this ProviderInfo.  # noqa: E501

        Codes for overridable host errors, warning messages, or additional info.  # noqa: E501

        :return: The code of this ProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProviderInfo.

        Codes for overridable host errors, warning messages, or additional info.  # noqa: E501

        :param code: The code of this ProviderInfo.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this ProviderInfo.  # noqa: E501

        Description for the host error, warning, or additional info.  # noqa: E501

        :return: The detail of this ProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ProviderInfo.

        Description for the host error, warning, or additional info.  # noqa: E501

        :param detail: The detail of this ProviderInfo.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def field_id(self):
        """Gets the field_id of this ProviderInfo.  # noqa: E501

        The ICR step which generated the host error, warning, or additional info.  # noqa: E501

        :return: The field_id of this ProviderInfo.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this ProviderInfo.

        The ICR step which generated the host error, warning, or additional info.  # noqa: E501

        :param field_id: The field_id of this ProviderInfo.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProviderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
