# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'product_code': 'str',
        'application_stage': 'str',
        'application_received_date': 'date',
        'application_submitted_flag': 'bool',
        'ekyc_submitted_flag': 'bool',
        'marketing_campaign_offer_details': 'PendingMarketingCampaignOfferDetails'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'product_code': 'productCode',
        'application_stage': 'applicationStage',
        'application_received_date': 'applicationReceivedDate',
        'application_submitted_flag': 'applicationSubmittedFlag',
        'ekyc_submitted_flag': 'ekycSubmittedFlag',
        'marketing_campaign_offer_details': 'marketingCampaignOfferDetails'
    }

    def __init__(self, application_id=None, product_code=None, application_stage=None, application_received_date=None, application_submitted_flag=None, ekyc_submitted_flag=None, marketing_campaign_offer_details=None):  # noqa: E501
        """ApplicationDetails - a model defined in Swagger"""  # noqa: E501
        self._application_id = None
        self._product_code = None
        self._application_stage = None
        self._application_received_date = None
        self._application_submitted_flag = None
        self._ekyc_submitted_flag = None
        self._marketing_campaign_offer_details = None
        self.discriminator = None
        self.application_id = application_id
        if product_code is not None:
            self.product_code = product_code
        self.application_stage = application_stage
        if application_received_date is not None:
            self.application_received_date = application_received_date
        if application_submitted_flag is not None:
            self.application_submitted_flag = application_submitted_flag
        if ekyc_submitted_flag is not None:
            self.ekyc_submitted_flag = ekyc_submitted_flag
        if marketing_campaign_offer_details is not None:
            self.marketing_campaign_offer_details = marketing_campaign_offer_details

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationDetails.  # noqa: E501

        Unique identifier for the application.  # noqa: E501

        :return: The application_id of this ApplicationDetails.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationDetails.

        Unique identifier for the application.  # noqa: E501

        :param application_id: The application_id of this ApplicationDetails.  # noqa: E501
        :type: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def product_code(self):
        """Gets the product_code of this ApplicationDetails.  # noqa: E501

        A unique code that identifies the product.  # noqa: E501

        :return: The product_code of this ApplicationDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this ApplicationDetails.

        A unique code that identifies the product.  # noqa: E501

        :param product_code: The product_code of this ApplicationDetails.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def application_stage(self):
        """Gets the application_stage of this ApplicationDetails.  # noqa: E501

        Application Stage of an Application  # noqa: E501

        :return: The application_stage of this ApplicationDetails.  # noqa: E501
        :rtype: str
        """
        return self._application_stage

    @application_stage.setter
    def application_stage(self, application_stage):
        """Sets the application_stage of this ApplicationDetails.

        Application Stage of an Application  # noqa: E501

        :param application_stage: The application_stage of this ApplicationDetails.  # noqa: E501
        :type: str
        """
        if application_stage is None:
            raise ValueError("Invalid value for `application_stage`, must not be `None`")  # noqa: E501

        self._application_stage = application_stage

    @property
    def application_received_date(self):
        """Gets the application_received_date of this ApplicationDetails.  # noqa: E501

        Application Received Date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The application_received_date of this ApplicationDetails.  # noqa: E501
        :rtype: date
        """
        return self._application_received_date

    @application_received_date.setter
    def application_received_date(self, application_received_date):
        """Sets the application_received_date of this ApplicationDetails.

        Application Received Date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param application_received_date: The application_received_date of this ApplicationDetails.  # noqa: E501
        :type: date
        """

        self._application_received_date = application_received_date

    @property
    def application_submitted_flag(self):
        """Gets the application_submitted_flag of this ApplicationDetails.  # noqa: E501

        Flag to indicate if application is already submitted  # noqa: E501

        :return: The application_submitted_flag of this ApplicationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._application_submitted_flag

    @application_submitted_flag.setter
    def application_submitted_flag(self, application_submitted_flag):
        """Sets the application_submitted_flag of this ApplicationDetails.

        Flag to indicate if application is already submitted  # noqa: E501

        :param application_submitted_flag: The application_submitted_flag of this ApplicationDetails.  # noqa: E501
        :type: bool
        """

        self._application_submitted_flag = application_submitted_flag

    @property
    def ekyc_submitted_flag(self):
        """Gets the ekyc_submitted_flag of this ApplicationDetails.  # noqa: E501

        Flag to indicate if eKYC request is already submitted  # noqa: E501

        :return: The ekyc_submitted_flag of this ApplicationDetails.  # noqa: E501
        :rtype: bool
        """
        return self._ekyc_submitted_flag

    @ekyc_submitted_flag.setter
    def ekyc_submitted_flag(self, ekyc_submitted_flag):
        """Sets the ekyc_submitted_flag of this ApplicationDetails.

        Flag to indicate if eKYC request is already submitted  # noqa: E501

        :param ekyc_submitted_flag: The ekyc_submitted_flag of this ApplicationDetails.  # noqa: E501
        :type: bool
        """

        self._ekyc_submitted_flag = ekyc_submitted_flag

    @property
    def marketing_campaign_offer_details(self):
        """Gets the marketing_campaign_offer_details of this ApplicationDetails.  # noqa: E501


        :return: The marketing_campaign_offer_details of this ApplicationDetails.  # noqa: E501
        :rtype: PendingMarketingCampaignOfferDetails
        """
        return self._marketing_campaign_offer_details

    @marketing_campaign_offer_details.setter
    def marketing_campaign_offer_details(self, marketing_campaign_offer_details):
        """Sets the marketing_campaign_offer_details of this ApplicationDetails.


        :param marketing_campaign_offer_details: The marketing_campaign_offer_details of this ApplicationDetails.  # noqa: E501
        :type: PendingMarketingCampaignOfferDetails
        """

        self._marketing_campaign_offer_details = marketing_campaign_offer_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
