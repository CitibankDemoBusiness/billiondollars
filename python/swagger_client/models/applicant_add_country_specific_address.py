# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicantAddCountrySpecificAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit_number': 'str',
        'floor_number': 'str',
        'block_number': 'str',
        'building_name': 'str',
        'estate_name': 'str',
        'street_number': 'str',
        'street_name': 'str',
        'street_type': 'str'
    }

    attribute_map = {
        'unit_number': 'unitNumber',
        'floor_number': 'floorNumber',
        'block_number': 'blockNumber',
        'building_name': 'buildingName',
        'estate_name': 'estateName',
        'street_number': 'streetNumber',
        'street_name': 'streetName',
        'street_type': 'streetType'
    }

    def __init__(self, unit_number=None, floor_number=None, block_number=None, building_name=None, estate_name=None, street_number=None, street_name=None, street_type=None):  # noqa: E501
        """ApplicantAddCountrySpecificAddress - a model defined in Swagger"""  # noqa: E501
        self._unit_number = None
        self._floor_number = None
        self._block_number = None
        self._building_name = None
        self._estate_name = None
        self._street_number = None
        self._street_name = None
        self._street_type = None
        self.discriminator = None
        if unit_number is not None:
            self.unit_number = unit_number
        if floor_number is not None:
            self.floor_number = floor_number
        if block_number is not None:
            self.block_number = block_number
        if building_name is not None:
            self.building_name = building_name
        if estate_name is not None:
            self.estate_name = estate_name
        if street_number is not None:
            self.street_number = street_number
        if street_name is not None:
            self.street_name = street_name
        if street_type is not None:
            self.street_type = street_type

    @property
    def unit_number(self):
        """Gets the unit_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501

        Applicant's unit number  # noqa: E501

        :return: The unit_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :rtype: str
        """
        return self._unit_number

    @unit_number.setter
    def unit_number(self, unit_number):
        """Sets the unit_number of this ApplicantAddCountrySpecificAddress.

        Applicant's unit number  # noqa: E501

        :param unit_number: The unit_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :type: str
        """

        self._unit_number = unit_number

    @property
    def floor_number(self):
        """Gets the floor_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501

        Applicant's floor number  # noqa: E501

        :return: The floor_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :rtype: str
        """
        return self._floor_number

    @floor_number.setter
    def floor_number(self, floor_number):
        """Sets the floor_number of this ApplicantAddCountrySpecificAddress.

        Applicant's floor number  # noqa: E501

        :param floor_number: The floor_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :type: str
        """

        self._floor_number = floor_number

    @property
    def block_number(self):
        """Gets the block_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501

        Applicant's block number  # noqa: E501

        :return: The block_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :rtype: str
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number):
        """Sets the block_number of this ApplicantAddCountrySpecificAddress.

        Applicant's block number  # noqa: E501

        :param block_number: The block_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :type: str
        """

        self._block_number = block_number

    @property
    def building_name(self):
        """Gets the building_name of this ApplicantAddCountrySpecificAddress.  # noqa: E501

        Applicant's building name  # noqa: E501

        :return: The building_name of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """Sets the building_name of this ApplicantAddCountrySpecificAddress.

        Applicant's building name  # noqa: E501

        :param building_name: The building_name of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :type: str
        """

        self._building_name = building_name

    @property
    def estate_name(self):
        """Gets the estate_name of this ApplicantAddCountrySpecificAddress.  # noqa: E501

        Applicant's estate name  # noqa: E501

        :return: The estate_name of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :rtype: str
        """
        return self._estate_name

    @estate_name.setter
    def estate_name(self, estate_name):
        """Sets the estate_name of this ApplicantAddCountrySpecificAddress.

        Applicant's estate name  # noqa: E501

        :param estate_name: The estate_name of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :type: str
        """

        self._estate_name = estate_name

    @property
    def street_number(self):
        """Gets the street_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501

        Applicant's street number  # noqa: E501

        :return: The street_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this ApplicantAddCountrySpecificAddress.

        Applicant's street number  # noqa: E501

        :param street_number: The street_number of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def street_name(self):
        """Gets the street_name of this ApplicantAddCountrySpecificAddress.  # noqa: E501

        Applicant's street name  # noqa: E501

        :return: The street_name of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this ApplicantAddCountrySpecificAddress.

        Applicant's street name  # noqa: E501

        :param street_name: The street_name of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def street_type(self):
        """Gets the street_type of this ApplicantAddCountrySpecificAddress.  # noqa: E501

        Applicant's street type. This is a reference data field.Please use /v1/apac/utilities/referenceData/{streetType} resource to get valid value of this field with description. You can use streetType field name as the referenceCode parameter to retrieve the values  # noqa: E501

        :return: The street_type of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_type

    @street_type.setter
    def street_type(self, street_type):
        """Sets the street_type of this ApplicantAddCountrySpecificAddress.

        Applicant's street type. This is a reference data field.Please use /v1/apac/utilities/referenceData/{streetType} resource to get valid value of this field with description. You can use streetType field name as the referenceCode parameter to retrieve the values  # noqa: E501

        :param street_type: The street_type of this ApplicantAddCountrySpecificAddress.  # noqa: E501
        :type: str
        """

        self._street_type = street_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantAddCountrySpecificAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantAddCountrySpecificAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
