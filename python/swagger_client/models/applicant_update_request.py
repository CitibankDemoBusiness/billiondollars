# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicantUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'control_flow_id': 'str',
        'applicant': 'ApplicantUpdateApplicant',
        'credit_card_product': 'ApplicantUpdateCreditCardProduct'
    }

    attribute_map = {
        'control_flow_id': 'controlFlowId',
        'applicant': 'applicant',
        'credit_card_product': 'creditCardProduct'
    }

    def __init__(self, control_flow_id=None, applicant=None, credit_card_product=None):  # noqa: E501
        """ApplicantUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._control_flow_id = None
        self._applicant = None
        self._credit_card_product = None
        self.discriminator = None
        self.control_flow_id = control_flow_id
        self.applicant = applicant
        if credit_card_product is not None:
            self.credit_card_product = credit_card_product

    @property
    def control_flow_id(self):
        """Gets the control_flow_id of this ApplicantUpdateRequest.  # noqa: E501

        It is used to control the flow for subsequent requests in the session.  # noqa: E501

        :return: The control_flow_id of this ApplicantUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._control_flow_id

    @control_flow_id.setter
    def control_flow_id(self, control_flow_id):
        """Sets the control_flow_id of this ApplicantUpdateRequest.

        It is used to control the flow for subsequent requests in the session.  # noqa: E501

        :param control_flow_id: The control_flow_id of this ApplicantUpdateRequest.  # noqa: E501
        :type: str
        """
        if control_flow_id is None:
            raise ValueError("Invalid value for `control_flow_id`, must not be `None`")  # noqa: E501

        self._control_flow_id = control_flow_id

    @property
    def applicant(self):
        """Gets the applicant of this ApplicantUpdateRequest.  # noqa: E501


        :return: The applicant of this ApplicantUpdateRequest.  # noqa: E501
        :rtype: ApplicantUpdateApplicant
        """
        return self._applicant

    @applicant.setter
    def applicant(self, applicant):
        """Sets the applicant of this ApplicantUpdateRequest.


        :param applicant: The applicant of this ApplicantUpdateRequest.  # noqa: E501
        :type: ApplicantUpdateApplicant
        """
        if applicant is None:
            raise ValueError("Invalid value for `applicant`, must not be `None`")  # noqa: E501

        self._applicant = applicant

    @property
    def credit_card_product(self):
        """Gets the credit_card_product of this ApplicantUpdateRequest.  # noqa: E501


        :return: The credit_card_product of this ApplicantUpdateRequest.  # noqa: E501
        :rtype: ApplicantUpdateCreditCardProduct
        """
        return self._credit_card_product

    @credit_card_product.setter
    def credit_card_product(self, credit_card_product):
        """Sets the credit_card_product of this ApplicantUpdateRequest.


        :param credit_card_product: The credit_card_product of this ApplicantUpdateRequest.  # noqa: E501
        :type: ApplicantUpdateCreditCardProduct
        """

        self._credit_card_product = credit_card_product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
