# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FinancialInformationAdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_foreseeable_financial_changes': 'bool',
        'non_bank_debt_obligation_flag': 'bool',
        'expense_details': 'list[ExpenseDetails]',
        'income_details': 'list[IncomeDetails]',
        'existing_loan_details': 'list[ExistingLoanDetails]',
        'external_credit_card_details': 'list[ExternalCreditCardDetailsAdd]',
        'self_employed_business_asset_value': 'str'
    }

    attribute_map = {
        'has_foreseeable_financial_changes': 'hasForeseeableFinancialChanges',
        'non_bank_debt_obligation_flag': 'nonBankDebtObligationFlag',
        'expense_details': 'expenseDetails',
        'income_details': 'incomeDetails',
        'existing_loan_details': 'existingLoanDetails',
        'external_credit_card_details': 'externalCreditCardDetails',
        'self_employed_business_asset_value': 'selfEmployedBusinessAssetValue'
    }

    def __init__(self, has_foreseeable_financial_changes=None, non_bank_debt_obligation_flag=None, expense_details=None, income_details=None, existing_loan_details=None, external_credit_card_details=None, self_employed_business_asset_value=None):  # noqa: E501
        """FinancialInformationAdd - a model defined in Swagger"""  # noqa: E501
        self._has_foreseeable_financial_changes = None
        self._non_bank_debt_obligation_flag = None
        self._expense_details = None
        self._income_details = None
        self._existing_loan_details = None
        self._external_credit_card_details = None
        self._self_employed_business_asset_value = None
        self.discriminator = None
        if has_foreseeable_financial_changes is not None:
            self.has_foreseeable_financial_changes = has_foreseeable_financial_changes
        if non_bank_debt_obligation_flag is not None:
            self.non_bank_debt_obligation_flag = non_bank_debt_obligation_flag
        if expense_details is not None:
            self.expense_details = expense_details
        if income_details is not None:
            self.income_details = income_details
        if existing_loan_details is not None:
            self.existing_loan_details = existing_loan_details
        if external_credit_card_details is not None:
            self.external_credit_card_details = external_credit_card_details
        if self_employed_business_asset_value is not None:
            self.self_employed_business_asset_value = self_employed_business_asset_value

    @property
    def has_foreseeable_financial_changes(self):
        """Gets the has_foreseeable_financial_changes of this FinancialInformationAdd.  # noqa: E501

        Indicates whether any foreseeable changes in customer's financial circumstances.  # noqa: E501

        :return: The has_foreseeable_financial_changes of this FinancialInformationAdd.  # noqa: E501
        :rtype: bool
        """
        return self._has_foreseeable_financial_changes

    @has_foreseeable_financial_changes.setter
    def has_foreseeable_financial_changes(self, has_foreseeable_financial_changes):
        """Sets the has_foreseeable_financial_changes of this FinancialInformationAdd.

        Indicates whether any foreseeable changes in customer's financial circumstances.  # noqa: E501

        :param has_foreseeable_financial_changes: The has_foreseeable_financial_changes of this FinancialInformationAdd.  # noqa: E501
        :type: bool
        """

        self._has_foreseeable_financial_changes = has_foreseeable_financial_changes

    @property
    def non_bank_debt_obligation_flag(self):
        """Gets the non_bank_debt_obligation_flag of this FinancialInformationAdd.  # noqa: E501

        Indicates if the applicant has any loan with any non-banking financial organization.  # noqa: E501

        :return: The non_bank_debt_obligation_flag of this FinancialInformationAdd.  # noqa: E501
        :rtype: bool
        """
        return self._non_bank_debt_obligation_flag

    @non_bank_debt_obligation_flag.setter
    def non_bank_debt_obligation_flag(self, non_bank_debt_obligation_flag):
        """Sets the non_bank_debt_obligation_flag of this FinancialInformationAdd.

        Indicates if the applicant has any loan with any non-banking financial organization.  # noqa: E501

        :param non_bank_debt_obligation_flag: The non_bank_debt_obligation_flag of this FinancialInformationAdd.  # noqa: E501
        :type: bool
        """

        self._non_bank_debt_obligation_flag = non_bank_debt_obligation_flag

    @property
    def expense_details(self):
        """Gets the expense_details of this FinancialInformationAdd.  # noqa: E501


        :return: The expense_details of this FinancialInformationAdd.  # noqa: E501
        :rtype: list[ExpenseDetails]
        """
        return self._expense_details

    @expense_details.setter
    def expense_details(self, expense_details):
        """Sets the expense_details of this FinancialInformationAdd.


        :param expense_details: The expense_details of this FinancialInformationAdd.  # noqa: E501
        :type: list[ExpenseDetails]
        """

        self._expense_details = expense_details

    @property
    def income_details(self):
        """Gets the income_details of this FinancialInformationAdd.  # noqa: E501


        :return: The income_details of this FinancialInformationAdd.  # noqa: E501
        :rtype: list[IncomeDetails]
        """
        return self._income_details

    @income_details.setter
    def income_details(self, income_details):
        """Sets the income_details of this FinancialInformationAdd.


        :param income_details: The income_details of this FinancialInformationAdd.  # noqa: E501
        :type: list[IncomeDetails]
        """

        self._income_details = income_details

    @property
    def existing_loan_details(self):
        """Gets the existing_loan_details of this FinancialInformationAdd.  # noqa: E501


        :return: The existing_loan_details of this FinancialInformationAdd.  # noqa: E501
        :rtype: list[ExistingLoanDetails]
        """
        return self._existing_loan_details

    @existing_loan_details.setter
    def existing_loan_details(self, existing_loan_details):
        """Sets the existing_loan_details of this FinancialInformationAdd.


        :param existing_loan_details: The existing_loan_details of this FinancialInformationAdd.  # noqa: E501
        :type: list[ExistingLoanDetails]
        """

        self._existing_loan_details = existing_loan_details

    @property
    def external_credit_card_details(self):
        """Gets the external_credit_card_details of this FinancialInformationAdd.  # noqa: E501


        :return: The external_credit_card_details of this FinancialInformationAdd.  # noqa: E501
        :rtype: list[ExternalCreditCardDetailsAdd]
        """
        return self._external_credit_card_details

    @external_credit_card_details.setter
    def external_credit_card_details(self, external_credit_card_details):
        """Sets the external_credit_card_details of this FinancialInformationAdd.


        :param external_credit_card_details: The external_credit_card_details of this FinancialInformationAdd.  # noqa: E501
        :type: list[ExternalCreditCardDetailsAdd]
        """

        self._external_credit_card_details = external_credit_card_details

    @property
    def self_employed_business_asset_value(self):
        """Gets the self_employed_business_asset_value of this FinancialInformationAdd.  # noqa: E501

        This field is used to capture the total assets of  the self employed business. This is applicable only for Self Employed Business/ Professionals. This is a reference data field. Please use /v1/utilities/referenceData/{selfEmployedBusinessAssetValue} resource to get valid value of this field with description.  # noqa: E501

        :return: The self_employed_business_asset_value of this FinancialInformationAdd.  # noqa: E501
        :rtype: str
        """
        return self._self_employed_business_asset_value

    @self_employed_business_asset_value.setter
    def self_employed_business_asset_value(self, self_employed_business_asset_value):
        """Sets the self_employed_business_asset_value of this FinancialInformationAdd.

        This field is used to capture the total assets of  the self employed business. This is applicable only for Self Employed Business/ Professionals. This is a reference data field. Please use /v1/utilities/referenceData/{selfEmployedBusinessAssetValue} resource to get valid value of this field with description.  # noqa: E501

        :param self_employed_business_asset_value: The self_employed_business_asset_value of this FinancialInformationAdd.  # noqa: E501
        :type: str
        """

        self._self_employed_business_asset_value = self_employed_business_asset_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialInformationAdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialInformationAdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
