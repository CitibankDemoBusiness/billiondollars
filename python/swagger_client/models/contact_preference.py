# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactPreference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'send_sms_advice_fag': 'bool',
        'preferred_mailing_address': 'str'
    }

    attribute_map = {
        'send_sms_advice_fag': 'sendSmsAdviceFag',
        'preferred_mailing_address': 'preferredMailingAddress'
    }

    def __init__(self, send_sms_advice_fag=None, preferred_mailing_address=None):  # noqa: E501
        """ContactPreference - a model defined in Swagger"""  # noqa: E501
        self._send_sms_advice_fag = None
        self._preferred_mailing_address = None
        self.discriminator = None
        if send_sms_advice_fag is not None:
            self.send_sms_advice_fag = send_sms_advice_fag
        if preferred_mailing_address is not None:
            self.preferred_mailing_address = preferred_mailing_address

    @property
    def send_sms_advice_fag(self):
        """Gets the send_sms_advice_fag of this ContactPreference.  # noqa: E501

        Prospect is opting to receive advices via SMS. Valid values: true and false  # noqa: E501

        :return: The send_sms_advice_fag of this ContactPreference.  # noqa: E501
        :rtype: bool
        """
        return self._send_sms_advice_fag

    @send_sms_advice_fag.setter
    def send_sms_advice_fag(self, send_sms_advice_fag):
        """Sets the send_sms_advice_fag of this ContactPreference.

        Prospect is opting to receive advices via SMS. Valid values: true and false  # noqa: E501

        :param send_sms_advice_fag: The send_sms_advice_fag of this ContactPreference.  # noqa: E501
        :type: bool
        """

        self._send_sms_advice_fag = send_sms_advice_fag

    @property
    def preferred_mailing_address(self):
        """Gets the preferred_mailing_address of this ContactPreference.  # noqa: E501

        Preferred Mailing Address by prospect. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid values of this field with descriptions. You can use the field name as preferredMailingAddress referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The preferred_mailing_address of this ContactPreference.  # noqa: E501
        :rtype: str
        """
        return self._preferred_mailing_address

    @preferred_mailing_address.setter
    def preferred_mailing_address(self, preferred_mailing_address):
        """Sets the preferred_mailing_address of this ContactPreference.

        Preferred Mailing Address by prospect. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid values of this field with descriptions. You can use the field name as preferredMailingAddress referenceCode parameter to retrieve the values.  # noqa: E501

        :param preferred_mailing_address: The preferred_mailing_address of this ContactPreference.  # noqa: E501
        :type: str
        """

        self._preferred_mailing_address = preferred_mailing_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactPreference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactPreference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
