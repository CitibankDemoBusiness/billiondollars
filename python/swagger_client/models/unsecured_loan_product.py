# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnsecuredLoanProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_code': 'str',
        'source_code': 'str',
        'organization': 'str',
        'logo': 'str',
        'request_credit_shield': 'bool',
        'billing_address': 'str',
        'gift_code': 'str',
        'requested_loan_amount': 'float',
        'disbursement_option': 'str',
        'loan_purpose': 'str',
        'tenor': 'str',
        'tenor1': 'str',
        'penalty_scheme': 'str',
        'loan_repayment_details': 'LoanRepaymentDetails',
        'loan_payment_account_details': 'list[LoanPaymentAccountDetails]',
        'atm_pin_registration_flag': 'bool',
        'suggested_disbursement_accounts': 'list[SuggestedDisbursementAccount]'
    }

    attribute_map = {
        'product_code': 'productCode',
        'source_code': 'sourceCode',
        'organization': 'organization',
        'logo': 'logo',
        'request_credit_shield': 'requestCreditShield',
        'billing_address': 'billingAddress',
        'gift_code': 'giftCode',
        'requested_loan_amount': 'requestedLoanAmount',
        'disbursement_option': 'disbursementOption',
        'loan_purpose': 'loanPurpose',
        'tenor': 'tenor',
        'tenor1': 'tenor1',
        'penalty_scheme': 'penaltyScheme',
        'loan_repayment_details': 'loanRepaymentDetails',
        'loan_payment_account_details': 'loanPaymentAccountDetails',
        'atm_pin_registration_flag': 'atmPinRegistrationFlag',
        'suggested_disbursement_accounts': 'suggestedDisbursementAccounts'
    }

    def __init__(self, product_code=None, source_code=None, organization=None, logo=None, request_credit_shield=None, billing_address=None, gift_code=None, requested_loan_amount=None, disbursement_option=None, loan_purpose=None, tenor=None, tenor1=None, penalty_scheme=None, loan_repayment_details=None, loan_payment_account_details=None, atm_pin_registration_flag=None, suggested_disbursement_accounts=None):  # noqa: E501
        """UnsecuredLoanProduct - a model defined in Swagger"""  # noqa: E501
        self._product_code = None
        self._source_code = None
        self._organization = None
        self._logo = None
        self._request_credit_shield = None
        self._billing_address = None
        self._gift_code = None
        self._requested_loan_amount = None
        self._disbursement_option = None
        self._loan_purpose = None
        self._tenor = None
        self._tenor1 = None
        self._penalty_scheme = None
        self._loan_repayment_details = None
        self._loan_payment_account_details = None
        self._atm_pin_registration_flag = None
        self._suggested_disbursement_accounts = None
        self.discriminator = None
        self.product_code = product_code
        self.source_code = source_code
        self.organization = organization
        self.logo = logo
        if request_credit_shield is not None:
            self.request_credit_shield = request_credit_shield
        if billing_address is not None:
            self.billing_address = billing_address
        if gift_code is not None:
            self.gift_code = gift_code
        if requested_loan_amount is not None:
            self.requested_loan_amount = requested_loan_amount
        if disbursement_option is not None:
            self.disbursement_option = disbursement_option
        if loan_purpose is not None:
            self.loan_purpose = loan_purpose
        if tenor is not None:
            self.tenor = tenor
        if tenor1 is not None:
            self.tenor1 = tenor1
        if penalty_scheme is not None:
            self.penalty_scheme = penalty_scheme
        if loan_repayment_details is not None:
            self.loan_repayment_details = loan_repayment_details
        if loan_payment_account_details is not None:
            self.loan_payment_account_details = loan_payment_account_details
        if atm_pin_registration_flag is not None:
            self.atm_pin_registration_flag = atm_pin_registration_flag
        if suggested_disbursement_accounts is not None:
            self.suggested_disbursement_accounts = suggested_disbursement_accounts

    @property
    def product_code(self):
        """Gets the product_code of this UnsecuredLoanProduct.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this UnsecuredLoanProduct.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")  # noqa: E501

        self._product_code = product_code

    @property
    def source_code(self):
        """Gets the source_code of this UnsecuredLoanProduct.  # noqa: E501

        A source code to identify the product  # noqa: E501

        :return: The source_code of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._source_code

    @source_code.setter
    def source_code(self, source_code):
        """Sets the source_code of this UnsecuredLoanProduct.

        A source code to identify the product  # noqa: E501

        :param source_code: The source_code of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """
        if source_code is None:
            raise ValueError("Invalid value for `source_code`, must not be `None`")  # noqa: E501

        self._source_code = source_code

    @property
    def organization(self):
        """Gets the organization of this UnsecuredLoanProduct.  # noqa: E501

        Card issuing Organisation code  # noqa: E501

        :return: The organization of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UnsecuredLoanProduct.

        Card issuing Organisation code  # noqa: E501

        :param organization: The organization of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def logo(self):
        """Gets the logo of this UnsecuredLoanProduct.  # noqa: E501

        Product logo to identify the product  # noqa: E501

        :return: The logo of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this UnsecuredLoanProduct.

        Product logo to identify the product  # noqa: E501

        :param logo: The logo of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """
        if logo is None:
            raise ValueError("Invalid value for `logo`, must not be `None`")  # noqa: E501

        self._logo = logo

    @property
    def request_credit_shield(self):
        """Gets the request_credit_shield of this UnsecuredLoanProduct.  # noqa: E501

        Insurance enrolment for outstanding balance on the card. Valid values: true and false  # noqa: E501

        :return: The request_credit_shield of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._request_credit_shield

    @request_credit_shield.setter
    def request_credit_shield(self, request_credit_shield):
        """Sets the request_credit_shield of this UnsecuredLoanProduct.

        Insurance enrolment for outstanding balance on the card. Valid values: true and false  # noqa: E501

        :param request_credit_shield: The request_credit_shield of this UnsecuredLoanProduct.  # noqa: E501
        :type: bool
        """

        self._request_credit_shield = request_credit_shield

    @property
    def billing_address(self):
        """Gets the billing_address of this UnsecuredLoanProduct.  # noqa: E501

        Billing address of applicant. This is a reference data field. Please use /v1/utilities/referenceData/{addressType} resource to get valid value of this field with description.  # noqa: E501

        :return: The billing_address of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this UnsecuredLoanProduct.

        Billing address of applicant. This is a reference data field. Please use /v1/utilities/referenceData/{addressType} resource to get valid value of this field with description.  # noqa: E501

        :param billing_address: The billing_address of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """

        self._billing_address = billing_address

    @property
    def gift_code(self):
        """Gets the gift_code of this UnsecuredLoanProduct.  # noqa: E501

        A  unique code that identifies the gift offered along with the product  # noqa: E501

        :return: The gift_code of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._gift_code

    @gift_code.setter
    def gift_code(self, gift_code):
        """Sets the gift_code of this UnsecuredLoanProduct.

        A  unique code that identifies the gift offered along with the product  # noqa: E501

        :param gift_code: The gift_code of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """

        self._gift_code = gift_code

    @property
    def requested_loan_amount(self):
        """Gets the requested_loan_amount of this UnsecuredLoanProduct.  # noqa: E501

        Requested loan amount  # noqa: E501

        :return: The requested_loan_amount of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: float
        """
        return self._requested_loan_amount

    @requested_loan_amount.setter
    def requested_loan_amount(self, requested_loan_amount):
        """Sets the requested_loan_amount of this UnsecuredLoanProduct.

        Requested loan amount  # noqa: E501

        :param requested_loan_amount: The requested_loan_amount of this UnsecuredLoanProduct.  # noqa: E501
        :type: float
        """

        self._requested_loan_amount = requested_loan_amount

    @property
    def disbursement_option(self):
        """Gets the disbursement_option of this UnsecuredLoanProduct.  # noqa: E501

        Provide the list of the options available to receive the disbursement of loan amount. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.  # noqa: E501

        :return: The disbursement_option of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._disbursement_option

    @disbursement_option.setter
    def disbursement_option(self, disbursement_option):
        """Sets the disbursement_option of this UnsecuredLoanProduct.

        Provide the list of the options available to receive the disbursement of loan amount. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.  # noqa: E501

        :param disbursement_option: The disbursement_option of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """

        self._disbursement_option = disbursement_option

    @property
    def loan_purpose(self):
        """Gets the loan_purpose of this UnsecuredLoanProduct.  # noqa: E501

        This field is to indicate the purpose of loan. This is a reference data field.This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.  # noqa: E501

        :return: The loan_purpose of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._loan_purpose

    @loan_purpose.setter
    def loan_purpose(self, loan_purpose):
        """Sets the loan_purpose of this UnsecuredLoanProduct.

        This field is to indicate the purpose of loan. This is a reference data field.This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.  # noqa: E501

        :param loan_purpose: The loan_purpose of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """

        self._loan_purpose = loan_purpose

    @property
    def tenor(self):
        """Gets the tenor of this UnsecuredLoanProduct.  # noqa: E501

        Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description. You can use tenor field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The tenor of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._tenor

    @tenor.setter
    def tenor(self, tenor):
        """Sets the tenor of this UnsecuredLoanProduct.

        Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description. You can use tenor field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param tenor: The tenor of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """

        self._tenor = tenor

    @property
    def tenor1(self):
        """Gets the tenor1 of this UnsecuredLoanProduct.  # noqa: E501

        This refers to the number of months of the 1st tenor. For Tiered-rate UPL , customer enjoys/ endure lower/ higher rate in the first few months.This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description.   # noqa: E501

        :return: The tenor1 of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._tenor1

    @tenor1.setter
    def tenor1(self, tenor1):
        """Sets the tenor1 of this UnsecuredLoanProduct.

        This refers to the number of months of the 1st tenor. For Tiered-rate UPL , customer enjoys/ endure lower/ higher rate in the first few months.This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description.   # noqa: E501

        :param tenor1: The tenor1 of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """

        self._tenor1 = tenor1

    @property
    def penalty_scheme(self):
        """Gets the penalty_scheme of this UnsecuredLoanProduct.  # noqa: E501

        This field is used to determine the penalty that will be applied to customer who do early principal repayment/loan closure.It is to be selected by the customer. This is a reference data field. Please use /v1/utilities/referenceData/{penaltyScheme} resource to get valid value of this field with description.  # noqa: E501

        :return: The penalty_scheme of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: str
        """
        return self._penalty_scheme

    @penalty_scheme.setter
    def penalty_scheme(self, penalty_scheme):
        """Sets the penalty_scheme of this UnsecuredLoanProduct.

        This field is used to determine the penalty that will be applied to customer who do early principal repayment/loan closure.It is to be selected by the customer. This is a reference data field. Please use /v1/utilities/referenceData/{penaltyScheme} resource to get valid value of this field with description.  # noqa: E501

        :param penalty_scheme: The penalty_scheme of this UnsecuredLoanProduct.  # noqa: E501
        :type: str
        """

        self._penalty_scheme = penalty_scheme

    @property
    def loan_repayment_details(self):
        """Gets the loan_repayment_details of this UnsecuredLoanProduct.  # noqa: E501


        :return: The loan_repayment_details of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: LoanRepaymentDetails
        """
        return self._loan_repayment_details

    @loan_repayment_details.setter
    def loan_repayment_details(self, loan_repayment_details):
        """Sets the loan_repayment_details of this UnsecuredLoanProduct.


        :param loan_repayment_details: The loan_repayment_details of this UnsecuredLoanProduct.  # noqa: E501
        :type: LoanRepaymentDetails
        """

        self._loan_repayment_details = loan_repayment_details

    @property
    def loan_payment_account_details(self):
        """Gets the loan_payment_account_details of this UnsecuredLoanProduct.  # noqa: E501


        :return: The loan_payment_account_details of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: list[LoanPaymentAccountDetails]
        """
        return self._loan_payment_account_details

    @loan_payment_account_details.setter
    def loan_payment_account_details(self, loan_payment_account_details):
        """Sets the loan_payment_account_details of this UnsecuredLoanProduct.


        :param loan_payment_account_details: The loan_payment_account_details of this UnsecuredLoanProduct.  # noqa: E501
        :type: list[LoanPaymentAccountDetails]
        """

        self._loan_payment_account_details = loan_payment_account_details

    @property
    def atm_pin_registration_flag(self):
        """Gets the atm_pin_registration_flag of this UnsecuredLoanProduct.  # noqa: E501

        Flag to indicate if ATM PIN for the card is registered already by customer.  # noqa: E501

        :return: The atm_pin_registration_flag of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: bool
        """
        return self._atm_pin_registration_flag

    @atm_pin_registration_flag.setter
    def atm_pin_registration_flag(self, atm_pin_registration_flag):
        """Sets the atm_pin_registration_flag of this UnsecuredLoanProduct.

        Flag to indicate if ATM PIN for the card is registered already by customer.  # noqa: E501

        :param atm_pin_registration_flag: The atm_pin_registration_flag of this UnsecuredLoanProduct.  # noqa: E501
        :type: bool
        """

        self._atm_pin_registration_flag = atm_pin_registration_flag

    @property
    def suggested_disbursement_accounts(self):
        """Gets the suggested_disbursement_accounts of this UnsecuredLoanProduct.  # noqa: E501


        :return: The suggested_disbursement_accounts of this UnsecuredLoanProduct.  # noqa: E501
        :rtype: list[SuggestedDisbursementAccount]
        """
        return self._suggested_disbursement_accounts

    @suggested_disbursement_accounts.setter
    def suggested_disbursement_accounts(self, suggested_disbursement_accounts):
        """Sets the suggested_disbursement_accounts of this UnsecuredLoanProduct.


        :param suggested_disbursement_accounts: The suggested_disbursement_accounts of this UnsecuredLoanProduct.  # noqa: E501
        :type: list[SuggestedDisbursementAccount]
        """

        self._suggested_disbursement_accounts = suggested_disbursement_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnsecuredLoanProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnsecuredLoanProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
