# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ECMDemographicsUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marital_status': 'str',
        'residency_status': 'str',
        'correspondence_language_code': 'str',
        'place_of_birth': 'str'
    }

    attribute_map = {
        'marital_status': 'maritalStatus',
        'residency_status': 'residencyStatus',
        'correspondence_language_code': 'correspondenceLanguageCode',
        'place_of_birth': 'placeOfBirth'
    }

    def __init__(self, marital_status=None, residency_status=None, correspondence_language_code=None, place_of_birth=None):  # noqa: E501
        """ECMDemographicsUpdate - a model defined in Swagger"""  # noqa: E501
        self._marital_status = None
        self._residency_status = None
        self._correspondence_language_code = None
        self._place_of_birth = None
        self.discriminator = None
        if marital_status is not None:
            self.marital_status = marital_status
        if residency_status is not None:
            self.residency_status = residency_status
        if correspondence_language_code is not None:
            self.correspondence_language_code = correspondence_language_code
        if place_of_birth is not None:
            self.place_of_birth = place_of_birth

    @property
    def marital_status(self):
        """Gets the marital_status of this ECMDemographicsUpdate.  # noqa: E501

        Applicants marital status. This is a reference data field. Please use /v1/utilities/referenceData/{maritalStatus} resource to get valid value of this field with description.  # noqa: E501

        :return: The marital_status of this ECMDemographicsUpdate.  # noqa: E501
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this ECMDemographicsUpdate.

        Applicants marital status. This is a reference data field. Please use /v1/utilities/referenceData/{maritalStatus} resource to get valid value of this field with description.  # noqa: E501

        :param marital_status: The marital_status of this ECMDemographicsUpdate.  # noqa: E501
        :type: str
        """

        self._marital_status = marital_status

    @property
    def residency_status(self):
        """Gets the residency_status of this ECMDemographicsUpdate.  # noqa: E501

        Indicate status of residence. This is a reference data field. Please use /v1/utilities/referenceData/{residenceStatus} resource to get valid value of this field with description.  # noqa: E501

        :return: The residency_status of this ECMDemographicsUpdate.  # noqa: E501
        :rtype: str
        """
        return self._residency_status

    @residency_status.setter
    def residency_status(self, residency_status):
        """Sets the residency_status of this ECMDemographicsUpdate.

        Indicate status of residence. This is a reference data field. Please use /v1/utilities/referenceData/{residenceStatus} resource to get valid value of this field with description.  # noqa: E501

        :param residency_status: The residency_status of this ECMDemographicsUpdate.  # noqa: E501
        :type: str
        """

        self._residency_status = residency_status

    @property
    def correspondence_language_code(self):
        """Gets the correspondence_language_code of this ECMDemographicsUpdate.  # noqa: E501

        Code for correspondence language of applicant. This is a reference data field. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description.  # noqa: E501

        :return: The correspondence_language_code of this ECMDemographicsUpdate.  # noqa: E501
        :rtype: str
        """
        return self._correspondence_language_code

    @correspondence_language_code.setter
    def correspondence_language_code(self, correspondence_language_code):
        """Sets the correspondence_language_code of this ECMDemographicsUpdate.

        Code for correspondence language of applicant. This is a reference data field. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description.  # noqa: E501

        :param correspondence_language_code: The correspondence_language_code of this ECMDemographicsUpdate.  # noqa: E501
        :type: str
        """

        self._correspondence_language_code = correspondence_language_code

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this ECMDemographicsUpdate.  # noqa: E501

        Applicants place of birth  # noqa: E501

        :return: The place_of_birth of this ECMDemographicsUpdate.  # noqa: E501
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this ECMDemographicsUpdate.

        Applicants place of birth  # noqa: E501

        :param place_of_birth: The place_of_birth of this ECMDemographicsUpdate.  # noqa: E501
        :type: str
        """

        self._place_of_birth = place_of_birth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECMDemographicsUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECMDemographicsUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
