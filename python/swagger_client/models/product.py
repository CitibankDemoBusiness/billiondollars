# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_code': 'str',
        'product_description': 'str',
        'source_code': 'str',
        'logo': 'str',
        'organisation': 'str',
        'product_type': 'str',
        'minimum_credit_limit_amount': 'float',
        'maximum_credit_limit_amount': 'float',
        'annual_fee_amount': 'float',
        'currency_code': 'str',
        'interest_rate': 'float',
        'late_payment_fee': 'float',
        'important_informations': 'str',
        'terms_and_conditions': 'str',
        'agreement_start_date': 'date',
        'agreement_expiry_date': 'date'
    }

    attribute_map = {
        'product_code': 'productCode',
        'product_description': 'productDescription',
        'source_code': 'sourceCode',
        'logo': 'logo',
        'organisation': 'organisation',
        'product_type': 'productType',
        'minimum_credit_limit_amount': 'minimumCreditLimitAmount',
        'maximum_credit_limit_amount': 'maximumCreditLimitAmount',
        'annual_fee_amount': 'annualFeeAmount',
        'currency_code': 'currencyCode',
        'interest_rate': 'interestRate',
        'late_payment_fee': 'latePaymentFee',
        'important_informations': 'importantInformations',
        'terms_and_conditions': 'termsAndConditions',
        'agreement_start_date': 'agreementStartDate',
        'agreement_expiry_date': 'agreementExpiryDate'
    }

    def __init__(self, product_code=None, product_description=None, source_code=None, logo=None, organisation=None, product_type=None, minimum_credit_limit_amount=None, maximum_credit_limit_amount=None, annual_fee_amount=None, currency_code=None, interest_rate=None, late_payment_fee=None, important_informations=None, terms_and_conditions=None, agreement_start_date=None, agreement_expiry_date=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501
        self._product_code = None
        self._product_description = None
        self._source_code = None
        self._logo = None
        self._organisation = None
        self._product_type = None
        self._minimum_credit_limit_amount = None
        self._maximum_credit_limit_amount = None
        self._annual_fee_amount = None
        self._currency_code = None
        self._interest_rate = None
        self._late_payment_fee = None
        self._important_informations = None
        self._terms_and_conditions = None
        self._agreement_start_date = None
        self._agreement_expiry_date = None
        self.discriminator = None
        self.product_code = product_code
        self.product_description = product_description
        self.source_code = source_code
        if logo is not None:
            self.logo = logo
        if organisation is not None:
            self.organisation = organisation
        self.product_type = product_type
        self.minimum_credit_limit_amount = minimum_credit_limit_amount
        self.maximum_credit_limit_amount = maximum_credit_limit_amount
        if annual_fee_amount is not None:
            self.annual_fee_amount = annual_fee_amount
        self.currency_code = currency_code
        self.interest_rate = interest_rate
        self.late_payment_fee = late_payment_fee
        self.important_informations = important_informations
        self.terms_and_conditions = terms_and_conditions
        self.agreement_start_date = agreement_start_date
        self.agreement_expiry_date = agreement_expiry_date

    @property
    def product_code(self):
        """Gets the product_code of this Product.  # noqa: E501

        A unique code that identifies the product.  # noqa: E501

        :return: The product_code of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this Product.

        A unique code that identifies the product.  # noqa: E501

        :param product_code: The product_code of this Product.  # noqa: E501
        :type: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")  # noqa: E501

        self._product_code = product_code

    @property
    def product_description(self):
        """Gets the product_description of this Product.  # noqa: E501

        Detailed information about offered product  # noqa: E501

        :return: The product_description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this Product.

        Detailed information about offered product  # noqa: E501

        :param product_description: The product_description of this Product.  # noqa: E501
        :type: str
        """
        if product_description is None:
            raise ValueError("Invalid value for `product_description`, must not be `None`")  # noqa: E501

        self._product_description = product_description

    @property
    def source_code(self):
        """Gets the source_code of this Product.  # noqa: E501

        A source code to identify the product.  # noqa: E501

        :return: The source_code of this Product.  # noqa: E501
        :rtype: str
        """
        return self._source_code

    @source_code.setter
    def source_code(self, source_code):
        """Sets the source_code of this Product.

        A source code to identify the product.  # noqa: E501

        :param source_code: The source_code of this Product.  # noqa: E501
        :type: str
        """
        if source_code is None:
            raise ValueError("Invalid value for `source_code`, must not be `None`")  # noqa: E501

        self._source_code = source_code

    @property
    def logo(self):
        """Gets the logo of this Product.  # noqa: E501

        Logo to identify the product.  # noqa: E501

        :return: The logo of this Product.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Product.

        Logo to identify the product.  # noqa: E501

        :param logo: The logo of this Product.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def organisation(self):
        """Gets the organisation of this Product.  # noqa: E501

        Card issuing organization name  # noqa: E501

        :return: The organisation of this Product.  # noqa: E501
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this Product.

        Card issuing organization name  # noqa: E501

        :param organisation: The organisation of this Product.  # noqa: E501
        :type: str
        """

        self._organisation = organisation

    @property
    def product_type(self):
        """Gets the product_type of this Product.  # noqa: E501

        Type of the product.This is a reference data field. Please use /v1/apac/utilities/referenceData/{productType} resource to get valid values of this field with descriptions.  # noqa: E501

        :return: The product_type of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this Product.

        Type of the product.This is a reference data field. Please use /v1/apac/utilities/referenceData/{productType} resource to get valid values of this field with descriptions.  # noqa: E501

        :param product_type: The product_type of this Product.  # noqa: E501
        :type: str
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")  # noqa: E501

        self._product_type = product_type

    @property
    def minimum_credit_limit_amount(self):
        """Gets the minimum_credit_limit_amount of this Product.  # noqa: E501

        Minimum credit limit amount for the product type  # noqa: E501

        :return: The minimum_credit_limit_amount of this Product.  # noqa: E501
        :rtype: float
        """
        return self._minimum_credit_limit_amount

    @minimum_credit_limit_amount.setter
    def minimum_credit_limit_amount(self, minimum_credit_limit_amount):
        """Sets the minimum_credit_limit_amount of this Product.

        Minimum credit limit amount for the product type  # noqa: E501

        :param minimum_credit_limit_amount: The minimum_credit_limit_amount of this Product.  # noqa: E501
        :type: float
        """
        if minimum_credit_limit_amount is None:
            raise ValueError("Invalid value for `minimum_credit_limit_amount`, must not be `None`")  # noqa: E501

        self._minimum_credit_limit_amount = minimum_credit_limit_amount

    @property
    def maximum_credit_limit_amount(self):
        """Gets the maximum_credit_limit_amount of this Product.  # noqa: E501

        Maximum credit limit amount for the product type  # noqa: E501

        :return: The maximum_credit_limit_amount of this Product.  # noqa: E501
        :rtype: float
        """
        return self._maximum_credit_limit_amount

    @maximum_credit_limit_amount.setter
    def maximum_credit_limit_amount(self, maximum_credit_limit_amount):
        """Sets the maximum_credit_limit_amount of this Product.

        Maximum credit limit amount for the product type  # noqa: E501

        :param maximum_credit_limit_amount: The maximum_credit_limit_amount of this Product.  # noqa: E501
        :type: float
        """
        if maximum_credit_limit_amount is None:
            raise ValueError("Invalid value for `maximum_credit_limit_amount`, must not be `None`")  # noqa: E501

        self._maximum_credit_limit_amount = maximum_credit_limit_amount

    @property
    def annual_fee_amount(self):
        """Gets the annual_fee_amount of this Product.  # noqa: E501

        Annual fees for product type and source code  # noqa: E501

        :return: The annual_fee_amount of this Product.  # noqa: E501
        :rtype: float
        """
        return self._annual_fee_amount

    @annual_fee_amount.setter
    def annual_fee_amount(self, annual_fee_amount):
        """Sets the annual_fee_amount of this Product.

        Annual fees for product type and source code  # noqa: E501

        :param annual_fee_amount: The annual_fee_amount of this Product.  # noqa: E501
        :type: float
        """

        self._annual_fee_amount = annual_fee_amount

    @property
    def currency_code(self):
        """Gets the currency_code of this Product.  # noqa: E501

        The currency code in ISO 4217 format  # noqa: E501

        :return: The currency_code of this Product.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Product.

        The currency code in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this Product.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def interest_rate(self):
        """Gets the interest_rate of this Product.  # noqa: E501

        Annual interest rate  # noqa: E501

        :return: The interest_rate of this Product.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this Product.

        Annual interest rate  # noqa: E501

        :param interest_rate: The interest_rate of this Product.  # noqa: E501
        :type: float
        """
        if interest_rate is None:
            raise ValueError("Invalid value for `interest_rate`, must not be `None`")  # noqa: E501

        self._interest_rate = interest_rate

    @property
    def late_payment_fee(self):
        """Gets the late_payment_fee of this Product.  # noqa: E501

        Late payment fee for the product type and source code  # noqa: E501

        :return: The late_payment_fee of this Product.  # noqa: E501
        :rtype: float
        """
        return self._late_payment_fee

    @late_payment_fee.setter
    def late_payment_fee(self, late_payment_fee):
        """Sets the late_payment_fee of this Product.

        Late payment fee for the product type and source code  # noqa: E501

        :param late_payment_fee: The late_payment_fee of this Product.  # noqa: E501
        :type: float
        """
        if late_payment_fee is None:
            raise ValueError("Invalid value for `late_payment_fee`, must not be `None`")  # noqa: E501

        self._late_payment_fee = late_payment_fee

    @property
    def important_informations(self):
        """Gets the important_informations of this Product.  # noqa: E501

        Important informations to know about the product type  # noqa: E501

        :return: The important_informations of this Product.  # noqa: E501
        :rtype: str
        """
        return self._important_informations

    @important_informations.setter
    def important_informations(self, important_informations):
        """Sets the important_informations of this Product.

        Important informations to know about the product type  # noqa: E501

        :param important_informations: The important_informations of this Product.  # noqa: E501
        :type: str
        """
        if important_informations is None:
            raise ValueError("Invalid value for `important_informations`, must not be `None`")  # noqa: E501

        self._important_informations = important_informations

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this Product.  # noqa: E501

        Fees, charges and credit criteria apply. Terms and conditions apply and are available upon request. Cards are offered, issued and administered by Citigroup Pty Limited.Allow up to 15 working days to process your Application subject to verification.  # noqa: E501

        :return: The terms_and_conditions of this Product.  # noqa: E501
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this Product.

        Fees, charges and credit criteria apply. Terms and conditions apply and are available upon request. Cards are offered, issued and administered by Citigroup Pty Limited.Allow up to 15 working days to process your Application subject to verification.  # noqa: E501

        :param terms_and_conditions: The terms_and_conditions of this Product.  # noqa: E501
        :type: str
        """
        if terms_and_conditions is None:
            raise ValueError("Invalid value for `terms_and_conditions`, must not be `None`")  # noqa: E501

        self._terms_and_conditions = terms_and_conditions

    @property
    def agreement_start_date(self):
        """Gets the agreement_start_date of this Product.  # noqa: E501

        Product validity start date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The agreement_start_date of this Product.  # noqa: E501
        :rtype: date
        """
        return self._agreement_start_date

    @agreement_start_date.setter
    def agreement_start_date(self, agreement_start_date):
        """Sets the agreement_start_date of this Product.

        Product validity start date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param agreement_start_date: The agreement_start_date of this Product.  # noqa: E501
        :type: date
        """
        if agreement_start_date is None:
            raise ValueError("Invalid value for `agreement_start_date`, must not be `None`")  # noqa: E501

        self._agreement_start_date = agreement_start_date

    @property
    def agreement_expiry_date(self):
        """Gets the agreement_expiry_date of this Product.  # noqa: E501

        Product validity expiry date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The agreement_expiry_date of this Product.  # noqa: E501
        :rtype: date
        """
        return self._agreement_expiry_date

    @agreement_expiry_date.setter
    def agreement_expiry_date(self, agreement_expiry_date):
        """Sets the agreement_expiry_date of this Product.

        Product validity expiry date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param agreement_expiry_date: The agreement_expiry_date of this Product.  # noqa: E501
        :type: date
        """
        if agreement_expiry_date is None:
            raise ValueError("Invalid value for `agreement_expiry_date`, must not be `None`")  # noqa: E501

        self._agreement_expiry_date = agreement_expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
