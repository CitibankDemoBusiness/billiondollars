# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Applicant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identification_document_details': 'list[IdentificationDocumentDetails]',
        'name': 'Name',
        'phone': 'list[Phone]',
        'email': 'Email',
        'demographics': 'Demographics'
    }

    attribute_map = {
        'identification_document_details': 'identificationDocumentDetails',
        'name': 'name',
        'phone': 'phone',
        'email': 'email',
        'demographics': 'demographics'
    }

    def __init__(self, identification_document_details=None, name=None, phone=None, email=None, demographics=None):  # noqa: E501
        """Applicant - a model defined in Swagger"""  # noqa: E501
        self._identification_document_details = None
        self._name = None
        self._phone = None
        self._email = None
        self._demographics = None
        self.discriminator = None
        if identification_document_details is not None:
            self.identification_document_details = identification_document_details
        if name is not None:
            self.name = name
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email
        if demographics is not None:
            self.demographics = demographics

    @property
    def identification_document_details(self):
        """Gets the identification_document_details of this Applicant.  # noqa: E501


        :return: The identification_document_details of this Applicant.  # noqa: E501
        :rtype: list[IdentificationDocumentDetails]
        """
        return self._identification_document_details

    @identification_document_details.setter
    def identification_document_details(self, identification_document_details):
        """Sets the identification_document_details of this Applicant.


        :param identification_document_details: The identification_document_details of this Applicant.  # noqa: E501
        :type: list[IdentificationDocumentDetails]
        """

        self._identification_document_details = identification_document_details

    @property
    def name(self):
        """Gets the name of this Applicant.  # noqa: E501


        :return: The name of this Applicant.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Applicant.


        :param name: The name of this Applicant.  # noqa: E501
        :type: Name
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this Applicant.  # noqa: E501


        :return: The phone of this Applicant.  # noqa: E501
        :rtype: list[Phone]
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Applicant.


        :param phone: The phone of this Applicant.  # noqa: E501
        :type: list[Phone]
        """

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this Applicant.  # noqa: E501


        :return: The email of this Applicant.  # noqa: E501
        :rtype: Email
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Applicant.


        :param email: The email of this Applicant.  # noqa: E501
        :type: Email
        """

        self._email = email

    @property
    def demographics(self):
        """Gets the demographics of this Applicant.  # noqa: E501


        :return: The demographics of this Applicant.  # noqa: E501
        :rtype: Demographics
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics):
        """Sets the demographics of this Applicant.


        :param demographics: The demographics of this Applicant.  # noqa: E501
        :type: Demographics
        """

        self._demographics = demographics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Applicant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Applicant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
