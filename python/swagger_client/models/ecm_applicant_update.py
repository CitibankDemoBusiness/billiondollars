# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ECMApplicantUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'ECMNameUpdate',
        'demographics': 'ECMDemographicsUpdate',
        'education': 'ECMEducationUpdate',
        'identification_document_details': 'list[ECMIdentificationDocumentDetailsUpdate]',
        'employment_details': 'list[ECMEmploymentDetailsUpdate]',
        'phone': 'list[ECMPhoneUpdate]',
        'address': 'list[ECMAddressUpdate]',
        'contact_preference': 'ECMContactPreferenceUpdate',
        'contact_consent': 'ECMContactConsentUpdate',
        'additional_data': 'ECMAdditionalDataUpdate',
        'marketing_consent': 'MarketingConsent',
        'parent_information': 'ECMParentInformationUpdate',
        'financial_information': 'ECMFinancialInformationUpdate',
        'consent_details': 'list[ECMConsentDetails]'
    }

    attribute_map = {
        'name': 'name',
        'demographics': 'demographics',
        'education': 'education',
        'identification_document_details': 'identificationDocumentDetails',
        'employment_details': 'employmentDetails',
        'phone': 'phone',
        'address': 'address',
        'contact_preference': 'contactPreference',
        'contact_consent': 'contactConsent',
        'additional_data': 'additionalData',
        'marketing_consent': 'marketingConsent',
        'parent_information': 'parentInformation',
        'financial_information': 'financialInformation',
        'consent_details': 'consentDetails'
    }

    def __init__(self, name=None, demographics=None, education=None, identification_document_details=None, employment_details=None, phone=None, address=None, contact_preference=None, contact_consent=None, additional_data=None, marketing_consent=None, parent_information=None, financial_information=None, consent_details=None):  # noqa: E501
        """ECMApplicantUpdate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._demographics = None
        self._education = None
        self._identification_document_details = None
        self._employment_details = None
        self._phone = None
        self._address = None
        self._contact_preference = None
        self._contact_consent = None
        self._additional_data = None
        self._marketing_consent = None
        self._parent_information = None
        self._financial_information = None
        self._consent_details = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if demographics is not None:
            self.demographics = demographics
        if education is not None:
            self.education = education
        if identification_document_details is not None:
            self.identification_document_details = identification_document_details
        if employment_details is not None:
            self.employment_details = employment_details
        if phone is not None:
            self.phone = phone
        if address is not None:
            self.address = address
        if contact_preference is not None:
            self.contact_preference = contact_preference
        if contact_consent is not None:
            self.contact_consent = contact_consent
        if additional_data is not None:
            self.additional_data = additional_data
        if marketing_consent is not None:
            self.marketing_consent = marketing_consent
        if parent_information is not None:
            self.parent_information = parent_information
        if financial_information is not None:
            self.financial_information = financial_information
        if consent_details is not None:
            self.consent_details = consent_details

    @property
    def name(self):
        """Gets the name of this ECMApplicantUpdate.  # noqa: E501


        :return: The name of this ECMApplicantUpdate.  # noqa: E501
        :rtype: ECMNameUpdate
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ECMApplicantUpdate.


        :param name: The name of this ECMApplicantUpdate.  # noqa: E501
        :type: ECMNameUpdate
        """

        self._name = name

    @property
    def demographics(self):
        """Gets the demographics of this ECMApplicantUpdate.  # noqa: E501


        :return: The demographics of this ECMApplicantUpdate.  # noqa: E501
        :rtype: ECMDemographicsUpdate
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics):
        """Sets the demographics of this ECMApplicantUpdate.


        :param demographics: The demographics of this ECMApplicantUpdate.  # noqa: E501
        :type: ECMDemographicsUpdate
        """

        self._demographics = demographics

    @property
    def education(self):
        """Gets the education of this ECMApplicantUpdate.  # noqa: E501


        :return: The education of this ECMApplicantUpdate.  # noqa: E501
        :rtype: ECMEducationUpdate
        """
        return self._education

    @education.setter
    def education(self, education):
        """Sets the education of this ECMApplicantUpdate.


        :param education: The education of this ECMApplicantUpdate.  # noqa: E501
        :type: ECMEducationUpdate
        """

        self._education = education

    @property
    def identification_document_details(self):
        """Gets the identification_document_details of this ECMApplicantUpdate.  # noqa: E501


        :return: The identification_document_details of this ECMApplicantUpdate.  # noqa: E501
        :rtype: list[ECMIdentificationDocumentDetailsUpdate]
        """
        return self._identification_document_details

    @identification_document_details.setter
    def identification_document_details(self, identification_document_details):
        """Sets the identification_document_details of this ECMApplicantUpdate.


        :param identification_document_details: The identification_document_details of this ECMApplicantUpdate.  # noqa: E501
        :type: list[ECMIdentificationDocumentDetailsUpdate]
        """

        self._identification_document_details = identification_document_details

    @property
    def employment_details(self):
        """Gets the employment_details of this ECMApplicantUpdate.  # noqa: E501


        :return: The employment_details of this ECMApplicantUpdate.  # noqa: E501
        :rtype: list[ECMEmploymentDetailsUpdate]
        """
        return self._employment_details

    @employment_details.setter
    def employment_details(self, employment_details):
        """Sets the employment_details of this ECMApplicantUpdate.


        :param employment_details: The employment_details of this ECMApplicantUpdate.  # noqa: E501
        :type: list[ECMEmploymentDetailsUpdate]
        """

        self._employment_details = employment_details

    @property
    def phone(self):
        """Gets the phone of this ECMApplicantUpdate.  # noqa: E501


        :return: The phone of this ECMApplicantUpdate.  # noqa: E501
        :rtype: list[ECMPhoneUpdate]
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ECMApplicantUpdate.


        :param phone: The phone of this ECMApplicantUpdate.  # noqa: E501
        :type: list[ECMPhoneUpdate]
        """

        self._phone = phone

    @property
    def address(self):
        """Gets the address of this ECMApplicantUpdate.  # noqa: E501


        :return: The address of this ECMApplicantUpdate.  # noqa: E501
        :rtype: list[ECMAddressUpdate]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ECMApplicantUpdate.


        :param address: The address of this ECMApplicantUpdate.  # noqa: E501
        :type: list[ECMAddressUpdate]
        """

        self._address = address

    @property
    def contact_preference(self):
        """Gets the contact_preference of this ECMApplicantUpdate.  # noqa: E501


        :return: The contact_preference of this ECMApplicantUpdate.  # noqa: E501
        :rtype: ECMContactPreferenceUpdate
        """
        return self._contact_preference

    @contact_preference.setter
    def contact_preference(self, contact_preference):
        """Sets the contact_preference of this ECMApplicantUpdate.


        :param contact_preference: The contact_preference of this ECMApplicantUpdate.  # noqa: E501
        :type: ECMContactPreferenceUpdate
        """

        self._contact_preference = contact_preference

    @property
    def contact_consent(self):
        """Gets the contact_consent of this ECMApplicantUpdate.  # noqa: E501


        :return: The contact_consent of this ECMApplicantUpdate.  # noqa: E501
        :rtype: ECMContactConsentUpdate
        """
        return self._contact_consent

    @contact_consent.setter
    def contact_consent(self, contact_consent):
        """Sets the contact_consent of this ECMApplicantUpdate.


        :param contact_consent: The contact_consent of this ECMApplicantUpdate.  # noqa: E501
        :type: ECMContactConsentUpdate
        """

        self._contact_consent = contact_consent

    @property
    def additional_data(self):
        """Gets the additional_data of this ECMApplicantUpdate.  # noqa: E501


        :return: The additional_data of this ECMApplicantUpdate.  # noqa: E501
        :rtype: ECMAdditionalDataUpdate
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this ECMApplicantUpdate.


        :param additional_data: The additional_data of this ECMApplicantUpdate.  # noqa: E501
        :type: ECMAdditionalDataUpdate
        """

        self._additional_data = additional_data

    @property
    def marketing_consent(self):
        """Gets the marketing_consent of this ECMApplicantUpdate.  # noqa: E501


        :return: The marketing_consent of this ECMApplicantUpdate.  # noqa: E501
        :rtype: MarketingConsent
        """
        return self._marketing_consent

    @marketing_consent.setter
    def marketing_consent(self, marketing_consent):
        """Sets the marketing_consent of this ECMApplicantUpdate.


        :param marketing_consent: The marketing_consent of this ECMApplicantUpdate.  # noqa: E501
        :type: MarketingConsent
        """

        self._marketing_consent = marketing_consent

    @property
    def parent_information(self):
        """Gets the parent_information of this ECMApplicantUpdate.  # noqa: E501


        :return: The parent_information of this ECMApplicantUpdate.  # noqa: E501
        :rtype: ECMParentInformationUpdate
        """
        return self._parent_information

    @parent_information.setter
    def parent_information(self, parent_information):
        """Sets the parent_information of this ECMApplicantUpdate.


        :param parent_information: The parent_information of this ECMApplicantUpdate.  # noqa: E501
        :type: ECMParentInformationUpdate
        """

        self._parent_information = parent_information

    @property
    def financial_information(self):
        """Gets the financial_information of this ECMApplicantUpdate.  # noqa: E501


        :return: The financial_information of this ECMApplicantUpdate.  # noqa: E501
        :rtype: ECMFinancialInformationUpdate
        """
        return self._financial_information

    @financial_information.setter
    def financial_information(self, financial_information):
        """Sets the financial_information of this ECMApplicantUpdate.


        :param financial_information: The financial_information of this ECMApplicantUpdate.  # noqa: E501
        :type: ECMFinancialInformationUpdate
        """

        self._financial_information = financial_information

    @property
    def consent_details(self):
        """Gets the consent_details of this ECMApplicantUpdate.  # noqa: E501


        :return: The consent_details of this ECMApplicantUpdate.  # noqa: E501
        :rtype: list[ECMConsentDetails]
        """
        return self._consent_details

    @consent_details.setter
    def consent_details(self, consent_details):
        """Sets the consent_details of this ECMApplicantUpdate.


        :param consent_details: The consent_details of this ECMApplicantUpdate.  # noqa: E501
        :type: list[ECMConsentDetails]
        """

        self._consent_details = consent_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECMApplicantUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECMApplicantUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
