# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepaymentSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenor_occurence': 'str',
        'payment_due_date': 'date',
        'monthly_installment_amount': 'float',
        'principal_amount': 'float',
        'interest_amount': 'float',
        'remaining_principal_amount': 'float'
    }

    attribute_map = {
        'tenor_occurence': 'tenorOccurence',
        'payment_due_date': 'paymentDueDate',
        'monthly_installment_amount': 'monthlyInstallmentAmount',
        'principal_amount': 'principalAmount',
        'interest_amount': 'interestAmount',
        'remaining_principal_amount': 'remainingPrincipalAmount'
    }

    def __init__(self, tenor_occurence=None, payment_due_date=None, monthly_installment_amount=None, principal_amount=None, interest_amount=None, remaining_principal_amount=None):  # noqa: E501
        """RepaymentSchedule - a model defined in Swagger"""  # noqa: E501
        self._tenor_occurence = None
        self._payment_due_date = None
        self._monthly_installment_amount = None
        self._principal_amount = None
        self._interest_amount = None
        self._remaining_principal_amount = None
        self.discriminator = None
        if tenor_occurence is not None:
            self.tenor_occurence = tenor_occurence
        if payment_due_date is not None:
            self.payment_due_date = payment_due_date
        if monthly_installment_amount is not None:
            self.monthly_installment_amount = monthly_installment_amount
        if principal_amount is not None:
            self.principal_amount = principal_amount
        if interest_amount is not None:
            self.interest_amount = interest_amount
        if remaining_principal_amount is not None:
            self.remaining_principal_amount = remaining_principal_amount

    @property
    def tenor_occurence(self):
        """Gets the tenor_occurence of this RepaymentSchedule.  # noqa: E501

        Different tenor applicable for repayment  # noqa: E501

        :return: The tenor_occurence of this RepaymentSchedule.  # noqa: E501
        :rtype: str
        """
        return self._tenor_occurence

    @tenor_occurence.setter
    def tenor_occurence(self, tenor_occurence):
        """Sets the tenor_occurence of this RepaymentSchedule.

        Different tenor applicable for repayment  # noqa: E501

        :param tenor_occurence: The tenor_occurence of this RepaymentSchedule.  # noqa: E501
        :type: str
        """

        self._tenor_occurence = tenor_occurence

    @property
    def payment_due_date(self):
        """Gets the payment_due_date of this RepaymentSchedule.  # noqa: E501

        Payment due date for each instalment in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The payment_due_date of this RepaymentSchedule.  # noqa: E501
        :rtype: date
        """
        return self._payment_due_date

    @payment_due_date.setter
    def payment_due_date(self, payment_due_date):
        """Sets the payment_due_date of this RepaymentSchedule.

        Payment due date for each instalment in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param payment_due_date: The payment_due_date of this RepaymentSchedule.  # noqa: E501
        :type: date
        """

        self._payment_due_date = payment_due_date

    @property
    def monthly_installment_amount(self):
        """Gets the monthly_installment_amount of this RepaymentSchedule.  # noqa: E501

        Monthly instalment amount for loan taken  # noqa: E501

        :return: The monthly_installment_amount of this RepaymentSchedule.  # noqa: E501
        :rtype: float
        """
        return self._monthly_installment_amount

    @monthly_installment_amount.setter
    def monthly_installment_amount(self, monthly_installment_amount):
        """Sets the monthly_installment_amount of this RepaymentSchedule.

        Monthly instalment amount for loan taken  # noqa: E501

        :param monthly_installment_amount: The monthly_installment_amount of this RepaymentSchedule.  # noqa: E501
        :type: float
        """

        self._monthly_installment_amount = monthly_installment_amount

    @property
    def principal_amount(self):
        """Gets the principal_amount of this RepaymentSchedule.  # noqa: E501

        Principal amount of instalment  # noqa: E501

        :return: The principal_amount of this RepaymentSchedule.  # noqa: E501
        :rtype: float
        """
        return self._principal_amount

    @principal_amount.setter
    def principal_amount(self, principal_amount):
        """Sets the principal_amount of this RepaymentSchedule.

        Principal amount of instalment  # noqa: E501

        :param principal_amount: The principal_amount of this RepaymentSchedule.  # noqa: E501
        :type: float
        """

        self._principal_amount = principal_amount

    @property
    def interest_amount(self):
        """Gets the interest_amount of this RepaymentSchedule.  # noqa: E501

        Interest amount of instalment  # noqa: E501

        :return: The interest_amount of this RepaymentSchedule.  # noqa: E501
        :rtype: float
        """
        return self._interest_amount

    @interest_amount.setter
    def interest_amount(self, interest_amount):
        """Sets the interest_amount of this RepaymentSchedule.

        Interest amount of instalment  # noqa: E501

        :param interest_amount: The interest_amount of this RepaymentSchedule.  # noqa: E501
        :type: float
        """

        self._interest_amount = interest_amount

    @property
    def remaining_principal_amount(self):
        """Gets the remaining_principal_amount of this RepaymentSchedule.  # noqa: E501

        Remaining Principal Amount after each instalment has been paid by customer  # noqa: E501

        :return: The remaining_principal_amount of this RepaymentSchedule.  # noqa: E501
        :rtype: float
        """
        return self._remaining_principal_amount

    @remaining_principal_amount.setter
    def remaining_principal_amount(self, remaining_principal_amount):
        """Sets the remaining_principal_amount of this RepaymentSchedule.

        Remaining Principal Amount after each instalment has been paid by customer  # noqa: E501

        :param remaining_principal_amount: The remaining_principal_amount of this RepaymentSchedule.  # noqa: E501
        :type: float
        """

        self._remaining_principal_amount = remaining_principal_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepaymentSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepaymentSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
