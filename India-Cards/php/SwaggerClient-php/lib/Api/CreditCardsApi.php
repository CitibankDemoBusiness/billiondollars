<?php
/**
 * CreditCardsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CreditCardsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation companionCardApplication
     *
     * Issuance of Companion Card
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $content_type The MIME type of the body of the request (used with POST and PUT requests). Always pass application/json. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id Card Id in encrypted format (required)
     * @param  \Swagger\Client\Model\CompanionCardApplicationRequest $body CompanionCardApplicationRequest (optional)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CompanionCardApplicationResponse
     */
    public function companionCardApplication($authorization, $uuid, $accept, $content_type, $client_id, $card_id, $body = null, $client_details = null)
    {
        list($response) = $this->companionCardApplicationWithHttpInfo($authorization, $uuid, $accept, $content_type, $client_id, $card_id, $body, $client_details);
        return $response;
    }

    /**
     * Operation companionCardApplicationWithHttpInfo
     *
     * Issuance of Companion Card
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $content_type The MIME type of the body of the request (used with POST and PUT requests). Always pass application/json. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id Card Id in encrypted format (required)
     * @param  \Swagger\Client\Model\CompanionCardApplicationRequest $body CompanionCardApplicationRequest (optional)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CompanionCardApplicationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function companionCardApplicationWithHttpInfo($authorization, $uuid, $accept, $content_type, $client_id, $card_id, $body = null, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\CompanionCardApplicationResponse';
        $request = $this->companionCardApplicationRequest($authorization, $uuid, $accept, $content_type, $client_id, $card_id, $body, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CompanionCardApplicationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companionCardApplicationAsync
     *
     * Issuance of Companion Card
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $content_type The MIME type of the body of the request (used with POST and PUT requests). Always pass application/json. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id Card Id in encrypted format (required)
     * @param  \Swagger\Client\Model\CompanionCardApplicationRequest $body CompanionCardApplicationRequest (optional)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companionCardApplicationAsync($authorization, $uuid, $accept, $content_type, $client_id, $card_id, $body = null, $client_details = null)
    {
        return $this->companionCardApplicationAsyncWithHttpInfo($authorization, $uuid, $accept, $content_type, $client_id, $card_id, $body, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companionCardApplicationAsyncWithHttpInfo
     *
     * Issuance of Companion Card
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $content_type The MIME type of the body of the request (used with POST and PUT requests). Always pass application/json. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id Card Id in encrypted format (required)
     * @param  \Swagger\Client\Model\CompanionCardApplicationRequest $body CompanionCardApplicationRequest (optional)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companionCardApplicationAsyncWithHttpInfo($authorization, $uuid, $accept, $content_type, $client_id, $card_id, $body = null, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\CompanionCardApplicationResponse';
        $request = $this->companionCardApplicationRequest($authorization, $uuid, $accept, $content_type, $client_id, $card_id, $body, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companionCardApplication'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $content_type The MIME type of the body of the request (used with POST and PUT requests). Always pass application/json. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id Card Id in encrypted format (required)
     * @param  \Swagger\Client\Model\CompanionCardApplicationRequest $body CompanionCardApplicationRequest (optional)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companionCardApplicationRequest($authorization, $uuid, $accept, $content_type, $client_id, $card_id, $body = null, $client_details = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling companionCardApplication'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling companionCardApplication'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling companionCardApplication'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling companionCardApplication'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling companionCardApplication'
            );
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling companionCardApplication'
            );
        }

        $resourcePath = '/v1/creditCards/{cardId}/companion/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation easyPaymentPlansTransactionEligibility
     *
     * Transaction Eligibility and Easy Payment Plans
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id The card id in encrypted format. (required)
     * @param  double $eligble_loan_amount Elligible loan amount for easy payment plan booking.. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EasyPaymentPlansTransactionEligibilityResponse
     */
    public function easyPaymentPlansTransactionEligibility($authorization, $uuid, $accept, $client_id, $card_id, $eligble_loan_amount, $client_details = null)
    {
        list($response) = $this->easyPaymentPlansTransactionEligibilityWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $eligble_loan_amount, $client_details);
        return $response;
    }

    /**
     * Operation easyPaymentPlansTransactionEligibilityWithHttpInfo
     *
     * Transaction Eligibility and Easy Payment Plans
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id The card id in encrypted format. (required)
     * @param  double $eligble_loan_amount Elligible loan amount for easy payment plan booking.. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EasyPaymentPlansTransactionEligibilityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function easyPaymentPlansTransactionEligibilityWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $eligble_loan_amount, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\EasyPaymentPlansTransactionEligibilityResponse';
        $request = $this->easyPaymentPlansTransactionEligibilityRequest($authorization, $uuid, $accept, $client_id, $card_id, $eligble_loan_amount, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EasyPaymentPlansTransactionEligibilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation easyPaymentPlansTransactionEligibilityAsync
     *
     * Transaction Eligibility and Easy Payment Plans
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id The card id in encrypted format. (required)
     * @param  double $eligble_loan_amount Elligible loan amount for easy payment plan booking.. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function easyPaymentPlansTransactionEligibilityAsync($authorization, $uuid, $accept, $client_id, $card_id, $eligble_loan_amount, $client_details = null)
    {
        return $this->easyPaymentPlansTransactionEligibilityAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $eligble_loan_amount, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation easyPaymentPlansTransactionEligibilityAsyncWithHttpInfo
     *
     * Transaction Eligibility and Easy Payment Plans
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id The card id in encrypted format. (required)
     * @param  double $eligble_loan_amount Elligible loan amount for easy payment plan booking.. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function easyPaymentPlansTransactionEligibilityAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $eligble_loan_amount, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\EasyPaymentPlansTransactionEligibilityResponse';
        $request = $this->easyPaymentPlansTransactionEligibilityRequest($authorization, $uuid, $accept, $client_id, $card_id, $eligble_loan_amount, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'easyPaymentPlansTransactionEligibility'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $card_id The card id in encrypted format. (required)
     * @param  double $eligble_loan_amount Elligible loan amount for easy payment plan booking.. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function easyPaymentPlansTransactionEligibilityRequest($authorization, $uuid, $accept, $client_id, $card_id, $eligble_loan_amount, $client_details = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling easyPaymentPlansTransactionEligibility'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling easyPaymentPlansTransactionEligibility'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling easyPaymentPlansTransactionEligibility'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling easyPaymentPlansTransactionEligibility'
            );
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling easyPaymentPlansTransactionEligibility'
            );
        }
        // verify the required parameter 'eligble_loan_amount' is set
        if ($eligble_loan_amount === null || (is_array($eligble_loan_amount) && count($eligble_loan_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eligble_loan_amount when calling easyPaymentPlansTransactionEligibility'
            );
        }

        $resourcePath = '/v1/creditCards/{cardId}/transactions/eligibility/easyPaymentPlan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($eligble_loan_amount !== null) {
            $queryParams['eligbleLoanAmount'] = ObjectSerializer::toQueryValue($eligble_loan_amount, 'double');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansBookingsPost
     *
     * Book Easy Payment Plan
     *
     * @param  \Swagger\Client\Model\EppLoanBookingRequest $body body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EppLoanBookingResponse
     */
    public function v1CreditCardsCardIdEasyPaymentPlansBookingsPost($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        list($response) = $this->v1CreditCardsCardIdEasyPaymentPlansBookingsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details);
        return $response;
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansBookingsPostWithHttpInfo
     *
     * Book Easy Payment Plan
     *
     * @param  \Swagger\Client\Model\EppLoanBookingRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EppLoanBookingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1CreditCardsCardIdEasyPaymentPlansBookingsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\EppLoanBookingResponse';
        $request = $this->v1CreditCardsCardIdEasyPaymentPlansBookingsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EppLoanBookingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansBookingsPostAsync
     *
     * Book Easy Payment Plan
     *
     * @param  \Swagger\Client\Model\EppLoanBookingRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdEasyPaymentPlansBookingsPostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        return $this->v1CreditCardsCardIdEasyPaymentPlansBookingsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansBookingsPostAsyncWithHttpInfo
     *
     * Book Easy Payment Plan
     *
     * @param  \Swagger\Client\Model\EppLoanBookingRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdEasyPaymentPlansBookingsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\EppLoanBookingResponse';
        $request = $this->v1CreditCardsCardIdEasyPaymentPlansBookingsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1CreditCardsCardIdEasyPaymentPlansBookingsPost'
     *
     * @param  \Swagger\Client\Model\EppLoanBookingRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1CreditCardsCardIdEasyPaymentPlansBookingsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1CreditCardsCardIdEasyPaymentPlansBookingsPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1CreditCardsCardIdEasyPaymentPlansBookingsPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1CreditCardsCardIdEasyPaymentPlansBookingsPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1CreditCardsCardIdEasyPaymentPlansBookingsPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1CreditCardsCardIdEasyPaymentPlansBookingsPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1CreditCardsCardIdEasyPaymentPlansBookingsPost'
            );
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling v1CreditCardsCardIdEasyPaymentPlansBookingsPost'
            );
        }

        $resourcePath = '/v1/creditCards/{cardId}/easyPaymentPlans/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansEligibilityGet
     *
     * Check Easy Payment Plan Eligibility
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client_id generated during consumer onboarding (required)
     * @param  string $card_id Card Id in encrypted format. (required)
     * @param  string $epp_loan_booking_type Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EasyPaymentPlansEligibilityInquiryResponse
     */
    public function v1CreditCardsCardIdEasyPaymentPlansEligibilityGet($authorization, $uuid, $accept, $client_id, $card_id, $epp_loan_booking_type, $client_details = null, $next_start_index = null)
    {
        list($response) = $this->v1CreditCardsCardIdEasyPaymentPlansEligibilityGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $epp_loan_booking_type, $client_details, $next_start_index);
        return $response;
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansEligibilityGetWithHttpInfo
     *
     * Check Easy Payment Plan Eligibility
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client_id generated during consumer onboarding (required)
     * @param  string $card_id Card Id in encrypted format. (required)
     * @param  string $epp_loan_booking_type Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EasyPaymentPlansEligibilityInquiryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1CreditCardsCardIdEasyPaymentPlansEligibilityGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $epp_loan_booking_type, $client_details = null, $next_start_index = null)
    {
        $returnType = '\Swagger\Client\Model\EasyPaymentPlansEligibilityInquiryResponse';
        $request = $this->v1CreditCardsCardIdEasyPaymentPlansEligibilityGetRequest($authorization, $uuid, $accept, $client_id, $card_id, $epp_loan_booking_type, $client_details, $next_start_index);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EasyPaymentPlansEligibilityInquiryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansEligibilityGetAsync
     *
     * Check Easy Payment Plan Eligibility
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client_id generated during consumer onboarding (required)
     * @param  string $card_id Card Id in encrypted format. (required)
     * @param  string $epp_loan_booking_type Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdEasyPaymentPlansEligibilityGetAsync($authorization, $uuid, $accept, $client_id, $card_id, $epp_loan_booking_type, $client_details = null, $next_start_index = null)
    {
        return $this->v1CreditCardsCardIdEasyPaymentPlansEligibilityGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $epp_loan_booking_type, $client_details, $next_start_index)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansEligibilityGetAsyncWithHttpInfo
     *
     * Check Easy Payment Plan Eligibility
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client_id generated during consumer onboarding (required)
     * @param  string $card_id Card Id in encrypted format. (required)
     * @param  string $epp_loan_booking_type Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdEasyPaymentPlansEligibilityGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $epp_loan_booking_type, $client_details = null, $next_start_index = null)
    {
        $returnType = '\Swagger\Client\Model\EasyPaymentPlansEligibilityInquiryResponse';
        $request = $this->v1CreditCardsCardIdEasyPaymentPlansEligibilityGetRequest($authorization, $uuid, $accept, $client_id, $card_id, $epp_loan_booking_type, $client_details, $next_start_index);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1CreditCardsCardIdEasyPaymentPlansEligibilityGet'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client_id generated during consumer onboarding (required)
     * @param  string $card_id Card Id in encrypted format. (required)
     * @param  string $epp_loan_booking_type Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1CreditCardsCardIdEasyPaymentPlansEligibilityGetRequest($authorization, $uuid, $accept, $client_id, $card_id, $epp_loan_booking_type, $client_details = null, $next_start_index = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1CreditCardsCardIdEasyPaymentPlansEligibilityGet'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1CreditCardsCardIdEasyPaymentPlansEligibilityGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1CreditCardsCardIdEasyPaymentPlansEligibilityGet'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1CreditCardsCardIdEasyPaymentPlansEligibilityGet'
            );
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling v1CreditCardsCardIdEasyPaymentPlansEligibilityGet'
            );
        }
        // verify the required parameter 'epp_loan_booking_type' is set
        if ($epp_loan_booking_type === null || (is_array($epp_loan_booking_type) && count($epp_loan_booking_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $epp_loan_booking_type when calling v1CreditCardsCardIdEasyPaymentPlansEligibilityGet'
            );
        }

        $resourcePath = '/v1/creditCards/{cardId}/easyPaymentPlans/eligibility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($epp_loan_booking_type !== null) {
            $queryParams['eppLoanBookingType'] = ObjectSerializer::toQueryValue($epp_loan_booking_type, null);
        }
        // query params
        if ($next_start_index !== null) {
            $queryParams['nextStartIndex'] = ObjectSerializer::toQueryValue($next_start_index, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet
     *
     * Easy Payment Plan Repayment Schedule
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  double $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EppRepaymentScheuleResponse
     */
    public function v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet($authorization, $uuid, $accept, $client_id, $card_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        list($response) = $this->v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $loan_amount, $tenor, $client_details, $next_start_index);
        return $response;
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetWithHttpInfo
     *
     * Easy Payment Plan Repayment Schedule
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  double $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EppRepaymentScheuleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        $returnType = '\Swagger\Client\Model\EppRepaymentScheuleResponse';
        $request = $this->v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetRequest($authorization, $uuid, $accept, $client_id, $card_id, $loan_amount, $tenor, $client_details, $next_start_index);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EppRepaymentScheuleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetAsync
     *
     * Easy Payment Plan Repayment Schedule
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  double $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetAsync($authorization, $uuid, $accept, $client_id, $card_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        return $this->v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $loan_amount, $tenor, $client_details, $next_start_index)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetAsyncWithHttpInfo
     *
     * Easy Payment Plan Repayment Schedule
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  double $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        $returnType = '\Swagger\Client\Model\EppRepaymentScheuleResponse';
        $request = $this->v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetRequest($authorization, $uuid, $accept, $client_id, $card_id, $loan_amount, $tenor, $client_details, $next_start_index);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  double $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetRequest($authorization, $uuid, $accept, $client_id, $card_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet'
            );
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet'
            );
        }
        // verify the required parameter 'loan_amount' is set
        if ($loan_amount === null || (is_array($loan_amount) && count($loan_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loan_amount when calling v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet'
            );
        }
        // verify the required parameter 'tenor' is set
        if ($tenor === null || (is_array($tenor) && count($tenor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenor when calling v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet'
            );
        }

        $resourcePath = '/v1/creditCards/{cardId}/easyPaymentPlans/repaymentSchedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loan_amount !== null) {
            $queryParams['loanAmount'] = ObjectSerializer::toQueryValue($loan_amount, 'double');
        }
        // query params
        if ($tenor !== null) {
            $queryParams['tenor'] = ObjectSerializer::toQueryValue($tenor, 'integer');
        }
        // query params
        if ($next_start_index !== null) {
            $queryParams['nextStartIndex'] = ObjectSerializer::toQueryValue($next_start_index, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansSearchPost
     *
     * Retrieve Easy Payment Plans Options
     *
     * @param  \Swagger\Client\Model\EppRequest $body Easy payment plan Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EppResponse
     */
    public function v1CreditCardsCardIdEasyPaymentPlansSearchPost($body, $authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        list($response) = $this->v1CreditCardsCardIdEasyPaymentPlansSearchPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $card_id, $client_details);
        return $response;
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansSearchPostWithHttpInfo
     *
     * Retrieve Easy Payment Plans Options
     *
     * @param  \Swagger\Client\Model\EppRequest $body Easy payment plan Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EppResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1CreditCardsCardIdEasyPaymentPlansSearchPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\EppResponse';
        $request = $this->v1CreditCardsCardIdEasyPaymentPlansSearchPostRequest($body, $authorization, $uuid, $accept, $client_id, $card_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansSearchPostAsync
     *
     * Retrieve Easy Payment Plans Options
     *
     * @param  \Swagger\Client\Model\EppRequest $body Easy payment plan Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdEasyPaymentPlansSearchPostAsync($body, $authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        return $this->v1CreditCardsCardIdEasyPaymentPlansSearchPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $card_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1CreditCardsCardIdEasyPaymentPlansSearchPostAsyncWithHttpInfo
     *
     * Retrieve Easy Payment Plans Options
     *
     * @param  \Swagger\Client\Model\EppRequest $body Easy payment plan Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdEasyPaymentPlansSearchPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\EppResponse';
        $request = $this->v1CreditCardsCardIdEasyPaymentPlansSearchPostRequest($body, $authorization, $uuid, $accept, $client_id, $card_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1CreditCardsCardIdEasyPaymentPlansSearchPost'
     *
     * @param  \Swagger\Client\Model\EppRequest $body Easy payment plan Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1CreditCardsCardIdEasyPaymentPlansSearchPostRequest($body, $authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1CreditCardsCardIdEasyPaymentPlansSearchPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1CreditCardsCardIdEasyPaymentPlansSearchPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1CreditCardsCardIdEasyPaymentPlansSearchPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1CreditCardsCardIdEasyPaymentPlansSearchPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1CreditCardsCardIdEasyPaymentPlansSearchPost'
            );
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling v1CreditCardsCardIdEasyPaymentPlansSearchPost'
            );
        }

        $resourcePath = '/v1/creditCards/{cardId}/easyPaymentPlans/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1CreditCardsCardIdSupplementaryCardsGet
     *
     * List Supplementary Cards
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The primary card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SupplementaryCardListingResponse
     */
    public function v1CreditCardsCardIdSupplementaryCardsGet($authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        list($response) = $this->v1CreditCardsCardIdSupplementaryCardsGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $client_details);
        return $response;
    }

    /**
     * Operation v1CreditCardsCardIdSupplementaryCardsGetWithHttpInfo
     *
     * List Supplementary Cards
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The primary card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SupplementaryCardListingResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1CreditCardsCardIdSupplementaryCardsGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\SupplementaryCardListingResponse';
        $request = $this->v1CreditCardsCardIdSupplementaryCardsGetRequest($authorization, $uuid, $accept, $client_id, $card_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SupplementaryCardListingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1CreditCardsCardIdSupplementaryCardsGetAsync
     *
     * List Supplementary Cards
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The primary card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdSupplementaryCardsGetAsync($authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        return $this->v1CreditCardsCardIdSupplementaryCardsGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1CreditCardsCardIdSupplementaryCardsGetAsyncWithHttpInfo
     *
     * List Supplementary Cards
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The primary card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsCardIdSupplementaryCardsGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\SupplementaryCardListingResponse';
        $request = $this->v1CreditCardsCardIdSupplementaryCardsGetRequest($authorization, $uuid, $accept, $client_id, $card_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1CreditCardsCardIdSupplementaryCardsGet'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $card_id The primary card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1CreditCardsCardIdSupplementaryCardsGetRequest($authorization, $uuid, $accept, $client_id, $card_id, $client_details = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1CreditCardsCardIdSupplementaryCardsGet'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1CreditCardsCardIdSupplementaryCardsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1CreditCardsCardIdSupplementaryCardsGet'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1CreditCardsCardIdSupplementaryCardsGet'
            );
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling v1CreditCardsCardIdSupplementaryCardsGet'
            );
        }

        $resourcePath = '/v1/creditCards/{cardId}/supplementaryCards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1CreditCardsStatementsSummarySearchPost
     *
     * Retrieve Composite Credit Cards Statement Summary
     *
     * @param  \Swagger\Client\Model\CardStatementSummaryRequest $body body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CardStatementSummaryResponse
     */
    public function v1CreditCardsStatementsSummarySearchPost($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        list($response) = $this->v1CreditCardsStatementsSummarySearchPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details);
        return $response;
    }

    /**
     * Operation v1CreditCardsStatementsSummarySearchPostWithHttpInfo
     *
     * Retrieve Composite Credit Cards Statement Summary
     *
     * @param  \Swagger\Client\Model\CardStatementSummaryRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CardStatementSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1CreditCardsStatementsSummarySearchPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\CardStatementSummaryResponse';
        $request = $this->v1CreditCardsStatementsSummarySearchPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CardStatementSummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 206:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CardStatementSummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1CreditCardsStatementsSummarySearchPostAsync
     *
     * Retrieve Composite Credit Cards Statement Summary
     *
     * @param  \Swagger\Client\Model\CardStatementSummaryRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsStatementsSummarySearchPostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        return $this->v1CreditCardsStatementsSummarySearchPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1CreditCardsStatementsSummarySearchPostAsyncWithHttpInfo
     *
     * Retrieve Composite Credit Cards Statement Summary
     *
     * @param  \Swagger\Client\Model\CardStatementSummaryRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1CreditCardsStatementsSummarySearchPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\CardStatementSummaryResponse';
        $request = $this->v1CreditCardsStatementsSummarySearchPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1CreditCardsStatementsSummarySearchPost'
     *
     * @param  \Swagger\Client\Model\CardStatementSummaryRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1CreditCardsStatementsSummarySearchPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1CreditCardsStatementsSummarySearchPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1CreditCardsStatementsSummarySearchPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1CreditCardsStatementsSummarySearchPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1CreditCardsStatementsSummarySearchPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1CreditCardsStatementsSummarySearchPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1CreditCardsStatementsSummarySearchPost'
            );
        }

        $resourcePath = '/v1/creditCards/statements/summary/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
