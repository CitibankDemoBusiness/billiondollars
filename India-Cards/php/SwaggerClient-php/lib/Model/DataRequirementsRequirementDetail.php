<?php
/**
 * DataRequirementsRequirementDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DataRequirementsRequirementDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataRequirementsRequirementDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'data_requirements_requirement_detail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nationality' => 'string',
'nationality_remark' => 'string',
'residency' => 'string',
'account_holder_flag' => 'bool',
'applicant' => '\Swagger\Client\Model\DataRequirementsApplicant[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nationality' => null,
'nationality_remark' => null,
'residency' => null,
'account_holder_flag' => null,
'applicant' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nationality' => 'nationality',
'nationality_remark' => 'nationality_remark',
'residency' => 'residency',
'account_holder_flag' => 'account_holder_flag',
'applicant' => 'applicant'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nationality' => 'setNationality',
'nationality_remark' => 'setNationalityRemark',
'residency' => 'setResidency',
'account_holder_flag' => 'setAccountHolderFlag',
'applicant' => 'setApplicant'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nationality' => 'getNationality',
'nationality_remark' => 'getNationalityRemark',
'residency' => 'getResidency',
'account_holder_flag' => 'getAccountHolderFlag',
'applicant' => 'getApplicant'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NATIONALITY_MALAYSIAN = 'malaysian';
const NATIONALITY_NON_MALAYSIAN = 'non_malaysian';
const NATIONALITY_ANY = 'any';
const RESIDENCY_RESIDENT = 'resident';
const RESIDENCY_NON_RESIDENT = 'non_resident';
const RESIDENCY_ANY = 'any';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNationalityAllowableValues()
    {
        return [
            self::NATIONALITY_MALAYSIAN,
self::NATIONALITY_NON_MALAYSIAN,
self::NATIONALITY_ANY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResidencyAllowableValues()
    {
        return [
            self::RESIDENCY_RESIDENT,
self::RESIDENCY_NON_RESIDENT,
self::RESIDENCY_ANY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nationality'] = isset($data['nationality']) ? $data['nationality'] : null;
        $this->container['nationality_remark'] = isset($data['nationality_remark']) ? $data['nationality_remark'] : null;
        $this->container['residency'] = isset($data['residency']) ? $data['residency'] : null;
        $this->container['account_holder_flag'] = isset($data['account_holder_flag']) ? $data['account_holder_flag'] : null;
        $this->container['applicant'] = isset($data['applicant']) ? $data['applicant'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['nationality'] === null) {
            $invalidProperties[] = "'nationality' can't be null";
        }
        $allowedValues = $this->getNationalityAllowableValues();
        if (!is_null($this->container['nationality']) && !in_array($this->container['nationality'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'nationality', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['residency'] === null) {
            $invalidProperties[] = "'residency' can't be null";
        }
        $allowedValues = $this->getResidencyAllowableValues();
        if (!is_null($this->container['residency']) && !in_array($this->container['residency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'residency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nationality
     *
     * @return string
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string $nationality Nationality of the applicant
     *
     * @return $this
     */
    public function setNationality($nationality)
    {
        $allowedValues = $this->getNationalityAllowableValues();
        if (!in_array($nationality, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'nationality', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets nationality_remark
     *
     * @return string
     */
    public function getNationalityRemark()
    {
        return $this->container['nationality_remark'];
    }

    /**
     * Sets nationality_remark
     *
     * @param string $nationality_remark Remark on nationality
     *
     * @return $this
     */
    public function setNationalityRemark($nationality_remark)
    {
        $this->container['nationality_remark'] = $nationality_remark;

        return $this;
    }

    /**
     * Gets residency
     *
     * @return string
     */
    public function getResidency()
    {
        return $this->container['residency'];
    }

    /**
     * Sets residency
     *
     * @param string $residency Resident status of the applicant
     *
     * @return $this
     */
    public function setResidency($residency)
    {
        $allowedValues = $this->getResidencyAllowableValues();
        if (!in_array($residency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'residency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['residency'] = $residency;

        return $this;
    }

    /**
     * Gets account_holder_flag
     *
     * @return bool
     */
    public function getAccountHolderFlag()
    {
        return $this->container['account_holder_flag'];
    }

    /**
     * Sets account_holder_flag
     *
     * @param bool $account_holder_flag Requirement to have account with the bank
     *
     * @return $this
     */
    public function setAccountHolderFlag($account_holder_flag)
    {
        $this->container['account_holder_flag'] = $account_holder_flag;

        return $this;
    }

    /**
     * Gets applicant
     *
     * @return \Swagger\Client\Model\DataRequirementsApplicant[]
     */
    public function getApplicant()
    {
        return $this->container['applicant'];
    }

    /**
     * Sets applicant
     *
     * @param \Swagger\Client\Model\DataRequirementsApplicant[] $applicant applicant
     *
     * @return $this
     */
    public function setApplicant($applicant)
    {
        $this->container['applicant'] = $applicant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
