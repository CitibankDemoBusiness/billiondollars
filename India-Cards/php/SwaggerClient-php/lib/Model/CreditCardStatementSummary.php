<?php
/**
 * CreditCardStatementSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditCardStatementSummary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardStatementSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditCardStatementSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'card_id' => 'string',
'display_account_number' => 'string',
'eligible_source_accts_for_payment_flag' => 'bool',
'epp_eligible_amount' => 'double',
'epp_minimum_eligible_amount' => 'double',
'epp_minimum_installment_amount' => 'double',
'credit_card_statement' => '\Swagger\Client\Model\CreditCardStatement[]',
'statement_summary_error_details' => '\Swagger\Client\Model\ErrorResponse',
'next_start_index' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'card_id' => null,
'display_account_number' => null,
'eligible_source_accts_for_payment_flag' => null,
'epp_eligible_amount' => 'double',
'epp_minimum_eligible_amount' => 'double',
'epp_minimum_installment_amount' => 'double',
'credit_card_statement' => null,
'statement_summary_error_details' => null,
'next_start_index' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_id' => 'cardId',
'display_account_number' => 'displayAccountNumber',
'eligible_source_accts_for_payment_flag' => 'eligibleSourceAcctsForPaymentFlag',
'epp_eligible_amount' => 'eppEligibleAmount',
'epp_minimum_eligible_amount' => 'eppMinimumEligibleAmount',
'epp_minimum_installment_amount' => 'eppMinimumInstallmentAmount',
'credit_card_statement' => 'creditCardStatement',
'statement_summary_error_details' => 'statementSummaryErrorDetails',
'next_start_index' => 'nextStartIndex'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_id' => 'setCardId',
'display_account_number' => 'setDisplayAccountNumber',
'eligible_source_accts_for_payment_flag' => 'setEligibleSourceAcctsForPaymentFlag',
'epp_eligible_amount' => 'setEppEligibleAmount',
'epp_minimum_eligible_amount' => 'setEppMinimumEligibleAmount',
'epp_minimum_installment_amount' => 'setEppMinimumInstallmentAmount',
'credit_card_statement' => 'setCreditCardStatement',
'statement_summary_error_details' => 'setStatementSummaryErrorDetails',
'next_start_index' => 'setNextStartIndex'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_id' => 'getCardId',
'display_account_number' => 'getDisplayAccountNumber',
'eligible_source_accts_for_payment_flag' => 'getEligibleSourceAcctsForPaymentFlag',
'epp_eligible_amount' => 'getEppEligibleAmount',
'epp_minimum_eligible_amount' => 'getEppMinimumEligibleAmount',
'epp_minimum_installment_amount' => 'getEppMinimumInstallmentAmount',
'credit_card_statement' => 'getCreditCardStatement',
'statement_summary_error_details' => 'getStatementSummaryErrorDetails',
'next_start_index' => 'getNextStartIndex'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['display_account_number'] = isset($data['display_account_number']) ? $data['display_account_number'] : null;
        $this->container['eligible_source_accts_for_payment_flag'] = isset($data['eligible_source_accts_for_payment_flag']) ? $data['eligible_source_accts_for_payment_flag'] : null;
        $this->container['epp_eligible_amount'] = isset($data['epp_eligible_amount']) ? $data['epp_eligible_amount'] : null;
        $this->container['epp_minimum_eligible_amount'] = isset($data['epp_minimum_eligible_amount']) ? $data['epp_minimum_eligible_amount'] : null;
        $this->container['epp_minimum_installment_amount'] = isset($data['epp_minimum_installment_amount']) ? $data['epp_minimum_installment_amount'] : null;
        $this->container['credit_card_statement'] = isset($data['credit_card_statement']) ? $data['credit_card_statement'] : null;
        $this->container['statement_summary_error_details'] = isset($data['statement_summary_error_details']) ? $data['statement_summary_error_details'] : null;
        $this->container['next_start_index'] = isset($data['next_start_index']) ? $data['next_start_index'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_id'] === null) {
            $invalidProperties[] = "'card_id' can't be null";
        }
        if ($this->container['display_account_number'] === null) {
            $invalidProperties[] = "'display_account_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id The card id  in encrypted format
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets display_account_number
     *
     * @return string
     */
    public function getDisplayAccountNumber()
    {
        return $this->container['display_account_number'];
    }

    /**
     * Sets display_account_number
     *
     * @param string $display_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplayAccountNumber($display_account_number)
    {
        $this->container['display_account_number'] = $display_account_number;

        return $this;
    }

    /**
     * Gets eligible_source_accts_for_payment_flag
     *
     * @return bool
     */
    public function getEligibleSourceAcctsForPaymentFlag()
    {
        return $this->container['eligible_source_accts_for_payment_flag'];
    }

    /**
     * Sets eligible_source_accts_for_payment_flag
     *
     * @param bool $eligible_source_accts_for_payment_flag â€™Flag to indicate if eligible source accounts are available to make credit card payment on-line.
     *
     * @return $this
     */
    public function setEligibleSourceAcctsForPaymentFlag($eligible_source_accts_for_payment_flag)
    {
        $this->container['eligible_source_accts_for_payment_flag'] = $eligible_source_accts_for_payment_flag;

        return $this;
    }

    /**
     * Gets epp_eligible_amount
     *
     * @return double
     */
    public function getEppEligibleAmount()
    {
        return $this->container['epp_eligible_amount'];
    }

    /**
     * Sets epp_eligible_amount
     *
     * @param double $epp_eligible_amount Eligible amount for Equal Payment Plan. Applicable only if eligibleForEqualPaymentPlan='ELIGIBLE'.
     *
     * @return $this
     */
    public function setEppEligibleAmount($epp_eligible_amount)
    {
        $this->container['epp_eligible_amount'] = $epp_eligible_amount;

        return $this;
    }

    /**
     * Gets epp_minimum_eligible_amount
     *
     * @return double
     */
    public function getEppMinimumEligibleAmount()
    {
        return $this->container['epp_minimum_eligible_amount'];
    }

    /**
     * Sets epp_minimum_eligible_amount
     *
     * @param double $epp_minimum_eligible_amount Minimum eligible amount for which Equal Payment Plan can be booked. Applicable only if eligibleForEqualPaymentPlan='ELIGIBLE'.
     *
     * @return $this
     */
    public function setEppMinimumEligibleAmount($epp_minimum_eligible_amount)
    {
        $this->container['epp_minimum_eligible_amount'] = $epp_minimum_eligible_amount;

        return $this;
    }

    /**
     * Gets epp_minimum_installment_amount
     *
     * @return double
     */
    public function getEppMinimumInstallmentAmount()
    {
        return $this->container['epp_minimum_installment_amount'];
    }

    /**
     * Sets epp_minimum_installment_amount
     *
     * @param double $epp_minimum_installment_amount Minimum instalment amount for Equal Payment Plan. Applicable only if eligibleForEqualPaymentPlan='ELIGIBLE'.
     *
     * @return $this
     */
    public function setEppMinimumInstallmentAmount($epp_minimum_installment_amount)
    {
        $this->container['epp_minimum_installment_amount'] = $epp_minimum_installment_amount;

        return $this;
    }

    /**
     * Gets credit_card_statement
     *
     * @return \Swagger\Client\Model\CreditCardStatement[]
     */
    public function getCreditCardStatement()
    {
        return $this->container['credit_card_statement'];
    }

    /**
     * Sets credit_card_statement
     *
     * @param \Swagger\Client\Model\CreditCardStatement[] $credit_card_statement credit_card_statement
     *
     * @return $this
     */
    public function setCreditCardStatement($credit_card_statement)
    {
        $this->container['credit_card_statement'] = $credit_card_statement;

        return $this;
    }

    /**
     * Gets statement_summary_error_details
     *
     * @return \Swagger\Client\Model\ErrorResponse
     */
    public function getStatementSummaryErrorDetails()
    {
        return $this->container['statement_summary_error_details'];
    }

    /**
     * Sets statement_summary_error_details
     *
     * @param \Swagger\Client\Model\ErrorResponse $statement_summary_error_details statement_summary_error_details
     *
     * @return $this
     */
    public function setStatementSummaryErrorDetails($statement_summary_error_details)
    {
        $this->container['statement_summary_error_details'] = $statement_summary_error_details;

        return $this;
    }

    /**
     * Gets next_start_index
     *
     * @return string
     */
    public function getNextStartIndex()
    {
        return $this->container['next_start_index'];
    }

    /**
     * Sets next_start_index
     *
     * @param string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
     *
     * @return $this
     */
    public function setNextStartIndex($next_start_index)
    {
        $this->container['next_start_index'] = $next_start_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
