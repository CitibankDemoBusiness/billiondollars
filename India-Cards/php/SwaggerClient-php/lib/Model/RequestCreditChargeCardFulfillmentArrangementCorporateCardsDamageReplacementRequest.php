<?php
/**
 * RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tokenized_card_number' => 'string',
'corporate_officer_details' => '\Swagger\Client\Model\CorporateOfficerDetails',
'embossed_name' => 'string',
'replacement_reason_code' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tokenized_card_number' => null,
'corporate_officer_details' => null,
'embossed_name' => null,
'replacement_reason_code' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tokenized_card_number' => 'tokenizedCardNumber',
'corporate_officer_details' => 'corporateOfficerDetails',
'embossed_name' => 'embossedName',
'replacement_reason_code' => 'replacementReasonCode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tokenized_card_number' => 'setTokenizedCardNumber',
'corporate_officer_details' => 'setCorporateOfficerDetails',
'embossed_name' => 'setEmbossedName',
'replacement_reason_code' => 'setReplacementReasonCode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tokenized_card_number' => 'getTokenizedCardNumber',
'corporate_officer_details' => 'getCorporateOfficerDetails',
'embossed_name' => 'getEmbossedName',
'replacement_reason_code' => 'getReplacementReasonCode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tokenized_card_number'] = isset($data['tokenized_card_number']) ? $data['tokenized_card_number'] : null;
        $this->container['corporate_officer_details'] = isset($data['corporate_officer_details']) ? $data['corporate_officer_details'] : null;
        $this->container['embossed_name'] = isset($data['embossed_name']) ? $data['embossed_name'] : null;
        $this->container['replacement_reason_code'] = isset($data['replacement_reason_code']) ? $data['replacement_reason_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tokenized_card_number'] === null) {
            $invalidProperties[] = "'tokenized_card_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tokenized_card_number
     *
     * @return string
     */
    public function getTokenizedCardNumber()
    {
        return $this->container['tokenized_card_number'];
    }

    /**
     * Sets tokenized_card_number
     *
     * @param string $tokenized_card_number Tokenized card number
     *
     * @return $this
     */
    public function setTokenizedCardNumber($tokenized_card_number)
    {
        $this->container['tokenized_card_number'] = $tokenized_card_number;

        return $this;
    }

    /**
     * Gets corporate_officer_details
     *
     * @return \Swagger\Client\Model\CorporateOfficerDetails
     */
    public function getCorporateOfficerDetails()
    {
        return $this->container['corporate_officer_details'];
    }

    /**
     * Sets corporate_officer_details
     *
     * @param \Swagger\Client\Model\CorporateOfficerDetails $corporate_officer_details corporate_officer_details
     *
     * @return $this
     */
    public function setCorporateOfficerDetails($corporate_officer_details)
    {
        $this->container['corporate_officer_details'] = $corporate_officer_details;

        return $this;
    }

    /**
     * Gets embossed_name
     *
     * @return string
     */
    public function getEmbossedName()
    {
        return $this->container['embossed_name'];
    }

    /**
     * Sets embossed_name
     *
     * @param string $embossed_name Customer Name embossed on the card
     *
     * @return $this
     */
    public function setEmbossedName($embossed_name)
    {
        $this->container['embossed_name'] = $embossed_name;

        return $this;
    }

    /**
     * Gets replacement_reason_code
     *
     * @return string
     */
    public function getReplacementReasonCode()
    {
        return $this->container['replacement_reason_code'];
    }

    /**
     * Sets replacement_reason_code
     *
     * @param string $replacement_reason_code Reason code for replacement. This is a reference data field. Please use /v1/utilities/referenceData/{replacementReasonCode} resource to get possible values of this field with descriptions
     *
     * @return $this
     */
    public function setReplacementReasonCode($replacement_reason_code)
    {
        $this->container['replacement_reason_code'] = $replacement_reason_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
