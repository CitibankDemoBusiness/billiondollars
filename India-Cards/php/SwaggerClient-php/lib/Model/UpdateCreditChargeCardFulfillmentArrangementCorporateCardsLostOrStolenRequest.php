<?php
/**
 * UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tokenized_card_number' => 'string',
'corporate_officer_details' => '\Swagger\Client\Model\CorporateOfficerDetails',
'embossed_name' => 'string',
'service_request_type' => 'string',
'stolen_date' => '\DateTime',
'last_card_used_date' => '\DateTime',
'last_transaction_amount' => 'double',
'card_loss_type' => 'string',
'lost_country' => 'string',
'customer_remarks' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tokenized_card_number' => null,
'corporate_officer_details' => null,
'embossed_name' => null,
'service_request_type' => null,
'stolen_date' => 'date',
'last_card_used_date' => 'date',
'last_transaction_amount' => 'double',
'card_loss_type' => null,
'lost_country' => null,
'customer_remarks' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tokenized_card_number' => 'tokenizedCardNumber',
'corporate_officer_details' => 'corporateOfficerDetails',
'embossed_name' => 'embossedName',
'service_request_type' => 'serviceRequestType',
'stolen_date' => 'stolenDate',
'last_card_used_date' => 'lastCardUsedDate',
'last_transaction_amount' => 'lastTransactionAmount',
'card_loss_type' => 'cardLossType',
'lost_country' => 'lostCountry',
'customer_remarks' => 'customerRemarks'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tokenized_card_number' => 'setTokenizedCardNumber',
'corporate_officer_details' => 'setCorporateOfficerDetails',
'embossed_name' => 'setEmbossedName',
'service_request_type' => 'setServiceRequestType',
'stolen_date' => 'setStolenDate',
'last_card_used_date' => 'setLastCardUsedDate',
'last_transaction_amount' => 'setLastTransactionAmount',
'card_loss_type' => 'setCardLossType',
'lost_country' => 'setLostCountry',
'customer_remarks' => 'setCustomerRemarks'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tokenized_card_number' => 'getTokenizedCardNumber',
'corporate_officer_details' => 'getCorporateOfficerDetails',
'embossed_name' => 'getEmbossedName',
'service_request_type' => 'getServiceRequestType',
'stolen_date' => 'getStolenDate',
'last_card_used_date' => 'getLastCardUsedDate',
'last_transaction_amount' => 'getLastTransactionAmount',
'card_loss_type' => 'getCardLossType',
'lost_country' => 'getLostCountry',
'customer_remarks' => 'getCustomerRemarks'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tokenized_card_number'] = isset($data['tokenized_card_number']) ? $data['tokenized_card_number'] : null;
        $this->container['corporate_officer_details'] = isset($data['corporate_officer_details']) ? $data['corporate_officer_details'] : null;
        $this->container['embossed_name'] = isset($data['embossed_name']) ? $data['embossed_name'] : null;
        $this->container['service_request_type'] = isset($data['service_request_type']) ? $data['service_request_type'] : null;
        $this->container['stolen_date'] = isset($data['stolen_date']) ? $data['stolen_date'] : null;
        $this->container['last_card_used_date'] = isset($data['last_card_used_date']) ? $data['last_card_used_date'] : null;
        $this->container['last_transaction_amount'] = isset($data['last_transaction_amount']) ? $data['last_transaction_amount'] : null;
        $this->container['card_loss_type'] = isset($data['card_loss_type']) ? $data['card_loss_type'] : null;
        $this->container['lost_country'] = isset($data['lost_country']) ? $data['lost_country'] : null;
        $this->container['customer_remarks'] = isset($data['customer_remarks']) ? $data['customer_remarks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tokenized_card_number'] === null) {
            $invalidProperties[] = "'tokenized_card_number' can't be null";
        }
        if ($this->container['embossed_name'] === null) {
            $invalidProperties[] = "'embossed_name' can't be null";
        }
        if ($this->container['service_request_type'] === null) {
            $invalidProperties[] = "'service_request_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tokenized_card_number
     *
     * @return string
     */
    public function getTokenizedCardNumber()
    {
        return $this->container['tokenized_card_number'];
    }

    /**
     * Sets tokenized_card_number
     *
     * @param string $tokenized_card_number Tokenized card number
     *
     * @return $this
     */
    public function setTokenizedCardNumber($tokenized_card_number)
    {
        $this->container['tokenized_card_number'] = $tokenized_card_number;

        return $this;
    }

    /**
     * Gets corporate_officer_details
     *
     * @return \Swagger\Client\Model\CorporateOfficerDetails
     */
    public function getCorporateOfficerDetails()
    {
        return $this->container['corporate_officer_details'];
    }

    /**
     * Sets corporate_officer_details
     *
     * @param \Swagger\Client\Model\CorporateOfficerDetails $corporate_officer_details corporate_officer_details
     *
     * @return $this
     */
    public function setCorporateOfficerDetails($corporate_officer_details)
    {
        $this->container['corporate_officer_details'] = $corporate_officer_details;

        return $this;
    }

    /**
     * Gets embossed_name
     *
     * @return string
     */
    public function getEmbossedName()
    {
        return $this->container['embossed_name'];
    }

    /**
     * Sets embossed_name
     *
     * @param string $embossed_name Customer Name embossed on the card
     *
     * @return $this
     */
    public function setEmbossedName($embossed_name)
    {
        $this->container['embossed_name'] = $embossed_name;

        return $this;
    }

    /**
     * Gets service_request_type
     *
     * @return string
     */
    public function getServiceRequestType()
    {
        return $this->container['service_request_type'];
    }

    /**
     * Sets service_request_type
     *
     * @param string $service_request_type This is a reference data field. Please use /v1/utilities/referenceData/{serviceRequestType} resource to get possible values of this field with descriptions
     *
     * @return $this
     */
    public function setServiceRequestType($service_request_type)
    {
        $this->container['service_request_type'] = $service_request_type;

        return $this;
    }

    /**
     * Gets stolen_date
     *
     * @return \DateTime
     */
    public function getStolenDate()
    {
        return $this->container['stolen_date'];
    }

    /**
     * Sets stolen_date
     *
     * @param \DateTime $stolen_date Cards Lost or Stolen date
     *
     * @return $this
     */
    public function setStolenDate($stolen_date)
    {
        $this->container['stolen_date'] = $stolen_date;

        return $this;
    }

    /**
     * Gets last_card_used_date
     *
     * @return \DateTime
     */
    public function getLastCardUsedDate()
    {
        return $this->container['last_card_used_date'];
    }

    /**
     * Sets last_card_used_date
     *
     * @param \DateTime $last_card_used_date Latest date when the card was used
     *
     * @return $this
     */
    public function setLastCardUsedDate($last_card_used_date)
    {
        $this->container['last_card_used_date'] = $last_card_used_date;

        return $this;
    }

    /**
     * Gets last_transaction_amount
     *
     * @return double
     */
    public function getLastTransactionAmount()
    {
        return $this->container['last_transaction_amount'];
    }

    /**
     * Sets last_transaction_amount
     *
     * @param double $last_transaction_amount Latest Transaction amount on the card
     *
     * @return $this
     */
    public function setLastTransactionAmount($last_transaction_amount)
    {
        $this->container['last_transaction_amount'] = $last_transaction_amount;

        return $this;
    }

    /**
     * Gets card_loss_type
     *
     * @return string
     */
    public function getCardLossType()
    {
        return $this->container['card_loss_type'];
    }

    /**
     * Sets card_loss_type
     *
     * @param string $card_loss_type Type of loss of the card. This is a reference data field. Please use /v1/utilities/referenceData/{typeOfLoss} resource to get possible values of this field with descriptions
     *
     * @return $this
     */
    public function setCardLossType($card_loss_type)
    {
        $this->container['card_loss_type'] = $card_loss_type;

        return $this;
    }

    /**
     * Gets lost_country
     *
     * @return string
     */
    public function getLostCountry()
    {
        return $this->container['lost_country'];
    }

    /**
     * Sets lost_country
     *
     * @param string $lost_country Country where the card was lost. This is a reference data field. Please use /v1/utilities/referenceData/{lostCountry} resource to get possible values of this field with descriptions
     *
     * @return $this
     */
    public function setLostCountry($lost_country)
    {
        $this->container['lost_country'] = $lost_country;

        return $this;
    }

    /**
     * Gets customer_remarks
     *
     * @return string
     */
    public function getCustomerRemarks()
    {
        return $this->container['customer_remarks'];
    }

    /**
     * Sets customer_remarks
     *
     * @param string $customer_remarks Remarks to be mentioned by customer (120 Bytes max length)
     *
     * @return $this
     */
    public function setCustomerRemarks($customer_remarks)
    {
        $this->container['customer_remarks'] = $customer_remarks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
