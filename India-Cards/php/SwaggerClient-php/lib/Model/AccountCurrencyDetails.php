<?php
/**
 * AccountCurrencyDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountCurrencyDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountCurrencyDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountCurrencyDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'display_account_number' => 'string',
'account_id' => 'string',
'new_account_opened_flag' => 'bool',
'global_wallet_account_type' => 'string',
'enrollment_status_flag' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'display_account_number' => null,
'account_id' => null,
'new_account_opened_flag' => null,
'global_wallet_account_type' => null,
'enrollment_status_flag' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_account_number' => 'displayAccountNumber',
'account_id' => 'accountId',
'new_account_opened_flag' => 'newAccountOpenedFlag',
'global_wallet_account_type' => 'globalWalletAccountType',
'enrollment_status_flag' => 'enrollmentStatusFlag'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_account_number' => 'setDisplayAccountNumber',
'account_id' => 'setAccountId',
'new_account_opened_flag' => 'setNewAccountOpenedFlag',
'global_wallet_account_type' => 'setGlobalWalletAccountType',
'enrollment_status_flag' => 'setEnrollmentStatusFlag'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_account_number' => 'getDisplayAccountNumber',
'account_id' => 'getAccountId',
'new_account_opened_flag' => 'getNewAccountOpenedFlag',
'global_wallet_account_type' => 'getGlobalWalletAccountType',
'enrollment_status_flag' => 'getEnrollmentStatusFlag'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_account_number'] = isset($data['display_account_number']) ? $data['display_account_number'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['new_account_opened_flag'] = isset($data['new_account_opened_flag']) ? $data['new_account_opened_flag'] : null;
        $this->container['global_wallet_account_type'] = isset($data['global_wallet_account_type']) ? $data['global_wallet_account_type'] : null;
        $this->container['enrollment_status_flag'] = isset($data['enrollment_status_flag']) ? $data['enrollment_status_flag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['new_account_opened_flag'] === null) {
            $invalidProperties[] = "'new_account_opened_flag' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_account_number
     *
     * @return string
     */
    public function getDisplayAccountNumber()
    {
        return $this->container['display_account_number'];
    }

    /**
     * Sets display_account_number
     *
     * @param string $display_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplayAccountNumber($display_account_number)
    {
        $this->container['display_account_number'] = $display_account_number;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The customer account identifier in encrypted format
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets new_account_opened_flag
     *
     * @return bool
     */
    public function getNewAccountOpenedFlag()
    {
        return $this->container['new_account_opened_flag'];
    }

    /**
     * Sets new_account_opened_flag
     *
     * @param bool $new_account_opened_flag This field is to indicate if the  account is newly opened or not.
     *
     * @return $this
     */
    public function setNewAccountOpenedFlag($new_account_opened_flag)
    {
        $this->container['new_account_opened_flag'] = $new_account_opened_flag;

        return $this;
    }

    /**
     * Gets global_wallet_account_type
     *
     * @return string
     */
    public function getGlobalWalletAccountType()
    {
        return $this->container['global_wallet_account_type'];
    }

    /**
     * Sets global_wallet_account_type
     *
     * @param string $global_wallet_account_type Type of account.Type of account.This is a reference data field. Please use /v1/apac/utilities/referenceData/{globalWalletAccountType} resource to get possible values of this field with descriptions.
     *
     * @return $this
     */
    public function setGlobalWalletAccountType($global_wallet_account_type)
    {
        $this->container['global_wallet_account_type'] = $global_wallet_account_type;

        return $this;
    }

    /**
     * Gets enrollment_status_flag
     *
     * @return bool
     */
    public function getEnrollmentStatusFlag()
    {
        return $this->container['enrollment_status_flag'];
    }

    /**
     * Sets enrollment_status_flag
     *
     * @param bool $enrollment_status_flag Flag to indicate whether new FCY account is enrolled to Multi currency account(Global Wallet).
     *
     * @return $this
     */
    public function setEnrollmentStatusFlag($enrollment_status_flag)
    {
        $this->container['enrollment_status_flag'] = $enrollment_status_flag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
