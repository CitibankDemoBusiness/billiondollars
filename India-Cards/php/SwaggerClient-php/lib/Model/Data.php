<?php
/**
 * Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Data Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_details' => '\Swagger\Client\Model\DataProductDetails',
'requirements' => '\Swagger\Client\Model\DataRequirements',
'product_offerings' => '\Swagger\Client\Model\DataProductOfferings',
'fees_charges' => '\Swagger\Client\Model\DataFeesCharges',
'promotions' => '\Swagger\Client\Model\DataPromotions'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_details' => null,
'requirements' => null,
'product_offerings' => null,
'fees_charges' => null,
'promotions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_details' => 'product_details',
'requirements' => 'requirements',
'product_offerings' => 'product_offerings',
'fees_charges' => 'fees_charges',
'promotions' => 'promotions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_details' => 'setProductDetails',
'requirements' => 'setRequirements',
'product_offerings' => 'setProductOfferings',
'fees_charges' => 'setFeesCharges',
'promotions' => 'setPromotions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_details' => 'getProductDetails',
'requirements' => 'getRequirements',
'product_offerings' => 'getProductOfferings',
'fees_charges' => 'getFeesCharges',
'promotions' => 'getPromotions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_details'] = isset($data['product_details']) ? $data['product_details'] : null;
        $this->container['requirements'] = isset($data['requirements']) ? $data['requirements'] : null;
        $this->container['product_offerings'] = isset($data['product_offerings']) ? $data['product_offerings'] : null;
        $this->container['fees_charges'] = isset($data['fees_charges']) ? $data['fees_charges'] : null;
        $this->container['promotions'] = isset($data['promotions']) ? $data['promotions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_details
     *
     * @return \Swagger\Client\Model\DataProductDetails
     */
    public function getProductDetails()
    {
        return $this->container['product_details'];
    }

    /**
     * Sets product_details
     *
     * @param \Swagger\Client\Model\DataProductDetails $product_details product_details
     *
     * @return $this
     */
    public function setProductDetails($product_details)
    {
        $this->container['product_details'] = $product_details;

        return $this;
    }

    /**
     * Gets requirements
     *
     * @return \Swagger\Client\Model\DataRequirements
     */
    public function getRequirements()
    {
        return $this->container['requirements'];
    }

    /**
     * Sets requirements
     *
     * @param \Swagger\Client\Model\DataRequirements $requirements requirements
     *
     * @return $this
     */
    public function setRequirements($requirements)
    {
        $this->container['requirements'] = $requirements;

        return $this;
    }

    /**
     * Gets product_offerings
     *
     * @return \Swagger\Client\Model\DataProductOfferings
     */
    public function getProductOfferings()
    {
        return $this->container['product_offerings'];
    }

    /**
     * Sets product_offerings
     *
     * @param \Swagger\Client\Model\DataProductOfferings $product_offerings product_offerings
     *
     * @return $this
     */
    public function setProductOfferings($product_offerings)
    {
        $this->container['product_offerings'] = $product_offerings;

        return $this;
    }

    /**
     * Gets fees_charges
     *
     * @return \Swagger\Client\Model\DataFeesCharges
     */
    public function getFeesCharges()
    {
        return $this->container['fees_charges'];
    }

    /**
     * Sets fees_charges
     *
     * @param \Swagger\Client\Model\DataFeesCharges $fees_charges fees_charges
     *
     * @return $this
     */
    public function setFeesCharges($fees_charges)
    {
        $this->container['fees_charges'] = $fees_charges;

        return $this;
    }

    /**
     * Gets promotions
     *
     * @return \Swagger\Client\Model\DataPromotions
     */
    public function getPromotions()
    {
        return $this->container['promotions'];
    }

    /**
     * Sets promotions
     *
     * @param \Swagger\Client\Model\DataPromotions $promotions promotions
     *
     * @return $this
     */
    public function setPromotions($promotions)
    {
        $this->container['promotions'] = $promotions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
