<?php
/**
 * RewardAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RewardAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RewardAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RewardAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'card_id' => 'string',
'display_card_number' => 'string',
'available_point_balance' => 'float',
'reward_category_code' => 'string',
'last_statement_point_balance' => 'double',
'points_earned' => 'double',
'reward_account_error_details' => '\Swagger\Client\Model\ErrorResponse'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'card_id' => null,
'display_card_number' => null,
'available_point_balance' => 'int64',
'reward_category_code' => null,
'last_statement_point_balance' => 'double',
'points_earned' => 'double',
'reward_account_error_details' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_id' => 'cardId',
'display_card_number' => 'displayCardNumber',
'available_point_balance' => 'availablePointBalance',
'reward_category_code' => 'rewardCategoryCode',
'last_statement_point_balance' => 'lastStatementPointBalance',
'points_earned' => 'pointsEarned',
'reward_account_error_details' => 'rewardAccountErrorDetails'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_id' => 'setCardId',
'display_card_number' => 'setDisplayCardNumber',
'available_point_balance' => 'setAvailablePointBalance',
'reward_category_code' => 'setRewardCategoryCode',
'last_statement_point_balance' => 'setLastStatementPointBalance',
'points_earned' => 'setPointsEarned',
'reward_account_error_details' => 'setRewardAccountErrorDetails'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_id' => 'getCardId',
'display_card_number' => 'getDisplayCardNumber',
'available_point_balance' => 'getAvailablePointBalance',
'reward_category_code' => 'getRewardCategoryCode',
'last_statement_point_balance' => 'getLastStatementPointBalance',
'points_earned' => 'getPointsEarned',
'reward_account_error_details' => 'getRewardAccountErrorDetails'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['display_card_number'] = isset($data['display_card_number']) ? $data['display_card_number'] : null;
        $this->container['available_point_balance'] = isset($data['available_point_balance']) ? $data['available_point_balance'] : null;
        $this->container['reward_category_code'] = isset($data['reward_category_code']) ? $data['reward_category_code'] : null;
        $this->container['last_statement_point_balance'] = isset($data['last_statement_point_balance']) ? $data['last_statement_point_balance'] : null;
        $this->container['points_earned'] = isset($data['points_earned']) ? $data['points_earned'] : null;
        $this->container['reward_account_error_details'] = isset($data['reward_account_error_details']) ? $data['reward_account_error_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_id'] === null) {
            $invalidProperties[] = "'card_id' can't be null";
        }
        if ($this->container['display_card_number'] === null) {
            $invalidProperties[] = "'display_card_number' can't be null";
        }
        if ($this->container['available_point_balance'] === null) {
            $invalidProperties[] = "'available_point_balance' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id The card id  in encrypted format
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets display_card_number
     *
     * @return string
     */
    public function getDisplayCardNumber()
    {
        return $this->container['display_card_number'];
    }

    /**
     * Sets display_card_number
     *
     * @param string $display_card_number A masked card number that can be displayed to the customer.
     *
     * @return $this
     */
    public function setDisplayCardNumber($display_card_number)
    {
        $this->container['display_card_number'] = $display_card_number;

        return $this;
    }

    /**
     * Gets available_point_balance
     *
     * @return float
     */
    public function getAvailablePointBalance()
    {
        return $this->container['available_point_balance'];
    }

    /**
     * Sets available_point_balance
     *
     * @param float $available_point_balance Number of rewards points or miles available.
     *
     * @return $this
     */
    public function setAvailablePointBalance($available_point_balance)
    {
        $this->container['available_point_balance'] = $available_point_balance;

        return $this;
    }

    /**
     * Gets reward_category_code
     *
     * @return string
     */
    public function getRewardCategoryCode()
    {
        return $this->container['reward_category_code'];
    }

    /**
     * Sets reward_category_code
     *
     * @param string $reward_category_code Reward category code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setRewardCategoryCode($reward_category_code)
    {
        $this->container['reward_category_code'] = $reward_category_code;

        return $this;
    }

    /**
     * Gets last_statement_point_balance
     *
     * @return double
     */
    public function getLastStatementPointBalance()
    {
        return $this->container['last_statement_point_balance'];
    }

    /**
     * Sets last_statement_point_balance
     *
     * @param double $last_statement_point_balance Number of rewards points or miles available since last statement balance.
     *
     * @return $this
     */
    public function setLastStatementPointBalance($last_statement_point_balance)
    {
        $this->container['last_statement_point_balance'] = $last_statement_point_balance;

        return $this;
    }

    /**
     * Gets points_earned
     *
     * @return double
     */
    public function getPointsEarned()
    {
        return $this->container['points_earned'];
    }

    /**
     * Sets points_earned
     *
     * @param double $points_earned Number of rewards points or miles earned since last statement date.
     *
     * @return $this
     */
    public function setPointsEarned($points_earned)
    {
        $this->container['points_earned'] = $points_earned;

        return $this;
    }

    /**
     * Gets reward_account_error_details
     *
     * @return \Swagger\Client\Model\ErrorResponse
     */
    public function getRewardAccountErrorDetails()
    {
        return $this->container['reward_account_error_details'];
    }

    /**
     * Sets reward_account_error_details
     *
     * @param \Swagger\Client\Model\ErrorResponse $reward_account_error_details reward_account_error_details
     *
     * @return $this
     */
    public function setRewardAccountErrorDetails($reward_account_error_details)
    {
        $this->container['reward_account_error_details'] = $reward_account_error_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
