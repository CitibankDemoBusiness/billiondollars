<?php
/**
 * Applicant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Applicant Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Applicant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Applicant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\Address[]',
'partner_customer_details' => '\Swagger\Client\Model\PartnerCustomerDetails',
'mother_maiden_name' => 'string',
'identification_document_details' => '\Swagger\Client\Model\IdentificationDocumentDetails[]',
'phone' => '\Swagger\Client\Model\Phone[]',
'employment_details' => '\Swagger\Client\Model\EmploymentDetails',
'name' => '\Swagger\Client\Model\Name',
'consent_details' => '\Swagger\Client\Model\ConsentDetails[]',
'reward_redemption_allowed_flag' => 'bool',
'demographics' => '\Swagger\Client\Model\Demographics'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'partner_customer_details' => null,
'mother_maiden_name' => null,
'identification_document_details' => null,
'phone' => null,
'employment_details' => null,
'name' => null,
'consent_details' => null,
'reward_redemption_allowed_flag' => null,
'demographics' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'partner_customer_details' => 'partnerCustomerDetails',
'mother_maiden_name' => 'motherMaidenName',
'identification_document_details' => 'identificationDocumentDetails',
'phone' => 'phone',
'employment_details' => 'employmentDetails',
'name' => 'name',
'consent_details' => 'consentDetails',
'reward_redemption_allowed_flag' => 'rewardRedemptionAllowedFlag',
'demographics' => 'demographics'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'partner_customer_details' => 'setPartnerCustomerDetails',
'mother_maiden_name' => 'setMotherMaidenName',
'identification_document_details' => 'setIdentificationDocumentDetails',
'phone' => 'setPhone',
'employment_details' => 'setEmploymentDetails',
'name' => 'setName',
'consent_details' => 'setConsentDetails',
'reward_redemption_allowed_flag' => 'setRewardRedemptionAllowedFlag',
'demographics' => 'setDemographics'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'partner_customer_details' => 'getPartnerCustomerDetails',
'mother_maiden_name' => 'getMotherMaidenName',
'identification_document_details' => 'getIdentificationDocumentDetails',
'phone' => 'getPhone',
'employment_details' => 'getEmploymentDetails',
'name' => 'getName',
'consent_details' => 'getConsentDetails',
'reward_redemption_allowed_flag' => 'getRewardRedemptionAllowedFlag',
'demographics' => 'getDemographics'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['partner_customer_details'] = isset($data['partner_customer_details']) ? $data['partner_customer_details'] : null;
        $this->container['mother_maiden_name'] = isset($data['mother_maiden_name']) ? $data['mother_maiden_name'] : null;
        $this->container['identification_document_details'] = isset($data['identification_document_details']) ? $data['identification_document_details'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['employment_details'] = isset($data['employment_details']) ? $data['employment_details'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['consent_details'] = isset($data['consent_details']) ? $data['consent_details'] : null;
        $this->container['reward_redemption_allowed_flag'] = isset($data['reward_redemption_allowed_flag']) ? $data['reward_redemption_allowed_flag'] : null;
        $this->container['demographics'] = isset($data['demographics']) ? $data['demographics'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['mother_maiden_name'] === null) {
            $invalidProperties[] = "'mother_maiden_name' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['employment_details'] === null) {
            $invalidProperties[] = "'employment_details' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['consent_details'] === null) {
            $invalidProperties[] = "'consent_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address[]
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address[] $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets partner_customer_details
     *
     * @return \Swagger\Client\Model\PartnerCustomerDetails
     */
    public function getPartnerCustomerDetails()
    {
        return $this->container['partner_customer_details'];
    }

    /**
     * Sets partner_customer_details
     *
     * @param \Swagger\Client\Model\PartnerCustomerDetails $partner_customer_details partner_customer_details
     *
     * @return $this
     */
    public function setPartnerCustomerDetails($partner_customer_details)
    {
        $this->container['partner_customer_details'] = $partner_customer_details;

        return $this;
    }

    /**
     * Gets mother_maiden_name
     *
     * @return string
     */
    public function getMotherMaidenName()
    {
        return $this->container['mother_maiden_name'];
    }

    /**
     * Sets mother_maiden_name
     *
     * @param string $mother_maiden_name Mother's maiden name
     *
     * @return $this
     */
    public function setMotherMaidenName($mother_maiden_name)
    {
        $this->container['mother_maiden_name'] = $mother_maiden_name;

        return $this;
    }

    /**
     * Gets identification_document_details
     *
     * @return \Swagger\Client\Model\IdentificationDocumentDetails[]
     */
    public function getIdentificationDocumentDetails()
    {
        return $this->container['identification_document_details'];
    }

    /**
     * Sets identification_document_details
     *
     * @param \Swagger\Client\Model\IdentificationDocumentDetails[] $identification_document_details identification_document_details
     *
     * @return $this
     */
    public function setIdentificationDocumentDetails($identification_document_details)
    {
        $this->container['identification_document_details'] = $identification_document_details;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Swagger\Client\Model\Phone[]
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Swagger\Client\Model\Phone[] $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets employment_details
     *
     * @return \Swagger\Client\Model\EmploymentDetails
     */
    public function getEmploymentDetails()
    {
        return $this->container['employment_details'];
    }

    /**
     * Sets employment_details
     *
     * @param \Swagger\Client\Model\EmploymentDetails $employment_details employment_details
     *
     * @return $this
     */
    public function setEmploymentDetails($employment_details)
    {
        $this->container['employment_details'] = $employment_details;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Swagger\Client\Model\Name
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Swagger\Client\Model\Name $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets consent_details
     *
     * @return \Swagger\Client\Model\ConsentDetails[]
     */
    public function getConsentDetails()
    {
        return $this->container['consent_details'];
    }

    /**
     * Sets consent_details
     *
     * @param \Swagger\Client\Model\ConsentDetails[] $consent_details consent_details
     *
     * @return $this
     */
    public function setConsentDetails($consent_details)
    {
        $this->container['consent_details'] = $consent_details;

        return $this;
    }

    /**
     * Gets reward_redemption_allowed_flag
     *
     * @return bool
     */
    public function getRewardRedemptionAllowedFlag()
    {
        return $this->container['reward_redemption_allowed_flag'];
    }

    /**
     * Sets reward_redemption_allowed_flag
     *
     * @param bool $reward_redemption_allowed_flag Flag to indicated whether reward redemption allowed for supplementary. Valid values: true and false
     *
     * @return $this
     */
    public function setRewardRedemptionAllowedFlag($reward_redemption_allowed_flag)
    {
        $this->container['reward_redemption_allowed_flag'] = $reward_redemption_allowed_flag;

        return $this;
    }

    /**
     * Gets demographics
     *
     * @return \Swagger\Client\Model\Demographics
     */
    public function getDemographics()
    {
        return $this->container['demographics'];
    }

    /**
     * Sets demographics
     *
     * @param \Swagger\Client\Model\Demographics $demographics demographics
     *
     * @return $this
     */
    public function setDemographics($demographics)
    {
        $this->container['demographics'] = $demographics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
