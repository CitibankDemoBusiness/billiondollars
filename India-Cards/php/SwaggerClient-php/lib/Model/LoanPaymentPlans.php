<?php
/**
 * LoanPaymentPlans
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LoanPaymentPlans Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoanPaymentPlans implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoanPaymentPlans';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'loan_tenure' => 'string',
'base_interest_rate' => 'double',
'annual_percentage_rate' => 'double',
'installment_amount' => 'double',
'interest_rate' => 'double',
'installment_interest_amount' => 'double',
'first_total_installment_amount' => 'double',
'loan_cet_percentage' => 'double',
'fixed_interest_rate' => 'double',
'loan_booking_fee_indicator' => 'string',
'loan_booking_fee' => 'double',
'loan_booking_fee_percentage' => 'double',
'initial_interest_amount' => 'double',
'initial_fee_amount' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'loan_tenure' => null,
'base_interest_rate' => 'double',
'annual_percentage_rate' => 'double',
'installment_amount' => 'double',
'interest_rate' => 'double',
'installment_interest_amount' => 'double',
'first_total_installment_amount' => 'double',
'loan_cet_percentage' => 'double',
'fixed_interest_rate' => 'double',
'loan_booking_fee_indicator' => null,
'loan_booking_fee' => 'double',
'loan_booking_fee_percentage' => 'double',
'initial_interest_amount' => 'double',
'initial_fee_amount' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loan_tenure' => 'loanTenure',
'base_interest_rate' => 'baseInterestRate',
'annual_percentage_rate' => 'annualPercentageRate',
'installment_amount' => 'installmentAmount',
'interest_rate' => 'interestRate',
'installment_interest_amount' => 'installmentInterestAmount',
'first_total_installment_amount' => 'firstTotalInstallmentAmount',
'loan_cet_percentage' => 'loanCetPercentage',
'fixed_interest_rate' => 'fixedInterestRate',
'loan_booking_fee_indicator' => 'loanBookingFeeIndicator',
'loan_booking_fee' => 'loanBookingFee',
'loan_booking_fee_percentage' => 'loanBookingFeePercentage',
'initial_interest_amount' => 'initialInterestAmount',
'initial_fee_amount' => 'initialFeeAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loan_tenure' => 'setLoanTenure',
'base_interest_rate' => 'setBaseInterestRate',
'annual_percentage_rate' => 'setAnnualPercentageRate',
'installment_amount' => 'setInstallmentAmount',
'interest_rate' => 'setInterestRate',
'installment_interest_amount' => 'setInstallmentInterestAmount',
'first_total_installment_amount' => 'setFirstTotalInstallmentAmount',
'loan_cet_percentage' => 'setLoanCetPercentage',
'fixed_interest_rate' => 'setFixedInterestRate',
'loan_booking_fee_indicator' => 'setLoanBookingFeeIndicator',
'loan_booking_fee' => 'setLoanBookingFee',
'loan_booking_fee_percentage' => 'setLoanBookingFeePercentage',
'initial_interest_amount' => 'setInitialInterestAmount',
'initial_fee_amount' => 'setInitialFeeAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loan_tenure' => 'getLoanTenure',
'base_interest_rate' => 'getBaseInterestRate',
'annual_percentage_rate' => 'getAnnualPercentageRate',
'installment_amount' => 'getInstallmentAmount',
'interest_rate' => 'getInterestRate',
'installment_interest_amount' => 'getInstallmentInterestAmount',
'first_total_installment_amount' => 'getFirstTotalInstallmentAmount',
'loan_cet_percentage' => 'getLoanCetPercentage',
'fixed_interest_rate' => 'getFixedInterestRate',
'loan_booking_fee_indicator' => 'getLoanBookingFeeIndicator',
'loan_booking_fee' => 'getLoanBookingFee',
'loan_booking_fee_percentage' => 'getLoanBookingFeePercentage',
'initial_interest_amount' => 'getInitialInterestAmount',
'initial_fee_amount' => 'getInitialFeeAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['loan_tenure'] = isset($data['loan_tenure']) ? $data['loan_tenure'] : null;
        $this->container['base_interest_rate'] = isset($data['base_interest_rate']) ? $data['base_interest_rate'] : null;
        $this->container['annual_percentage_rate'] = isset($data['annual_percentage_rate']) ? $data['annual_percentage_rate'] : null;
        $this->container['installment_amount'] = isset($data['installment_amount']) ? $data['installment_amount'] : null;
        $this->container['interest_rate'] = isset($data['interest_rate']) ? $data['interest_rate'] : null;
        $this->container['installment_interest_amount'] = isset($data['installment_interest_amount']) ? $data['installment_interest_amount'] : null;
        $this->container['first_total_installment_amount'] = isset($data['first_total_installment_amount']) ? $data['first_total_installment_amount'] : null;
        $this->container['loan_cet_percentage'] = isset($data['loan_cet_percentage']) ? $data['loan_cet_percentage'] : null;
        $this->container['fixed_interest_rate'] = isset($data['fixed_interest_rate']) ? $data['fixed_interest_rate'] : null;
        $this->container['loan_booking_fee_indicator'] = isset($data['loan_booking_fee_indicator']) ? $data['loan_booking_fee_indicator'] : null;
        $this->container['loan_booking_fee'] = isset($data['loan_booking_fee']) ? $data['loan_booking_fee'] : null;
        $this->container['loan_booking_fee_percentage'] = isset($data['loan_booking_fee_percentage']) ? $data['loan_booking_fee_percentage'] : null;
        $this->container['initial_interest_amount'] = isset($data['initial_interest_amount']) ? $data['initial_interest_amount'] : null;
        $this->container['initial_fee_amount'] = isset($data['initial_fee_amount']) ? $data['initial_fee_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['loan_tenure'] === null) {
            $invalidProperties[] = "'loan_tenure' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loan_tenure
     *
     * @return string
     */
    public function getLoanTenure()
    {
        return $this->container['loan_tenure'];
    }

    /**
     * Sets loan_tenure
     *
     * @param string $loan_tenure Tenure of loan against card
     *
     * @return $this
     */
    public function setLoanTenure($loan_tenure)
    {
        $this->container['loan_tenure'] = $loan_tenure;

        return $this;
    }

    /**
     * Gets base_interest_rate
     *
     * @return double
     */
    public function getBaseInterestRate()
    {
        return $this->container['base_interest_rate'];
    }

    /**
     * Sets base_interest_rate
     *
     * @param double $base_interest_rate Base Interest rate
     *
     * @return $this
     */
    public function setBaseInterestRate($base_interest_rate)
    {
        $this->container['base_interest_rate'] = $base_interest_rate;

        return $this;
    }

    /**
     * Gets annual_percentage_rate
     *
     * @return double
     */
    public function getAnnualPercentageRate()
    {
        return $this->container['annual_percentage_rate'];
    }

    /**
     * Sets annual_percentage_rate
     *
     * @param double $annual_percentage_rate Annual percentage rate of the loan
     *
     * @return $this
     */
    public function setAnnualPercentageRate($annual_percentage_rate)
    {
        $this->container['annual_percentage_rate'] = $annual_percentage_rate;

        return $this;
    }

    /**
     * Gets installment_amount
     *
     * @return double
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param double $installment_amount Installment amount to be payed by customer in order to repay the loan.
     *
     * @return $this
     */
    public function setInstallmentAmount($installment_amount)
    {
        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return double
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param double $interest_rate Interest rate for the loan
     *
     * @return $this
     */
    public function setInterestRate($interest_rate)
    {
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets installment_interest_amount
     *
     * @return double
     */
    public function getInstallmentInterestAmount()
    {
        return $this->container['installment_interest_amount'];
    }

    /**
     * Sets installment_interest_amount
     *
     * @param double $installment_interest_amount The interest amount to be paid as installment
     *
     * @return $this
     */
    public function setInstallmentInterestAmount($installment_interest_amount)
    {
        $this->container['installment_interest_amount'] = $installment_interest_amount;

        return $this;
    }

    /**
     * Gets first_total_installment_amount
     *
     * @return double
     */
    public function getFirstTotalInstallmentAmount()
    {
        return $this->container['first_total_installment_amount'];
    }

    /**
     * Sets first_total_installment_amount
     *
     * @param double $first_total_installment_amount Monthly total (Interest + Amount)
     *
     * @return $this
     */
    public function setFirstTotalInstallmentAmount($first_total_installment_amount)
    {
        $this->container['first_total_installment_amount'] = $first_total_installment_amount;

        return $this;
    }

    /**
     * Gets loan_cet_percentage
     *
     * @return double
     */
    public function getLoanCetPercentage()
    {
        return $this->container['loan_cet_percentage'];
    }

    /**
     * Sets loan_cet_percentage
     *
     * @param double $loan_cet_percentage Loan CET Percentage
     *
     * @return $this
     */
    public function setLoanCetPercentage($loan_cet_percentage)
    {
        $this->container['loan_cet_percentage'] = $loan_cet_percentage;

        return $this;
    }

    /**
     * Gets fixed_interest_rate
     *
     * @return double
     */
    public function getFixedInterestRate()
    {
        return $this->container['fixed_interest_rate'];
    }

    /**
     * Sets fixed_interest_rate
     *
     * @param double $fixed_interest_rate Fixed interest rate
     *
     * @return $this
     */
    public function setFixedInterestRate($fixed_interest_rate)
    {
        $this->container['fixed_interest_rate'] = $fixed_interest_rate;

        return $this;
    }

    /**
     * Gets loan_booking_fee_indicator
     *
     * @return string
     */
    public function getLoanBookingFeeIndicator()
    {
        return $this->container['loan_booking_fee_indicator'];
    }

    /**
     * Sets loan_booking_fee_indicator
     *
     * @param string $loan_booking_fee_indicator Loan booking fee indicator
     *
     * @return $this
     */
    public function setLoanBookingFeeIndicator($loan_booking_fee_indicator)
    {
        $this->container['loan_booking_fee_indicator'] = $loan_booking_fee_indicator;

        return $this;
    }

    /**
     * Gets loan_booking_fee
     *
     * @return double
     */
    public function getLoanBookingFee()
    {
        return $this->container['loan_booking_fee'];
    }

    /**
     * Sets loan_booking_fee
     *
     * @param double $loan_booking_fee Loan booking fee
     *
     * @return $this
     */
    public function setLoanBookingFee($loan_booking_fee)
    {
        $this->container['loan_booking_fee'] = $loan_booking_fee;

        return $this;
    }

    /**
     * Gets loan_booking_fee_percentage
     *
     * @return double
     */
    public function getLoanBookingFeePercentage()
    {
        return $this->container['loan_booking_fee_percentage'];
    }

    /**
     * Sets loan_booking_fee_percentage
     *
     * @param double $loan_booking_fee_percentage Loan booking fee percentage
     *
     * @return $this
     */
    public function setLoanBookingFeePercentage($loan_booking_fee_percentage)
    {
        $this->container['loan_booking_fee_percentage'] = $loan_booking_fee_percentage;

        return $this;
    }

    /**
     * Gets initial_interest_amount
     *
     * @return double
     */
    public function getInitialInterestAmount()
    {
        return $this->container['initial_interest_amount'];
    }

    /**
     * Sets initial_interest_amount
     *
     * @param double $initial_interest_amount Initial interest(0th interest)
     *
     * @return $this
     */
    public function setInitialInterestAmount($initial_interest_amount)
    {
        $this->container['initial_interest_amount'] = $initial_interest_amount;

        return $this;
    }

    /**
     * Gets initial_fee_amount
     *
     * @return double
     */
    public function getInitialFeeAmount()
    {
        return $this->container['initial_fee_amount'];
    }

    /**
     * Sets initial_fee_amount
     *
     * @param double $initial_fee_amount Initial fee amount charged to customer
     *
     * @return $this
     */
    public function setInitialFeeAmount($initial_fee_amount)
    {
        $this->container['initial_fee_amount'] = $initial_fee_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
