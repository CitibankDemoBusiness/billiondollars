<?php
/**
 * LoanAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LoanAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoanAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoanAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_description' => 'string',
'loan_reference_number' => 'string',
'loan_amount' => 'double',
'loan_start_date' => '\DateTime',
'loan_tenure' => 'int',
'installment_amount' => 'double',
'processing_charge_amount' => 'double',
'annual_percentage_rate' => 'double',
'effective_interest_rate' => 'double',
'installment_cycle' => 'int',
'remaining_loan_amount' => 'double',
'loan_remaining_term_number' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_description' => null,
'loan_reference_number' => null,
'loan_amount' => 'double',
'loan_start_date' => 'date',
'loan_tenure' => 'int32',
'installment_amount' => 'double',
'processing_charge_amount' => 'double',
'annual_percentage_rate' => 'double',
'effective_interest_rate' => 'double',
'installment_cycle' => 'int32',
'remaining_loan_amount' => 'double',
'loan_remaining_term_number' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_description' => 'transactionDescription',
'loan_reference_number' => 'loanReferenceNumber',
'loan_amount' => 'loanAmount',
'loan_start_date' => 'loanStartDate',
'loan_tenure' => 'loanTenure',
'installment_amount' => 'installmentAmount',
'processing_charge_amount' => 'processingChargeAmount',
'annual_percentage_rate' => 'annualPercentageRate',
'effective_interest_rate' => 'effectiveInterestRate',
'installment_cycle' => 'installmentCycle',
'remaining_loan_amount' => 'remainingLoanAmount',
'loan_remaining_term_number' => 'loanRemainingTermNumber'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_description' => 'setTransactionDescription',
'loan_reference_number' => 'setLoanReferenceNumber',
'loan_amount' => 'setLoanAmount',
'loan_start_date' => 'setLoanStartDate',
'loan_tenure' => 'setLoanTenure',
'installment_amount' => 'setInstallmentAmount',
'processing_charge_amount' => 'setProcessingChargeAmount',
'annual_percentage_rate' => 'setAnnualPercentageRate',
'effective_interest_rate' => 'setEffectiveInterestRate',
'installment_cycle' => 'setInstallmentCycle',
'remaining_loan_amount' => 'setRemainingLoanAmount',
'loan_remaining_term_number' => 'setLoanRemainingTermNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_description' => 'getTransactionDescription',
'loan_reference_number' => 'getLoanReferenceNumber',
'loan_amount' => 'getLoanAmount',
'loan_start_date' => 'getLoanStartDate',
'loan_tenure' => 'getLoanTenure',
'installment_amount' => 'getInstallmentAmount',
'processing_charge_amount' => 'getProcessingChargeAmount',
'annual_percentage_rate' => 'getAnnualPercentageRate',
'effective_interest_rate' => 'getEffectiveInterestRate',
'installment_cycle' => 'getInstallmentCycle',
'remaining_loan_amount' => 'getRemainingLoanAmount',
'loan_remaining_term_number' => 'getLoanRemainingTermNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_description'] = isset($data['transaction_description']) ? $data['transaction_description'] : null;
        $this->container['loan_reference_number'] = isset($data['loan_reference_number']) ? $data['loan_reference_number'] : null;
        $this->container['loan_amount'] = isset($data['loan_amount']) ? $data['loan_amount'] : null;
        $this->container['loan_start_date'] = isset($data['loan_start_date']) ? $data['loan_start_date'] : null;
        $this->container['loan_tenure'] = isset($data['loan_tenure']) ? $data['loan_tenure'] : null;
        $this->container['installment_amount'] = isset($data['installment_amount']) ? $data['installment_amount'] : null;
        $this->container['processing_charge_amount'] = isset($data['processing_charge_amount']) ? $data['processing_charge_amount'] : null;
        $this->container['annual_percentage_rate'] = isset($data['annual_percentage_rate']) ? $data['annual_percentage_rate'] : null;
        $this->container['effective_interest_rate'] = isset($data['effective_interest_rate']) ? $data['effective_interest_rate'] : null;
        $this->container['installment_cycle'] = isset($data['installment_cycle']) ? $data['installment_cycle'] : null;
        $this->container['remaining_loan_amount'] = isset($data['remaining_loan_amount']) ? $data['remaining_loan_amount'] : null;
        $this->container['loan_remaining_term_number'] = isset($data['loan_remaining_term_number']) ? $data['loan_remaining_term_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['remaining_loan_amount'] === null) {
            $invalidProperties[] = "'remaining_loan_amount' can't be null";
        }
        if ($this->container['loan_remaining_term_number'] === null) {
            $invalidProperties[] = "'loan_remaining_term_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_description
     *
     * @return string
     */
    public function getTransactionDescription()
    {
        return $this->container['transaction_description'];
    }

    /**
     * Sets transaction_description
     *
     * @param string $transaction_description Transaction Description
     *
     * @return $this
     */
    public function setTransactionDescription($transaction_description)
    {
        $this->container['transaction_description'] = $transaction_description;

        return $this;
    }

    /**
     * Gets loan_reference_number
     *
     * @return string
     */
    public function getLoanReferenceNumber()
    {
        return $this->container['loan_reference_number'];
    }

    /**
     * Sets loan_reference_number
     *
     * @param string $loan_reference_number Unique refrence number associated with the loan.
     *
     * @return $this
     */
    public function setLoanReferenceNumber($loan_reference_number)
    {
        $this->container['loan_reference_number'] = $loan_reference_number;

        return $this;
    }

    /**
     * Gets loan_amount
     *
     * @return double
     */
    public function getLoanAmount()
    {
        return $this->container['loan_amount'];
    }

    /**
     * Sets loan_amount
     *
     * @param double $loan_amount Loan Amount
     *
     * @return $this
     */
    public function setLoanAmount($loan_amount)
    {
        $this->container['loan_amount'] = $loan_amount;

        return $this;
    }

    /**
     * Gets loan_start_date
     *
     * @return \DateTime
     */
    public function getLoanStartDate()
    {
        return $this->container['loan_start_date'];
    }

    /**
     * Sets loan_start_date
     *
     * @param \DateTime $loan_start_date Start date of the loan.Date in ISO 8601, YYYY-MM-DD format
     *
     * @return $this
     */
    public function setLoanStartDate($loan_start_date)
    {
        $this->container['loan_start_date'] = $loan_start_date;

        return $this;
    }

    /**
     * Gets loan_tenure
     *
     * @return int
     */
    public function getLoanTenure()
    {
        return $this->container['loan_tenure'];
    }

    /**
     * Sets loan_tenure
     *
     * @param int $loan_tenure Tenure of loan against card. It is considered in terms of number of months.
     *
     * @return $this
     */
    public function setLoanTenure($loan_tenure)
    {
        $this->container['loan_tenure'] = $loan_tenure;

        return $this;
    }

    /**
     * Gets installment_amount
     *
     * @return double
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param double $installment_amount Amount of money a borrower has to pay as installment.
     *
     * @return $this
     */
    public function setInstallmentAmount($installment_amount)
    {
        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }

    /**
     * Gets processing_charge_amount
     *
     * @return double
     */
    public function getProcessingChargeAmount()
    {
        return $this->container['processing_charge_amount'];
    }

    /**
     * Sets processing_charge_amount
     *
     * @param double $processing_charge_amount Charges levied on applicant by the bank to process the loan.
     *
     * @return $this
     */
    public function setProcessingChargeAmount($processing_charge_amount)
    {
        $this->container['processing_charge_amount'] = $processing_charge_amount;

        return $this;
    }

    /**
     * Gets annual_percentage_rate
     *
     * @return double
     */
    public function getAnnualPercentageRate()
    {
        return $this->container['annual_percentage_rate'];
    }

    /**
     * Sets annual_percentage_rate
     *
     * @param double $annual_percentage_rate Annual Percentage Rate
     *
     * @return $this
     */
    public function setAnnualPercentageRate($annual_percentage_rate)
    {
        $this->container['annual_percentage_rate'] = $annual_percentage_rate;

        return $this;
    }

    /**
     * Gets effective_interest_rate
     *
     * @return double
     */
    public function getEffectiveInterestRate()
    {
        return $this->container['effective_interest_rate'];
    }

    /**
     * Sets effective_interest_rate
     *
     * @param double $effective_interest_rate Effective Percentage Rate
     *
     * @return $this
     */
    public function setEffectiveInterestRate($effective_interest_rate)
    {
        $this->container['effective_interest_rate'] = $effective_interest_rate;

        return $this;
    }

    /**
     * Gets installment_cycle
     *
     * @return int
     */
    public function getInstallmentCycle()
    {
        return $this->container['installment_cycle'];
    }

    /**
     * Sets installment_cycle
     *
     * @param int $installment_cycle Intallment Cycle
     *
     * @return $this
     */
    public function setInstallmentCycle($installment_cycle)
    {
        $this->container['installment_cycle'] = $installment_cycle;

        return $this;
    }

    /**
     * Gets remaining_loan_amount
     *
     * @return double
     */
    public function getRemainingLoanAmount()
    {
        return $this->container['remaining_loan_amount'];
    }

    /**
     * Sets remaining_loan_amount
     *
     * @param double $remaining_loan_amount Remaining Loan Amount
     *
     * @return $this
     */
    public function setRemainingLoanAmount($remaining_loan_amount)
    {
        $this->container['remaining_loan_amount'] = $remaining_loan_amount;

        return $this;
    }

    /**
     * Gets loan_remaining_term_number
     *
     * @return int
     */
    public function getLoanRemainingTermNumber()
    {
        return $this->container['loan_remaining_term_number'];
    }

    /**
     * Sets loan_remaining_term_number
     *
     * @param int $loan_remaining_term_number Remaining term of installment loan
     *
     * @return $this
     */
    public function setLoanRemainingTermNumber($loan_remaining_term_number)
    {
        $this->container['loan_remaining_term_number'] = $loan_remaining_term_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
