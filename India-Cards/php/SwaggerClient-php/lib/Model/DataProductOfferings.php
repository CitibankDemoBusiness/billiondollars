<?php
/**
 * DataProductOfferings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DataProductOfferings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataProductOfferings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'data_product_offerings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category' => 'string',
'item' => 'string',
'remark' => 'string',
'branding' => 'string',
'tnc_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'category' => null,
'item' => null,
'remark' => null,
'branding' => null,
'tnc_url' => 'uri'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
'item' => 'item',
'remark' => 'remark',
'branding' => 'branding',
'tnc_url' => 'tnc_url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
'item' => 'setItem',
'remark' => 'setRemark',
'branding' => 'setBranding',
'tnc_url' => 'setTncUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
'item' => 'getItem',
'remark' => 'getRemark',
'branding' => 'getBranding',
'tnc_url' => 'getTncUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CATEGORY_REWARD_CASHBACK = 'reward_cashback';
const CATEGORY_AIR_MILES = 'air_miles';
const CATEGORY_FEATURE_BENEFIT = 'feature_benefit';
const ITEM_BOOKSTORE = 'bookstore';
const ITEM_CASHLESS_TRANSACTION = 'cashless_transaction';
const ITEM_CINEMA = 'cinema';
const ITEM_DEPARTMENT_STORE = 'department_store';
const ITEM_DINING = 'dining';
const ITEM_EDUCATION = 'education';
const ITEM_ENTERTAINMENT = 'entertainment';
const ITEM_EXPRESS_AUTOPAY = 'express_autopay';
const ITEM_GOLD = 'gold';
const ITEM_GROCERIES = 'groceries';
const ITEM_HIGHWAY = 'highway';
const ITEM_HOTEL = 'hotel';
const ITEM_INSTALLMENT_PLAN = 'installment_plan';
const ITEM_INSURANCE_PREMIUM = 'insurance_premium';
const ITEM_LOCAL_RETAIL = 'local_retail';
const ITEM_MEMBERSHIP_DAY = 'membership_day';
const ITEM_MOBILE_TELCO = 'mobile_telco';
const ITEM_MYEG_SERVICES = 'myeg_services';
const ITEM_ONLINE_AIR_TICKET = 'online_air_ticket';
const ITEM_ONLINE_BILL_PAYMENT = 'online_bill_payment';
const ITEM_ONLINE_SHOPPING = 'online_shopping';
const ITEM_OTHERS = 'others';
const ITEM_OVERSEA_RETAIL = 'oversea_retail';
const ITEM_PETROL = 'petrol';
const ITEM_PHARMACY = 'pharmacy';
const ITEM_RETAIL = 'retail';
const ITEM_SHOPPING = 'shopping';
const ITEM_TOUCH_N_GO = 'touch_n_go';
const ITEM_TRANSPORT = 'transport';
const ITEM_TRAVEL = 'travel';
const ITEM_UTILITY_BILL = 'utility_bill';
const ITEM_WEEKEND = 'weekend';
const ITEM_ASIA_MILES = 'asia_miles';
const ITEM_BIG_POINT_AASIA = 'big_point_aasia';
const ITEM_ENRICH_MAS = 'enrich_mas';
const ITEM_GARUDA_MILES_ID = 'garuda_miles_id';
const ITEM_KRISFYLER_SG = 'krisfyler_sg';
const ITEM_MALINDO_MILES_MALINDOAIR = 'malindo_miles_malindoair';
const ITEM_STAR_ALLIANCE = 'star_alliance';
const ITEM_AIRPORT_SPEED_PASS = 'airport_speed_pass';
const ITEM_ANNUAL_FEE_WAIVER = 'annual_fee_waiver';
const ITEM_AUTO_BILL_PAYMENT = 'auto_bill_payment';
const ITEM_BALANCE_TRANSFER_PLAN = 'balance_transfer_plan';
const ITEM_CASH_ADVANCE = 'cash_advance';
const ITEM_CASH_INSTALLMENT_PLAN = 'cash_installment_plan';
const ITEM_CASH_WITHDRAWAL = 'cash_withdrawal';
const ITEM_CHARITY_FUND = 'charity_fund';
const ITEM_CONCIERGE_SERVICES = 'concierge_services';
const ITEM_CONTACTLESS = 'contactless';
const ITEM_DINING_PRIVILEGES = 'dining_privileges';
const ITEM_DISCOUNT = 'discount';
const ITEM_EASY_PAYMENT_PLAN = 'easy_payment_plan';
const ITEM_ECOMMERCE_INSURANCE = 'ecommerce_insurance';
const ITEM_EMERGENCY_CHEQUE_CASHING = 'emergency_cheque_cashing';
const ITEM_GLOBAL_ASSISTANCE = 'global_assistance';
const ITEM_GOLF = 'golf';
const ITEM_PARTNERSHIP_DISCOUNT = 'partnership_discount';
const ITEM_PLAZA_PREMIUM_LOUNGE = 'plaza_premium_lounge';
const ITEM_RETAIL_INSURANCE = 'retail_insurance';
const ITEM_TRAVEL_INSURANCE = 'travel_insurance';
const ITEM_WALLET_GUARD = 'wallet_guard';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_REWARD_CASHBACK,
self::CATEGORY_AIR_MILES,
self::CATEGORY_FEATURE_BENEFIT,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemAllowableValues()
    {
        return [
            self::ITEM_BOOKSTORE,
self::ITEM_CASHLESS_TRANSACTION,
self::ITEM_CINEMA,
self::ITEM_DEPARTMENT_STORE,
self::ITEM_DINING,
self::ITEM_EDUCATION,
self::ITEM_ENTERTAINMENT,
self::ITEM_EXPRESS_AUTOPAY,
self::ITEM_GOLD,
self::ITEM_GROCERIES,
self::ITEM_HIGHWAY,
self::ITEM_HOTEL,
self::ITEM_INSTALLMENT_PLAN,
self::ITEM_INSURANCE_PREMIUM,
self::ITEM_LOCAL_RETAIL,
self::ITEM_MEMBERSHIP_DAY,
self::ITEM_MOBILE_TELCO,
self::ITEM_MYEG_SERVICES,
self::ITEM_ONLINE_AIR_TICKET,
self::ITEM_ONLINE_BILL_PAYMENT,
self::ITEM_ONLINE_SHOPPING,
self::ITEM_OTHERS,
self::ITEM_OVERSEA_RETAIL,
self::ITEM_PETROL,
self::ITEM_PHARMACY,
self::ITEM_RETAIL,
self::ITEM_SHOPPING,
self::ITEM_TOUCH_N_GO,
self::ITEM_TRANSPORT,
self::ITEM_TRAVEL,
self::ITEM_UTILITY_BILL,
self::ITEM_WEEKEND,
self::ITEM_ASIA_MILES,
self::ITEM_BIG_POINT_AASIA,
self::ITEM_ENRICH_MAS,
self::ITEM_GARUDA_MILES_ID,
self::ITEM_KRISFYLER_SG,
self::ITEM_MALINDO_MILES_MALINDOAIR,
self::ITEM_STAR_ALLIANCE,
self::ITEM_AIRPORT_SPEED_PASS,
self::ITEM_ANNUAL_FEE_WAIVER,
self::ITEM_AUTO_BILL_PAYMENT,
self::ITEM_BALANCE_TRANSFER_PLAN,
self::ITEM_CASH_ADVANCE,
self::ITEM_CASH_INSTALLMENT_PLAN,
self::ITEM_CASH_WITHDRAWAL,
self::ITEM_CHARITY_FUND,
self::ITEM_CONCIERGE_SERVICES,
self::ITEM_CONTACTLESS,
self::ITEM_DINING_PRIVILEGES,
self::ITEM_DISCOUNT,
self::ITEM_EASY_PAYMENT_PLAN,
self::ITEM_ECOMMERCE_INSURANCE,
self::ITEM_EMERGENCY_CHEQUE_CASHING,
self::ITEM_GLOBAL_ASSISTANCE,
self::ITEM_GOLF,
self::ITEM_PARTNERSHIP_DISCOUNT,
self::ITEM_PLAZA_PREMIUM_LOUNGE,
self::ITEM_RETAIL_INSURANCE,
self::ITEM_TRAVEL_INSURANCE,
self::ITEM_WALLET_GUARD,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['branding'] = isset($data['branding']) ? $data['branding'] : null;
        $this->container['tnc_url'] = isset($data['tnc_url']) ? $data['tnc_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        $allowedValues = $this->getItemAllowableValues();
        if (!is_null($this->container['item']) && !in_array($this->container['item'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'item', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Type of offering
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $allowedValues = $this->getItemAllowableValues();
        if (!in_array($item, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'item', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark Additional notes for the reward, air miles and feature
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets branding
     *
     * @return string
     */
    public function getBranding()
    {
        return $this->container['branding'];
    }

    /**
     * Sets branding
     *
     * @param string $branding Branding for specific offering
     *
     * @return $this
     */
    public function setBranding($branding)
    {
        $this->container['branding'] = $branding;

        return $this;
    }

    /**
     * Gets tnc_url
     *
     * @return string
     */
    public function getTncUrl()
    {
        return $this->container['tnc_url'];
    }

    /**
     * Sets tnc_url
     *
     * @param string $tnc_url Absolute URL to term and conditions for specific offering
     *
     * @return $this
     */
    public function setTncUrl($tnc_url)
    {
        $this->container['tnc_url'] = $tnc_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
