<?php
/**
 * DataProductDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DataProductDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataProductDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'data_product_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'description' => 'string',
'product_type' => 'string',
'sub_product_type' => 'string',
'shariah_compliance' => 'bool',
'shariah_compliance_remark' => 'string',
'card_type' => 'string',
'pds_url' => 'string',
'image_url' => 'string',
'disclaimer_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'description' => null,
'product_type' => null,
'sub_product_type' => null,
'shariah_compliance' => null,
'shariah_compliance_remark' => null,
'card_type' => null,
'pds_url' => 'uri',
'image_url' => 'uri',
'disclaimer_url' => 'uri'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'description' => 'description',
'product_type' => 'product_type',
'sub_product_type' => 'sub_product_type',
'shariah_compliance' => 'shariah_compliance',
'shariah_compliance_remark' => 'shariah_compliance_remark',
'card_type' => 'card_type',
'pds_url' => 'pds_url',
'image_url' => 'image_url',
'disclaimer_url' => 'disclaimer_url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'description' => 'setDescription',
'product_type' => 'setProductType',
'sub_product_type' => 'setSubProductType',
'shariah_compliance' => 'setShariahCompliance',
'shariah_compliance_remark' => 'setShariahComplianceRemark',
'card_type' => 'setCardType',
'pds_url' => 'setPdsUrl',
'image_url' => 'setImageUrl',
'disclaimer_url' => 'setDisclaimerUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'description' => 'getDescription',
'product_type' => 'getProductType',
'sub_product_type' => 'getSubProductType',
'shariah_compliance' => 'getShariahCompliance',
'shariah_compliance_remark' => 'getShariahComplianceRemark',
'card_type' => 'getCardType',
'pds_url' => 'getPdsUrl',
'image_url' => 'getImageUrl',
'disclaimer_url' => 'getDisclaimerUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRODUCT_TYPE_AMERICAN_EXPRESS = 'american_express';
const PRODUCT_TYPE_JCB = 'jcb';
const PRODUCT_TYPE_MASTERCARD = 'mastercard';
const PRODUCT_TYPE_MYDEBIT = 'mydebit';
const PRODUCT_TYPE_OTHERS = 'others';
const PRODUCT_TYPE__SWITCH = 'switch';
const PRODUCT_TYPE_UNIONPAY = 'unionpay';
const PRODUCT_TYPE_VISA = 'visa';
const SUB_PRODUCT_TYPE_BLACK = 'black';
const SUB_PRODUCT_TYPE_CLASSIC = 'classic';
const SUB_PRODUCT_TYPE_COMMERCIAL = 'commercial';
const SUB_PRODUCT_TYPE_DIAMOND = 'diamond';
const SUB_PRODUCT_TYPE_ELECTRON = 'electron';
const SUB_PRODUCT_TYPE_GENERIC = 'generic';
const SUB_PRODUCT_TYPE_GOLD = 'gold';
const SUB_PRODUCT_TYPE_INFINITE = 'infinite';
const SUB_PRODUCT_TYPE_INFINITE_PRIVILEGE = 'infinite_privilege';
const SUB_PRODUCT_TYPE_MAESTRO = 'maestro';
const SUB_PRODUCT_TYPE_OTHERS = 'others';
const SUB_PRODUCT_TYPE_PLATINUM = 'platinum';
const SUB_PRODUCT_TYPE_RESERVE = 'reserve';
const SUB_PRODUCT_TYPE_SIGNATURE = 'signature';
const SUB_PRODUCT_TYPE_WORLD = 'world';
const SUB_PRODUCT_TYPE_WORLD_ELITE = 'world_elite';
const CARD_TYPE_CREDIT_CARD = 'credit_card';
const CARD_TYPE_DEBIT_CARD = 'debit_card';
const CARD_TYPE_CHARGE_CARD = 'charge_card';
const CARD_TYPE_PREPAID_CARD = 'prepaid_card';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_AMERICAN_EXPRESS,
self::PRODUCT_TYPE_JCB,
self::PRODUCT_TYPE_MASTERCARD,
self::PRODUCT_TYPE_MYDEBIT,
self::PRODUCT_TYPE_OTHERS,
self::PRODUCT_TYPE__SWITCH,
self::PRODUCT_TYPE_UNIONPAY,
self::PRODUCT_TYPE_VISA,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubProductTypeAllowableValues()
    {
        return [
            self::SUB_PRODUCT_TYPE_BLACK,
self::SUB_PRODUCT_TYPE_CLASSIC,
self::SUB_PRODUCT_TYPE_COMMERCIAL,
self::SUB_PRODUCT_TYPE_DIAMOND,
self::SUB_PRODUCT_TYPE_ELECTRON,
self::SUB_PRODUCT_TYPE_GENERIC,
self::SUB_PRODUCT_TYPE_GOLD,
self::SUB_PRODUCT_TYPE_INFINITE,
self::SUB_PRODUCT_TYPE_INFINITE_PRIVILEGE,
self::SUB_PRODUCT_TYPE_MAESTRO,
self::SUB_PRODUCT_TYPE_OTHERS,
self::SUB_PRODUCT_TYPE_PLATINUM,
self::SUB_PRODUCT_TYPE_RESERVE,
self::SUB_PRODUCT_TYPE_SIGNATURE,
self::SUB_PRODUCT_TYPE_WORLD,
self::SUB_PRODUCT_TYPE_WORLD_ELITE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_CREDIT_CARD,
self::CARD_TYPE_DEBIT_CARD,
self::CARD_TYPE_CHARGE_CARD,
self::CARD_TYPE_PREPAID_CARD,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['sub_product_type'] = isset($data['sub_product_type']) ? $data['sub_product_type'] : null;
        $this->container['shariah_compliance'] = isset($data['shariah_compliance']) ? $data['shariah_compliance'] : null;
        $this->container['shariah_compliance_remark'] = isset($data['shariah_compliance_remark']) ? $data['shariah_compliance_remark'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['pds_url'] = isset($data['pds_url']) ? $data['pds_url'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['disclaimer_url'] = isset($data['disclaimer_url']) ? $data['disclaimer_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['product_type'] === null) {
            $invalidProperties[] = "'product_type' can't be null";
        }
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['product_type']) && !in_array($this->container['product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'product_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubProductTypeAllowableValues();
        if (!is_null($this->container['sub_product_type']) && !in_array($this->container['sub_product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sub_product_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shariah_compliance'] === null) {
            $invalidProperties[] = "'shariah_compliance' can't be null";
        }
        if ($this->container['card_type'] === null) {
            $invalidProperties[] = "'card_type' can't be null";
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['pds_url'] === null) {
            $invalidProperties[] = "'pds_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Product name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Product description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type Type of product
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!in_array($product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets sub_product_type
     *
     * @return string
     */
    public function getSubProductType()
    {
        return $this->container['sub_product_type'];
    }

    /**
     * Sets sub_product_type
     *
     * @param string $sub_product_type Type of sub-product
     *
     * @return $this
     */
    public function setSubProductType($sub_product_type)
    {
        $allowedValues = $this->getSubProductTypeAllowableValues();
        if (!is_null($sub_product_type) && !in_array($sub_product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sub_product_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sub_product_type'] = $sub_product_type;

        return $this;
    }

    /**
     * Gets shariah_compliance
     *
     * @return bool
     */
    public function getShariahCompliance()
    {
        return $this->container['shariah_compliance'];
    }

    /**
     * Sets shariah_compliance
     *
     * @param bool $shariah_compliance The indicator for Islamic or Conventional card
     *
     * @return $this
     */
    public function setShariahCompliance($shariah_compliance)
    {
        $this->container['shariah_compliance'] = $shariah_compliance;

        return $this;
    }

    /**
     * Gets shariah_compliance_remark
     *
     * @return string
     */
    public function getShariahComplianceRemark()
    {
        return $this->container['shariah_compliance_remark'];
    }

    /**
     * Sets shariah_compliance_remark
     *
     * @param string $shariah_compliance_remark Approval body for shariah compliance
     *
     * @return $this
     */
    public function setShariahComplianceRemark($shariah_compliance_remark)
    {
        $this->container['shariah_compliance_remark'] = $shariah_compliance_remark;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type Type of card
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets pds_url
     *
     * @return string
     */
    public function getPdsUrl()
    {
        return $this->container['pds_url'];
    }

    /**
     * Sets pds_url
     *
     * @param string $pds_url URL for product disclosure sheet
     *
     * @return $this
     */
    public function setPdsUrl($pds_url)
    {
        $this->container['pds_url'] = $pds_url;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url Absolute URL to image in SVG format
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets disclaimer_url
     *
     * @return string
     */
    public function getDisclaimerUrl()
    {
        return $this->container['disclaimer_url'];
    }

    /**
     * Sets disclaimer_url
     *
     * @param string $disclaimer_url Absolute URL for product disclaimer
     *
     * @return $this
     */
    public function setDisclaimerUrl($disclaimer_url)
    {
        $this->container['disclaimer_url'] = $disclaimer_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
