<?php
/**
 * Statement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Statement Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Statement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Statement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'epp_minimum_eligible_amount' => 'double',
'epp_maximum_eligible_amount' => 'double',
'statement_date' => '\DateTime',
'statement_balance_amount' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'epp_minimum_eligible_amount' => 'double',
'epp_maximum_eligible_amount' => 'double',
'statement_date' => 'date',
'statement_balance_amount' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'epp_minimum_eligible_amount' => 'eppMinimumEligibleAmount',
'epp_maximum_eligible_amount' => 'eppMaximumEligibleAmount',
'statement_date' => 'statementDate',
'statement_balance_amount' => 'statementBalanceAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'epp_minimum_eligible_amount' => 'setEppMinimumEligibleAmount',
'epp_maximum_eligible_amount' => 'setEppMaximumEligibleAmount',
'statement_date' => 'setStatementDate',
'statement_balance_amount' => 'setStatementBalanceAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'epp_minimum_eligible_amount' => 'getEppMinimumEligibleAmount',
'epp_maximum_eligible_amount' => 'getEppMaximumEligibleAmount',
'statement_date' => 'getStatementDate',
'statement_balance_amount' => 'getStatementBalanceAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['epp_minimum_eligible_amount'] = isset($data['epp_minimum_eligible_amount']) ? $data['epp_minimum_eligible_amount'] : null;
        $this->container['epp_maximum_eligible_amount'] = isset($data['epp_maximum_eligible_amount']) ? $data['epp_maximum_eligible_amount'] : null;
        $this->container['statement_date'] = isset($data['statement_date']) ? $data['statement_date'] : null;
        $this->container['statement_balance_amount'] = isset($data['statement_balance_amount']) ? $data['statement_balance_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['epp_minimum_eligible_amount'] === null) {
            $invalidProperties[] = "'epp_minimum_eligible_amount' can't be null";
        }
        if ($this->container['epp_maximum_eligible_amount'] === null) {
            $invalidProperties[] = "'epp_maximum_eligible_amount' can't be null";
        }
        if ($this->container['statement_date'] === null) {
            $invalidProperties[] = "'statement_date' can't be null";
        }
        if ($this->container['statement_balance_amount'] === null) {
            $invalidProperties[] = "'statement_balance_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets epp_minimum_eligible_amount
     *
     * @return double
     */
    public function getEppMinimumEligibleAmount()
    {
        return $this->container['epp_minimum_eligible_amount'];
    }

    /**
     * Sets epp_minimum_eligible_amount
     *
     * @param double $epp_minimum_eligible_amount Minimum eligible amount for which Equal Payment Plan can be booked.
     *
     * @return $this
     */
    public function setEppMinimumEligibleAmount($epp_minimum_eligible_amount)
    {
        $this->container['epp_minimum_eligible_amount'] = $epp_minimum_eligible_amount;

        return $this;
    }

    /**
     * Gets epp_maximum_eligible_amount
     *
     * @return double
     */
    public function getEppMaximumEligibleAmount()
    {
        return $this->container['epp_maximum_eligible_amount'];
    }

    /**
     * Sets epp_maximum_eligible_amount
     *
     * @param double $epp_maximum_eligible_amount Maximum eligible amount for which Equal Payment Plan can be booked.
     *
     * @return $this
     */
    public function setEppMaximumEligibleAmount($epp_maximum_eligible_amount)
    {
        $this->container['epp_maximum_eligible_amount'] = $epp_maximum_eligible_amount;

        return $this;
    }

    /**
     * Gets statement_date
     *
     * @return \DateTime
     */
    public function getStatementDate()
    {
        return $this->container['statement_date'];
    }

    /**
     * Sets statement_date
     *
     * @param \DateTime $statement_date Date on which the account statement has been generated in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setStatementDate($statement_date)
    {
        $this->container['statement_date'] = $statement_date;

        return $this;
    }

    /**
     * Gets statement_balance_amount
     *
     * @return double
     */
    public function getStatementBalanceAmount()
    {
        return $this->container['statement_balance_amount'];
    }

    /**
     * Sets statement_balance_amount
     *
     * @param double $statement_balance_amount Statement balance amount on the statement date
     *
     * @return $this
     */
    public function setStatementBalanceAmount($statement_balance_amount)
    {
        $this->container['statement_balance_amount'] = $statement_balance_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
