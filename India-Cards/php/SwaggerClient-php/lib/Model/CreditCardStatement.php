<?php
/**
 * CreditCardStatement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditCardStatement Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardStatement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditCardStatement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'statement_date' => '\DateTime',
'statement_id' => 'string',
'currency_code' => 'string',
'credit_limit' => 'double',
'outstanding_balance' => 'double',
'last_statement_balance' => 'double',
'payment_due_date' => '\DateTime',
'minimum_due_amount' => 'double',
'eligible_for_equal_payment_plans' => '\Swagger\Client\Model\EligibleForEqualPaymentPlan[]',
'reward_points' => '\Swagger\Client\Model\RewardPoints'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'statement_date' => 'date',
'statement_id' => null,
'currency_code' => null,
'credit_limit' => 'double',
'outstanding_balance' => 'double',
'last_statement_balance' => 'double',
'payment_due_date' => 'date',
'minimum_due_amount' => 'double',
'eligible_for_equal_payment_plans' => null,
'reward_points' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'statement_date' => 'statementDate',
'statement_id' => 'statementId',
'currency_code' => 'currencyCode',
'credit_limit' => 'creditLimit',
'outstanding_balance' => 'outstandingBalance',
'last_statement_balance' => 'lastStatementBalance',
'payment_due_date' => 'paymentDueDate',
'minimum_due_amount' => 'minimumDueAmount',
'eligible_for_equal_payment_plans' => 'eligibleForEqualPaymentPlans',
'reward_points' => 'rewardPoints'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'statement_date' => 'setStatementDate',
'statement_id' => 'setStatementId',
'currency_code' => 'setCurrencyCode',
'credit_limit' => 'setCreditLimit',
'outstanding_balance' => 'setOutstandingBalance',
'last_statement_balance' => 'setLastStatementBalance',
'payment_due_date' => 'setPaymentDueDate',
'minimum_due_amount' => 'setMinimumDueAmount',
'eligible_for_equal_payment_plans' => 'setEligibleForEqualPaymentPlans',
'reward_points' => 'setRewardPoints'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'statement_date' => 'getStatementDate',
'statement_id' => 'getStatementId',
'currency_code' => 'getCurrencyCode',
'credit_limit' => 'getCreditLimit',
'outstanding_balance' => 'getOutstandingBalance',
'last_statement_balance' => 'getLastStatementBalance',
'payment_due_date' => 'getPaymentDueDate',
'minimum_due_amount' => 'getMinimumDueAmount',
'eligible_for_equal_payment_plans' => 'getEligibleForEqualPaymentPlans',
'reward_points' => 'getRewardPoints'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['statement_date'] = isset($data['statement_date']) ? $data['statement_date'] : null;
        $this->container['statement_id'] = isset($data['statement_id']) ? $data['statement_id'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['outstanding_balance'] = isset($data['outstanding_balance']) ? $data['outstanding_balance'] : null;
        $this->container['last_statement_balance'] = isset($data['last_statement_balance']) ? $data['last_statement_balance'] : null;
        $this->container['payment_due_date'] = isset($data['payment_due_date']) ? $data['payment_due_date'] : null;
        $this->container['minimum_due_amount'] = isset($data['minimum_due_amount']) ? $data['minimum_due_amount'] : null;
        $this->container['eligible_for_equal_payment_plans'] = isset($data['eligible_for_equal_payment_plans']) ? $data['eligible_for_equal_payment_plans'] : null;
        $this->container['reward_points'] = isset($data['reward_points']) ? $data['reward_points'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets statement_date
     *
     * @return \DateTime
     */
    public function getStatementDate()
    {
        return $this->container['statement_date'];
    }

    /**
     * Sets statement_date
     *
     * @param \DateTime $statement_date The statement date in ISO 8601 format YYYY-MM-DD
     *
     * @return $this
     */
    public function setStatementDate($statement_date)
    {
        $this->container['statement_date'] = $statement_date;

        return $this;
    }

    /**
     * Gets statement_id
     *
     * @return string
     */
    public function getStatementId()
    {
        return $this->container['statement_id'];
    }

    /**
     * Sets statement_id
     *
     * @param string $statement_id Unique identifier for the statement
     *
     * @return $this
     */
    public function setStatementId($statement_id)
    {
        $this->container['statement_id'] = $statement_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code of the statement in ISO 4217 format
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit The maximum amount of credit that extend to a customer
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets outstanding_balance
     *
     * @return double
     */
    public function getOutstandingBalance()
    {
        return $this->container['outstanding_balance'];
    }

    /**
     * Sets outstanding_balance
     *
     * @param double $outstanding_balance Outstanding balance amount on the statement date
     *
     * @return $this
     */
    public function setOutstandingBalance($outstanding_balance)
    {
        $this->container['outstanding_balance'] = $outstanding_balance;

        return $this;
    }

    /**
     * Gets last_statement_balance
     *
     * @return double
     */
    public function getLastStatementBalance()
    {
        return $this->container['last_statement_balance'];
    }

    /**
     * Sets last_statement_balance
     *
     * @param double $last_statement_balance The balance on last statement date
     *
     * @return $this
     */
    public function setLastStatementBalance($last_statement_balance)
    {
        $this->container['last_statement_balance'] = $last_statement_balance;

        return $this;
    }

    /**
     * Gets payment_due_date
     *
     * @return \DateTime
     */
    public function getPaymentDueDate()
    {
        return $this->container['payment_due_date'];
    }

    /**
     * Sets payment_due_date
     *
     * @param \DateTime $payment_due_date Next payment due date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setPaymentDueDate($payment_due_date)
    {
        $this->container['payment_due_date'] = $payment_due_date;

        return $this;
    }

    /**
     * Gets minimum_due_amount
     *
     * @return double
     */
    public function getMinimumDueAmount()
    {
        return $this->container['minimum_due_amount'];
    }

    /**
     * Sets minimum_due_amount
     *
     * @param double $minimum_due_amount Minimum due amount for a payment cycle
     *
     * @return $this
     */
    public function setMinimumDueAmount($minimum_due_amount)
    {
        $this->container['minimum_due_amount'] = $minimum_due_amount;

        return $this;
    }

    /**
     * Gets eligible_for_equal_payment_plans
     *
     * @return \Swagger\Client\Model\EligibleForEqualPaymentPlan[]
     */
    public function getEligibleForEqualPaymentPlans()
    {
        return $this->container['eligible_for_equal_payment_plans'];
    }

    /**
     * Sets eligible_for_equal_payment_plans
     *
     * @param \Swagger\Client\Model\EligibleForEqualPaymentPlan[] $eligible_for_equal_payment_plans eligible_for_equal_payment_plans
     *
     * @return $this
     */
    public function setEligibleForEqualPaymentPlans($eligible_for_equal_payment_plans)
    {
        $this->container['eligible_for_equal_payment_plans'] = $eligible_for_equal_payment_plans;

        return $this;
    }

    /**
     * Gets reward_points
     *
     * @return \Swagger\Client\Model\RewardPoints
     */
    public function getRewardPoints()
    {
        return $this->container['reward_points'];
    }

    /**
     * Sets reward_points
     *
     * @param \Swagger\Client\Model\RewardPoints $reward_points reward_points
     *
     * @return $this
     */
    public function setRewardPoints($reward_points)
    {
        $this->container['reward_points'] = $reward_points;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
