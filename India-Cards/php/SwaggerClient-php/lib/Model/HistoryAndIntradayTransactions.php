<?php
/**
 * HistoryAndIntradayTransactions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HistoryAndIntradayTransactions Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoryAndIntradayTransactions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HistoryAndIntradayTransactions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'next_start_index' => 'string',
'more_indicator' => 'string',
'number_of_transactions' => 'int',
'history_and_intraday_transaction_records' => '\Swagger\Client\Model\HistoryAndIntradayTransactionRecords[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'next_start_index' => null,
'more_indicator' => null,
'number_of_transactions' => 'int32',
'history_and_intraday_transaction_records' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'next_start_index' => 'nextStartIndex',
'more_indicator' => 'moreIndicator',
'number_of_transactions' => 'numberOfTransactions',
'history_and_intraday_transaction_records' => 'historyAndIntradayTransactionRecords'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'next_start_index' => 'setNextStartIndex',
'more_indicator' => 'setMoreIndicator',
'number_of_transactions' => 'setNumberOfTransactions',
'history_and_intraday_transaction_records' => 'setHistoryAndIntradayTransactionRecords'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'next_start_index' => 'getNextStartIndex',
'more_indicator' => 'getMoreIndicator',
'number_of_transactions' => 'getNumberOfTransactions',
'history_and_intraday_transaction_records' => 'getHistoryAndIntradayTransactionRecords'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['next_start_index'] = isset($data['next_start_index']) ? $data['next_start_index'] : null;
        $this->container['more_indicator'] = isset($data['more_indicator']) ? $data['more_indicator'] : null;
        $this->container['number_of_transactions'] = isset($data['number_of_transactions']) ? $data['number_of_transactions'] : null;
        $this->container['history_and_intraday_transaction_records'] = isset($data['history_and_intraday_transaction_records']) ? $data['history_and_intraday_transaction_records'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets next_start_index
     *
     * @return string
     */
    public function getNextStartIndex()
    {
        return $this->container['next_start_index'];
    }

    /**
     * Sets next_start_index
     *
     * @param string $next_start_index For pagination - the starting index for retrieving the next page/batch of records.
     *
     * @return $this
     */
    public function setNextStartIndex($next_start_index)
    {
        $this->container['next_start_index'] = $next_start_index;

        return $this;
    }

    /**
     * Gets more_indicator
     *
     * @return string
     */
    public function getMoreIndicator()
    {
        return $this->container['more_indicator'];
    }

    /**
     * Sets more_indicator
     *
     * @param string $more_indicator This field indicates that more records are available for retrieval.
     *
     * @return $this
     */
    public function setMoreIndicator($more_indicator)
    {
        $this->container['more_indicator'] = $more_indicator;

        return $this;
    }

    /**
     * Gets number_of_transactions
     *
     * @return int
     */
    public function getNumberOfTransactions()
    {
        return $this->container['number_of_transactions'];
    }

    /**
     * Sets number_of_transactions
     *
     * @param int $number_of_transactions Number of Transactions
     *
     * @return $this
     */
    public function setNumberOfTransactions($number_of_transactions)
    {
        $this->container['number_of_transactions'] = $number_of_transactions;

        return $this;
    }

    /**
     * Gets history_and_intraday_transaction_records
     *
     * @return \Swagger\Client\Model\HistoryAndIntradayTransactionRecords[]
     */
    public function getHistoryAndIntradayTransactionRecords()
    {
        return $this->container['history_and_intraday_transaction_records'];
    }

    /**
     * Sets history_and_intraday_transaction_records
     *
     * @param \Swagger\Client\Model\HistoryAndIntradayTransactionRecords[] $history_and_intraday_transaction_records history_and_intraday_transaction_records
     *
     * @return $this
     */
    public function setHistoryAndIntradayTransactionRecords($history_and_intraday_transaction_records)
    {
        $this->container['history_and_intraday_transaction_records'] = $history_and_intraday_transaction_records;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
