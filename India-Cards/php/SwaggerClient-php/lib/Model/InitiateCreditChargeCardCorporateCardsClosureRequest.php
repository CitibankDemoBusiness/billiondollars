<?php
/**
 * InitiateCreditChargeCardCorporateCardsClosureRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InitiateCreditChargeCardCorporateCardsClosureRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InitiateCreditChargeCardCorporateCardsClosureRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InitiateCreditChargeCardCorporateCardsClosureRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tokenized_card_number' => 'string',
'corporate_officer_details' => '\Swagger\Client\Model\CorporateOfficerDetails',
'cancellation_reason_code' => 'string',
'cancellation_type' => 'string',
'effective_cancel_date' => '\DateTime',
'postal_mail_code' => 'string',
'permenant_account_closure_flag' => 'bool',
'consent_given_flag' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tokenized_card_number' => null,
'corporate_officer_details' => null,
'cancellation_reason_code' => null,
'cancellation_type' => null,
'effective_cancel_date' => 'date',
'postal_mail_code' => null,
'permenant_account_closure_flag' => null,
'consent_given_flag' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tokenized_card_number' => 'tokenizedCardNumber',
'corporate_officer_details' => 'corporateOfficerDetails',
'cancellation_reason_code' => 'cancellationReasonCode',
'cancellation_type' => 'cancellationType',
'effective_cancel_date' => 'effectiveCancelDate',
'postal_mail_code' => 'postalMailCode',
'permenant_account_closure_flag' => 'permenantAccountClosureFlag',
'consent_given_flag' => 'consentGivenFlag'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tokenized_card_number' => 'setTokenizedCardNumber',
'corporate_officer_details' => 'setCorporateOfficerDetails',
'cancellation_reason_code' => 'setCancellationReasonCode',
'cancellation_type' => 'setCancellationType',
'effective_cancel_date' => 'setEffectiveCancelDate',
'postal_mail_code' => 'setPostalMailCode',
'permenant_account_closure_flag' => 'setPermenantAccountClosureFlag',
'consent_given_flag' => 'setConsentGivenFlag'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tokenized_card_number' => 'getTokenizedCardNumber',
'corporate_officer_details' => 'getCorporateOfficerDetails',
'cancellation_reason_code' => 'getCancellationReasonCode',
'cancellation_type' => 'getCancellationType',
'effective_cancel_date' => 'getEffectiveCancelDate',
'postal_mail_code' => 'getPostalMailCode',
'permenant_account_closure_flag' => 'getPermenantAccountClosureFlag',
'consent_given_flag' => 'getConsentGivenFlag'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tokenized_card_number'] = isset($data['tokenized_card_number']) ? $data['tokenized_card_number'] : null;
        $this->container['corporate_officer_details'] = isset($data['corporate_officer_details']) ? $data['corporate_officer_details'] : null;
        $this->container['cancellation_reason_code'] = isset($data['cancellation_reason_code']) ? $data['cancellation_reason_code'] : null;
        $this->container['cancellation_type'] = isset($data['cancellation_type']) ? $data['cancellation_type'] : null;
        $this->container['effective_cancel_date'] = isset($data['effective_cancel_date']) ? $data['effective_cancel_date'] : null;
        $this->container['postal_mail_code'] = isset($data['postal_mail_code']) ? $data['postal_mail_code'] : null;
        $this->container['permenant_account_closure_flag'] = isset($data['permenant_account_closure_flag']) ? $data['permenant_account_closure_flag'] : null;
        $this->container['consent_given_flag'] = isset($data['consent_given_flag']) ? $data['consent_given_flag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tokenized_card_number'] === null) {
            $invalidProperties[] = "'tokenized_card_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tokenized_card_number
     *
     * @return string
     */
    public function getTokenizedCardNumber()
    {
        return $this->container['tokenized_card_number'];
    }

    /**
     * Sets tokenized_card_number
     *
     * @param string $tokenized_card_number Tokenized card number
     *
     * @return $this
     */
    public function setTokenizedCardNumber($tokenized_card_number)
    {
        $this->container['tokenized_card_number'] = $tokenized_card_number;

        return $this;
    }

    /**
     * Gets corporate_officer_details
     *
     * @return \Swagger\Client\Model\CorporateOfficerDetails
     */
    public function getCorporateOfficerDetails()
    {
        return $this->container['corporate_officer_details'];
    }

    /**
     * Sets corporate_officer_details
     *
     * @param \Swagger\Client\Model\CorporateOfficerDetails $corporate_officer_details corporate_officer_details
     *
     * @return $this
     */
    public function setCorporateOfficerDetails($corporate_officer_details)
    {
        $this->container['corporate_officer_details'] = $corporate_officer_details;

        return $this;
    }

    /**
     * Gets cancellation_reason_code
     *
     * @return string
     */
    public function getCancellationReasonCode()
    {
        return $this->container['cancellation_reason_code'];
    }

    /**
     * Sets cancellation_reason_code
     *
     * @param string $cancellation_reason_code cancellationReasonCode. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationReasonCode} resource to get possible values of this field with descriptions
     *
     * @return $this
     */
    public function setCancellationReasonCode($cancellation_reason_code)
    {
        $this->container['cancellation_reason_code'] = $cancellation_reason_code;

        return $this;
    }

    /**
     * Gets cancellation_type
     *
     * @return string
     */
    public function getCancellationType()
    {
        return $this->container['cancellation_type'];
    }

    /**
     * Sets cancellation_type
     *
     * @param string $cancellation_type cancellationReasonDescription. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationType} resource to get possible values of this field with descriptions
     *
     * @return $this
     */
    public function setCancellationType($cancellation_type)
    {
        $this->container['cancellation_type'] = $cancellation_type;

        return $this;
    }

    /**
     * Gets effective_cancel_date
     *
     * @return \DateTime
     */
    public function getEffectiveCancelDate()
    {
        return $this->container['effective_cancel_date'];
    }

    /**
     * Sets effective_cancel_date
     *
     * @param \DateTime $effective_cancel_date Cancellation date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setEffectiveCancelDate($effective_cancel_date)
    {
        $this->container['effective_cancel_date'] = $effective_cancel_date;

        return $this;
    }

    /**
     * Gets postal_mail_code
     *
     * @return string
     */
    public function getPostalMailCode()
    {
        return $this->container['postal_mail_code'];
    }

    /**
     * Sets postal_mail_code
     *
     * @param string $postal_mail_code Mail letter code if business opt to send letter to customer. This is a reference data field. Please use /v1/utilities/referenceData/{postalMailCode} resource to get possible values of this field with descriptions.
     *
     * @return $this
     */
    public function setPostalMailCode($postal_mail_code)
    {
        $this->container['postal_mail_code'] = $postal_mail_code;

        return $this;
    }

    /**
     * Gets permenant_account_closure_flag
     *
     * @return bool
     */
    public function getPermenantAccountClosureFlag()
    {
        return $this->container['permenant_account_closure_flag'];
    }

    /**
     * Sets permenant_account_closure_flag
     *
     * @param bool $permenant_account_closure_flag Permanent Account Closure Flag
     *
     * @return $this
     */
    public function setPermenantAccountClosureFlag($permenant_account_closure_flag)
    {
        $this->container['permenant_account_closure_flag'] = $permenant_account_closure_flag;

        return $this;
    }

    /**
     * Gets consent_given_flag
     *
     * @return bool
     */
    public function getConsentGivenFlag()
    {
        return $this->container['consent_given_flag'];
    }

    /**
     * Sets consent_given_flag
     *
     * @param bool $consent_given_flag This is consent flag from the customer to pay back if any outstanding on that account while closure
     *
     * @return $this
     */
    public function setConsentGivenFlag($consent_given_flag)
    {
        $this->container['consent_given_flag'] = $consent_given_flag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
