<?php
/**
 * UpdateIssuedDeviceAllocationDevicePfidRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateIssuedDeviceAllocationDevicePfidRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateIssuedDeviceAllocationDevicePfidRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateIssuedDeviceAllocationDevicePfidRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_timestamp' => 'int',
'card_reference_id' => 'string',
'payment_financial_instrument_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_timestamp' => 'int32',
'card_reference_id' => null,
'payment_financial_instrument_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_timestamp' => 'requestTimestamp',
'card_reference_id' => 'cardReferenceId',
'payment_financial_instrument_id' => 'paymentFinancialInstrumentId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_timestamp' => 'setRequestTimestamp',
'card_reference_id' => 'setCardReferenceId',
'payment_financial_instrument_id' => 'setPaymentFinancialInstrumentId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_timestamp' => 'getRequestTimestamp',
'card_reference_id' => 'getCardReferenceId',
'payment_financial_instrument_id' => 'getPaymentFinancialInstrumentId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_timestamp'] = isset($data['request_timestamp']) ? $data['request_timestamp'] : null;
        $this->container['card_reference_id'] = isset($data['card_reference_id']) ? $data['card_reference_id'] : null;
        $this->container['payment_financial_instrument_id'] = isset($data['payment_financial_instrument_id']) ? $data['payment_financial_instrument_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_timestamp'] === null) {
            $invalidProperties[] = "'request_timestamp' can't be null";
        }
        if ($this->container['card_reference_id'] === null) {
            $invalidProperties[] = "'card_reference_id' can't be null";
        }
        if ($this->container['payment_financial_instrument_id'] === null) {
            $invalidProperties[] = "'payment_financial_instrument_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_timestamp
     *
     * @return int
     */
    public function getRequestTimestamp()
    {
        return $this->container['request_timestamp'];
    }

    /**
     * Sets request_timestamp
     *
     * @param int $request_timestamp Date time in MMDDYYYYHHMMSS Format.
     *
     * @return $this
     */
    public function setRequestTimestamp($request_timestamp)
    {
        $this->container['request_timestamp'] = $request_timestamp;

        return $this;
    }

    /**
     * Gets card_reference_id
     *
     * @return string
     */
    public function getCardReferenceId()
    {
        return $this->container['card_reference_id'];
    }

    /**
     * Sets card_reference_id
     *
     * @param string $card_reference_id Card reference Id (RFID). It is generated by ECS against card number.$$M
     *
     * @return $this
     */
    public function setCardReferenceId($card_reference_id)
    {
        $this->container['card_reference_id'] = $card_reference_id;

        return $this;
    }

    /**
     * Gets payment_financial_instrument_id
     *
     * @return string
     */
    public function getPaymentFinancialInstrumentId()
    {
        return $this->container['payment_financial_instrument_id'];
    }

    /**
     * Sets payment_financial_instrument_id
     *
     * @param string $payment_financial_instrument_id Payment financial instrument Id (PFID). It is generated by partner against RFID+CardNumber.$$M
     *
     * @return $this
     */
    public function setPaymentFinancialInstrumentId($payment_financial_instrument_id)
    {
        $this->container['payment_financial_instrument_id'] = $payment_financial_instrument_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
