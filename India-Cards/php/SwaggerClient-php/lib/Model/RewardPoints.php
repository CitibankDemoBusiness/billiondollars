<?php
/**
 * RewardPoints
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RewardPoints Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RewardPoints implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RewardPoints';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reward_category_code' => 'string',
'base_point_balance' => 'float',
'earned_reward_points' => 'float',
'bonus_reward_points' => 'float',
'adjusted_reward_points' => 'float',
'redeemed_reward_points' => 'float',
'available_point_balance' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reward_category_code' => null,
'base_point_balance' => 'int64',
'earned_reward_points' => 'int64',
'bonus_reward_points' => 'int64',
'adjusted_reward_points' => 'int64',
'redeemed_reward_points' => 'int64',
'available_point_balance' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reward_category_code' => 'rewardCategoryCode',
'base_point_balance' => 'basePointBalance',
'earned_reward_points' => 'earnedRewardPoints',
'bonus_reward_points' => 'bonusRewardPoints',
'adjusted_reward_points' => 'adjustedRewardPoints',
'redeemed_reward_points' => 'redeemedRewardPoints',
'available_point_balance' => 'availablePointBalance'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reward_category_code' => 'setRewardCategoryCode',
'base_point_balance' => 'setBasePointBalance',
'earned_reward_points' => 'setEarnedRewardPoints',
'bonus_reward_points' => 'setBonusRewardPoints',
'adjusted_reward_points' => 'setAdjustedRewardPoints',
'redeemed_reward_points' => 'setRedeemedRewardPoints',
'available_point_balance' => 'setAvailablePointBalance'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reward_category_code' => 'getRewardCategoryCode',
'base_point_balance' => 'getBasePointBalance',
'earned_reward_points' => 'getEarnedRewardPoints',
'bonus_reward_points' => 'getBonusRewardPoints',
'adjusted_reward_points' => 'getAdjustedRewardPoints',
'redeemed_reward_points' => 'getRedeemedRewardPoints',
'available_point_balance' => 'getAvailablePointBalance'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reward_category_code'] = isset($data['reward_category_code']) ? $data['reward_category_code'] : null;
        $this->container['base_point_balance'] = isset($data['base_point_balance']) ? $data['base_point_balance'] : null;
        $this->container['earned_reward_points'] = isset($data['earned_reward_points']) ? $data['earned_reward_points'] : null;
        $this->container['bonus_reward_points'] = isset($data['bonus_reward_points']) ? $data['bonus_reward_points'] : null;
        $this->container['adjusted_reward_points'] = isset($data['adjusted_reward_points']) ? $data['adjusted_reward_points'] : null;
        $this->container['redeemed_reward_points'] = isset($data['redeemed_reward_points']) ? $data['redeemed_reward_points'] : null;
        $this->container['available_point_balance'] = isset($data['available_point_balance']) ? $data['available_point_balance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reward_category_code
     *
     * @return string
     */
    public function getRewardCategoryCode()
    {
        return $this->container['reward_category_code'];
    }

    /**
     * Sets reward_category_code
     *
     * @param string $reward_category_code Reward category code. This is a reference data field. Please use /v1/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setRewardCategoryCode($reward_category_code)
    {
        $this->container['reward_category_code'] = $reward_category_code;

        return $this;
    }

    /**
     * Gets base_point_balance
     *
     * @return float
     */
    public function getBasePointBalance()
    {
        return $this->container['base_point_balance'];
    }

    /**
     * Sets base_point_balance
     *
     * @param float $base_point_balance Points or Miles accumulated by the user at the start of the statement period
     *
     * @return $this
     */
    public function setBasePointBalance($base_point_balance)
    {
        $this->container['base_point_balance'] = $base_point_balance;

        return $this;
    }

    /**
     * Gets earned_reward_points
     *
     * @return float
     */
    public function getEarnedRewardPoints()
    {
        return $this->container['earned_reward_points'];
    }

    /**
     * Sets earned_reward_points
     *
     * @param float $earned_reward_points Points or Miles earned by the user for the statement period.
     *
     * @return $this
     */
    public function setEarnedRewardPoints($earned_reward_points)
    {
        $this->container['earned_reward_points'] = $earned_reward_points;

        return $this;
    }

    /**
     * Gets bonus_reward_points
     *
     * @return float
     */
    public function getBonusRewardPoints()
    {
        return $this->container['bonus_reward_points'];
    }

    /**
     * Sets bonus_reward_points
     *
     * @param float $bonus_reward_points Bonus Points or Miles  earned by a user for the statement period. Bonus programs operate under the umbrella of a specific reward program since multiple bonus programs can be defined for one reward program.
     *
     * @return $this
     */
    public function setBonusRewardPoints($bonus_reward_points)
    {
        $this->container['bonus_reward_points'] = $bonus_reward_points;

        return $this;
    }

    /**
     * Gets adjusted_reward_points
     *
     * @return float
     */
    public function getAdjustedRewardPoints()
    {
        return $this->container['adjusted_reward_points'];
    }

    /**
     * Sets adjusted_reward_points
     *
     * @param float $adjusted_reward_points Number of rewards points or miles adjusted for the user in the statement period. It will contain the value of adjusted points as a result of incorrect addition/redemption.
     *
     * @return $this
     */
    public function setAdjustedRewardPoints($adjusted_reward_points)
    {
        $this->container['adjusted_reward_points'] = $adjusted_reward_points;

        return $this;
    }

    /**
     * Gets redeemed_reward_points
     *
     * @return float
     */
    public function getRedeemedRewardPoints()
    {
        return $this->container['redeemed_reward_points'];
    }

    /**
     * Sets redeemed_reward_points
     *
     * @param float $redeemed_reward_points Bonus Points or Miles  redeemed  by a user for the statement period.
     *
     * @return $this
     */
    public function setRedeemedRewardPoints($redeemed_reward_points)
    {
        $this->container['redeemed_reward_points'] = $redeemed_reward_points;

        return $this;
    }

    /**
     * Gets available_point_balance
     *
     * @return float
     */
    public function getAvailablePointBalance()
    {
        return $this->container['available_point_balance'];
    }

    /**
     * Sets available_point_balance
     *
     * @param float $available_point_balance This field indicate the reward points or miles currently available to the user.
     *
     * @return $this
     */
    public function setAvailablePointBalance($available_point_balance)
    {
        $this->container['available_point_balance'] = $available_point_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
