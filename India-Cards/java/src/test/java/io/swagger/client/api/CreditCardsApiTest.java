/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.CardStatementSummaryRequest;
import io.swagger.client.model.CardStatementSummaryResponse;
import io.swagger.client.model.CompanionCardApplicationRequest;
import io.swagger.client.model.CompanionCardApplicationResponse;
import io.swagger.client.model.EasyPaymentPlansEligibilityInquiryResponse;
import io.swagger.client.model.EasyPaymentPlansTransactionEligibilityResponse;
import io.swagger.client.model.EppLoanBookingRequest;
import io.swagger.client.model.EppLoanBookingResponse;
import io.swagger.client.model.EppRepaymentScheuleResponse;
import io.swagger.client.model.EppRequest;
import io.swagger.client.model.EppResponse;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.SupplementaryCardListingResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CreditCardsApi
 */
@Ignore
public class CreditCardsApiTest {

    private final CreditCardsApi api = new CreditCardsApi();

    /**
     * Issuance of Companion Card
     *
     * This API is used to issue a new companion card for primary credit card.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void companionCardApplicationTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String contentType = null;
        String clientId = null;
        String cardId = null;
        CompanionCardApplicationRequest body = null;
        String clientDetails = null;
        CompanionCardApplicationResponse response = api.companionCardApplication(authorization, uuid, accept, contentType, clientId, cardId, body, clientDetails);

        // TODO: test validations
    }
    /**
     * Transaction Eligibility and Easy Payment Plans
     *
     * This API is used to check the Easy Payment Plans eligibility for a card and the available Payment Plans details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void easyPaymentPlansTransactionEligibilityTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String cardId = null;
        Double eligbleLoanAmount = null;
        String clientDetails = null;
        EasyPaymentPlansTransactionEligibilityResponse response = api.easyPaymentPlansTransactionEligibility(authorization, uuid, accept, clientId, cardId, eligbleLoanAmount, clientDetails);

        // TODO: test validations
    }
    /**
     * Book Easy Payment Plan
     *
     * This API is triggered after the EPP plan selection and completes the EPP booking. On successful booking, it returns transaction reference in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CreditCardsCardIdEasyPaymentPlansBookingsPostTest() throws ApiException {
        EppLoanBookingRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardId = null;
        String clientDetails = null;
        EppLoanBookingResponse response = api.v1CreditCardsCardIdEasyPaymentPlansBookingsPost(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * Check Easy Payment Plan Eligibility
     *
     * This API is used to validate the transaction eligibility for EPP conversion.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CreditCardsCardIdEasyPaymentPlansEligibilityGetTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String cardId = null;
        String eppLoanBookingType = null;
        String clientDetails = null;
        String nextStartIndex = null;
        EasyPaymentPlansEligibilityInquiryResponse response = api.v1CreditCardsCardIdEasyPaymentPlansEligibilityGet(authorization, uuid, accept, clientId, cardId, eppLoanBookingType, clientDetails, nextStartIndex);

        // TODO: test validations
    }
    /**
     * Easy Payment Plan Repayment Schedule
     *
     * This API allows the customer to view the payment breakdown details and the repayment schedule for the Easy Payment Plan selected.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGetTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String cardId = null;
        Double loanAmount = null;
        BigDecimal tenor = null;
        String clientDetails = null;
        String nextStartIndex = null;
        EppRepaymentScheuleResponse response = api.v1CreditCardsCardIdEasyPaymentPlansRepaymentSchedulesGet(authorization, uuid, accept, clientId, cardId, loanAmount, tenor, clientDetails, nextStartIndex);

        // TODO: test validations
    }
    /**
     * Retrieve Easy Payment Plans Options
     *
     * This API retrieves the available Easy Payment Plans to be used by the customer for the repayment of his/her loans.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CreditCardsCardIdEasyPaymentPlansSearchPostTest() throws ApiException {
        EppRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String cardId = null;
        String clientDetails = null;
        EppResponse response = api.v1CreditCardsCardIdEasyPaymentPlansSearchPost(body, authorization, uuid, accept, clientId, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * List Supplementary Cards
     *
     * This API retrieves the details of all the supplementary cards associated with the primary card id in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CreditCardsCardIdSupplementaryCardsGetTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String cardId = null;
        String clientDetails = null;
        SupplementaryCardListingResponse response = api.v1CreditCardsCardIdSupplementaryCardsGet(authorization, uuid, accept, clientId, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * Retrieve Composite Credit Cards Statement Summary
     *
     * This API is used to retrieve the statement summary for multiple credit cards in a single request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CreditCardsStatementsSummarySearchPostTest() throws ApiException {
        CardStatementSummaryRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        CardStatementSummaryResponse response = api.v1CreditCardsStatementsSummarySearchPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
}
