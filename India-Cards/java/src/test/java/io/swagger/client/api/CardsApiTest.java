/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.CardsLimitsAndEnrollmentsUpdateRequest;
import io.swagger.client.model.CvvVerificationRequest;
import io.swagger.client.model.EppLoanBookingConfirmationRequest;
import io.swagger.client.model.EppLoanBookingConfirmationResponse;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.InitiateCreditChargeCardCorporateCardsClosureRequest;
import io.swagger.client.model.InitiateCreditChargeCardCorporateCardsClosureResponse;
import io.swagger.client.model.MultiCurrencyAccountEligibilityResponse;
import io.swagger.client.model.MultiCurrencyAccountEnrollmentRequest;
import io.swagger.client.model.MultiCurrencyAccountEnrollmentResponse;
import io.swagger.client.model.MultiCurrencyAccountEnrollmentWithCurrencyRequest;
import io.swagger.client.model.MultiCurrencyAccountEnrollmentWithCurrencyResponse;
import io.swagger.client.model.NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest;
import io.swagger.client.model.OverseasTravelPlanAddRequest;
import io.swagger.client.model.OverseasTravelPlanInquiryResponse;
import io.swagger.client.model.OverseasTravelPlanUpdateRequest;
import io.swagger.client.model.PartnerCardListingResponse;
import io.swagger.client.model.ProductResponse;
import io.swagger.client.model.RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest;
import io.swagger.client.model.RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest;
import io.swagger.client.model.RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse;
import io.swagger.client.model.RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsCashLimitRequest;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsCashLimitResponse;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsDetailRequest;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsDetailResponse;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse;
import io.swagger.client.model.UpdateCreditChargeCardCorporateCardsCashLimitRequest;
import io.swagger.client.model.UpdateCreditChargeCardCorporateCardsCreditLimitRequest;
import io.swagger.client.model.UpdateCreditChargeCardCorporateCardsCreditLimitResponse;
import io.swagger.client.model.UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest;
import io.swagger.client.model.UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse;
import io.swagger.client.model.UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardsApi
 */
@Ignore
public class CardsApiTest {

    private final CardsApi api = new CardsApi();

    /**
     * Retrieve the detail of card products
     *
     * This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibankâ€™s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bNMOAPIBankingDigitalRegulatoryTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardType = null;
        String clientDetails = null;
        ProductResponse response = api.bNMOAPIBankingDigitalRegulatory(authorization, uuid, accept, clientId, contentType, cardType, clientDetails);

        // TODO: test validations
    }
    /**
     * Confirm Easy Payment Plan Booking
     *
     * This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eppLoanBookingConfirmationTest() throws ApiException {
        EppLoanBookingConfirmationRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardId = null;
        String clientDetails = null;
        EppLoanBookingConfirmationResponse response = api.eppLoanBookingConfirmation(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is used to close the corporate Credit Card or Ready credit Account.
     *
     * This API is used to close the corporate Credit Card or Ready credit Account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initiateCreditChargeCardCorporateCardsClosureTest() throws ApiException {
        InitiateCreditChargeCardCorporateCardsClosureRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String acceptLanguage = null;
        String clientDetails = null;
        InitiateCreditChargeCardCorporateCardsClosureResponse response = api.initiateCreditChargeCardCorporateCardsClosure(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     *
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void multiCurrencyAccountEnrollmentTest() throws ApiException {
        MultiCurrencyAccountEnrollmentRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardId = null;
        String clientDetails = null;
        MultiCurrencyAccountEnrollmentResponse response = api.multiCurrencyAccountEnrollment(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is to generate/enroll new FCY Accounts to Multi Currency Account
     *
     * This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void multiCurrencyAccountEnrollmentWithCurrencyTest() throws ApiException {
        MultiCurrencyAccountEnrollmentWithCurrencyRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardId = null;
        String clientDetails = null;
        MultiCurrencyAccountEnrollmentWithCurrencyResponse response = api.multiCurrencyAccountEnrollmentWithCurrency(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API will be triggered by partner(VISA) to notify the cardholder about authorisation transaction.
     *
     * This API will be triggered by partner(VISA) to notify the cardholder about authorisation transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionTest() throws ApiException {
        NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String contentType = null;
        String clientId = null;
        String clientDetails = null;
        String acceptLanguage = null;
        String xJwsSignature = null;
        api.notifyCreditChargeCardFulfillmentArrangementAuthorisedTransaction(body, authorization, uuid, accept, contentType, clientId, clientDetails, acceptLanguage, xJwsSignature);

        // TODO: test validations
    }
    /**
     * Partner Card List
     *
     * This API is used to list all the cards held by a customer with Citi partner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partnerCardListingTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String cardFunction = null;
        Boolean linkedSupplementaryCardFlag = null;
        String clientDetails = null;
        PartnerCardListingResponse response = api.partnerCardListing(authorization, uuid, accept, clientId, cardFunction, linkedSupplementaryCardFlag, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is used to Suspend and Unsuspend corporate card.
     *
     * This API is used to Suspend and Unsuspend corporate card.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedTest() throws ApiException {
        RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String acceptLanguage = null;
        String clientDetails = null;
        api.requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
     *
     * This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementTest() throws ApiException {
        RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse response = api.requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is used for EPP Refund in Open Loop
     *
     * This API is used for EPP Refund in Open Loop
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundTest() throws ApiException {
        RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        api.requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is used to retrieve the corporate card cash limit
     *
     * This API is used to retrieve the corporate card cash limit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCreditChargeCardCorporateCardsCashLimitTest() throws ApiException {
        RetrieveCreditChargeCardCorporateCardsCashLimitRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String acceptLanguage = null;
        String clientDetails = null;
        RetrieveCreditChargeCardCorporateCardsCashLimitResponse response = api.retrieveCreditChargeCardCorporateCardsCashLimit(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is used to retrieve the corporate card details
     *
     * This API is used to retrieve the corporate card details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCreditChargeCardCorporateCardsDetailTest() throws ApiException {
        RetrieveCreditChargeCardCorporateCardsDetailRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String acceptLanguage = null;
        String clientDetails = null;
        RetrieveCreditChargeCardCorporateCardsDetailResponse response = api.retrieveCreditChargeCardCorporateCardsDetail(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);

        // TODO: test validations
    }
    /**
     * This API used to retrieve the pending Authorization refund and intraday and history transactions
     *
     * This API used to retrieve the pending Authorization refund and intraday and history transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsTest() throws ApiException {
        RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String acceptLanguage = null;
        String clientDetails = null;
        RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse response = api.retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);

        // TODO: test validations
    }
    /**
     * Retrieve Credit Card Status
     *
     * This API is used to return the credit card status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCreditChargeCardFulfillmentArrangementCreditCardStatusTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String cardId = null;
        String transactionReferenceId = null;
        String clientDetails = null;
        RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse response = api.retrieveCreditChargeCardFulfillmentArrangementCreditCardStatus(authorization, uuid, accept, clientId, cardId, transactionReferenceId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     *
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String offerId = null;
        String clientDetails = null;
        String productId = null;
        BigDecimal loanAmount = null;
        RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse response = api.retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp(authorization, uuid, accept, clientId, offerId, clientDetails, productId, loanAmount);

        // TODO: test validations
    }
    /**
     * This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     *
     * This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsTest() throws ApiException {
        RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String offerId = null;
        String clientDetails = null;
        RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse response = api.retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(body, authorization, uuid, accept, clientId, contentType, offerId, clientDetails);

        // TODO: test validations
    }
    /**
     * To allow customers to view the payment breakdown details.
     *
     * This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String offerId = null;
        BigDecimal loanAmount = null;
        BigDecimal tenor = null;
        String clientDetails = null;
        String nextStartIndex = null;
        Boolean binaryDataFlag = null;
        RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse response = api.retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(authorization, uuid, accept, clientId, offerId, loanAmount, tenor, clientDetails, nextStartIndex, binaryDataFlag);

        // TODO: test validations
    }
    /**
     * This API is used to update the corporate card cash limit
     *
     * This API is used to update the corporate card cash limit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCreditChargeCardCorporateCardsCashLimitTest() throws ApiException {
        UpdateCreditChargeCardCorporateCardsCashLimitRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String acceptLanguage = null;
        String clientDetails = null;
        api.updateCreditChargeCardCorporateCardsCashLimit(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is used to update the corportate card credit limit
     *
     * This API is used to update the corportate card credit limit
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCreditChargeCardCorporateCardsCreditLimitTest() throws ApiException {
        UpdateCreditChargeCardCorporateCardsCreditLimitRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String acceptLanguage = null;
        String clientDetails = null;
        UpdateCreditChargeCardCorporateCardsCreditLimitResponse response = api.updateCreditChargeCardCorporateCardsCreditLimit(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is to report lost or stolen card and to apply for Replacement
     *
     * This API is to report lost or stolen card and to apply for Replacement
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenTest() throws ApiException {
        UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse response = api.updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * This API will help corporate user to update purchases for specific merchants coming in the API request
     *
     * This API will help corporate user to update purchases for specific merchants coming in the API request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlTest() throws ApiException {
        UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        api.updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * Enroll for Transaction Limit Setup
     *
     * This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsCardIdLimitsAndEnrollmentsPutTest() throws ApiException {
        CardsLimitsAndEnrollmentsUpdateRequest body = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String authorization = null;
        String cardId = null;
        String clientDetails = null;
        api.v1CardsCardIdLimitsAndEnrollmentsPut(body, uuid, accept, clientId, contentType, authorization, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     *
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsCardIdMultiCurrencyAccountsDeleteTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String cardId = null;
        String clientDetails = null;
        api.v1CardsCardIdMultiCurrencyAccountsDelete(authorization, uuid, accept, clientId, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is to generate/enroll new FCY Accounts to Multi Currency Account
     *
     * This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostTest() throws ApiException {
        MultiCurrencyAccountEnrollmentWithCurrencyRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardId = null;
        String clientDetails = null;
        MultiCurrencyAccountEnrollmentWithCurrencyResponse response = api.v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     *
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsCardIdMultiCurrencyAccountsEnrollmentsPostTest() throws ApiException {
        MultiCurrencyAccountEnrollmentRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardId = null;
        String clientDetails = null;
        MultiCurrencyAccountEnrollmentResponse response = api.v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API enables customer to delete an existing travel plan 
     *
     * This API enables customer to delete an existing travel plan 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsCardIdOverseasTravelPlansDeleteTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardId = null;
        String clientDetails = null;
        api.v1CardsCardIdOverseasTravelPlansDelete(authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API enables customer to add a new travel plan
     *
     * This API enables customer to add a new travel plan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsCardIdOverseasTravelPlansPostTest() throws ApiException {
        OverseasTravelPlanAddRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardId = null;
        String clientDetails = null;
        api.v1CardsCardIdOverseasTravelPlansPost(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API enables customer to update an existing travel plan
     *
     * This API enables customer to update an existing travel plan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsCardIdOverseasTravelPlansPutTest() throws ApiException {
        OverseasTravelPlanUpdateRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String cardId = null;
        String clientDetails = null;
        api.v1CardsCardIdOverseasTravelPlansPut(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * Verify CVV for Debit or Credit Card
     *
     * This API is used to verify the CVV of a debit or a credit card.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsCvvVerificationPostTest() throws ApiException {
        CvvVerificationRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        api.v1CardsCvvVerificationPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
     *
     * To get the needed account and currency details for Multi Currency Account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsMultiCurrencyAccountsEnrollmentEligibilityGetTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String clientDetails = null;
        MultiCurrencyAccountEligibilityResponse response = api.v1CardsMultiCurrencyAccountsEnrollmentEligibilityGet(authorization, uuid, accept, clientId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API enables customer to inquire current travel plan
     *
     * This API enables customer to inquire current travel plan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsOverseasTravelPlansGetTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String clientDetails = null;
        String cardId = null;
        OverseasTravelPlanInquiryResponse response = api.v1CardsOverseasTravelPlansGet(authorization, uuid, accept, clientId, clientDetails, cardId);

        // TODO: test validations
    }
    /**
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     *
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2CardsCardIdMultiCurrencyAccountsDeleteTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String cardId = null;
        String clientDetails = null;
        api.v2CardsCardIdMultiCurrencyAccountsDelete(authorization, uuid, accept, clientId, cardId, clientDetails);

        // TODO: test validations
    }
    /**
     * This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
     *
     * To get the needed account and currency details for Multi Currency Account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v2CardsMultiCurrencyAccountsEnrollmentEligibilityGetTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String clientDetails = null;
        MultiCurrencyAccountEligibilityResponse response = api.v2CardsMultiCurrencyAccountsEnrollmentEligibilityGet(authorization, uuid, accept, clientId, clientDetails);

        // TODO: test validations
    }
}
