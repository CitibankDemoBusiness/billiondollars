/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CardOverseasUsageConfirmationRequest;
import io.swagger.client.model.CardUsageConfirmationRequest;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.ResetAtmPinConfirmationRequest;
import io.swagger.client.model.ResetAtmPinConfirmationResponse;
import io.swagger.client.model.ResetAtmPinRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardServicingApi
 */
@Ignore
public class CardServicingApiTest {

    private final CardServicingApi api = new CardServicingApi();

    /**
     * Confirm Card Activation Deactivation
     *
     * This API is triggered after initiating the Card activation/de-activation request  and completes card activation/de-activation post successful multifactor authentication.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsActivationsConfirmationPostTest() throws ApiException {
        CardUsageConfirmationRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        api.v1CardsActivationsConfirmationPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * Confirm ATM Pin Request
     *
     * This API is triggered after the reset ATM Pin request and completes ATM Pin reset post successful multifactor authentication.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsAtmPinResetConfirmationPostTest() throws ApiException {
        ResetAtmPinConfirmationRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        ResetAtmPinConfirmationResponse response = api.v1CardsAtmPinResetConfirmationPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * Reset ATM Pin
     *
     * This API is used to reset the ATM Pin of the cards.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsAtmPinResetPutTest() throws ApiException {
        ResetAtmPinRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        api.v1CardsAtmPinResetPut(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * Confirm Card Overseas Activation Deactivation
     *
     * This API is triggered after initiating the Card Overseas usage activation/deactivation request and completes the overseas usage activation/deactivation post successful multifactor authentication
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CardsOverseasUsageConfirmationPostTest() throws ApiException {
        CardOverseasUsageConfirmationRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        api.v1CardsOverseasUsageConfirmationPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
}
