/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Address;
import io.swagger.client.model.ConsentDetails;
import io.swagger.client.model.Demographics;
import io.swagger.client.model.EmploymentDetails;
import io.swagger.client.model.IdentificationDocumentDetails;
import io.swagger.client.model.Name;
import io.swagger.client.model.PartnerCustomerDetails;
import io.swagger.client.model.Phone;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Applicant
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class Applicant {
  @SerializedName("address")
  private List<Address> address = new ArrayList<Address>();

  @SerializedName("partnerCustomerDetails")
  private PartnerCustomerDetails partnerCustomerDetails = null;

  @SerializedName("motherMaidenName")
  private String motherMaidenName = null;

  @SerializedName("identificationDocumentDetails")
  private List<IdentificationDocumentDetails> identificationDocumentDetails = null;

  @SerializedName("phone")
  private List<Phone> phone = new ArrayList<Phone>();

  @SerializedName("employmentDetails")
  private EmploymentDetails employmentDetails = null;

  @SerializedName("name")
  private Name name = null;

  @SerializedName("consentDetails")
  private List<ConsentDetails> consentDetails = new ArrayList<ConsentDetails>();

  @SerializedName("rewardRedemptionAllowedFlag")
  private Boolean rewardRedemptionAllowedFlag = null;

  @SerializedName("demographics")
  private Demographics demographics = null;

  public Applicant address(List<Address> address) {
    this.address = address;
    return this;
  }

  public Applicant addAddressItem(Address addressItem) {
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(required = true, description = "")
  public List<Address> getAddress() {
    return address;
  }

  public void setAddress(List<Address> address) {
    this.address = address;
  }

  public Applicant partnerCustomerDetails(PartnerCustomerDetails partnerCustomerDetails) {
    this.partnerCustomerDetails = partnerCustomerDetails;
    return this;
  }

   /**
   * Get partnerCustomerDetails
   * @return partnerCustomerDetails
  **/
  @Schema(description = "")
  public PartnerCustomerDetails getPartnerCustomerDetails() {
    return partnerCustomerDetails;
  }

  public void setPartnerCustomerDetails(PartnerCustomerDetails partnerCustomerDetails) {
    this.partnerCustomerDetails = partnerCustomerDetails;
  }

  public Applicant motherMaidenName(String motherMaidenName) {
    this.motherMaidenName = motherMaidenName;
    return this;
  }

   /**
   * Mother&#x27;s maiden name
   * @return motherMaidenName
  **/
  @Schema(example = "Monica", required = true, description = "Mother's maiden name")
  public String getMotherMaidenName() {
    return motherMaidenName;
  }

  public void setMotherMaidenName(String motherMaidenName) {
    this.motherMaidenName = motherMaidenName;
  }

  public Applicant identificationDocumentDetails(List<IdentificationDocumentDetails> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
    return this;
  }

  public Applicant addIdentificationDocumentDetailsItem(IdentificationDocumentDetails identificationDocumentDetailsItem) {
    if (this.identificationDocumentDetails == null) {
      this.identificationDocumentDetails = new ArrayList<IdentificationDocumentDetails>();
    }
    this.identificationDocumentDetails.add(identificationDocumentDetailsItem);
    return this;
  }

   /**
   * Get identificationDocumentDetails
   * @return identificationDocumentDetails
  **/
  @Schema(description = "")
  public List<IdentificationDocumentDetails> getIdentificationDocumentDetails() {
    return identificationDocumentDetails;
  }

  public void setIdentificationDocumentDetails(List<IdentificationDocumentDetails> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
  }

  public Applicant phone(List<Phone> phone) {
    this.phone = phone;
    return this;
  }

  public Applicant addPhoneItem(Phone phoneItem) {
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @Schema(required = true, description = "")
  public List<Phone> getPhone() {
    return phone;
  }

  public void setPhone(List<Phone> phone) {
    this.phone = phone;
  }

  public Applicant employmentDetails(EmploymentDetails employmentDetails) {
    this.employmentDetails = employmentDetails;
    return this;
  }

   /**
   * Get employmentDetails
   * @return employmentDetails
  **/
  @Schema(required = true, description = "")
  public EmploymentDetails getEmploymentDetails() {
    return employmentDetails;
  }

  public void setEmploymentDetails(EmploymentDetails employmentDetails) {
    this.employmentDetails = employmentDetails;
  }

  public Applicant name(Name name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public Name getName() {
    return name;
  }

  public void setName(Name name) {
    this.name = name;
  }

  public Applicant consentDetails(List<ConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
    return this;
  }

  public Applicant addConsentDetailsItem(ConsentDetails consentDetailsItem) {
    this.consentDetails.add(consentDetailsItem);
    return this;
  }

   /**
   * Get consentDetails
   * @return consentDetails
  **/
  @Schema(required = true, description = "")
  public List<ConsentDetails> getConsentDetails() {
    return consentDetails;
  }

  public void setConsentDetails(List<ConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
  }

  public Applicant rewardRedemptionAllowedFlag(Boolean rewardRedemptionAllowedFlag) {
    this.rewardRedemptionAllowedFlag = rewardRedemptionAllowedFlag;
    return this;
  }

   /**
   * Flag to indicated whether reward redemption allowed for supplementary. Valid values: true and false
   * @return rewardRedemptionAllowedFlag
  **/
  @Schema(example = "false", description = "Flag to indicated whether reward redemption allowed for supplementary. Valid values: true and false")
  public Boolean isRewardRedemptionAllowedFlag() {
    return rewardRedemptionAllowedFlag;
  }

  public void setRewardRedemptionAllowedFlag(Boolean rewardRedemptionAllowedFlag) {
    this.rewardRedemptionAllowedFlag = rewardRedemptionAllowedFlag;
  }

  public Applicant demographics(Demographics demographics) {
    this.demographics = demographics;
    return this;
  }

   /**
   * Get demographics
   * @return demographics
  **/
  @Schema(description = "")
  public Demographics getDemographics() {
    return demographics;
  }

  public void setDemographics(Demographics demographics) {
    this.demographics = demographics;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Applicant applicant = (Applicant) o;
    return Objects.equals(this.address, applicant.address) &&
        Objects.equals(this.partnerCustomerDetails, applicant.partnerCustomerDetails) &&
        Objects.equals(this.motherMaidenName, applicant.motherMaidenName) &&
        Objects.equals(this.identificationDocumentDetails, applicant.identificationDocumentDetails) &&
        Objects.equals(this.phone, applicant.phone) &&
        Objects.equals(this.employmentDetails, applicant.employmentDetails) &&
        Objects.equals(this.name, applicant.name) &&
        Objects.equals(this.consentDetails, applicant.consentDetails) &&
        Objects.equals(this.rewardRedemptionAllowedFlag, applicant.rewardRedemptionAllowedFlag) &&
        Objects.equals(this.demographics, applicant.demographics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, partnerCustomerDetails, motherMaidenName, identificationDocumentDetails, phone, employmentDetails, name, consentDetails, rewardRedemptionAllowedFlag, demographics);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Applicant {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    partnerCustomerDetails: ").append(toIndentedString(partnerCustomerDetails)).append("\n");
    sb.append("    motherMaidenName: ").append(toIndentedString(motherMaidenName)).append("\n");
    sb.append("    identificationDocumentDetails: ").append(toIndentedString(identificationDocumentDetails)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    employmentDetails: ").append(toIndentedString(employmentDetails)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    consentDetails: ").append(toIndentedString(consentDetails)).append("\n");
    sb.append("    rewardRedemptionAllowedFlag: ").append(toIndentedString(rewardRedemptionAllowedFlag)).append("\n");
    sb.append("    demographics: ").append(toIndentedString(demographics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
