/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CardFunctionsAllowed;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
/**
 * CardDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class CardDetails {
  @SerializedName("cardId")
  private String cardId = null;

  @SerializedName("displayCardNumber")
  private String displayCardNumber = null;

  @SerializedName("localCardActivationIndicator")
  private String localCardActivationIndicator = null;

  @SerializedName("overseasCardActivationIndicator")
  private String overseasCardActivationIndicator = null;

  @SerializedName("perpetualActivationFlag")
  private Boolean perpetualActivationFlag = null;

  @SerializedName("overseasCardActivationStartDate")
  private LocalDate overseasCardActivationStartDate = null;

  @SerializedName("overseasCardActivationEndDate")
  private LocalDate overseasCardActivationEndDate = null;

  @SerializedName("currentCreditLimitAmount")
  private Double currentCreditLimitAmount = null;

  @SerializedName("maximumPermanentCreditLimitAmount")
  private Double maximumPermanentCreditLimitAmount = null;

  @SerializedName("maximumTemporaryCreditLimitAmount")
  private Double maximumTemporaryCreditLimitAmount = null;

  @SerializedName("subCardType")
  private String subCardType = null;

  @SerializedName("cardHolderType")
  private String cardHolderType = null;

  @SerializedName("cardIssueReason")
  private String cardIssueReason = null;

  @SerializedName("cardFunctionsAllowed")
  private List<CardFunctionsAllowed> cardFunctionsAllowed = null;

  public CardDetails cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

   /**
   * The card id  in encrypted format
   * @return cardId
  **/
  @Schema(example = "3255613852316f2b4d4d796c344e38756339654972776f663745446e6d4c32486f455a4165374a476858343d", required = true, description = "The card id  in encrypted format")
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }

  public CardDetails displayCardNumber(String displayCardNumber) {
    this.displayCardNumber = displayCardNumber;
    return this;
  }

   /**
   * A masked card number that can be displayed to the customer.
   * @return displayCardNumber
  **/
  @Schema(example = "XXXXXXXXXXXX4521", description = "A masked card number that can be displayed to the customer.")
  public String getDisplayCardNumber() {
    return displayCardNumber;
  }

  public void setDisplayCardNumber(String displayCardNumber) {
    this.displayCardNumber = displayCardNumber;
  }

  public CardDetails localCardActivationIndicator(String localCardActivationIndicator) {
    this.localCardActivationIndicator = localCardActivationIndicator;
    return this;
  }

   /**
   * The card activation indicator for local usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{localCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return localCardActivationIndicator
  **/
  @Schema(example = "ACTIVE", required = true, description = "The card activation indicator for local usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{localCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getLocalCardActivationIndicator() {
    return localCardActivationIndicator;
  }

  public void setLocalCardActivationIndicator(String localCardActivationIndicator) {
    this.localCardActivationIndicator = localCardActivationIndicator;
  }

  public CardDetails overseasCardActivationIndicator(String overseasCardActivationIndicator) {
    this.overseasCardActivationIndicator = overseasCardActivationIndicator;
    return this;
  }

   /**
   * The card activation indicator for overseas usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{overseasCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return overseasCardActivationIndicator
  **/
  @Schema(example = "ACTIVE", description = "The card activation indicator for overseas usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{overseasCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getOverseasCardActivationIndicator() {
    return overseasCardActivationIndicator;
  }

  public void setOverseasCardActivationIndicator(String overseasCardActivationIndicator) {
    this.overseasCardActivationIndicator = overseasCardActivationIndicator;
  }

  public CardDetails perpetualActivationFlag(Boolean perpetualActivationFlag) {
    this.perpetualActivationFlag = perpetualActivationFlag;
    return this;
  }

   /**
   * Flag to specify whether the card is activated perpetually, till card expiration
   * @return perpetualActivationFlag
  **/
  @Schema(example = "true", description = "Flag to specify whether the card is activated perpetually, till card expiration")
  public Boolean isPerpetualActivationFlag() {
    return perpetualActivationFlag;
  }

  public void setPerpetualActivationFlag(Boolean perpetualActivationFlag) {
    this.perpetualActivationFlag = perpetualActivationFlag;
  }

  public CardDetails overseasCardActivationStartDate(LocalDate overseasCardActivationStartDate) {
    this.overseasCardActivationStartDate = overseasCardActivationStartDate;
    return this;
  }

   /**
   * Card activation start date in ISO 8601 date format YYYY-MM-DD for overseas usage.
   * @return overseasCardActivationStartDate
  **/
  @Schema(example = "Tue Nov 01 00:00:00 UTC 2016", description = "Card activation start date in ISO 8601 date format YYYY-MM-DD for overseas usage.")
  public LocalDate getOverseasCardActivationStartDate() {
    return overseasCardActivationStartDate;
  }

  public void setOverseasCardActivationStartDate(LocalDate overseasCardActivationStartDate) {
    this.overseasCardActivationStartDate = overseasCardActivationStartDate;
  }

  public CardDetails overseasCardActivationEndDate(LocalDate overseasCardActivationEndDate) {
    this.overseasCardActivationEndDate = overseasCardActivationEndDate;
    return this;
  }

   /**
   * Card activation end date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, value is card expiry date
   * @return overseasCardActivationEndDate
  **/
  @Schema(example = "Mon Dec 05 00:00:00 UTC 2016", description = "Card activation end date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, value is card expiry date")
  public LocalDate getOverseasCardActivationEndDate() {
    return overseasCardActivationEndDate;
  }

  public void setOverseasCardActivationEndDate(LocalDate overseasCardActivationEndDate) {
    this.overseasCardActivationEndDate = overseasCardActivationEndDate;
  }

  public CardDetails currentCreditLimitAmount(Double currentCreditLimitAmount) {
    this.currentCreditLimitAmount = currentCreditLimitAmount;
    return this;
  }

   /**
   * Current credit limit amount on the credit card
   * @return currentCreditLimitAmount
  **/
  @Schema(example = "3500.25", required = true, description = "Current credit limit amount on the credit card")
  public Double getCurrentCreditLimitAmount() {
    return currentCreditLimitAmount;
  }

  public void setCurrentCreditLimitAmount(Double currentCreditLimitAmount) {
    this.currentCreditLimitAmount = currentCreditLimitAmount;
  }

  public CardDetails maximumPermanentCreditLimitAmount(Double maximumPermanentCreditLimitAmount) {
    this.maximumPermanentCreditLimitAmount = maximumPermanentCreditLimitAmount;
    return this;
  }

   /**
   * Maximum permanent credit limit amount allowed on the credit card
   * @return maximumPermanentCreditLimitAmount
  **/
  @Schema(example = "5000.25", description = "Maximum permanent credit limit amount allowed on the credit card")
  public Double getMaximumPermanentCreditLimitAmount() {
    return maximumPermanentCreditLimitAmount;
  }

  public void setMaximumPermanentCreditLimitAmount(Double maximumPermanentCreditLimitAmount) {
    this.maximumPermanentCreditLimitAmount = maximumPermanentCreditLimitAmount;
  }

  public CardDetails maximumTemporaryCreditLimitAmount(Double maximumTemporaryCreditLimitAmount) {
    this.maximumTemporaryCreditLimitAmount = maximumTemporaryCreditLimitAmount;
    return this;
  }

   /**
   * Maximum temporary credit limit amount allowed on the credit card
   * @return maximumTemporaryCreditLimitAmount
  **/
  @Schema(example = "5000.25", description = "Maximum temporary credit limit amount allowed on the credit card")
  public Double getMaximumTemporaryCreditLimitAmount() {
    return maximumTemporaryCreditLimitAmount;
  }

  public void setMaximumTemporaryCreditLimitAmount(Double maximumTemporaryCreditLimitAmount) {
    this.maximumTemporaryCreditLimitAmount = maximumTemporaryCreditLimitAmount;
  }

  public CardDetails subCardType(String subCardType) {
    this.subCardType = subCardType;
    return this;
  }

   /**
   * Type of the card. Debit or Credit.This is a reference data field. Please use /v1/apac/utilities/referenceData/{subCardType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return subCardType
  **/
  @Schema(example = "DEBIT", required = true, description = "Type of the card. Debit or Credit.This is a reference data field. Please use /v1/apac/utilities/referenceData/{subCardType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getSubCardType() {
    return subCardType;
  }

  public void setSubCardType(String subCardType) {
    this.subCardType = subCardType;
  }

  public CardDetails cardHolderType(String cardHolderType) {
    this.cardHolderType = cardHolderType;
    return this;
  }

   /**
   * Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description.
   * @return cardHolderType
  **/
  @Schema(example = "PRIMARY", description = "Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description.")
  public String getCardHolderType() {
    return cardHolderType;
  }

  public void setCardHolderType(String cardHolderType) {
    this.cardHolderType = cardHolderType;
  }

  public CardDetails cardIssueReason(String cardIssueReason) {
    this.cardIssueReason = cardIssueReason;
    return this;
  }

   /**
   * Specifies the reason for the card issuance. Applicable only for recently issued cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardIssueReason} resource to get valid value of this field with description.
   * @return cardIssueReason
  **/
  @Schema(example = "NEWLY_ONBOARDED_CARD", description = "Specifies the reason for the card issuance. Applicable only for recently issued cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardIssueReason} resource to get valid value of this field with description.")
  public String getCardIssueReason() {
    return cardIssueReason;
  }

  public void setCardIssueReason(String cardIssueReason) {
    this.cardIssueReason = cardIssueReason;
  }

  public CardDetails cardFunctionsAllowed(List<CardFunctionsAllowed> cardFunctionsAllowed) {
    this.cardFunctionsAllowed = cardFunctionsAllowed;
    return this;
  }

  public CardDetails addCardFunctionsAllowedItem(CardFunctionsAllowed cardFunctionsAllowedItem) {
    if (this.cardFunctionsAllowed == null) {
      this.cardFunctionsAllowed = new ArrayList<CardFunctionsAllowed>();
    }
    this.cardFunctionsAllowed.add(cardFunctionsAllowedItem);
    return this;
  }

   /**
   * Get cardFunctionsAllowed
   * @return cardFunctionsAllowed
  **/
  @Schema(description = "")
  public List<CardFunctionsAllowed> getCardFunctionsAllowed() {
    return cardFunctionsAllowed;
  }

  public void setCardFunctionsAllowed(List<CardFunctionsAllowed> cardFunctionsAllowed) {
    this.cardFunctionsAllowed = cardFunctionsAllowed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardDetails cardDetails = (CardDetails) o;
    return Objects.equals(this.cardId, cardDetails.cardId) &&
        Objects.equals(this.displayCardNumber, cardDetails.displayCardNumber) &&
        Objects.equals(this.localCardActivationIndicator, cardDetails.localCardActivationIndicator) &&
        Objects.equals(this.overseasCardActivationIndicator, cardDetails.overseasCardActivationIndicator) &&
        Objects.equals(this.perpetualActivationFlag, cardDetails.perpetualActivationFlag) &&
        Objects.equals(this.overseasCardActivationStartDate, cardDetails.overseasCardActivationStartDate) &&
        Objects.equals(this.overseasCardActivationEndDate, cardDetails.overseasCardActivationEndDate) &&
        Objects.equals(this.currentCreditLimitAmount, cardDetails.currentCreditLimitAmount) &&
        Objects.equals(this.maximumPermanentCreditLimitAmount, cardDetails.maximumPermanentCreditLimitAmount) &&
        Objects.equals(this.maximumTemporaryCreditLimitAmount, cardDetails.maximumTemporaryCreditLimitAmount) &&
        Objects.equals(this.subCardType, cardDetails.subCardType) &&
        Objects.equals(this.cardHolderType, cardDetails.cardHolderType) &&
        Objects.equals(this.cardIssueReason, cardDetails.cardIssueReason) &&
        Objects.equals(this.cardFunctionsAllowed, cardDetails.cardFunctionsAllowed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardId, displayCardNumber, localCardActivationIndicator, overseasCardActivationIndicator, perpetualActivationFlag, overseasCardActivationStartDate, overseasCardActivationEndDate, currentCreditLimitAmount, maximumPermanentCreditLimitAmount, maximumTemporaryCreditLimitAmount, subCardType, cardHolderType, cardIssueReason, cardFunctionsAllowed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardDetails {\n");
    
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    displayCardNumber: ").append(toIndentedString(displayCardNumber)).append("\n");
    sb.append("    localCardActivationIndicator: ").append(toIndentedString(localCardActivationIndicator)).append("\n");
    sb.append("    overseasCardActivationIndicator: ").append(toIndentedString(overseasCardActivationIndicator)).append("\n");
    sb.append("    perpetualActivationFlag: ").append(toIndentedString(perpetualActivationFlag)).append("\n");
    sb.append("    overseasCardActivationStartDate: ").append(toIndentedString(overseasCardActivationStartDate)).append("\n");
    sb.append("    overseasCardActivationEndDate: ").append(toIndentedString(overseasCardActivationEndDate)).append("\n");
    sb.append("    currentCreditLimitAmount: ").append(toIndentedString(currentCreditLimitAmount)).append("\n");
    sb.append("    maximumPermanentCreditLimitAmount: ").append(toIndentedString(maximumPermanentCreditLimitAmount)).append("\n");
    sb.append("    maximumTemporaryCreditLimitAmount: ").append(toIndentedString(maximumTemporaryCreditLimitAmount)).append("\n");
    sb.append("    subCardType: ").append(toIndentedString(subCardType)).append("\n");
    sb.append("    cardHolderType: ").append(toIndentedString(cardHolderType)).append("\n");
    sb.append("    cardIssueReason: ").append(toIndentedString(cardIssueReason)).append("\n");
    sb.append("    cardFunctionsAllowed: ").append(toIndentedString(cardFunctionsAllowed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
