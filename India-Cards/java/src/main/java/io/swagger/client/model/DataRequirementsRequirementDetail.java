/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DataRequirementsApplicant;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DataRequirementsRequirementDetail
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class DataRequirementsRequirementDetail {
  /**
   * Nationality of the applicant
   */
  @JsonAdapter(NationalityEnum.Adapter.class)
  public enum NationalityEnum {
    MALAYSIAN("malaysian"),
    NON_MALAYSIAN("non_malaysian"),
    ANY("any");

    private String value;

    NationalityEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NationalityEnum fromValue(String text) {
      for (NationalityEnum b : NationalityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NationalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NationalityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NationalityEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NationalityEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("nationality")
  private NationalityEnum nationality = null;

  @SerializedName("nationality_remark")
  private String nationalityRemark = null;

  /**
   * Resident status of the applicant
   */
  @JsonAdapter(ResidencyEnum.Adapter.class)
  public enum ResidencyEnum {
    RESIDENT("resident"),
    NON_RESIDENT("non_resident"),
    ANY("any");

    private String value;

    ResidencyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResidencyEnum fromValue(String text) {
      for (ResidencyEnum b : ResidencyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResidencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResidencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResidencyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ResidencyEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("residency")
  private ResidencyEnum residency = null;

  @SerializedName("account_holder_flag")
  private Boolean accountHolderFlag = null;

  @SerializedName("applicant")
  private List<DataRequirementsApplicant> applicant = null;

  public DataRequirementsRequirementDetail nationality(NationalityEnum nationality) {
    this.nationality = nationality;
    return this;
  }

   /**
   * Nationality of the applicant
   * @return nationality
  **/
  @Schema(required = true, description = "Nationality of the applicant")
  public NationalityEnum getNationality() {
    return nationality;
  }

  public void setNationality(NationalityEnum nationality) {
    this.nationality = nationality;
  }

  public DataRequirementsRequirementDetail nationalityRemark(String nationalityRemark) {
    this.nationalityRemark = nationalityRemark;
    return this;
  }

   /**
   * Remark on nationality
   * @return nationalityRemark
  **/
  @Schema(description = "Remark on nationality")
  public String getNationalityRemark() {
    return nationalityRemark;
  }

  public void setNationalityRemark(String nationalityRemark) {
    this.nationalityRemark = nationalityRemark;
  }

  public DataRequirementsRequirementDetail residency(ResidencyEnum residency) {
    this.residency = residency;
    return this;
  }

   /**
   * Resident status of the applicant
   * @return residency
  **/
  @Schema(required = true, description = "Resident status of the applicant")
  public ResidencyEnum getResidency() {
    return residency;
  }

  public void setResidency(ResidencyEnum residency) {
    this.residency = residency;
  }

  public DataRequirementsRequirementDetail accountHolderFlag(Boolean accountHolderFlag) {
    this.accountHolderFlag = accountHolderFlag;
    return this;
  }

   /**
   * Requirement to have account with the bank
   * @return accountHolderFlag
  **/
  @Schema(example = "true", description = "Requirement to have account with the bank")
  public Boolean isAccountHolderFlag() {
    return accountHolderFlag;
  }

  public void setAccountHolderFlag(Boolean accountHolderFlag) {
    this.accountHolderFlag = accountHolderFlag;
  }

  public DataRequirementsRequirementDetail applicant(List<DataRequirementsApplicant> applicant) {
    this.applicant = applicant;
    return this;
  }

  public DataRequirementsRequirementDetail addApplicantItem(DataRequirementsApplicant applicantItem) {
    if (this.applicant == null) {
      this.applicant = new ArrayList<DataRequirementsApplicant>();
    }
    this.applicant.add(applicantItem);
    return this;
  }

   /**
   * Get applicant
   * @return applicant
  **/
  @Schema(description = "")
  public List<DataRequirementsApplicant> getApplicant() {
    return applicant;
  }

  public void setApplicant(List<DataRequirementsApplicant> applicant) {
    this.applicant = applicant;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataRequirementsRequirementDetail dataRequirementsRequirementDetail = (DataRequirementsRequirementDetail) o;
    return Objects.equals(this.nationality, dataRequirementsRequirementDetail.nationality) &&
        Objects.equals(this.nationalityRemark, dataRequirementsRequirementDetail.nationalityRemark) &&
        Objects.equals(this.residency, dataRequirementsRequirementDetail.residency) &&
        Objects.equals(this.accountHolderFlag, dataRequirementsRequirementDetail.accountHolderFlag) &&
        Objects.equals(this.applicant, dataRequirementsRequirementDetail.applicant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nationality, nationalityRemark, residency, accountHolderFlag, applicant);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataRequirementsRequirementDetail {\n");
    
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    nationalityRemark: ").append(toIndentedString(nationalityRemark)).append("\n");
    sb.append("    residency: ").append(toIndentedString(residency)).append("\n");
    sb.append("    accountHolderFlag: ").append(toIndentedString(accountHolderFlag)).append("\n");
    sb.append("    applicant: ").append(toIndentedString(applicant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
