/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CardListingResponse;
import io.swagger.client.model.CardUsageRequest;
import io.swagger.client.model.CreditLimitIncreaseRequest;
import io.swagger.client.model.CreditLimitIncreaseResponse;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.OverseasCardUsageRequest;
import io.swagger.client.model.ReportLostStolenCardRequest;
import io.swagger.client.model.ReportLostStolenCardResponse;
import io.swagger.client.model.SupplementaryCardRequest;
import io.swagger.client.model.SupplementaryCardResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v1CardsCardIdActivationsCardActivationCodePut
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Card Id in encrypted format (required)
     * @param cardActivationCode Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdActivationsCardActivationCodePutCall(String uuid, String clientId, String authorization, String cardId, String cardActivationCode, CardUsageRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/activations/{cardActivationCode}"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()))
            .replaceAll("\\{" + "cardActivationCode" + "\\}", apiClient.escapeString(cardActivationCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdActivationsCardActivationCodePutValidateBeforeCall(String uuid, String clientId, String authorization, String cardId, String cardActivationCode, CardUsageRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdActivationsCardActivationCodePut(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdActivationsCardActivationCodePut(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdActivationsCardActivationCodePut(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdActivationsCardActivationCodePut(Async)");
        }
        // verify the required parameter 'cardActivationCode' is set
        if (cardActivationCode == null) {
            throw new ApiException("Missing the required parameter 'cardActivationCode' when calling v1CardsCardIdActivationsCardActivationCodePut(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdActivationsCardActivationCodePutCall(uuid, clientId, authorization, cardId, cardActivationCode, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update local usage activation
     * This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Card Id in encrypted format (required)
     * @param cardActivationCode Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values. (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1CardsCardIdActivationsCardActivationCodePut(String uuid, String clientId, String authorization, String cardId, String cardActivationCode, CardUsageRequest body) throws ApiException {
        v1CardsCardIdActivationsCardActivationCodePutWithHttpInfo(uuid, clientId, authorization, cardId, cardActivationCode, body);
    }

    /**
     * Update local usage activation
     * This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Card Id in encrypted format (required)
     * @param cardActivationCode Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1CardsCardIdActivationsCardActivationCodePutWithHttpInfo(String uuid, String clientId, String authorization, String cardId, String cardActivationCode, CardUsageRequest body) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdActivationsCardActivationCodePutValidateBeforeCall(uuid, clientId, authorization, cardId, cardActivationCode, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update local usage activation (asynchronously)
     * This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Card Id in encrypted format (required)
     * @param cardActivationCode Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdActivationsCardActivationCodePutAsync(String uuid, String clientId, String authorization, String cardId, String cardActivationCode, CardUsageRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdActivationsCardActivationCodePutValidateBeforeCall(uuid, clientId, authorization, cardId, cardActivationCode, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1CardsCardIdLostStolenPut
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Unique Id of the card in encrypted format (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdLostStolenPutCall(ReportLostStolenCardRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/lostStolen"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdLostStolenPutValidateBeforeCall(ReportLostStolenCardRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CardsCardIdLostStolenPut(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdLostStolenPut(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCardIdLostStolenPut(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdLostStolenPut(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CardsCardIdLostStolenPut(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdLostStolenPut(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdLostStolenPut(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdLostStolenPutCall(body, uuid, accept, clientId, contentType, authorization, cardId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Report card as lost or stolen
     * This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Unique Id of the card in encrypted format (required)
     * @return ReportLostStolenCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportLostStolenCardResponse v1CardsCardIdLostStolenPut(ReportLostStolenCardRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId) throws ApiException {
        ApiResponse<ReportLostStolenCardResponse> resp = v1CardsCardIdLostStolenPutWithHttpInfo(body, uuid, accept, clientId, contentType, authorization, cardId);
        return resp.getData();
    }

    /**
     * Report card as lost or stolen
     * This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Unique Id of the card in encrypted format (required)
     * @return ApiResponse&lt;ReportLostStolenCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportLostStolenCardResponse> v1CardsCardIdLostStolenPutWithHttpInfo(ReportLostStolenCardRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdLostStolenPutValidateBeforeCall(body, uuid, accept, clientId, contentType, authorization, cardId, null, null);
        Type localVarReturnType = new TypeToken<ReportLostStolenCardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Report card as lost or stolen (asynchronously)
     * This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Unique Id of the card in encrypted format (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdLostStolenPutAsync(ReportLostStolenCardRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, final ApiCallback<ReportLostStolenCardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdLostStolenPutValidateBeforeCall(body, uuid, accept, clientId, contentType, authorization, cardId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportLostStolenCardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CardsCardIdOverseasUsagePut
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Unique Id of the card for activation or de-activation. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdOverseasUsagePutCall(OverseasCardUsageRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/overseasUsage"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdOverseasUsagePutValidateBeforeCall(OverseasCardUsageRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CardsCardIdOverseasUsagePut(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdOverseasUsagePut(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCardIdOverseasUsagePut(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdOverseasUsagePut(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CardsCardIdOverseasUsagePut(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdOverseasUsagePut(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdOverseasUsagePut(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdOverseasUsagePutCall(body, uuid, accept, clientId, contentType, authorization, cardId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update overseas usage activation
     * This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Unique Id of the card for activation or de-activation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1CardsCardIdOverseasUsagePut(OverseasCardUsageRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId) throws ApiException {
        v1CardsCardIdOverseasUsagePutWithHttpInfo(body, uuid, accept, clientId, contentType, authorization, cardId);
    }

    /**
     * Update overseas usage activation
     * This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Unique Id of the card for activation or de-activation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1CardsCardIdOverseasUsagePutWithHttpInfo(OverseasCardUsageRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdOverseasUsagePutValidateBeforeCall(body, uuid, accept, clientId, contentType, authorization, cardId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update overseas usage activation (asynchronously)
     * This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Unique Id of the card for activation or de-activation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdOverseasUsagePutAsync(OverseasCardUsageRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdOverseasUsagePutValidateBeforeCall(body, uuid, accept, clientId, contentType, authorization, cardId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1CardsGet
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param clientId client id generated during consumer onboarding (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param cardFunction Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsGetCall(String authorization, String clientId, String uuid, String accept, String cardFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cardFunction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cardFunction", cardFunction));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsGetValidateBeforeCall(String authorization, String clientId, String uuid, String accept, String cardFunction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsGet(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsGet(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsGet(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsGet(Async)");
        }
        // verify the required parameter 'cardFunction' is set
        if (cardFunction == null) {
            throw new ApiException("Missing the required parameter 'cardFunction' when calling v1CardsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsGetCall(authorization, clientId, uuid, accept, cardFunction, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all cards
     * This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param clientId client id generated during consumer onboarding (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param cardFunction Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values. (required)
     * @return CardListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardListingResponse v1CardsGet(String authorization, String clientId, String uuid, String accept, String cardFunction) throws ApiException {
        ApiResponse<CardListingResponse> resp = v1CardsGetWithHttpInfo(authorization, clientId, uuid, accept, cardFunction);
        return resp.getData();
    }

    /**
     * Retrieve all cards
     * This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param clientId client id generated during consumer onboarding (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param cardFunction Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values. (required)
     * @return ApiResponse&lt;CardListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardListingResponse> v1CardsGetWithHttpInfo(String authorization, String clientId, String uuid, String accept, String cardFunction) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsGetValidateBeforeCall(authorization, clientId, uuid, accept, cardFunction, null, null);
        Type localVarReturnType = new TypeToken<CardListingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all cards (asynchronously)
     * This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param clientId client id generated during consumer onboarding (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param cardFunction Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsGetAsync(String authorization, String clientId, String uuid, String accept, String cardFunction, final ApiCallback<CardListingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsGetValidateBeforeCall(authorization, clientId, uuid, accept, cardFunction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardListingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CreditCardsCardIdSupplementaryApplicationsPost
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId Primary card id in encrypted format. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CreditCardsCardIdSupplementaryApplicationsPostCall(String authorization, String uuid, String clientId, String cardId, SupplementaryCardRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/creditCards/{cardId}/supplementary/applications"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CreditCardsCardIdSupplementaryApplicationsPostValidateBeforeCall(String authorization, String uuid, String clientId, String cardId, SupplementaryCardRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CreditCardsCardIdSupplementaryApplicationsPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CreditCardsCardIdSupplementaryApplicationsPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CreditCardsCardIdSupplementaryApplicationsPost(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CreditCardsCardIdSupplementaryApplicationsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CreditCardsCardIdSupplementaryApplicationsPostCall(authorization, uuid, clientId, cardId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Supplementary Card Application
     * This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId Primary card id in encrypted format. (required)
     * @param body  (optional)
     * @return SupplementaryCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SupplementaryCardResponse v1CreditCardsCardIdSupplementaryApplicationsPost(String authorization, String uuid, String clientId, String cardId, SupplementaryCardRequest body) throws ApiException {
        ApiResponse<SupplementaryCardResponse> resp = v1CreditCardsCardIdSupplementaryApplicationsPostWithHttpInfo(authorization, uuid, clientId, cardId, body);
        return resp.getData();
    }

    /**
     * Supplementary Card Application
     * This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId Primary card id in encrypted format. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;SupplementaryCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SupplementaryCardResponse> v1CreditCardsCardIdSupplementaryApplicationsPostWithHttpInfo(String authorization, String uuid, String clientId, String cardId, SupplementaryCardRequest body) throws ApiException {
        com.squareup.okhttp.Call call = v1CreditCardsCardIdSupplementaryApplicationsPostValidateBeforeCall(authorization, uuid, clientId, cardId, body, null, null);
        Type localVarReturnType = new TypeToken<SupplementaryCardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Supplementary Card Application (asynchronously)
     * This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId Primary card id in encrypted format. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CreditCardsCardIdSupplementaryApplicationsPostAsync(String authorization, String uuid, String clientId, String cardId, SupplementaryCardRequest body, final ApiCallback<SupplementaryCardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CreditCardsCardIdSupplementaryApplicationsPostValidateBeforeCall(authorization, uuid, clientId, cardId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SupplementaryCardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CreditCardsCreditLimitsPost
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CreditCardsCreditLimitsPostCall(CreditLimitIncreaseRequest body, String uuid, String accept, String clientId, String contentType, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/creditCards/creditLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CreditCardsCreditLimitsPostValidateBeforeCall(CreditLimitIncreaseRequest body, String uuid, String accept, String clientId, String contentType, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CreditCardsCreditLimitsPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CreditCardsCreditLimitsPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CreditCardsCreditLimitsPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CreditCardsCreditLimitsPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CreditCardsCreditLimitsPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CreditCardsCreditLimitsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CreditCardsCreditLimitsPostCall(body, uuid, accept, clientId, contentType, authorization, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request credit limit increase
     * This API is used to request for a permanent or temporary credit limit increase on credit card.
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @return CreditLimitIncreaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreditLimitIncreaseResponse v1CreditCardsCreditLimitsPost(CreditLimitIncreaseRequest body, String uuid, String accept, String clientId, String contentType, String authorization) throws ApiException {
        ApiResponse<CreditLimitIncreaseResponse> resp = v1CreditCardsCreditLimitsPostWithHttpInfo(body, uuid, accept, clientId, contentType, authorization);
        return resp.getData();
    }

    /**
     * Request credit limit increase
     * This API is used to request for a permanent or temporary credit limit increase on credit card.
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @return ApiResponse&lt;CreditLimitIncreaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreditLimitIncreaseResponse> v1CreditCardsCreditLimitsPostWithHttpInfo(CreditLimitIncreaseRequest body, String uuid, String accept, String clientId, String contentType, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = v1CreditCardsCreditLimitsPostValidateBeforeCall(body, uuid, accept, clientId, contentType, authorization, null, null);
        Type localVarReturnType = new TypeToken<CreditLimitIncreaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request credit limit increase (asynchronously)
     * This API is used to request for a permanent or temporary credit limit increase on credit card.
     * @param body  (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CreditCardsCreditLimitsPostAsync(CreditLimitIncreaseRequest body, String uuid, String accept, String clientId, String contentType, String authorization, final ApiCallback<CreditLimitIncreaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CreditCardsCreditLimitsPostValidateBeforeCall(body, uuid, accept, clientId, contentType, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreditLimitIncreaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
