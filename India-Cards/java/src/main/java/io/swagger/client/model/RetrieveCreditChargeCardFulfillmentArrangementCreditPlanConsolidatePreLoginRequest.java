/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BeneficiaryBankDetail;
import io.swagger.client.model.Loan;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest {
  @SerializedName("oldLoanList")
  private List<Loan> oldLoanList = null;

  @SerializedName("totalLoanAmount")
  private Double totalLoanAmount = null;

  @SerializedName("loanTenureInmonths")
  private Integer loanTenureInmonths = null;

  @SerializedName("topUpAmount")
  private Double topUpAmount = null;

  @SerializedName("loanDescription")
  private String loanDescription = null;

  @SerializedName("disbursementOption")
  private String disbursementOption = null;

  @SerializedName("accountNumber")
  private String accountNumber = null;

  @SerializedName("payeeId")
  private String payeeId = null;

  @SerializedName("birthYear")
  private BigDecimal birthYear = null;

  @SerializedName("beneficiaryBankDetail")
  private BeneficiaryBankDetail beneficiaryBankDetail = null;

  @SerializedName("loanPurpose")
  private String loanPurpose = null;

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest oldLoanList(List<Loan> oldLoanList) {
    this.oldLoanList = oldLoanList;
    return this;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest addOldLoanListItem(Loan oldLoanListItem) {
    if (this.oldLoanList == null) {
      this.oldLoanList = new ArrayList<Loan>();
    }
    this.oldLoanList.add(oldLoanListItem);
    return this;
  }

   /**
   * Get oldLoanList
   * @return oldLoanList
  **/
  @Schema(description = "")
  public List<Loan> getOldLoanList() {
    return oldLoanList;
  }

  public void setOldLoanList(List<Loan> oldLoanList) {
    this.oldLoanList = oldLoanList;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest totalLoanAmount(Double totalLoanAmount) {
    this.totalLoanAmount = totalLoanAmount;
    return this;
  }

   /**
   * Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount.
   * @return totalLoanAmount
  **/
  @Schema(example = "10000.25", required = true, description = "Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount.")
  public Double getTotalLoanAmount() {
    return totalLoanAmount;
  }

  public void setTotalLoanAmount(Double totalLoanAmount) {
    this.totalLoanAmount = totalLoanAmount;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest loanTenureInmonths(Integer loanTenureInmonths) {
    this.loanTenureInmonths = loanTenureInmonths;
    return this;
  }

   /**
   * Tenure of loan against credit card. It is considered in terms of number of months.
   * @return loanTenureInmonths
  **/
  @Schema(example = "12", required = true, description = "Tenure of loan against credit card. It is considered in terms of number of months.")
  public Integer getLoanTenureInmonths() {
    return loanTenureInmonths;
  }

  public void setLoanTenureInmonths(Integer loanTenureInmonths) {
    this.loanTenureInmonths = loanTenureInmonths;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest topUpAmount(Double topUpAmount) {
    this.topUpAmount = topUpAmount;
    return this;
  }

   /**
   * Additonal Topup Amount
   * @return topUpAmount
  **/
  @Schema(example = "200.5", required = true, description = "Additonal Topup Amount")
  public Double getTopUpAmount() {
    return topUpAmount;
  }

  public void setTopUpAmount(Double topUpAmount) {
    this.topUpAmount = topUpAmount;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest loanDescription(String loanDescription) {
    this.loanDescription = loanDescription;
    return this;
  }

   /**
   * New Loan Description
   * @return loanDescription
  **/
  @Schema(example = "epp merge loan", required = true, description = "New Loan Description")
  public String getLoanDescription() {
    return loanDescription;
  }

  public void setLoanDescription(String loanDescription) {
    this.loanDescription = loanDescription;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest disbursementOption(String disbursementOption) {
    this.disbursementOption = disbursementOption;
    return this;
  }

   /**
   * This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description
   * @return disbursementOption
  **/
  @Schema(example = "PAYEE_ACCOUNT", required = true, description = "This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description")
  public String getDisbursementOption() {
    return disbursementOption;
  }

  public void setDisbursementOption(String disbursementOption) {
    this.disbursementOption = disbursementOption;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account.
   * @return accountNumber
  **/
  @Schema(example = "5269013309917800", description = "Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account.")
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest payeeId(String payeeId) {
    this.payeeId = payeeId;
    return this;
  }

   /**
   * Payee Indicator to be mapped against Payee Detail Key
   * @return payeeId
  **/
  @Schema(example = "ABC1234", description = "Payee Indicator to be mapped against Payee Detail Key")
  public String getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(String payeeId) {
    this.payeeId = payeeId;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest birthYear(BigDecimal birthYear) {
    this.birthYear = birthYear;
    return this;
  }

   /**
   * Year of birth of customer
   * @return birthYear
  **/
  @Schema(example = "1994.0", description = "Year of birth of customer")
  public BigDecimal getBirthYear() {
    return birthYear;
  }

  public void setBirthYear(BigDecimal birthYear) {
    this.birthYear = birthYear;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest beneficiaryBankDetail(BeneficiaryBankDetail beneficiaryBankDetail) {
    this.beneficiaryBankDetail = beneficiaryBankDetail;
    return this;
  }

   /**
   * Get beneficiaryBankDetail
   * @return beneficiaryBankDetail
  **/
  @Schema(description = "")
  public BeneficiaryBankDetail getBeneficiaryBankDetail() {
    return beneficiaryBankDetail;
  }

  public void setBeneficiaryBankDetail(BeneficiaryBankDetail beneficiaryBankDetail) {
    this.beneficiaryBankDetail = beneficiaryBankDetail;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest loanPurpose(String loanPurpose) {
    this.loanPurpose = loanPurpose;
    return this;
  }

   /**
   * This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.
   * @return loanPurpose
  **/
  @Schema(example = "MEDICAL", description = "This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.")
  public String getLoanPurpose() {
    return loanPurpose;
  }

  public void setLoanPurpose(String loanPurpose) {
    this.loanPurpose = loanPurpose;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest = (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest) o;
    return Objects.equals(this.oldLoanList, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.oldLoanList) &&
        Objects.equals(this.totalLoanAmount, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.totalLoanAmount) &&
        Objects.equals(this.loanTenureInmonths, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.loanTenureInmonths) &&
        Objects.equals(this.topUpAmount, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.topUpAmount) &&
        Objects.equals(this.loanDescription, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.loanDescription) &&
        Objects.equals(this.disbursementOption, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.disbursementOption) &&
        Objects.equals(this.accountNumber, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.accountNumber) &&
        Objects.equals(this.payeeId, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.payeeId) &&
        Objects.equals(this.birthYear, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.birthYear) &&
        Objects.equals(this.beneficiaryBankDetail, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.beneficiaryBankDetail) &&
        Objects.equals(this.loanPurpose, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest.loanPurpose);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oldLoanList, totalLoanAmount, loanTenureInmonths, topUpAmount, loanDescription, disbursementOption, accountNumber, payeeId, birthYear, beneficiaryBankDetail, loanPurpose);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest {\n");
    
    sb.append("    oldLoanList: ").append(toIndentedString(oldLoanList)).append("\n");
    sb.append("    totalLoanAmount: ").append(toIndentedString(totalLoanAmount)).append("\n");
    sb.append("    loanTenureInmonths: ").append(toIndentedString(loanTenureInmonths)).append("\n");
    sb.append("    topUpAmount: ").append(toIndentedString(topUpAmount)).append("\n");
    sb.append("    loanDescription: ").append(toIndentedString(loanDescription)).append("\n");
    sb.append("    disbursementOption: ").append(toIndentedString(disbursementOption)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    birthYear: ").append(toIndentedString(birthYear)).append("\n");
    sb.append("    beneficiaryBankDetail: ").append(toIndentedString(beneficiaryBankDetail)).append("\n");
    sb.append("    loanPurpose: ").append(toIndentedString(loanPurpose)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
