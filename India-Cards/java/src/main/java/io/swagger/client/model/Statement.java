/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * Statement
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class Statement {
  @SerializedName("eppMinimumEligibleAmount")
  private Double eppMinimumEligibleAmount = null;

  @SerializedName("eppMaximumEligibleAmount")
  private Double eppMaximumEligibleAmount = null;

  @SerializedName("statementDate")
  private LocalDate statementDate = null;

  @SerializedName("statementBalanceAmount")
  private Double statementBalanceAmount = null;

  public Statement eppMinimumEligibleAmount(Double eppMinimumEligibleAmount) {
    this.eppMinimumEligibleAmount = eppMinimumEligibleAmount;
    return this;
  }

   /**
   * Minimum eligible amount for which Equal Payment Plan can be booked.
   * @return eppMinimumEligibleAmount
  **/
  @Schema(example = "5000.25", required = true, description = "Minimum eligible amount for which Equal Payment Plan can be booked.")
  public Double getEppMinimumEligibleAmount() {
    return eppMinimumEligibleAmount;
  }

  public void setEppMinimumEligibleAmount(Double eppMinimumEligibleAmount) {
    this.eppMinimumEligibleAmount = eppMinimumEligibleAmount;
  }

  public Statement eppMaximumEligibleAmount(Double eppMaximumEligibleAmount) {
    this.eppMaximumEligibleAmount = eppMaximumEligibleAmount;
    return this;
  }

   /**
   * Maximum eligible amount for which Equal Payment Plan can be booked.
   * @return eppMaximumEligibleAmount
  **/
  @Schema(example = "10000.25", required = true, description = "Maximum eligible amount for which Equal Payment Plan can be booked.")
  public Double getEppMaximumEligibleAmount() {
    return eppMaximumEligibleAmount;
  }

  public void setEppMaximumEligibleAmount(Double eppMaximumEligibleAmount) {
    this.eppMaximumEligibleAmount = eppMaximumEligibleAmount;
  }

  public Statement statementDate(LocalDate statementDate) {
    this.statementDate = statementDate;
    return this;
  }

   /**
   * Date on which the account statement has been generated in ISO 8601 date format YYYY-MM-DD
   * @return statementDate
  **/
  @Schema(example = "Wed Aug 01 00:00:00 UTC 2018", required = true, description = "Date on which the account statement has been generated in ISO 8601 date format YYYY-MM-DD")
  public LocalDate getStatementDate() {
    return statementDate;
  }

  public void setStatementDate(LocalDate statementDate) {
    this.statementDate = statementDate;
  }

  public Statement statementBalanceAmount(Double statementBalanceAmount) {
    this.statementBalanceAmount = statementBalanceAmount;
    return this;
  }

   /**
   * Statement balance amount on the statement date
   * @return statementBalanceAmount
  **/
  @Schema(example = "10000.25", required = true, description = "Statement balance amount on the statement date")
  public Double getStatementBalanceAmount() {
    return statementBalanceAmount;
  }

  public void setStatementBalanceAmount(Double statementBalanceAmount) {
    this.statementBalanceAmount = statementBalanceAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Statement statement = (Statement) o;
    return Objects.equals(this.eppMinimumEligibleAmount, statement.eppMinimumEligibleAmount) &&
        Objects.equals(this.eppMaximumEligibleAmount, statement.eppMaximumEligibleAmount) &&
        Objects.equals(this.statementDate, statement.statementDate) &&
        Objects.equals(this.statementBalanceAmount, statement.statementBalanceAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eppMinimumEligibleAmount, eppMaximumEligibleAmount, statementDate, statementBalanceAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Statement {\n");
    
    sb.append("    eppMinimumEligibleAmount: ").append(toIndentedString(eppMinimumEligibleAmount)).append("\n");
    sb.append("    eppMaximumEligibleAmount: ").append(toIndentedString(eppMaximumEligibleAmount)).append("\n");
    sb.append("    statementDate: ").append(toIndentedString(statementDate)).append("\n");
    sb.append("    statementBalanceAmount: ").append(toIndentedString(statementBalanceAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
