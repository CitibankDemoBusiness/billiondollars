/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * HistoryAndIntradayTransaction
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class HistoryAndIntradayTransaction {
  @SerializedName("activityIndicator")
  private String activityIndicator = null;

  @SerializedName("moreIndicator")
  private String moreIndicator = null;

  @SerializedName("nextStartIndex")
  private String nextStartIndex = null;

  public HistoryAndIntradayTransaction activityIndicator(String activityIndicator) {
    this.activityIndicator = activityIndicator;
    return this;
  }

   /**
   * This field is used to indicate whether History or Current or All transactions records to be fetched. This is a reference data field. Please use /v1/utilities/referenceData/{activityIndicator} resource to get possible values of this field with descriptions.
   * @return activityIndicator
  **/
  @Schema(example = "HISTORY", description = "This field is used to indicate whether History or Current or All transactions records to be fetched. This is a reference data field. Please use /v1/utilities/referenceData/{activityIndicator} resource to get possible values of this field with descriptions.")
  public String getActivityIndicator() {
    return activityIndicator;
  }

  public void setActivityIndicator(String activityIndicator) {
    this.activityIndicator = activityIndicator;
  }

  public HistoryAndIntradayTransaction moreIndicator(String moreIndicator) {
    this.moreIndicator = moreIndicator;
    return this;
  }

   /**
   * This field is used for  pagination, it indicates that more records are available for retrieval.
   * @return moreIndicator
  **/
  @Schema(example = "Y", description = "This field is used for  pagination, it indicates that more records are available for retrieval.")
  public String getMoreIndicator() {
    return moreIndicator;
  }

  public void setMoreIndicator(String moreIndicator) {
    this.moreIndicator = moreIndicator;
  }

  public HistoryAndIntradayTransaction nextStartIndex(String nextStartIndex) {
    this.nextStartIndex = nextStartIndex;
    return this;
  }

   /**
   * For pagination - the starting index for retrieving the next page/batch of records.
   * @return nextStartIndex
  **/
  @Schema(example = "21", description = "For pagination - the starting index for retrieving the next page/batch of records.")
  public String getNextStartIndex() {
    return nextStartIndex;
  }

  public void setNextStartIndex(String nextStartIndex) {
    this.nextStartIndex = nextStartIndex;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryAndIntradayTransaction historyAndIntradayTransaction = (HistoryAndIntradayTransaction) o;
    return Objects.equals(this.activityIndicator, historyAndIntradayTransaction.activityIndicator) &&
        Objects.equals(this.moreIndicator, historyAndIntradayTransaction.moreIndicator) &&
        Objects.equals(this.nextStartIndex, historyAndIntradayTransaction.nextStartIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityIndicator, moreIndicator, nextStartIndex);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryAndIntradayTransaction {\n");
    
    sb.append("    activityIndicator: ").append(toIndentedString(activityIndicator)).append("\n");
    sb.append("    moreIndicator: ").append(toIndentedString(moreIndicator)).append("\n");
    sb.append("    nextStartIndex: ").append(toIndentedString(nextStartIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
