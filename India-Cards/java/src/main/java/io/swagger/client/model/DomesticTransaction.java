/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DomesticTransaction
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class DomesticTransaction {
  @SerializedName("atmTransactionLimitToggleIndicator")
  private String atmTransactionLimitToggleIndicator = null;

  @SerializedName("atmTransactionLimitAmount")
  private Double atmTransactionLimitAmount = null;

  @SerializedName("contactlessTxnLimitToggleIndicator")
  private String contactlessTxnLimitToggleIndicator = null;

  @SerializedName("contactlessTransactionLimitAmount")
  private Double contactlessTransactionLimitAmount = null;

  @SerializedName("contactPosTxnLimitToggleIndicator")
  private String contactPosTxnLimitToggleIndicator = null;

  @SerializedName("contactPosTransactionLimitAmount")
  private Double contactPosTransactionLimitAmount = null;

  @SerializedName("nonPosTxnLimitToggleIndicator")
  private String nonPosTxnLimitToggleIndicator = null;

  @SerializedName("nonPosTransactionLimitAmount")
  private Double nonPosTransactionLimitAmount = null;

  public DomesticTransaction atmTransactionLimitToggleIndicator(String atmTransactionLimitToggleIndicator) {
    this.atmTransactionLimitToggleIndicator = atmTransactionLimitToggleIndicator;
    return this;
  }

   /**
   * DomesticSingleATMTransactionLimitToggleFlag
   * @return atmTransactionLimitToggleIndicator
  **/
  @Schema(example = "Valid Values   A   Domestic ATM  transaction is allowed until the Domestic ATM limit D   Domestic ATM transaction is Disallowed", description = "DomesticSingleATMTransactionLimitToggleFlag")
  public String getAtmTransactionLimitToggleIndicator() {
    return atmTransactionLimitToggleIndicator;
  }

  public void setAtmTransactionLimitToggleIndicator(String atmTransactionLimitToggleIndicator) {
    this.atmTransactionLimitToggleIndicator = atmTransactionLimitToggleIndicator;
  }

  public DomesticTransaction atmTransactionLimitAmount(Double atmTransactionLimitAmount) {
    this.atmTransactionLimitAmount = atmTransactionLimitAmount;
    return this;
  }

   /**
   * DomesticSingleATMTransactionLimit
   * @return atmTransactionLimitAmount
  **/
  @Schema(description = "DomesticSingleATMTransactionLimit")
  public Double getAtmTransactionLimitAmount() {
    return atmTransactionLimitAmount;
  }

  public void setAtmTransactionLimitAmount(Double atmTransactionLimitAmount) {
    this.atmTransactionLimitAmount = atmTransactionLimitAmount;
  }

  public DomesticTransaction contactlessTxnLimitToggleIndicator(String contactlessTxnLimitToggleIndicator) {
    this.contactlessTxnLimitToggleIndicator = contactlessTxnLimitToggleIndicator;
    return this;
  }

   /**
   * DomesticSingleContactlessTransactionLimitToggleFlag
   * @return contactlessTxnLimitToggleIndicator
  **/
  @Schema(example = "Valid Values   A   Domestic  POS Contactless  transaction is allowed until the Domestic  POS Contactless limit D   Domestic  POS Contactless transaction is Disallowed", description = "DomesticSingleContactlessTransactionLimitToggleFlag")
  public String getContactlessTxnLimitToggleIndicator() {
    return contactlessTxnLimitToggleIndicator;
  }

  public void setContactlessTxnLimitToggleIndicator(String contactlessTxnLimitToggleIndicator) {
    this.contactlessTxnLimitToggleIndicator = contactlessTxnLimitToggleIndicator;
  }

  public DomesticTransaction contactlessTransactionLimitAmount(Double contactlessTransactionLimitAmount) {
    this.contactlessTransactionLimitAmount = contactlessTransactionLimitAmount;
    return this;
  }

   /**
   * DomesticSingleContactlessTransactionLimit
   * @return contactlessTransactionLimitAmount
  **/
  @Schema(description = "DomesticSingleContactlessTransactionLimit")
  public Double getContactlessTransactionLimitAmount() {
    return contactlessTransactionLimitAmount;
  }

  public void setContactlessTransactionLimitAmount(Double contactlessTransactionLimitAmount) {
    this.contactlessTransactionLimitAmount = contactlessTransactionLimitAmount;
  }

  public DomesticTransaction contactPosTxnLimitToggleIndicator(String contactPosTxnLimitToggleIndicator) {
    this.contactPosTxnLimitToggleIndicator = contactPosTxnLimitToggleIndicator;
    return this;
  }

   /**
   * DomesticSingleContactPOSTransactionLimitToggleFlag
   * @return contactPosTxnLimitToggleIndicator
  **/
  @Schema(example = "Valid Values   A   Domestic  POS Contact transaction is allowed until the Domestic POS Contact llimit D   Domestic  POS Contact transaction is Disallowed", description = "DomesticSingleContactPOSTransactionLimitToggleFlag")
  public String getContactPosTxnLimitToggleIndicator() {
    return contactPosTxnLimitToggleIndicator;
  }

  public void setContactPosTxnLimitToggleIndicator(String contactPosTxnLimitToggleIndicator) {
    this.contactPosTxnLimitToggleIndicator = contactPosTxnLimitToggleIndicator;
  }

  public DomesticTransaction contactPosTransactionLimitAmount(Double contactPosTransactionLimitAmount) {
    this.contactPosTransactionLimitAmount = contactPosTransactionLimitAmount;
    return this;
  }

   /**
   * DomesticSingleContactPOSTransactionLimit
   * @return contactPosTransactionLimitAmount
  **/
  @Schema(description = "DomesticSingleContactPOSTransactionLimit")
  public Double getContactPosTransactionLimitAmount() {
    return contactPosTransactionLimitAmount;
  }

  public void setContactPosTransactionLimitAmount(Double contactPosTransactionLimitAmount) {
    this.contactPosTransactionLimitAmount = contactPosTransactionLimitAmount;
  }

  public DomesticTransaction nonPosTxnLimitToggleIndicator(String nonPosTxnLimitToggleIndicator) {
    this.nonPosTxnLimitToggleIndicator = nonPosTxnLimitToggleIndicator;
    return this;
  }

   /**
   * DomesticSingleNonPOSTransactionLimitToggleFlag
   * @return nonPosTxnLimitToggleIndicator
  **/
  @Schema(example = "Valid Values   A   Domestic  Non POS transaction is allowed until the Domestic Non POS limit D   Domestic  Non POS transaction is Disallowed", description = "DomesticSingleNonPOSTransactionLimitToggleFlag")
  public String getNonPosTxnLimitToggleIndicator() {
    return nonPosTxnLimitToggleIndicator;
  }

  public void setNonPosTxnLimitToggleIndicator(String nonPosTxnLimitToggleIndicator) {
    this.nonPosTxnLimitToggleIndicator = nonPosTxnLimitToggleIndicator;
  }

  public DomesticTransaction nonPosTransactionLimitAmount(Double nonPosTransactionLimitAmount) {
    this.nonPosTransactionLimitAmount = nonPosTransactionLimitAmount;
    return this;
  }

   /**
   * DomesticSingleNonPOSTransactionLimit
   * @return nonPosTransactionLimitAmount
  **/
  @Schema(description = "DomesticSingleNonPOSTransactionLimit")
  public Double getNonPosTransactionLimitAmount() {
    return nonPosTransactionLimitAmount;
  }

  public void setNonPosTransactionLimitAmount(Double nonPosTransactionLimitAmount) {
    this.nonPosTransactionLimitAmount = nonPosTransactionLimitAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomesticTransaction domesticTransaction = (DomesticTransaction) o;
    return Objects.equals(this.atmTransactionLimitToggleIndicator, domesticTransaction.atmTransactionLimitToggleIndicator) &&
        Objects.equals(this.atmTransactionLimitAmount, domesticTransaction.atmTransactionLimitAmount) &&
        Objects.equals(this.contactlessTxnLimitToggleIndicator, domesticTransaction.contactlessTxnLimitToggleIndicator) &&
        Objects.equals(this.contactlessTransactionLimitAmount, domesticTransaction.contactlessTransactionLimitAmount) &&
        Objects.equals(this.contactPosTxnLimitToggleIndicator, domesticTransaction.contactPosTxnLimitToggleIndicator) &&
        Objects.equals(this.contactPosTransactionLimitAmount, domesticTransaction.contactPosTransactionLimitAmount) &&
        Objects.equals(this.nonPosTxnLimitToggleIndicator, domesticTransaction.nonPosTxnLimitToggleIndicator) &&
        Objects.equals(this.nonPosTransactionLimitAmount, domesticTransaction.nonPosTransactionLimitAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atmTransactionLimitToggleIndicator, atmTransactionLimitAmount, contactlessTxnLimitToggleIndicator, contactlessTransactionLimitAmount, contactPosTxnLimitToggleIndicator, contactPosTransactionLimitAmount, nonPosTxnLimitToggleIndicator, nonPosTransactionLimitAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomesticTransaction {\n");
    
    sb.append("    atmTransactionLimitToggleIndicator: ").append(toIndentedString(atmTransactionLimitToggleIndicator)).append("\n");
    sb.append("    atmTransactionLimitAmount: ").append(toIndentedString(atmTransactionLimitAmount)).append("\n");
    sb.append("    contactlessTxnLimitToggleIndicator: ").append(toIndentedString(contactlessTxnLimitToggleIndicator)).append("\n");
    sb.append("    contactlessTransactionLimitAmount: ").append(toIndentedString(contactlessTransactionLimitAmount)).append("\n");
    sb.append("    contactPosTxnLimitToggleIndicator: ").append(toIndentedString(contactPosTxnLimitToggleIndicator)).append("\n");
    sb.append("    contactPosTransactionLimitAmount: ").append(toIndentedString(contactPosTransactionLimitAmount)).append("\n");
    sb.append("    nonPosTxnLimitToggleIndicator: ").append(toIndentedString(nonPosTxnLimitToggleIndicator)).append("\n");
    sb.append("    nonPosTransactionLimitAmount: ").append(toIndentedString(nonPosTransactionLimitAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
