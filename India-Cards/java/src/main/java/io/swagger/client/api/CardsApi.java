/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.CardsLimitsAndEnrollmentsUpdateRequest;
import io.swagger.client.model.CvvVerificationRequest;
import io.swagger.client.model.EppLoanBookingConfirmationRequest;
import io.swagger.client.model.EppLoanBookingConfirmationResponse;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.InitiateCreditChargeCardCorporateCardsClosureRequest;
import io.swagger.client.model.InitiateCreditChargeCardCorporateCardsClosureResponse;
import io.swagger.client.model.MultiCurrencyAccountEligibilityResponse;
import io.swagger.client.model.MultiCurrencyAccountEnrollmentRequest;
import io.swagger.client.model.MultiCurrencyAccountEnrollmentResponse;
import io.swagger.client.model.MultiCurrencyAccountEnrollmentWithCurrencyRequest;
import io.swagger.client.model.MultiCurrencyAccountEnrollmentWithCurrencyResponse;
import io.swagger.client.model.NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest;
import io.swagger.client.model.OverseasTravelPlanAddRequest;
import io.swagger.client.model.OverseasTravelPlanInquiryResponse;
import io.swagger.client.model.OverseasTravelPlanUpdateRequest;
import io.swagger.client.model.PartnerCardListingResponse;
import io.swagger.client.model.ProductResponse;
import io.swagger.client.model.RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest;
import io.swagger.client.model.RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest;
import io.swagger.client.model.RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse;
import io.swagger.client.model.RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsCashLimitRequest;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsCashLimitResponse;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsDetailRequest;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsDetailResponse;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest;
import io.swagger.client.model.RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse;
import io.swagger.client.model.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse;
import io.swagger.client.model.UpdateCreditChargeCardCorporateCardsCashLimitRequest;
import io.swagger.client.model.UpdateCreditChargeCardCorporateCardsCreditLimitRequest;
import io.swagger.client.model.UpdateCreditChargeCardCorporateCardsCreditLimitResponse;
import io.swagger.client.model.UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest;
import io.swagger.client.model.UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse;
import io.swagger.client.model.UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardsApi {
    private ApiClient apiClient;

    public CardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for bNMOAPIBankingDigitalRegulatory
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardType Type of card (optional, default to credit_card)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bNMOAPIBankingDigitalRegulatoryCall(String authorization, String uuid, String accept, String clientId, String contentType, String cardType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/my/bnm/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cardType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("card_type", cardType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bNMOAPIBankingDigitalRegulatoryValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String contentType, String cardType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling bNMOAPIBankingDigitalRegulatory(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling bNMOAPIBankingDigitalRegulatory(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling bNMOAPIBankingDigitalRegulatory(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling bNMOAPIBankingDigitalRegulatory(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling bNMOAPIBankingDigitalRegulatory(Async)");
        }
        
        com.squareup.okhttp.Call call = bNMOAPIBankingDigitalRegulatoryCall(authorization, uuid, accept, clientId, contentType, cardType, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the detail of card products
     * This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardType Type of card (optional, default to credit_card)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProductResponse bNMOAPIBankingDigitalRegulatory(String authorization, String uuid, String accept, String clientId, String contentType, String cardType, String clientDetails) throws ApiException {
        ApiResponse<ProductResponse> resp = bNMOAPIBankingDigitalRegulatoryWithHttpInfo(authorization, uuid, accept, clientId, contentType, cardType, clientDetails);
        return resp.getData();
    }

    /**
     * Retrieve the detail of card products
     * This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardType Type of card (optional, default to credit_card)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;ProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProductResponse> bNMOAPIBankingDigitalRegulatoryWithHttpInfo(String authorization, String uuid, String accept, String clientId, String contentType, String cardType, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = bNMOAPIBankingDigitalRegulatoryValidateBeforeCall(authorization, uuid, accept, clientId, contentType, cardType, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<ProductResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the detail of card products (asynchronously)
     * This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardType Type of card (optional, default to credit_card)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bNMOAPIBankingDigitalRegulatoryAsync(String authorization, String uuid, String accept, String clientId, String contentType, String cardType, String clientDetails, final ApiCallback<ProductResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bNMOAPIBankingDigitalRegulatoryValidateBeforeCall(authorization, uuid, accept, clientId, contentType, cardType, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProductResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eppLoanBookingConfirmation
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eppLoanBookingConfirmationCall(EppLoanBookingConfirmationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/creditCards/{cardId}/easyPaymentPlans/bookings/confirmation"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eppLoanBookingConfirmationValidateBeforeCall(EppLoanBookingConfirmationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling eppLoanBookingConfirmation(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling eppLoanBookingConfirmation(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling eppLoanBookingConfirmation(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling eppLoanBookingConfirmation(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling eppLoanBookingConfirmation(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling eppLoanBookingConfirmation(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling eppLoanBookingConfirmation(Async)");
        }
        
        com.squareup.okhttp.Call call = eppLoanBookingConfirmationCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Confirm Easy Payment Plan Booking
     * This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return EppLoanBookingConfirmationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EppLoanBookingConfirmationResponse eppLoanBookingConfirmation(EppLoanBookingConfirmationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        ApiResponse<EppLoanBookingConfirmationResponse> resp = eppLoanBookingConfirmationWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
        return resp.getData();
    }

    /**
     * Confirm Easy Payment Plan Booking
     * This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;EppLoanBookingConfirmationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EppLoanBookingConfirmationResponse> eppLoanBookingConfirmationWithHttpInfo(EppLoanBookingConfirmationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = eppLoanBookingConfirmationValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<EppLoanBookingConfirmationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Confirm Easy Payment Plan Booking (asynchronously)
     * This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eppLoanBookingConfirmationAsync(EppLoanBookingConfirmationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ApiCallback<EppLoanBookingConfirmationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eppLoanBookingConfirmationValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EppLoanBookingConfirmationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for initiateCreditChargeCardCorporateCardsClosure
     * @param body InitiateCreditChargeCardCorporateCardsClosureRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call initiateCreditChargeCardCorporateCardsClosureCall(InitiateCreditChargeCardCorporateCardsClosureRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/closure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call initiateCreditChargeCardCorporateCardsClosureValidateBeforeCall(InitiateCreditChargeCardCorporateCardsClosureRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling initiateCreditChargeCardCorporateCardsClosure(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling initiateCreditChargeCardCorporateCardsClosure(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling initiateCreditChargeCardCorporateCardsClosure(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling initiateCreditChargeCardCorporateCardsClosure(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling initiateCreditChargeCardCorporateCardsClosure(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling initiateCreditChargeCardCorporateCardsClosure(Async)");
        }
        
        com.squareup.okhttp.Call call = initiateCreditChargeCardCorporateCardsClosureCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to close the corporate Credit Card or Ready credit Account.
     * This API is used to close the corporate Credit Card or Ready credit Account.
     * @param body InitiateCreditChargeCardCorporateCardsClosureRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return InitiateCreditChargeCardCorporateCardsClosureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InitiateCreditChargeCardCorporateCardsClosureResponse initiateCreditChargeCardCorporateCardsClosure(InitiateCreditChargeCardCorporateCardsClosureRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        ApiResponse<InitiateCreditChargeCardCorporateCardsClosureResponse> resp = initiateCreditChargeCardCorporateCardsClosureWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
        return resp.getData();
    }

    /**
     * This API is used to close the corporate Credit Card or Ready credit Account.
     * This API is used to close the corporate Credit Card or Ready credit Account.
     * @param body InitiateCreditChargeCardCorporateCardsClosureRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;InitiateCreditChargeCardCorporateCardsClosureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InitiateCreditChargeCardCorporateCardsClosureResponse> initiateCreditChargeCardCorporateCardsClosureWithHttpInfo(InitiateCreditChargeCardCorporateCardsClosureRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = initiateCreditChargeCardCorporateCardsClosureValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<InitiateCreditChargeCardCorporateCardsClosureResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is used to close the corporate Credit Card or Ready credit Account. (asynchronously)
     * This API is used to close the corporate Credit Card or Ready credit Account.
     * @param body InitiateCreditChargeCardCorporateCardsClosureRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call initiateCreditChargeCardCorporateCardsClosureAsync(InitiateCreditChargeCardCorporateCardsClosureRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ApiCallback<InitiateCreditChargeCardCorporateCardsClosureResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = initiateCreditChargeCardCorporateCardsClosureValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InitiateCreditChargeCardCorporateCardsClosureResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for multiCurrencyAccountEnrollment
     * @param body MultiCurrencyAccountEnrollmentRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call multiCurrencyAccountEnrollmentCall(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/cards/{cardId}/multiCurrencyAccounts/enrollments"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call multiCurrencyAccountEnrollmentValidateBeforeCall(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling multiCurrencyAccountEnrollment(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling multiCurrencyAccountEnrollment(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling multiCurrencyAccountEnrollment(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling multiCurrencyAccountEnrollment(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling multiCurrencyAccountEnrollment(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling multiCurrencyAccountEnrollment(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling multiCurrencyAccountEnrollment(Async)");
        }
        
        com.squareup.okhttp.Call call = multiCurrencyAccountEnrollmentCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * @param body MultiCurrencyAccountEnrollmentRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return MultiCurrencyAccountEnrollmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiCurrencyAccountEnrollmentResponse multiCurrencyAccountEnrollment(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        ApiResponse<MultiCurrencyAccountEnrollmentResponse> resp = multiCurrencyAccountEnrollmentWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
        return resp.getData();
    }

    /**
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * @param body MultiCurrencyAccountEnrollmentRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;MultiCurrencyAccountEnrollmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiCurrencyAccountEnrollmentResponse> multiCurrencyAccountEnrollmentWithHttpInfo(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = multiCurrencyAccountEnrollmentValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEnrollmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account (asynchronously)
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * @param body MultiCurrencyAccountEnrollmentRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call multiCurrencyAccountEnrollmentAsync(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ApiCallback<MultiCurrencyAccountEnrollmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = multiCurrencyAccountEnrollmentValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEnrollmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for multiCurrencyAccountEnrollmentWithCurrency
     * @param body MultiCurrencyAccountEnrollmentWithCurrencyRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call multiCurrencyAccountEnrollmentWithCurrencyCall(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/cards/{cardId}/multiCurrencyAccounts/enrollments/currency"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call multiCurrencyAccountEnrollmentWithCurrencyValidateBeforeCall(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling multiCurrencyAccountEnrollmentWithCurrency(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling multiCurrencyAccountEnrollmentWithCurrency(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling multiCurrencyAccountEnrollmentWithCurrency(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling multiCurrencyAccountEnrollmentWithCurrency(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling multiCurrencyAccountEnrollmentWithCurrency(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling multiCurrencyAccountEnrollmentWithCurrency(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling multiCurrencyAccountEnrollmentWithCurrency(Async)");
        }
        
        com.squareup.okhttp.Call call = multiCurrencyAccountEnrollmentWithCurrencyCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is to generate/enroll new FCY Accounts to Multi Currency Account
     * This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
     * @param body MultiCurrencyAccountEnrollmentWithCurrencyRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return MultiCurrencyAccountEnrollmentWithCurrencyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiCurrencyAccountEnrollmentWithCurrencyResponse multiCurrencyAccountEnrollmentWithCurrency(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> resp = multiCurrencyAccountEnrollmentWithCurrencyWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
        return resp.getData();
    }

    /**
     * This API is to generate/enroll new FCY Accounts to Multi Currency Account
     * This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
     * @param body MultiCurrencyAccountEnrollmentWithCurrencyRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;MultiCurrencyAccountEnrollmentWithCurrencyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> multiCurrencyAccountEnrollmentWithCurrencyWithHttpInfo(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = multiCurrencyAccountEnrollmentWithCurrencyValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEnrollmentWithCurrencyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is to generate/enroll new FCY Accounts to Multi Currency Account (asynchronously)
     * This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
     * @param body MultiCurrencyAccountEnrollmentWithCurrencyRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call multiCurrencyAccountEnrollmentWithCurrencyAsync(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ApiCallback<MultiCurrencyAccountEnrollmentWithCurrencyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = multiCurrencyAccountEnrollmentWithCurrencyValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEnrollmentWithCurrencyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for notifyCreditChargeCardFulfillmentArrangementAuthorisedTransaction
     * @param body NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest (required)
     * @param authorization HTTP Basic authentication by passing base64 encoded value of the client id and client secret separated by colon (:).Example: Base64(client_id:client_secret) will be passed as Basic KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param contentType application/json (required)
     * @param clientId Client ID generated during application registration. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param xJwsSignature This field is signature generated when partner sign API payload.This signature will be used to validate that the call is coming from a valid partner. This signature is a JWT token, which will be validated with partner’s JWK stored in DB (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionCall(NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest body, String authorization, String uuid, String accept, String contentType, String clientId, String clientDetails, String acceptLanguage, String xJwsSignature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/transaction/authorised/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (xJwsSignature != null)
        localVarHeaderParams.put("x-jws-signature", apiClient.parameterToString(xJwsSignature));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call notifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionValidateBeforeCall(NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest body, String authorization, String uuid, String accept, String contentType, String clientId, String clientDetails, String acceptLanguage, String xJwsSignature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling notifyCreditChargeCardFulfillmentArrangementAuthorisedTransaction(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling notifyCreditChargeCardFulfillmentArrangementAuthorisedTransaction(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling notifyCreditChargeCardFulfillmentArrangementAuthorisedTransaction(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling notifyCreditChargeCardFulfillmentArrangementAuthorisedTransaction(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling notifyCreditChargeCardFulfillmentArrangementAuthorisedTransaction(Async)");
        }
        
        com.squareup.okhttp.Call call = notifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionCall(body, authorization, uuid, accept, contentType, clientId, clientDetails, acceptLanguage, xJwsSignature, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API will be triggered by partner(VISA) to notify the cardholder about authorisation transaction.
     * This API will be triggered by partner(VISA) to notify the cardholder about authorisation transaction.
     * @param body NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest (required)
     * @param authorization HTTP Basic authentication by passing base64 encoded value of the client id and client secret separated by colon (:).Example: Base64(client_id:client_secret) will be passed as Basic KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param contentType application/json (required)
     * @param clientId Client ID generated during application registration. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param xJwsSignature This field is signature generated when partner sign API payload.This signature will be used to validate that the call is coming from a valid partner. This signature is a JWT token, which will be validated with partner’s JWK stored in DB (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void notifyCreditChargeCardFulfillmentArrangementAuthorisedTransaction(NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest body, String authorization, String uuid, String accept, String contentType, String clientId, String clientDetails, String acceptLanguage, String xJwsSignature) throws ApiException {
        notifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionWithHttpInfo(body, authorization, uuid, accept, contentType, clientId, clientDetails, acceptLanguage, xJwsSignature);
    }

    /**
     * This API will be triggered by partner(VISA) to notify the cardholder about authorisation transaction.
     * This API will be triggered by partner(VISA) to notify the cardholder about authorisation transaction.
     * @param body NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest (required)
     * @param authorization HTTP Basic authentication by passing base64 encoded value of the client id and client secret separated by colon (:).Example: Base64(client_id:client_secret) will be passed as Basic KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param contentType application/json (required)
     * @param clientId Client ID generated during application registration. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param xJwsSignature This field is signature generated when partner sign API payload.This signature will be used to validate that the call is coming from a valid partner. This signature is a JWT token, which will be validated with partner’s JWK stored in DB (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> notifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionWithHttpInfo(NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest body, String authorization, String uuid, String accept, String contentType, String clientId, String clientDetails, String acceptLanguage, String xJwsSignature) throws ApiException {
        com.squareup.okhttp.Call call = notifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionValidateBeforeCall(body, authorization, uuid, accept, contentType, clientId, clientDetails, acceptLanguage, xJwsSignature, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API will be triggered by partner(VISA) to notify the cardholder about authorisation transaction. (asynchronously)
     * This API will be triggered by partner(VISA) to notify the cardholder about authorisation transaction.
     * @param body NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest (required)
     * @param authorization HTTP Basic authentication by passing base64 encoded value of the client id and client secret separated by colon (:).Example: Base64(client_id:client_secret) will be passed as Basic KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param contentType application/json (required)
     * @param clientId Client ID generated during application registration. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param xJwsSignature This field is signature generated when partner sign API payload.This signature will be used to validate that the call is coming from a valid partner. This signature is a JWT token, which will be validated with partner’s JWK stored in DB (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionAsync(NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest body, String authorization, String uuid, String accept, String contentType, String clientId, String clientDetails, String acceptLanguage, String xJwsSignature, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionValidateBeforeCall(body, authorization, uuid, accept, contentType, clientId, clientDetails, acceptLanguage, xJwsSignature, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for partnerCardListing
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId client id generated during consumer onboarding (required)
     * @param cardFunction Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. (required)
     * @param linkedSupplementaryCardFlag Flag to identify linked supplementary information to be retrieved. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call partnerCardListingCall(String authorization, String uuid, String accept, String clientId, String cardFunction, Boolean linkedSupplementaryCardFlag, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/partner/v1/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cardFunction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cardFunction", cardFunction));
        if (linkedSupplementaryCardFlag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("linkedSupplementaryCardFlag", linkedSupplementaryCardFlag));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partnerCardListingValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String cardFunction, Boolean linkedSupplementaryCardFlag, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling partnerCardListing(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling partnerCardListing(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling partnerCardListing(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling partnerCardListing(Async)");
        }
        // verify the required parameter 'cardFunction' is set
        if (cardFunction == null) {
            throw new ApiException("Missing the required parameter 'cardFunction' when calling partnerCardListing(Async)");
        }
        
        com.squareup.okhttp.Call call = partnerCardListingCall(authorization, uuid, accept, clientId, cardFunction, linkedSupplementaryCardFlag, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Partner Card List
     * This API is used to list all the cards held by a customer with Citi partner.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId client id generated during consumer onboarding (required)
     * @param cardFunction Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. (required)
     * @param linkedSupplementaryCardFlag Flag to identify linked supplementary information to be retrieved. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return PartnerCardListingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PartnerCardListingResponse partnerCardListing(String authorization, String uuid, String accept, String clientId, String cardFunction, Boolean linkedSupplementaryCardFlag, String clientDetails) throws ApiException {
        ApiResponse<PartnerCardListingResponse> resp = partnerCardListingWithHttpInfo(authorization, uuid, accept, clientId, cardFunction, linkedSupplementaryCardFlag, clientDetails);
        return resp.getData();
    }

    /**
     * Partner Card List
     * This API is used to list all the cards held by a customer with Citi partner.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId client id generated during consumer onboarding (required)
     * @param cardFunction Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. (required)
     * @param linkedSupplementaryCardFlag Flag to identify linked supplementary information to be retrieved. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;PartnerCardListingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PartnerCardListingResponse> partnerCardListingWithHttpInfo(String authorization, String uuid, String accept, String clientId, String cardFunction, Boolean linkedSupplementaryCardFlag, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = partnerCardListingValidateBeforeCall(authorization, uuid, accept, clientId, cardFunction, linkedSupplementaryCardFlag, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<PartnerCardListingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Partner Card List (asynchronously)
     * This API is used to list all the cards held by a customer with Citi partner.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId client id generated during consumer onboarding (required)
     * @param cardFunction Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. (required)
     * @param linkedSupplementaryCardFlag Flag to identify linked supplementary information to be retrieved. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partnerCardListingAsync(String authorization, String uuid, String accept, String clientId, String cardFunction, Boolean linkedSupplementaryCardFlag, String clientDetails, final ApiCallback<PartnerCardListingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partnerCardListingValidateBeforeCall(authorization, uuid, accept, clientId, cardFunction, linkedSupplementaryCardFlag, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PartnerCardListingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed
     * @param body RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedCall(RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/suspensionAndCashLimitAllowed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedValidateBeforeCall(RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed(Async)");
        }
        
        com.squareup.okhttp.Call call = requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to Suspend and Unsuspend corporate card.
     * This API is used to Suspend and Unsuspend corporate card.
     * @param body RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed(RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
    }

    /**
     * This API is used to Suspend and Unsuspend corporate card.
     * This API is used to Suspend and Unsuspend corporate card.
     * @param body RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedWithHttpInfo(RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API is used to Suspend and Unsuspend corporate card. (asynchronously)
     * This API is used to Suspend and Unsuspend corporate card.
     * @param body RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedAsync(RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement
     * @param body RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementCall(RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/cardReplacement";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementValidateBeforeCall(RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement(Async)");
        }
        
        com.squareup.okhttp.Call call = requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
     * This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
     * @param body RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement(RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        ApiResponse<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse> resp = requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
        return resp.getData();
    }

    /**
     * This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
     * This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
     * @param body RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse> requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementWithHttpInfo(RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is to do the replacement of credit card for Damage/Lost/Stolen reasons (asynchronously)
     * This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
     * @param body RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementAsync(RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ApiCallback<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund
     * @param body RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundCall(RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/creditChargeCard/creditPlan/epp/refund";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundValidateBeforeCall(RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund(Async)");
        }
        
        com.squareup.okhttp.Call call = requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used for EPP Refund in Open Loop
     * This API is used for EPP Refund in Open Loop
     * @param body RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund(RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
    }

    /**
     * This API is used for EPP Refund in Open Loop
     * This API is used for EPP Refund in Open Loop
     * @param body RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundWithHttpInfo(RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API is used for EPP Refund in Open Loop (asynchronously)
     * This API is used for EPP Refund in Open Loop
     * @param body RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundAsync(RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retrieveCreditChargeCardCorporateCardsCashLimit
     * @param body RetrieveCreditChargeCardCorporateCardsCashLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardCorporateCardsCashLimitCall(RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/cashLimit/retrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveCreditChargeCardCorporateCardsCashLimitValidateBeforeCall(RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling retrieveCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveCreditChargeCardCorporateCardsCashLimitCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to retrieve the corporate card cash limit
     * This API is used to retrieve the corporate card cash limit
     * @param body RetrieveCreditChargeCardCorporateCardsCashLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return RetrieveCreditChargeCardCorporateCardsCashLimitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveCreditChargeCardCorporateCardsCashLimitResponse retrieveCreditChargeCardCorporateCardsCashLimit(RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        ApiResponse<RetrieveCreditChargeCardCorporateCardsCashLimitResponse> resp = retrieveCreditChargeCardCorporateCardsCashLimitWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
        return resp.getData();
    }

    /**
     * This API is used to retrieve the corporate card cash limit
     * This API is used to retrieve the corporate card cash limit
     * @param body RetrieveCreditChargeCardCorporateCardsCashLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;RetrieveCreditChargeCardCorporateCardsCashLimitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveCreditChargeCardCorporateCardsCashLimitResponse> retrieveCreditChargeCardCorporateCardsCashLimitWithHttpInfo(RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = retrieveCreditChargeCardCorporateCardsCashLimitValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardCorporateCardsCashLimitResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is used to retrieve the corporate card cash limit (asynchronously)
     * This API is used to retrieve the corporate card cash limit
     * @param body RetrieveCreditChargeCardCorporateCardsCashLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardCorporateCardsCashLimitAsync(RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ApiCallback<RetrieveCreditChargeCardCorporateCardsCashLimitResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveCreditChargeCardCorporateCardsCashLimitValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardCorporateCardsCashLimitResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveCreditChargeCardCorporateCardsDetail
     * @param body RetrieveCreditChargeCardCorporateCardsDetailRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardCorporateCardsDetailCall(RetrieveCreditChargeCardCorporateCardsDetailRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/details/retrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveCreditChargeCardCorporateCardsDetailValidateBeforeCall(RetrieveCreditChargeCardCorporateCardsDetailRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling retrieveCreditChargeCardCorporateCardsDetail(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveCreditChargeCardCorporateCardsDetail(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveCreditChargeCardCorporateCardsDetail(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveCreditChargeCardCorporateCardsDetail(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveCreditChargeCardCorporateCardsDetail(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveCreditChargeCardCorporateCardsDetail(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveCreditChargeCardCorporateCardsDetailCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to retrieve the corporate card details
     * This API is used to retrieve the corporate card details
     * @param body RetrieveCreditChargeCardCorporateCardsDetailRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return RetrieveCreditChargeCardCorporateCardsDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveCreditChargeCardCorporateCardsDetailResponse retrieveCreditChargeCardCorporateCardsDetail(RetrieveCreditChargeCardCorporateCardsDetailRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        ApiResponse<RetrieveCreditChargeCardCorporateCardsDetailResponse> resp = retrieveCreditChargeCardCorporateCardsDetailWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
        return resp.getData();
    }

    /**
     * This API is used to retrieve the corporate card details
     * This API is used to retrieve the corporate card details
     * @param body RetrieveCreditChargeCardCorporateCardsDetailRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;RetrieveCreditChargeCardCorporateCardsDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveCreditChargeCardCorporateCardsDetailResponse> retrieveCreditChargeCardCorporateCardsDetailWithHttpInfo(RetrieveCreditChargeCardCorporateCardsDetailRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = retrieveCreditChargeCardCorporateCardsDetailValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardCorporateCardsDetailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is used to retrieve the corporate card details (asynchronously)
     * This API is used to retrieve the corporate card details
     * @param body RetrieveCreditChargeCardCorporateCardsDetailRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardCorporateCardsDetailAsync(RetrieveCreditChargeCardCorporateCardsDetailRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ApiCallback<RetrieveCreditChargeCardCorporateCardsDetailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveCreditChargeCardCorporateCardsDetailValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardCorporateCardsDetailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions
     * @param body RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsCall(RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/pendingAndIntradayAuthorizationTransactions/retrieve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsValidateBeforeCall(RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API used to retrieve the pending Authorization refund and intraday and history transactions
     * This API used to retrieve the pending Authorization refund and intraday and history transactions
     * @param body RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions(RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        ApiResponse<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse> resp = retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
        return resp.getData();
    }

    /**
     * This API used to retrieve the pending Authorization refund and intraday and history transactions
     * This API used to retrieve the pending Authorization refund and intraday and history transactions
     * @param body RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse> retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsWithHttpInfo(RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API used to retrieve the pending Authorization refund and intraday and history transactions (asynchronously)
     * This API used to retrieve the pending Authorization refund and intraday and history transactions
     * @param body RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsAsync(RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ApiCallback<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveCreditChargeCardFulfillmentArrangementCreditCardStatus
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer Card identifier in encrypted format. (required)
     * @param transactionReferenceId This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditCardStatusCall(String authorization, String uuid, String accept, String clientId, String cardId, String transactionReferenceId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/creditChargeCard/cardStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cardId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cardId", cardId));
        if (transactionReferenceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transactionReferenceId", transactionReferenceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditCardStatusValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String cardId, String transactionReferenceId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveCreditChargeCardFulfillmentArrangementCreditCardStatus(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveCreditChargeCardFulfillmentArrangementCreditCardStatus(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveCreditChargeCardFulfillmentArrangementCreditCardStatus(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveCreditChargeCardFulfillmentArrangementCreditCardStatus(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling retrieveCreditChargeCardFulfillmentArrangementCreditCardStatus(Async)");
        }
        // verify the required parameter 'transactionReferenceId' is set
        if (transactionReferenceId == null) {
            throw new ApiException("Missing the required parameter 'transactionReferenceId' when calling retrieveCreditChargeCardFulfillmentArrangementCreditCardStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditCardStatusCall(authorization, uuid, accept, clientId, cardId, transactionReferenceId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve Credit Card Status
     * This API is used to return the credit card status.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer Card identifier in encrypted format. (required)
     * @param transactionReferenceId This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse retrieveCreditChargeCardFulfillmentArrangementCreditCardStatus(String authorization, String uuid, String accept, String clientId, String cardId, String transactionReferenceId, String clientDetails) throws ApiException {
        ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse> resp = retrieveCreditChargeCardFulfillmentArrangementCreditCardStatusWithHttpInfo(authorization, uuid, accept, clientId, cardId, transactionReferenceId, clientDetails);
        return resp.getData();
    }

    /**
     * Retrieve Credit Card Status
     * This API is used to return the credit card status.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer Card identifier in encrypted format. (required)
     * @param transactionReferenceId This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse> retrieveCreditChargeCardFulfillmentArrangementCreditCardStatusWithHttpInfo(String authorization, String uuid, String accept, String clientId, String cardId, String transactionReferenceId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditCardStatusValidateBeforeCall(authorization, uuid, accept, clientId, cardId, transactionReferenceId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve Credit Card Status (asynchronously)
     * This API is used to return the credit card status.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer Card identifier in encrypted format. (required)
     * @param transactionReferenceId This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditCardStatusAsync(String authorization, String uuid, String accept, String clientId, String cardId, String transactionReferenceId, String clientDetails, final ApiCallback<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditCardStatusValidateBeforeCall(authorization, uuid, accept, clientId, cardId, transactionReferenceId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param productId Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)
     * @param loanAmount Loan amount for easy payment plan booking. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppCall(String authorization, String uuid, String accept, String clientId, String offerId, String clientDetails, String productId, BigDecimal loanAmount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans"
            .replaceAll("\\{" + "offerId" + "\\}", apiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("productId", productId));
        if (loanAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("loanAmount", loanAmount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String offerId, String clientDetails, String productId, BigDecimal loanAmount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp(Async)");
        }
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppCall(authorization, uuid, accept, clientId, offerId, clientDetails, productId, loanAmount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param productId Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)
     * @param loanAmount Loan amount for easy payment plan booking. (optional)
     * @return RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp(String authorization, String uuid, String accept, String clientId, String offerId, String clientDetails, String productId, BigDecimal loanAmount) throws ApiException {
        ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse> resp = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppWithHttpInfo(authorization, uuid, accept, clientId, offerId, clientDetails, productId, loanAmount);
        return resp.getData();
    }

    /**
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param productId Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)
     * @param loanAmount Loan amount for easy payment plan booking. (optional)
     * @return ApiResponse&lt;RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse> retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppWithHttpInfo(String authorization, String uuid, String accept, String clientId, String offerId, String clientDetails, String productId, BigDecimal loanAmount) throws ApiException {
        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppValidateBeforeCall(authorization, uuid, accept, clientId, offerId, clientDetails, productId, loanAmount, null, null);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors. (asynchronously)
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param productId Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)
     * @param loanAmount Loan amount for easy payment plan booking. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsync(String authorization, String uuid, String accept, String clientId, String offerId, String clientDetails, String productId, BigDecimal loanAmount, final ApiCallback<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppValidateBeforeCall(authorization, uuid, accept, clientId, offerId, clientDetails, productId, loanAmount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings
     * @param body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsCall(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String offerId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans/bookings"
            .replaceAll("\\{" + "offerId" + "\\}", apiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsValidateBeforeCall(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String offerId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(Async)");
        }
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsCall(body, authorization, uuid, accept, clientId, contentType, offerId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     * This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     * @param body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String offerId, String clientDetails) throws ApiException {
        ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse> resp = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, offerId, clientDetails);
        return resp.getData();
    }

    /**
     * This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     * This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     * @param body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse> retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsWithHttpInfo(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String offerId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, offerId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number. (asynchronously)
     * This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     * @param body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsync(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String offerId, String clientDetails, final ApiCallback<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, offerId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param loanAmount Loan amount for easy payment plan booking. (required)
     * @param tenor Tenure of loan in months (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param nextStartIndex In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     * @param binaryDataFlag This refer to the flag in case of binary file is require. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesCall(String authorization, String uuid, String accept, String clientId, String offerId, BigDecimal loanAmount, BigDecimal tenor, String clientDetails, String nextStartIndex, Boolean binaryDataFlag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans/repaymentSchedules"
            .replaceAll("\\{" + "offerId" + "\\}", apiClient.escapeString(offerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (loanAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("loanAmount", loanAmount));
        if (tenor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenor", tenor));
        if (nextStartIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nextStartIndex", nextStartIndex));
        if (binaryDataFlag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("binaryDataFlag", binaryDataFlag));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String offerId, BigDecimal loanAmount, BigDecimal tenor, String clientDetails, String nextStartIndex, Boolean binaryDataFlag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(Async)");
        }
        // verify the required parameter 'offerId' is set
        if (offerId == null) {
            throw new ApiException("Missing the required parameter 'offerId' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(Async)");
        }
        // verify the required parameter 'loanAmount' is set
        if (loanAmount == null) {
            throw new ApiException("Missing the required parameter 'loanAmount' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(Async)");
        }
        // verify the required parameter 'tenor' is set
        if (tenor == null) {
            throw new ApiException("Missing the required parameter 'tenor' when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesCall(authorization, uuid, accept, clientId, offerId, loanAmount, tenor, clientDetails, nextStartIndex, binaryDataFlag, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * To allow customers to view the payment breakdown details.
     * This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param loanAmount Loan amount for easy payment plan booking. (required)
     * @param tenor Tenure of loan in months (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param nextStartIndex In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     * @param binaryDataFlag This refer to the flag in case of binary file is require. (optional)
     * @return RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(String authorization, String uuid, String accept, String clientId, String offerId, BigDecimal loanAmount, BigDecimal tenor, String clientDetails, String nextStartIndex, Boolean binaryDataFlag) throws ApiException {
        ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse> resp = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesWithHttpInfo(authorization, uuid, accept, clientId, offerId, loanAmount, tenor, clientDetails, nextStartIndex, binaryDataFlag);
        return resp.getData();
    }

    /**
     * To allow customers to view the payment breakdown details.
     * This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param loanAmount Loan amount for easy payment plan booking. (required)
     * @param tenor Tenure of loan in months (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param nextStartIndex In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     * @param binaryDataFlag This refer to the flag in case of binary file is require. (optional)
     * @return ApiResponse&lt;RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse> retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesWithHttpInfo(String authorization, String uuid, String accept, String clientId, String offerId, BigDecimal loanAmount, BigDecimal tenor, String clientDetails, String nextStartIndex, Boolean binaryDataFlag) throws ApiException {
        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesValidateBeforeCall(authorization, uuid, accept, clientId, offerId, loanAmount, tenor, clientDetails, nextStartIndex, binaryDataFlag, null, null);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * To allow customers to view the payment breakdown details. (asynchronously)
     * This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param offerId This Refers to the unique id for the Pre login offer. (required)
     * @param loanAmount Loan amount for easy payment plan booking. (required)
     * @param tenor Tenure of loan in months (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param nextStartIndex In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     * @param binaryDataFlag This refer to the flag in case of binary file is require. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsync(String authorization, String uuid, String accept, String clientId, String offerId, BigDecimal loanAmount, BigDecimal tenor, String clientDetails, String nextStartIndex, Boolean binaryDataFlag, final ApiCallback<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesValidateBeforeCall(authorization, uuid, accept, clientId, offerId, loanAmount, tenor, clientDetails, nextStartIndex, binaryDataFlag, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCreditChargeCardCorporateCardsCashLimit
     * @param body UpdateCreditChargeCardCorporateCardsCashLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCreditChargeCardCorporateCardsCashLimitCall(UpdateCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/cashLimit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCreditChargeCardCorporateCardsCashLimitValidateBeforeCall(UpdateCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateCreditChargeCardCorporateCardsCashLimit(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCreditChargeCardCorporateCardsCashLimitCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to update the corporate card cash limit
     * This API is used to update the corporate card cash limit
     * @param body UpdateCreditChargeCardCorporateCardsCashLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCreditChargeCardCorporateCardsCashLimit(UpdateCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        updateCreditChargeCardCorporateCardsCashLimitWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
    }

    /**
     * This API is used to update the corporate card cash limit
     * This API is used to update the corporate card cash limit
     * @param body UpdateCreditChargeCardCorporateCardsCashLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCreditChargeCardCorporateCardsCashLimitWithHttpInfo(UpdateCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = updateCreditChargeCardCorporateCardsCashLimitValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API is used to update the corporate card cash limit (asynchronously)
     * This API is used to update the corporate card cash limit
     * @param body UpdateCreditChargeCardCorporateCardsCashLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCreditChargeCardCorporateCardsCashLimitAsync(UpdateCreditChargeCardCorporateCardsCashLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCreditChargeCardCorporateCardsCashLimitValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateCreditChargeCardCorporateCardsCreditLimit
     * @param body UpdateCreditChargeCardCorporateCardsCreditLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCreditChargeCardCorporateCardsCreditLimitCall(UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/creditLimit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCreditChargeCardCorporateCardsCreditLimitValidateBeforeCall(UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCreditChargeCardCorporateCardsCreditLimit(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateCreditChargeCardCorporateCardsCreditLimit(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateCreditChargeCardCorporateCardsCreditLimit(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateCreditChargeCardCorporateCardsCreditLimit(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateCreditChargeCardCorporateCardsCreditLimit(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateCreditChargeCardCorporateCardsCreditLimit(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCreditChargeCardCorporateCardsCreditLimitCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to update the corportate card credit limit
     * This API is used to update the corportate card credit limit
     * @param body UpdateCreditChargeCardCorporateCardsCreditLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return UpdateCreditChargeCardCorporateCardsCreditLimitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateCreditChargeCardCorporateCardsCreditLimitResponse updateCreditChargeCardCorporateCardsCreditLimit(UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        ApiResponse<UpdateCreditChargeCardCorporateCardsCreditLimitResponse> resp = updateCreditChargeCardCorporateCardsCreditLimitWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
        return resp.getData();
    }

    /**
     * This API is used to update the corportate card credit limit
     * This API is used to update the corportate card credit limit
     * @param body UpdateCreditChargeCardCorporateCardsCreditLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;UpdateCreditChargeCardCorporateCardsCreditLimitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateCreditChargeCardCorporateCardsCreditLimitResponse> updateCreditChargeCardCorporateCardsCreditLimitWithHttpInfo(UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = updateCreditChargeCardCorporateCardsCreditLimitValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<UpdateCreditChargeCardCorporateCardsCreditLimitResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is used to update the corportate card credit limit (asynchronously)
     * This API is used to update the corportate card credit limit
     * @param body UpdateCreditChargeCardCorporateCardsCreditLimitRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response. (optional)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCreditChargeCardCorporateCardsCreditLimitAsync(UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, String clientDetails, final ApiCallback<UpdateCreditChargeCardCorporateCardsCreditLimitResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCreditChargeCardCorporateCardsCreditLimitValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateCreditChargeCardCorporateCardsCreditLimitResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen
     * @param body UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenCall(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/lostOrStolen";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenValidateBeforeCall(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is to report lost or stolen card and to apply for Replacement
     * This API is to report lost or stolen card and to apply for Replacement
     * @param body UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        ApiResponse<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse> resp = updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
        return resp.getData();
    }

    /**
     * This API is to report lost or stolen card and to apply for Replacement
     * This API is to report lost or stolen card and to apply for Replacement
     * @param body UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse> updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenWithHttpInfo(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is to report lost or stolen card and to apply for Replacement (asynchronously)
     * This API is to report lost or stolen card and to apply for Replacement
     * @param body UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenAsync(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ApiCallback<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl
     * @param body UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlCall(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/partner/v1/creditChargeCard/corporateCards/spendControl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlValidateBeforeCall(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl(Async)");
        }
        
        com.squareup.okhttp.Call call = updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API will help corporate user to update purchases for specific merchants coming in the API request
     * This API will help corporate user to update purchases for specific merchants coming in the API request
     * @param body UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
    }

    /**
     * This API will help corporate user to update purchases for specific merchants coming in the API request
     * This API will help corporate user to update purchases for specific merchants coming in the API request
     * @param body UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlWithHttpInfo(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API will help corporate user to update purchases for specific merchants coming in the API request (asynchronously)
     * This API will help corporate user to update purchases for specific merchants coming in the API request
     * @param body UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlAsync(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1CardsCardIdLimitsAndEnrollmentsPut
     * @param body CardsLimitsAndEnrollmentsUpdateRequest (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Card Id in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdLimitsAndEnrollmentsPutCall(CardsLimitsAndEnrollmentsUpdateRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/limitsAndEnrollments"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdLimitsAndEnrollmentsPutValidateBeforeCall(CardsLimitsAndEnrollmentsUpdateRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CardsCardIdLimitsAndEnrollmentsPut(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdLimitsAndEnrollmentsPut(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCardIdLimitsAndEnrollmentsPut(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdLimitsAndEnrollmentsPut(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CardsCardIdLimitsAndEnrollmentsPut(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdLimitsAndEnrollmentsPut(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdLimitsAndEnrollmentsPut(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdLimitsAndEnrollmentsPutCall(body, uuid, accept, clientId, contentType, authorization, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enroll for Transaction Limit Setup
     * This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
     * @param body CardsLimitsAndEnrollmentsUpdateRequest (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Card Id in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1CardsCardIdLimitsAndEnrollmentsPut(CardsLimitsAndEnrollmentsUpdateRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, String clientDetails) throws ApiException {
        v1CardsCardIdLimitsAndEnrollmentsPutWithHttpInfo(body, uuid, accept, clientId, contentType, authorization, cardId, clientDetails);
    }

    /**
     * Enroll for Transaction Limit Setup
     * This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
     * @param body CardsLimitsAndEnrollmentsUpdateRequest (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Card Id in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1CardsCardIdLimitsAndEnrollmentsPutWithHttpInfo(CardsLimitsAndEnrollmentsUpdateRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdLimitsAndEnrollmentsPutValidateBeforeCall(body, uuid, accept, clientId, contentType, authorization, cardId, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enroll for Transaction Limit Setup (asynchronously)
     * This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
     * @param body CardsLimitsAndEnrollmentsUpdateRequest (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param cardId Card Id in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdLimitsAndEnrollmentsPutAsync(CardsLimitsAndEnrollmentsUpdateRequest body, String uuid, String accept, String clientId, String contentType, String authorization, String cardId, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdLimitsAndEnrollmentsPutValidateBeforeCall(body, uuid, accept, clientId, contentType, authorization, cardId, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1CardsCardIdMultiCurrencyAccountsDelete
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer card identifier in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdMultiCurrencyAccountsDeleteCall(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/multiCurrencyAccounts"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdMultiCurrencyAccountsDeleteValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdMultiCurrencyAccountsDeleteCall(authorization, uuid, accept, clientId, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer card identifier in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1CardsCardIdMultiCurrencyAccountsDelete(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails) throws ApiException {
        v1CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo(authorization, uuid, accept, clientId, cardId, clientDetails);
    }

    /**
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer card identifier in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdMultiCurrencyAccountsDeleteValidateBeforeCall(authorization, uuid, accept, clientId, cardId, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account (asynchronously)
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer card identifier in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdMultiCurrencyAccountsDeleteAsync(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdMultiCurrencyAccountsDeleteValidateBeforeCall(authorization, uuid, accept, clientId, cardId, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost
     * @param body MultiCurrencyAccountEnrollmentWithCurrencyRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostCall(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/multiCurrencyAccounts/enrollments/currency"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostValidateBeforeCall(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is to generate/enroll new FCY Accounts to Multi Currency Account
     * This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
     * @param body MultiCurrencyAccountEnrollmentWithCurrencyRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return MultiCurrencyAccountEnrollmentWithCurrencyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiCurrencyAccountEnrollmentWithCurrencyResponse v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> resp = v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
        return resp.getData();
    }

    /**
     * This API is to generate/enroll new FCY Accounts to Multi Currency Account
     * This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
     * @param body MultiCurrencyAccountEnrollmentWithCurrencyRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;MultiCurrencyAccountEnrollmentWithCurrencyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostWithHttpInfo(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEnrollmentWithCurrencyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is to generate/enroll new FCY Accounts to Multi Currency Account (asynchronously)
     * This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
     * @param body MultiCurrencyAccountEnrollmentWithCurrencyRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostAsync(MultiCurrencyAccountEnrollmentWithCurrencyRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ApiCallback<MultiCurrencyAccountEnrollmentWithCurrencyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEnrollmentWithCurrencyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost
     * @param body MultiCurrencyAccountEnrollmentRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdMultiCurrencyAccountsEnrollmentsPostCall(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/multiCurrencyAccounts/enrollments"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdMultiCurrencyAccountsEnrollmentsPostValidateBeforeCall(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdMultiCurrencyAccountsEnrollmentsPostCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * @param body MultiCurrencyAccountEnrollmentRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return MultiCurrencyAccountEnrollmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiCurrencyAccountEnrollmentResponse v1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        ApiResponse<MultiCurrencyAccountEnrollmentResponse> resp = v1CardsCardIdMultiCurrencyAccountsEnrollmentsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
        return resp.getData();
    }

    /**
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * @param body MultiCurrencyAccountEnrollmentRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;MultiCurrencyAccountEnrollmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiCurrencyAccountEnrollmentResponse> v1CardsCardIdMultiCurrencyAccountsEnrollmentsPostWithHttpInfo(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdMultiCurrencyAccountsEnrollmentsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEnrollmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account (asynchronously)
     * This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
     * @param body MultiCurrencyAccountEnrollmentRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdMultiCurrencyAccountsEnrollmentsPostAsync(MultiCurrencyAccountEnrollmentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ApiCallback<MultiCurrencyAccountEnrollmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdMultiCurrencyAccountsEnrollmentsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEnrollmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CardsCardIdOverseasTravelPlansDelete
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdOverseasTravelPlansDeleteCall(String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/overseasTravelPlans"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdOverseasTravelPlansDeleteValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdOverseasTravelPlansDelete(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdOverseasTravelPlansDelete(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCardIdOverseasTravelPlansDelete(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdOverseasTravelPlansDelete(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CardsCardIdOverseasTravelPlansDelete(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdOverseasTravelPlansDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdOverseasTravelPlansDeleteCall(authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API enables customer to delete an existing travel plan 
     * This API enables customer to delete an existing travel plan 
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1CardsCardIdOverseasTravelPlansDelete(String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        v1CardsCardIdOverseasTravelPlansDeleteWithHttpInfo(authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
    }

    /**
     * This API enables customer to delete an existing travel plan 
     * This API enables customer to delete an existing travel plan 
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1CardsCardIdOverseasTravelPlansDeleteWithHttpInfo(String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdOverseasTravelPlansDeleteValidateBeforeCall(authorization, uuid, accept, clientId, contentType, cardId, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API enables customer to delete an existing travel plan  (asynchronously)
     * This API enables customer to delete an existing travel plan 
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdOverseasTravelPlansDeleteAsync(String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdOverseasTravelPlansDeleteValidateBeforeCall(authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1CardsCardIdOverseasTravelPlansPost
     * @param body OverseasTravelPlanAddRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdOverseasTravelPlansPostCall(OverseasTravelPlanAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/overseasTravelPlans"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdOverseasTravelPlansPostValidateBeforeCall(OverseasTravelPlanAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CardsCardIdOverseasTravelPlansPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdOverseasTravelPlansPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdOverseasTravelPlansPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCardIdOverseasTravelPlansPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdOverseasTravelPlansPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CardsCardIdOverseasTravelPlansPost(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdOverseasTravelPlansPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdOverseasTravelPlansPostCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API enables customer to add a new travel plan
     * This API enables customer to add a new travel plan
     * @param body OverseasTravelPlanAddRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1CardsCardIdOverseasTravelPlansPost(OverseasTravelPlanAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        v1CardsCardIdOverseasTravelPlansPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
    }

    /**
     * This API enables customer to add a new travel plan
     * This API enables customer to add a new travel plan
     * @param body OverseasTravelPlanAddRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1CardsCardIdOverseasTravelPlansPostWithHttpInfo(OverseasTravelPlanAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdOverseasTravelPlansPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API enables customer to add a new travel plan (asynchronously)
     * This API enables customer to add a new travel plan
     * @param body OverseasTravelPlanAddRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdOverseasTravelPlansPostAsync(OverseasTravelPlanAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdOverseasTravelPlansPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1CardsCardIdOverseasTravelPlansPut
     * @param body OverseasTravelPlanUpdateRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdOverseasTravelPlansPutCall(OverseasTravelPlanUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/overseasTravelPlans"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCardIdOverseasTravelPlansPutValidateBeforeCall(OverseasTravelPlanUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CardsCardIdOverseasTravelPlansPut(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCardIdOverseasTravelPlansPut(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCardIdOverseasTravelPlansPut(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCardIdOverseasTravelPlansPut(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCardIdOverseasTravelPlansPut(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CardsCardIdOverseasTravelPlansPut(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v1CardsCardIdOverseasTravelPlansPut(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCardIdOverseasTravelPlansPutCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API enables customer to update an existing travel plan
     * This API enables customer to update an existing travel plan
     * @param body OverseasTravelPlanUpdateRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1CardsCardIdOverseasTravelPlansPut(OverseasTravelPlanUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        v1CardsCardIdOverseasTravelPlansPutWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
    }

    /**
     * This API enables customer to update an existing travel plan
     * This API enables customer to update an existing travel plan
     * @param body OverseasTravelPlanUpdateRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1CardsCardIdOverseasTravelPlansPutWithHttpInfo(OverseasTravelPlanUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCardIdOverseasTravelPlansPutValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API enables customer to update an existing travel plan (asynchronously)
     * This API enables customer to update an existing travel plan
     * @param body OverseasTravelPlanUpdateRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param cardId The card id  in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCardIdOverseasTravelPlansPutAsync(OverseasTravelPlanUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String cardId, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCardIdOverseasTravelPlansPutValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1CardsCvvVerificationPost
     * @param body CvvVerificationRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsCvvVerificationPostCall(CvvVerificationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/cards/cvv/verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsCvvVerificationPostValidateBeforeCall(CvvVerificationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1CardsCvvVerificationPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsCvvVerificationPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsCvvVerificationPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsCvvVerificationPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsCvvVerificationPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1CardsCvvVerificationPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsCvvVerificationPostCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Verify CVV for Debit or Credit Card
     * This API is used to verify the CVV of a debit or a credit card.
     * @param body CvvVerificationRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1CardsCvvVerificationPost(CvvVerificationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        v1CardsCvvVerificationPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
    }

    /**
     * Verify CVV for Debit or Credit Card
     * This API is used to verify the CVV of a debit or a credit card.
     * @param body CvvVerificationRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1CardsCvvVerificationPostWithHttpInfo(CvvVerificationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsCvvVerificationPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * Verify CVV for Debit or Credit Card (asynchronously)
     * This API is used to verify the CVV of a debit or a credit card.
     * @param body CvvVerificationRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsCvvVerificationPostAsync(CvvVerificationRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsCvvVerificationPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1CardsMultiCurrencyAccountsEnrollmentEligibilityGet
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsMultiCurrencyAccountsEnrollmentEligibilityGetCall(String authorization, String uuid, String accept, String clientId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/cards/multiCurrencyAccounts/enrollment/eligibility";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsMultiCurrencyAccountsEnrollmentEligibilityGetValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsMultiCurrencyAccountsEnrollmentEligibilityGet(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsMultiCurrencyAccountsEnrollmentEligibilityGet(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsMultiCurrencyAccountsEnrollmentEligibilityGet(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsMultiCurrencyAccountsEnrollmentEligibilityGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsMultiCurrencyAccountsEnrollmentEligibilityGetCall(authorization, uuid, accept, clientId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
     * To get the needed account and currency details for Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return MultiCurrencyAccountEligibilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiCurrencyAccountEligibilityResponse v1CardsMultiCurrencyAccountsEnrollmentEligibilityGet(String authorization, String uuid, String accept, String clientId, String clientDetails) throws ApiException {
        ApiResponse<MultiCurrencyAccountEligibilityResponse> resp = v1CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo(authorization, uuid, accept, clientId, clientDetails);
        return resp.getData();
    }

    /**
     * This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
     * To get the needed account and currency details for Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;MultiCurrencyAccountEligibilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiCurrencyAccountEligibilityResponse> v1CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo(String authorization, String uuid, String accept, String clientId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsMultiCurrencyAccountsEnrollmentEligibilityGetValidateBeforeCall(authorization, uuid, accept, clientId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEligibilityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account (asynchronously)
     * To get the needed account and currency details for Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsync(String authorization, String uuid, String accept, String clientId, String clientDetails, final ApiCallback<MultiCurrencyAccountEligibilityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsMultiCurrencyAccountsEnrollmentEligibilityGetValidateBeforeCall(authorization, uuid, accept, clientId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEligibilityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1CardsOverseasTravelPlansGet
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param cardId The card id  in encrypted format (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1CardsOverseasTravelPlansGetCall(String authorization, String uuid, String accept, String clientId, String clientDetails, String cardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/cards/overseasTravelPlans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cardId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cardId", cardId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1CardsOverseasTravelPlansGetValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String clientDetails, String cardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1CardsOverseasTravelPlansGet(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1CardsOverseasTravelPlansGet(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1CardsOverseasTravelPlansGet(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1CardsOverseasTravelPlansGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v1CardsOverseasTravelPlansGetCall(authorization, uuid, accept, clientId, clientDetails, cardId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API enables customer to inquire current travel plan
     * This API enables customer to inquire current travel plan
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param cardId The card id  in encrypted format (optional)
     * @return OverseasTravelPlanInquiryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OverseasTravelPlanInquiryResponse v1CardsOverseasTravelPlansGet(String authorization, String uuid, String accept, String clientId, String clientDetails, String cardId) throws ApiException {
        ApiResponse<OverseasTravelPlanInquiryResponse> resp = v1CardsOverseasTravelPlansGetWithHttpInfo(authorization, uuid, accept, clientId, clientDetails, cardId);
        return resp.getData();
    }

    /**
     * This API enables customer to inquire current travel plan
     * This API enables customer to inquire current travel plan
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param cardId The card id  in encrypted format (optional)
     * @return ApiResponse&lt;OverseasTravelPlanInquiryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OverseasTravelPlanInquiryResponse> v1CardsOverseasTravelPlansGetWithHttpInfo(String authorization, String uuid, String accept, String clientId, String clientDetails, String cardId) throws ApiException {
        com.squareup.okhttp.Call call = v1CardsOverseasTravelPlansGetValidateBeforeCall(authorization, uuid, accept, clientId, clientDetails, cardId, null, null);
        Type localVarReturnType = new TypeToken<OverseasTravelPlanInquiryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API enables customer to inquire current travel plan (asynchronously)
     * This API enables customer to inquire current travel plan
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param cardId The card id  in encrypted format (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1CardsOverseasTravelPlansGetAsync(String authorization, String uuid, String accept, String clientId, String clientDetails, String cardId, final ApiCallback<OverseasTravelPlanInquiryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1CardsOverseasTravelPlansGetValidateBeforeCall(authorization, uuid, accept, clientId, clientDetails, cardId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OverseasTravelPlanInquiryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v2CardsCardIdMultiCurrencyAccountsDelete
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer card identifier in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2CardsCardIdMultiCurrencyAccountsDeleteCall(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/cards/{cardId}/multiCurrencyAccounts"
            .replaceAll("\\{" + "cardId" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2CardsCardIdMultiCurrencyAccountsDeleteValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v2CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v2CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v2CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v2CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling v2CardsCardIdMultiCurrencyAccountsDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = v2CardsCardIdMultiCurrencyAccountsDeleteCall(authorization, uuid, accept, clientId, cardId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer card identifier in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v2CardsCardIdMultiCurrencyAccountsDelete(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails) throws ApiException {
        v2CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo(authorization, uuid, accept, clientId, cardId, clientDetails);
    }

    /**
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer card identifier in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v2CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v2CardsCardIdMultiCurrencyAccountsDeleteValidateBeforeCall(authorization, uuid, accept, clientId, cardId, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account (asynchronously)
     * This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param cardId The customer card identifier in encrypted format (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2CardsCardIdMultiCurrencyAccountsDeleteAsync(String authorization, String uuid, String accept, String clientId, String cardId, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2CardsCardIdMultiCurrencyAccountsDeleteValidateBeforeCall(authorization, uuid, accept, clientId, cardId, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v2CardsMultiCurrencyAccountsEnrollmentEligibilityGet
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v2CardsMultiCurrencyAccountsEnrollmentEligibilityGetCall(String authorization, String uuid, String accept, String clientId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/cards/multiCurrencyAccounts/enrollment/eligibility";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v2CardsMultiCurrencyAccountsEnrollmentEligibilityGetValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v2CardsMultiCurrencyAccountsEnrollmentEligibilityGet(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v2CardsMultiCurrencyAccountsEnrollmentEligibilityGet(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v2CardsMultiCurrencyAccountsEnrollmentEligibilityGet(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v2CardsMultiCurrencyAccountsEnrollmentEligibilityGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v2CardsMultiCurrencyAccountsEnrollmentEligibilityGetCall(authorization, uuid, accept, clientId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
     * To get the needed account and currency details for Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return MultiCurrencyAccountEligibilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiCurrencyAccountEligibilityResponse v2CardsMultiCurrencyAccountsEnrollmentEligibilityGet(String authorization, String uuid, String accept, String clientId, String clientDetails) throws ApiException {
        ApiResponse<MultiCurrencyAccountEligibilityResponse> resp = v2CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo(authorization, uuid, accept, clientId, clientDetails);
        return resp.getData();
    }

    /**
     * This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
     * To get the needed account and currency details for Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;MultiCurrencyAccountEligibilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiCurrencyAccountEligibilityResponse> v2CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo(String authorization, String uuid, String accept, String clientId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = v2CardsMultiCurrencyAccountsEnrollmentEligibilityGetValidateBeforeCall(authorization, uuid, accept, clientId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEligibilityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account (asynchronously)
     * To get the needed account and currency details for Multi Currency Account
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v2CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsync(String authorization, String uuid, String accept, String clientId, String clientDetails, final ApiCallback<MultiCurrencyAccountEligibilityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v2CardsMultiCurrencyAccountsEnrollmentEligibilityGetValidateBeforeCall(authorization, uuid, accept, clientId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiCurrencyAccountEligibilityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
