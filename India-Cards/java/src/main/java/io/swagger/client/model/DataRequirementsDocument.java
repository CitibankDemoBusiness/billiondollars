/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DataRequirementsDocument
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class DataRequirementsDocument {
  /**
   * Type of document
   */
  @JsonAdapter(ItemEnum.Adapter.class)
  public enum ItemEnum {
    BANK_STATEMENT("bank_statement"),
    BUSINESS_REGISTRATION_CERTIFICATE("business_registration_certificate"),
    COMMISION_STATEMENT("commision_statement"),
    DIVIDEND_STATEMENT("dividend_statement"),
    EMPLOYMENT_CONFIRMATION_LETTER("employment_confirmation_letter"),
    EPF_STATEMENT("epf_statement"),
    FORM_24("form_24"),
    FORM_49("form_49"),
    FORM_9("form_9"),
    IDENTITY_CARD_PASSPORT("identity_card_passport"),
    INTEREST_STATEMENT("interest_statement"),
    OTHERS("others"),
    SALARY_SLIP("salary_slip"),
    TAX_RECEIPT("tax_receipt"),
    TAX_RETURNS("tax_returns"),
    TRAVEL_VISA("travel_visa"),
    VALID_WORK_PERMIT("valid_work_permit");

    private String value;

    ItemEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ItemEnum fromValue(String text) {
      for (ItemEnum b : ItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ItemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ItemEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("item")
  private ItemEnum item = null;

  @SerializedName("remark")
  private String remark = null;

  public DataRequirementsDocument item(ItemEnum item) {
    this.item = item;
    return this;
  }

   /**
   * Type of document
   * @return item
  **/
  @Schema(example = "salary_slip", description = "Type of document")
  public ItemEnum getItem() {
    return item;
  }

  public void setItem(ItemEnum item) {
    this.item = item;
  }

  public DataRequirementsDocument remark(String remark) {
    this.remark = remark;
    return this;
  }

   /**
   * Additional note for the document
   * @return remark
  **/
  @Schema(example = "To submit latest 3 months salary", description = "Additional note for the document")
  public String getRemark() {
    return remark;
  }

  public void setRemark(String remark) {
    this.remark = remark;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataRequirementsDocument dataRequirementsDocument = (DataRequirementsDocument) o;
    return Objects.equals(this.item, dataRequirementsDocument.item) &&
        Objects.equals(this.remark, dataRequirementsDocument.remark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(item, remark);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataRequirementsDocument {\n");
    
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
