/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * LoanAccount
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class LoanAccount {
  @SerializedName("transactionDescription")
  private String transactionDescription = null;

  @SerializedName("loanReferenceNumber")
  private String loanReferenceNumber = null;

  @SerializedName("loanAmount")
  private Double loanAmount = null;

  @SerializedName("loanStartDate")
  private LocalDate loanStartDate = null;

  @SerializedName("loanTenure")
  private Integer loanTenure = null;

  @SerializedName("installmentAmount")
  private Double installmentAmount = null;

  @SerializedName("processingChargeAmount")
  private Double processingChargeAmount = null;

  @SerializedName("annualPercentageRate")
  private Double annualPercentageRate = null;

  @SerializedName("effectiveInterestRate")
  private Double effectiveInterestRate = null;

  @SerializedName("installmentCycle")
  private Integer installmentCycle = null;

  @SerializedName("remainingLoanAmount")
  private Double remainingLoanAmount = null;

  @SerializedName("loanRemainingTermNumber")
  private Integer loanRemainingTermNumber = null;

  public LoanAccount transactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
    return this;
  }

   /**
   * Transaction Description
   * @return transactionDescription
  **/
  @Schema(example = "Quck Cash", description = "Transaction Description")
  public String getTransactionDescription() {
    return transactionDescription;
  }

  public void setTransactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
  }

  public LoanAccount loanReferenceNumber(String loanReferenceNumber) {
    this.loanReferenceNumber = loanReferenceNumber;
    return this;
  }

   /**
   * Unique refrence number associated with the loan.
   * @return loanReferenceNumber
  **/
  @Schema(example = "ASDASD2323JYt", description = "Unique refrence number associated with the loan.")
  public String getLoanReferenceNumber() {
    return loanReferenceNumber;
  }

  public void setLoanReferenceNumber(String loanReferenceNumber) {
    this.loanReferenceNumber = loanReferenceNumber;
  }

  public LoanAccount loanAmount(Double loanAmount) {
    this.loanAmount = loanAmount;
    return this;
  }

   /**
   * Loan Amount
   * @return loanAmount
  **/
  @Schema(example = "20000.0", description = "Loan Amount")
  public Double getLoanAmount() {
    return loanAmount;
  }

  public void setLoanAmount(Double loanAmount) {
    this.loanAmount = loanAmount;
  }

  public LoanAccount loanStartDate(LocalDate loanStartDate) {
    this.loanStartDate = loanStartDate;
    return this;
  }

   /**
   * Start date of the loan.Date in ISO 8601, YYYY-MM-DD format
   * @return loanStartDate
  **/
  @Schema(example = "Wed Oct 05 00:00:00 UTC 2016", description = "Start date of the loan.Date in ISO 8601, YYYY-MM-DD format")
  public LocalDate getLoanStartDate() {
    return loanStartDate;
  }

  public void setLoanStartDate(LocalDate loanStartDate) {
    this.loanStartDate = loanStartDate;
  }

  public LoanAccount loanTenure(Integer loanTenure) {
    this.loanTenure = loanTenure;
    return this;
  }

   /**
   * Tenure of loan against card. It is considered in terms of number of months.
   * @return loanTenure
  **/
  @Schema(example = "60", description = "Tenure of loan against card. It is considered in terms of number of months.")
  public Integer getLoanTenure() {
    return loanTenure;
  }

  public void setLoanTenure(Integer loanTenure) {
    this.loanTenure = loanTenure;
  }

  public LoanAccount installmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
    return this;
  }

   /**
   * Amount of money a borrower has to pay as installment.
   * @return installmentAmount
  **/
  @Schema(example = "500.0", description = "Amount of money a borrower has to pay as installment.")
  public Double getInstallmentAmount() {
    return installmentAmount;
  }

  public void setInstallmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
  }

  public LoanAccount processingChargeAmount(Double processingChargeAmount) {
    this.processingChargeAmount = processingChargeAmount;
    return this;
  }

   /**
   * Charges levied on applicant by the bank to process the loan.
   * @return processingChargeAmount
  **/
  @Schema(example = "50.0", description = "Charges levied on applicant by the bank to process the loan.")
  public Double getProcessingChargeAmount() {
    return processingChargeAmount;
  }

  public void setProcessingChargeAmount(Double processingChargeAmount) {
    this.processingChargeAmount = processingChargeAmount;
  }

  public LoanAccount annualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
    return this;
  }

   /**
   * Annual Percentage Rate
   * @return annualPercentageRate
  **/
  @Schema(example = "5.6", description = "Annual Percentage Rate")
  public Double getAnnualPercentageRate() {
    return annualPercentageRate;
  }

  public void setAnnualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
  }

  public LoanAccount effectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
    return this;
  }

   /**
   * Effective Percentage Rate
   * @return effectiveInterestRate
  **/
  @Schema(example = "9.2", description = "Effective Percentage Rate")
  public Double getEffectiveInterestRate() {
    return effectiveInterestRate;
  }

  public void setEffectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
  }

  public LoanAccount installmentCycle(Integer installmentCycle) {
    this.installmentCycle = installmentCycle;
    return this;
  }

   /**
   * Intallment Cycle
   * @return installmentCycle
  **/
  @Schema(example = "4", description = "Intallment Cycle")
  public Integer getInstallmentCycle() {
    return installmentCycle;
  }

  public void setInstallmentCycle(Integer installmentCycle) {
    this.installmentCycle = installmentCycle;
  }

  public LoanAccount remainingLoanAmount(Double remainingLoanAmount) {
    this.remainingLoanAmount = remainingLoanAmount;
    return this;
  }

   /**
   * Remaining Loan Amount
   * @return remainingLoanAmount
  **/
  @Schema(example = "15000.0", required = true, description = "Remaining Loan Amount")
  public Double getRemainingLoanAmount() {
    return remainingLoanAmount;
  }

  public void setRemainingLoanAmount(Double remainingLoanAmount) {
    this.remainingLoanAmount = remainingLoanAmount;
  }

  public LoanAccount loanRemainingTermNumber(Integer loanRemainingTermNumber) {
    this.loanRemainingTermNumber = loanRemainingTermNumber;
    return this;
  }

   /**
   * Remaining term of installment loan
   * @return loanRemainingTermNumber
  **/
  @Schema(example = "20", required = true, description = "Remaining term of installment loan")
  public Integer getLoanRemainingTermNumber() {
    return loanRemainingTermNumber;
  }

  public void setLoanRemainingTermNumber(Integer loanRemainingTermNumber) {
    this.loanRemainingTermNumber = loanRemainingTermNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanAccount loanAccount = (LoanAccount) o;
    return Objects.equals(this.transactionDescription, loanAccount.transactionDescription) &&
        Objects.equals(this.loanReferenceNumber, loanAccount.loanReferenceNumber) &&
        Objects.equals(this.loanAmount, loanAccount.loanAmount) &&
        Objects.equals(this.loanStartDate, loanAccount.loanStartDate) &&
        Objects.equals(this.loanTenure, loanAccount.loanTenure) &&
        Objects.equals(this.installmentAmount, loanAccount.installmentAmount) &&
        Objects.equals(this.processingChargeAmount, loanAccount.processingChargeAmount) &&
        Objects.equals(this.annualPercentageRate, loanAccount.annualPercentageRate) &&
        Objects.equals(this.effectiveInterestRate, loanAccount.effectiveInterestRate) &&
        Objects.equals(this.installmentCycle, loanAccount.installmentCycle) &&
        Objects.equals(this.remainingLoanAmount, loanAccount.remainingLoanAmount) &&
        Objects.equals(this.loanRemainingTermNumber, loanAccount.loanRemainingTermNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionDescription, loanReferenceNumber, loanAmount, loanStartDate, loanTenure, installmentAmount, processingChargeAmount, annualPercentageRate, effectiveInterestRate, installmentCycle, remainingLoanAmount, loanRemainingTermNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanAccount {\n");
    
    sb.append("    transactionDescription: ").append(toIndentedString(transactionDescription)).append("\n");
    sb.append("    loanReferenceNumber: ").append(toIndentedString(loanReferenceNumber)).append("\n");
    sb.append("    loanAmount: ").append(toIndentedString(loanAmount)).append("\n");
    sb.append("    loanStartDate: ").append(toIndentedString(loanStartDate)).append("\n");
    sb.append("    loanTenure: ").append(toIndentedString(loanTenure)).append("\n");
    sb.append("    installmentAmount: ").append(toIndentedString(installmentAmount)).append("\n");
    sb.append("    processingChargeAmount: ").append(toIndentedString(processingChargeAmount)).append("\n");
    sb.append("    annualPercentageRate: ").append(toIndentedString(annualPercentageRate)).append("\n");
    sb.append("    effectiveInterestRate: ").append(toIndentedString(effectiveInterestRate)).append("\n");
    sb.append("    installmentCycle: ").append(toIndentedString(installmentCycle)).append("\n");
    sb.append("    remainingLoanAmount: ").append(toIndentedString(remainingLoanAmount)).append("\n");
    sb.append("    loanRemainingTermNumber: ").append(toIndentedString(loanRemainingTermNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
