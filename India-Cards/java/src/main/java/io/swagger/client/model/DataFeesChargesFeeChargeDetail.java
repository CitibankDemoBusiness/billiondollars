/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DataFeesChargesFeeChargeDetail
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class DataFeesChargesFeeChargeDetail {
  /**
   * Gets or Sets item
   */
  @JsonAdapter(ItemEnum.Adapter.class)
  public enum ItemEnum {
    ACTUAL_MONTHLY_MANAGEMENT("actual_monthly_management"),
    ANNUAL("annual"),
    ATM_WITHDRAWAL("atm_withdrawal"),
    CARD_REPLACEMENT("card_replacement"),
    CASH_ADVANCE("cash_advance"),
    CASH_WITHDRAWAL("cash_withdrawal"),
    EARLY_SETTLEMENT("early_settlement"),
    FINANCE_CHARGE_CASH_ADVANCE("finance_charge_cash_advance"),
    FINANCE_CHARGE_RETAIL("finance_charge_retail"),
    FIXED_MONTHLY_MANAGEMENT("fixed_monthly_management"),
    LATE_PAYMENT("late_payment"),
    MINIMUM_MONTHLY_PAYMENT("minimum_monthly_payment"),
    OTHERS("others"),
    OVERSEA_TRANSACTION("oversea_transaction"),
    OVERSEA_TRANSACTION_CONVERSION("oversea_transaction_conversion"),
    SALES_DRAFT_RETRIEVAL_COPY("sales_draft_retrieval_copy"),
    SERVICE_TAX("service_tax"),
    STARTER_PACK("starter_pack"),
    STATEMENT_COPY("statement_copy");

    private String value;

    ItemEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ItemEnum fromValue(String text) {
      for (ItemEnum b : ItemEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ItemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ItemEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("item")
  private ItemEnum item = null;

  @SerializedName("chargeable")
  private Boolean chargeable = null;

  @SerializedName("amount")
  private Double amount = null;

  @SerializedName("amount_currency_code")
  private String amountCurrencyCode = "MYR";

  @SerializedName("percentage")
  private Double percentage = null;

  @SerializedName("remark")
  private String remark = null;

  public DataFeesChargesFeeChargeDetail item(ItemEnum item) {
    this.item = item;
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @Schema(required = true, description = "")
  public ItemEnum getItem() {
    return item;
  }

  public void setItem(ItemEnum item) {
    this.item = item;
  }

  public DataFeesChargesFeeChargeDetail chargeable(Boolean chargeable) {
    this.chargeable = chargeable;
    return this;
  }

   /**
   * Indicator of chargeability
   * @return chargeable
  **/
  @Schema(example = "true", description = "Indicator of chargeability")
  public Boolean isChargeable() {
    return chargeable;
  }

  public void setChargeable(Boolean chargeable) {
    this.chargeable = chargeable;
  }

  public DataFeesChargesFeeChargeDetail amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Amount for fee and charge up to two digits decimal
   * @return amount
  **/
  @Schema(example = "50.0", description = "Amount for fee and charge up to two digits decimal")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public DataFeesChargesFeeChargeDetail amountCurrencyCode(String amountCurrencyCode) {
    this.amountCurrencyCode = amountCurrencyCode;
    return this;
  }

   /**
   * ISO-4217 3 characters currency code for fee and charge amount
   * @return amountCurrencyCode
  **/
  @Schema(description = "ISO-4217 3 characters currency code for fee and charge amount")
  public String getAmountCurrencyCode() {
    return amountCurrencyCode;
  }

  public void setAmountCurrencyCode(String amountCurrencyCode) {
    this.amountCurrencyCode = amountCurrencyCode;
  }

  public DataFeesChargesFeeChargeDetail percentage(Double percentage) {
    this.percentage = percentage;
    return this;
  }

   /**
   * Percentage of amount for fee and charge up to two digits decimal
   * @return percentage
  **/
  @Schema(example = "10.5", description = "Percentage of amount for fee and charge up to two digits decimal")
  public Double getPercentage() {
    return percentage;
  }

  public void setPercentage(Double percentage) {
    this.percentage = percentage;
  }

  public DataFeesChargesFeeChargeDetail remark(String remark) {
    this.remark = remark;
    return this;
  }

   /**
   * Additional notes for the fee and charge
   * @return remark
  **/
  @Schema(description = "Additional notes for the fee and charge")
  public String getRemark() {
    return remark;
  }

  public void setRemark(String remark) {
    this.remark = remark;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFeesChargesFeeChargeDetail dataFeesChargesFeeChargeDetail = (DataFeesChargesFeeChargeDetail) o;
    return Objects.equals(this.item, dataFeesChargesFeeChargeDetail.item) &&
        Objects.equals(this.chargeable, dataFeesChargesFeeChargeDetail.chargeable) &&
        Objects.equals(this.amount, dataFeesChargesFeeChargeDetail.amount) &&
        Objects.equals(this.amountCurrencyCode, dataFeesChargesFeeChargeDetail.amountCurrencyCode) &&
        Objects.equals(this.percentage, dataFeesChargesFeeChargeDetail.percentage) &&
        Objects.equals(this.remark, dataFeesChargesFeeChargeDetail.remark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(item, chargeable, amount, amountCurrencyCode, percentage, remark);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFeesChargesFeeChargeDetail {\n");
    
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    chargeable: ").append(toIndentedString(chargeable)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountCurrencyCode: ").append(toIndentedString(amountCurrencyCode)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
