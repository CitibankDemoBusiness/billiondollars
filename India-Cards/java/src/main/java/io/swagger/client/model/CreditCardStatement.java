/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EligibleForEqualPaymentPlan;
import io.swagger.client.model.RewardPoints;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
/**
 * CreditCardStatement
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class CreditCardStatement {
  @SerializedName("statementDate")
  private LocalDate statementDate = null;

  @SerializedName("statementId")
  private String statementId = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("creditLimit")
  private Double creditLimit = null;

  @SerializedName("outstandingBalance")
  private Double outstandingBalance = null;

  @SerializedName("lastStatementBalance")
  private Double lastStatementBalance = null;

  @SerializedName("paymentDueDate")
  private LocalDate paymentDueDate = null;

  @SerializedName("minimumDueAmount")
  private Double minimumDueAmount = null;

  @SerializedName("eligibleForEqualPaymentPlans")
  private List<EligibleForEqualPaymentPlan> eligibleForEqualPaymentPlans = null;

  @SerializedName("rewardPoints")
  private RewardPoints rewardPoints = null;

  public CreditCardStatement statementDate(LocalDate statementDate) {
    this.statementDate = statementDate;
    return this;
  }

   /**
   * The statement date in ISO 8601 format YYYY-MM-DD
   * @return statementDate
  **/
  @Schema(example = "Wed Aug 10 00:00:00 UTC 2016", description = "The statement date in ISO 8601 format YYYY-MM-DD")
  public LocalDate getStatementDate() {
    return statementDate;
  }

  public void setStatementDate(LocalDate statementDate) {
    this.statementDate = statementDate;
  }

  public CreditCardStatement statementId(String statementId) {
    this.statementId = statementId;
    return this;
  }

   /**
   * Unique identifier for the statement
   * @return statementId
  **/
  @Schema(example = "123456789", description = "Unique identifier for the statement")
  public String getStatementId() {
    return statementId;
  }

  public void setStatementId(String statementId) {
    this.statementId = statementId;
  }

  public CreditCardStatement currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code of the statement in ISO 4217 format
   * @return currencyCode
  **/
  @Schema(example = "SGD", description = "The currency code of the statement in ISO 4217 format")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public CreditCardStatement creditLimit(Double creditLimit) {
    this.creditLimit = creditLimit;
    return this;
  }

   /**
   * The maximum amount of credit that extend to a customer
   * @return creditLimit
  **/
  @Schema(example = "12000.25", description = "The maximum amount of credit that extend to a customer")
  public Double getCreditLimit() {
    return creditLimit;
  }

  public void setCreditLimit(Double creditLimit) {
    this.creditLimit = creditLimit;
  }

  public CreditCardStatement outstandingBalance(Double outstandingBalance) {
    this.outstandingBalance = outstandingBalance;
    return this;
  }

   /**
   * Outstanding balance amount on the statement date
   * @return outstandingBalance
  **/
  @Schema(example = "10000.25", description = "Outstanding balance amount on the statement date")
  public Double getOutstandingBalance() {
    return outstandingBalance;
  }

  public void setOutstandingBalance(Double outstandingBalance) {
    this.outstandingBalance = outstandingBalance;
  }

  public CreditCardStatement lastStatementBalance(Double lastStatementBalance) {
    this.lastStatementBalance = lastStatementBalance;
    return this;
  }

   /**
   * The balance on last statement date
   * @return lastStatementBalance
  **/
  @Schema(example = "15000.25", description = "The balance on last statement date")
  public Double getLastStatementBalance() {
    return lastStatementBalance;
  }

  public void setLastStatementBalance(Double lastStatementBalance) {
    this.lastStatementBalance = lastStatementBalance;
  }

  public CreditCardStatement paymentDueDate(LocalDate paymentDueDate) {
    this.paymentDueDate = paymentDueDate;
    return this;
  }

   /**
   * Next payment due date in ISO 8601 date format YYYY-MM-DD
   * @return paymentDueDate
  **/
  @Schema(example = "Mon Dec 05 00:00:00 UTC 2016", description = "Next payment due date in ISO 8601 date format YYYY-MM-DD")
  public LocalDate getPaymentDueDate() {
    return paymentDueDate;
  }

  public void setPaymentDueDate(LocalDate paymentDueDate) {
    this.paymentDueDate = paymentDueDate;
  }

  public CreditCardStatement minimumDueAmount(Double minimumDueAmount) {
    this.minimumDueAmount = minimumDueAmount;
    return this;
  }

   /**
   * Minimum due amount for a payment cycle
   * @return minimumDueAmount
  **/
  @Schema(example = "1500.25", description = "Minimum due amount for a payment cycle")
  public Double getMinimumDueAmount() {
    return minimumDueAmount;
  }

  public void setMinimumDueAmount(Double minimumDueAmount) {
    this.minimumDueAmount = minimumDueAmount;
  }

  public CreditCardStatement eligibleForEqualPaymentPlans(List<EligibleForEqualPaymentPlan> eligibleForEqualPaymentPlans) {
    this.eligibleForEqualPaymentPlans = eligibleForEqualPaymentPlans;
    return this;
  }

  public CreditCardStatement addEligibleForEqualPaymentPlansItem(EligibleForEqualPaymentPlan eligibleForEqualPaymentPlansItem) {
    if (this.eligibleForEqualPaymentPlans == null) {
      this.eligibleForEqualPaymentPlans = new ArrayList<EligibleForEqualPaymentPlan>();
    }
    this.eligibleForEqualPaymentPlans.add(eligibleForEqualPaymentPlansItem);
    return this;
  }

   /**
   * Get eligibleForEqualPaymentPlans
   * @return eligibleForEqualPaymentPlans
  **/
  @Schema(description = "")
  public List<EligibleForEqualPaymentPlan> getEligibleForEqualPaymentPlans() {
    return eligibleForEqualPaymentPlans;
  }

  public void setEligibleForEqualPaymentPlans(List<EligibleForEqualPaymentPlan> eligibleForEqualPaymentPlans) {
    this.eligibleForEqualPaymentPlans = eligibleForEqualPaymentPlans;
  }

  public CreditCardStatement rewardPoints(RewardPoints rewardPoints) {
    this.rewardPoints = rewardPoints;
    return this;
  }

   /**
   * Get rewardPoints
   * @return rewardPoints
  **/
  @Schema(description = "")
  public RewardPoints getRewardPoints() {
    return rewardPoints;
  }

  public void setRewardPoints(RewardPoints rewardPoints) {
    this.rewardPoints = rewardPoints;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditCardStatement creditCardStatement = (CreditCardStatement) o;
    return Objects.equals(this.statementDate, creditCardStatement.statementDate) &&
        Objects.equals(this.statementId, creditCardStatement.statementId) &&
        Objects.equals(this.currencyCode, creditCardStatement.currencyCode) &&
        Objects.equals(this.creditLimit, creditCardStatement.creditLimit) &&
        Objects.equals(this.outstandingBalance, creditCardStatement.outstandingBalance) &&
        Objects.equals(this.lastStatementBalance, creditCardStatement.lastStatementBalance) &&
        Objects.equals(this.paymentDueDate, creditCardStatement.paymentDueDate) &&
        Objects.equals(this.minimumDueAmount, creditCardStatement.minimumDueAmount) &&
        Objects.equals(this.eligibleForEqualPaymentPlans, creditCardStatement.eligibleForEqualPaymentPlans) &&
        Objects.equals(this.rewardPoints, creditCardStatement.rewardPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statementDate, statementId, currencyCode, creditLimit, outstandingBalance, lastStatementBalance, paymentDueDate, minimumDueAmount, eligibleForEqualPaymentPlans, rewardPoints);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditCardStatement {\n");
    
    sb.append("    statementDate: ").append(toIndentedString(statementDate)).append("\n");
    sb.append("    statementId: ").append(toIndentedString(statementId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    creditLimit: ").append(toIndentedString(creditLimit)).append("\n");
    sb.append("    outstandingBalance: ").append(toIndentedString(outstandingBalance)).append("\n");
    sb.append("    lastStatementBalance: ").append(toIndentedString(lastStatementBalance)).append("\n");
    sb.append("    paymentDueDate: ").append(toIndentedString(paymentDueDate)).append("\n");
    sb.append("    minimumDueAmount: ").append(toIndentedString(minimumDueAmount)).append("\n");
    sb.append("    eligibleForEqualPaymentPlans: ").append(toIndentedString(eligibleForEqualPaymentPlans)).append("\n");
    sb.append("    rewardPoints: ").append(toIndentedString(rewardPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
