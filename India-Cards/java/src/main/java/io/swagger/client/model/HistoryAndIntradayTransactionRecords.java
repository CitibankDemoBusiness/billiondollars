/*
 * Cards
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * HistoryAndIntradayTransactionRecords
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:43:49.245466Z[Etc/UTC]")
public class HistoryAndIntradayTransactionRecords {
  @SerializedName("transactionDate")
  private LocalDate transactionDate = null;

  @SerializedName("merchantName")
  private String merchantName = null;

  @SerializedName("merchantLocation")
  private String merchantLocation = null;

  @SerializedName("transactionStatus")
  private String transactionStatus = null;

  @SerializedName("reasonDescription")
  private String reasonDescription = null;

  @SerializedName("transactionAmount")
  private Double transactionAmount = null;

  @SerializedName("transactionCurrencyCode")
  private String transactionCurrencyCode = null;

  @SerializedName("billedAmount")
  private Double billedAmount = null;

  @SerializedName("billedCurrencyCode")
  private String billedCurrencyCode = null;

  public HistoryAndIntradayTransactionRecords transactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * Transaction date in ISO 8601  format YYYY-MM-DD
   * @return transactionDate
  **/
  @Schema(example = "Sat Feb 20 00:00:00 UTC 2021", description = "Transaction date in ISO 8601  format YYYY-MM-DD")
  public LocalDate getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
  }

  public HistoryAndIntradayTransactionRecords merchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

   /**
   * This field indicates the merchant Name
   * @return merchantName
  **/
  @Schema(example = "XYZ123", description = "This field indicates the merchant Name")
  public String getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }

  public HistoryAndIntradayTransactionRecords merchantLocation(String merchantLocation) {
    this.merchantLocation = merchantLocation;
    return this;
  }

   /**
   * This filed indicates the Merchant Address
   * @return merchantLocation
  **/
  @Schema(example = "XYZ123", description = "This filed indicates the Merchant Address")
  public String getMerchantLocation() {
    return merchantLocation;
  }

  public void setMerchantLocation(String merchantLocation) {
    this.merchantLocation = merchantLocation;
  }

  public HistoryAndIntradayTransactionRecords transactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * This field provides the status of the transaction. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.
   * @return transactionStatus
  **/
  @Schema(example = "APPROVED", description = "This field provides the status of the transaction. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.")
  public String getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }

  public HistoryAndIntradayTransactionRecords reasonDescription(String reasonDescription) {
    this.reasonDescription = reasonDescription;
    return this;
  }

   /**
   * Decline Description- for declined transaction
   * @return reasonDescription
  **/
  @Schema(example = "DECLINED", description = "Decline Description- for declined transaction")
  public String getReasonDescription() {
    return reasonDescription;
  }

  public void setReasonDescription(String reasonDescription) {
    this.reasonDescription = reasonDescription;
  }

  public HistoryAndIntradayTransactionRecords transactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Amount of funds the cardholder requested in source location of the transaction.
   * @return transactionAmount
  **/
  @Schema(example = "200.25", description = "Amount of funds the cardholder requested in source location of the transaction.")
  public Double getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
  }

  public HistoryAndIntradayTransactionRecords transactionCurrencyCode(String transactionCurrencyCode) {
    this.transactionCurrencyCode = transactionCurrencyCode;
    return this;
  }

   /**
   * transactionCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{transactionCurrencyCode} resource to get possible values of this field with descriptions
   * @return transactionCurrencyCode
  **/
  @Schema(example = "USD", description = "transactionCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{transactionCurrencyCode} resource to get possible values of this field with descriptions")
  public String getTransactionCurrencyCode() {
    return transactionCurrencyCode;
  }

  public void setTransactionCurrencyCode(String transactionCurrencyCode) {
    this.transactionCurrencyCode = transactionCurrencyCode;
  }

  public HistoryAndIntradayTransactionRecords billedAmount(Double billedAmount) {
    this.billedAmount = billedAmount;
    return this;
  }

   /**
   * Amount billed to the cardholder in the cardholder account currency
   * @return billedAmount
  **/
  @Schema(example = "200.25", description = "Amount billed to the cardholder in the cardholder account currency")
  public Double getBilledAmount() {
    return billedAmount;
  }

  public void setBilledAmount(Double billedAmount) {
    this.billedAmount = billedAmount;
  }

  public HistoryAndIntradayTransactionRecords billedCurrencyCode(String billedCurrencyCode) {
    this.billedCurrencyCode = billedCurrencyCode;
    return this;
  }

   /**
   * billedCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{billedCurrencyCode} resource to get possible values of this field with descriptions
   * @return billedCurrencyCode
  **/
  @Schema(example = "USD", description = "billedCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{billedCurrencyCode} resource to get possible values of this field with descriptions")
  public String getBilledCurrencyCode() {
    return billedCurrencyCode;
  }

  public void setBilledCurrencyCode(String billedCurrencyCode) {
    this.billedCurrencyCode = billedCurrencyCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryAndIntradayTransactionRecords historyAndIntradayTransactionRecords = (HistoryAndIntradayTransactionRecords) o;
    return Objects.equals(this.transactionDate, historyAndIntradayTransactionRecords.transactionDate) &&
        Objects.equals(this.merchantName, historyAndIntradayTransactionRecords.merchantName) &&
        Objects.equals(this.merchantLocation, historyAndIntradayTransactionRecords.merchantLocation) &&
        Objects.equals(this.transactionStatus, historyAndIntradayTransactionRecords.transactionStatus) &&
        Objects.equals(this.reasonDescription, historyAndIntradayTransactionRecords.reasonDescription) &&
        Objects.equals(this.transactionAmount, historyAndIntradayTransactionRecords.transactionAmount) &&
        Objects.equals(this.transactionCurrencyCode, historyAndIntradayTransactionRecords.transactionCurrencyCode) &&
        Objects.equals(this.billedAmount, historyAndIntradayTransactionRecords.billedAmount) &&
        Objects.equals(this.billedCurrencyCode, historyAndIntradayTransactionRecords.billedCurrencyCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionDate, merchantName, merchantLocation, transactionStatus, reasonDescription, transactionAmount, transactionCurrencyCode, billedAmount, billedCurrencyCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryAndIntradayTransactionRecords {\n");
    
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    merchantLocation: ").append(toIndentedString(merchantLocation)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    reasonDescription: ").append(toIndentedString(reasonDescription)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionCurrencyCode: ").append(toIndentedString(transactionCurrencyCode)).append("\n");
    sb.append("    billedAmount: ").append(toIndentedString(billedAmount)).append("\n");
    sb.append("    billedCurrencyCode: ").append(toIndentedString(billedCurrencyCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
