/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PendingAuthorizationTransactionRecords
    /// </summary>
    [DataContract]
        public partial class PendingAuthorizationTransactionRecords :  IEquatable<PendingAuthorizationTransactionRecords>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PendingAuthorizationTransactionRecords" /> class.
        /// </summary>
        /// <param name="transactionDate">EffectiveDate should be in ISO 8601 format YYYY-MM-DD.</param>
        /// <param name="transactionTime">EffectiveTime  should follow ISO 8601 format hh:mm:ss.</param>
        /// <param name="transactionCurrencyCode">transactionCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{transactionCurrencyCode} resource to get possible values of this field with descriptions.</param>
        /// <param name="transactionAmount">TransactionAmount.</param>
        /// <param name="transactionStatus">AuthorizationResponseCode of the transaction. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.</param>
        /// <param name="billedCurrencyCode">billedCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{billedCurrencyCode} resource to get possible values of this field with descriptions.</param>
        /// <param name="billedAmount">billedAmount.</param>
        /// <param name="merchantName">Merchant Name.</param>
        public PendingAuthorizationTransactionRecords(DateTime? transactionDate = default(DateTime?), string transactionTime = default(string), string transactionCurrencyCode = default(string), double? transactionAmount = default(double?), string transactionStatus = default(string), string billedCurrencyCode = default(string), double? billedAmount = default(double?), string merchantName = default(string))
        {
            this.TransactionDate = transactionDate;
            this.TransactionTime = transactionTime;
            this.TransactionCurrencyCode = transactionCurrencyCode;
            this.TransactionAmount = transactionAmount;
            this.TransactionStatus = transactionStatus;
            this.BilledCurrencyCode = billedCurrencyCode;
            this.BilledAmount = billedAmount;
            this.MerchantName = merchantName;
        }
        
        /// <summary>
        /// EffectiveDate should be in ISO 8601 format YYYY-MM-DD
        /// </summary>
        /// <value>EffectiveDate should be in ISO 8601 format YYYY-MM-DD</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// EffectiveTime  should follow ISO 8601 format hh:mm:ss
        /// </summary>
        /// <value>EffectiveTime  should follow ISO 8601 format hh:mm:ss</value>
        [DataMember(Name="transactionTime", EmitDefaultValue=false)]
        public string TransactionTime { get; set; }

        /// <summary>
        /// transactionCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{transactionCurrencyCode} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>transactionCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{transactionCurrencyCode} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="transactionCurrencyCode", EmitDefaultValue=false)]
        public string TransactionCurrencyCode { get; set; }

        /// <summary>
        /// TransactionAmount
        /// </summary>
        /// <value>TransactionAmount</value>
        [DataMember(Name="transactionAmount", EmitDefaultValue=false)]
        public double? TransactionAmount { get; set; }

        /// <summary>
        /// AuthorizationResponseCode of the transaction. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>AuthorizationResponseCode of the transaction. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="transactionStatus", EmitDefaultValue=false)]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// billedCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{billedCurrencyCode} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>billedCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{billedCurrencyCode} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="billedCurrencyCode", EmitDefaultValue=false)]
        public string BilledCurrencyCode { get; set; }

        /// <summary>
        /// billedAmount
        /// </summary>
        /// <value>billedAmount</value>
        [DataMember(Name="billedAmount", EmitDefaultValue=false)]
        public double? BilledAmount { get; set; }

        /// <summary>
        /// Merchant Name
        /// </summary>
        /// <value>Merchant Name</value>
        [DataMember(Name="merchantName", EmitDefaultValue=false)]
        public string MerchantName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PendingAuthorizationTransactionRecords {\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  TransactionTime: ").Append(TransactionTime).Append("\n");
            sb.Append("  TransactionCurrencyCode: ").Append(TransactionCurrencyCode).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  BilledCurrencyCode: ").Append(BilledCurrencyCode).Append("\n");
            sb.Append("  BilledAmount: ").Append(BilledAmount).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PendingAuthorizationTransactionRecords);
        }

        /// <summary>
        /// Returns true if PendingAuthorizationTransactionRecords instances are equal
        /// </summary>
        /// <param name="input">Instance of PendingAuthorizationTransactionRecords to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PendingAuthorizationTransactionRecords input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.TransactionTime == input.TransactionTime ||
                    (this.TransactionTime != null &&
                    this.TransactionTime.Equals(input.TransactionTime))
                ) && 
                (
                    this.TransactionCurrencyCode == input.TransactionCurrencyCode ||
                    (this.TransactionCurrencyCode != null &&
                    this.TransactionCurrencyCode.Equals(input.TransactionCurrencyCode))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    (this.TransactionStatus != null &&
                    this.TransactionStatus.Equals(input.TransactionStatus))
                ) && 
                (
                    this.BilledCurrencyCode == input.BilledCurrencyCode ||
                    (this.BilledCurrencyCode != null &&
                    this.BilledCurrencyCode.Equals(input.BilledCurrencyCode))
                ) && 
                (
                    this.BilledAmount == input.BilledAmount ||
                    (this.BilledAmount != null &&
                    this.BilledAmount.Equals(input.BilledAmount))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.TransactionTime != null)
                    hashCode = hashCode * 59 + this.TransactionTime.GetHashCode();
                if (this.TransactionCurrencyCode != null)
                    hashCode = hashCode * 59 + this.TransactionCurrencyCode.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.TransactionStatus != null)
                    hashCode = hashCode * 59 + this.TransactionStatus.GetHashCode();
                if (this.BilledCurrencyCode != null)
                    hashCode = hashCode * 59 + this.BilledCurrencyCode.GetHashCode();
                if (this.BilledAmount != null)
                    hashCode = hashCode * 59 + this.BilledAmount.GetHashCode();
                if (this.MerchantName != null)
                    hashCode = hashCode * 59 + this.MerchantName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
