/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CorporateOfficerDetails
    /// </summary>
    [DataContract]
        public partial class CorporateOfficerDetails :  IEquatable<CorporateOfficerDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporateOfficerDetails" /> class.
        /// </summary>
        /// <param name="emailAddress">emailAddress of the officer (required).</param>
        /// <param name="corporateOfficerId">Customer Number of the Officer (required).</param>
        /// <param name="corporateOfficerType">corporateofficerType. This is a reference data field. Please use /v1/utilities/referenceData/{corporateOfficerType} resource to get possible values of this field with descriptions (required).</param>
        public CorporateOfficerDetails(string emailAddress = default(string), string corporateOfficerId = default(string), string corporateOfficerType = default(string))
        {
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new InvalidDataException("emailAddress is a required property for CorporateOfficerDetails and cannot be null");
            }
            else
            {
                this.EmailAddress = emailAddress;
            }
            // to ensure "corporateOfficerId" is required (not null)
            if (corporateOfficerId == null)
            {
                throw new InvalidDataException("corporateOfficerId is a required property for CorporateOfficerDetails and cannot be null");
            }
            else
            {
                this.CorporateOfficerId = corporateOfficerId;
            }
            // to ensure "corporateOfficerType" is required (not null)
            if (corporateOfficerType == null)
            {
                throw new InvalidDataException("corporateOfficerType is a required property for CorporateOfficerDetails and cannot be null");
            }
            else
            {
                this.CorporateOfficerType = corporateOfficerType;
            }
        }
        
        /// <summary>
        /// emailAddress of the officer
        /// </summary>
        /// <value>emailAddress of the officer</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Customer Number of the Officer
        /// </summary>
        /// <value>Customer Number of the Officer</value>
        [DataMember(Name="corporateOfficerId", EmitDefaultValue=false)]
        public string CorporateOfficerId { get; set; }

        /// <summary>
        /// corporateofficerType. This is a reference data field. Please use /v1/utilities/referenceData/{corporateOfficerType} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>corporateofficerType. This is a reference data field. Please use /v1/utilities/referenceData/{corporateOfficerType} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="corporateOfficerType", EmitDefaultValue=false)]
        public string CorporateOfficerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorporateOfficerDetails {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  CorporateOfficerId: ").Append(CorporateOfficerId).Append("\n");
            sb.Append("  CorporateOfficerType: ").Append(CorporateOfficerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CorporateOfficerDetails);
        }

        /// <summary>
        /// Returns true if CorporateOfficerDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CorporateOfficerDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorporateOfficerDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.CorporateOfficerId == input.CorporateOfficerId ||
                    (this.CorporateOfficerId != null &&
                    this.CorporateOfficerId.Equals(input.CorporateOfficerId))
                ) && 
                (
                    this.CorporateOfficerType == input.CorporateOfficerType ||
                    (this.CorporateOfficerType != null &&
                    this.CorporateOfficerType.Equals(input.CorporateOfficerType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.CorporateOfficerId != null)
                    hashCode = hashCode * 59 + this.CorporateOfficerId.GetHashCode();
                if (this.CorporateOfficerType != null)
                    hashCode = hashCode * 59 + this.CorporateOfficerType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
