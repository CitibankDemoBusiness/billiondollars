/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EppRequest
    /// </summary>
    [DataContract]
        public partial class EppRequest :  IEquatable<EppRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EppRequest" /> class.
        /// </summary>
        /// <param name="eppLoanBookingType">Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/apac/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description. (required).</param>
        /// <param name="tenor">Tenure of loan in months..</param>
        /// <param name="loanAmount">Eligible loan amount. Applicable only for EPP of type STATEMENT..</param>
        /// <param name="transactionReferenceIds">transactionReferenceIds.</param>
        /// <param name="transactionAuthorizationCodes">transactionAuthorizationCodes.</param>
        public EppRequest(string eppLoanBookingType = default(string), decimal? tenor = default(decimal?), double? loanAmount = default(double?), List<TransactionReferenceId> transactionReferenceIds = default(List<TransactionReferenceId>), List<TransactionAuthorizationCodes> transactionAuthorizationCodes = default(List<TransactionAuthorizationCodes>))
        {
            // to ensure "eppLoanBookingType" is required (not null)
            if (eppLoanBookingType == null)
            {
                throw new InvalidDataException("eppLoanBookingType is a required property for EppRequest and cannot be null");
            }
            else
            {
                this.EppLoanBookingType = eppLoanBookingType;
            }
            this.Tenor = tenor;
            this.LoanAmount = loanAmount;
            this.TransactionReferenceIds = transactionReferenceIds;
            this.TransactionAuthorizationCodes = transactionAuthorizationCodes;
        }
        
        /// <summary>
        /// Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/apac/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description.
        /// </summary>
        /// <value>Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/apac/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description.</value>
        [DataMember(Name="eppLoanBookingType", EmitDefaultValue=false)]
        public string EppLoanBookingType { get; set; }

        /// <summary>
        /// Tenure of loan in months.
        /// </summary>
        /// <value>Tenure of loan in months.</value>
        [DataMember(Name="tenor", EmitDefaultValue=false)]
        public decimal? Tenor { get; set; }

        /// <summary>
        /// Eligible loan amount. Applicable only for EPP of type STATEMENT.
        /// </summary>
        /// <value>Eligible loan amount. Applicable only for EPP of type STATEMENT.</value>
        [DataMember(Name="loanAmount", EmitDefaultValue=false)]
        public double? LoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionReferenceIds
        /// </summary>
        [DataMember(Name="transactionReferenceIds", EmitDefaultValue=false)]
        public List<TransactionReferenceId> TransactionReferenceIds { get; set; }

        /// <summary>
        /// Gets or Sets TransactionAuthorizationCodes
        /// </summary>
        [DataMember(Name="transactionAuthorizationCodes", EmitDefaultValue=false)]
        public List<TransactionAuthorizationCodes> TransactionAuthorizationCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EppRequest {\n");
            sb.Append("  EppLoanBookingType: ").Append(EppLoanBookingType).Append("\n");
            sb.Append("  Tenor: ").Append(Tenor).Append("\n");
            sb.Append("  LoanAmount: ").Append(LoanAmount).Append("\n");
            sb.Append("  TransactionReferenceIds: ").Append(TransactionReferenceIds).Append("\n");
            sb.Append("  TransactionAuthorizationCodes: ").Append(TransactionAuthorizationCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EppRequest);
        }

        /// <summary>
        /// Returns true if EppRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EppRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EppRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EppLoanBookingType == input.EppLoanBookingType ||
                    (this.EppLoanBookingType != null &&
                    this.EppLoanBookingType.Equals(input.EppLoanBookingType))
                ) && 
                (
                    this.Tenor == input.Tenor ||
                    (this.Tenor != null &&
                    this.Tenor.Equals(input.Tenor))
                ) && 
                (
                    this.LoanAmount == input.LoanAmount ||
                    (this.LoanAmount != null &&
                    this.LoanAmount.Equals(input.LoanAmount))
                ) && 
                (
                    this.TransactionReferenceIds == input.TransactionReferenceIds ||
                    this.TransactionReferenceIds != null &&
                    input.TransactionReferenceIds != null &&
                    this.TransactionReferenceIds.SequenceEqual(input.TransactionReferenceIds)
                ) && 
                (
                    this.TransactionAuthorizationCodes == input.TransactionAuthorizationCodes ||
                    this.TransactionAuthorizationCodes != null &&
                    input.TransactionAuthorizationCodes != null &&
                    this.TransactionAuthorizationCodes.SequenceEqual(input.TransactionAuthorizationCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EppLoanBookingType != null)
                    hashCode = hashCode * 59 + this.EppLoanBookingType.GetHashCode();
                if (this.Tenor != null)
                    hashCode = hashCode * 59 + this.Tenor.GetHashCode();
                if (this.LoanAmount != null)
                    hashCode = hashCode * 59 + this.LoanAmount.GetHashCode();
                if (this.TransactionReferenceIds != null)
                    hashCode = hashCode * 59 + this.TransactionReferenceIds.GetHashCode();
                if (this.TransactionAuthorizationCodes != null)
                    hashCode = hashCode * 59 + this.TransactionAuthorizationCodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
