/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataFeesChargesFeeChargeDetail
    /// </summary>
    [DataContract]
        public partial class DataFeesChargesFeeChargeDetail :  IEquatable<DataFeesChargesFeeChargeDetail>, IValidatableObject
    {
        /// <summary>
        /// Defines Item
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ItemEnum
        {
            /// <summary>
            /// Enum Actualmonthlymanagement for value: actual_monthly_management
            /// </summary>
            [EnumMember(Value = "actual_monthly_management")]
            Actualmonthlymanagement = 1,
            /// <summary>
            /// Enum Annual for value: annual
            /// </summary>
            [EnumMember(Value = "annual")]
            Annual = 2,
            /// <summary>
            /// Enum Atmwithdrawal for value: atm_withdrawal
            /// </summary>
            [EnumMember(Value = "atm_withdrawal")]
            Atmwithdrawal = 3,
            /// <summary>
            /// Enum Cardreplacement for value: card_replacement
            /// </summary>
            [EnumMember(Value = "card_replacement")]
            Cardreplacement = 4,
            /// <summary>
            /// Enum Cashadvance for value: cash_advance
            /// </summary>
            [EnumMember(Value = "cash_advance")]
            Cashadvance = 5,
            /// <summary>
            /// Enum Cashwithdrawal for value: cash_withdrawal
            /// </summary>
            [EnumMember(Value = "cash_withdrawal")]
            Cashwithdrawal = 6,
            /// <summary>
            /// Enum Earlysettlement for value: early_settlement
            /// </summary>
            [EnumMember(Value = "early_settlement")]
            Earlysettlement = 7,
            /// <summary>
            /// Enum Financechargecashadvance for value: finance_charge_cash_advance
            /// </summary>
            [EnumMember(Value = "finance_charge_cash_advance")]
            Financechargecashadvance = 8,
            /// <summary>
            /// Enum Financechargeretail for value: finance_charge_retail
            /// </summary>
            [EnumMember(Value = "finance_charge_retail")]
            Financechargeretail = 9,
            /// <summary>
            /// Enum Fixedmonthlymanagement for value: fixed_monthly_management
            /// </summary>
            [EnumMember(Value = "fixed_monthly_management")]
            Fixedmonthlymanagement = 10,
            /// <summary>
            /// Enum Latepayment for value: late_payment
            /// </summary>
            [EnumMember(Value = "late_payment")]
            Latepayment = 11,
            /// <summary>
            /// Enum Minimummonthlypayment for value: minimum_monthly_payment
            /// </summary>
            [EnumMember(Value = "minimum_monthly_payment")]
            Minimummonthlypayment = 12,
            /// <summary>
            /// Enum Others for value: others
            /// </summary>
            [EnumMember(Value = "others")]
            Others = 13,
            /// <summary>
            /// Enum Overseatransaction for value: oversea_transaction
            /// </summary>
            [EnumMember(Value = "oversea_transaction")]
            Overseatransaction = 14,
            /// <summary>
            /// Enum Overseatransactionconversion for value: oversea_transaction_conversion
            /// </summary>
            [EnumMember(Value = "oversea_transaction_conversion")]
            Overseatransactionconversion = 15,
            /// <summary>
            /// Enum Salesdraftretrievalcopy for value: sales_draft_retrieval_copy
            /// </summary>
            [EnumMember(Value = "sales_draft_retrieval_copy")]
            Salesdraftretrievalcopy = 16,
            /// <summary>
            /// Enum Servicetax for value: service_tax
            /// </summary>
            [EnumMember(Value = "service_tax")]
            Servicetax = 17,
            /// <summary>
            /// Enum Starterpack for value: starter_pack
            /// </summary>
            [EnumMember(Value = "starter_pack")]
            Starterpack = 18,
            /// <summary>
            /// Enum Statementcopy for value: statement_copy
            /// </summary>
            [EnumMember(Value = "statement_copy")]
            Statementcopy = 19        }
        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name="item", EmitDefaultValue=false)]
        public ItemEnum Item { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataFeesChargesFeeChargeDetail" /> class.
        /// </summary>
        /// <param name="item">item (required).</param>
        /// <param name="chargeable">Indicator of chargeability.</param>
        /// <param name="amount">Amount for fee and charge up to two digits decimal.</param>
        /// <param name="amountCurrencyCode">ISO-4217 3 characters currency code for fee and charge amount (default to &quot;MYR&quot;).</param>
        /// <param name="percentage">Percentage of amount for fee and charge up to two digits decimal.</param>
        /// <param name="remark">Additional notes for the fee and charge.</param>
        public DataFeesChargesFeeChargeDetail(ItemEnum item = default(ItemEnum), bool? chargeable = default(bool?), double? amount = default(double?), string amountCurrencyCode = "MYR", double? percentage = default(double?), string remark = default(string))
        {
            // to ensure "item" is required (not null)
            if (item == null)
            {
                throw new InvalidDataException("item is a required property for DataFeesChargesFeeChargeDetail and cannot be null");
            }
            else
            {
                this.Item = item;
            }
            this.Chargeable = chargeable;
            this.Amount = amount;
            // use default value if no "amountCurrencyCode" provided
            if (amountCurrencyCode == null)
            {
                this.AmountCurrencyCode = "MYR";
            }
            else
            {
                this.AmountCurrencyCode = amountCurrencyCode;
            }
            this.Percentage = percentage;
            this.Remark = remark;
        }
        

        /// <summary>
        /// Indicator of chargeability
        /// </summary>
        /// <value>Indicator of chargeability</value>
        [DataMember(Name="chargeable", EmitDefaultValue=false)]
        public bool? Chargeable { get; set; }

        /// <summary>
        /// Amount for fee and charge up to two digits decimal
        /// </summary>
        /// <value>Amount for fee and charge up to two digits decimal</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// ISO-4217 3 characters currency code for fee and charge amount
        /// </summary>
        /// <value>ISO-4217 3 characters currency code for fee and charge amount</value>
        [DataMember(Name="amount_currency_code", EmitDefaultValue=false)]
        public string AmountCurrencyCode { get; set; }

        /// <summary>
        /// Percentage of amount for fee and charge up to two digits decimal
        /// </summary>
        /// <value>Percentage of amount for fee and charge up to two digits decimal</value>
        [DataMember(Name="percentage", EmitDefaultValue=false)]
        public double? Percentage { get; set; }

        /// <summary>
        /// Additional notes for the fee and charge
        /// </summary>
        /// <value>Additional notes for the fee and charge</value>
        [DataMember(Name="remark", EmitDefaultValue=false)]
        public string Remark { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataFeesChargesFeeChargeDetail {\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Chargeable: ").Append(Chargeable).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountCurrencyCode: ").Append(AmountCurrencyCode).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataFeesChargesFeeChargeDetail);
        }

        /// <summary>
        /// Returns true if DataFeesChargesFeeChargeDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DataFeesChargesFeeChargeDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataFeesChargesFeeChargeDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.Chargeable == input.Chargeable ||
                    (this.Chargeable != null &&
                    this.Chargeable.Equals(input.Chargeable))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AmountCurrencyCode == input.AmountCurrencyCode ||
                    (this.AmountCurrencyCode != null &&
                    this.AmountCurrencyCode.Equals(input.AmountCurrencyCode))
                ) && 
                (
                    this.Percentage == input.Percentage ||
                    (this.Percentage != null &&
                    this.Percentage.Equals(input.Percentage))
                ) && 
                (
                    this.Remark == input.Remark ||
                    (this.Remark != null &&
                    this.Remark.Equals(input.Remark))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Item != null)
                    hashCode = hashCode * 59 + this.Item.GetHashCode();
                if (this.Chargeable != null)
                    hashCode = hashCode * 59 + this.Chargeable.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AmountCurrencyCode != null)
                    hashCode = hashCode * 59 + this.AmountCurrencyCode.GetHashCode();
                if (this.Percentage != null)
                    hashCode = hashCode * 59 + this.Percentage.GetHashCode();
                if (this.Remark != null)
                    hashCode = hashCode * 59 + this.Remark.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
