/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataRequirementsApplicant
    /// </summary>
    [DataContract]
        public partial class DataRequirementsApplicant :  IEquatable<DataRequirementsApplicant>, IValidatableObject
    {
        /// <summary>
        /// Type of the card application
        /// </summary>
        /// <value>Type of the card application</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ApplicationTypeEnum
        {
            /// <summary>
            /// Enum Principal for value: principal
            /// </summary>
            [EnumMember(Value = "principal")]
            Principal = 1,
            /// <summary>
            /// Enum Supplementary for value: supplementary
            /// </summary>
            [EnumMember(Value = "supplementary")]
            Supplementary = 2,
            /// <summary>
            /// Enum Any for value: any
            /// </summary>
            [EnumMember(Value = "any")]
            Any = 3        }
        /// <summary>
        /// Type of the card application
        /// </summary>
        /// <value>Type of the card application</value>
        [DataMember(Name="application_type", EmitDefaultValue=false)]
        public ApplicationTypeEnum ApplicationType { get; set; }
        /// <summary>
        /// Employment status of the applicant
        /// </summary>
        /// <value>Employment status of the applicant</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EmploymentStatusEnum
        {
            /// <summary>
            /// Enum Employed for value: employed
            /// </summary>
            [EnumMember(Value = "employed")]
            Employed = 1,
            /// <summary>
            /// Enum Selfemployed for value: self_employed
            /// </summary>
            [EnumMember(Value = "self_employed")]
            Selfemployed = 2,
            /// <summary>
            /// Enum Graduate for value: graduate
            /// </summary>
            [EnumMember(Value = "graduate")]
            Graduate = 3,
            /// <summary>
            /// Enum Others for value: others
            /// </summary>
            [EnumMember(Value = "others")]
            Others = 4,
            /// <summary>
            /// Enum Any for value: any
            /// </summary>
            [EnumMember(Value = "any")]
            Any = 5        }
        /// <summary>
        /// Employment status of the applicant
        /// </summary>
        /// <value>Employment status of the applicant</value>
        [DataMember(Name="employment_status", EmitDefaultValue=false)]
        public EmploymentStatusEnum? EmploymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataRequirementsApplicant" /> class.
        /// </summary>
        /// <param name="applicationType">Type of the card application (required).</param>
        /// <param name="employmentStatus">Employment status of the applicant.</param>
        /// <param name="minAge">Minimum age of applicant.</param>
        /// <param name="maxAge">Maximum age of applicant.</param>
        /// <param name="minAnnualIncome">Minimum annual income.</param>
        /// <param name="minAnnualIncomeCurrencyCode">ISO-4217 3 characters currency code for minimum annual income (default to &quot;MYR&quot;).</param>
        /// <param name="document">document.</param>
        public DataRequirementsApplicant(ApplicationTypeEnum applicationType = default(ApplicationTypeEnum), EmploymentStatusEnum? employmentStatus = default(EmploymentStatusEnum?), int? minAge = default(int?), int? maxAge = default(int?), int? minAnnualIncome = default(int?), string minAnnualIncomeCurrencyCode = "MYR", List<DataRequirementsDocument> document = default(List<DataRequirementsDocument>))
        {
            // to ensure "applicationType" is required (not null)
            if (applicationType == null)
            {
                throw new InvalidDataException("applicationType is a required property for DataRequirementsApplicant and cannot be null");
            }
            else
            {
                this.ApplicationType = applicationType;
            }
            this.EmploymentStatus = employmentStatus;
            this.MinAge = minAge;
            this.MaxAge = maxAge;
            this.MinAnnualIncome = minAnnualIncome;
            // use default value if no "minAnnualIncomeCurrencyCode" provided
            if (minAnnualIncomeCurrencyCode == null)
            {
                this.MinAnnualIncomeCurrencyCode = "MYR";
            }
            else
            {
                this.MinAnnualIncomeCurrencyCode = minAnnualIncomeCurrencyCode;
            }
            this.Document = document;
        }
        


        /// <summary>
        /// Minimum age of applicant
        /// </summary>
        /// <value>Minimum age of applicant</value>
        [DataMember(Name="min_age", EmitDefaultValue=false)]
        public int? MinAge { get; set; }

        /// <summary>
        /// Maximum age of applicant
        /// </summary>
        /// <value>Maximum age of applicant</value>
        [DataMember(Name="max_age", EmitDefaultValue=false)]
        public int? MaxAge { get; set; }

        /// <summary>
        /// Minimum annual income
        /// </summary>
        /// <value>Minimum annual income</value>
        [DataMember(Name="min_annual_income", EmitDefaultValue=false)]
        public int? MinAnnualIncome { get; set; }

        /// <summary>
        /// ISO-4217 3 characters currency code for minimum annual income
        /// </summary>
        /// <value>ISO-4217 3 characters currency code for minimum annual income</value>
        [DataMember(Name="min_annual_income_currency_code", EmitDefaultValue=false)]
        public string MinAnnualIncomeCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name="document", EmitDefaultValue=false)]
        public List<DataRequirementsDocument> Document { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataRequirementsApplicant {\n");
            sb.Append("  ApplicationType: ").Append(ApplicationType).Append("\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("  MinAge: ").Append(MinAge).Append("\n");
            sb.Append("  MaxAge: ").Append(MaxAge).Append("\n");
            sb.Append("  MinAnnualIncome: ").Append(MinAnnualIncome).Append("\n");
            sb.Append("  MinAnnualIncomeCurrencyCode: ").Append(MinAnnualIncomeCurrencyCode).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataRequirementsApplicant);
        }

        /// <summary>
        /// Returns true if DataRequirementsApplicant instances are equal
        /// </summary>
        /// <param name="input">Instance of DataRequirementsApplicant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataRequirementsApplicant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationType == input.ApplicationType ||
                    (this.ApplicationType != null &&
                    this.ApplicationType.Equals(input.ApplicationType))
                ) && 
                (
                    this.EmploymentStatus == input.EmploymentStatus ||
                    (this.EmploymentStatus != null &&
                    this.EmploymentStatus.Equals(input.EmploymentStatus))
                ) && 
                (
                    this.MinAge == input.MinAge ||
                    (this.MinAge != null &&
                    this.MinAge.Equals(input.MinAge))
                ) && 
                (
                    this.MaxAge == input.MaxAge ||
                    (this.MaxAge != null &&
                    this.MaxAge.Equals(input.MaxAge))
                ) && 
                (
                    this.MinAnnualIncome == input.MinAnnualIncome ||
                    (this.MinAnnualIncome != null &&
                    this.MinAnnualIncome.Equals(input.MinAnnualIncome))
                ) && 
                (
                    this.MinAnnualIncomeCurrencyCode == input.MinAnnualIncomeCurrencyCode ||
                    (this.MinAnnualIncomeCurrencyCode != null &&
                    this.MinAnnualIncomeCurrencyCode.Equals(input.MinAnnualIncomeCurrencyCode))
                ) && 
                (
                    this.Document == input.Document ||
                    this.Document != null &&
                    input.Document != null &&
                    this.Document.SequenceEqual(input.Document)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationType != null)
                    hashCode = hashCode * 59 + this.ApplicationType.GetHashCode();
                if (this.EmploymentStatus != null)
                    hashCode = hashCode * 59 + this.EmploymentStatus.GetHashCode();
                if (this.MinAge != null)
                    hashCode = hashCode * 59 + this.MinAge.GetHashCode();
                if (this.MaxAge != null)
                    hashCode = hashCode * 59 + this.MaxAge.GetHashCode();
                if (this.MinAnnualIncome != null)
                    hashCode = hashCode * 59 + this.MinAnnualIncome.GetHashCode();
                if (this.MinAnnualIncomeCurrencyCode != null)
                    hashCode = hashCode * 59 + this.MinAnnualIncomeCurrencyCode.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
