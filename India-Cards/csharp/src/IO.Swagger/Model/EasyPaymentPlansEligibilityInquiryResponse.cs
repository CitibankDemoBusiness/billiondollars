/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EasyPaymentPlansEligibilityInquiryResponse
    /// </summary>
    [DataContract]
        public partial class EasyPaymentPlansEligibilityInquiryResponse :  IEquatable<EasyPaymentPlansEligibilityInquiryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EasyPaymentPlansEligibilityInquiryResponse" /> class.
        /// </summary>
        /// <param name="unbilledTransaction">unbilledTransaction.</param>
        /// <param name="statement">statement.</param>
        /// <param name="nextStartIndex">The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex..</param>
        public EasyPaymentPlansEligibilityInquiryResponse(List<UnbilledTransaction> unbilledTransaction = default(List<UnbilledTransaction>), Statement statement = default(Statement), string nextStartIndex = default(string))
        {
            this.UnbilledTransaction = unbilledTransaction;
            this.Statement = statement;
            this.NextStartIndex = nextStartIndex;
        }
        
        /// <summary>
        /// Gets or Sets UnbilledTransaction
        /// </summary>
        [DataMember(Name="unbilledTransaction", EmitDefaultValue=false)]
        public List<UnbilledTransaction> UnbilledTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Statement
        /// </summary>
        [DataMember(Name="statement", EmitDefaultValue=false)]
        public Statement Statement { get; set; }

        /// <summary>
        /// The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.
        /// </summary>
        /// <value>The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.</value>
        [DataMember(Name="nextStartIndex", EmitDefaultValue=false)]
        public string NextStartIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EasyPaymentPlansEligibilityInquiryResponse {\n");
            sb.Append("  UnbilledTransaction: ").Append(UnbilledTransaction).Append("\n");
            sb.Append("  Statement: ").Append(Statement).Append("\n");
            sb.Append("  NextStartIndex: ").Append(NextStartIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EasyPaymentPlansEligibilityInquiryResponse);
        }

        /// <summary>
        /// Returns true if EasyPaymentPlansEligibilityInquiryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EasyPaymentPlansEligibilityInquiryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EasyPaymentPlansEligibilityInquiryResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnbilledTransaction == input.UnbilledTransaction ||
                    this.UnbilledTransaction != null &&
                    input.UnbilledTransaction != null &&
                    this.UnbilledTransaction.SequenceEqual(input.UnbilledTransaction)
                ) && 
                (
                    this.Statement == input.Statement ||
                    (this.Statement != null &&
                    this.Statement.Equals(input.Statement))
                ) && 
                (
                    this.NextStartIndex == input.NextStartIndex ||
                    (this.NextStartIndex != null &&
                    this.NextStartIndex.Equals(input.NextStartIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnbilledTransaction != null)
                    hashCode = hashCode * 59 + this.UnbilledTransaction.GetHashCode();
                if (this.Statement != null)
                    hashCode = hashCode * 59 + this.Statement.GetHashCode();
                if (this.NextStartIndex != null)
                    hashCode = hashCode * 59 + this.NextStartIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
