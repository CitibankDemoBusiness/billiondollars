/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveCreditChargeCardCorporateCardsDetailResponse
    /// </summary>
    [DataContract]
        public partial class RetrieveCreditChargeCardCorporateCardsDetailResponse :  IEquatable<RetrieveCreditChargeCardCorporateCardsDetailResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveCreditChargeCardCorporateCardsDetailResponse" /> class.
        /// </summary>
        /// <param name="cashWithdrawalAllowedFlag">This field is used to indicate, whether the customer is allowed to withdraw cash or not.</param>
        /// <param name="permanentCreditLimitAmount">This field is used to indicate the limit present on the card.</param>
        /// <param name="currentBalanceAmount">This is the balance credit limit left after monthly spend.</param>
        /// <param name="cardStatus">This field shows the card status. This is a reference data field. Please use /v1/utilities/referenceData/{cardStatus} resource to get possible values of this field with descriptions.</param>
        public RetrieveCreditChargeCardCorporateCardsDetailResponse(bool? cashWithdrawalAllowedFlag = default(bool?), double? permanentCreditLimitAmount = default(double?), double? currentBalanceAmount = default(double?), string cardStatus = default(string))
        {
            this.CashWithdrawalAllowedFlag = cashWithdrawalAllowedFlag;
            this.PermanentCreditLimitAmount = permanentCreditLimitAmount;
            this.CurrentBalanceAmount = currentBalanceAmount;
            this.CardStatus = cardStatus;
        }
        
        /// <summary>
        /// This field is used to indicate, whether the customer is allowed to withdraw cash or not
        /// </summary>
        /// <value>This field is used to indicate, whether the customer is allowed to withdraw cash or not</value>
        [DataMember(Name="cashWithdrawalAllowedFlag", EmitDefaultValue=false)]
        public bool? CashWithdrawalAllowedFlag { get; set; }

        /// <summary>
        /// This field is used to indicate the limit present on the card
        /// </summary>
        /// <value>This field is used to indicate the limit present on the card</value>
        [DataMember(Name="permanentCreditLimitAmount", EmitDefaultValue=false)]
        public double? PermanentCreditLimitAmount { get; set; }

        /// <summary>
        /// This is the balance credit limit left after monthly spend
        /// </summary>
        /// <value>This is the balance credit limit left after monthly spend</value>
        [DataMember(Name="currentBalanceAmount", EmitDefaultValue=false)]
        public double? CurrentBalanceAmount { get; set; }

        /// <summary>
        /// This field shows the card status. This is a reference data field. Please use /v1/utilities/referenceData/{cardStatus} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>This field shows the card status. This is a reference data field. Please use /v1/utilities/referenceData/{cardStatus} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="cardStatus", EmitDefaultValue=false)]
        public string CardStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveCreditChargeCardCorporateCardsDetailResponse {\n");
            sb.Append("  CashWithdrawalAllowedFlag: ").Append(CashWithdrawalAllowedFlag).Append("\n");
            sb.Append("  PermanentCreditLimitAmount: ").Append(PermanentCreditLimitAmount).Append("\n");
            sb.Append("  CurrentBalanceAmount: ").Append(CurrentBalanceAmount).Append("\n");
            sb.Append("  CardStatus: ").Append(CardStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveCreditChargeCardCorporateCardsDetailResponse);
        }

        /// <summary>
        /// Returns true if RetrieveCreditChargeCardCorporateCardsDetailResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveCreditChargeCardCorporateCardsDetailResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveCreditChargeCardCorporateCardsDetailResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CashWithdrawalAllowedFlag == input.CashWithdrawalAllowedFlag ||
                    (this.CashWithdrawalAllowedFlag != null &&
                    this.CashWithdrawalAllowedFlag.Equals(input.CashWithdrawalAllowedFlag))
                ) && 
                (
                    this.PermanentCreditLimitAmount == input.PermanentCreditLimitAmount ||
                    (this.PermanentCreditLimitAmount != null &&
                    this.PermanentCreditLimitAmount.Equals(input.PermanentCreditLimitAmount))
                ) && 
                (
                    this.CurrentBalanceAmount == input.CurrentBalanceAmount ||
                    (this.CurrentBalanceAmount != null &&
                    this.CurrentBalanceAmount.Equals(input.CurrentBalanceAmount))
                ) && 
                (
                    this.CardStatus == input.CardStatus ||
                    (this.CardStatus != null &&
                    this.CardStatus.Equals(input.CardStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CashWithdrawalAllowedFlag != null)
                    hashCode = hashCode * 59 + this.CashWithdrawalAllowedFlag.GetHashCode();
                if (this.PermanentCreditLimitAmount != null)
                    hashCode = hashCode * 59 + this.PermanentCreditLimitAmount.GetHashCode();
                if (this.CurrentBalanceAmount != null)
                    hashCode = hashCode * 59 + this.CurrentBalanceAmount.GetHashCode();
                if (this.CardStatus != null)
                    hashCode = hashCode * 59 + this.CardStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
