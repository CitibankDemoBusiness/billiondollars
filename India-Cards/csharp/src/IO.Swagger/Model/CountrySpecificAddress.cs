/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CountrySpecificAddress
    /// </summary>
    [DataContract]
        public partial class CountrySpecificAddress :  IEquatable<CountrySpecificAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountrySpecificAddress" /> class.
        /// </summary>
        /// <param name="streetName">Applicant&#x27;s street Name (required).</param>
        /// <param name="streetType">Applicant&#x27;s street Type.This is a reference data field. Please use /utilities/referenceData/{streetType} resource to get valid values of this field with descriptions. (required).</param>
        /// <param name="streetNumber">Applicant&#x27;s street Number (required).</param>
        /// <param name="unitNumber">Applicant&#x27;s unit Number.</param>
        public CountrySpecificAddress(string streetName = default(string), string streetType = default(string), string streetNumber = default(string), string unitNumber = default(string))
        {
            // to ensure "streetName" is required (not null)
            if (streetName == null)
            {
                throw new InvalidDataException("streetName is a required property for CountrySpecificAddress and cannot be null");
            }
            else
            {
                this.StreetName = streetName;
            }
            // to ensure "streetType" is required (not null)
            if (streetType == null)
            {
                throw new InvalidDataException("streetType is a required property for CountrySpecificAddress and cannot be null");
            }
            else
            {
                this.StreetType = streetType;
            }
            // to ensure "streetNumber" is required (not null)
            if (streetNumber == null)
            {
                throw new InvalidDataException("streetNumber is a required property for CountrySpecificAddress and cannot be null");
            }
            else
            {
                this.StreetNumber = streetNumber;
            }
            this.UnitNumber = unitNumber;
        }
        
        /// <summary>
        /// Applicant&#x27;s street Name
        /// </summary>
        /// <value>Applicant&#x27;s street Name</value>
        [DataMember(Name="streetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// Applicant&#x27;s street Type.This is a reference data field. Please use /utilities/referenceData/{streetType} resource to get valid values of this field with descriptions.
        /// </summary>
        /// <value>Applicant&#x27;s street Type.This is a reference data field. Please use /utilities/referenceData/{streetType} resource to get valid values of this field with descriptions.</value>
        [DataMember(Name="streetType", EmitDefaultValue=false)]
        public string StreetType { get; set; }

        /// <summary>
        /// Applicant&#x27;s street Number
        /// </summary>
        /// <value>Applicant&#x27;s street Number</value>
        [DataMember(Name="streetNumber", EmitDefaultValue=false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Applicant&#x27;s unit Number
        /// </summary>
        /// <value>Applicant&#x27;s unit Number</value>
        [DataMember(Name="unitNumber", EmitDefaultValue=false)]
        public string UnitNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CountrySpecificAddress {\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetType: ").Append(StreetType).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CountrySpecificAddress);
        }

        /// <summary>
        /// Returns true if CountrySpecificAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of CountrySpecificAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CountrySpecificAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetType == input.StreetType ||
                    (this.StreetType != null &&
                    this.StreetType.Equals(input.StreetType))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetType != null)
                    hashCode = hashCode * 59 + this.StreetType.GetHashCode();
                if (this.StreetNumber != null)
                    hashCode = hashCode * 59 + this.StreetNumber.GetHashCode();
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
