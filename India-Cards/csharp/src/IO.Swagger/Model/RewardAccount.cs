/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RewardAccount
    /// </summary>
    [DataContract]
        public partial class RewardAccount :  IEquatable<RewardAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardAccount" /> class.
        /// </summary>
        /// <param name="cardId">The card id  in encrypted format (required).</param>
        /// <param name="displayCardNumber">A masked card number that can be displayed to the customer. (required).</param>
        /// <param name="availablePointBalance">Number of rewards points or miles available. (required).</param>
        /// <param name="rewardCategoryCode">Reward category code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description..</param>
        /// <param name="lastStatementPointBalance">Number of rewards points or miles available since last statement balance..</param>
        /// <param name="pointsEarned">Number of rewards points or miles earned since last statement date..</param>
        /// <param name="rewardAccountErrorDetails">rewardAccountErrorDetails.</param>
        public RewardAccount(string cardId = default(string), string displayCardNumber = default(string), decimal? availablePointBalance = default(decimal?), string rewardCategoryCode = default(string), double? lastStatementPointBalance = default(double?), double? pointsEarned = default(double?), ErrorResponse rewardAccountErrorDetails = default(ErrorResponse))
        {
            // to ensure "cardId" is required (not null)
            if (cardId == null)
            {
                throw new InvalidDataException("cardId is a required property for RewardAccount and cannot be null");
            }
            else
            {
                this.CardId = cardId;
            }
            // to ensure "displayCardNumber" is required (not null)
            if (displayCardNumber == null)
            {
                throw new InvalidDataException("displayCardNumber is a required property for RewardAccount and cannot be null");
            }
            else
            {
                this.DisplayCardNumber = displayCardNumber;
            }
            // to ensure "availablePointBalance" is required (not null)
            if (availablePointBalance == null)
            {
                throw new InvalidDataException("availablePointBalance is a required property for RewardAccount and cannot be null");
            }
            else
            {
                this.AvailablePointBalance = availablePointBalance;
            }
            this.RewardCategoryCode = rewardCategoryCode;
            this.LastStatementPointBalance = lastStatementPointBalance;
            this.PointsEarned = pointsEarned;
            this.RewardAccountErrorDetails = rewardAccountErrorDetails;
        }
        
        /// <summary>
        /// The card id  in encrypted format
        /// </summary>
        /// <value>The card id  in encrypted format</value>
        [DataMember(Name="cardId", EmitDefaultValue=false)]
        public string CardId { get; set; }

        /// <summary>
        /// A masked card number that can be displayed to the customer.
        /// </summary>
        /// <value>A masked card number that can be displayed to the customer.</value>
        [DataMember(Name="displayCardNumber", EmitDefaultValue=false)]
        public string DisplayCardNumber { get; set; }

        /// <summary>
        /// Number of rewards points or miles available.
        /// </summary>
        /// <value>Number of rewards points or miles available.</value>
        [DataMember(Name="availablePointBalance", EmitDefaultValue=false)]
        public decimal? AvailablePointBalance { get; set; }

        /// <summary>
        /// Reward category code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Reward category code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.</value>
        [DataMember(Name="rewardCategoryCode", EmitDefaultValue=false)]
        public string RewardCategoryCode { get; set; }

        /// <summary>
        /// Number of rewards points or miles available since last statement balance.
        /// </summary>
        /// <value>Number of rewards points or miles available since last statement balance.</value>
        [DataMember(Name="lastStatementPointBalance", EmitDefaultValue=false)]
        public double? LastStatementPointBalance { get; set; }

        /// <summary>
        /// Number of rewards points or miles earned since last statement date.
        /// </summary>
        /// <value>Number of rewards points or miles earned since last statement date.</value>
        [DataMember(Name="pointsEarned", EmitDefaultValue=false)]
        public double? PointsEarned { get; set; }

        /// <summary>
        /// Gets or Sets RewardAccountErrorDetails
        /// </summary>
        [DataMember(Name="rewardAccountErrorDetails", EmitDefaultValue=false)]
        public ErrorResponse RewardAccountErrorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RewardAccount {\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  DisplayCardNumber: ").Append(DisplayCardNumber).Append("\n");
            sb.Append("  AvailablePointBalance: ").Append(AvailablePointBalance).Append("\n");
            sb.Append("  RewardCategoryCode: ").Append(RewardCategoryCode).Append("\n");
            sb.Append("  LastStatementPointBalance: ").Append(LastStatementPointBalance).Append("\n");
            sb.Append("  PointsEarned: ").Append(PointsEarned).Append("\n");
            sb.Append("  RewardAccountErrorDetails: ").Append(RewardAccountErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RewardAccount);
        }

        /// <summary>
        /// Returns true if RewardAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of RewardAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RewardAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.DisplayCardNumber == input.DisplayCardNumber ||
                    (this.DisplayCardNumber != null &&
                    this.DisplayCardNumber.Equals(input.DisplayCardNumber))
                ) && 
                (
                    this.AvailablePointBalance == input.AvailablePointBalance ||
                    (this.AvailablePointBalance != null &&
                    this.AvailablePointBalance.Equals(input.AvailablePointBalance))
                ) && 
                (
                    this.RewardCategoryCode == input.RewardCategoryCode ||
                    (this.RewardCategoryCode != null &&
                    this.RewardCategoryCode.Equals(input.RewardCategoryCode))
                ) && 
                (
                    this.LastStatementPointBalance == input.LastStatementPointBalance ||
                    (this.LastStatementPointBalance != null &&
                    this.LastStatementPointBalance.Equals(input.LastStatementPointBalance))
                ) && 
                (
                    this.PointsEarned == input.PointsEarned ||
                    (this.PointsEarned != null &&
                    this.PointsEarned.Equals(input.PointsEarned))
                ) && 
                (
                    this.RewardAccountErrorDetails == input.RewardAccountErrorDetails ||
                    (this.RewardAccountErrorDetails != null &&
                    this.RewardAccountErrorDetails.Equals(input.RewardAccountErrorDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.DisplayCardNumber != null)
                    hashCode = hashCode * 59 + this.DisplayCardNumber.GetHashCode();
                if (this.AvailablePointBalance != null)
                    hashCode = hashCode * 59 + this.AvailablePointBalance.GetHashCode();
                if (this.RewardCategoryCode != null)
                    hashCode = hashCode * 59 + this.RewardCategoryCode.GetHashCode();
                if (this.LastStatementPointBalance != null)
                    hashCode = hashCode * 59 + this.LastStatementPointBalance.GetHashCode();
                if (this.PointsEarned != null)
                    hashCode = hashCode * 59 + this.PointsEarned.GetHashCode();
                if (this.RewardAccountErrorDetails != null)
                    hashCode = hashCode * 59 + this.RewardAccountErrorDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
