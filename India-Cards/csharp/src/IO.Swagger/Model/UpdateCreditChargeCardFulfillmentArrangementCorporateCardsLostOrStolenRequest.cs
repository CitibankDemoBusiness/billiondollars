/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest
    /// </summary>
    [DataContract]
        public partial class UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest :  IEquatable<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest" /> class.
        /// </summary>
        /// <param name="tokenizedCardNumber">Tokenized card number (required).</param>
        /// <param name="corporateOfficerDetails">corporateOfficerDetails.</param>
        /// <param name="embossedName">Customer Name embossed on the card (required).</param>
        /// <param name="serviceRequestType">This is a reference data field. Please use /v1/utilities/referenceData/{serviceRequestType} resource to get possible values of this field with descriptions (required).</param>
        /// <param name="stolenDate">Cards Lost or Stolen date.</param>
        /// <param name="lastCardUsedDate">Latest date when the card was used.</param>
        /// <param name="lastTransactionAmount">Latest Transaction amount on the card.</param>
        /// <param name="cardLossType">Type of loss of the card. This is a reference data field. Please use /v1/utilities/referenceData/{typeOfLoss} resource to get possible values of this field with descriptions.</param>
        /// <param name="lostCountry">Country where the card was lost. This is a reference data field. Please use /v1/utilities/referenceData/{lostCountry} resource to get possible values of this field with descriptions.</param>
        /// <param name="customerRemarks">Remarks to be mentioned by customer (120 Bytes max length).</param>
        public UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest(string tokenizedCardNumber = default(string), CorporateOfficerDetails corporateOfficerDetails = default(CorporateOfficerDetails), string embossedName = default(string), string serviceRequestType = default(string), DateTime? stolenDate = default(DateTime?), DateTime? lastCardUsedDate = default(DateTime?), double? lastTransactionAmount = default(double?), string cardLossType = default(string), string lostCountry = default(string), string customerRemarks = default(string))
        {
            // to ensure "tokenizedCardNumber" is required (not null)
            if (tokenizedCardNumber == null)
            {
                throw new InvalidDataException("tokenizedCardNumber is a required property for UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest and cannot be null");
            }
            else
            {
                this.TokenizedCardNumber = tokenizedCardNumber;
            }
            // to ensure "embossedName" is required (not null)
            if (embossedName == null)
            {
                throw new InvalidDataException("embossedName is a required property for UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest and cannot be null");
            }
            else
            {
                this.EmbossedName = embossedName;
            }
            // to ensure "serviceRequestType" is required (not null)
            if (serviceRequestType == null)
            {
                throw new InvalidDataException("serviceRequestType is a required property for UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest and cannot be null");
            }
            else
            {
                this.ServiceRequestType = serviceRequestType;
            }
            this.CorporateOfficerDetails = corporateOfficerDetails;
            this.StolenDate = stolenDate;
            this.LastCardUsedDate = lastCardUsedDate;
            this.LastTransactionAmount = lastTransactionAmount;
            this.CardLossType = cardLossType;
            this.LostCountry = lostCountry;
            this.CustomerRemarks = customerRemarks;
        }
        
        /// <summary>
        /// Tokenized card number
        /// </summary>
        /// <value>Tokenized card number</value>
        [DataMember(Name="tokenizedCardNumber", EmitDefaultValue=false)]
        public string TokenizedCardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CorporateOfficerDetails
        /// </summary>
        [DataMember(Name="corporateOfficerDetails", EmitDefaultValue=false)]
        public CorporateOfficerDetails CorporateOfficerDetails { get; set; }

        /// <summary>
        /// Customer Name embossed on the card
        /// </summary>
        /// <value>Customer Name embossed on the card</value>
        [DataMember(Name="embossedName", EmitDefaultValue=false)]
        public string EmbossedName { get; set; }

        /// <summary>
        /// This is a reference data field. Please use /v1/utilities/referenceData/{serviceRequestType} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>This is a reference data field. Please use /v1/utilities/referenceData/{serviceRequestType} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="serviceRequestType", EmitDefaultValue=false)]
        public string ServiceRequestType { get; set; }

        /// <summary>
        /// Cards Lost or Stolen date
        /// </summary>
        /// <value>Cards Lost or Stolen date</value>
        [DataMember(Name="stolenDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StolenDate { get; set; }

        /// <summary>
        /// Latest date when the card was used
        /// </summary>
        /// <value>Latest date when the card was used</value>
        [DataMember(Name="lastCardUsedDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastCardUsedDate { get; set; }

        /// <summary>
        /// Latest Transaction amount on the card
        /// </summary>
        /// <value>Latest Transaction amount on the card</value>
        [DataMember(Name="lastTransactionAmount", EmitDefaultValue=false)]
        public double? LastTransactionAmount { get; set; }

        /// <summary>
        /// Type of loss of the card. This is a reference data field. Please use /v1/utilities/referenceData/{typeOfLoss} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>Type of loss of the card. This is a reference data field. Please use /v1/utilities/referenceData/{typeOfLoss} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="cardLossType", EmitDefaultValue=false)]
        public string CardLossType { get; set; }

        /// <summary>
        /// Country where the card was lost. This is a reference data field. Please use /v1/utilities/referenceData/{lostCountry} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>Country where the card was lost. This is a reference data field. Please use /v1/utilities/referenceData/{lostCountry} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="lostCountry", EmitDefaultValue=false)]
        public string LostCountry { get; set; }

        /// <summary>
        /// Remarks to be mentioned by customer (120 Bytes max length)
        /// </summary>
        /// <value>Remarks to be mentioned by customer (120 Bytes max length)</value>
        [DataMember(Name="customerRemarks", EmitDefaultValue=false)]
        public string CustomerRemarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest {\n");
            sb.Append("  TokenizedCardNumber: ").Append(TokenizedCardNumber).Append("\n");
            sb.Append("  CorporateOfficerDetails: ").Append(CorporateOfficerDetails).Append("\n");
            sb.Append("  EmbossedName: ").Append(EmbossedName).Append("\n");
            sb.Append("  ServiceRequestType: ").Append(ServiceRequestType).Append("\n");
            sb.Append("  StolenDate: ").Append(StolenDate).Append("\n");
            sb.Append("  LastCardUsedDate: ").Append(LastCardUsedDate).Append("\n");
            sb.Append("  LastTransactionAmount: ").Append(LastTransactionAmount).Append("\n");
            sb.Append("  CardLossType: ").Append(CardLossType).Append("\n");
            sb.Append("  LostCountry: ").Append(LostCountry).Append("\n");
            sb.Append("  CustomerRemarks: ").Append(CustomerRemarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest);
        }

        /// <summary>
        /// Returns true if UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenizedCardNumber == input.TokenizedCardNumber ||
                    (this.TokenizedCardNumber != null &&
                    this.TokenizedCardNumber.Equals(input.TokenizedCardNumber))
                ) && 
                (
                    this.CorporateOfficerDetails == input.CorporateOfficerDetails ||
                    (this.CorporateOfficerDetails != null &&
                    this.CorporateOfficerDetails.Equals(input.CorporateOfficerDetails))
                ) && 
                (
                    this.EmbossedName == input.EmbossedName ||
                    (this.EmbossedName != null &&
                    this.EmbossedName.Equals(input.EmbossedName))
                ) && 
                (
                    this.ServiceRequestType == input.ServiceRequestType ||
                    (this.ServiceRequestType != null &&
                    this.ServiceRequestType.Equals(input.ServiceRequestType))
                ) && 
                (
                    this.StolenDate == input.StolenDate ||
                    (this.StolenDate != null &&
                    this.StolenDate.Equals(input.StolenDate))
                ) && 
                (
                    this.LastCardUsedDate == input.LastCardUsedDate ||
                    (this.LastCardUsedDate != null &&
                    this.LastCardUsedDate.Equals(input.LastCardUsedDate))
                ) && 
                (
                    this.LastTransactionAmount == input.LastTransactionAmount ||
                    (this.LastTransactionAmount != null &&
                    this.LastTransactionAmount.Equals(input.LastTransactionAmount))
                ) && 
                (
                    this.CardLossType == input.CardLossType ||
                    (this.CardLossType != null &&
                    this.CardLossType.Equals(input.CardLossType))
                ) && 
                (
                    this.LostCountry == input.LostCountry ||
                    (this.LostCountry != null &&
                    this.LostCountry.Equals(input.LostCountry))
                ) && 
                (
                    this.CustomerRemarks == input.CustomerRemarks ||
                    (this.CustomerRemarks != null &&
                    this.CustomerRemarks.Equals(input.CustomerRemarks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenizedCardNumber != null)
                    hashCode = hashCode * 59 + this.TokenizedCardNumber.GetHashCode();
                if (this.CorporateOfficerDetails != null)
                    hashCode = hashCode * 59 + this.CorporateOfficerDetails.GetHashCode();
                if (this.EmbossedName != null)
                    hashCode = hashCode * 59 + this.EmbossedName.GetHashCode();
                if (this.ServiceRequestType != null)
                    hashCode = hashCode * 59 + this.ServiceRequestType.GetHashCode();
                if (this.StolenDate != null)
                    hashCode = hashCode * 59 + this.StolenDate.GetHashCode();
                if (this.LastCardUsedDate != null)
                    hashCode = hashCode * 59 + this.LastCardUsedDate.GetHashCode();
                if (this.LastTransactionAmount != null)
                    hashCode = hashCode * 59 + this.LastTransactionAmount.GetHashCode();
                if (this.CardLossType != null)
                    hashCode = hashCode * 59 + this.CardLossType.GetHashCode();
                if (this.LostCountry != null)
                    hashCode = hashCode * 59 + this.LostCountry.GetHashCode();
                if (this.CustomerRemarks != null)
                    hashCode = hashCode * 59 + this.CustomerRemarks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
