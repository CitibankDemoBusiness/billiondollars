/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest
    /// </summary>
    [DataContract]
        public partial class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest :  IEquatable<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest" /> class.
        /// </summary>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session (required).</param>
        /// <param name="orgCode">Organization of the card (required).</param>
        /// <param name="loanAmount">Loan amount availed by customer (required).</param>
        /// <param name="promotionId">Promotion ID for the loan offered (required).</param>
        /// <param name="loanTenure">Tenure of loan against card.</param>
        /// <param name="startIndex">Start index of next fetch of records.</param>
        /// <param name="requestSize">Number of records required (Max &#x3D; 60).</param>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest(string controlFlowId = default(string), string orgCode = default(string), double? loanAmount = default(double?), string promotionId = default(string), string loanTenure = default(string), string startIndex = default(string), int? requestSize = default(int?))
        {
            // to ensure "controlFlowId" is required (not null)
            if (controlFlowId == null)
            {
                throw new InvalidDataException("controlFlowId is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest and cannot be null");
            }
            else
            {
                this.ControlFlowId = controlFlowId;
            }
            // to ensure "orgCode" is required (not null)
            if (orgCode == null)
            {
                throw new InvalidDataException("orgCode is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest and cannot be null");
            }
            else
            {
                this.OrgCode = orgCode;
            }
            // to ensure "loanAmount" is required (not null)
            if (loanAmount == null)
            {
                throw new InvalidDataException("loanAmount is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest and cannot be null");
            }
            else
            {
                this.LoanAmount = loanAmount;
            }
            // to ensure "promotionId" is required (not null)
            if (promotionId == null)
            {
                throw new InvalidDataException("promotionId is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest and cannot be null");
            }
            else
            {
                this.PromotionId = promotionId;
            }
            this.LoanTenure = loanTenure;
            this.StartIndex = startIndex;
            this.RequestSize = requestSize;
        }
        
        /// <summary>
        /// Control flow id is used to control the flow for subsequent requests in the session
        /// </summary>
        /// <value>Control flow id is used to control the flow for subsequent requests in the session</value>
        [DataMember(Name="controlFlowId", EmitDefaultValue=false)]
        public string ControlFlowId { get; set; }

        /// <summary>
        /// Organization of the card
        /// </summary>
        /// <value>Organization of the card</value>
        [DataMember(Name="orgCode", EmitDefaultValue=false)]
        public string OrgCode { get; set; }

        /// <summary>
        /// Loan amount availed by customer
        /// </summary>
        /// <value>Loan amount availed by customer</value>
        [DataMember(Name="loanAmount", EmitDefaultValue=false)]
        public double? LoanAmount { get; set; }

        /// <summary>
        /// Promotion ID for the loan offered
        /// </summary>
        /// <value>Promotion ID for the loan offered</value>
        [DataMember(Name="promotionId", EmitDefaultValue=false)]
        public string PromotionId { get; set; }

        /// <summary>
        /// Tenure of loan against card
        /// </summary>
        /// <value>Tenure of loan against card</value>
        [DataMember(Name="loanTenure", EmitDefaultValue=false)]
        public string LoanTenure { get; set; }

        /// <summary>
        /// Start index of next fetch of records
        /// </summary>
        /// <value>Start index of next fetch of records</value>
        [DataMember(Name="startIndex", EmitDefaultValue=false)]
        public string StartIndex { get; set; }

        /// <summary>
        /// Number of records required (Max &#x3D; 60)
        /// </summary>
        /// <value>Number of records required (Max &#x3D; 60)</value>
        [DataMember(Name="requestSize", EmitDefaultValue=false)]
        public int? RequestSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest {\n");
            sb.Append("  ControlFlowId: ").Append(ControlFlowId).Append("\n");
            sb.Append("  OrgCode: ").Append(OrgCode).Append("\n");
            sb.Append("  LoanAmount: ").Append(LoanAmount).Append("\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  LoanTenure: ").Append(LoanTenure).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  RequestSize: ").Append(RequestSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest);
        }

        /// <summary>
        /// Returns true if RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ControlFlowId == input.ControlFlowId ||
                    (this.ControlFlowId != null &&
                    this.ControlFlowId.Equals(input.ControlFlowId))
                ) && 
                (
                    this.OrgCode == input.OrgCode ||
                    (this.OrgCode != null &&
                    this.OrgCode.Equals(input.OrgCode))
                ) && 
                (
                    this.LoanAmount == input.LoanAmount ||
                    (this.LoanAmount != null &&
                    this.LoanAmount.Equals(input.LoanAmount))
                ) && 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.LoanTenure == input.LoanTenure ||
                    (this.LoanTenure != null &&
                    this.LoanTenure.Equals(input.LoanTenure))
                ) && 
                (
                    this.StartIndex == input.StartIndex ||
                    (this.StartIndex != null &&
                    this.StartIndex.Equals(input.StartIndex))
                ) && 
                (
                    this.RequestSize == input.RequestSize ||
                    (this.RequestSize != null &&
                    this.RequestSize.Equals(input.RequestSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ControlFlowId != null)
                    hashCode = hashCode * 59 + this.ControlFlowId.GetHashCode();
                if (this.OrgCode != null)
                    hashCode = hashCode * 59 + this.OrgCode.GetHashCode();
                if (this.LoanAmount != null)
                    hashCode = hashCode * 59 + this.LoanAmount.GetHashCode();
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                if (this.LoanTenure != null)
                    hashCode = hashCode * 59 + this.LoanTenure.GetHashCode();
                if (this.StartIndex != null)
                    hashCode = hashCode * 59 + this.StartIndex.GetHashCode();
                if (this.RequestSize != null)
                    hashCode = hashCode * 59 + this.RequestSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
