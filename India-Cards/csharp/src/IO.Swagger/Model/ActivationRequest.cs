/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ActivationRequest
    /// </summary>
    [DataContract]
        public partial class ActivationRequest :  IEquatable<ActivationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivationRequest" /> class.
        /// </summary>
        /// <param name="overseasCardActivationEndDate">Card activation end date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, no value to be sent..</param>
        /// <param name="overseasCardActivationStartDate">Card activation start date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, no value to be sent..</param>
        /// <param name="perpetualActivationIndicator">Indicator to specify whether the card to be activated perpetually.</param>
        public ActivationRequest(DateTime? overseasCardActivationEndDate = default(DateTime?), DateTime? overseasCardActivationStartDate = default(DateTime?), string perpetualActivationIndicator = default(string))
        {
            this.OverseasCardActivationEndDate = overseasCardActivationEndDate;
            this.OverseasCardActivationStartDate = overseasCardActivationStartDate;
            this.PerpetualActivationIndicator = perpetualActivationIndicator;
        }
        
        /// <summary>
        /// Card activation end date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, no value to be sent.
        /// </summary>
        /// <value>Card activation end date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, no value to be sent.</value>
        [DataMember(Name="overseasCardActivationEndDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OverseasCardActivationEndDate { get; set; }

        /// <summary>
        /// Card activation start date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, no value to be sent.
        /// </summary>
        /// <value>Card activation start date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, no value to be sent.</value>
        [DataMember(Name="overseasCardActivationStartDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OverseasCardActivationStartDate { get; set; }

        /// <summary>
        /// Indicator to specify whether the card to be activated perpetually
        /// </summary>
        /// <value>Indicator to specify whether the card to be activated perpetually</value>
        [DataMember(Name="perpetualActivationIndicator", EmitDefaultValue=false)]
        public string PerpetualActivationIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivationRequest {\n");
            sb.Append("  OverseasCardActivationEndDate: ").Append(OverseasCardActivationEndDate).Append("\n");
            sb.Append("  OverseasCardActivationStartDate: ").Append(OverseasCardActivationStartDate).Append("\n");
            sb.Append("  PerpetualActivationIndicator: ").Append(PerpetualActivationIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivationRequest);
        }

        /// <summary>
        /// Returns true if ActivationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OverseasCardActivationEndDate == input.OverseasCardActivationEndDate ||
                    (this.OverseasCardActivationEndDate != null &&
                    this.OverseasCardActivationEndDate.Equals(input.OverseasCardActivationEndDate))
                ) && 
                (
                    this.OverseasCardActivationStartDate == input.OverseasCardActivationStartDate ||
                    (this.OverseasCardActivationStartDate != null &&
                    this.OverseasCardActivationStartDate.Equals(input.OverseasCardActivationStartDate))
                ) && 
                (
                    this.PerpetualActivationIndicator == input.PerpetualActivationIndicator ||
                    (this.PerpetualActivationIndicator != null &&
                    this.PerpetualActivationIndicator.Equals(input.PerpetualActivationIndicator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OverseasCardActivationEndDate != null)
                    hashCode = hashCode * 59 + this.OverseasCardActivationEndDate.GetHashCode();
                if (this.OverseasCardActivationStartDate != null)
                    hashCode = hashCode * 59 + this.OverseasCardActivationStartDate.GetHashCode();
                if (this.PerpetualActivationIndicator != null)
                    hashCode = hashCode * 59 + this.PerpetualActivationIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
