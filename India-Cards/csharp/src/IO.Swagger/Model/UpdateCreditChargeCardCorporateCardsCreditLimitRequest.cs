/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdateCreditChargeCardCorporateCardsCreditLimitRequest
    /// </summary>
    [DataContract]
        public partial class UpdateCreditChargeCardCorporateCardsCreditLimitRequest :  IEquatable<UpdateCreditChargeCardCorporateCardsCreditLimitRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCreditChargeCardCorporateCardsCreditLimitRequest" /> class.
        /// </summary>
        /// <param name="tokenizedCardNumber">Tokenized card number (required).</param>
        /// <param name="corporateOfficerDetails">corporateOfficerDetails.</param>
        /// <param name="creditLimitAmount">New Credit Limit Amount (required).</param>
        /// <param name="creditLimitIndicator">To indicate whether the limit udpate is for account level or card level. This is a reference data field. Please use /v1/utilities/referenceData/{creditLimitIndicator} resource to get possible values of this field with descriptions (required).</param>
        public UpdateCreditChargeCardCorporateCardsCreditLimitRequest(string tokenizedCardNumber = default(string), CorporateOfficerDetails corporateOfficerDetails = default(CorporateOfficerDetails), double? creditLimitAmount = default(double?), string creditLimitIndicator = default(string))
        {
            // to ensure "tokenizedCardNumber" is required (not null)
            if (tokenizedCardNumber == null)
            {
                throw new InvalidDataException("tokenizedCardNumber is a required property for UpdateCreditChargeCardCorporateCardsCreditLimitRequest and cannot be null");
            }
            else
            {
                this.TokenizedCardNumber = tokenizedCardNumber;
            }
            // to ensure "creditLimitAmount" is required (not null)
            if (creditLimitAmount == null)
            {
                throw new InvalidDataException("creditLimitAmount is a required property for UpdateCreditChargeCardCorporateCardsCreditLimitRequest and cannot be null");
            }
            else
            {
                this.CreditLimitAmount = creditLimitAmount;
            }
            // to ensure "creditLimitIndicator" is required (not null)
            if (creditLimitIndicator == null)
            {
                throw new InvalidDataException("creditLimitIndicator is a required property for UpdateCreditChargeCardCorporateCardsCreditLimitRequest and cannot be null");
            }
            else
            {
                this.CreditLimitIndicator = creditLimitIndicator;
            }
            this.CorporateOfficerDetails = corporateOfficerDetails;
        }
        
        /// <summary>
        /// Tokenized card number
        /// </summary>
        /// <value>Tokenized card number</value>
        [DataMember(Name="tokenizedCardNumber", EmitDefaultValue=false)]
        public string TokenizedCardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CorporateOfficerDetails
        /// </summary>
        [DataMember(Name="corporateOfficerDetails", EmitDefaultValue=false)]
        public CorporateOfficerDetails CorporateOfficerDetails { get; set; }

        /// <summary>
        /// New Credit Limit Amount
        /// </summary>
        /// <value>New Credit Limit Amount</value>
        [DataMember(Name="creditLimitAmount", EmitDefaultValue=false)]
        public double? CreditLimitAmount { get; set; }

        /// <summary>
        /// To indicate whether the limit udpate is for account level or card level. This is a reference data field. Please use /v1/utilities/referenceData/{creditLimitIndicator} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>To indicate whether the limit udpate is for account level or card level. This is a reference data field. Please use /v1/utilities/referenceData/{creditLimitIndicator} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="creditLimitIndicator", EmitDefaultValue=false)]
        public string CreditLimitIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCreditChargeCardCorporateCardsCreditLimitRequest {\n");
            sb.Append("  TokenizedCardNumber: ").Append(TokenizedCardNumber).Append("\n");
            sb.Append("  CorporateOfficerDetails: ").Append(CorporateOfficerDetails).Append("\n");
            sb.Append("  CreditLimitAmount: ").Append(CreditLimitAmount).Append("\n");
            sb.Append("  CreditLimitIndicator: ").Append(CreditLimitIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCreditChargeCardCorporateCardsCreditLimitRequest);
        }

        /// <summary>
        /// Returns true if UpdateCreditChargeCardCorporateCardsCreditLimitRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCreditChargeCardCorporateCardsCreditLimitRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCreditChargeCardCorporateCardsCreditLimitRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenizedCardNumber == input.TokenizedCardNumber ||
                    (this.TokenizedCardNumber != null &&
                    this.TokenizedCardNumber.Equals(input.TokenizedCardNumber))
                ) && 
                (
                    this.CorporateOfficerDetails == input.CorporateOfficerDetails ||
                    (this.CorporateOfficerDetails != null &&
                    this.CorporateOfficerDetails.Equals(input.CorporateOfficerDetails))
                ) && 
                (
                    this.CreditLimitAmount == input.CreditLimitAmount ||
                    (this.CreditLimitAmount != null &&
                    this.CreditLimitAmount.Equals(input.CreditLimitAmount))
                ) && 
                (
                    this.CreditLimitIndicator == input.CreditLimitIndicator ||
                    (this.CreditLimitIndicator != null &&
                    this.CreditLimitIndicator.Equals(input.CreditLimitIndicator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenizedCardNumber != null)
                    hashCode = hashCode * 59 + this.TokenizedCardNumber.GetHashCode();
                if (this.CorporateOfficerDetails != null)
                    hashCode = hashCode * 59 + this.CorporateOfficerDetails.GetHashCode();
                if (this.CreditLimitAmount != null)
                    hashCode = hashCode * 59 + this.CreditLimitAmount.GetHashCode();
                if (this.CreditLimitIndicator != null)
                    hashCode = hashCode * 59 + this.CreditLimitIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
