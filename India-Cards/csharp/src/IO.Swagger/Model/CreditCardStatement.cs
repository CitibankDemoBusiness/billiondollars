/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditCardStatement
    /// </summary>
    [DataContract]
        public partial class CreditCardStatement :  IEquatable<CreditCardStatement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardStatement" /> class.
        /// </summary>
        /// <param name="statementDate">The statement date in ISO 8601 format YYYY-MM-DD.</param>
        /// <param name="statementId">Unique identifier for the statement.</param>
        /// <param name="currencyCode">The currency code of the statement in ISO 4217 format.</param>
        /// <param name="creditLimit">The maximum amount of credit that extend to a customer.</param>
        /// <param name="outstandingBalance">Outstanding balance amount on the statement date.</param>
        /// <param name="lastStatementBalance">The balance on last statement date.</param>
        /// <param name="paymentDueDate">Next payment due date in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="minimumDueAmount">Minimum due amount for a payment cycle.</param>
        /// <param name="eligibleForEqualPaymentPlans">eligibleForEqualPaymentPlans.</param>
        /// <param name="rewardPoints">rewardPoints.</param>
        public CreditCardStatement(DateTime? statementDate = default(DateTime?), string statementId = default(string), string currencyCode = default(string), double? creditLimit = default(double?), double? outstandingBalance = default(double?), double? lastStatementBalance = default(double?), DateTime? paymentDueDate = default(DateTime?), double? minimumDueAmount = default(double?), List<EligibleForEqualPaymentPlan> eligibleForEqualPaymentPlans = default(List<EligibleForEqualPaymentPlan>), RewardPoints rewardPoints = default(RewardPoints))
        {
            this.StatementDate = statementDate;
            this.StatementId = statementId;
            this.CurrencyCode = currencyCode;
            this.CreditLimit = creditLimit;
            this.OutstandingBalance = outstandingBalance;
            this.LastStatementBalance = lastStatementBalance;
            this.PaymentDueDate = paymentDueDate;
            this.MinimumDueAmount = minimumDueAmount;
            this.EligibleForEqualPaymentPlans = eligibleForEqualPaymentPlans;
            this.RewardPoints = rewardPoints;
        }
        
        /// <summary>
        /// The statement date in ISO 8601 format YYYY-MM-DD
        /// </summary>
        /// <value>The statement date in ISO 8601 format YYYY-MM-DD</value>
        [DataMember(Name="statementDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StatementDate { get; set; }

        /// <summary>
        /// Unique identifier for the statement
        /// </summary>
        /// <value>Unique identifier for the statement</value>
        [DataMember(Name="statementId", EmitDefaultValue=false)]
        public string StatementId { get; set; }

        /// <summary>
        /// The currency code of the statement in ISO 4217 format
        /// </summary>
        /// <value>The currency code of the statement in ISO 4217 format</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The maximum amount of credit that extend to a customer
        /// </summary>
        /// <value>The maximum amount of credit that extend to a customer</value>
        [DataMember(Name="creditLimit", EmitDefaultValue=false)]
        public double? CreditLimit { get; set; }

        /// <summary>
        /// Outstanding balance amount on the statement date
        /// </summary>
        /// <value>Outstanding balance amount on the statement date</value>
        [DataMember(Name="outstandingBalance", EmitDefaultValue=false)]
        public double? OutstandingBalance { get; set; }

        /// <summary>
        /// The balance on last statement date
        /// </summary>
        /// <value>The balance on last statement date</value>
        [DataMember(Name="lastStatementBalance", EmitDefaultValue=false)]
        public double? LastStatementBalance { get; set; }

        /// <summary>
        /// Next payment due date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Next payment due date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="paymentDueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? PaymentDueDate { get; set; }

        /// <summary>
        /// Minimum due amount for a payment cycle
        /// </summary>
        /// <value>Minimum due amount for a payment cycle</value>
        [DataMember(Name="minimumDueAmount", EmitDefaultValue=false)]
        public double? MinimumDueAmount { get; set; }

        /// <summary>
        /// Gets or Sets EligibleForEqualPaymentPlans
        /// </summary>
        [DataMember(Name="eligibleForEqualPaymentPlans", EmitDefaultValue=false)]
        public List<EligibleForEqualPaymentPlan> EligibleForEqualPaymentPlans { get; set; }

        /// <summary>
        /// Gets or Sets RewardPoints
        /// </summary>
        [DataMember(Name="rewardPoints", EmitDefaultValue=false)]
        public RewardPoints RewardPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardStatement {\n");
            sb.Append("  StatementDate: ").Append(StatementDate).Append("\n");
            sb.Append("  StatementId: ").Append(StatementId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  OutstandingBalance: ").Append(OutstandingBalance).Append("\n");
            sb.Append("  LastStatementBalance: ").Append(LastStatementBalance).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  MinimumDueAmount: ").Append(MinimumDueAmount).Append("\n");
            sb.Append("  EligibleForEqualPaymentPlans: ").Append(EligibleForEqualPaymentPlans).Append("\n");
            sb.Append("  RewardPoints: ").Append(RewardPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardStatement);
        }

        /// <summary>
        /// Returns true if CreditCardStatement instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardStatement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatementDate == input.StatementDate ||
                    (this.StatementDate != null &&
                    this.StatementDate.Equals(input.StatementDate))
                ) && 
                (
                    this.StatementId == input.StatementId ||
                    (this.StatementId != null &&
                    this.StatementId.Equals(input.StatementId))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    (this.CreditLimit != null &&
                    this.CreditLimit.Equals(input.CreditLimit))
                ) && 
                (
                    this.OutstandingBalance == input.OutstandingBalance ||
                    (this.OutstandingBalance != null &&
                    this.OutstandingBalance.Equals(input.OutstandingBalance))
                ) && 
                (
                    this.LastStatementBalance == input.LastStatementBalance ||
                    (this.LastStatementBalance != null &&
                    this.LastStatementBalance.Equals(input.LastStatementBalance))
                ) && 
                (
                    this.PaymentDueDate == input.PaymentDueDate ||
                    (this.PaymentDueDate != null &&
                    this.PaymentDueDate.Equals(input.PaymentDueDate))
                ) && 
                (
                    this.MinimumDueAmount == input.MinimumDueAmount ||
                    (this.MinimumDueAmount != null &&
                    this.MinimumDueAmount.Equals(input.MinimumDueAmount))
                ) && 
                (
                    this.EligibleForEqualPaymentPlans == input.EligibleForEqualPaymentPlans ||
                    this.EligibleForEqualPaymentPlans != null &&
                    input.EligibleForEqualPaymentPlans != null &&
                    this.EligibleForEqualPaymentPlans.SequenceEqual(input.EligibleForEqualPaymentPlans)
                ) && 
                (
                    this.RewardPoints == input.RewardPoints ||
                    (this.RewardPoints != null &&
                    this.RewardPoints.Equals(input.RewardPoints))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatementDate != null)
                    hashCode = hashCode * 59 + this.StatementDate.GetHashCode();
                if (this.StatementId != null)
                    hashCode = hashCode * 59 + this.StatementId.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.CreditLimit != null)
                    hashCode = hashCode * 59 + this.CreditLimit.GetHashCode();
                if (this.OutstandingBalance != null)
                    hashCode = hashCode * 59 + this.OutstandingBalance.GetHashCode();
                if (this.LastStatementBalance != null)
                    hashCode = hashCode * 59 + this.LastStatementBalance.GetHashCode();
                if (this.PaymentDueDate != null)
                    hashCode = hashCode * 59 + this.PaymentDueDate.GetHashCode();
                if (this.MinimumDueAmount != null)
                    hashCode = hashCode * 59 + this.MinimumDueAmount.GetHashCode();
                if (this.EligibleForEqualPaymentPlans != null)
                    hashCode = hashCode * 59 + this.EligibleForEqualPaymentPlans.GetHashCode();
                if (this.RewardPoints != null)
                    hashCode = hashCode * 59 + this.RewardPoints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
