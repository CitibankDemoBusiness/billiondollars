/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest
    /// </summary>
    [DataContract]
        public partial class NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest :  IEquatable<NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest" /> class.
        /// </summary>
        /// <param name="requestId">This field provides the unique request ID generated from the VOX platform. Will be used for tracking and audit purposes (required).</param>
        /// <param name="vopTransactionId">This field specifies the VOP transaction ID of the original transaction, that triggered the reward. (required).</param>
        /// <param name="actionType">This field specifies the action to be performed for the request.Valid Value is Notify (required).</param>
        /// <param name="distributorId">This field specifies the Distributor ID. Important when an aggregator (who is serving for more than one distributor) is building the API end point. (required).</param>
        /// <param name="cardId">This field provides the card id generated during cardholder enrolment at VOX. (required).</param>
        /// <param name="userId">This field provides the external user id generated during cardholder enrolment at VOX. (required).</param>
        /// <param name="creditStatus">This field specifies the reward credit status.Valid Values are Successful, Eligible, Failed (required).</param>
        /// <param name="requestDateTime">This field specifies the date and time which the reward request is initiated in the format YYYY-MM-DD HH:MM:SS (required).</param>
        /// <param name="offerId">This will be the VOX qualified offer ID, which the reward is given, Will be used for tracking and audit purposes. (required).</param>
        /// <param name="settlementCurrency">This field specifies the reward currency of the original offer (required).</param>
        /// <param name="rewardSettlementCurrency">This field specifies the cashback reward value in Settlement Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00 (required).</param>
        /// <param name="billingCurrency">This field specifies the customer purchase currency derived from the VOP transaction. (required).</param>
        /// <param name="rewardBillingCurrency">This field specifies the cashback reward value in Settlement Billing Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00 (required).</param>
        /// <param name="merchantName">This field provides the merchant name (required).</param>
        /// <param name="transactionDate">This field specifies the transaction date retrieved from the VOP Transaction in the format YYYY-MM-DD HH:MM:SS (required).</param>
        /// <param name="transactionBillingAmount">This field specifies transaction amount in billing currency as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00 (required).</param>
        /// <param name="transactionSettlementAmount">This field specifies transaction amount in settlement currency  as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00 (required).</param>
        /// <param name="remarks">This field is used to pass additional information required by the partner for their records. This can pass an empty value as well..</param>
        public NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest(string requestId = default(string), string vopTransactionId = default(string), string actionType = default(string), string distributorId = default(string), string cardId = default(string), string userId = default(string), string creditStatus = default(string), string requestDateTime = default(string), int? offerId = default(int?), string settlementCurrency = default(string), double? rewardSettlementCurrency = default(double?), string billingCurrency = default(string), double? rewardBillingCurrency = default(double?), string merchantName = default(string), string transactionDate = default(string), double? transactionBillingAmount = default(double?), double? transactionSettlementAmount = default(double?), string remarks = default(string))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new InvalidDataException("requestId is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.RequestId = requestId;
            }
            // to ensure "vopTransactionId" is required (not null)
            if (vopTransactionId == null)
            {
                throw new InvalidDataException("vopTransactionId is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.VopTransactionId = vopTransactionId;
            }
            // to ensure "actionType" is required (not null)
            if (actionType == null)
            {
                throw new InvalidDataException("actionType is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.ActionType = actionType;
            }
            // to ensure "distributorId" is required (not null)
            if (distributorId == null)
            {
                throw new InvalidDataException("distributorId is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.DistributorId = distributorId;
            }
            // to ensure "cardId" is required (not null)
            if (cardId == null)
            {
                throw new InvalidDataException("cardId is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.CardId = cardId;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "creditStatus" is required (not null)
            if (creditStatus == null)
            {
                throw new InvalidDataException("creditStatus is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.CreditStatus = creditStatus;
            }
            // to ensure "requestDateTime" is required (not null)
            if (requestDateTime == null)
            {
                throw new InvalidDataException("requestDateTime is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.RequestDateTime = requestDateTime;
            }
            // to ensure "offerId" is required (not null)
            if (offerId == null)
            {
                throw new InvalidDataException("offerId is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.OfferId = offerId;
            }
            // to ensure "settlementCurrency" is required (not null)
            if (settlementCurrency == null)
            {
                throw new InvalidDataException("settlementCurrency is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.SettlementCurrency = settlementCurrency;
            }
            // to ensure "rewardSettlementCurrency" is required (not null)
            if (rewardSettlementCurrency == null)
            {
                throw new InvalidDataException("rewardSettlementCurrency is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.RewardSettlementCurrency = rewardSettlementCurrency;
            }
            // to ensure "billingCurrency" is required (not null)
            if (billingCurrency == null)
            {
                throw new InvalidDataException("billingCurrency is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.BillingCurrency = billingCurrency;
            }
            // to ensure "rewardBillingCurrency" is required (not null)
            if (rewardBillingCurrency == null)
            {
                throw new InvalidDataException("rewardBillingCurrency is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.RewardBillingCurrency = rewardBillingCurrency;
            }
            // to ensure "merchantName" is required (not null)
            if (merchantName == null)
            {
                throw new InvalidDataException("merchantName is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.MerchantName = merchantName;
            }
            // to ensure "transactionDate" is required (not null)
            if (transactionDate == null)
            {
                throw new InvalidDataException("transactionDate is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.TransactionDate = transactionDate;
            }
            // to ensure "transactionBillingAmount" is required (not null)
            if (transactionBillingAmount == null)
            {
                throw new InvalidDataException("transactionBillingAmount is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.TransactionBillingAmount = transactionBillingAmount;
            }
            // to ensure "transactionSettlementAmount" is required (not null)
            if (transactionSettlementAmount == null)
            {
                throw new InvalidDataException("transactionSettlementAmount is a required property for NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest and cannot be null");
            }
            else
            {
                this.TransactionSettlementAmount = transactionSettlementAmount;
            }
            this.Remarks = remarks;
        }
        
        /// <summary>
        /// This field provides the unique request ID generated from the VOX platform. Will be used for tracking and audit purposes
        /// </summary>
        /// <value>This field provides the unique request ID generated from the VOX platform. Will be used for tracking and audit purposes</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// This field specifies the VOP transaction ID of the original transaction, that triggered the reward.
        /// </summary>
        /// <value>This field specifies the VOP transaction ID of the original transaction, that triggered the reward.</value>
        [DataMember(Name="vopTransactionId", EmitDefaultValue=false)]
        public string VopTransactionId { get; set; }

        /// <summary>
        /// This field specifies the action to be performed for the request.Valid Value is Notify
        /// </summary>
        /// <value>This field specifies the action to be performed for the request.Valid Value is Notify</value>
        [DataMember(Name="actionType", EmitDefaultValue=false)]
        public string ActionType { get; set; }

        /// <summary>
        /// This field specifies the Distributor ID. Important when an aggregator (who is serving for more than one distributor) is building the API end point.
        /// </summary>
        /// <value>This field specifies the Distributor ID. Important when an aggregator (who is serving for more than one distributor) is building the API end point.</value>
        [DataMember(Name="distributorId", EmitDefaultValue=false)]
        public string DistributorId { get; set; }

        /// <summary>
        /// This field provides the card id generated during cardholder enrolment at VOX.
        /// </summary>
        /// <value>This field provides the card id generated during cardholder enrolment at VOX.</value>
        [DataMember(Name="cardId", EmitDefaultValue=false)]
        public string CardId { get; set; }

        /// <summary>
        /// This field provides the external user id generated during cardholder enrolment at VOX.
        /// </summary>
        /// <value>This field provides the external user id generated during cardholder enrolment at VOX.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// This field specifies the reward credit status.Valid Values are Successful, Eligible, Failed
        /// </summary>
        /// <value>This field specifies the reward credit status.Valid Values are Successful, Eligible, Failed</value>
        [DataMember(Name="creditStatus", EmitDefaultValue=false)]
        public string CreditStatus { get; set; }

        /// <summary>
        /// This field specifies the date and time which the reward request is initiated in the format YYYY-MM-DD HH:MM:SS
        /// </summary>
        /// <value>This field specifies the date and time which the reward request is initiated in the format YYYY-MM-DD HH:MM:SS</value>
        [DataMember(Name="requestDateTime", EmitDefaultValue=false)]
        public string RequestDateTime { get; set; }

        /// <summary>
        /// This will be the VOX qualified offer ID, which the reward is given, Will be used for tracking and audit purposes.
        /// </summary>
        /// <value>This will be the VOX qualified offer ID, which the reward is given, Will be used for tracking and audit purposes.</value>
        [DataMember(Name="offerId", EmitDefaultValue=false)]
        public int? OfferId { get; set; }

        /// <summary>
        /// This field specifies the reward currency of the original offer
        /// </summary>
        /// <value>This field specifies the reward currency of the original offer</value>
        [DataMember(Name="settlementCurrency", EmitDefaultValue=false)]
        public string SettlementCurrency { get; set; }

        /// <summary>
        /// This field specifies the cashback reward value in Settlement Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00
        /// </summary>
        /// <value>This field specifies the cashback reward value in Settlement Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00</value>
        [DataMember(Name="rewardSettlementCurrency", EmitDefaultValue=false)]
        public double? RewardSettlementCurrency { get; set; }

        /// <summary>
        /// This field specifies the customer purchase currency derived from the VOP transaction.
        /// </summary>
        /// <value>This field specifies the customer purchase currency derived from the VOP transaction.</value>
        [DataMember(Name="billingCurrency", EmitDefaultValue=false)]
        public string BillingCurrency { get; set; }

        /// <summary>
        /// This field specifies the cashback reward value in Settlement Billing Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00
        /// </summary>
        /// <value>This field specifies the cashback reward value in Settlement Billing Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00</value>
        [DataMember(Name="rewardBillingCurrency", EmitDefaultValue=false)]
        public double? RewardBillingCurrency { get; set; }

        /// <summary>
        /// This field provides the merchant name
        /// </summary>
        /// <value>This field provides the merchant name</value>
        [DataMember(Name="merchantName", EmitDefaultValue=false)]
        public string MerchantName { get; set; }

        /// <summary>
        /// This field specifies the transaction date retrieved from the VOP Transaction in the format YYYY-MM-DD HH:MM:SS
        /// </summary>
        /// <value>This field specifies the transaction date retrieved from the VOP Transaction in the format YYYY-MM-DD HH:MM:SS</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        public string TransactionDate { get; set; }

        /// <summary>
        /// This field specifies transaction amount in billing currency as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00
        /// </summary>
        /// <value>This field specifies transaction amount in billing currency as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00</value>
        [DataMember(Name="transactionBillingAmount", EmitDefaultValue=false)]
        public double? TransactionBillingAmount { get; set; }

        /// <summary>
        /// This field specifies transaction amount in settlement currency  as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00
        /// </summary>
        /// <value>This field specifies transaction amount in settlement currency  as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00</value>
        [DataMember(Name="transactionSettlementAmount", EmitDefaultValue=false)]
        public double? TransactionSettlementAmount { get; set; }

        /// <summary>
        /// This field is used to pass additional information required by the partner for their records. This can pass an empty value as well.
        /// </summary>
        /// <value>This field is used to pass additional information required by the partner for their records. This can pass an empty value as well.</value>
        [DataMember(Name="remarks", EmitDefaultValue=false)]
        public string Remarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  VopTransactionId: ").Append(VopTransactionId).Append("\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  DistributorId: ").Append(DistributorId).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreditStatus: ").Append(CreditStatus).Append("\n");
            sb.Append("  RequestDateTime: ").Append(RequestDateTime).Append("\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  SettlementCurrency: ").Append(SettlementCurrency).Append("\n");
            sb.Append("  RewardSettlementCurrency: ").Append(RewardSettlementCurrency).Append("\n");
            sb.Append("  BillingCurrency: ").Append(BillingCurrency).Append("\n");
            sb.Append("  RewardBillingCurrency: ").Append(RewardBillingCurrency).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  TransactionBillingAmount: ").Append(TransactionBillingAmount).Append("\n");
            sb.Append("  TransactionSettlementAmount: ").Append(TransactionSettlementAmount).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest);
        }

        /// <summary>
        /// Returns true if NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.VopTransactionId == input.VopTransactionId ||
                    (this.VopTransactionId != null &&
                    this.VopTransactionId.Equals(input.VopTransactionId))
                ) && 
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                    this.ActionType.Equals(input.ActionType))
                ) && 
                (
                    this.DistributorId == input.DistributorId ||
                    (this.DistributorId != null &&
                    this.DistributorId.Equals(input.DistributorId))
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CreditStatus == input.CreditStatus ||
                    (this.CreditStatus != null &&
                    this.CreditStatus.Equals(input.CreditStatus))
                ) && 
                (
                    this.RequestDateTime == input.RequestDateTime ||
                    (this.RequestDateTime != null &&
                    this.RequestDateTime.Equals(input.RequestDateTime))
                ) && 
                (
                    this.OfferId == input.OfferId ||
                    (this.OfferId != null &&
                    this.OfferId.Equals(input.OfferId))
                ) && 
                (
                    this.SettlementCurrency == input.SettlementCurrency ||
                    (this.SettlementCurrency != null &&
                    this.SettlementCurrency.Equals(input.SettlementCurrency))
                ) && 
                (
                    this.RewardSettlementCurrency == input.RewardSettlementCurrency ||
                    (this.RewardSettlementCurrency != null &&
                    this.RewardSettlementCurrency.Equals(input.RewardSettlementCurrency))
                ) && 
                (
                    this.BillingCurrency == input.BillingCurrency ||
                    (this.BillingCurrency != null &&
                    this.BillingCurrency.Equals(input.BillingCurrency))
                ) && 
                (
                    this.RewardBillingCurrency == input.RewardBillingCurrency ||
                    (this.RewardBillingCurrency != null &&
                    this.RewardBillingCurrency.Equals(input.RewardBillingCurrency))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.TransactionBillingAmount == input.TransactionBillingAmount ||
                    (this.TransactionBillingAmount != null &&
                    this.TransactionBillingAmount.Equals(input.TransactionBillingAmount))
                ) && 
                (
                    this.TransactionSettlementAmount == input.TransactionSettlementAmount ||
                    (this.TransactionSettlementAmount != null &&
                    this.TransactionSettlementAmount.Equals(input.TransactionSettlementAmount))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.VopTransactionId != null)
                    hashCode = hashCode * 59 + this.VopTransactionId.GetHashCode();
                if (this.ActionType != null)
                    hashCode = hashCode * 59 + this.ActionType.GetHashCode();
                if (this.DistributorId != null)
                    hashCode = hashCode * 59 + this.DistributorId.GetHashCode();
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.CreditStatus != null)
                    hashCode = hashCode * 59 + this.CreditStatus.GetHashCode();
                if (this.RequestDateTime != null)
                    hashCode = hashCode * 59 + this.RequestDateTime.GetHashCode();
                if (this.OfferId != null)
                    hashCode = hashCode * 59 + this.OfferId.GetHashCode();
                if (this.SettlementCurrency != null)
                    hashCode = hashCode * 59 + this.SettlementCurrency.GetHashCode();
                if (this.RewardSettlementCurrency != null)
                    hashCode = hashCode * 59 + this.RewardSettlementCurrency.GetHashCode();
                if (this.BillingCurrency != null)
                    hashCode = hashCode * 59 + this.BillingCurrency.GetHashCode();
                if (this.RewardBillingCurrency != null)
                    hashCode = hashCode * 59 + this.RewardBillingCurrency.GetHashCode();
                if (this.MerchantName != null)
                    hashCode = hashCode * 59 + this.MerchantName.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.TransactionBillingAmount != null)
                    hashCode = hashCode * 59 + this.TransactionBillingAmount.GetHashCode();
                if (this.TransactionSettlementAmount != null)
                    hashCode = hashCode * 59 + this.TransactionSettlementAmount.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
