/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditCardLimitDetails
    /// </summary>
    [DataContract]
        public partial class CreditCardLimitDetails :  IEquatable<CreditCardLimitDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardLimitDetails" /> class.
        /// </summary>
        /// <param name="currentContactlessWthoutPinPmtLimit">Transaction limit set by the customer for the contact less payments without pin.</param>
        /// <param name="posSpendingLimitAmount">Point Sale Transaction Limit for the Credit card depends on customer selection.</param>
        /// <param name="internetPurchaseLimitAmount">Non Point of Sale Transaction Limit for the Credit Card. Example: Online Transaction.</param>
        /// <param name="dailyAtmWithdrawalLimitAmount">Field to indicate the limit on local ATM withdrawal amount.</param>
        /// <param name="dailyTransactionLimitAmount">This is Daily accumulated Transaction amount Limit and set by customer..</param>
        /// <param name="internetPurchaseActivationFlag">The indicator to enable/disable online purchase transaction (E-commerce)..</param>
        /// <param name="domesticTransaction">domesticTransaction.</param>
        /// <param name="internationalTransaction">internationalTransaction.</param>
        public CreditCardLimitDetails(decimal? currentContactlessWthoutPinPmtLimit = default(decimal?), double? posSpendingLimitAmount = default(double?), double? internetPurchaseLimitAmount = default(double?), double? dailyAtmWithdrawalLimitAmount = default(double?), double? dailyTransactionLimitAmount = default(double?), bool? internetPurchaseActivationFlag = default(bool?), DomesticTransaction domesticTransaction = default(DomesticTransaction), InternationalTransaction internationalTransaction = default(InternationalTransaction))
        {
            this.CurrentContactlessWthoutPinPmtLimit = currentContactlessWthoutPinPmtLimit;
            this.PosSpendingLimitAmount = posSpendingLimitAmount;
            this.InternetPurchaseLimitAmount = internetPurchaseLimitAmount;
            this.DailyAtmWithdrawalLimitAmount = dailyAtmWithdrawalLimitAmount;
            this.DailyTransactionLimitAmount = dailyTransactionLimitAmount;
            this.InternetPurchaseActivationFlag = internetPurchaseActivationFlag;
            this.DomesticTransaction = domesticTransaction;
            this.InternationalTransaction = internationalTransaction;
        }
        
        /// <summary>
        /// Transaction limit set by the customer for the contact less payments without pin
        /// </summary>
        /// <value>Transaction limit set by the customer for the contact less payments without pin</value>
        [DataMember(Name="currentContactlessWthoutPinPmtLimit", EmitDefaultValue=false)]
        public decimal? CurrentContactlessWthoutPinPmtLimit { get; set; }

        /// <summary>
        /// Point Sale Transaction Limit for the Credit card depends on customer selection
        /// </summary>
        /// <value>Point Sale Transaction Limit for the Credit card depends on customer selection</value>
        [DataMember(Name="posSpendingLimitAmount", EmitDefaultValue=false)]
        public double? PosSpendingLimitAmount { get; set; }

        /// <summary>
        /// Non Point of Sale Transaction Limit for the Credit Card. Example: Online Transaction
        /// </summary>
        /// <value>Non Point of Sale Transaction Limit for the Credit Card. Example: Online Transaction</value>
        [DataMember(Name="internetPurchaseLimitAmount", EmitDefaultValue=false)]
        public double? InternetPurchaseLimitAmount { get; set; }

        /// <summary>
        /// Field to indicate the limit on local ATM withdrawal amount
        /// </summary>
        /// <value>Field to indicate the limit on local ATM withdrawal amount</value>
        [DataMember(Name="dailyAtmWithdrawalLimitAmount", EmitDefaultValue=false)]
        public double? DailyAtmWithdrawalLimitAmount { get; set; }

        /// <summary>
        /// This is Daily accumulated Transaction amount Limit and set by customer.
        /// </summary>
        /// <value>This is Daily accumulated Transaction amount Limit and set by customer.</value>
        [DataMember(Name="dailyTransactionLimitAmount", EmitDefaultValue=false)]
        public double? DailyTransactionLimitAmount { get; set; }

        /// <summary>
        /// The indicator to enable/disable online purchase transaction (E-commerce).
        /// </summary>
        /// <value>The indicator to enable/disable online purchase transaction (E-commerce).</value>
        [DataMember(Name="internetPurchaseActivationFlag", EmitDefaultValue=false)]
        public bool? InternetPurchaseActivationFlag { get; set; }

        /// <summary>
        /// Gets or Sets DomesticTransaction
        /// </summary>
        [DataMember(Name="domesticTransaction", EmitDefaultValue=false)]
        public DomesticTransaction DomesticTransaction { get; set; }

        /// <summary>
        /// Gets or Sets InternationalTransaction
        /// </summary>
        [DataMember(Name="internationalTransaction", EmitDefaultValue=false)]
        public InternationalTransaction InternationalTransaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardLimitDetails {\n");
            sb.Append("  CurrentContactlessWthoutPinPmtLimit: ").Append(CurrentContactlessWthoutPinPmtLimit).Append("\n");
            sb.Append("  PosSpendingLimitAmount: ").Append(PosSpendingLimitAmount).Append("\n");
            sb.Append("  InternetPurchaseLimitAmount: ").Append(InternetPurchaseLimitAmount).Append("\n");
            sb.Append("  DailyAtmWithdrawalLimitAmount: ").Append(DailyAtmWithdrawalLimitAmount).Append("\n");
            sb.Append("  DailyTransactionLimitAmount: ").Append(DailyTransactionLimitAmount).Append("\n");
            sb.Append("  InternetPurchaseActivationFlag: ").Append(InternetPurchaseActivationFlag).Append("\n");
            sb.Append("  DomesticTransaction: ").Append(DomesticTransaction).Append("\n");
            sb.Append("  InternationalTransaction: ").Append(InternationalTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardLimitDetails);
        }

        /// <summary>
        /// Returns true if CreditCardLimitDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardLimitDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardLimitDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentContactlessWthoutPinPmtLimit == input.CurrentContactlessWthoutPinPmtLimit ||
                    (this.CurrentContactlessWthoutPinPmtLimit != null &&
                    this.CurrentContactlessWthoutPinPmtLimit.Equals(input.CurrentContactlessWthoutPinPmtLimit))
                ) && 
                (
                    this.PosSpendingLimitAmount == input.PosSpendingLimitAmount ||
                    (this.PosSpendingLimitAmount != null &&
                    this.PosSpendingLimitAmount.Equals(input.PosSpendingLimitAmount))
                ) && 
                (
                    this.InternetPurchaseLimitAmount == input.InternetPurchaseLimitAmount ||
                    (this.InternetPurchaseLimitAmount != null &&
                    this.InternetPurchaseLimitAmount.Equals(input.InternetPurchaseLimitAmount))
                ) && 
                (
                    this.DailyAtmWithdrawalLimitAmount == input.DailyAtmWithdrawalLimitAmount ||
                    (this.DailyAtmWithdrawalLimitAmount != null &&
                    this.DailyAtmWithdrawalLimitAmount.Equals(input.DailyAtmWithdrawalLimitAmount))
                ) && 
                (
                    this.DailyTransactionLimitAmount == input.DailyTransactionLimitAmount ||
                    (this.DailyTransactionLimitAmount != null &&
                    this.DailyTransactionLimitAmount.Equals(input.DailyTransactionLimitAmount))
                ) && 
                (
                    this.InternetPurchaseActivationFlag == input.InternetPurchaseActivationFlag ||
                    (this.InternetPurchaseActivationFlag != null &&
                    this.InternetPurchaseActivationFlag.Equals(input.InternetPurchaseActivationFlag))
                ) && 
                (
                    this.DomesticTransaction == input.DomesticTransaction ||
                    (this.DomesticTransaction != null &&
                    this.DomesticTransaction.Equals(input.DomesticTransaction))
                ) && 
                (
                    this.InternationalTransaction == input.InternationalTransaction ||
                    (this.InternationalTransaction != null &&
                    this.InternationalTransaction.Equals(input.InternationalTransaction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentContactlessWthoutPinPmtLimit != null)
                    hashCode = hashCode * 59 + this.CurrentContactlessWthoutPinPmtLimit.GetHashCode();
                if (this.PosSpendingLimitAmount != null)
                    hashCode = hashCode * 59 + this.PosSpendingLimitAmount.GetHashCode();
                if (this.InternetPurchaseLimitAmount != null)
                    hashCode = hashCode * 59 + this.InternetPurchaseLimitAmount.GetHashCode();
                if (this.DailyAtmWithdrawalLimitAmount != null)
                    hashCode = hashCode * 59 + this.DailyAtmWithdrawalLimitAmount.GetHashCode();
                if (this.DailyTransactionLimitAmount != null)
                    hashCode = hashCode * 59 + this.DailyTransactionLimitAmount.GetHashCode();
                if (this.InternetPurchaseActivationFlag != null)
                    hashCode = hashCode * 59 + this.InternetPurchaseActivationFlag.GetHashCode();
                if (this.DomesticTransaction != null)
                    hashCode = hashCode * 59 + this.DomesticTransaction.GetHashCode();
                if (this.InternationalTransaction != null)
                    hashCode = hashCode * 59 + this.InternationalTransaction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
