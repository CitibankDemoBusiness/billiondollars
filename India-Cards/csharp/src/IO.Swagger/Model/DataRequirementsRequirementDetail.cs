/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataRequirementsRequirementDetail
    /// </summary>
    [DataContract]
        public partial class DataRequirementsRequirementDetail :  IEquatable<DataRequirementsRequirementDetail>, IValidatableObject
    {
        /// <summary>
        /// Nationality of the applicant
        /// </summary>
        /// <value>Nationality of the applicant</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum NationalityEnum
        {
            /// <summary>
            /// Enum Malaysian for value: malaysian
            /// </summary>
            [EnumMember(Value = "malaysian")]
            Malaysian = 1,
            /// <summary>
            /// Enum Nonmalaysian for value: non_malaysian
            /// </summary>
            [EnumMember(Value = "non_malaysian")]
            Nonmalaysian = 2,
            /// <summary>
            /// Enum Any for value: any
            /// </summary>
            [EnumMember(Value = "any")]
            Any = 3        }
        /// <summary>
        /// Nationality of the applicant
        /// </summary>
        /// <value>Nationality of the applicant</value>
        [DataMember(Name="nationality", EmitDefaultValue=false)]
        public NationalityEnum Nationality { get; set; }
        /// <summary>
        /// Resident status of the applicant
        /// </summary>
        /// <value>Resident status of the applicant</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ResidencyEnum
        {
            /// <summary>
            /// Enum Resident for value: resident
            /// </summary>
            [EnumMember(Value = "resident")]
            Resident = 1,
            /// <summary>
            /// Enum Nonresident for value: non_resident
            /// </summary>
            [EnumMember(Value = "non_resident")]
            Nonresident = 2,
            /// <summary>
            /// Enum Any for value: any
            /// </summary>
            [EnumMember(Value = "any")]
            Any = 3        }
        /// <summary>
        /// Resident status of the applicant
        /// </summary>
        /// <value>Resident status of the applicant</value>
        [DataMember(Name="residency", EmitDefaultValue=false)]
        public ResidencyEnum Residency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataRequirementsRequirementDetail" /> class.
        /// </summary>
        /// <param name="nationality">Nationality of the applicant (required).</param>
        /// <param name="nationalityRemark">Remark on nationality.</param>
        /// <param name="residency">Resident status of the applicant (required).</param>
        /// <param name="accountHolderFlag">Requirement to have account with the bank.</param>
        /// <param name="applicant">applicant.</param>
        public DataRequirementsRequirementDetail(NationalityEnum nationality = default(NationalityEnum), string nationalityRemark = default(string), ResidencyEnum residency = default(ResidencyEnum), bool? accountHolderFlag = default(bool?), List<DataRequirementsApplicant> applicant = default(List<DataRequirementsApplicant>))
        {
            // to ensure "nationality" is required (not null)
            if (nationality == null)
            {
                throw new InvalidDataException("nationality is a required property for DataRequirementsRequirementDetail and cannot be null");
            }
            else
            {
                this.Nationality = nationality;
            }
            // to ensure "residency" is required (not null)
            if (residency == null)
            {
                throw new InvalidDataException("residency is a required property for DataRequirementsRequirementDetail and cannot be null");
            }
            else
            {
                this.Residency = residency;
            }
            this.NationalityRemark = nationalityRemark;
            this.AccountHolderFlag = accountHolderFlag;
            this.Applicant = applicant;
        }
        

        /// <summary>
        /// Remark on nationality
        /// </summary>
        /// <value>Remark on nationality</value>
        [DataMember(Name="nationality_remark", EmitDefaultValue=false)]
        public string NationalityRemark { get; set; }


        /// <summary>
        /// Requirement to have account with the bank
        /// </summary>
        /// <value>Requirement to have account with the bank</value>
        [DataMember(Name="account_holder_flag", EmitDefaultValue=false)]
        public bool? AccountHolderFlag { get; set; }

        /// <summary>
        /// Gets or Sets Applicant
        /// </summary>
        [DataMember(Name="applicant", EmitDefaultValue=false)]
        public List<DataRequirementsApplicant> Applicant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataRequirementsRequirementDetail {\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  NationalityRemark: ").Append(NationalityRemark).Append("\n");
            sb.Append("  Residency: ").Append(Residency).Append("\n");
            sb.Append("  AccountHolderFlag: ").Append(AccountHolderFlag).Append("\n");
            sb.Append("  Applicant: ").Append(Applicant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataRequirementsRequirementDetail);
        }

        /// <summary>
        /// Returns true if DataRequirementsRequirementDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DataRequirementsRequirementDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataRequirementsRequirementDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nationality == input.Nationality ||
                    (this.Nationality != null &&
                    this.Nationality.Equals(input.Nationality))
                ) && 
                (
                    this.NationalityRemark == input.NationalityRemark ||
                    (this.NationalityRemark != null &&
                    this.NationalityRemark.Equals(input.NationalityRemark))
                ) && 
                (
                    this.Residency == input.Residency ||
                    (this.Residency != null &&
                    this.Residency.Equals(input.Residency))
                ) && 
                (
                    this.AccountHolderFlag == input.AccountHolderFlag ||
                    (this.AccountHolderFlag != null &&
                    this.AccountHolderFlag.Equals(input.AccountHolderFlag))
                ) && 
                (
                    this.Applicant == input.Applicant ||
                    this.Applicant != null &&
                    input.Applicant != null &&
                    this.Applicant.SequenceEqual(input.Applicant)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nationality != null)
                    hashCode = hashCode * 59 + this.Nationality.GetHashCode();
                if (this.NationalityRemark != null)
                    hashCode = hashCode * 59 + this.NationalityRemark.GetHashCode();
                if (this.Residency != null)
                    hashCode = hashCode * 59 + this.Residency.GetHashCode();
                if (this.AccountHolderFlag != null)
                    hashCode = hashCode * 59 + this.AccountHolderFlag.GetHashCode();
                if (this.Applicant != null)
                    hashCode = hashCode * 59 + this.Applicant.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
