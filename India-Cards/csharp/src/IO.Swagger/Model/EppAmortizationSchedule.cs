/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EppAmortizationSchedule
    /// </summary>
    [DataContract]
        public partial class EppAmortizationSchedule :  IEquatable<EppAmortizationSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EppAmortizationSchedule" /> class.
        /// </summary>
        /// <param name="installmentNumber">Installment number (required).</param>
        /// <param name="installmentAmount">Installment amount to be payed by customer in order to repay the loan. (required).</param>
        /// <param name="principalAmount"> The portion of the Principal Amount Paid for the loan. (required).</param>
        /// <param name="installmentInterestAmount">The interest  amount to be paid as installment. (required).</param>
        /// <param name="outstandingPrincipalAmount">Principal amount component that is yet to be paid by borrower for the loan..</param>
        /// <param name="installmentDate">Installment date in  MM/YYYY format.</param>
        public EppAmortizationSchedule(string installmentNumber = default(string), double? installmentAmount = default(double?), double? principalAmount = default(double?), double? installmentInterestAmount = default(double?), double? outstandingPrincipalAmount = default(double?), string installmentDate = default(string))
        {
            // to ensure "installmentNumber" is required (not null)
            if (installmentNumber == null)
            {
                throw new InvalidDataException("installmentNumber is a required property for EppAmortizationSchedule and cannot be null");
            }
            else
            {
                this.InstallmentNumber = installmentNumber;
            }
            // to ensure "installmentAmount" is required (not null)
            if (installmentAmount == null)
            {
                throw new InvalidDataException("installmentAmount is a required property for EppAmortizationSchedule and cannot be null");
            }
            else
            {
                this.InstallmentAmount = installmentAmount;
            }
            // to ensure "principalAmount" is required (not null)
            if (principalAmount == null)
            {
                throw new InvalidDataException("principalAmount is a required property for EppAmortizationSchedule and cannot be null");
            }
            else
            {
                this.PrincipalAmount = principalAmount;
            }
            // to ensure "installmentInterestAmount" is required (not null)
            if (installmentInterestAmount == null)
            {
                throw new InvalidDataException("installmentInterestAmount is a required property for EppAmortizationSchedule and cannot be null");
            }
            else
            {
                this.InstallmentInterestAmount = installmentInterestAmount;
            }
            this.OutstandingPrincipalAmount = outstandingPrincipalAmount;
            this.InstallmentDate = installmentDate;
        }
        
        /// <summary>
        /// Installment number
        /// </summary>
        /// <value>Installment number</value>
        [DataMember(Name="installmentNumber", EmitDefaultValue=false)]
        public string InstallmentNumber { get; set; }

        /// <summary>
        /// Installment amount to be payed by customer in order to repay the loan.
        /// </summary>
        /// <value>Installment amount to be payed by customer in order to repay the loan.</value>
        [DataMember(Name="installmentAmount", EmitDefaultValue=false)]
        public double? InstallmentAmount { get; set; }

        /// <summary>
        ///  The portion of the Principal Amount Paid for the loan.
        /// </summary>
        /// <value> The portion of the Principal Amount Paid for the loan.</value>
        [DataMember(Name="principalAmount", EmitDefaultValue=false)]
        public double? PrincipalAmount { get; set; }

        /// <summary>
        /// The interest  amount to be paid as installment.
        /// </summary>
        /// <value>The interest  amount to be paid as installment.</value>
        [DataMember(Name="installmentInterestAmount", EmitDefaultValue=false)]
        public double? InstallmentInterestAmount { get; set; }

        /// <summary>
        /// Principal amount component that is yet to be paid by borrower for the loan.
        /// </summary>
        /// <value>Principal amount component that is yet to be paid by borrower for the loan.</value>
        [DataMember(Name="outstandingPrincipalAmount", EmitDefaultValue=false)]
        public double? OutstandingPrincipalAmount { get; set; }

        /// <summary>
        /// Installment date in  MM/YYYY format
        /// </summary>
        /// <value>Installment date in  MM/YYYY format</value>
        [DataMember(Name="installmentDate", EmitDefaultValue=false)]
        public string InstallmentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EppAmortizationSchedule {\n");
            sb.Append("  InstallmentNumber: ").Append(InstallmentNumber).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("  PrincipalAmount: ").Append(PrincipalAmount).Append("\n");
            sb.Append("  InstallmentInterestAmount: ").Append(InstallmentInterestAmount).Append("\n");
            sb.Append("  OutstandingPrincipalAmount: ").Append(OutstandingPrincipalAmount).Append("\n");
            sb.Append("  InstallmentDate: ").Append(InstallmentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EppAmortizationSchedule);
        }

        /// <summary>
        /// Returns true if EppAmortizationSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of EppAmortizationSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EppAmortizationSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstallmentNumber == input.InstallmentNumber ||
                    (this.InstallmentNumber != null &&
                    this.InstallmentNumber.Equals(input.InstallmentNumber))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                ) && 
                (
                    this.PrincipalAmount == input.PrincipalAmount ||
                    (this.PrincipalAmount != null &&
                    this.PrincipalAmount.Equals(input.PrincipalAmount))
                ) && 
                (
                    this.InstallmentInterestAmount == input.InstallmentInterestAmount ||
                    (this.InstallmentInterestAmount != null &&
                    this.InstallmentInterestAmount.Equals(input.InstallmentInterestAmount))
                ) && 
                (
                    this.OutstandingPrincipalAmount == input.OutstandingPrincipalAmount ||
                    (this.OutstandingPrincipalAmount != null &&
                    this.OutstandingPrincipalAmount.Equals(input.OutstandingPrincipalAmount))
                ) && 
                (
                    this.InstallmentDate == input.InstallmentDate ||
                    (this.InstallmentDate != null &&
                    this.InstallmentDate.Equals(input.InstallmentDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstallmentNumber != null)
                    hashCode = hashCode * 59 + this.InstallmentNumber.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                if (this.PrincipalAmount != null)
                    hashCode = hashCode * 59 + this.PrincipalAmount.GetHashCode();
                if (this.InstallmentInterestAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentInterestAmount.GetHashCode();
                if (this.OutstandingPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.OutstandingPrincipalAmount.GetHashCode();
                if (this.InstallmentDate != null)
                    hashCode = hashCode * 59 + this.InstallmentDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
