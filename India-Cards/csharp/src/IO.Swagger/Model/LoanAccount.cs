/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoanAccount
    /// </summary>
    [DataContract]
        public partial class LoanAccount :  IEquatable<LoanAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanAccount" /> class.
        /// </summary>
        /// <param name="transactionDescription">Transaction Description.</param>
        /// <param name="loanReferenceNumber">Unique refrence number associated with the loan..</param>
        /// <param name="loanAmount">Loan Amount.</param>
        /// <param name="loanStartDate">Start date of the loan.Date in ISO 8601, YYYY-MM-DD format.</param>
        /// <param name="loanTenure">Tenure of loan against card. It is considered in terms of number of months..</param>
        /// <param name="installmentAmount">Amount of money a borrower has to pay as installment..</param>
        /// <param name="processingChargeAmount">Charges levied on applicant by the bank to process the loan..</param>
        /// <param name="annualPercentageRate">Annual Percentage Rate.</param>
        /// <param name="effectiveInterestRate">Effective Percentage Rate.</param>
        /// <param name="installmentCycle">Intallment Cycle.</param>
        /// <param name="remainingLoanAmount">Remaining Loan Amount (required).</param>
        /// <param name="loanRemainingTermNumber">Remaining term of installment loan (required).</param>
        public LoanAccount(string transactionDescription = default(string), string loanReferenceNumber = default(string), double? loanAmount = default(double?), DateTime? loanStartDate = default(DateTime?), int? loanTenure = default(int?), double? installmentAmount = default(double?), double? processingChargeAmount = default(double?), double? annualPercentageRate = default(double?), double? effectiveInterestRate = default(double?), int? installmentCycle = default(int?), double? remainingLoanAmount = default(double?), int? loanRemainingTermNumber = default(int?))
        {
            // to ensure "remainingLoanAmount" is required (not null)
            if (remainingLoanAmount == null)
            {
                throw new InvalidDataException("remainingLoanAmount is a required property for LoanAccount and cannot be null");
            }
            else
            {
                this.RemainingLoanAmount = remainingLoanAmount;
            }
            // to ensure "loanRemainingTermNumber" is required (not null)
            if (loanRemainingTermNumber == null)
            {
                throw new InvalidDataException("loanRemainingTermNumber is a required property for LoanAccount and cannot be null");
            }
            else
            {
                this.LoanRemainingTermNumber = loanRemainingTermNumber;
            }
            this.TransactionDescription = transactionDescription;
            this.LoanReferenceNumber = loanReferenceNumber;
            this.LoanAmount = loanAmount;
            this.LoanStartDate = loanStartDate;
            this.LoanTenure = loanTenure;
            this.InstallmentAmount = installmentAmount;
            this.ProcessingChargeAmount = processingChargeAmount;
            this.AnnualPercentageRate = annualPercentageRate;
            this.EffectiveInterestRate = effectiveInterestRate;
            this.InstallmentCycle = installmentCycle;
        }
        
        /// <summary>
        /// Transaction Description
        /// </summary>
        /// <value>Transaction Description</value>
        [DataMember(Name="transactionDescription", EmitDefaultValue=false)]
        public string TransactionDescription { get; set; }

        /// <summary>
        /// Unique refrence number associated with the loan.
        /// </summary>
        /// <value>Unique refrence number associated with the loan.</value>
        [DataMember(Name="loanReferenceNumber", EmitDefaultValue=false)]
        public string LoanReferenceNumber { get; set; }

        /// <summary>
        /// Loan Amount
        /// </summary>
        /// <value>Loan Amount</value>
        [DataMember(Name="loanAmount", EmitDefaultValue=false)]
        public double? LoanAmount { get; set; }

        /// <summary>
        /// Start date of the loan.Date in ISO 8601, YYYY-MM-DD format
        /// </summary>
        /// <value>Start date of the loan.Date in ISO 8601, YYYY-MM-DD format</value>
        [DataMember(Name="loanStartDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LoanStartDate { get; set; }

        /// <summary>
        /// Tenure of loan against card. It is considered in terms of number of months.
        /// </summary>
        /// <value>Tenure of loan against card. It is considered in terms of number of months.</value>
        [DataMember(Name="loanTenure", EmitDefaultValue=false)]
        public int? LoanTenure { get; set; }

        /// <summary>
        /// Amount of money a borrower has to pay as installment.
        /// </summary>
        /// <value>Amount of money a borrower has to pay as installment.</value>
        [DataMember(Name="installmentAmount", EmitDefaultValue=false)]
        public double? InstallmentAmount { get; set; }

        /// <summary>
        /// Charges levied on applicant by the bank to process the loan.
        /// </summary>
        /// <value>Charges levied on applicant by the bank to process the loan.</value>
        [DataMember(Name="processingChargeAmount", EmitDefaultValue=false)]
        public double? ProcessingChargeAmount { get; set; }

        /// <summary>
        /// Annual Percentage Rate
        /// </summary>
        /// <value>Annual Percentage Rate</value>
        [DataMember(Name="annualPercentageRate", EmitDefaultValue=false)]
        public double? AnnualPercentageRate { get; set; }

        /// <summary>
        /// Effective Percentage Rate
        /// </summary>
        /// <value>Effective Percentage Rate</value>
        [DataMember(Name="effectiveInterestRate", EmitDefaultValue=false)]
        public double? EffectiveInterestRate { get; set; }

        /// <summary>
        /// Intallment Cycle
        /// </summary>
        /// <value>Intallment Cycle</value>
        [DataMember(Name="installmentCycle", EmitDefaultValue=false)]
        public int? InstallmentCycle { get; set; }

        /// <summary>
        /// Remaining Loan Amount
        /// </summary>
        /// <value>Remaining Loan Amount</value>
        [DataMember(Name="remainingLoanAmount", EmitDefaultValue=false)]
        public double? RemainingLoanAmount { get; set; }

        /// <summary>
        /// Remaining term of installment loan
        /// </summary>
        /// <value>Remaining term of installment loan</value>
        [DataMember(Name="loanRemainingTermNumber", EmitDefaultValue=false)]
        public int? LoanRemainingTermNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanAccount {\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("  LoanReferenceNumber: ").Append(LoanReferenceNumber).Append("\n");
            sb.Append("  LoanAmount: ").Append(LoanAmount).Append("\n");
            sb.Append("  LoanStartDate: ").Append(LoanStartDate).Append("\n");
            sb.Append("  LoanTenure: ").Append(LoanTenure).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("  ProcessingChargeAmount: ").Append(ProcessingChargeAmount).Append("\n");
            sb.Append("  AnnualPercentageRate: ").Append(AnnualPercentageRate).Append("\n");
            sb.Append("  EffectiveInterestRate: ").Append(EffectiveInterestRate).Append("\n");
            sb.Append("  InstallmentCycle: ").Append(InstallmentCycle).Append("\n");
            sb.Append("  RemainingLoanAmount: ").Append(RemainingLoanAmount).Append("\n");
            sb.Append("  LoanRemainingTermNumber: ").Append(LoanRemainingTermNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanAccount);
        }

        /// <summary>
        /// Returns true if LoanAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionDescription == input.TransactionDescription ||
                    (this.TransactionDescription != null &&
                    this.TransactionDescription.Equals(input.TransactionDescription))
                ) && 
                (
                    this.LoanReferenceNumber == input.LoanReferenceNumber ||
                    (this.LoanReferenceNumber != null &&
                    this.LoanReferenceNumber.Equals(input.LoanReferenceNumber))
                ) && 
                (
                    this.LoanAmount == input.LoanAmount ||
                    (this.LoanAmount != null &&
                    this.LoanAmount.Equals(input.LoanAmount))
                ) && 
                (
                    this.LoanStartDate == input.LoanStartDate ||
                    (this.LoanStartDate != null &&
                    this.LoanStartDate.Equals(input.LoanStartDate))
                ) && 
                (
                    this.LoanTenure == input.LoanTenure ||
                    (this.LoanTenure != null &&
                    this.LoanTenure.Equals(input.LoanTenure))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                ) && 
                (
                    this.ProcessingChargeAmount == input.ProcessingChargeAmount ||
                    (this.ProcessingChargeAmount != null &&
                    this.ProcessingChargeAmount.Equals(input.ProcessingChargeAmount))
                ) && 
                (
                    this.AnnualPercentageRate == input.AnnualPercentageRate ||
                    (this.AnnualPercentageRate != null &&
                    this.AnnualPercentageRate.Equals(input.AnnualPercentageRate))
                ) && 
                (
                    this.EffectiveInterestRate == input.EffectiveInterestRate ||
                    (this.EffectiveInterestRate != null &&
                    this.EffectiveInterestRate.Equals(input.EffectiveInterestRate))
                ) && 
                (
                    this.InstallmentCycle == input.InstallmentCycle ||
                    (this.InstallmentCycle != null &&
                    this.InstallmentCycle.Equals(input.InstallmentCycle))
                ) && 
                (
                    this.RemainingLoanAmount == input.RemainingLoanAmount ||
                    (this.RemainingLoanAmount != null &&
                    this.RemainingLoanAmount.Equals(input.RemainingLoanAmount))
                ) && 
                (
                    this.LoanRemainingTermNumber == input.LoanRemainingTermNumber ||
                    (this.LoanRemainingTermNumber != null &&
                    this.LoanRemainingTermNumber.Equals(input.LoanRemainingTermNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionDescription != null)
                    hashCode = hashCode * 59 + this.TransactionDescription.GetHashCode();
                if (this.LoanReferenceNumber != null)
                    hashCode = hashCode * 59 + this.LoanReferenceNumber.GetHashCode();
                if (this.LoanAmount != null)
                    hashCode = hashCode * 59 + this.LoanAmount.GetHashCode();
                if (this.LoanStartDate != null)
                    hashCode = hashCode * 59 + this.LoanStartDate.GetHashCode();
                if (this.LoanTenure != null)
                    hashCode = hashCode * 59 + this.LoanTenure.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                if (this.ProcessingChargeAmount != null)
                    hashCode = hashCode * 59 + this.ProcessingChargeAmount.GetHashCode();
                if (this.AnnualPercentageRate != null)
                    hashCode = hashCode * 59 + this.AnnualPercentageRate.GetHashCode();
                if (this.EffectiveInterestRate != null)
                    hashCode = hashCode * 59 + this.EffectiveInterestRate.GetHashCode();
                if (this.InstallmentCycle != null)
                    hashCode = hashCode * 59 + this.InstallmentCycle.GetHashCode();
                if (this.RemainingLoanAmount != null)
                    hashCode = hashCode * 59 + this.RemainingLoanAmount.GetHashCode();
                if (this.LoanRemainingTermNumber != null)
                    hashCode = hashCode * 59 + this.LoanRemainingTermNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
