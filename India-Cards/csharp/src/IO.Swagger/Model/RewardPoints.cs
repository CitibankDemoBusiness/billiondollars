/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RewardPoints
    /// </summary>
    [DataContract]
        public partial class RewardPoints :  IEquatable<RewardPoints>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardPoints" /> class.
        /// </summary>
        /// <param name="rewardCategoryCode">Reward category code. This is a reference data field. Please use /v1/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description..</param>
        /// <param name="basePointBalance">Points or Miles accumulated by the user at the start of the statement period.</param>
        /// <param name="earnedRewardPoints">Points or Miles earned by the user for the statement period..</param>
        /// <param name="bonusRewardPoints">Bonus Points or Miles  earned by a user for the statement period. Bonus programs operate under the umbrella of a specific reward program since multiple bonus programs can be defined for one reward program..</param>
        /// <param name="adjustedRewardPoints">Number of rewards points or miles adjusted for the user in the statement period. It will contain the value of adjusted points as a result of incorrect addition/redemption..</param>
        /// <param name="redeemedRewardPoints">Bonus Points or Miles  redeemed  by a user for the statement period..</param>
        /// <param name="availablePointBalance">This field indicate the reward points or miles currently available to the user..</param>
        public RewardPoints(string rewardCategoryCode = default(string), decimal? basePointBalance = default(decimal?), decimal? earnedRewardPoints = default(decimal?), decimal? bonusRewardPoints = default(decimal?), decimal? adjustedRewardPoints = default(decimal?), decimal? redeemedRewardPoints = default(decimal?), decimal? availablePointBalance = default(decimal?))
        {
            this.RewardCategoryCode = rewardCategoryCode;
            this.BasePointBalance = basePointBalance;
            this.EarnedRewardPoints = earnedRewardPoints;
            this.BonusRewardPoints = bonusRewardPoints;
            this.AdjustedRewardPoints = adjustedRewardPoints;
            this.RedeemedRewardPoints = redeemedRewardPoints;
            this.AvailablePointBalance = availablePointBalance;
        }
        
        /// <summary>
        /// Reward category code. This is a reference data field. Please use /v1/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Reward category code. This is a reference data field. Please use /v1/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.</value>
        [DataMember(Name="rewardCategoryCode", EmitDefaultValue=false)]
        public string RewardCategoryCode { get; set; }

        /// <summary>
        /// Points or Miles accumulated by the user at the start of the statement period
        /// </summary>
        /// <value>Points or Miles accumulated by the user at the start of the statement period</value>
        [DataMember(Name="basePointBalance", EmitDefaultValue=false)]
        public decimal? BasePointBalance { get; set; }

        /// <summary>
        /// Points or Miles earned by the user for the statement period.
        /// </summary>
        /// <value>Points or Miles earned by the user for the statement period.</value>
        [DataMember(Name="earnedRewardPoints", EmitDefaultValue=false)]
        public decimal? EarnedRewardPoints { get; set; }

        /// <summary>
        /// Bonus Points or Miles  earned by a user for the statement period. Bonus programs operate under the umbrella of a specific reward program since multiple bonus programs can be defined for one reward program.
        /// </summary>
        /// <value>Bonus Points or Miles  earned by a user for the statement period. Bonus programs operate under the umbrella of a specific reward program since multiple bonus programs can be defined for one reward program.</value>
        [DataMember(Name="bonusRewardPoints", EmitDefaultValue=false)]
        public decimal? BonusRewardPoints { get; set; }

        /// <summary>
        /// Number of rewards points or miles adjusted for the user in the statement period. It will contain the value of adjusted points as a result of incorrect addition/redemption.
        /// </summary>
        /// <value>Number of rewards points or miles adjusted for the user in the statement period. It will contain the value of adjusted points as a result of incorrect addition/redemption.</value>
        [DataMember(Name="adjustedRewardPoints", EmitDefaultValue=false)]
        public decimal? AdjustedRewardPoints { get; set; }

        /// <summary>
        /// Bonus Points or Miles  redeemed  by a user for the statement period.
        /// </summary>
        /// <value>Bonus Points or Miles  redeemed  by a user for the statement period.</value>
        [DataMember(Name="redeemedRewardPoints", EmitDefaultValue=false)]
        public decimal? RedeemedRewardPoints { get; set; }

        /// <summary>
        /// This field indicate the reward points or miles currently available to the user.
        /// </summary>
        /// <value>This field indicate the reward points or miles currently available to the user.</value>
        [DataMember(Name="availablePointBalance", EmitDefaultValue=false)]
        public decimal? AvailablePointBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RewardPoints {\n");
            sb.Append("  RewardCategoryCode: ").Append(RewardCategoryCode).Append("\n");
            sb.Append("  BasePointBalance: ").Append(BasePointBalance).Append("\n");
            sb.Append("  EarnedRewardPoints: ").Append(EarnedRewardPoints).Append("\n");
            sb.Append("  BonusRewardPoints: ").Append(BonusRewardPoints).Append("\n");
            sb.Append("  AdjustedRewardPoints: ").Append(AdjustedRewardPoints).Append("\n");
            sb.Append("  RedeemedRewardPoints: ").Append(RedeemedRewardPoints).Append("\n");
            sb.Append("  AvailablePointBalance: ").Append(AvailablePointBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RewardPoints);
        }

        /// <summary>
        /// Returns true if RewardPoints instances are equal
        /// </summary>
        /// <param name="input">Instance of RewardPoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RewardPoints input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RewardCategoryCode == input.RewardCategoryCode ||
                    (this.RewardCategoryCode != null &&
                    this.RewardCategoryCode.Equals(input.RewardCategoryCode))
                ) && 
                (
                    this.BasePointBalance == input.BasePointBalance ||
                    (this.BasePointBalance != null &&
                    this.BasePointBalance.Equals(input.BasePointBalance))
                ) && 
                (
                    this.EarnedRewardPoints == input.EarnedRewardPoints ||
                    (this.EarnedRewardPoints != null &&
                    this.EarnedRewardPoints.Equals(input.EarnedRewardPoints))
                ) && 
                (
                    this.BonusRewardPoints == input.BonusRewardPoints ||
                    (this.BonusRewardPoints != null &&
                    this.BonusRewardPoints.Equals(input.BonusRewardPoints))
                ) && 
                (
                    this.AdjustedRewardPoints == input.AdjustedRewardPoints ||
                    (this.AdjustedRewardPoints != null &&
                    this.AdjustedRewardPoints.Equals(input.AdjustedRewardPoints))
                ) && 
                (
                    this.RedeemedRewardPoints == input.RedeemedRewardPoints ||
                    (this.RedeemedRewardPoints != null &&
                    this.RedeemedRewardPoints.Equals(input.RedeemedRewardPoints))
                ) && 
                (
                    this.AvailablePointBalance == input.AvailablePointBalance ||
                    (this.AvailablePointBalance != null &&
                    this.AvailablePointBalance.Equals(input.AvailablePointBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RewardCategoryCode != null)
                    hashCode = hashCode * 59 + this.RewardCategoryCode.GetHashCode();
                if (this.BasePointBalance != null)
                    hashCode = hashCode * 59 + this.BasePointBalance.GetHashCode();
                if (this.EarnedRewardPoints != null)
                    hashCode = hashCode * 59 + this.EarnedRewardPoints.GetHashCode();
                if (this.BonusRewardPoints != null)
                    hashCode = hashCode * 59 + this.BonusRewardPoints.GetHashCode();
                if (this.AdjustedRewardPoints != null)
                    hashCode = hashCode * 59 + this.AdjustedRewardPoints.GetHashCode();
                if (this.RedeemedRewardPoints != null)
                    hashCode = hashCode * 59 + this.RedeemedRewardPoints.GetHashCode();
                if (this.AvailablePointBalance != null)
                    hashCode = hashCode * 59 + this.AvailablePointBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
