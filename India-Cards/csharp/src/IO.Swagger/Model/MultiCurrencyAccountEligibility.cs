/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MultiCurrencyAccountEligibility
    /// </summary>
    [DataContract]
        public partial class MultiCurrencyAccountEligibility :  IEquatable<MultiCurrencyAccountEligibility>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiCurrencyAccountEligibility" /> class.
        /// </summary>
        /// <param name="displayCardNumber">A masked card number that can be displayed to the customer. (required).</param>
        /// <param name="cardId">The customer card identifier in encrypted format (required).</param>
        /// <param name="atmCardFlag">Flag to identify if the cardNumbre in response is ATM card..</param>
        /// <param name="cardEnrollmentStatus">This field is to indicate if the  card is enrolled for Multi Currency Account or not.Please use /v1/apac/utilities/referenceData/{cardEnrollmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="eligibleForCurrencyAddition">Eligible to add new currency.This is a reference data field. Please use /utilities/referenceData/{ eligibleForCurrencyAddition} resource to get valid value of this field with description..</param>
        /// <param name="relationshipId">The customer relationship identifier in encrypted format.</param>
        /// <param name="relationshipIdType">The type of customer relationship.</param>
        /// <param name="accountDetails">accountDetails.</param>
        /// <param name="currencyDetails">currencyDetails.</param>
        public MultiCurrencyAccountEligibility(string displayCardNumber = default(string), string cardId = default(string), bool? atmCardFlag = default(bool?), string cardEnrollmentStatus = default(string), string eligibleForCurrencyAddition = default(string), string relationshipId = default(string), string relationshipIdType = default(string), List<AccountDtls> accountDetails = default(List<AccountDtls>), List<CurrencyDetails> currencyDetails = default(List<CurrencyDetails>))
        {
            // to ensure "displayCardNumber" is required (not null)
            if (displayCardNumber == null)
            {
                throw new InvalidDataException("displayCardNumber is a required property for MultiCurrencyAccountEligibility and cannot be null");
            }
            else
            {
                this.DisplayCardNumber = displayCardNumber;
            }
            // to ensure "cardId" is required (not null)
            if (cardId == null)
            {
                throw new InvalidDataException("cardId is a required property for MultiCurrencyAccountEligibility and cannot be null");
            }
            else
            {
                this.CardId = cardId;
            }
            this.AtmCardFlag = atmCardFlag;
            this.CardEnrollmentStatus = cardEnrollmentStatus;
            this.EligibleForCurrencyAddition = eligibleForCurrencyAddition;
            this.RelationshipId = relationshipId;
            this.RelationshipIdType = relationshipIdType;
            this.AccountDetails = accountDetails;
            this.CurrencyDetails = currencyDetails;
        }
        
        /// <summary>
        /// A masked card number that can be displayed to the customer.
        /// </summary>
        /// <value>A masked card number that can be displayed to the customer.</value>
        [DataMember(Name="displayCardNumber", EmitDefaultValue=false)]
        public string DisplayCardNumber { get; set; }

        /// <summary>
        /// The customer card identifier in encrypted format
        /// </summary>
        /// <value>The customer card identifier in encrypted format</value>
        [DataMember(Name="cardId", EmitDefaultValue=false)]
        public string CardId { get; set; }

        /// <summary>
        /// Flag to identify if the cardNumbre in response is ATM card.
        /// </summary>
        /// <value>Flag to identify if the cardNumbre in response is ATM card.</value>
        [DataMember(Name="atmCardFlag", EmitDefaultValue=false)]
        public bool? AtmCardFlag { get; set; }

        /// <summary>
        /// This field is to indicate if the  card is enrolled for Multi Currency Account or not.Please use /v1/apac/utilities/referenceData/{cardEnrollmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>This field is to indicate if the  card is enrolled for Multi Currency Account or not.Please use /v1/apac/utilities/referenceData/{cardEnrollmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="cardEnrollmentStatus", EmitDefaultValue=false)]
        public string CardEnrollmentStatus { get; set; }

        /// <summary>
        /// Eligible to add new currency.This is a reference data field. Please use /utilities/referenceData/{ eligibleForCurrencyAddition} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Eligible to add new currency.This is a reference data field. Please use /utilities/referenceData/{ eligibleForCurrencyAddition} resource to get valid value of this field with description.</value>
        [DataMember(Name="eligibleForCurrencyAddition", EmitDefaultValue=false)]
        public string EligibleForCurrencyAddition { get; set; }

        /// <summary>
        /// The customer relationship identifier in encrypted format
        /// </summary>
        /// <value>The customer relationship identifier in encrypted format</value>
        [DataMember(Name="relationshipId", EmitDefaultValue=false)]
        public string RelationshipId { get; set; }

        /// <summary>
        /// The type of customer relationship
        /// </summary>
        /// <value>The type of customer relationship</value>
        [DataMember(Name="relationshipIdType", EmitDefaultValue=false)]
        public string RelationshipIdType { get; set; }

        /// <summary>
        /// Gets or Sets AccountDetails
        /// </summary>
        [DataMember(Name="accountDetails", EmitDefaultValue=false)]
        public List<AccountDtls> AccountDetails { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyDetails
        /// </summary>
        [DataMember(Name="currencyDetails", EmitDefaultValue=false)]
        public List<CurrencyDetails> CurrencyDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultiCurrencyAccountEligibility {\n");
            sb.Append("  DisplayCardNumber: ").Append(DisplayCardNumber).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  AtmCardFlag: ").Append(AtmCardFlag).Append("\n");
            sb.Append("  CardEnrollmentStatus: ").Append(CardEnrollmentStatus).Append("\n");
            sb.Append("  EligibleForCurrencyAddition: ").Append(EligibleForCurrencyAddition).Append("\n");
            sb.Append("  RelationshipId: ").Append(RelationshipId).Append("\n");
            sb.Append("  RelationshipIdType: ").Append(RelationshipIdType).Append("\n");
            sb.Append("  AccountDetails: ").Append(AccountDetails).Append("\n");
            sb.Append("  CurrencyDetails: ").Append(CurrencyDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultiCurrencyAccountEligibility);
        }

        /// <summary>
        /// Returns true if MultiCurrencyAccountEligibility instances are equal
        /// </summary>
        /// <param name="input">Instance of MultiCurrencyAccountEligibility to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultiCurrencyAccountEligibility input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayCardNumber == input.DisplayCardNumber ||
                    (this.DisplayCardNumber != null &&
                    this.DisplayCardNumber.Equals(input.DisplayCardNumber))
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.AtmCardFlag == input.AtmCardFlag ||
                    (this.AtmCardFlag != null &&
                    this.AtmCardFlag.Equals(input.AtmCardFlag))
                ) && 
                (
                    this.CardEnrollmentStatus == input.CardEnrollmentStatus ||
                    (this.CardEnrollmentStatus != null &&
                    this.CardEnrollmentStatus.Equals(input.CardEnrollmentStatus))
                ) && 
                (
                    this.EligibleForCurrencyAddition == input.EligibleForCurrencyAddition ||
                    (this.EligibleForCurrencyAddition != null &&
                    this.EligibleForCurrencyAddition.Equals(input.EligibleForCurrencyAddition))
                ) && 
                (
                    this.RelationshipId == input.RelationshipId ||
                    (this.RelationshipId != null &&
                    this.RelationshipId.Equals(input.RelationshipId))
                ) && 
                (
                    this.RelationshipIdType == input.RelationshipIdType ||
                    (this.RelationshipIdType != null &&
                    this.RelationshipIdType.Equals(input.RelationshipIdType))
                ) && 
                (
                    this.AccountDetails == input.AccountDetails ||
                    this.AccountDetails != null &&
                    input.AccountDetails != null &&
                    this.AccountDetails.SequenceEqual(input.AccountDetails)
                ) && 
                (
                    this.CurrencyDetails == input.CurrencyDetails ||
                    this.CurrencyDetails != null &&
                    input.CurrencyDetails != null &&
                    this.CurrencyDetails.SequenceEqual(input.CurrencyDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayCardNumber != null)
                    hashCode = hashCode * 59 + this.DisplayCardNumber.GetHashCode();
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.AtmCardFlag != null)
                    hashCode = hashCode * 59 + this.AtmCardFlag.GetHashCode();
                if (this.CardEnrollmentStatus != null)
                    hashCode = hashCode * 59 + this.CardEnrollmentStatus.GetHashCode();
                if (this.EligibleForCurrencyAddition != null)
                    hashCode = hashCode * 59 + this.EligibleForCurrencyAddition.GetHashCode();
                if (this.RelationshipId != null)
                    hashCode = hashCode * 59 + this.RelationshipId.GetHashCode();
                if (this.RelationshipIdType != null)
                    hashCode = hashCode * 59 + this.RelationshipIdType.GetHashCode();
                if (this.AccountDetails != null)
                    hashCode = hashCode * 59 + this.AccountDetails.GetHashCode();
                if (this.CurrencyDetails != null)
                    hashCode = hashCode * 59 + this.CurrencyDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
