/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HistoryAndIntradayTransaction
    /// </summary>
    [DataContract]
        public partial class HistoryAndIntradayTransaction :  IEquatable<HistoryAndIntradayTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryAndIntradayTransaction" /> class.
        /// </summary>
        /// <param name="activityIndicator">This field is used to indicate whether History or Current or All transactions records to be fetched. This is a reference data field. Please use /v1/utilities/referenceData/{activityIndicator} resource to get possible values of this field with descriptions..</param>
        /// <param name="moreIndicator">This field is used for  pagination, it indicates that more records are available for retrieval..</param>
        /// <param name="nextStartIndex">For pagination - the starting index for retrieving the next page/batch of records..</param>
        public HistoryAndIntradayTransaction(string activityIndicator = default(string), string moreIndicator = default(string), string nextStartIndex = default(string))
        {
            this.ActivityIndicator = activityIndicator;
            this.MoreIndicator = moreIndicator;
            this.NextStartIndex = nextStartIndex;
        }
        
        /// <summary>
        /// This field is used to indicate whether History or Current or All transactions records to be fetched. This is a reference data field. Please use /v1/utilities/referenceData/{activityIndicator} resource to get possible values of this field with descriptions.
        /// </summary>
        /// <value>This field is used to indicate whether History or Current or All transactions records to be fetched. This is a reference data field. Please use /v1/utilities/referenceData/{activityIndicator} resource to get possible values of this field with descriptions.</value>
        [DataMember(Name="activityIndicator", EmitDefaultValue=false)]
        public string ActivityIndicator { get; set; }

        /// <summary>
        /// This field is used for  pagination, it indicates that more records are available for retrieval.
        /// </summary>
        /// <value>This field is used for  pagination, it indicates that more records are available for retrieval.</value>
        [DataMember(Name="moreIndicator", EmitDefaultValue=false)]
        public string MoreIndicator { get; set; }

        /// <summary>
        /// For pagination - the starting index for retrieving the next page/batch of records.
        /// </summary>
        /// <value>For pagination - the starting index for retrieving the next page/batch of records.</value>
        [DataMember(Name="nextStartIndex", EmitDefaultValue=false)]
        public string NextStartIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoryAndIntradayTransaction {\n");
            sb.Append("  ActivityIndicator: ").Append(ActivityIndicator).Append("\n");
            sb.Append("  MoreIndicator: ").Append(MoreIndicator).Append("\n");
            sb.Append("  NextStartIndex: ").Append(NextStartIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoryAndIntradayTransaction);
        }

        /// <summary>
        /// Returns true if HistoryAndIntradayTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoryAndIntradayTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoryAndIntradayTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityIndicator == input.ActivityIndicator ||
                    (this.ActivityIndicator != null &&
                    this.ActivityIndicator.Equals(input.ActivityIndicator))
                ) && 
                (
                    this.MoreIndicator == input.MoreIndicator ||
                    (this.MoreIndicator != null &&
                    this.MoreIndicator.Equals(input.MoreIndicator))
                ) && 
                (
                    this.NextStartIndex == input.NextStartIndex ||
                    (this.NextStartIndex != null &&
                    this.NextStartIndex.Equals(input.NextStartIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityIndicator != null)
                    hashCode = hashCode * 59 + this.ActivityIndicator.GetHashCode();
                if (this.MoreIndicator != null)
                    hashCode = hashCode * 59 + this.MoreIndicator.GetHashCode();
                if (this.NextStartIndex != null)
                    hashCode = hashCode * 59 + this.NextStartIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
