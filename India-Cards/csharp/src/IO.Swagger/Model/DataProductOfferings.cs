/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataProductOfferings
    /// </summary>
    [DataContract]
        public partial class DataProductOfferings :  IEquatable<DataProductOfferings>, IValidatableObject
    {
        /// <summary>
        /// Type of offering
        /// </summary>
        /// <value>Type of offering</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CategoryEnum
        {
            /// <summary>
            /// Enum Rewardcashback for value: reward_cashback
            /// </summary>
            [EnumMember(Value = "reward_cashback")]
            Rewardcashback = 1,
            /// <summary>
            /// Enum Airmiles for value: air_miles
            /// </summary>
            [EnumMember(Value = "air_miles")]
            Airmiles = 2,
            /// <summary>
            /// Enum Featurebenefit for value: feature_benefit
            /// </summary>
            [EnumMember(Value = "feature_benefit")]
            Featurebenefit = 3        }
        /// <summary>
        /// Type of offering
        /// </summary>
        /// <value>Type of offering</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// Defines Item
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ItemEnum
        {
            /// <summary>
            /// Enum Bookstore for value: bookstore
            /// </summary>
            [EnumMember(Value = "bookstore")]
            Bookstore = 1,
            /// <summary>
            /// Enum Cashlesstransaction for value: cashless_transaction
            /// </summary>
            [EnumMember(Value = "cashless_transaction")]
            Cashlesstransaction = 2,
            /// <summary>
            /// Enum Cinema for value: cinema
            /// </summary>
            [EnumMember(Value = "cinema")]
            Cinema = 3,
            /// <summary>
            /// Enum Departmentstore for value: department_store
            /// </summary>
            [EnumMember(Value = "department_store")]
            Departmentstore = 4,
            /// <summary>
            /// Enum Dining for value: dining
            /// </summary>
            [EnumMember(Value = "dining")]
            Dining = 5,
            /// <summary>
            /// Enum Education for value: education
            /// </summary>
            [EnumMember(Value = "education")]
            Education = 6,
            /// <summary>
            /// Enum Entertainment for value: entertainment
            /// </summary>
            [EnumMember(Value = "entertainment")]
            Entertainment = 7,
            /// <summary>
            /// Enum Expressautopay for value: express_autopay
            /// </summary>
            [EnumMember(Value = "express_autopay")]
            Expressautopay = 8,
            /// <summary>
            /// Enum Gold for value: gold
            /// </summary>
            [EnumMember(Value = "gold")]
            Gold = 9,
            /// <summary>
            /// Enum Groceries for value: groceries
            /// </summary>
            [EnumMember(Value = "groceries")]
            Groceries = 10,
            /// <summary>
            /// Enum Highway for value: highway
            /// </summary>
            [EnumMember(Value = "highway")]
            Highway = 11,
            /// <summary>
            /// Enum Hotel for value: hotel
            /// </summary>
            [EnumMember(Value = "hotel")]
            Hotel = 12,
            /// <summary>
            /// Enum Installmentplan for value: installment_plan
            /// </summary>
            [EnumMember(Value = "installment_plan")]
            Installmentplan = 13,
            /// <summary>
            /// Enum Insurancepremium for value: insurance_premium
            /// </summary>
            [EnumMember(Value = "insurance_premium")]
            Insurancepremium = 14,
            /// <summary>
            /// Enum Localretail for value: local_retail
            /// </summary>
            [EnumMember(Value = "local_retail")]
            Localretail = 15,
            /// <summary>
            /// Enum Membershipday for value: membership_day
            /// </summary>
            [EnumMember(Value = "membership_day")]
            Membershipday = 16,
            /// <summary>
            /// Enum Mobiletelco for value: mobile_telco
            /// </summary>
            [EnumMember(Value = "mobile_telco")]
            Mobiletelco = 17,
            /// <summary>
            /// Enum Myegservices for value: myeg_services
            /// </summary>
            [EnumMember(Value = "myeg_services")]
            Myegservices = 18,
            /// <summary>
            /// Enum Onlineairticket for value: online_air_ticket
            /// </summary>
            [EnumMember(Value = "online_air_ticket")]
            Onlineairticket = 19,
            /// <summary>
            /// Enum Onlinebillpayment for value: online_bill_payment
            /// </summary>
            [EnumMember(Value = "online_bill_payment")]
            Onlinebillpayment = 20,
            /// <summary>
            /// Enum Onlineshopping for value: online_shopping
            /// </summary>
            [EnumMember(Value = "online_shopping")]
            Onlineshopping = 21,
            /// <summary>
            /// Enum Others for value: others
            /// </summary>
            [EnumMember(Value = "others")]
            Others = 22,
            /// <summary>
            /// Enum Oversearetail for value: oversea_retail
            /// </summary>
            [EnumMember(Value = "oversea_retail")]
            Oversearetail = 23,
            /// <summary>
            /// Enum Petrol for value: petrol
            /// </summary>
            [EnumMember(Value = "petrol")]
            Petrol = 24,
            /// <summary>
            /// Enum Pharmacy for value: pharmacy
            /// </summary>
            [EnumMember(Value = "pharmacy")]
            Pharmacy = 25,
            /// <summary>
            /// Enum Retail for value: retail
            /// </summary>
            [EnumMember(Value = "retail")]
            Retail = 26,
            /// <summary>
            /// Enum Shopping for value: shopping
            /// </summary>
            [EnumMember(Value = "shopping")]
            Shopping = 27,
            /// <summary>
            /// Enum Touchngo for value: touch_n_go
            /// </summary>
            [EnumMember(Value = "touch_n_go")]
            Touchngo = 28,
            /// <summary>
            /// Enum Transport for value: transport
            /// </summary>
            [EnumMember(Value = "transport")]
            Transport = 29,
            /// <summary>
            /// Enum Travel for value: travel
            /// </summary>
            [EnumMember(Value = "travel")]
            Travel = 30,
            /// <summary>
            /// Enum Utilitybill for value: utility_bill
            /// </summary>
            [EnumMember(Value = "utility_bill")]
            Utilitybill = 31,
            /// <summary>
            /// Enum Weekend for value: weekend
            /// </summary>
            [EnumMember(Value = "weekend")]
            Weekend = 32,
            /// <summary>
            /// Enum Asiamiles for value: asia_miles
            /// </summary>
            [EnumMember(Value = "asia_miles")]
            Asiamiles = 33,
            /// <summary>
            /// Enum Bigpointaasia for value: big_point_aasia
            /// </summary>
            [EnumMember(Value = "big_point_aasia")]
            Bigpointaasia = 34,
            /// <summary>
            /// Enum Enrichmas for value: enrich_mas
            /// </summary>
            [EnumMember(Value = "enrich_mas")]
            Enrichmas = 35,
            /// <summary>
            /// Enum Garudamilesid for value: garuda_miles_id
            /// </summary>
            [EnumMember(Value = "garuda_miles_id")]
            Garudamilesid = 36,
            /// <summary>
            /// Enum Krisfylersg for value: krisfyler_sg
            /// </summary>
            [EnumMember(Value = "krisfyler_sg")]
            Krisfylersg = 37,
            /// <summary>
            /// Enum Malindomilesmalindoair for value: malindo_miles_malindoair
            /// </summary>
            [EnumMember(Value = "malindo_miles_malindoair")]
            Malindomilesmalindoair = 38,
            /// <summary>
            /// Enum Staralliance for value: star_alliance
            /// </summary>
            [EnumMember(Value = "star_alliance")]
            Staralliance = 39,
            /// <summary>
            /// Enum Airportspeedpass for value: airport_speed_pass
            /// </summary>
            [EnumMember(Value = "airport_speed_pass")]
            Airportspeedpass = 40,
            /// <summary>
            /// Enum Annualfeewaiver for value: annual_fee_waiver
            /// </summary>
            [EnumMember(Value = "annual_fee_waiver")]
            Annualfeewaiver = 41,
            /// <summary>
            /// Enum Autobillpayment for value: auto_bill_payment
            /// </summary>
            [EnumMember(Value = "auto_bill_payment")]
            Autobillpayment = 42,
            /// <summary>
            /// Enum Balancetransferplan for value: balance_transfer_plan
            /// </summary>
            [EnumMember(Value = "balance_transfer_plan")]
            Balancetransferplan = 43,
            /// <summary>
            /// Enum Cashadvance for value: cash_advance
            /// </summary>
            [EnumMember(Value = "cash_advance")]
            Cashadvance = 44,
            /// <summary>
            /// Enum Cashinstallmentplan for value: cash_installment_plan
            /// </summary>
            [EnumMember(Value = "cash_installment_plan")]
            Cashinstallmentplan = 45,
            /// <summary>
            /// Enum Cashwithdrawal for value: cash_withdrawal
            /// </summary>
            [EnumMember(Value = "cash_withdrawal")]
            Cashwithdrawal = 46,
            /// <summary>
            /// Enum Charityfund for value: charity_fund
            /// </summary>
            [EnumMember(Value = "charity_fund")]
            Charityfund = 47,
            /// <summary>
            /// Enum Conciergeservices for value: concierge_services
            /// </summary>
            [EnumMember(Value = "concierge_services")]
            Conciergeservices = 48,
            /// <summary>
            /// Enum Contactless for value: contactless
            /// </summary>
            [EnumMember(Value = "contactless")]
            Contactless = 49,
            /// <summary>
            /// Enum Diningprivileges for value: dining_privileges
            /// </summary>
            [EnumMember(Value = "dining_privileges")]
            Diningprivileges = 50,
            /// <summary>
            /// Enum Discount for value: discount
            /// </summary>
            [EnumMember(Value = "discount")]
            Discount = 51,
            /// <summary>
            /// Enum Easypaymentplan for value: easy_payment_plan
            /// </summary>
            [EnumMember(Value = "easy_payment_plan")]
            Easypaymentplan = 52,
            /// <summary>
            /// Enum Ecommerceinsurance for value: ecommerce_insurance
            /// </summary>
            [EnumMember(Value = "ecommerce_insurance")]
            Ecommerceinsurance = 53,
            /// <summary>
            /// Enum Emergencychequecashing for value: emergency_cheque_cashing
            /// </summary>
            [EnumMember(Value = "emergency_cheque_cashing")]
            Emergencychequecashing = 54,
            /// <summary>
            /// Enum Globalassistance for value: global_assistance
            /// </summary>
            [EnumMember(Value = "global_assistance")]
            Globalassistance = 55,
            /// <summary>
            /// Enum Golf for value: golf
            /// </summary>
            [EnumMember(Value = "golf")]
            Golf = 56,
            /// <summary>
            /// Enum Partnershipdiscount for value: partnership_discount
            /// </summary>
            [EnumMember(Value = "partnership_discount")]
            Partnershipdiscount = 57,
            /// <summary>
            /// Enum Plazapremiumlounge for value: plaza_premium_lounge
            /// </summary>
            [EnumMember(Value = "plaza_premium_lounge")]
            Plazapremiumlounge = 58,
            /// <summary>
            /// Enum Retailinsurance for value: retail_insurance
            /// </summary>
            [EnumMember(Value = "retail_insurance")]
            Retailinsurance = 59,
            /// <summary>
            /// Enum Travelinsurance for value: travel_insurance
            /// </summary>
            [EnumMember(Value = "travel_insurance")]
            Travelinsurance = 60,
            /// <summary>
            /// Enum Walletguard for value: wallet_guard
            /// </summary>
            [EnumMember(Value = "wallet_guard")]
            Walletguard = 61        }
        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name="item", EmitDefaultValue=false)]
        public ItemEnum Item { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataProductOfferings" /> class.
        /// </summary>
        /// <param name="category">Type of offering (required).</param>
        /// <param name="item">item (required).</param>
        /// <param name="remark">Additional notes for the reward, air miles and feature.</param>
        /// <param name="branding">Branding for specific offering.</param>
        /// <param name="tncUrl">Absolute URL to term and conditions for specific offering.</param>
        public DataProductOfferings(CategoryEnum category = default(CategoryEnum), ItemEnum item = default(ItemEnum), string remark = default(string), string branding = default(string), string tncUrl = default(string))
        {
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new InvalidDataException("category is a required property for DataProductOfferings and cannot be null");
            }
            else
            {
                this.Category = category;
            }
            // to ensure "item" is required (not null)
            if (item == null)
            {
                throw new InvalidDataException("item is a required property for DataProductOfferings and cannot be null");
            }
            else
            {
                this.Item = item;
            }
            this.Remark = remark;
            this.Branding = branding;
            this.TncUrl = tncUrl;
        }
        


        /// <summary>
        /// Additional notes for the reward, air miles and feature
        /// </summary>
        /// <value>Additional notes for the reward, air miles and feature</value>
        [DataMember(Name="remark", EmitDefaultValue=false)]
        public string Remark { get; set; }

        /// <summary>
        /// Branding for specific offering
        /// </summary>
        /// <value>Branding for specific offering</value>
        [DataMember(Name="branding", EmitDefaultValue=false)]
        public string Branding { get; set; }

        /// <summary>
        /// Absolute URL to term and conditions for specific offering
        /// </summary>
        /// <value>Absolute URL to term and conditions for specific offering</value>
        [DataMember(Name="tnc_url", EmitDefaultValue=false)]
        public string TncUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataProductOfferings {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Branding: ").Append(Branding).Append("\n");
            sb.Append("  TncUrl: ").Append(TncUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataProductOfferings);
        }

        /// <summary>
        /// Returns true if DataProductOfferings instances are equal
        /// </summary>
        /// <param name="input">Instance of DataProductOfferings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataProductOfferings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.Remark == input.Remark ||
                    (this.Remark != null &&
                    this.Remark.Equals(input.Remark))
                ) && 
                (
                    this.Branding == input.Branding ||
                    (this.Branding != null &&
                    this.Branding.Equals(input.Branding))
                ) && 
                (
                    this.TncUrl == input.TncUrl ||
                    (this.TncUrl != null &&
                    this.TncUrl.Equals(input.TncUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Item != null)
                    hashCode = hashCode * 59 + this.Item.GetHashCode();
                if (this.Remark != null)
                    hashCode = hashCode * 59 + this.Remark.GetHashCode();
                if (this.Branding != null)
                    hashCode = hashCode * 59 + this.Branding.GetHashCode();
                if (this.TncUrl != null)
                    hashCode = hashCode * 59 + this.TncUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
