/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest
    /// </summary>
    [DataContract]
        public partial class RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest :  IEquatable<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest" /> class.
        /// </summary>
        /// <param name="tokenizedCardNumber">Tokenized card number (required).</param>
        /// <param name="corporateOfficerDetails">corporateOfficerDetails.</param>
        /// <param name="embossedName">Customer Name embossed on the card.</param>
        /// <param name="replacementReasonCode">Reason code for replacement. This is a reference data field. Please use /v1/utilities/referenceData/{replacementReasonCode} resource to get possible values of this field with descriptions.</param>
        public RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest(string tokenizedCardNumber = default(string), CorporateOfficerDetails corporateOfficerDetails = default(CorporateOfficerDetails), string embossedName = default(string), string replacementReasonCode = default(string))
        {
            // to ensure "tokenizedCardNumber" is required (not null)
            if (tokenizedCardNumber == null)
            {
                throw new InvalidDataException("tokenizedCardNumber is a required property for RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest and cannot be null");
            }
            else
            {
                this.TokenizedCardNumber = tokenizedCardNumber;
            }
            this.CorporateOfficerDetails = corporateOfficerDetails;
            this.EmbossedName = embossedName;
            this.ReplacementReasonCode = replacementReasonCode;
        }
        
        /// <summary>
        /// Tokenized card number
        /// </summary>
        /// <value>Tokenized card number</value>
        [DataMember(Name="tokenizedCardNumber", EmitDefaultValue=false)]
        public string TokenizedCardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CorporateOfficerDetails
        /// </summary>
        [DataMember(Name="corporateOfficerDetails", EmitDefaultValue=false)]
        public CorporateOfficerDetails CorporateOfficerDetails { get; set; }

        /// <summary>
        /// Customer Name embossed on the card
        /// </summary>
        /// <value>Customer Name embossed on the card</value>
        [DataMember(Name="embossedName", EmitDefaultValue=false)]
        public string EmbossedName { get; set; }

        /// <summary>
        /// Reason code for replacement. This is a reference data field. Please use /v1/utilities/referenceData/{replacementReasonCode} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>Reason code for replacement. This is a reference data field. Please use /v1/utilities/referenceData/{replacementReasonCode} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="replacementReasonCode", EmitDefaultValue=false)]
        public string ReplacementReasonCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest {\n");
            sb.Append("  TokenizedCardNumber: ").Append(TokenizedCardNumber).Append("\n");
            sb.Append("  CorporateOfficerDetails: ").Append(CorporateOfficerDetails).Append("\n");
            sb.Append("  EmbossedName: ").Append(EmbossedName).Append("\n");
            sb.Append("  ReplacementReasonCode: ").Append(ReplacementReasonCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest);
        }

        /// <summary>
        /// Returns true if RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenizedCardNumber == input.TokenizedCardNumber ||
                    (this.TokenizedCardNumber != null &&
                    this.TokenizedCardNumber.Equals(input.TokenizedCardNumber))
                ) && 
                (
                    this.CorporateOfficerDetails == input.CorporateOfficerDetails ||
                    (this.CorporateOfficerDetails != null &&
                    this.CorporateOfficerDetails.Equals(input.CorporateOfficerDetails))
                ) && 
                (
                    this.EmbossedName == input.EmbossedName ||
                    (this.EmbossedName != null &&
                    this.EmbossedName.Equals(input.EmbossedName))
                ) && 
                (
                    this.ReplacementReasonCode == input.ReplacementReasonCode ||
                    (this.ReplacementReasonCode != null &&
                    this.ReplacementReasonCode.Equals(input.ReplacementReasonCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenizedCardNumber != null)
                    hashCode = hashCode * 59 + this.TokenizedCardNumber.GetHashCode();
                if (this.CorporateOfficerDetails != null)
                    hashCode = hashCode * 59 + this.CorporateOfficerDetails.GetHashCode();
                if (this.EmbossedName != null)
                    hashCode = hashCode * 59 + this.EmbossedName.GetHashCode();
                if (this.ReplacementReasonCode != null)
                    hashCode = hashCode * 59 + this.ReplacementReasonCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
