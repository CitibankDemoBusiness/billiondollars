/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OverseasTravelPlanAddRequest
    /// </summary>
    [DataContract]
        public partial class OverseasTravelPlanAddRequest :  IEquatable<OverseasTravelPlanAddRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OverseasTravelPlanAddRequest" /> class.
        /// </summary>
        /// <param name="countryCodes">countryCodes.</param>
        /// <param name="travelPlanStartDate">Travel plan start date in ISO 8601 date format YYYY-MM-DD (required).</param>
        /// <param name="travelPlanEndDate">Travel plan end date in ISO 8601 date format YYYY-MM-DD (required).</param>
        public OverseasTravelPlanAddRequest(List<CountryCodes> countryCodes = default(List<CountryCodes>), DateTime? travelPlanStartDate = default(DateTime?), DateTime? travelPlanEndDate = default(DateTime?))
        {
            // to ensure "travelPlanStartDate" is required (not null)
            if (travelPlanStartDate == null)
            {
                throw new InvalidDataException("travelPlanStartDate is a required property for OverseasTravelPlanAddRequest and cannot be null");
            }
            else
            {
                this.TravelPlanStartDate = travelPlanStartDate;
            }
            // to ensure "travelPlanEndDate" is required (not null)
            if (travelPlanEndDate == null)
            {
                throw new InvalidDataException("travelPlanEndDate is a required property for OverseasTravelPlanAddRequest and cannot be null");
            }
            else
            {
                this.TravelPlanEndDate = travelPlanEndDate;
            }
            this.CountryCodes = countryCodes;
        }
        
        /// <summary>
        /// Gets or Sets CountryCodes
        /// </summary>
        [DataMember(Name="countryCodes", EmitDefaultValue=false)]
        public List<CountryCodes> CountryCodes { get; set; }

        /// <summary>
        /// Travel plan start date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Travel plan start date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="travelPlanStartDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TravelPlanStartDate { get; set; }

        /// <summary>
        /// Travel plan end date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Travel plan end date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="travelPlanEndDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TravelPlanEndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverseasTravelPlanAddRequest {\n");
            sb.Append("  CountryCodes: ").Append(CountryCodes).Append("\n");
            sb.Append("  TravelPlanStartDate: ").Append(TravelPlanStartDate).Append("\n");
            sb.Append("  TravelPlanEndDate: ").Append(TravelPlanEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverseasTravelPlanAddRequest);
        }

        /// <summary>
        /// Returns true if OverseasTravelPlanAddRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OverseasTravelPlanAddRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverseasTravelPlanAddRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryCodes == input.CountryCodes ||
                    this.CountryCodes != null &&
                    input.CountryCodes != null &&
                    this.CountryCodes.SequenceEqual(input.CountryCodes)
                ) && 
                (
                    this.TravelPlanStartDate == input.TravelPlanStartDate ||
                    (this.TravelPlanStartDate != null &&
                    this.TravelPlanStartDate.Equals(input.TravelPlanStartDate))
                ) && 
                (
                    this.TravelPlanEndDate == input.TravelPlanEndDate ||
                    (this.TravelPlanEndDate != null &&
                    this.TravelPlanEndDate.Equals(input.TravelPlanEndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryCodes != null)
                    hashCode = hashCode * 59 + this.CountryCodes.GetHashCode();
                if (this.TravelPlanStartDate != null)
                    hashCode = hashCode * 59 + this.TravelPlanStartDate.GetHashCode();
                if (this.TravelPlanEndDate != null)
                    hashCode = hashCode * 59 + this.TravelPlanEndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
