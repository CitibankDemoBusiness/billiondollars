/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Meta
    /// </summary>
    [DataContract]
        public partial class Meta :  IEquatable<Meta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Meta" /> class.
        /// </summary>
        /// <param name="bicCode">8-characters SWIFT code (required).</param>
        /// <param name="lastUpdated">Last updated date of product list (required).</param>
        /// <param name="version">API version as published https://github.com/BankNegaraMY/oapi-banking (required).</param>
        /// <param name="totalResult">Number of products returned (required).</param>
        /// <param name="campaignUrl">Absolute URL to active campaign or promotions.</param>
        public Meta(string bicCode = default(string), DateTime? lastUpdated = default(DateTime?), string version = default(string), int? totalResult = default(int?), string campaignUrl = default(string))
        {
            // to ensure "bicCode" is required (not null)
            if (bicCode == null)
            {
                throw new InvalidDataException("bicCode is a required property for Meta and cannot be null");
            }
            else
            {
                this.BicCode = bicCode;
            }
            // to ensure "lastUpdated" is required (not null)
            if (lastUpdated == null)
            {
                throw new InvalidDataException("lastUpdated is a required property for Meta and cannot be null");
            }
            else
            {
                this.LastUpdated = lastUpdated;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for Meta and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            // to ensure "totalResult" is required (not null)
            if (totalResult == null)
            {
                throw new InvalidDataException("totalResult is a required property for Meta and cannot be null");
            }
            else
            {
                this.TotalResult = totalResult;
            }
            this.CampaignUrl = campaignUrl;
        }
        
        /// <summary>
        /// 8-characters SWIFT code
        /// </summary>
        /// <value>8-characters SWIFT code</value>
        [DataMember(Name="bic_code", EmitDefaultValue=false)]
        public string BicCode { get; set; }

        /// <summary>
        /// Last updated date of product list
        /// </summary>
        /// <value>Last updated date of product list</value>
        [DataMember(Name="last_updated", EmitDefaultValue=false)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// API version as published https://github.com/BankNegaraMY/oapi-banking
        /// </summary>
        /// <value>API version as published https://github.com/BankNegaraMY/oapi-banking</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Number of products returned
        /// </summary>
        /// <value>Number of products returned</value>
        [DataMember(Name="total_result", EmitDefaultValue=false)]
        public int? TotalResult { get; set; }

        /// <summary>
        /// Absolute URL to active campaign or promotions
        /// </summary>
        /// <value>Absolute URL to active campaign or promotions</value>
        [DataMember(Name="campaign_url", EmitDefaultValue=false)]
        public string CampaignUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Meta {\n");
            sb.Append("  BicCode: ").Append(BicCode).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  TotalResult: ").Append(TotalResult).Append("\n");
            sb.Append("  CampaignUrl: ").Append(CampaignUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Meta);
        }

        /// <summary>
        /// Returns true if Meta instances are equal
        /// </summary>
        /// <param name="input">Instance of Meta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Meta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BicCode == input.BicCode ||
                    (this.BicCode != null &&
                    this.BicCode.Equals(input.BicCode))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.TotalResult == input.TotalResult ||
                    (this.TotalResult != null &&
                    this.TotalResult.Equals(input.TotalResult))
                ) && 
                (
                    this.CampaignUrl == input.CampaignUrl ||
                    (this.CampaignUrl != null &&
                    this.CampaignUrl.Equals(input.CampaignUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BicCode != null)
                    hashCode = hashCode * 59 + this.BicCode.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.TotalResult != null)
                    hashCode = hashCode * 59 + this.TotalResult.GetHashCode();
                if (this.CampaignUrl != null)
                    hashCode = hashCode * 59 + this.CampaignUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
