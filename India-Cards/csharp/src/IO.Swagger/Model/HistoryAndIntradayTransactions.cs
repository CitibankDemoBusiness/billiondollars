/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HistoryAndIntradayTransactions
    /// </summary>
    [DataContract]
        public partial class HistoryAndIntradayTransactions :  IEquatable<HistoryAndIntradayTransactions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryAndIntradayTransactions" /> class.
        /// </summary>
        /// <param name="nextStartIndex">For pagination - the starting index for retrieving the next page/batch of records..</param>
        /// <param name="moreIndicator">This field indicates that more records are available for retrieval..</param>
        /// <param name="numberOfTransactions">Number of Transactions.</param>
        /// <param name="historyAndIntradayTransactionRecords">historyAndIntradayTransactionRecords.</param>
        public HistoryAndIntradayTransactions(string nextStartIndex = default(string), string moreIndicator = default(string), int? numberOfTransactions = default(int?), List<HistoryAndIntradayTransactionRecords> historyAndIntradayTransactionRecords = default(List<HistoryAndIntradayTransactionRecords>))
        {
            this.NextStartIndex = nextStartIndex;
            this.MoreIndicator = moreIndicator;
            this.NumberOfTransactions = numberOfTransactions;
            this.HistoryAndIntradayTransactionRecords = historyAndIntradayTransactionRecords;
        }
        
        /// <summary>
        /// For pagination - the starting index for retrieving the next page/batch of records.
        /// </summary>
        /// <value>For pagination - the starting index for retrieving the next page/batch of records.</value>
        [DataMember(Name="nextStartIndex", EmitDefaultValue=false)]
        public string NextStartIndex { get; set; }

        /// <summary>
        /// This field indicates that more records are available for retrieval.
        /// </summary>
        /// <value>This field indicates that more records are available for retrieval.</value>
        [DataMember(Name="moreIndicator", EmitDefaultValue=false)]
        public string MoreIndicator { get; set; }

        /// <summary>
        /// Number of Transactions
        /// </summary>
        /// <value>Number of Transactions</value>
        [DataMember(Name="numberOfTransactions", EmitDefaultValue=false)]
        public int? NumberOfTransactions { get; set; }

        /// <summary>
        /// Gets or Sets HistoryAndIntradayTransactionRecords
        /// </summary>
        [DataMember(Name="historyAndIntradayTransactionRecords", EmitDefaultValue=false)]
        public List<HistoryAndIntradayTransactionRecords> HistoryAndIntradayTransactionRecords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoryAndIntradayTransactions {\n");
            sb.Append("  NextStartIndex: ").Append(NextStartIndex).Append("\n");
            sb.Append("  MoreIndicator: ").Append(MoreIndicator).Append("\n");
            sb.Append("  NumberOfTransactions: ").Append(NumberOfTransactions).Append("\n");
            sb.Append("  HistoryAndIntradayTransactionRecords: ").Append(HistoryAndIntradayTransactionRecords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoryAndIntradayTransactions);
        }

        /// <summary>
        /// Returns true if HistoryAndIntradayTransactions instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoryAndIntradayTransactions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoryAndIntradayTransactions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NextStartIndex == input.NextStartIndex ||
                    (this.NextStartIndex != null &&
                    this.NextStartIndex.Equals(input.NextStartIndex))
                ) && 
                (
                    this.MoreIndicator == input.MoreIndicator ||
                    (this.MoreIndicator != null &&
                    this.MoreIndicator.Equals(input.MoreIndicator))
                ) && 
                (
                    this.NumberOfTransactions == input.NumberOfTransactions ||
                    (this.NumberOfTransactions != null &&
                    this.NumberOfTransactions.Equals(input.NumberOfTransactions))
                ) && 
                (
                    this.HistoryAndIntradayTransactionRecords == input.HistoryAndIntradayTransactionRecords ||
                    this.HistoryAndIntradayTransactionRecords != null &&
                    input.HistoryAndIntradayTransactionRecords != null &&
                    this.HistoryAndIntradayTransactionRecords.SequenceEqual(input.HistoryAndIntradayTransactionRecords)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NextStartIndex != null)
                    hashCode = hashCode * 59 + this.NextStartIndex.GetHashCode();
                if (this.MoreIndicator != null)
                    hashCode = hashCode * 59 + this.MoreIndicator.GetHashCode();
                if (this.NumberOfTransactions != null)
                    hashCode = hashCode * 59 + this.NumberOfTransactions.GetHashCode();
                if (this.HistoryAndIntradayTransactionRecords != null)
                    hashCode = hashCode * 59 + this.HistoryAndIntradayTransactionRecords.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
