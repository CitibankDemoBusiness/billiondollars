/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BinaryData
    /// </summary>
    [DataContract]
        public partial class BinaryData :  IEquatable<BinaryData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BinaryData" /> class.
        /// </summary>
        /// <param name="disbursementOption">This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description. (required).</param>
        /// <param name="disbursementAccountId">The account Id of the account to which Loan amount is to be disbursed..</param>
        /// <param name="payeeId">Unique identifier associated with the payee.Typically, this is not displayed to the customer..</param>
        /// <param name="bankDetails">bankDetails.</param>
        public BinaryData(string disbursementOption = default(string), string disbursementAccountId = default(string), string payeeId = default(string), BankDetails bankDetails = default(BankDetails))
        {
            // to ensure "disbursementOption" is required (not null)
            if (disbursementOption == null)
            {
                throw new InvalidDataException("disbursementOption is a required property for BinaryData and cannot be null");
            }
            else
            {
                this.DisbursementOption = disbursementOption;
            }
            this.DisbursementAccountId = disbursementAccountId;
            this.PayeeId = payeeId;
            this.BankDetails = bankDetails;
        }
        
        /// <summary>
        /// This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.
        /// </summary>
        /// <value>This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.</value>
        [DataMember(Name="disbursementOption", EmitDefaultValue=false)]
        public string DisbursementOption { get; set; }

        /// <summary>
        /// The account Id of the account to which Loan amount is to be disbursed.
        /// </summary>
        /// <value>The account Id of the account to which Loan amount is to be disbursed.</value>
        [DataMember(Name="disbursementAccountId", EmitDefaultValue=false)]
        public string DisbursementAccountId { get; set; }

        /// <summary>
        /// Unique identifier associated with the payee.Typically, this is not displayed to the customer.
        /// </summary>
        /// <value>Unique identifier associated with the payee.Typically, this is not displayed to the customer.</value>
        [DataMember(Name="payeeId", EmitDefaultValue=false)]
        public string PayeeId { get; set; }

        /// <summary>
        /// Gets or Sets BankDetails
        /// </summary>
        [DataMember(Name="bankDetails", EmitDefaultValue=false)]
        public BankDetails BankDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BinaryData {\n");
            sb.Append("  DisbursementOption: ").Append(DisbursementOption).Append("\n");
            sb.Append("  DisbursementAccountId: ").Append(DisbursementAccountId).Append("\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  BankDetails: ").Append(BankDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BinaryData);
        }

        /// <summary>
        /// Returns true if BinaryData instances are equal
        /// </summary>
        /// <param name="input">Instance of BinaryData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BinaryData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisbursementOption == input.DisbursementOption ||
                    (this.DisbursementOption != null &&
                    this.DisbursementOption.Equals(input.DisbursementOption))
                ) && 
                (
                    this.DisbursementAccountId == input.DisbursementAccountId ||
                    (this.DisbursementAccountId != null &&
                    this.DisbursementAccountId.Equals(input.DisbursementAccountId))
                ) && 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.BankDetails == input.BankDetails ||
                    (this.BankDetails != null &&
                    this.BankDetails.Equals(input.BankDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisbursementOption != null)
                    hashCode = hashCode * 59 + this.DisbursementOption.GetHashCode();
                if (this.DisbursementAccountId != null)
                    hashCode = hashCode * 59 + this.DisbursementAccountId.GetHashCode();
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.BankDetails != null)
                    hashCode = hashCode * 59 + this.BankDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
