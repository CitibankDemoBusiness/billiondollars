/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InitiateCreditChargeCardCorporateCardsClosureRequest
    /// </summary>
    [DataContract]
        public partial class InitiateCreditChargeCardCorporateCardsClosureRequest :  IEquatable<InitiateCreditChargeCardCorporateCardsClosureRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiateCreditChargeCardCorporateCardsClosureRequest" /> class.
        /// </summary>
        /// <param name="tokenizedCardNumber">Tokenized card number (required).</param>
        /// <param name="corporateOfficerDetails">corporateOfficerDetails.</param>
        /// <param name="cancellationReasonCode">cancellationReasonCode. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationReasonCode} resource to get possible values of this field with descriptions.</param>
        /// <param name="cancellationType">cancellationReasonDescription. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationType} resource to get possible values of this field with descriptions.</param>
        /// <param name="effectiveCancelDate">Cancellation date in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="postalMailCode">Mail letter code if business opt to send letter to customer. This is a reference data field. Please use /v1/utilities/referenceData/{postalMailCode} resource to get possible values of this field with descriptions..</param>
        /// <param name="permenantAccountClosureFlag">Permanent Account Closure Flag.</param>
        /// <param name="consentGivenFlag">This is consent flag from the customer to pay back if any outstanding on that account while closure.</param>
        public InitiateCreditChargeCardCorporateCardsClosureRequest(string tokenizedCardNumber = default(string), CorporateOfficerDetails corporateOfficerDetails = default(CorporateOfficerDetails), string cancellationReasonCode = default(string), string cancellationType = default(string), DateTime? effectiveCancelDate = default(DateTime?), string postalMailCode = default(string), bool? permenantAccountClosureFlag = default(bool?), bool? consentGivenFlag = default(bool?))
        {
            // to ensure "tokenizedCardNumber" is required (not null)
            if (tokenizedCardNumber == null)
            {
                throw new InvalidDataException("tokenizedCardNumber is a required property for InitiateCreditChargeCardCorporateCardsClosureRequest and cannot be null");
            }
            else
            {
                this.TokenizedCardNumber = tokenizedCardNumber;
            }
            this.CorporateOfficerDetails = corporateOfficerDetails;
            this.CancellationReasonCode = cancellationReasonCode;
            this.CancellationType = cancellationType;
            this.EffectiveCancelDate = effectiveCancelDate;
            this.PostalMailCode = postalMailCode;
            this.PermenantAccountClosureFlag = permenantAccountClosureFlag;
            this.ConsentGivenFlag = consentGivenFlag;
        }
        
        /// <summary>
        /// Tokenized card number
        /// </summary>
        /// <value>Tokenized card number</value>
        [DataMember(Name="tokenizedCardNumber", EmitDefaultValue=false)]
        public string TokenizedCardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CorporateOfficerDetails
        /// </summary>
        [DataMember(Name="corporateOfficerDetails", EmitDefaultValue=false)]
        public CorporateOfficerDetails CorporateOfficerDetails { get; set; }

        /// <summary>
        /// cancellationReasonCode. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationReasonCode} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>cancellationReasonCode. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationReasonCode} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="cancellationReasonCode", EmitDefaultValue=false)]
        public string CancellationReasonCode { get; set; }

        /// <summary>
        /// cancellationReasonDescription. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationType} resource to get possible values of this field with descriptions
        /// </summary>
        /// <value>cancellationReasonDescription. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationType} resource to get possible values of this field with descriptions</value>
        [DataMember(Name="cancellationType", EmitDefaultValue=false)]
        public string CancellationType { get; set; }

        /// <summary>
        /// Cancellation date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Cancellation date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="effectiveCancelDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EffectiveCancelDate { get; set; }

        /// <summary>
        /// Mail letter code if business opt to send letter to customer. This is a reference data field. Please use /v1/utilities/referenceData/{postalMailCode} resource to get possible values of this field with descriptions.
        /// </summary>
        /// <value>Mail letter code if business opt to send letter to customer. This is a reference data field. Please use /v1/utilities/referenceData/{postalMailCode} resource to get possible values of this field with descriptions.</value>
        [DataMember(Name="postalMailCode", EmitDefaultValue=false)]
        public string PostalMailCode { get; set; }

        /// <summary>
        /// Permanent Account Closure Flag
        /// </summary>
        /// <value>Permanent Account Closure Flag</value>
        [DataMember(Name="permenantAccountClosureFlag", EmitDefaultValue=false)]
        public bool? PermenantAccountClosureFlag { get; set; }

        /// <summary>
        /// This is consent flag from the customer to pay back if any outstanding on that account while closure
        /// </summary>
        /// <value>This is consent flag from the customer to pay back if any outstanding on that account while closure</value>
        [DataMember(Name="consentGivenFlag", EmitDefaultValue=false)]
        public bool? ConsentGivenFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InitiateCreditChargeCardCorporateCardsClosureRequest {\n");
            sb.Append("  TokenizedCardNumber: ").Append(TokenizedCardNumber).Append("\n");
            sb.Append("  CorporateOfficerDetails: ").Append(CorporateOfficerDetails).Append("\n");
            sb.Append("  CancellationReasonCode: ").Append(CancellationReasonCode).Append("\n");
            sb.Append("  CancellationType: ").Append(CancellationType).Append("\n");
            sb.Append("  EffectiveCancelDate: ").Append(EffectiveCancelDate).Append("\n");
            sb.Append("  PostalMailCode: ").Append(PostalMailCode).Append("\n");
            sb.Append("  PermenantAccountClosureFlag: ").Append(PermenantAccountClosureFlag).Append("\n");
            sb.Append("  ConsentGivenFlag: ").Append(ConsentGivenFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InitiateCreditChargeCardCorporateCardsClosureRequest);
        }

        /// <summary>
        /// Returns true if InitiateCreditChargeCardCorporateCardsClosureRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InitiateCreditChargeCardCorporateCardsClosureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InitiateCreditChargeCardCorporateCardsClosureRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TokenizedCardNumber == input.TokenizedCardNumber ||
                    (this.TokenizedCardNumber != null &&
                    this.TokenizedCardNumber.Equals(input.TokenizedCardNumber))
                ) && 
                (
                    this.CorporateOfficerDetails == input.CorporateOfficerDetails ||
                    (this.CorporateOfficerDetails != null &&
                    this.CorporateOfficerDetails.Equals(input.CorporateOfficerDetails))
                ) && 
                (
                    this.CancellationReasonCode == input.CancellationReasonCode ||
                    (this.CancellationReasonCode != null &&
                    this.CancellationReasonCode.Equals(input.CancellationReasonCode))
                ) && 
                (
                    this.CancellationType == input.CancellationType ||
                    (this.CancellationType != null &&
                    this.CancellationType.Equals(input.CancellationType))
                ) && 
                (
                    this.EffectiveCancelDate == input.EffectiveCancelDate ||
                    (this.EffectiveCancelDate != null &&
                    this.EffectiveCancelDate.Equals(input.EffectiveCancelDate))
                ) && 
                (
                    this.PostalMailCode == input.PostalMailCode ||
                    (this.PostalMailCode != null &&
                    this.PostalMailCode.Equals(input.PostalMailCode))
                ) && 
                (
                    this.PermenantAccountClosureFlag == input.PermenantAccountClosureFlag ||
                    (this.PermenantAccountClosureFlag != null &&
                    this.PermenantAccountClosureFlag.Equals(input.PermenantAccountClosureFlag))
                ) && 
                (
                    this.ConsentGivenFlag == input.ConsentGivenFlag ||
                    (this.ConsentGivenFlag != null &&
                    this.ConsentGivenFlag.Equals(input.ConsentGivenFlag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenizedCardNumber != null)
                    hashCode = hashCode * 59 + this.TokenizedCardNumber.GetHashCode();
                if (this.CorporateOfficerDetails != null)
                    hashCode = hashCode * 59 + this.CorporateOfficerDetails.GetHashCode();
                if (this.CancellationReasonCode != null)
                    hashCode = hashCode * 59 + this.CancellationReasonCode.GetHashCode();
                if (this.CancellationType != null)
                    hashCode = hashCode * 59 + this.CancellationType.GetHashCode();
                if (this.EffectiveCancelDate != null)
                    hashCode = hashCode * 59 + this.EffectiveCancelDate.GetHashCode();
                if (this.PostalMailCode != null)
                    hashCode = hashCode * 59 + this.PostalMailCode.GetHashCode();
                if (this.PermenantAccountClosureFlag != null)
                    hashCode = hashCode * 59 + this.PermenantAccountClosureFlag.GetHashCode();
                if (this.ConsentGivenFlag != null)
                    hashCode = hashCode * 59 + this.ConsentGivenFlag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
