/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Applicant
    /// </summary>
    [DataContract]
        public partial class Applicant :  IEquatable<Applicant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Applicant" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="partnerCustomerDetails">partnerCustomerDetails.</param>
        /// <param name="motherMaidenName">Mother&#x27;s maiden name (required).</param>
        /// <param name="identificationDocumentDetails">identificationDocumentDetails.</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="employmentDetails">employmentDetails (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="consentDetails">consentDetails (required).</param>
        /// <param name="rewardRedemptionAllowedFlag">Flag to indicated whether reward redemption allowed for supplementary. Valid values: true and false.</param>
        /// <param name="demographics">demographics.</param>
        public Applicant(List<Address> address = default(List<Address>), PartnerCustomerDetails partnerCustomerDetails = default(PartnerCustomerDetails), string motherMaidenName = default(string), List<IdentificationDocumentDetails> identificationDocumentDetails = default(List<IdentificationDocumentDetails>), List<Phone> phone = default(List<Phone>), EmploymentDetails employmentDetails = default(EmploymentDetails), Name name = default(Name), List<ConsentDetails> consentDetails = default(List<ConsentDetails>), bool? rewardRedemptionAllowedFlag = default(bool?), Demographics demographics = default(Demographics))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for Applicant and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "motherMaidenName" is required (not null)
            if (motherMaidenName == null)
            {
                throw new InvalidDataException("motherMaidenName is a required property for Applicant and cannot be null");
            }
            else
            {
                this.MotherMaidenName = motherMaidenName;
            }
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for Applicant and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            // to ensure "employmentDetails" is required (not null)
            if (employmentDetails == null)
            {
                throw new InvalidDataException("employmentDetails is a required property for Applicant and cannot be null");
            }
            else
            {
                this.EmploymentDetails = employmentDetails;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Applicant and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "consentDetails" is required (not null)
            if (consentDetails == null)
            {
                throw new InvalidDataException("consentDetails is a required property for Applicant and cannot be null");
            }
            else
            {
                this.ConsentDetails = consentDetails;
            }
            this.PartnerCustomerDetails = partnerCustomerDetails;
            this.IdentificationDocumentDetails = identificationDocumentDetails;
            this.RewardRedemptionAllowedFlag = rewardRedemptionAllowedFlag;
            this.Demographics = demographics;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public List<Address> Address { get; set; }

        /// <summary>
        /// Gets or Sets PartnerCustomerDetails
        /// </summary>
        [DataMember(Name="partnerCustomerDetails", EmitDefaultValue=false)]
        public PartnerCustomerDetails PartnerCustomerDetails { get; set; }

        /// <summary>
        /// Mother&#x27;s maiden name
        /// </summary>
        /// <value>Mother&#x27;s maiden name</value>
        [DataMember(Name="motherMaidenName", EmitDefaultValue=false)]
        public string MotherMaidenName { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationDocumentDetails
        /// </summary>
        [DataMember(Name="identificationDocumentDetails", EmitDefaultValue=false)]
        public List<IdentificationDocumentDetails> IdentificationDocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public List<Phone> Phone { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentDetails
        /// </summary>
        [DataMember(Name="employmentDetails", EmitDefaultValue=false)]
        public EmploymentDetails EmploymentDetails { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public Name Name { get; set; }

        /// <summary>
        /// Gets or Sets ConsentDetails
        /// </summary>
        [DataMember(Name="consentDetails", EmitDefaultValue=false)]
        public List<ConsentDetails> ConsentDetails { get; set; }

        /// <summary>
        /// Flag to indicated whether reward redemption allowed for supplementary. Valid values: true and false
        /// </summary>
        /// <value>Flag to indicated whether reward redemption allowed for supplementary. Valid values: true and false</value>
        [DataMember(Name="rewardRedemptionAllowedFlag", EmitDefaultValue=false)]
        public bool? RewardRedemptionAllowedFlag { get; set; }

        /// <summary>
        /// Gets or Sets Demographics
        /// </summary>
        [DataMember(Name="demographics", EmitDefaultValue=false)]
        public Demographics Demographics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Applicant {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PartnerCustomerDetails: ").Append(PartnerCustomerDetails).Append("\n");
            sb.Append("  MotherMaidenName: ").Append(MotherMaidenName).Append("\n");
            sb.Append("  IdentificationDocumentDetails: ").Append(IdentificationDocumentDetails).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  EmploymentDetails: ").Append(EmploymentDetails).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ConsentDetails: ").Append(ConsentDetails).Append("\n");
            sb.Append("  RewardRedemptionAllowedFlag: ").Append(RewardRedemptionAllowedFlag).Append("\n");
            sb.Append("  Demographics: ").Append(Demographics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Applicant);
        }

        /// <summary>
        /// Returns true if Applicant instances are equal
        /// </summary>
        /// <param name="input">Instance of Applicant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Applicant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    this.Address != null &&
                    input.Address != null &&
                    this.Address.SequenceEqual(input.Address)
                ) && 
                (
                    this.PartnerCustomerDetails == input.PartnerCustomerDetails ||
                    (this.PartnerCustomerDetails != null &&
                    this.PartnerCustomerDetails.Equals(input.PartnerCustomerDetails))
                ) && 
                (
                    this.MotherMaidenName == input.MotherMaidenName ||
                    (this.MotherMaidenName != null &&
                    this.MotherMaidenName.Equals(input.MotherMaidenName))
                ) && 
                (
                    this.IdentificationDocumentDetails == input.IdentificationDocumentDetails ||
                    this.IdentificationDocumentDetails != null &&
                    input.IdentificationDocumentDetails != null &&
                    this.IdentificationDocumentDetails.SequenceEqual(input.IdentificationDocumentDetails)
                ) && 
                (
                    this.Phone == input.Phone ||
                    this.Phone != null &&
                    input.Phone != null &&
                    this.Phone.SequenceEqual(input.Phone)
                ) && 
                (
                    this.EmploymentDetails == input.EmploymentDetails ||
                    (this.EmploymentDetails != null &&
                    this.EmploymentDetails.Equals(input.EmploymentDetails))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ConsentDetails == input.ConsentDetails ||
                    this.ConsentDetails != null &&
                    input.ConsentDetails != null &&
                    this.ConsentDetails.SequenceEqual(input.ConsentDetails)
                ) && 
                (
                    this.RewardRedemptionAllowedFlag == input.RewardRedemptionAllowedFlag ||
                    (this.RewardRedemptionAllowedFlag != null &&
                    this.RewardRedemptionAllowedFlag.Equals(input.RewardRedemptionAllowedFlag))
                ) && 
                (
                    this.Demographics == input.Demographics ||
                    (this.Demographics != null &&
                    this.Demographics.Equals(input.Demographics))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.PartnerCustomerDetails != null)
                    hashCode = hashCode * 59 + this.PartnerCustomerDetails.GetHashCode();
                if (this.MotherMaidenName != null)
                    hashCode = hashCode * 59 + this.MotherMaidenName.GetHashCode();
                if (this.IdentificationDocumentDetails != null)
                    hashCode = hashCode * 59 + this.IdentificationDocumentDetails.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.EmploymentDetails != null)
                    hashCode = hashCode * 59 + this.EmploymentDetails.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ConsentDetails != null)
                    hashCode = hashCode * 59 + this.ConsentDetails.GetHashCode();
                if (this.RewardRedemptionAllowedFlag != null)
                    hashCode = hashCode * 59 + this.RewardRedemptionAllowedFlag.GetHashCode();
                if (this.Demographics != null)
                    hashCode = hashCode * 59 + this.Demographics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
