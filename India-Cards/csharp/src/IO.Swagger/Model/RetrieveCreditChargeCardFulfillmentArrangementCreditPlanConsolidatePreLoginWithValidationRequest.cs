/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest
    /// </summary>
    [DataContract]
        public partial class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest :  IEquatable<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest" /> class.
        /// </summary>
        /// <param name="oldLoanList">oldLoanList.</param>
        /// <param name="totalLoanAmount">Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount.</param>
        /// <param name="loanTenureInMonths">Tenure of loan against credit card. It is considered in terms of number of months.</param>
        /// <param name="topUpAmount">Additonal Topup Amount.</param>
        /// <param name="disbursementOption">This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description..</param>
        /// <param name="beneficiaryDetail">beneficiaryDetail.</param>
        /// <param name="payeeId">Payee Indicator to be mapped against Payee Detail Key.</param>
        /// <param name="loanPurpose">This field indicates the options/mode in which the loan amount will be disbursed.</param>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest(List<Loan> oldLoanList = default(List<Loan>), double? totalLoanAmount = default(double?), int? loanTenureInMonths = default(int?), double? topUpAmount = default(double?), string disbursementOption = default(string), BeneficiaryDetail beneficiaryDetail = default(BeneficiaryDetail), string payeeId = default(string), string loanPurpose = default(string))
        {
            this.OldLoanList = oldLoanList;
            this.TotalLoanAmount = totalLoanAmount;
            this.LoanTenureInMonths = loanTenureInMonths;
            this.TopUpAmount = topUpAmount;
            this.DisbursementOption = disbursementOption;
            this.BeneficiaryDetail = beneficiaryDetail;
            this.PayeeId = payeeId;
            this.LoanPurpose = loanPurpose;
        }
        
        /// <summary>
        /// Gets or Sets OldLoanList
        /// </summary>
        [DataMember(Name="oldLoanList", EmitDefaultValue=false)]
        public List<Loan> OldLoanList { get; set; }

        /// <summary>
        /// Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount
        /// </summary>
        /// <value>Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount</value>
        [DataMember(Name="totalLoanAmount", EmitDefaultValue=false)]
        public double? TotalLoanAmount { get; set; }

        /// <summary>
        /// Tenure of loan against credit card. It is considered in terms of number of months
        /// </summary>
        /// <value>Tenure of loan against credit card. It is considered in terms of number of months</value>
        [DataMember(Name="loanTenureInMonths", EmitDefaultValue=false)]
        public int? LoanTenureInMonths { get; set; }

        /// <summary>
        /// Additonal Topup Amount
        /// </summary>
        /// <value>Additonal Topup Amount</value>
        [DataMember(Name="topUpAmount", EmitDefaultValue=false)]
        public double? TopUpAmount { get; set; }

        /// <summary>
        /// This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.
        /// </summary>
        /// <value>This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.</value>
        [DataMember(Name="disbursementOption", EmitDefaultValue=false)]
        public string DisbursementOption { get; set; }

        /// <summary>
        /// Gets or Sets BeneficiaryDetail
        /// </summary>
        [DataMember(Name="beneficiaryDetail", EmitDefaultValue=false)]
        public BeneficiaryDetail BeneficiaryDetail { get; set; }

        /// <summary>
        /// Payee Indicator to be mapped against Payee Detail Key
        /// </summary>
        /// <value>Payee Indicator to be mapped against Payee Detail Key</value>
        [DataMember(Name="payeeId", EmitDefaultValue=false)]
        public string PayeeId { get; set; }

        /// <summary>
        /// This field indicates the options/mode in which the loan amount will be disbursed
        /// </summary>
        /// <value>This field indicates the options/mode in which the loan amount will be disbursed</value>
        [DataMember(Name="loanPurpose", EmitDefaultValue=false)]
        public string LoanPurpose { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest {\n");
            sb.Append("  OldLoanList: ").Append(OldLoanList).Append("\n");
            sb.Append("  TotalLoanAmount: ").Append(TotalLoanAmount).Append("\n");
            sb.Append("  LoanTenureInMonths: ").Append(LoanTenureInMonths).Append("\n");
            sb.Append("  TopUpAmount: ").Append(TopUpAmount).Append("\n");
            sb.Append("  DisbursementOption: ").Append(DisbursementOption).Append("\n");
            sb.Append("  BeneficiaryDetail: ").Append(BeneficiaryDetail).Append("\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  LoanPurpose: ").Append(LoanPurpose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest);
        }

        /// <summary>
        /// Returns true if RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OldLoanList == input.OldLoanList ||
                    this.OldLoanList != null &&
                    input.OldLoanList != null &&
                    this.OldLoanList.SequenceEqual(input.OldLoanList)
                ) && 
                (
                    this.TotalLoanAmount == input.TotalLoanAmount ||
                    (this.TotalLoanAmount != null &&
                    this.TotalLoanAmount.Equals(input.TotalLoanAmount))
                ) && 
                (
                    this.LoanTenureInMonths == input.LoanTenureInMonths ||
                    (this.LoanTenureInMonths != null &&
                    this.LoanTenureInMonths.Equals(input.LoanTenureInMonths))
                ) && 
                (
                    this.TopUpAmount == input.TopUpAmount ||
                    (this.TopUpAmount != null &&
                    this.TopUpAmount.Equals(input.TopUpAmount))
                ) && 
                (
                    this.DisbursementOption == input.DisbursementOption ||
                    (this.DisbursementOption != null &&
                    this.DisbursementOption.Equals(input.DisbursementOption))
                ) && 
                (
                    this.BeneficiaryDetail == input.BeneficiaryDetail ||
                    (this.BeneficiaryDetail != null &&
                    this.BeneficiaryDetail.Equals(input.BeneficiaryDetail))
                ) && 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.LoanPurpose == input.LoanPurpose ||
                    (this.LoanPurpose != null &&
                    this.LoanPurpose.Equals(input.LoanPurpose))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OldLoanList != null)
                    hashCode = hashCode * 59 + this.OldLoanList.GetHashCode();
                if (this.TotalLoanAmount != null)
                    hashCode = hashCode * 59 + this.TotalLoanAmount.GetHashCode();
                if (this.LoanTenureInMonths != null)
                    hashCode = hashCode * 59 + this.LoanTenureInMonths.GetHashCode();
                if (this.TopUpAmount != null)
                    hashCode = hashCode * 59 + this.TopUpAmount.GetHashCode();
                if (this.DisbursementOption != null)
                    hashCode = hashCode * 59 + this.DisbursementOption.GetHashCode();
                if (this.BeneficiaryDetail != null)
                    hashCode = hashCode * 59 + this.BeneficiaryDetail.GetHashCode();
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.LoanPurpose != null)
                    hashCode = hashCode * 59 + this.LoanPurpose.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
