/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditCardStatementSummary
    /// </summary>
    [DataContract]
        public partial class CreditCardStatementSummary :  IEquatable<CreditCardStatementSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardStatementSummary" /> class.
        /// </summary>
        /// <param name="cardId">The card id  in encrypted format (required).</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer (required).</param>
        /// <param name="eligibleSourceAcctsForPaymentFlag">’Flag to indicate if eligible source accounts are available to make credit card payment on-line..</param>
        /// <param name="eppEligibleAmount">Eligible amount for Equal Payment Plan. Applicable only if eligibleForEqualPaymentPlan&#x3D;&#x27;ELIGIBLE&#x27;..</param>
        /// <param name="eppMinimumEligibleAmount">Minimum eligible amount for which Equal Payment Plan can be booked. Applicable only if eligibleForEqualPaymentPlan&#x3D;&#x27;ELIGIBLE&#x27;..</param>
        /// <param name="eppMinimumInstallmentAmount">Minimum instalment amount for Equal Payment Plan. Applicable only if eligibleForEqualPaymentPlan&#x3D;&#x27;ELIGIBLE&#x27;..</param>
        /// <param name="creditCardStatement">creditCardStatement.</param>
        /// <param name="statementSummaryErrorDetails">statementSummaryErrorDetails.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data..</param>
        public CreditCardStatementSummary(string cardId = default(string), string displayAccountNumber = default(string), bool? eligibleSourceAcctsForPaymentFlag = default(bool?), double? eppEligibleAmount = default(double?), double? eppMinimumEligibleAmount = default(double?), double? eppMinimumInstallmentAmount = default(double?), List<CreditCardStatement> creditCardStatement = default(List<CreditCardStatement>), ErrorResponse statementSummaryErrorDetails = default(ErrorResponse), string nextStartIndex = default(string))
        {
            // to ensure "cardId" is required (not null)
            if (cardId == null)
            {
                throw new InvalidDataException("cardId is a required property for CreditCardStatementSummary and cannot be null");
            }
            else
            {
                this.CardId = cardId;
            }
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for CreditCardStatementSummary and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
            this.EligibleSourceAcctsForPaymentFlag = eligibleSourceAcctsForPaymentFlag;
            this.EppEligibleAmount = eppEligibleAmount;
            this.EppMinimumEligibleAmount = eppMinimumEligibleAmount;
            this.EppMinimumInstallmentAmount = eppMinimumInstallmentAmount;
            this.CreditCardStatement = creditCardStatement;
            this.StatementSummaryErrorDetails = statementSummaryErrorDetails;
            this.NextStartIndex = nextStartIndex;
        }
        
        /// <summary>
        /// The card id  in encrypted format
        /// </summary>
        /// <value>The card id  in encrypted format</value>
        [DataMember(Name="cardId", EmitDefaultValue=false)]
        public string CardId { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// ’Flag to indicate if eligible source accounts are available to make credit card payment on-line.
        /// </summary>
        /// <value>’Flag to indicate if eligible source accounts are available to make credit card payment on-line.</value>
        [DataMember(Name="eligibleSourceAcctsForPaymentFlag", EmitDefaultValue=false)]
        public bool? EligibleSourceAcctsForPaymentFlag { get; set; }

        /// <summary>
        /// Eligible amount for Equal Payment Plan. Applicable only if eligibleForEqualPaymentPlan&#x3D;&#x27;ELIGIBLE&#x27;.
        /// </summary>
        /// <value>Eligible amount for Equal Payment Plan. Applicable only if eligibleForEqualPaymentPlan&#x3D;&#x27;ELIGIBLE&#x27;.</value>
        [DataMember(Name="eppEligibleAmount", EmitDefaultValue=false)]
        public double? EppEligibleAmount { get; set; }

        /// <summary>
        /// Minimum eligible amount for which Equal Payment Plan can be booked. Applicable only if eligibleForEqualPaymentPlan&#x3D;&#x27;ELIGIBLE&#x27;.
        /// </summary>
        /// <value>Minimum eligible amount for which Equal Payment Plan can be booked. Applicable only if eligibleForEqualPaymentPlan&#x3D;&#x27;ELIGIBLE&#x27;.</value>
        [DataMember(Name="eppMinimumEligibleAmount", EmitDefaultValue=false)]
        public double? EppMinimumEligibleAmount { get; set; }

        /// <summary>
        /// Minimum instalment amount for Equal Payment Plan. Applicable only if eligibleForEqualPaymentPlan&#x3D;&#x27;ELIGIBLE&#x27;.
        /// </summary>
        /// <value>Minimum instalment amount for Equal Payment Plan. Applicable only if eligibleForEqualPaymentPlan&#x3D;&#x27;ELIGIBLE&#x27;.</value>
        [DataMember(Name="eppMinimumInstallmentAmount", EmitDefaultValue=false)]
        public double? EppMinimumInstallmentAmount { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardStatement
        /// </summary>
        [DataMember(Name="creditCardStatement", EmitDefaultValue=false)]
        public List<CreditCardStatement> CreditCardStatement { get; set; }

        /// <summary>
        /// Gets or Sets StatementSummaryErrorDetails
        /// </summary>
        [DataMember(Name="statementSummaryErrorDetails", EmitDefaultValue=false)]
        public ErrorResponse StatementSummaryErrorDetails { get; set; }

        /// <summary>
        /// In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
        /// </summary>
        /// <value>In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.</value>
        [DataMember(Name="nextStartIndex", EmitDefaultValue=false)]
        public string NextStartIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardStatementSummary {\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  EligibleSourceAcctsForPaymentFlag: ").Append(EligibleSourceAcctsForPaymentFlag).Append("\n");
            sb.Append("  EppEligibleAmount: ").Append(EppEligibleAmount).Append("\n");
            sb.Append("  EppMinimumEligibleAmount: ").Append(EppMinimumEligibleAmount).Append("\n");
            sb.Append("  EppMinimumInstallmentAmount: ").Append(EppMinimumInstallmentAmount).Append("\n");
            sb.Append("  CreditCardStatement: ").Append(CreditCardStatement).Append("\n");
            sb.Append("  StatementSummaryErrorDetails: ").Append(StatementSummaryErrorDetails).Append("\n");
            sb.Append("  NextStartIndex: ").Append(NextStartIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardStatementSummary);
        }

        /// <summary>
        /// Returns true if CreditCardStatementSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardStatementSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardStatementSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.EligibleSourceAcctsForPaymentFlag == input.EligibleSourceAcctsForPaymentFlag ||
                    (this.EligibleSourceAcctsForPaymentFlag != null &&
                    this.EligibleSourceAcctsForPaymentFlag.Equals(input.EligibleSourceAcctsForPaymentFlag))
                ) && 
                (
                    this.EppEligibleAmount == input.EppEligibleAmount ||
                    (this.EppEligibleAmount != null &&
                    this.EppEligibleAmount.Equals(input.EppEligibleAmount))
                ) && 
                (
                    this.EppMinimumEligibleAmount == input.EppMinimumEligibleAmount ||
                    (this.EppMinimumEligibleAmount != null &&
                    this.EppMinimumEligibleAmount.Equals(input.EppMinimumEligibleAmount))
                ) && 
                (
                    this.EppMinimumInstallmentAmount == input.EppMinimumInstallmentAmount ||
                    (this.EppMinimumInstallmentAmount != null &&
                    this.EppMinimumInstallmentAmount.Equals(input.EppMinimumInstallmentAmount))
                ) && 
                (
                    this.CreditCardStatement == input.CreditCardStatement ||
                    this.CreditCardStatement != null &&
                    input.CreditCardStatement != null &&
                    this.CreditCardStatement.SequenceEqual(input.CreditCardStatement)
                ) && 
                (
                    this.StatementSummaryErrorDetails == input.StatementSummaryErrorDetails ||
                    (this.StatementSummaryErrorDetails != null &&
                    this.StatementSummaryErrorDetails.Equals(input.StatementSummaryErrorDetails))
                ) && 
                (
                    this.NextStartIndex == input.NextStartIndex ||
                    (this.NextStartIndex != null &&
                    this.NextStartIndex.Equals(input.NextStartIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.EligibleSourceAcctsForPaymentFlag != null)
                    hashCode = hashCode * 59 + this.EligibleSourceAcctsForPaymentFlag.GetHashCode();
                if (this.EppEligibleAmount != null)
                    hashCode = hashCode * 59 + this.EppEligibleAmount.GetHashCode();
                if (this.EppMinimumEligibleAmount != null)
                    hashCode = hashCode * 59 + this.EppMinimumEligibleAmount.GetHashCode();
                if (this.EppMinimumInstallmentAmount != null)
                    hashCode = hashCode * 59 + this.EppMinimumInstallmentAmount.GetHashCode();
                if (this.CreditCardStatement != null)
                    hashCode = hashCode * 59 + this.CreditCardStatement.GetHashCode();
                if (this.StatementSummaryErrorDetails != null)
                    hashCode = hashCode * 59 + this.StatementSummaryErrorDetails.GetHashCode();
                if (this.NextStartIndex != null)
                    hashCode = hashCode * 59 + this.NextStartIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
