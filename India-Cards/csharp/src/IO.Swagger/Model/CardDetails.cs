/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CardDetails
    /// </summary>
    [DataContract]
        public partial class CardDetails :  IEquatable<CardDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardDetails" /> class.
        /// </summary>
        /// <param name="cardId">The card id  in encrypted format (required).</param>
        /// <param name="displayCardNumber">A masked card number that can be displayed to the customer..</param>
        /// <param name="localCardActivationIndicator">The card activation indicator for local usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{localCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values. (required).</param>
        /// <param name="overseasCardActivationIndicator">The card activation indicator for overseas usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{overseasCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="perpetualActivationFlag">Flag to specify whether the card is activated perpetually, till card expiration.</param>
        /// <param name="overseasCardActivationStartDate">Card activation start date in ISO 8601 date format YYYY-MM-DD for overseas usage..</param>
        /// <param name="overseasCardActivationEndDate">Card activation end date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, value is card expiry date.</param>
        /// <param name="currentCreditLimitAmount">Current credit limit amount on the credit card (required).</param>
        /// <param name="maximumPermanentCreditLimitAmount">Maximum permanent credit limit amount allowed on the credit card.</param>
        /// <param name="maximumTemporaryCreditLimitAmount">Maximum temporary credit limit amount allowed on the credit card.</param>
        /// <param name="subCardType">Type of the card. Debit or Credit.This is a reference data field. Please use /v1/apac/utilities/referenceData/{subCardType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values. (required).</param>
        /// <param name="cardHolderType">Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description..</param>
        /// <param name="cardIssueReason">Specifies the reason for the card issuance. Applicable only for recently issued cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardIssueReason} resource to get valid value of this field with description..</param>
        /// <param name="cardFunctionsAllowed">cardFunctionsAllowed.</param>
        public CardDetails(string cardId = default(string), string displayCardNumber = default(string), string localCardActivationIndicator = default(string), string overseasCardActivationIndicator = default(string), bool? perpetualActivationFlag = default(bool?), DateTime? overseasCardActivationStartDate = default(DateTime?), DateTime? overseasCardActivationEndDate = default(DateTime?), double? currentCreditLimitAmount = default(double?), double? maximumPermanentCreditLimitAmount = default(double?), double? maximumTemporaryCreditLimitAmount = default(double?), string subCardType = default(string), string cardHolderType = default(string), string cardIssueReason = default(string), List<CardFunctionsAllowed> cardFunctionsAllowed = default(List<CardFunctionsAllowed>))
        {
            // to ensure "cardId" is required (not null)
            if (cardId == null)
            {
                throw new InvalidDataException("cardId is a required property for CardDetails and cannot be null");
            }
            else
            {
                this.CardId = cardId;
            }
            // to ensure "localCardActivationIndicator" is required (not null)
            if (localCardActivationIndicator == null)
            {
                throw new InvalidDataException("localCardActivationIndicator is a required property for CardDetails and cannot be null");
            }
            else
            {
                this.LocalCardActivationIndicator = localCardActivationIndicator;
            }
            // to ensure "currentCreditLimitAmount" is required (not null)
            if (currentCreditLimitAmount == null)
            {
                throw new InvalidDataException("currentCreditLimitAmount is a required property for CardDetails and cannot be null");
            }
            else
            {
                this.CurrentCreditLimitAmount = currentCreditLimitAmount;
            }
            // to ensure "subCardType" is required (not null)
            if (subCardType == null)
            {
                throw new InvalidDataException("subCardType is a required property for CardDetails and cannot be null");
            }
            else
            {
                this.SubCardType = subCardType;
            }
            this.DisplayCardNumber = displayCardNumber;
            this.OverseasCardActivationIndicator = overseasCardActivationIndicator;
            this.PerpetualActivationFlag = perpetualActivationFlag;
            this.OverseasCardActivationStartDate = overseasCardActivationStartDate;
            this.OverseasCardActivationEndDate = overseasCardActivationEndDate;
            this.MaximumPermanentCreditLimitAmount = maximumPermanentCreditLimitAmount;
            this.MaximumTemporaryCreditLimitAmount = maximumTemporaryCreditLimitAmount;
            this.CardHolderType = cardHolderType;
            this.CardIssueReason = cardIssueReason;
            this.CardFunctionsAllowed = cardFunctionsAllowed;
        }
        
        /// <summary>
        /// The card id  in encrypted format
        /// </summary>
        /// <value>The card id  in encrypted format</value>
        [DataMember(Name="cardId", EmitDefaultValue=false)]
        public string CardId { get; set; }

        /// <summary>
        /// A masked card number that can be displayed to the customer.
        /// </summary>
        /// <value>A masked card number that can be displayed to the customer.</value>
        [DataMember(Name="displayCardNumber", EmitDefaultValue=false)]
        public string DisplayCardNumber { get; set; }

        /// <summary>
        /// The card activation indicator for local usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{localCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>The card activation indicator for local usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{localCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="localCardActivationIndicator", EmitDefaultValue=false)]
        public string LocalCardActivationIndicator { get; set; }

        /// <summary>
        /// The card activation indicator for overseas usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{overseasCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>The card activation indicator for overseas usage. This is a reference data field. Please use /v1/apac/utilities/referenceData/{overseasCardActivationIndicator} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="overseasCardActivationIndicator", EmitDefaultValue=false)]
        public string OverseasCardActivationIndicator { get; set; }

        /// <summary>
        /// Flag to specify whether the card is activated perpetually, till card expiration
        /// </summary>
        /// <value>Flag to specify whether the card is activated perpetually, till card expiration</value>
        [DataMember(Name="perpetualActivationFlag", EmitDefaultValue=false)]
        public bool? PerpetualActivationFlag { get; set; }

        /// <summary>
        /// Card activation start date in ISO 8601 date format YYYY-MM-DD for overseas usage.
        /// </summary>
        /// <value>Card activation start date in ISO 8601 date format YYYY-MM-DD for overseas usage.</value>
        [DataMember(Name="overseasCardActivationStartDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OverseasCardActivationStartDate { get; set; }

        /// <summary>
        /// Card activation end date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, value is card expiry date
        /// </summary>
        /// <value>Card activation end date in ISO 8601 date format YYYY-MM-DD for overseas usage. For perpetual activation, value is card expiry date</value>
        [DataMember(Name="overseasCardActivationEndDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OverseasCardActivationEndDate { get; set; }

        /// <summary>
        /// Current credit limit amount on the credit card
        /// </summary>
        /// <value>Current credit limit amount on the credit card</value>
        [DataMember(Name="currentCreditLimitAmount", EmitDefaultValue=false)]
        public double? CurrentCreditLimitAmount { get; set; }

        /// <summary>
        /// Maximum permanent credit limit amount allowed on the credit card
        /// </summary>
        /// <value>Maximum permanent credit limit amount allowed on the credit card</value>
        [DataMember(Name="maximumPermanentCreditLimitAmount", EmitDefaultValue=false)]
        public double? MaximumPermanentCreditLimitAmount { get; set; }

        /// <summary>
        /// Maximum temporary credit limit amount allowed on the credit card
        /// </summary>
        /// <value>Maximum temporary credit limit amount allowed on the credit card</value>
        [DataMember(Name="maximumTemporaryCreditLimitAmount", EmitDefaultValue=false)]
        public double? MaximumTemporaryCreditLimitAmount { get; set; }

        /// <summary>
        /// Type of the card. Debit or Credit.This is a reference data field. Please use /v1/apac/utilities/referenceData/{subCardType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Type of the card. Debit or Credit.This is a reference data field. Please use /v1/apac/utilities/referenceData/{subCardType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="subCardType", EmitDefaultValue=false)]
        public string SubCardType { get; set; }

        /// <summary>
        /// Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description.</value>
        [DataMember(Name="cardHolderType", EmitDefaultValue=false)]
        public string CardHolderType { get; set; }

        /// <summary>
        /// Specifies the reason for the card issuance. Applicable only for recently issued cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardIssueReason} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Specifies the reason for the card issuance. Applicable only for recently issued cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardIssueReason} resource to get valid value of this field with description.</value>
        [DataMember(Name="cardIssueReason", EmitDefaultValue=false)]
        public string CardIssueReason { get; set; }

        /// <summary>
        /// Gets or Sets CardFunctionsAllowed
        /// </summary>
        [DataMember(Name="cardFunctionsAllowed", EmitDefaultValue=false)]
        public List<CardFunctionsAllowed> CardFunctionsAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardDetails {\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  DisplayCardNumber: ").Append(DisplayCardNumber).Append("\n");
            sb.Append("  LocalCardActivationIndicator: ").Append(LocalCardActivationIndicator).Append("\n");
            sb.Append("  OverseasCardActivationIndicator: ").Append(OverseasCardActivationIndicator).Append("\n");
            sb.Append("  PerpetualActivationFlag: ").Append(PerpetualActivationFlag).Append("\n");
            sb.Append("  OverseasCardActivationStartDate: ").Append(OverseasCardActivationStartDate).Append("\n");
            sb.Append("  OverseasCardActivationEndDate: ").Append(OverseasCardActivationEndDate).Append("\n");
            sb.Append("  CurrentCreditLimitAmount: ").Append(CurrentCreditLimitAmount).Append("\n");
            sb.Append("  MaximumPermanentCreditLimitAmount: ").Append(MaximumPermanentCreditLimitAmount).Append("\n");
            sb.Append("  MaximumTemporaryCreditLimitAmount: ").Append(MaximumTemporaryCreditLimitAmount).Append("\n");
            sb.Append("  SubCardType: ").Append(SubCardType).Append("\n");
            sb.Append("  CardHolderType: ").Append(CardHolderType).Append("\n");
            sb.Append("  CardIssueReason: ").Append(CardIssueReason).Append("\n");
            sb.Append("  CardFunctionsAllowed: ").Append(CardFunctionsAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardDetails);
        }

        /// <summary>
        /// Returns true if CardDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CardDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.DisplayCardNumber == input.DisplayCardNumber ||
                    (this.DisplayCardNumber != null &&
                    this.DisplayCardNumber.Equals(input.DisplayCardNumber))
                ) && 
                (
                    this.LocalCardActivationIndicator == input.LocalCardActivationIndicator ||
                    (this.LocalCardActivationIndicator != null &&
                    this.LocalCardActivationIndicator.Equals(input.LocalCardActivationIndicator))
                ) && 
                (
                    this.OverseasCardActivationIndicator == input.OverseasCardActivationIndicator ||
                    (this.OverseasCardActivationIndicator != null &&
                    this.OverseasCardActivationIndicator.Equals(input.OverseasCardActivationIndicator))
                ) && 
                (
                    this.PerpetualActivationFlag == input.PerpetualActivationFlag ||
                    (this.PerpetualActivationFlag != null &&
                    this.PerpetualActivationFlag.Equals(input.PerpetualActivationFlag))
                ) && 
                (
                    this.OverseasCardActivationStartDate == input.OverseasCardActivationStartDate ||
                    (this.OverseasCardActivationStartDate != null &&
                    this.OverseasCardActivationStartDate.Equals(input.OverseasCardActivationStartDate))
                ) && 
                (
                    this.OverseasCardActivationEndDate == input.OverseasCardActivationEndDate ||
                    (this.OverseasCardActivationEndDate != null &&
                    this.OverseasCardActivationEndDate.Equals(input.OverseasCardActivationEndDate))
                ) && 
                (
                    this.CurrentCreditLimitAmount == input.CurrentCreditLimitAmount ||
                    (this.CurrentCreditLimitAmount != null &&
                    this.CurrentCreditLimitAmount.Equals(input.CurrentCreditLimitAmount))
                ) && 
                (
                    this.MaximumPermanentCreditLimitAmount == input.MaximumPermanentCreditLimitAmount ||
                    (this.MaximumPermanentCreditLimitAmount != null &&
                    this.MaximumPermanentCreditLimitAmount.Equals(input.MaximumPermanentCreditLimitAmount))
                ) && 
                (
                    this.MaximumTemporaryCreditLimitAmount == input.MaximumTemporaryCreditLimitAmount ||
                    (this.MaximumTemporaryCreditLimitAmount != null &&
                    this.MaximumTemporaryCreditLimitAmount.Equals(input.MaximumTemporaryCreditLimitAmount))
                ) && 
                (
                    this.SubCardType == input.SubCardType ||
                    (this.SubCardType != null &&
                    this.SubCardType.Equals(input.SubCardType))
                ) && 
                (
                    this.CardHolderType == input.CardHolderType ||
                    (this.CardHolderType != null &&
                    this.CardHolderType.Equals(input.CardHolderType))
                ) && 
                (
                    this.CardIssueReason == input.CardIssueReason ||
                    (this.CardIssueReason != null &&
                    this.CardIssueReason.Equals(input.CardIssueReason))
                ) && 
                (
                    this.CardFunctionsAllowed == input.CardFunctionsAllowed ||
                    this.CardFunctionsAllowed != null &&
                    input.CardFunctionsAllowed != null &&
                    this.CardFunctionsAllowed.SequenceEqual(input.CardFunctionsAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.DisplayCardNumber != null)
                    hashCode = hashCode * 59 + this.DisplayCardNumber.GetHashCode();
                if (this.LocalCardActivationIndicator != null)
                    hashCode = hashCode * 59 + this.LocalCardActivationIndicator.GetHashCode();
                if (this.OverseasCardActivationIndicator != null)
                    hashCode = hashCode * 59 + this.OverseasCardActivationIndicator.GetHashCode();
                if (this.PerpetualActivationFlag != null)
                    hashCode = hashCode * 59 + this.PerpetualActivationFlag.GetHashCode();
                if (this.OverseasCardActivationStartDate != null)
                    hashCode = hashCode * 59 + this.OverseasCardActivationStartDate.GetHashCode();
                if (this.OverseasCardActivationEndDate != null)
                    hashCode = hashCode * 59 + this.OverseasCardActivationEndDate.GetHashCode();
                if (this.CurrentCreditLimitAmount != null)
                    hashCode = hashCode * 59 + this.CurrentCreditLimitAmount.GetHashCode();
                if (this.MaximumPermanentCreditLimitAmount != null)
                    hashCode = hashCode * 59 + this.MaximumPermanentCreditLimitAmount.GetHashCode();
                if (this.MaximumTemporaryCreditLimitAmount != null)
                    hashCode = hashCode * 59 + this.MaximumTemporaryCreditLimitAmount.GetHashCode();
                if (this.SubCardType != null)
                    hashCode = hashCode * 59 + this.SubCardType.GetHashCode();
                if (this.CardHolderType != null)
                    hashCode = hashCode * 59 + this.CardHolderType.GetHashCode();
                if (this.CardIssueReason != null)
                    hashCode = hashCode * 59 + this.CardIssueReason.GetHashCode();
                if (this.CardFunctionsAllowed != null)
                    hashCode = hashCode * 59 + this.CardFunctionsAllowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
