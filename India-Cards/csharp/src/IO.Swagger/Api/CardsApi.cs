/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve the detail of card products
        /// </summary>
        /// <remarks>
        /// This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardType">Type of card (optional, default to credit_card)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ProductResponse</returns>
        ProductResponse BNMOAPIBankingDigitalRegulatory (string authorization, string uuid, string accept, string clientId, string contentType, string cardType = null, string clientDetails = null);

        /// <summary>
        /// Retrieve the detail of card products
        /// </summary>
        /// <remarks>
        /// This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardType">Type of card (optional, default to credit_card)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of ProductResponse</returns>
        ApiResponse<ProductResponse> BNMOAPIBankingDigitalRegulatoryWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string cardType = null, string clientDetails = null);
        /// <summary>
        /// Confirm Easy Payment Plan Booking
        /// </summary>
        /// <remarks>
        /// This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>EppLoanBookingConfirmationResponse</returns>
        EppLoanBookingConfirmationResponse EppLoanBookingConfirmation (EppLoanBookingConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// Confirm Easy Payment Plan Booking
        /// </summary>
        /// <remarks>
        /// This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of EppLoanBookingConfirmationResponse</returns>
        ApiResponse<EppLoanBookingConfirmationResponse> EppLoanBookingConfirmationWithHttpInfo (EppLoanBookingConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is used to close the corporate Credit Card or Ready credit Account.
        /// </summary>
        /// <remarks>
        /// This API is used to close the corporate Credit Card or Ready credit Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InitiateCreditChargeCardCorporateCardsClosureRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>InitiateCreditChargeCardCorporateCardsClosureResponse</returns>
        InitiateCreditChargeCardCorporateCardsClosureResponse InitiateCreditChargeCardCorporateCardsClosure (InitiateCreditChargeCardCorporateCardsClosureRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to close the corporate Credit Card or Ready credit Account.
        /// </summary>
        /// <remarks>
        /// This API is used to close the corporate Credit Card or Ready credit Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InitiateCreditChargeCardCorporateCardsClosureRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of InitiateCreditChargeCardCorporateCardsClosureResponse</returns>
        ApiResponse<InitiateCreditChargeCardCorporateCardsClosureResponse> InitiateCreditChargeCardCorporateCardsClosureWithHttpInfo (InitiateCreditChargeCardCorporateCardsClosureRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEnrollmentResponse</returns>
        MultiCurrencyAccountEnrollmentResponse MultiCurrencyAccountEnrollment (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEnrollmentResponse</returns>
        ApiResponse<MultiCurrencyAccountEnrollmentResponse> MultiCurrencyAccountEnrollmentWithHttpInfo (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        MultiCurrencyAccountEnrollmentWithCurrencyResponse MultiCurrencyAccountEnrollmentWithCurrency (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> MultiCurrencyAccountEnrollmentWithCurrencyWithHttpInfo (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// Partner Card List
        /// </summary>
        /// <remarks>
        /// This API is used to list all the cards held by a customer with Citi partner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description.</param>
        /// <param name="linkedSupplementaryCardFlag">Flag to identify linked supplementary information to be retrieved. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>PartnerCardListingResponse</returns>
        PartnerCardListingResponse PartnerCardListing (string authorization, string uuid, string accept, string clientId, string cardFunction, bool? linkedSupplementaryCardFlag = null, string clientDetails = null);

        /// <summary>
        /// Partner Card List
        /// </summary>
        /// <remarks>
        /// This API is used to list all the cards held by a customer with Citi partner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description.</param>
        /// <param name="linkedSupplementaryCardFlag">Flag to identify linked supplementary information to be retrieved. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of PartnerCardListingResponse</returns>
        ApiResponse<PartnerCardListingResponse> PartnerCardListingWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardFunction, bool? linkedSupplementaryCardFlag = null, string clientDetails = null);
        /// <summary>
        /// This API is used to Suspend and Unsuspend corporate card.
        /// </summary>
        /// <remarks>
        /// This API is used to Suspend and Unsuspend corporate card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed (RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to Suspend and Unsuspend corporate card.
        /// </summary>
        /// <remarks>
        /// This API is used to Suspend and Unsuspend corporate card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedWithHttpInfo (RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </summary>
        /// <remarks>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse</returns>
        RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </summary>
        /// <remarks>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse</returns>
        ApiResponse<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse> RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementWithHttpInfo (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// This API is used for EPP Refund in Open Loop
        /// </summary>
        /// <remarks>
        /// This API is used for EPP Refund in Open Loop
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund (RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// This API is used for EPP Refund in Open Loop
        /// </summary>
        /// <remarks>
        /// This API is used for EPP Refund in Open Loop
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundWithHttpInfo (RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// This API is used to retrieve the corporate card cash limit
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the corporate card cash limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardCorporateCardsCashLimitResponse</returns>
        RetrieveCreditChargeCardCorporateCardsCashLimitResponse RetrieveCreditChargeCardCorporateCardsCashLimit (RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to retrieve the corporate card cash limit
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the corporate card cash limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardCorporateCardsCashLimitResponse</returns>
        ApiResponse<RetrieveCreditChargeCardCorporateCardsCashLimitResponse> RetrieveCreditChargeCardCorporateCardsCashLimitWithHttpInfo (RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is used to retrieve the corporate card details
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the corporate card details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsDetailRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardCorporateCardsDetailResponse</returns>
        RetrieveCreditChargeCardCorporateCardsDetailResponse RetrieveCreditChargeCardCorporateCardsDetail (RetrieveCreditChargeCardCorporateCardsDetailRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to retrieve the corporate card details
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the corporate card details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsDetailRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardCorporateCardsDetailResponse</returns>
        ApiResponse<RetrieveCreditChargeCardCorporateCardsDetailResponse> RetrieveCreditChargeCardCorporateCardsDetailWithHttpInfo (RetrieveCreditChargeCardCorporateCardsDetailRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </summary>
        /// <remarks>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse</returns>
        RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </summary>
        /// <remarks>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse</returns>
        ApiResponse<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse> RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsWithHttpInfo (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// Retrieve Credit Card Status
        /// </summary>
        /// <remarks>
        /// This API is used to return the credit card status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer Card identifier in encrypted format.</param>
        /// <param name="transactionReferenceId">This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse</returns>
        RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus (string authorization, string uuid, string accept, string clientId, string cardId, string transactionReferenceId, string clientDetails = null);

        /// <summary>
        /// Retrieve Credit Card Status
        /// </summary>
        /// <remarks>
        /// This API is used to return the credit card status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer Card identifier in encrypted format.</param>
        /// <param name="transactionReferenceId">This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse</returns>
        ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string transactionReferenceId, string clientDetails = null);
        /// <summary>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </summary>
        /// <remarks>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="productId">Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking. (optional)</param>
        /// <returns>RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse</returns>
        RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp (string authorization, string uuid, string accept, string clientId, string offerId, string clientDetails = null, string productId = null, decimal? loanAmount = null);

        /// <summary>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </summary>
        /// <remarks>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="productId">Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking. (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse</returns>
        ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppWithHttpInfo (string authorization, string uuid, string accept, string clientId, string offerId, string clientDetails = null, string productId = null, decimal? loanAmount = null);
        /// <summary>
        /// This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </summary>
        /// <remarks>
        /// This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse</returns>
        RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string offerId, string clientDetails = null);

        /// <summary>
        /// This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </summary>
        /// <remarks>
        /// This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse</returns>
        ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsWithHttpInfo (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string offerId, string clientDetails = null);
        /// <summary>
        /// To allow customers to view the payment breakdown details.
        /// </summary>
        /// <remarks>
        /// This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking.</param>
        /// <param name="tenor">Tenure of loan in months</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="binaryDataFlag">This refer to the flag in case of binary file is require. (optional)</param>
        /// <returns>RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse</returns>
        RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules (string authorization, string uuid, string accept, string clientId, string offerId, decimal? loanAmount, decimal? tenor, string clientDetails = null, string nextStartIndex = null, bool? binaryDataFlag = null);

        /// <summary>
        /// To allow customers to view the payment breakdown details.
        /// </summary>
        /// <remarks>
        /// This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking.</param>
        /// <param name="tenor">Tenure of loan in months</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="binaryDataFlag">This refer to the flag in case of binary file is require. (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse</returns>
        ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesWithHttpInfo (string authorization, string uuid, string accept, string clientId, string offerId, decimal? loanAmount, decimal? tenor, string clientDetails = null, string nextStartIndex = null, bool? binaryDataFlag = null);
        /// <summary>
        /// This API is used to update the corporate card cash limit
        /// </summary>
        /// <remarks>
        /// This API is used to update the corporate card cash limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void UpdateCreditChargeCardCorporateCardsCashLimit (UpdateCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to update the corporate card cash limit
        /// </summary>
        /// <remarks>
        /// This API is used to update the corporate card cash limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCreditChargeCardCorporateCardsCashLimitWithHttpInfo (UpdateCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is used to update the corportate card credit limit
        /// </summary>
        /// <remarks>
        /// This API is used to update the corportate card credit limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCreditLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>UpdateCreditChargeCardCorporateCardsCreditLimitResponse</returns>
        UpdateCreditChargeCardCorporateCardsCreditLimitResponse UpdateCreditChargeCardCorporateCardsCreditLimit (UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to update the corportate card credit limit
        /// </summary>
        /// <remarks>
        /// This API is used to update the corportate card credit limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCreditLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of UpdateCreditChargeCardCorporateCardsCreditLimitResponse</returns>
        ApiResponse<UpdateCreditChargeCardCorporateCardsCreditLimitResponse> UpdateCreditChargeCardCorporateCardsCreditLimitWithHttpInfo (UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is to report lost or stolen card and to apply for Replacement
        /// </summary>
        /// <remarks>
        /// This API is to report lost or stolen card and to apply for Replacement
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse</returns>
        UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// This API is to report lost or stolen card and to apply for Replacement
        /// </summary>
        /// <remarks>
        /// This API is to report lost or stolen card and to apply for Replacement
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse</returns>
        ApiResponse<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse> UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenWithHttpInfo (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </summary>
        /// <remarks>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </summary>
        /// <remarks>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlWithHttpInfo (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Enroll for Transaction Limit Setup
        /// </summary>
        /// <remarks>
        /// This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CardsLimitsAndEnrollmentsUpdateRequest</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void V1CardsCardIdLimitsAndEnrollmentsPut (CardsLimitsAndEnrollmentsUpdateRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId, string clientDetails = null);

        /// <summary>
        /// Enroll for Transaction Limit Setup
        /// </summary>
        /// <remarks>
        /// This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CardsLimitsAndEnrollmentsUpdateRequest</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1CardsCardIdLimitsAndEnrollmentsPutWithHttpInfo (CardsLimitsAndEnrollmentsUpdateRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void V1CardsCardIdMultiCurrencyAccountsDelete (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        MultiCurrencyAccountEnrollmentWithCurrencyResponse V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostWithHttpInfo (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEnrollmentResponse</returns>
        MultiCurrencyAccountEnrollmentResponse V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEnrollmentResponse</returns>
        ApiResponse<MultiCurrencyAccountEnrollmentResponse> V1CardsCardIdMultiCurrencyAccountsEnrollmentsPostWithHttpInfo (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API enables customer to delete an existing travel plan 
        /// </summary>
        /// <remarks>
        /// This API enables customer to delete an existing travel plan 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void V1CardsCardIdOverseasTravelPlansDelete (string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API enables customer to delete an existing travel plan 
        /// </summary>
        /// <remarks>
        /// This API enables customer to delete an existing travel plan 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1CardsCardIdOverseasTravelPlansDeleteWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API enables customer to add a new travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to add a new travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanAddRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void V1CardsCardIdOverseasTravelPlansPost (OverseasTravelPlanAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API enables customer to add a new travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to add a new travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanAddRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1CardsCardIdOverseasTravelPlansPostWithHttpInfo (OverseasTravelPlanAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API enables customer to update an existing travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to update an existing travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanUpdateRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void V1CardsCardIdOverseasTravelPlansPut (OverseasTravelPlanUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API enables customer to update an existing travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to update an existing travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanUpdateRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1CardsCardIdOverseasTravelPlansPutWithHttpInfo (OverseasTravelPlanUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// Verify CVV for Debit or Credit Card
        /// </summary>
        /// <remarks>
        /// This API is used to verify the CVV of a debit or a credit card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CvvVerificationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void V1CardsCvvVerificationPost (CvvVerificationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Verify CVV for Debit or Credit Card
        /// </summary>
        /// <remarks>
        /// This API is used to verify the CVV of a debit or a credit card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CvvVerificationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1CardsCvvVerificationPostWithHttpInfo (CvvVerificationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// To get the needed account and currency details for Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEligibilityResponse</returns>
        MultiCurrencyAccountEligibilityResponse V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet (string authorization, string uuid, string accept, string clientId, string clientDetails = null);

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// To get the needed account and currency details for Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEligibilityResponse</returns>
        ApiResponse<MultiCurrencyAccountEligibilityResponse> V1CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null);
        /// <summary>
        /// This API enables customer to inquire current travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to inquire current travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="cardId">The card id  in encrypted format (optional)</param>
        /// <returns>OverseasTravelPlanInquiryResponse</returns>
        OverseasTravelPlanInquiryResponse V1CardsOverseasTravelPlansGet (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string cardId = null);

        /// <summary>
        /// This API enables customer to inquire current travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to inquire current travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="cardId">The card id  in encrypted format (optional)</param>
        /// <returns>ApiResponse of OverseasTravelPlanInquiryResponse</returns>
        ApiResponse<OverseasTravelPlanInquiryResponse> V1CardsOverseasTravelPlansGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string cardId = null);
        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void V2CardsCardIdMultiCurrencyAccountsDelete (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null);
        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// To get the needed account and currency details for Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEligibilityResponse</returns>
        MultiCurrencyAccountEligibilityResponse V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet (string authorization, string uuid, string accept, string clientId, string clientDetails = null);

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// To get the needed account and currency details for Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEligibilityResponse</returns>
        ApiResponse<MultiCurrencyAccountEligibilityResponse> V2CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve the detail of card products
        /// </summary>
        /// <remarks>
        /// This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardType">Type of card (optional, default to credit_card)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ProductResponse</returns>
        System.Threading.Tasks.Task<ProductResponse> BNMOAPIBankingDigitalRegulatoryAsync (string authorization, string uuid, string accept, string clientId, string contentType, string cardType = null, string clientDetails = null);

        /// <summary>
        /// Retrieve the detail of card products
        /// </summary>
        /// <remarks>
        /// This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardType">Type of card (optional, default to credit_card)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (ProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductResponse>> BNMOAPIBankingDigitalRegulatoryAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string cardType = null, string clientDetails = null);
        /// <summary>
        /// Confirm Easy Payment Plan Booking
        /// </summary>
        /// <remarks>
        /// This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of EppLoanBookingConfirmationResponse</returns>
        System.Threading.Tasks.Task<EppLoanBookingConfirmationResponse> EppLoanBookingConfirmationAsync (EppLoanBookingConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// Confirm Easy Payment Plan Booking
        /// </summary>
        /// <remarks>
        /// This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (EppLoanBookingConfirmationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EppLoanBookingConfirmationResponse>> EppLoanBookingConfirmationAsyncWithHttpInfo (EppLoanBookingConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is used to close the corporate Credit Card or Ready credit Account.
        /// </summary>
        /// <remarks>
        /// This API is used to close the corporate Credit Card or Ready credit Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InitiateCreditChargeCardCorporateCardsClosureRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of InitiateCreditChargeCardCorporateCardsClosureResponse</returns>
        System.Threading.Tasks.Task<InitiateCreditChargeCardCorporateCardsClosureResponse> InitiateCreditChargeCardCorporateCardsClosureAsync (InitiateCreditChargeCardCorporateCardsClosureRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to close the corporate Credit Card or Ready credit Account.
        /// </summary>
        /// <remarks>
        /// This API is used to close the corporate Credit Card or Ready credit Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InitiateCreditChargeCardCorporateCardsClosureRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (InitiateCreditChargeCardCorporateCardsClosureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateCreditChargeCardCorporateCardsClosureResponse>> InitiateCreditChargeCardCorporateCardsClosureAsyncWithHttpInfo (InitiateCreditChargeCardCorporateCardsClosureRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEnrollmentResponse</returns>
        System.Threading.Tasks.Task<MultiCurrencyAccountEnrollmentResponse> MultiCurrencyAccountEnrollmentAsync (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEnrollmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEnrollmentResponse>> MultiCurrencyAccountEnrollmentAsyncWithHttpInfo (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        System.Threading.Tasks.Task<MultiCurrencyAccountEnrollmentWithCurrencyResponse> MultiCurrencyAccountEnrollmentWithCurrencyAsync (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEnrollmentWithCurrencyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse>> MultiCurrencyAccountEnrollmentWithCurrencyAsyncWithHttpInfo (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// Partner Card List
        /// </summary>
        /// <remarks>
        /// This API is used to list all the cards held by a customer with Citi partner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description.</param>
        /// <param name="linkedSupplementaryCardFlag">Flag to identify linked supplementary information to be retrieved. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of PartnerCardListingResponse</returns>
        System.Threading.Tasks.Task<PartnerCardListingResponse> PartnerCardListingAsync (string authorization, string uuid, string accept, string clientId, string cardFunction, bool? linkedSupplementaryCardFlag = null, string clientDetails = null);

        /// <summary>
        /// Partner Card List
        /// </summary>
        /// <remarks>
        /// This API is used to list all the cards held by a customer with Citi partner.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description.</param>
        /// <param name="linkedSupplementaryCardFlag">Flag to identify linked supplementary information to be retrieved. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (PartnerCardListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartnerCardListingResponse>> PartnerCardListingAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardFunction, bool? linkedSupplementaryCardFlag = null, string clientDetails = null);
        /// <summary>
        /// This API is used to Suspend and Unsuspend corporate card.
        /// </summary>
        /// <remarks>
        /// This API is used to Suspend and Unsuspend corporate card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedAsync (RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to Suspend and Unsuspend corporate card.
        /// </summary>
        /// <remarks>
        /// This API is used to Suspend and Unsuspend corporate card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedAsyncWithHttpInfo (RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </summary>
        /// <remarks>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse</returns>
        System.Threading.Tasks.Task<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse> RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementAsync (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </summary>
        /// <remarks>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse>> RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementAsyncWithHttpInfo (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// This API is used for EPP Refund in Open Loop
        /// </summary>
        /// <remarks>
        /// This API is used for EPP Refund in Open Loop
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundAsync (RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// This API is used for EPP Refund in Open Loop
        /// </summary>
        /// <remarks>
        /// This API is used for EPP Refund in Open Loop
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundAsyncWithHttpInfo (RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// This API is used to retrieve the corporate card cash limit
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the corporate card cash limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardCorporateCardsCashLimitResponse</returns>
        System.Threading.Tasks.Task<RetrieveCreditChargeCardCorporateCardsCashLimitResponse> RetrieveCreditChargeCardCorporateCardsCashLimitAsync (RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to retrieve the corporate card cash limit
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the corporate card cash limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardCorporateCardsCashLimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardCorporateCardsCashLimitResponse>> RetrieveCreditChargeCardCorporateCardsCashLimitAsyncWithHttpInfo (RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is used to retrieve the corporate card details
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the corporate card details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsDetailRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardCorporateCardsDetailResponse</returns>
        System.Threading.Tasks.Task<RetrieveCreditChargeCardCorporateCardsDetailResponse> RetrieveCreditChargeCardCorporateCardsDetailAsync (RetrieveCreditChargeCardCorporateCardsDetailRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to retrieve the corporate card details
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the corporate card details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsDetailRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardCorporateCardsDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardCorporateCardsDetailResponse>> RetrieveCreditChargeCardCorporateCardsDetailAsyncWithHttpInfo (RetrieveCreditChargeCardCorporateCardsDetailRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </summary>
        /// <remarks>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse</returns>
        System.Threading.Tasks.Task<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse> RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsAsync (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </summary>
        /// <remarks>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse>> RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsAsyncWithHttpInfo (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// Retrieve Credit Card Status
        /// </summary>
        /// <remarks>
        /// This API is used to return the credit card status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer Card identifier in encrypted format.</param>
        /// <param name="transactionReferenceId">This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse</returns>
        System.Threading.Tasks.Task<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusAsync (string authorization, string uuid, string accept, string clientId, string cardId, string transactionReferenceId, string clientDetails = null);

        /// <summary>
        /// Retrieve Credit Card Status
        /// </summary>
        /// <remarks>
        /// This API is used to return the credit card status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer Card identifier in encrypted format.</param>
        /// <param name="transactionReferenceId">This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse>> RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string transactionReferenceId, string clientDetails = null);
        /// <summary>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </summary>
        /// <remarks>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="productId">Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking. (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse</returns>
        System.Threading.Tasks.Task<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsync (string authorization, string uuid, string accept, string clientId, string offerId, string clientDetails = null, string productId = null, decimal? loanAmount = null);

        /// <summary>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </summary>
        /// <remarks>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="productId">Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking. (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse>> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string offerId, string clientDetails = null, string productId = null, decimal? loanAmount = null);
        /// <summary>
        /// This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </summary>
        /// <remarks>
        /// This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse</returns>
        System.Threading.Tasks.Task<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsync (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string offerId, string clientDetails = null);

        /// <summary>
        /// This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </summary>
        /// <remarks>
        /// This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse>> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsyncWithHttpInfo (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string offerId, string clientDetails = null);
        /// <summary>
        /// To allow customers to view the payment breakdown details.
        /// </summary>
        /// <remarks>
        /// This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking.</param>
        /// <param name="tenor">Tenure of loan in months</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="binaryDataFlag">This refer to the flag in case of binary file is require. (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse</returns>
        System.Threading.Tasks.Task<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsync (string authorization, string uuid, string accept, string clientId, string offerId, decimal? loanAmount, decimal? tenor, string clientDetails = null, string nextStartIndex = null, bool? binaryDataFlag = null);

        /// <summary>
        /// To allow customers to view the payment breakdown details.
        /// </summary>
        /// <remarks>
        /// This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking.</param>
        /// <param name="tenor">Tenure of loan in months</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="binaryDataFlag">This refer to the flag in case of binary file is require. (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse>> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string offerId, decimal? loanAmount, decimal? tenor, string clientDetails = null, string nextStartIndex = null, bool? binaryDataFlag = null);
        /// <summary>
        /// This API is used to update the corporate card cash limit
        /// </summary>
        /// <remarks>
        /// This API is used to update the corporate card cash limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCreditChargeCardCorporateCardsCashLimitAsync (UpdateCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to update the corporate card cash limit
        /// </summary>
        /// <remarks>
        /// This API is used to update the corporate card cash limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCreditChargeCardCorporateCardsCashLimitAsyncWithHttpInfo (UpdateCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is used to update the corportate card credit limit
        /// </summary>
        /// <remarks>
        /// This API is used to update the corportate card credit limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCreditLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of UpdateCreditChargeCardCorporateCardsCreditLimitResponse</returns>
        System.Threading.Tasks.Task<UpdateCreditChargeCardCorporateCardsCreditLimitResponse> UpdateCreditChargeCardCorporateCardsCreditLimitAsync (UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);

        /// <summary>
        /// This API is used to update the corportate card credit limit
        /// </summary>
        /// <remarks>
        /// This API is used to update the corportate card credit limit
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCreditLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCreditChargeCardCorporateCardsCreditLimitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCreditChargeCardCorporateCardsCreditLimitResponse>> UpdateCreditChargeCardCorporateCardsCreditLimitAsyncWithHttpInfo (UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null);
        /// <summary>
        /// This API is to report lost or stolen card and to apply for Replacement
        /// </summary>
        /// <remarks>
        /// This API is to report lost or stolen card and to apply for Replacement
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse</returns>
        System.Threading.Tasks.Task<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse> UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenAsync (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// This API is to report lost or stolen card and to apply for Replacement
        /// </summary>
        /// <remarks>
        /// This API is to report lost or stolen card and to apply for Replacement
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse>> UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenAsyncWithHttpInfo (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </summary>
        /// <remarks>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlAsync (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </summary>
        /// <remarks>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlAsyncWithHttpInfo (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Enroll for Transaction Limit Setup
        /// </summary>
        /// <remarks>
        /// This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CardsLimitsAndEnrollmentsUpdateRequest</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1CardsCardIdLimitsAndEnrollmentsPutAsync (CardsLimitsAndEnrollmentsUpdateRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId, string clientDetails = null);

        /// <summary>
        /// Enroll for Transaction Limit Setup
        /// </summary>
        /// <remarks>
        /// This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CardsLimitsAndEnrollmentsUpdateRequest</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdLimitsAndEnrollmentsPutAsyncWithHttpInfo (CardsLimitsAndEnrollmentsUpdateRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1CardsCardIdMultiCurrencyAccountsDeleteAsync (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdMultiCurrencyAccountsDeleteAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        System.Threading.Tasks.Task<MultiCurrencyAccountEnrollmentWithCurrencyResponse> V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostAsync (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEnrollmentWithCurrencyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse>> V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostAsyncWithHttpInfo (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEnrollmentResponse</returns>
        System.Threading.Tasks.Task<MultiCurrencyAccountEnrollmentResponse> V1CardsCardIdMultiCurrencyAccountsEnrollmentsPostAsync (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEnrollmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEnrollmentResponse>> V1CardsCardIdMultiCurrencyAccountsEnrollmentsPostAsyncWithHttpInfo (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API enables customer to delete an existing travel plan 
        /// </summary>
        /// <remarks>
        /// This API enables customer to delete an existing travel plan 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1CardsCardIdOverseasTravelPlansDeleteAsync (string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API enables customer to delete an existing travel plan 
        /// </summary>
        /// <remarks>
        /// This API enables customer to delete an existing travel plan 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdOverseasTravelPlansDeleteAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API enables customer to add a new travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to add a new travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanAddRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1CardsCardIdOverseasTravelPlansPostAsync (OverseasTravelPlanAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API enables customer to add a new travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to add a new travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanAddRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdOverseasTravelPlansPostAsyncWithHttpInfo (OverseasTravelPlanAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// This API enables customer to update an existing travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to update an existing travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanUpdateRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1CardsCardIdOverseasTravelPlansPutAsync (OverseasTravelPlanUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);

        /// <summary>
        /// This API enables customer to update an existing travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to update an existing travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanUpdateRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdOverseasTravelPlansPutAsyncWithHttpInfo (OverseasTravelPlanUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null);
        /// <summary>
        /// Verify CVV for Debit or Credit Card
        /// </summary>
        /// <remarks>
        /// This API is used to verify the CVV of a debit or a credit card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CvvVerificationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1CardsCvvVerificationPostAsync (CvvVerificationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Verify CVV for Debit or Credit Card
        /// </summary>
        /// <remarks>
        /// This API is used to verify the CVV of a debit or a credit card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CvvVerificationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCvvVerificationPostAsyncWithHttpInfo (CvvVerificationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// To get the needed account and currency details for Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEligibilityResponse</returns>
        System.Threading.Tasks.Task<MultiCurrencyAccountEligibilityResponse> V1CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsync (string authorization, string uuid, string accept, string clientId, string clientDetails = null);

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// To get the needed account and currency details for Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEligibilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEligibilityResponse>> V1CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null);
        /// <summary>
        /// This API enables customer to inquire current travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to inquire current travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="cardId">The card id  in encrypted format (optional)</param>
        /// <returns>Task of OverseasTravelPlanInquiryResponse</returns>
        System.Threading.Tasks.Task<OverseasTravelPlanInquiryResponse> V1CardsOverseasTravelPlansGetAsync (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string cardId = null);

        /// <summary>
        /// This API enables customer to inquire current travel plan
        /// </summary>
        /// <remarks>
        /// This API enables customer to inquire current travel plan
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="cardId">The card id  in encrypted format (optional)</param>
        /// <returns>Task of ApiResponse (OverseasTravelPlanInquiryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OverseasTravelPlanInquiryResponse>> V1CardsOverseasTravelPlansGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string cardId = null);
        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2CardsCardIdMultiCurrencyAccountsDeleteAsync (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null);

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <remarks>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2CardsCardIdMultiCurrencyAccountsDeleteAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null);
        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// To get the needed account and currency details for Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEligibilityResponse</returns>
        System.Threading.Tasks.Task<MultiCurrencyAccountEligibilityResponse> V2CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsync (string authorization, string uuid, string accept, string clientId, string clientDetails = null);

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account
        /// </summary>
        /// <remarks>
        /// To get the needed account and currency details for Multi Currency Account
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEligibilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEligibilityResponse>> V2CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CardsApi : ICardsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CardsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve the detail of card products This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardType">Type of card (optional, default to credit_card)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ProductResponse</returns>
        public ProductResponse BNMOAPIBankingDigitalRegulatory (string authorization, string uuid, string accept, string clientId, string contentType, string cardType = null, string clientDetails = null)
        {
             ApiResponse<ProductResponse> localVarResponse = BNMOAPIBankingDigitalRegulatoryWithHttpInfo(authorization, uuid, accept, clientId, contentType, cardType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the detail of card products This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardType">Type of card (optional, default to credit_card)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of ProductResponse</returns>
        public ApiResponse< ProductResponse > BNMOAPIBankingDigitalRegulatoryWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string cardType = null, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");

            var localVarPath = "/v1/my/bnm/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "card_type", cardType)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BNMOAPIBankingDigitalRegulatory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductResponse)));
        }

        /// <summary>
        /// Retrieve the detail of card products This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardType">Type of card (optional, default to credit_card)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ProductResponse</returns>
        public async System.Threading.Tasks.Task<ProductResponse> BNMOAPIBankingDigitalRegulatoryAsync (string authorization, string uuid, string accept, string clientId, string contentType, string cardType = null, string clientDetails = null)
        {
             ApiResponse<ProductResponse> localVarResponse = await BNMOAPIBankingDigitalRegulatoryAsyncWithHttpInfo(authorization, uuid, accept, clientId, contentType, cardType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the detail of card products This API is designed basing on Bank Negara Malaysia (BNM) Open API Product Information Specification to provide Citibank’s Malaysia Credit card product information that are currently offered in the Market.&lt;br/&gt;API specs for Swagger download and the API details displayed are for illustration purpose only. For actual specification please refer to the BNM website.&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt; :To get the details of the API specification , please refer to the BNM link below to extract the exact specifications.&lt;br/&gt;BNM Link  :https://github.com/BankNegaraMY
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardType">Type of card (optional, default to credit_card)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (ProductResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductResponse>> BNMOAPIBankingDigitalRegulatoryAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string cardType = null, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->BNMOAPIBankingDigitalRegulatory");

            var localVarPath = "/v1/my/bnm/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "card_type", cardType)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BNMOAPIBankingDigitalRegulatory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductResponse)));
        }

        /// <summary>
        /// Confirm Easy Payment Plan Booking This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>EppLoanBookingConfirmationResponse</returns>
        public EppLoanBookingConfirmationResponse EppLoanBookingConfirmation (EppLoanBookingConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<EppLoanBookingConfirmationResponse> localVarResponse = EppLoanBookingConfirmationWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm Easy Payment Plan Booking This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of EppLoanBookingConfirmationResponse</returns>
        public ApiResponse< EppLoanBookingConfirmationResponse > EppLoanBookingConfirmationWithHttpInfo (EppLoanBookingConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->EppLoanBookingConfirmation");

            var localVarPath = "/v1/creditCards/{cardId}/easyPaymentPlans/bookings/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EppLoanBookingConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EppLoanBookingConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EppLoanBookingConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EppLoanBookingConfirmationResponse)));
        }

        /// <summary>
        /// Confirm Easy Payment Plan Booking This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of EppLoanBookingConfirmationResponse</returns>
        public async System.Threading.Tasks.Task<EppLoanBookingConfirmationResponse> EppLoanBookingConfirmationAsync (EppLoanBookingConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<EppLoanBookingConfirmationResponse> localVarResponse = await EppLoanBookingConfirmationAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm Easy Payment Plan Booking This API is triggered after the EPP plan is selected and completes the EPP booking. On successful booking, it returns transaction reference in the response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (EppLoanBookingConfirmationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EppLoanBookingConfirmationResponse>> EppLoanBookingConfirmationAsyncWithHttpInfo (EppLoanBookingConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->EppLoanBookingConfirmation");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->EppLoanBookingConfirmation");

            var localVarPath = "/v1/creditCards/{cardId}/easyPaymentPlans/bookings/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EppLoanBookingConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EppLoanBookingConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EppLoanBookingConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EppLoanBookingConfirmationResponse)));
        }

        /// <summary>
        /// This API is used to close the corporate Credit Card or Ready credit Account. This API is used to close the corporate Credit Card or Ready credit Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InitiateCreditChargeCardCorporateCardsClosureRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>InitiateCreditChargeCardCorporateCardsClosureResponse</returns>
        public InitiateCreditChargeCardCorporateCardsClosureResponse InitiateCreditChargeCardCorporateCardsClosure (InitiateCreditChargeCardCorporateCardsClosureRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<InitiateCreditChargeCardCorporateCardsClosureResponse> localVarResponse = InitiateCreditChargeCardCorporateCardsClosureWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is used to close the corporate Credit Card or Ready credit Account. This API is used to close the corporate Credit Card or Ready credit Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InitiateCreditChargeCardCorporateCardsClosureRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of InitiateCreditChargeCardCorporateCardsClosureResponse</returns>
        public ApiResponse< InitiateCreditChargeCardCorporateCardsClosureResponse > InitiateCreditChargeCardCorporateCardsClosureWithHttpInfo (InitiateCreditChargeCardCorporateCardsClosureRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/closure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateCreditChargeCardCorporateCardsClosure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InitiateCreditChargeCardCorporateCardsClosureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InitiateCreditChargeCardCorporateCardsClosureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InitiateCreditChargeCardCorporateCardsClosureResponse)));
        }

        /// <summary>
        /// This API is used to close the corporate Credit Card or Ready credit Account. This API is used to close the corporate Credit Card or Ready credit Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InitiateCreditChargeCardCorporateCardsClosureRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of InitiateCreditChargeCardCorporateCardsClosureResponse</returns>
        public async System.Threading.Tasks.Task<InitiateCreditChargeCardCorporateCardsClosureResponse> InitiateCreditChargeCardCorporateCardsClosureAsync (InitiateCreditChargeCardCorporateCardsClosureRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<InitiateCreditChargeCardCorporateCardsClosureResponse> localVarResponse = await InitiateCreditChargeCardCorporateCardsClosureAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is used to close the corporate Credit Card or Ready credit Account. This API is used to close the corporate Credit Card or Ready credit Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">InitiateCreditChargeCardCorporateCardsClosureRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (InitiateCreditChargeCardCorporateCardsClosureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InitiateCreditChargeCardCorporateCardsClosureResponse>> InitiateCreditChargeCardCorporateCardsClosureAsyncWithHttpInfo (InitiateCreditChargeCardCorporateCardsClosureRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->InitiateCreditChargeCardCorporateCardsClosure");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/closure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateCreditChargeCardCorporateCardsClosure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InitiateCreditChargeCardCorporateCardsClosureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InitiateCreditChargeCardCorporateCardsClosureResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InitiateCreditChargeCardCorporateCardsClosureResponse)));
        }

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEnrollmentResponse</returns>
        public MultiCurrencyAccountEnrollmentResponse MultiCurrencyAccountEnrollment (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEnrollmentResponse> localVarResponse = MultiCurrencyAccountEnrollmentWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEnrollmentResponse</returns>
        public ApiResponse< MultiCurrencyAccountEnrollmentResponse > MultiCurrencyAccountEnrollmentWithHttpInfo (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->MultiCurrencyAccountEnrollment");

            var localVarPath = "/v2/cards/{cardId}/multiCurrencyAccounts/enrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MultiCurrencyAccountEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEnrollmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEnrollmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEnrollmentResponse)));
        }

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEnrollmentResponse</returns>
        public async System.Threading.Tasks.Task<MultiCurrencyAccountEnrollmentResponse> MultiCurrencyAccountEnrollmentAsync (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEnrollmentResponse> localVarResponse = await MultiCurrencyAccountEnrollmentAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEnrollmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEnrollmentResponse>> MultiCurrencyAccountEnrollmentAsyncWithHttpInfo (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->MultiCurrencyAccountEnrollment");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->MultiCurrencyAccountEnrollment");

            var localVarPath = "/v2/cards/{cardId}/multiCurrencyAccounts/enrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MultiCurrencyAccountEnrollment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEnrollmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEnrollmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEnrollmentResponse)));
        }

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        public MultiCurrencyAccountEnrollmentWithCurrencyResponse MultiCurrencyAccountEnrollmentWithCurrency (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> localVarResponse = MultiCurrencyAccountEnrollmentWithCurrencyWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        public ApiResponse< MultiCurrencyAccountEnrollmentWithCurrencyResponse > MultiCurrencyAccountEnrollmentWithCurrencyWithHttpInfo (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");

            var localVarPath = "/v2/cards/{cardId}/multiCurrencyAccounts/enrollments/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MultiCurrencyAccountEnrollmentWithCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEnrollmentWithCurrencyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEnrollmentWithCurrencyResponse)));
        }

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        public async System.Threading.Tasks.Task<MultiCurrencyAccountEnrollmentWithCurrencyResponse> MultiCurrencyAccountEnrollmentWithCurrencyAsync (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> localVarResponse = await MultiCurrencyAccountEnrollmentWithCurrencyAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEnrollmentWithCurrencyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse>> MultiCurrencyAccountEnrollmentWithCurrencyAsyncWithHttpInfo (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->MultiCurrencyAccountEnrollmentWithCurrency");

            var localVarPath = "/v2/cards/{cardId}/multiCurrencyAccounts/enrollments/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MultiCurrencyAccountEnrollmentWithCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEnrollmentWithCurrencyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEnrollmentWithCurrencyResponse)));
        }

        /// <summary>
        /// Partner Card List This API is used to list all the cards held by a customer with Citi partner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description.</param>
        /// <param name="linkedSupplementaryCardFlag">Flag to identify linked supplementary information to be retrieved. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>PartnerCardListingResponse</returns>
        public PartnerCardListingResponse PartnerCardListing (string authorization, string uuid, string accept, string clientId, string cardFunction, bool? linkedSupplementaryCardFlag = null, string clientDetails = null)
        {
             ApiResponse<PartnerCardListingResponse> localVarResponse = PartnerCardListingWithHttpInfo(authorization, uuid, accept, clientId, cardFunction, linkedSupplementaryCardFlag, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Partner Card List This API is used to list all the cards held by a customer with Citi partner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description.</param>
        /// <param name="linkedSupplementaryCardFlag">Flag to identify linked supplementary information to be retrieved. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of PartnerCardListingResponse</returns>
        public ApiResponse< PartnerCardListingResponse > PartnerCardListingWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardFunction, bool? linkedSupplementaryCardFlag = null, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->PartnerCardListing");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->PartnerCardListing");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->PartnerCardListing");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->PartnerCardListing");
            // verify the required parameter 'cardFunction' is set
            if (cardFunction == null)
                throw new ApiException(400, "Missing required parameter 'cardFunction' when calling CardsApi->PartnerCardListing");

            var localVarPath = "/partner/v1/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardFunction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cardFunction", cardFunction)); // query parameter
            if (linkedSupplementaryCardFlag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "linkedSupplementaryCardFlag", linkedSupplementaryCardFlag)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerCardListing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerCardListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PartnerCardListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerCardListingResponse)));
        }

        /// <summary>
        /// Partner Card List This API is used to list all the cards held by a customer with Citi partner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description.</param>
        /// <param name="linkedSupplementaryCardFlag">Flag to identify linked supplementary information to be retrieved. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of PartnerCardListingResponse</returns>
        public async System.Threading.Tasks.Task<PartnerCardListingResponse> PartnerCardListingAsync (string authorization, string uuid, string accept, string clientId, string cardFunction, bool? linkedSupplementaryCardFlag = null, string clientDetails = null)
        {
             ApiResponse<PartnerCardListingResponse> localVarResponse = await PartnerCardListingAsyncWithHttpInfo(authorization, uuid, accept, clientId, cardFunction, linkedSupplementaryCardFlag, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Partner Card List This API is used to list all the cards held by a customer with Citi partner.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description.</param>
        /// <param name="linkedSupplementaryCardFlag">Flag to identify linked supplementary information to be retrieved. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (PartnerCardListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PartnerCardListingResponse>> PartnerCardListingAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardFunction, bool? linkedSupplementaryCardFlag = null, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->PartnerCardListing");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->PartnerCardListing");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->PartnerCardListing");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->PartnerCardListing");
            // verify the required parameter 'cardFunction' is set
            if (cardFunction == null)
                throw new ApiException(400, "Missing required parameter 'cardFunction' when calling CardsApi->PartnerCardListing");

            var localVarPath = "/partner/v1/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardFunction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cardFunction", cardFunction)); // query parameter
            if (linkedSupplementaryCardFlag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "linkedSupplementaryCardFlag", linkedSupplementaryCardFlag)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartnerCardListing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerCardListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PartnerCardListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerCardListingResponse)));
        }

        /// <summary>
        /// This API is used to Suspend and Unsuspend corporate card. This API is used to Suspend and Unsuspend corporate card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed (RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
        }

        /// <summary>
        /// This API is used to Suspend and Unsuspend corporate card. This API is used to Suspend and Unsuspend corporate card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedWithHttpInfo (RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/suspensionAndCashLimitAllowed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is used to Suspend and Unsuspend corporate card. This API is used to Suspend and Unsuspend corporate card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedAsync (RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             await RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);

        }

        /// <summary>
        /// This API is used to Suspend and Unsuspend corporate card. This API is used to Suspend and Unsuspend corporate card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedAsyncWithHttpInfo (RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/suspensionAndCashLimitAllowed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse</returns>
        public RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse> localVarResponse = RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse</returns>
        public ApiResponse< RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse > RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementWithHttpInfo (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/cardReplacement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse)));
        }

        /// <summary>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse</returns>
        public async System.Threading.Tasks.Task<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse> RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementAsync (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse> localVarResponse = await RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is to do the replacement of credit card for Damage/Lost/Stolen reasons This API is to do the replacement of credit card for Damage/Lost/Stolen reasons
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse>> RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementAsyncWithHttpInfo (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/cardReplacement";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse)));
        }

        /// <summary>
        /// This API is used for EPP Refund in Open Loop This API is used for EPP Refund in Open Loop
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund (RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
        }

        /// <summary>
        /// This API is used for EPP Refund in Open Loop This API is used for EPP Refund in Open Loop
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundWithHttpInfo (RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");

            var localVarPath = "/v1/creditChargeCard/creditPlan/epp/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is used for EPP Refund in Open Loop This API is used for EPP Refund in Open Loop
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundAsync (RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             await RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        }

        /// <summary>
        /// This API is used for EPP Refund in Open Loop This API is used for EPP Refund in Open Loop
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundAsyncWithHttpInfo (RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund");

            var localVarPath = "/v1/creditChargeCard/creditPlan/epp/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is used to retrieve the corporate card cash limit This API is used to retrieve the corporate card cash limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardCorporateCardsCashLimitResponse</returns>
        public RetrieveCreditChargeCardCorporateCardsCashLimitResponse RetrieveCreditChargeCardCorporateCardsCashLimit (RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardCorporateCardsCashLimitResponse> localVarResponse = RetrieveCreditChargeCardCorporateCardsCashLimitWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is used to retrieve the corporate card cash limit This API is used to retrieve the corporate card cash limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardCorporateCardsCashLimitResponse</returns>
        public ApiResponse< RetrieveCreditChargeCardCorporateCardsCashLimitResponse > RetrieveCreditChargeCardCorporateCardsCashLimitWithHttpInfo (RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/cashLimit/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardCorporateCardsCashLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardCorporateCardsCashLimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardCorporateCardsCashLimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardCorporateCardsCashLimitResponse)));
        }

        /// <summary>
        /// This API is used to retrieve the corporate card cash limit This API is used to retrieve the corporate card cash limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardCorporateCardsCashLimitResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveCreditChargeCardCorporateCardsCashLimitResponse> RetrieveCreditChargeCardCorporateCardsCashLimitAsync (RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardCorporateCardsCashLimitResponse> localVarResponse = await RetrieveCreditChargeCardCorporateCardsCashLimitAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is used to retrieve the corporate card cash limit This API is used to retrieve the corporate card cash limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardCorporateCardsCashLimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardCorporateCardsCashLimitResponse>> RetrieveCreditChargeCardCorporateCardsCashLimitAsyncWithHttpInfo (RetrieveCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsCashLimit");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/cashLimit/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardCorporateCardsCashLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardCorporateCardsCashLimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardCorporateCardsCashLimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardCorporateCardsCashLimitResponse)));
        }

        /// <summary>
        /// This API is used to retrieve the corporate card details This API is used to retrieve the corporate card details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsDetailRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardCorporateCardsDetailResponse</returns>
        public RetrieveCreditChargeCardCorporateCardsDetailResponse RetrieveCreditChargeCardCorporateCardsDetail (RetrieveCreditChargeCardCorporateCardsDetailRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardCorporateCardsDetailResponse> localVarResponse = RetrieveCreditChargeCardCorporateCardsDetailWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is used to retrieve the corporate card details This API is used to retrieve the corporate card details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsDetailRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardCorporateCardsDetailResponse</returns>
        public ApiResponse< RetrieveCreditChargeCardCorporateCardsDetailResponse > RetrieveCreditChargeCardCorporateCardsDetailWithHttpInfo (RetrieveCreditChargeCardCorporateCardsDetailRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/details/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardCorporateCardsDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardCorporateCardsDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardCorporateCardsDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardCorporateCardsDetailResponse)));
        }

        /// <summary>
        /// This API is used to retrieve the corporate card details This API is used to retrieve the corporate card details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsDetailRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardCorporateCardsDetailResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveCreditChargeCardCorporateCardsDetailResponse> RetrieveCreditChargeCardCorporateCardsDetailAsync (RetrieveCreditChargeCardCorporateCardsDetailRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardCorporateCardsDetailResponse> localVarResponse = await RetrieveCreditChargeCardCorporateCardsDetailAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is used to retrieve the corporate card details This API is used to retrieve the corporate card details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsDetailRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardCorporateCardsDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardCorporateCardsDetailResponse>> RetrieveCreditChargeCardCorporateCardsDetailAsyncWithHttpInfo (RetrieveCreditChargeCardCorporateCardsDetailRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsDetail");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/details/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardCorporateCardsDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardCorporateCardsDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardCorporateCardsDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardCorporateCardsDetailResponse)));
        }

        /// <summary>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse</returns>
        public RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse> localVarResponse = RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse</returns>
        public ApiResponse< RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse > RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsWithHttpInfo (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/pendingAndIntradayAuthorizationTransactions/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse)));
        }

        /// <summary>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse> RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsAsync (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse> localVarResponse = await RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API used to retrieve the pending Authorization refund and intraday and history transactions This API used to retrieve the pending Authorization refund and intraday and history transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse>> RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsAsyncWithHttpInfo (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/pendingAndIntradayAuthorizationTransactions/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse)));
        }

        /// <summary>
        /// Retrieve Credit Card Status This API is used to return the credit card status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer Card identifier in encrypted format.</param>
        /// <param name="transactionReferenceId">This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse</returns>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus (string authorization, string uuid, string accept, string clientId, string cardId, string transactionReferenceId, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse> localVarResponse = RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusWithHttpInfo(authorization, uuid, accept, clientId, cardId, transactionReferenceId, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Credit Card Status This API is used to return the credit card status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer Card identifier in encrypted format.</param>
        /// <param name="transactionReferenceId">This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse</returns>
        public ApiResponse< RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse > RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string transactionReferenceId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'transactionReferenceId' is set
            if (transactionReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'transactionReferenceId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");

            var localVarPath = "/v1/creditChargeCard/cardStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cardId", cardId)); // query parameter
            if (transactionReferenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionReferenceId", transactionReferenceId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse)));
        }

        /// <summary>
        /// Retrieve Credit Card Status This API is used to return the credit card status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer Card identifier in encrypted format.</param>
        /// <param name="transactionReferenceId">This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusAsync (string authorization, string uuid, string accept, string clientId, string cardId, string transactionReferenceId, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse> localVarResponse = await RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusAsyncWithHttpInfo(authorization, uuid, accept, clientId, cardId, transactionReferenceId, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Credit Card Status This API is used to return the credit card status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer Card identifier in encrypted format.</param>
        /// <param name="transactionReferenceId">This refers to Unique ID assigned by the message initiator that uniquely identifies a cardholder transaction.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse>> RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string transactionReferenceId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");
            // verify the required parameter 'transactionReferenceId' is set
            if (transactionReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'transactionReferenceId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus");

            var localVarPath = "/v1/creditChargeCard/cardStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cardId", cardId)); // query parameter
            if (transactionReferenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionReferenceId", transactionReferenceId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse)));
        }

        /// <summary>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors. This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="productId">Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking. (optional)</param>
        /// <returns>RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse</returns>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp (string authorization, string uuid, string accept, string clientId, string offerId, string clientDetails = null, string productId = null, decimal? loanAmount = null)
        {
             ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse> localVarResponse = RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppWithHttpInfo(authorization, uuid, accept, clientId, offerId, clientDetails, productId, loanAmount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors. This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="productId">Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking. (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse</returns>
        public ApiResponse< RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse > RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppWithHttpInfo (string authorization, string uuid, string accept, string clientId, string offerId, string clientDetails = null, string productId = null, decimal? loanAmount = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ApiException(400, "Missing required parameter 'offerId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");

            var localVarPath = "/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offerId != null) localVarPathParams.Add("offerId", this.Configuration.ApiClient.ParameterToString(offerId)); // path parameter
            if (productId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "productId", productId)); // query parameter
            if (loanAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loanAmount", loanAmount)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse)));
        }

        /// <summary>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors. This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="productId">Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking. (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsync (string authorization, string uuid, string accept, string clientId, string offerId, string clientDetails = null, string productId = null, decimal? loanAmount = null)
        {
             ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse> localVarResponse = await RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsyncWithHttpInfo(authorization, uuid, accept, clientId, offerId, clientDetails, productId, loanAmount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors. This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="productId">Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking. (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse>> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string offerId, string clientDetails = null, string productId = null, decimal? loanAmount = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ApiException(400, "Missing required parameter 'offerId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp");

            var localVarPath = "/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offerId != null) localVarPathParams.Add("offerId", this.Configuration.ApiClient.ParameterToString(offerId)); // path parameter
            if (productId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "productId", productId)); // query parameter
            if (loanAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loanAmount", loanAmount)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse)));
        }

        /// <summary>
        /// This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number. This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse</returns>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string offerId, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse> localVarResponse = RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, offerId, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number. This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse</returns>
        public ApiResponse< RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse > RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsWithHttpInfo (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string offerId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ApiException(400, "Missing required parameter 'offerId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");

            var localVarPath = "/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans/bookings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offerId != null) localVarPathParams.Add("offerId", this.Configuration.ApiClient.ParameterToString(offerId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse)));
        }

        /// <summary>
        /// This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number. This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsync (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string offerId, string clientDetails = null)
        {
             ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse> localVarResponse = await RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, offerId, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number. This API is triggered after the EPP Plan is selected and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse>> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsyncWithHttpInfo (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string offerId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ApiException(400, "Missing required parameter 'offerId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings");

            var localVarPath = "/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans/bookings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offerId != null) localVarPathParams.Add("offerId", this.Configuration.ApiClient.ParameterToString(offerId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse)));
        }

        /// <summary>
        /// To allow customers to view the payment breakdown details. This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking.</param>
        /// <param name="tenor">Tenure of loan in months</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="binaryDataFlag">This refer to the flag in case of binary file is require. (optional)</param>
        /// <returns>RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse</returns>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules (string authorization, string uuid, string accept, string clientId, string offerId, decimal? loanAmount, decimal? tenor, string clientDetails = null, string nextStartIndex = null, bool? binaryDataFlag = null)
        {
             ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse> localVarResponse = RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesWithHttpInfo(authorization, uuid, accept, clientId, offerId, loanAmount, tenor, clientDetails, nextStartIndex, binaryDataFlag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// To allow customers to view the payment breakdown details. This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking.</param>
        /// <param name="tenor">Tenure of loan in months</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="binaryDataFlag">This refer to the flag in case of binary file is require. (optional)</param>
        /// <returns>ApiResponse of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse</returns>
        public ApiResponse< RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse > RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesWithHttpInfo (string authorization, string uuid, string accept, string clientId, string offerId, decimal? loanAmount, decimal? tenor, string clientDetails = null, string nextStartIndex = null, bool? binaryDataFlag = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ApiException(400, "Missing required parameter 'offerId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'loanAmount' is set
            if (loanAmount == null)
                throw new ApiException(400, "Missing required parameter 'loanAmount' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'tenor' is set
            if (tenor == null)
                throw new ApiException(400, "Missing required parameter 'tenor' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");

            var localVarPath = "/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans/repaymentSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offerId != null) localVarPathParams.Add("offerId", this.Configuration.ApiClient.ParameterToString(offerId)); // path parameter
            if (loanAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loanAmount", loanAmount)); // query parameter
            if (tenor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenor", tenor)); // query parameter
            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (binaryDataFlag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryDataFlag", binaryDataFlag)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse)));
        }

        /// <summary>
        /// To allow customers to view the payment breakdown details. This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking.</param>
        /// <param name="tenor">Tenure of loan in months</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="binaryDataFlag">This refer to the flag in case of binary file is require. (optional)</param>
        /// <returns>Task of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsync (string authorization, string uuid, string accept, string clientId, string offerId, decimal? loanAmount, decimal? tenor, string clientDetails = null, string nextStartIndex = null, bool? binaryDataFlag = null)
        {
             ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse> localVarResponse = await RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsyncWithHttpInfo(authorization, uuid, accept, clientId, offerId, loanAmount, tenor, clientDetails, nextStartIndex, binaryDataFlag);
             return localVarResponse.Data;

        }

        /// <summary>
        /// To allow customers to view the payment breakdown details. This API allows the customer to view the payment breakdown details for the selected time period for prelogin offer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="offerId">This Refers to the unique id for the Pre login offer.</param>
        /// <param name="loanAmount">Loan amount for easy payment plan booking.</param>
        /// <param name="tenor">Tenure of loan in months</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="binaryDataFlag">This refer to the flag in case of binary file is require. (optional)</param>
        /// <returns>Task of ApiResponse (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse>> RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string offerId, decimal? loanAmount, decimal? tenor, string clientDetails = null, string nextStartIndex = null, bool? binaryDataFlag = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ApiException(400, "Missing required parameter 'offerId' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'loanAmount' is set
            if (loanAmount == null)
                throw new ApiException(400, "Missing required parameter 'loanAmount' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");
            // verify the required parameter 'tenor' is set
            if (tenor == null)
                throw new ApiException(400, "Missing required parameter 'tenor' when calling CardsApi->RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules");

            var localVarPath = "/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans/repaymentSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offerId != null) localVarPathParams.Add("offerId", this.Configuration.ApiClient.ParameterToString(offerId)); // path parameter
            if (loanAmount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loanAmount", loanAmount)); // query parameter
            if (tenor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenor", tenor)); // query parameter
            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (binaryDataFlag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryDataFlag", binaryDataFlag)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse)));
        }

        /// <summary>
        /// This API is used to update the corporate card cash limit This API is used to update the corporate card cash limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void UpdateCreditChargeCardCorporateCardsCashLimit (UpdateCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             UpdateCreditChargeCardCorporateCardsCashLimitWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
        }

        /// <summary>
        /// This API is used to update the corporate card cash limit This API is used to update the corporate card cash limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCreditChargeCardCorporateCardsCashLimitWithHttpInfo (UpdateCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/cashLimit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditChargeCardCorporateCardsCashLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is used to update the corporate card cash limit This API is used to update the corporate card cash limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCreditChargeCardCorporateCardsCashLimitAsync (UpdateCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             await UpdateCreditChargeCardCorporateCardsCashLimitAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);

        }

        /// <summary>
        /// This API is used to update the corporate card cash limit This API is used to update the corporate card cash limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCashLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCreditChargeCardCorporateCardsCashLimitAsyncWithHttpInfo (UpdateCreditChargeCardCorporateCardsCashLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCashLimit");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/cashLimit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditChargeCardCorporateCardsCashLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is used to update the corportate card credit limit This API is used to update the corportate card credit limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCreditLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>UpdateCreditChargeCardCorporateCardsCreditLimitResponse</returns>
        public UpdateCreditChargeCardCorporateCardsCreditLimitResponse UpdateCreditChargeCardCorporateCardsCreditLimit (UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<UpdateCreditChargeCardCorporateCardsCreditLimitResponse> localVarResponse = UpdateCreditChargeCardCorporateCardsCreditLimitWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is used to update the corportate card credit limit This API is used to update the corportate card credit limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCreditLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of UpdateCreditChargeCardCorporateCardsCreditLimitResponse</returns>
        public ApiResponse< UpdateCreditChargeCardCorporateCardsCreditLimitResponse > UpdateCreditChargeCardCorporateCardsCreditLimitWithHttpInfo (UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/creditLimit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditChargeCardCorporateCardsCreditLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCreditChargeCardCorporateCardsCreditLimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateCreditChargeCardCorporateCardsCreditLimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCreditChargeCardCorporateCardsCreditLimitResponse)));
        }

        /// <summary>
        /// This API is used to update the corportate card credit limit This API is used to update the corportate card credit limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCreditLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of UpdateCreditChargeCardCorporateCardsCreditLimitResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCreditChargeCardCorporateCardsCreditLimitResponse> UpdateCreditChargeCardCorporateCardsCreditLimitAsync (UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
             ApiResponse<UpdateCreditChargeCardCorporateCardsCreditLimitResponse> localVarResponse = await UpdateCreditChargeCardCorporateCardsCreditLimitAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is used to update the corportate card credit limit This API is used to update the corportate card credit limit
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardCorporateCardsCreditLimitRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCreditChargeCardCorporateCardsCreditLimitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCreditChargeCardCorporateCardsCreditLimitResponse>> UpdateCreditChargeCardCorporateCardsCreditLimitAsyncWithHttpInfo (UpdateCreditChargeCardCorporateCardsCreditLimitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->UpdateCreditChargeCardCorporateCardsCreditLimit");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/creditLimit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditChargeCardCorporateCardsCreditLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCreditChargeCardCorporateCardsCreditLimitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateCreditChargeCardCorporateCardsCreditLimitResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCreditChargeCardCorporateCardsCreditLimitResponse)));
        }

        /// <summary>
        /// This API is to report lost or stolen card and to apply for Replacement This API is to report lost or stolen card and to apply for Replacement
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse</returns>
        public UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse> localVarResponse = UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is to report lost or stolen card and to apply for Replacement This API is to report lost or stolen card and to apply for Replacement
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse</returns>
        public ApiResponse< UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse > UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenWithHttpInfo (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/lostOrStolen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse)));
        }

        /// <summary>
        /// This API is to report lost or stolen card and to apply for Replacement This API is to report lost or stolen card and to apply for Replacement
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse> UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenAsync (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse> localVarResponse = await UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is to report lost or stolen card and to apply for Replacement This API is to report lost or stolen card and to apply for Replacement
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse>> UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenAsyncWithHttpInfo (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/lostOrStolen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse)));
        }

        /// <summary>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
        }

        /// <summary>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlWithHttpInfo (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/spendControl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlAsync (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             await UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        }

        /// <summary>
        /// This API will help corporate user to update purchases for specific merchants coming in the API request This API will help corporate user to update purchases for specific merchants coming in the API request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlAsyncWithHttpInfo (UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl");

            var localVarPath = "/partner/v1/creditChargeCard/corporateCards/spendControl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enroll for Transaction Limit Setup This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CardsLimitsAndEnrollmentsUpdateRequest</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void V1CardsCardIdLimitsAndEnrollmentsPut (CardsLimitsAndEnrollmentsUpdateRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId, string clientDetails = null)
        {
             V1CardsCardIdLimitsAndEnrollmentsPutWithHttpInfo(body, uuid, accept, clientId, contentType, authorization, cardId, clientDetails);
        }

        /// <summary>
        /// Enroll for Transaction Limit Setup This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CardsLimitsAndEnrollmentsUpdateRequest</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1CardsCardIdLimitsAndEnrollmentsPutWithHttpInfo (CardsLimitsAndEnrollmentsUpdateRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");

            var localVarPath = "/v1/cards/{cardId}/limitsAndEnrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdLimitsAndEnrollmentsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Enroll for Transaction Limit Setup This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CardsLimitsAndEnrollmentsUpdateRequest</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1CardsCardIdLimitsAndEnrollmentsPutAsync (CardsLimitsAndEnrollmentsUpdateRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId, string clientDetails = null)
        {
             await V1CardsCardIdLimitsAndEnrollmentsPutAsyncWithHttpInfo(body, uuid, accept, clientId, contentType, authorization, cardId, clientDetails);

        }

        /// <summary>
        /// Enroll for Transaction Limit Setup This API is used to update the limits (daily and transaction level) and the enrollments applicable for the credit/debit card of a customer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CardsLimitsAndEnrollmentsUpdateRequest</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdLimitsAndEnrollmentsPutAsyncWithHttpInfo (CardsLimitsAndEnrollmentsUpdateRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdLimitsAndEnrollmentsPut");

            var localVarPath = "/v1/cards/{cardId}/limitsAndEnrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdLimitsAndEnrollmentsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void V1CardsCardIdMultiCurrencyAccountsDelete (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null)
        {
             V1CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo(authorization, uuid, accept, clientId, cardId, clientDetails);
        }

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");

            var localVarPath = "/v1/cards/{cardId}/multiCurrencyAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdMultiCurrencyAccountsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1CardsCardIdMultiCurrencyAccountsDeleteAsync (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null)
        {
             await V1CardsCardIdMultiCurrencyAccountsDeleteAsyncWithHttpInfo(authorization, uuid, accept, clientId, cardId, clientDetails);

        }

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdMultiCurrencyAccountsDeleteAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsDelete");

            var localVarPath = "/v1/cards/{cardId}/multiCurrencyAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdMultiCurrencyAccountsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        public MultiCurrencyAccountEnrollmentWithCurrencyResponse V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> localVarResponse = V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        public ApiResponse< MultiCurrencyAccountEnrollmentWithCurrencyResponse > V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostWithHttpInfo (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");

            var localVarPath = "/v1/cards/{cardId}/multiCurrencyAccounts/enrollments/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEnrollmentWithCurrencyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEnrollmentWithCurrencyResponse)));
        }

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEnrollmentWithCurrencyResponse</returns>
        public async System.Threading.Tasks.Task<MultiCurrencyAccountEnrollmentWithCurrencyResponse> V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostAsync (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse> localVarResponse = await V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is to generate/enroll new FCY Accounts to Multi Currency Account This API is to create new account for a foreign currency and enroll it to Multi Currency Account (Global Wallet)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentWithCurrencyRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEnrollmentWithCurrencyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse>> V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostAsyncWithHttpInfo (MultiCurrencyAccountEnrollmentWithCurrencyRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost");

            var localVarPath = "/v1/cards/{cardId}/multiCurrencyAccounts/enrollments/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEnrollmentWithCurrencyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEnrollmentWithCurrencyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEnrollmentWithCurrencyResponse)));
        }

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEnrollmentResponse</returns>
        public MultiCurrencyAccountEnrollmentResponse V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEnrollmentResponse> localVarResponse = V1CardsCardIdMultiCurrencyAccountsEnrollmentsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEnrollmentResponse</returns>
        public ApiResponse< MultiCurrencyAccountEnrollmentResponse > V1CardsCardIdMultiCurrencyAccountsEnrollmentsPostWithHttpInfo (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");

            var localVarPath = "/v1/cards/{cardId}/multiCurrencyAccounts/enrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEnrollmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEnrollmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEnrollmentResponse)));
        }

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEnrollmentResponse</returns>
        public async System.Threading.Tasks.Task<MultiCurrencyAccountEnrollmentResponse> V1CardsCardIdMultiCurrencyAccountsEnrollmentsPostAsync (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEnrollmentResponse> localVarResponse = await V1CardsCardIdMultiCurrencyAccountsEnrollmentsPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account This API is to enroll the Debit Card and FCY Accounts to Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">MultiCurrencyAccountEnrollmentRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The customer card identifier in encrypted format, that needs to be enrolled to multi currency accounts</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEnrollmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEnrollmentResponse>> V1CardsCardIdMultiCurrencyAccountsEnrollmentsPostAsyncWithHttpInfo (MultiCurrencyAccountEnrollmentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost");

            var localVarPath = "/v1/cards/{cardId}/multiCurrencyAccounts/enrollments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEnrollmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEnrollmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEnrollmentResponse)));
        }

        /// <summary>
        /// This API enables customer to delete an existing travel plan  This API enables customer to delete an existing travel plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void V1CardsCardIdOverseasTravelPlansDelete (string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             V1CardsCardIdOverseasTravelPlansDeleteWithHttpInfo(authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
        }

        /// <summary>
        /// This API enables customer to delete an existing travel plan  This API enables customer to delete an existing travel plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1CardsCardIdOverseasTravelPlansDeleteWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");

            var localVarPath = "/v1/cards/{cardId}/overseasTravelPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdOverseasTravelPlansDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API enables customer to delete an existing travel plan  This API enables customer to delete an existing travel plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1CardsCardIdOverseasTravelPlansDeleteAsync (string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             await V1CardsCardIdOverseasTravelPlansDeleteAsyncWithHttpInfo(authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        }

        /// <summary>
        /// This API enables customer to delete an existing travel plan  This API enables customer to delete an existing travel plan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdOverseasTravelPlansDeleteAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansDelete");

            var localVarPath = "/v1/cards/{cardId}/overseasTravelPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdOverseasTravelPlansDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API enables customer to add a new travel plan This API enables customer to add a new travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanAddRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void V1CardsCardIdOverseasTravelPlansPost (OverseasTravelPlanAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             V1CardsCardIdOverseasTravelPlansPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
        }

        /// <summary>
        /// This API enables customer to add a new travel plan This API enables customer to add a new travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanAddRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1CardsCardIdOverseasTravelPlansPostWithHttpInfo (OverseasTravelPlanAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");

            var localVarPath = "/v1/cards/{cardId}/overseasTravelPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdOverseasTravelPlansPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API enables customer to add a new travel plan This API enables customer to add a new travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanAddRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1CardsCardIdOverseasTravelPlansPostAsync (OverseasTravelPlanAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             await V1CardsCardIdOverseasTravelPlansPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        }

        /// <summary>
        /// This API enables customer to add a new travel plan This API enables customer to add a new travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanAddRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdOverseasTravelPlansPostAsyncWithHttpInfo (OverseasTravelPlanAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPost");

            var localVarPath = "/v1/cards/{cardId}/overseasTravelPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdOverseasTravelPlansPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API enables customer to update an existing travel plan This API enables customer to update an existing travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanUpdateRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void V1CardsCardIdOverseasTravelPlansPut (OverseasTravelPlanUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             V1CardsCardIdOverseasTravelPlansPutWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
        }

        /// <summary>
        /// This API enables customer to update an existing travel plan This API enables customer to update an existing travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanUpdateRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1CardsCardIdOverseasTravelPlansPutWithHttpInfo (OverseasTravelPlanUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");

            var localVarPath = "/v1/cards/{cardId}/overseasTravelPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdOverseasTravelPlansPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API enables customer to update an existing travel plan This API enables customer to update an existing travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanUpdateRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1CardsCardIdOverseasTravelPlansPutAsync (OverseasTravelPlanUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
             await V1CardsCardIdOverseasTravelPlansPutAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);

        }

        /// <summary>
        /// This API enables customer to update an existing travel plan This API enables customer to update an existing travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">OverseasTravelPlanUpdateRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="cardId">The card id  in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdOverseasTravelPlansPutAsyncWithHttpInfo (OverseasTravelPlanUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V1CardsCardIdOverseasTravelPlansPut");

            var localVarPath = "/v1/cards/{cardId}/overseasTravelPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdOverseasTravelPlansPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Verify CVV for Debit or Credit Card This API is used to verify the CVV of a debit or a credit card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CvvVerificationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void V1CardsCvvVerificationPost (CvvVerificationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             V1CardsCvvVerificationPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
        }

        /// <summary>
        /// Verify CVV for Debit or Credit Card This API is used to verify the CVV of a debit or a credit card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CvvVerificationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1CardsCvvVerificationPostWithHttpInfo (CvvVerificationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCvvVerificationPost");

            var localVarPath = "/v1/cards/cvv/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCvvVerificationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Verify CVV for Debit or Credit Card This API is used to verify the CVV of a debit or a credit card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CvvVerificationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1CardsCvvVerificationPostAsync (CvvVerificationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             await V1CardsCvvVerificationPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        }

        /// <summary>
        /// Verify CVV for Debit or Credit Card This API is used to verify the CVV of a debit or a credit card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CvvVerificationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCvvVerificationPostAsyncWithHttpInfo (CvvVerificationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsCvvVerificationPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CardsApi->V1CardsCvvVerificationPost");

            var localVarPath = "/v1/cards/cvv/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCvvVerificationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account To get the needed account and currency details for Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEligibilityResponse</returns>
        public MultiCurrencyAccountEligibilityResponse V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet (string authorization, string uuid, string accept, string clientId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEligibilityResponse> localVarResponse = V1CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo(authorization, uuid, accept, clientId, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account To get the needed account and currency details for Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEligibilityResponse</returns>
        public ApiResponse< MultiCurrencyAccountEligibilityResponse > V1CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet");

            var localVarPath = "/v1/cards/multiCurrencyAccounts/enrollment/eligibility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEligibilityResponse)));
        }

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account To get the needed account and currency details for Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<MultiCurrencyAccountEligibilityResponse> V1CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsync (string authorization, string uuid, string accept, string clientId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEligibilityResponse> localVarResponse = await V1CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account To get the needed account and currency details for Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEligibilityResponse>> V1CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet");

            var localVarPath = "/v1/cards/multiCurrencyAccounts/enrollment/eligibility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEligibilityResponse)));
        }

        /// <summary>
        /// This API enables customer to inquire current travel plan This API enables customer to inquire current travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="cardId">The card id  in encrypted format (optional)</param>
        /// <returns>OverseasTravelPlanInquiryResponse</returns>
        public OverseasTravelPlanInquiryResponse V1CardsOverseasTravelPlansGet (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string cardId = null)
        {
             ApiResponse<OverseasTravelPlanInquiryResponse> localVarResponse = V1CardsOverseasTravelPlansGetWithHttpInfo(authorization, uuid, accept, clientId, clientDetails, cardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API enables customer to inquire current travel plan This API enables customer to inquire current travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="cardId">The card id  in encrypted format (optional)</param>
        /// <returns>ApiResponse of OverseasTravelPlanInquiryResponse</returns>
        public ApiResponse< OverseasTravelPlanInquiryResponse > V1CardsOverseasTravelPlansGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string cardId = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsOverseasTravelPlansGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsOverseasTravelPlansGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsOverseasTravelPlansGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsOverseasTravelPlansGet");

            var localVarPath = "/v1/cards/overseasTravelPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cardId", cardId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsOverseasTravelPlansGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OverseasTravelPlanInquiryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OverseasTravelPlanInquiryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OverseasTravelPlanInquiryResponse)));
        }

        /// <summary>
        /// This API enables customer to inquire current travel plan This API enables customer to inquire current travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="cardId">The card id  in encrypted format (optional)</param>
        /// <returns>Task of OverseasTravelPlanInquiryResponse</returns>
        public async System.Threading.Tasks.Task<OverseasTravelPlanInquiryResponse> V1CardsOverseasTravelPlansGetAsync (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string cardId = null)
        {
             ApiResponse<OverseasTravelPlanInquiryResponse> localVarResponse = await V1CardsOverseasTravelPlansGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, clientDetails, cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API enables customer to inquire current travel plan This API enables customer to inquire current travel plan
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="cardId">The card id  in encrypted format (optional)</param>
        /// <returns>Task of ApiResponse (OverseasTravelPlanInquiryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OverseasTravelPlanInquiryResponse>> V1CardsOverseasTravelPlansGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string cardId = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V1CardsOverseasTravelPlansGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V1CardsOverseasTravelPlansGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V1CardsOverseasTravelPlansGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V1CardsOverseasTravelPlansGet");

            var localVarPath = "/v1/cards/overseasTravelPlans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cardId", cardId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsOverseasTravelPlansGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OverseasTravelPlanInquiryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OverseasTravelPlanInquiryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OverseasTravelPlanInquiryResponse)));
        }

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void V2CardsCardIdMultiCurrencyAccountsDelete (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null)
        {
             V2CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo(authorization, uuid, accept, clientId, cardId, clientDetails);
        }

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V2CardsCardIdMultiCurrencyAccountsDeleteWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");

            var localVarPath = "/v2/cards/{cardId}/multiCurrencyAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2CardsCardIdMultiCurrencyAccountsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2CardsCardIdMultiCurrencyAccountsDeleteAsync (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null)
        {
             await V2CardsCardIdMultiCurrencyAccountsDeleteAsyncWithHttpInfo(authorization, uuid, accept, clientId, cardId, clientDetails);

        }

        /// <summary>
        /// This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account This API is to disenroll the Debit Card and FCY Accounts from Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">The customer card identifier in encrypted format</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V2CardsCardIdMultiCurrencyAccountsDeleteAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string cardId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardsApi->V2CardsCardIdMultiCurrencyAccountsDelete");

            var localVarPath = "/v2/cards/{cardId}/multiCurrencyAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2CardsCardIdMultiCurrencyAccountsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account To get the needed account and currency details for Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>MultiCurrencyAccountEligibilityResponse</returns>
        public MultiCurrencyAccountEligibilityResponse V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet (string authorization, string uuid, string accept, string clientId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEligibilityResponse> localVarResponse = V2CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo(authorization, uuid, accept, clientId, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account To get the needed account and currency details for Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of MultiCurrencyAccountEligibilityResponse</returns>
        public ApiResponse< MultiCurrencyAccountEligibilityResponse > V2CardsMultiCurrencyAccountsEnrollmentEligibilityGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet");

            var localVarPath = "/v2/cards/multiCurrencyAccounts/enrollment/eligibility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEligibilityResponse)));
        }

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account To get the needed account and currency details for Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of MultiCurrencyAccountEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<MultiCurrencyAccountEligibilityResponse> V2CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsync (string authorization, string uuid, string accept, string clientId, string clientDetails = null)
        {
             ApiResponse<MultiCurrencyAccountEligibilityResponse> localVarResponse = await V2CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API request is to get the Debit Card, account details and list of foreign currencies that can be enrolled to Multi Currency Account To get the needed account and currency details for Multi Currency Account
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (MultiCurrencyAccountEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiCurrencyAccountEligibilityResponse>> V2CardsMultiCurrencyAccountsEnrollmentEligibilityGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling CardsApi->V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling CardsApi->V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling CardsApi->V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet");

            var localVarPath = "/v2/cards/multiCurrencyAccounts/enrollment/eligibility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiCurrencyAccountEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiCurrencyAccountEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiCurrencyAccountEligibilityResponse)));
        }

    }
}
