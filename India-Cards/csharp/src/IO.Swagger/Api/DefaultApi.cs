/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Update local usage activation
        /// </summary>
        /// <remarks>
        /// This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="cardActivationCode">Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void V1CardsCardIdActivationsCardActivationCodePut (string uuid, string clientId, string authorization, string cardId, string cardActivationCode, CardUsageRequest body = null);

        /// <summary>
        /// Update local usage activation
        /// </summary>
        /// <remarks>
        /// This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="cardActivationCode">Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1CardsCardIdActivationsCardActivationCodePutWithHttpInfo (string uuid, string clientId, string authorization, string cardId, string cardActivationCode, CardUsageRequest body = null);
        /// <summary>
        /// Report card as lost or stolen
        /// </summary>
        /// <remarks>
        /// This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card in encrypted format</param>
        /// <returns>ReportLostStolenCardResponse</returns>
        ReportLostStolenCardResponse V1CardsCardIdLostStolenPut (ReportLostStolenCardRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId);

        /// <summary>
        /// Report card as lost or stolen
        /// </summary>
        /// <remarks>
        /// This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card in encrypted format</param>
        /// <returns>ApiResponse of ReportLostStolenCardResponse</returns>
        ApiResponse<ReportLostStolenCardResponse> V1CardsCardIdLostStolenPutWithHttpInfo (ReportLostStolenCardRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId);
        /// <summary>
        /// Update overseas usage activation
        /// </summary>
        /// <remarks>
        /// This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card for activation or de-activation.</param>
        /// <returns></returns>
        void V1CardsCardIdOverseasUsagePut (OverseasCardUsageRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId);

        /// <summary>
        /// Update overseas usage activation
        /// </summary>
        /// <remarks>
        /// This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card for activation or de-activation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1CardsCardIdOverseasUsagePutWithHttpInfo (OverseasCardUsageRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId);
        /// <summary>
        /// Retrieve all cards
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</param>
        /// <returns>CardListingResponse</returns>
        CardListingResponse V1CardsGet (string authorization, string clientId, string uuid, string accept, string cardFunction);

        /// <summary>
        /// Retrieve all cards
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</param>
        /// <returns>ApiResponse of CardListingResponse</returns>
        ApiResponse<CardListingResponse> V1CardsGetWithHttpInfo (string authorization, string clientId, string uuid, string accept, string cardFunction);
        /// <summary>
        /// Supplementary Card Application
        /// </summary>
        /// <remarks>
        /// This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">Primary card id in encrypted format.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SupplementaryCardResponse</returns>
        SupplementaryCardResponse V1CreditCardsCardIdSupplementaryApplicationsPost (string authorization, string uuid, string clientId, string cardId, SupplementaryCardRequest body = null);

        /// <summary>
        /// Supplementary Card Application
        /// </summary>
        /// <remarks>
        /// This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">Primary card id in encrypted format.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SupplementaryCardResponse</returns>
        ApiResponse<SupplementaryCardResponse> V1CreditCardsCardIdSupplementaryApplicationsPostWithHttpInfo (string authorization, string uuid, string clientId, string cardId, SupplementaryCardRequest body = null);
        /// <summary>
        /// Request credit limit increase
        /// </summary>
        /// <remarks>
        /// This API is used to request for a permanent or temporary credit limit increase on credit card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <returns>CreditLimitIncreaseResponse</returns>
        CreditLimitIncreaseResponse V1CreditCardsCreditLimitsPost (CreditLimitIncreaseRequest body, string uuid, string accept, string clientId, string contentType, string authorization);

        /// <summary>
        /// Request credit limit increase
        /// </summary>
        /// <remarks>
        /// This API is used to request for a permanent or temporary credit limit increase on credit card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <returns>ApiResponse of CreditLimitIncreaseResponse</returns>
        ApiResponse<CreditLimitIncreaseResponse> V1CreditCardsCreditLimitsPostWithHttpInfo (CreditLimitIncreaseRequest body, string uuid, string accept, string clientId, string contentType, string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Update local usage activation
        /// </summary>
        /// <remarks>
        /// This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="cardActivationCode">Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1CardsCardIdActivationsCardActivationCodePutAsync (string uuid, string clientId, string authorization, string cardId, string cardActivationCode, CardUsageRequest body = null);

        /// <summary>
        /// Update local usage activation
        /// </summary>
        /// <remarks>
        /// This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="cardActivationCode">Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdActivationsCardActivationCodePutAsyncWithHttpInfo (string uuid, string clientId, string authorization, string cardId, string cardActivationCode, CardUsageRequest body = null);
        /// <summary>
        /// Report card as lost or stolen
        /// </summary>
        /// <remarks>
        /// This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card in encrypted format</param>
        /// <returns>Task of ReportLostStolenCardResponse</returns>
        System.Threading.Tasks.Task<ReportLostStolenCardResponse> V1CardsCardIdLostStolenPutAsync (ReportLostStolenCardRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId);

        /// <summary>
        /// Report card as lost or stolen
        /// </summary>
        /// <remarks>
        /// This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card in encrypted format</param>
        /// <returns>Task of ApiResponse (ReportLostStolenCardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportLostStolenCardResponse>> V1CardsCardIdLostStolenPutAsyncWithHttpInfo (ReportLostStolenCardRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId);
        /// <summary>
        /// Update overseas usage activation
        /// </summary>
        /// <remarks>
        /// This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card for activation or de-activation.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1CardsCardIdOverseasUsagePutAsync (OverseasCardUsageRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId);

        /// <summary>
        /// Update overseas usage activation
        /// </summary>
        /// <remarks>
        /// This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card for activation or de-activation.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdOverseasUsagePutAsyncWithHttpInfo (OverseasCardUsageRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId);
        /// <summary>
        /// Retrieve all cards
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</param>
        /// <returns>Task of CardListingResponse</returns>
        System.Threading.Tasks.Task<CardListingResponse> V1CardsGetAsync (string authorization, string clientId, string uuid, string accept, string cardFunction);

        /// <summary>
        /// Retrieve all cards
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</param>
        /// <returns>Task of ApiResponse (CardListingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardListingResponse>> V1CardsGetAsyncWithHttpInfo (string authorization, string clientId, string uuid, string accept, string cardFunction);
        /// <summary>
        /// Supplementary Card Application
        /// </summary>
        /// <remarks>
        /// This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">Primary card id in encrypted format.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SupplementaryCardResponse</returns>
        System.Threading.Tasks.Task<SupplementaryCardResponse> V1CreditCardsCardIdSupplementaryApplicationsPostAsync (string authorization, string uuid, string clientId, string cardId, SupplementaryCardRequest body = null);

        /// <summary>
        /// Supplementary Card Application
        /// </summary>
        /// <remarks>
        /// This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">Primary card id in encrypted format.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SupplementaryCardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SupplementaryCardResponse>> V1CreditCardsCardIdSupplementaryApplicationsPostAsyncWithHttpInfo (string authorization, string uuid, string clientId, string cardId, SupplementaryCardRequest body = null);
        /// <summary>
        /// Request credit limit increase
        /// </summary>
        /// <remarks>
        /// This API is used to request for a permanent or temporary credit limit increase on credit card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <returns>Task of CreditLimitIncreaseResponse</returns>
        System.Threading.Tasks.Task<CreditLimitIncreaseResponse> V1CreditCardsCreditLimitsPostAsync (CreditLimitIncreaseRequest body, string uuid, string accept, string clientId, string contentType, string authorization);

        /// <summary>
        /// Request credit limit increase
        /// </summary>
        /// <remarks>
        /// This API is used to request for a permanent or temporary credit limit increase on credit card.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <returns>Task of ApiResponse (CreditLimitIncreaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditLimitIncreaseResponse>> V1CreditCardsCreditLimitsPostAsyncWithHttpInfo (CreditLimitIncreaseRequest body, string uuid, string accept, string clientId, string contentType, string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Update local usage activation This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="cardActivationCode">Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void V1CardsCardIdActivationsCardActivationCodePut (string uuid, string clientId, string authorization, string cardId, string cardActivationCode, CardUsageRequest body = null)
        {
             V1CardsCardIdActivationsCardActivationCodePutWithHttpInfo(uuid, clientId, authorization, cardId, cardActivationCode, body);
        }

        /// <summary>
        /// Update local usage activation This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="cardActivationCode">Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1CardsCardIdActivationsCardActivationCodePutWithHttpInfo (string uuid, string clientId, string authorization, string cardId, string cardActivationCode, CardUsageRequest body = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");
            // verify the required parameter 'cardActivationCode' is set
            if (cardActivationCode == null)
                throw new ApiException(400, "Missing required parameter 'cardActivationCode' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");

            var localVarPath = "/v1/cards/{cardId}/activations/{cardActivationCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (cardActivationCode != null) localVarPathParams.Add("cardActivationCode", this.Configuration.ApiClient.ParameterToString(cardActivationCode)); // path parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdActivationsCardActivationCodePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update local usage activation This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="cardActivationCode">Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1CardsCardIdActivationsCardActivationCodePutAsync (string uuid, string clientId, string authorization, string cardId, string cardActivationCode, CardUsageRequest body = null)
        {
             await V1CardsCardIdActivationsCardActivationCodePutAsyncWithHttpInfo(uuid, clientId, authorization, cardId, cardActivationCode, body);

        }

        /// <summary>
        /// Update local usage activation This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Card Id in encrypted format</param>
        /// <param name="cardActivationCode">Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdActivationsCardActivationCodePutAsyncWithHttpInfo (string uuid, string clientId, string authorization, string cardId, string cardActivationCode, CardUsageRequest body = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");
            // verify the required parameter 'cardActivationCode' is set
            if (cardActivationCode == null)
                throw new ApiException(400, "Missing required parameter 'cardActivationCode' when calling DefaultApi->V1CardsCardIdActivationsCardActivationCodePut");

            var localVarPath = "/v1/cards/{cardId}/activations/{cardActivationCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (cardActivationCode != null) localVarPathParams.Add("cardActivationCode", this.Configuration.ApiClient.ParameterToString(cardActivationCode)); // path parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdActivationsCardActivationCodePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Report card as lost or stolen This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card in encrypted format</param>
        /// <returns>ReportLostStolenCardResponse</returns>
        public ReportLostStolenCardResponse V1CardsCardIdLostStolenPut (ReportLostStolenCardRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId)
        {
             ApiResponse<ReportLostStolenCardResponse> localVarResponse = V1CardsCardIdLostStolenPutWithHttpInfo(body, uuid, accept, clientId, contentType, authorization, cardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Report card as lost or stolen This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card in encrypted format</param>
        /// <returns>ApiResponse of ReportLostStolenCardResponse</returns>
        public ApiResponse< ReportLostStolenCardResponse > V1CardsCardIdLostStolenPutWithHttpInfo (ReportLostStolenCardRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling DefaultApi->V1CardsCardIdLostStolenPut");

            var localVarPath = "/v1/cards/{cardId}/lostStolen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdLostStolenPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportLostStolenCardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReportLostStolenCardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportLostStolenCardResponse)));
        }

        /// <summary>
        /// Report card as lost or stolen This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card in encrypted format</param>
        /// <returns>Task of ReportLostStolenCardResponse</returns>
        public async System.Threading.Tasks.Task<ReportLostStolenCardResponse> V1CardsCardIdLostStolenPutAsync (ReportLostStolenCardRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId)
        {
             ApiResponse<ReportLostStolenCardResponse> localVarResponse = await V1CardsCardIdLostStolenPutAsyncWithHttpInfo(body, uuid, accept, clientId, contentType, authorization, cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Report card as lost or stolen This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card in encrypted format</param>
        /// <returns>Task of ApiResponse (ReportLostStolenCardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportLostStolenCardResponse>> V1CardsCardIdLostStolenPutAsyncWithHttpInfo (ReportLostStolenCardRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CardsCardIdLostStolenPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling DefaultApi->V1CardsCardIdLostStolenPut");

            var localVarPath = "/v1/cards/{cardId}/lostStolen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdLostStolenPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportLostStolenCardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReportLostStolenCardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportLostStolenCardResponse)));
        }

        /// <summary>
        /// Update overseas usage activation This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card for activation or de-activation.</param>
        /// <returns></returns>
        public void V1CardsCardIdOverseasUsagePut (OverseasCardUsageRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId)
        {
             V1CardsCardIdOverseasUsagePutWithHttpInfo(body, uuid, accept, clientId, contentType, authorization, cardId);
        }

        /// <summary>
        /// Update overseas usage activation This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card for activation or de-activation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1CardsCardIdOverseasUsagePutWithHttpInfo (OverseasCardUsageRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");

            var localVarPath = "/v1/cards/{cardId}/overseasUsage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdOverseasUsagePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update overseas usage activation This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card for activation or de-activation.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1CardsCardIdOverseasUsagePutAsync (OverseasCardUsageRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId)
        {
             await V1CardsCardIdOverseasUsagePutAsyncWithHttpInfo(body, uuid, accept, clientId, contentType, authorization, cardId);

        }

        /// <summary>
        /// Update overseas usage activation This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="cardId">Unique Id of the card for activation or de-activation.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1CardsCardIdOverseasUsagePutAsyncWithHttpInfo (OverseasCardUsageRequest body, string uuid, string accept, string clientId, string contentType, string authorization, string cardId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling DefaultApi->V1CardsCardIdOverseasUsagePut");

            var localVarPath = "/v1/cards/{cardId}/overseasUsage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsCardIdOverseasUsagePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve all cards This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</param>
        /// <returns>CardListingResponse</returns>
        public CardListingResponse V1CardsGet (string authorization, string clientId, string uuid, string accept, string cardFunction)
        {
             ApiResponse<CardListingResponse> localVarResponse = V1CardsGetWithHttpInfo(authorization, clientId, uuid, accept, cardFunction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all cards This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</param>
        /// <returns>ApiResponse of CardListingResponse</returns>
        public ApiResponse< CardListingResponse > V1CardsGetWithHttpInfo (string authorization, string clientId, string uuid, string accept, string cardFunction)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CardsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CardsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CardsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1CardsGet");
            // verify the required parameter 'cardFunction' is set
            if (cardFunction == null)
                throw new ApiException(400, "Missing required parameter 'cardFunction' when calling DefaultApi->V1CardsGet");

            var localVarPath = "/v1/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardFunction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cardFunction", cardFunction)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CardListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardListingResponse)));
        }

        /// <summary>
        /// Retrieve all cards This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</param>
        /// <returns>Task of CardListingResponse</returns>
        public async System.Threading.Tasks.Task<CardListingResponse> V1CardsGetAsync (string authorization, string clientId, string uuid, string accept, string cardFunction)
        {
             ApiResponse<CardListingResponse> localVarResponse = await V1CardsGetAsyncWithHttpInfo(authorization, clientId, uuid, accept, cardFunction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all cards This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="clientId">client id generated during consumer onboarding</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="cardFunction">Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</param>
        /// <returns>Task of ApiResponse (CardListingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardListingResponse>> V1CardsGetAsyncWithHttpInfo (string authorization, string clientId, string uuid, string accept, string cardFunction)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CardsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CardsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CardsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1CardsGet");
            // verify the required parameter 'cardFunction' is set
            if (cardFunction == null)
                throw new ApiException(400, "Missing required parameter 'cardFunction' when calling DefaultApi->V1CardsGet");

            var localVarPath = "/v1/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardFunction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cardFunction", cardFunction)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CardsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardListingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CardListingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardListingResponse)));
        }

        /// <summary>
        /// Supplementary Card Application This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">Primary card id in encrypted format.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SupplementaryCardResponse</returns>
        public SupplementaryCardResponse V1CreditCardsCardIdSupplementaryApplicationsPost (string authorization, string uuid, string clientId, string cardId, SupplementaryCardRequest body = null)
        {
             ApiResponse<SupplementaryCardResponse> localVarResponse = V1CreditCardsCardIdSupplementaryApplicationsPostWithHttpInfo(authorization, uuid, clientId, cardId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Supplementary Card Application This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">Primary card id in encrypted format.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SupplementaryCardResponse</returns>
        public ApiResponse< SupplementaryCardResponse > V1CreditCardsCardIdSupplementaryApplicationsPostWithHttpInfo (string authorization, string uuid, string clientId, string cardId, SupplementaryCardRequest body = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CreditCardsCardIdSupplementaryApplicationsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CreditCardsCardIdSupplementaryApplicationsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CreditCardsCardIdSupplementaryApplicationsPost");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling DefaultApi->V1CreditCardsCardIdSupplementaryApplicationsPost");

            var localVarPath = "/v1/creditCards/{cardId}/supplementary/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreditCardsCardIdSupplementaryApplicationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SupplementaryCardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SupplementaryCardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SupplementaryCardResponse)));
        }

        /// <summary>
        /// Supplementary Card Application This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">Primary card id in encrypted format.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SupplementaryCardResponse</returns>
        public async System.Threading.Tasks.Task<SupplementaryCardResponse> V1CreditCardsCardIdSupplementaryApplicationsPostAsync (string authorization, string uuid, string clientId, string cardId, SupplementaryCardRequest body = null)
        {
             ApiResponse<SupplementaryCardResponse> localVarResponse = await V1CreditCardsCardIdSupplementaryApplicationsPostAsyncWithHttpInfo(authorization, uuid, clientId, cardId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Supplementary Card Application This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="cardId">Primary card id in encrypted format.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SupplementaryCardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SupplementaryCardResponse>> V1CreditCardsCardIdSupplementaryApplicationsPostAsyncWithHttpInfo (string authorization, string uuid, string clientId, string cardId, SupplementaryCardRequest body = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CreditCardsCardIdSupplementaryApplicationsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CreditCardsCardIdSupplementaryApplicationsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CreditCardsCardIdSupplementaryApplicationsPost");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling DefaultApi->V1CreditCardsCardIdSupplementaryApplicationsPost");

            var localVarPath = "/v1/creditCards/{cardId}/supplementary/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("cardId", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreditCardsCardIdSupplementaryApplicationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SupplementaryCardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SupplementaryCardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SupplementaryCardResponse)));
        }

        /// <summary>
        /// Request credit limit increase This API is used to request for a permanent or temporary credit limit increase on credit card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <returns>CreditLimitIncreaseResponse</returns>
        public CreditLimitIncreaseResponse V1CreditCardsCreditLimitsPost (CreditLimitIncreaseRequest body, string uuid, string accept, string clientId, string contentType, string authorization)
        {
             ApiResponse<CreditLimitIncreaseResponse> localVarResponse = V1CreditCardsCreditLimitsPostWithHttpInfo(body, uuid, accept, clientId, contentType, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request credit limit increase This API is used to request for a permanent or temporary credit limit increase on credit card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <returns>ApiResponse of CreditLimitIncreaseResponse</returns>
        public ApiResponse< CreditLimitIncreaseResponse > V1CreditCardsCreditLimitsPostWithHttpInfo (CreditLimitIncreaseRequest body, string uuid, string accept, string clientId, string contentType, string authorization)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CreditCardsCreditLimitsPost");

            var localVarPath = "/v1/creditCards/creditLimits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreditCardsCreditLimitsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditLimitIncreaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditLimitIncreaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditLimitIncreaseResponse)));
        }

        /// <summary>
        /// Request credit limit increase This API is used to request for a permanent or temporary credit limit increase on credit card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <returns>Task of CreditLimitIncreaseResponse</returns>
        public async System.Threading.Tasks.Task<CreditLimitIncreaseResponse> V1CreditCardsCreditLimitsPostAsync (CreditLimitIncreaseRequest body, string uuid, string accept, string clientId, string contentType, string authorization)
        {
             ApiResponse<CreditLimitIncreaseResponse> localVarResponse = await V1CreditCardsCreditLimitsPostAsyncWithHttpInfo(body, uuid, accept, clientId, contentType, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request credit limit increase This API is used to request for a permanent or temporary credit limit increase on credit card.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <returns>Task of ApiResponse (CreditLimitIncreaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditLimitIncreaseResponse>> V1CreditCardsCreditLimitsPostAsyncWithHttpInfo (CreditLimitIncreaseRequest body, string uuid, string accept, string clientId, string contentType, string authorization)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1CreditCardsCreditLimitsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1CreditCardsCreditLimitsPost");

            var localVarPath = "/v1/creditCards/creditLimits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1CreditCardsCreditLimitsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditLimitIncreaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditLimitIncreaseResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditLimitIncreaseResponse)));
        }

    }
}
