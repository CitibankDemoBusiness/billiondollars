/* 
 * Cards
 *
 * The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CardsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CardsApiTests
    {
        private CardsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CardsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CardsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CardsApi
            //Assert.IsInstanceOfType(typeof(CardsApi), instance, "instance is a CardsApi");
        }

        /// <summary>
        /// Test BNMOAPIBankingDigitalRegulatory
        /// </summary>
        [Test]
        public void BNMOAPIBankingDigitalRegulatoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string cardType = null;
            //string clientDetails = null;
            //var response = instance.BNMOAPIBankingDigitalRegulatory(authorization, uuid, accept, clientId, contentType, cardType, clientDetails);
            //Assert.IsInstanceOf<ProductResponse> (response, "response is ProductResponse");
        }
        /// <summary>
        /// Test EppLoanBookingConfirmation
        /// </summary>
        [Test]
        public void EppLoanBookingConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EppLoanBookingConfirmationRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string cardId = null;
            //string clientDetails = null;
            //var response = instance.EppLoanBookingConfirmation(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
            //Assert.IsInstanceOf<EppLoanBookingConfirmationResponse> (response, "response is EppLoanBookingConfirmationResponse");
        }
        /// <summary>
        /// Test InitiateCreditChargeCardCorporateCardsClosure
        /// </summary>
        [Test]
        public void InitiateCreditChargeCardCorporateCardsClosureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InitiateCreditChargeCardCorporateCardsClosureRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string acceptLanguage = null;
            //string clientDetails = null;
            //var response = instance.InitiateCreditChargeCardCorporateCardsClosure(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
            //Assert.IsInstanceOf<InitiateCreditChargeCardCorporateCardsClosureResponse> (response, "response is InitiateCreditChargeCardCorporateCardsClosureResponse");
        }
        /// <summary>
        /// Test MultiCurrencyAccountEnrollment
        /// </summary>
        [Test]
        public void MultiCurrencyAccountEnrollmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultiCurrencyAccountEnrollmentRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string cardId = null;
            //string clientDetails = null;
            //var response = instance.MultiCurrencyAccountEnrollment(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
            //Assert.IsInstanceOf<MultiCurrencyAccountEnrollmentResponse> (response, "response is MultiCurrencyAccountEnrollmentResponse");
        }
        /// <summary>
        /// Test MultiCurrencyAccountEnrollmentWithCurrency
        /// </summary>
        [Test]
        public void MultiCurrencyAccountEnrollmentWithCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultiCurrencyAccountEnrollmentWithCurrencyRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string cardId = null;
            //string clientDetails = null;
            //var response = instance.MultiCurrencyAccountEnrollmentWithCurrency(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
            //Assert.IsInstanceOf<MultiCurrencyAccountEnrollmentWithCurrencyResponse> (response, "response is MultiCurrencyAccountEnrollmentWithCurrencyResponse");
        }
        /// <summary>
        /// Test PartnerCardListing
        /// </summary>
        [Test]
        public void PartnerCardListingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string cardFunction = null;
            //bool? linkedSupplementaryCardFlag = null;
            //string clientDetails = null;
            //var response = instance.PartnerCardListing(authorization, uuid, accept, clientId, cardFunction, linkedSupplementaryCardFlag, clientDetails);
            //Assert.IsInstanceOf<PartnerCardListingResponse> (response, "response is PartnerCardListingResponse");
        }
        /// <summary>
        /// Test RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed
        /// </summary>
        [Test]
        public void RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowedRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string acceptLanguage = null;
            //string clientDetails = null;
            //instance.RequestCreditChargeCardCorporateCardsSuspensionAndCashLimitAllowed(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
            
        }
        /// <summary>
        /// Test RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement
        /// </summary>
        [Test]
        public void RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //var response = instance.RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacement(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            //Assert.IsInstanceOf<RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse> (response, "response is RequestCreditChargeCardFulfillmentArrangementCorporateCardsDamageReplacementResponse");
        }
        /// <summary>
        /// Test RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund
        /// </summary>
        [Test]
        public void RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefundRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //instance.RequestCreditChargeCardFulfillmentArrangementCreditPlanEppRefund(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            
        }
        /// <summary>
        /// Test RetrieveCreditChargeCardCorporateCardsCashLimit
        /// </summary>
        [Test]
        public void RetrieveCreditChargeCardCorporateCardsCashLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RetrieveCreditChargeCardCorporateCardsCashLimitRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string acceptLanguage = null;
            //string clientDetails = null;
            //var response = instance.RetrieveCreditChargeCardCorporateCardsCashLimit(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
            //Assert.IsInstanceOf<RetrieveCreditChargeCardCorporateCardsCashLimitResponse> (response, "response is RetrieveCreditChargeCardCorporateCardsCashLimitResponse");
        }
        /// <summary>
        /// Test RetrieveCreditChargeCardCorporateCardsDetail
        /// </summary>
        [Test]
        public void RetrieveCreditChargeCardCorporateCardsDetailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RetrieveCreditChargeCardCorporateCardsDetailRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string acceptLanguage = null;
            //string clientDetails = null;
            //var response = instance.RetrieveCreditChargeCardCorporateCardsDetail(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
            //Assert.IsInstanceOf<RetrieveCreditChargeCardCorporateCardsDetailResponse> (response, "response is RetrieveCreditChargeCardCorporateCardsDetailResponse");
        }
        /// <summary>
        /// Test RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions
        /// </summary>
        [Test]
        public void RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string acceptLanguage = null;
            //string clientDetails = null;
            //var response = instance.RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactions(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
            //Assert.IsInstanceOf<RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse> (response, "response is RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsResponse");
        }
        /// <summary>
        /// Test RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus
        /// </summary>
        [Test]
        public void RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string cardId = null;
            //string transactionReferenceId = null;
            //string clientDetails = null;
            //var response = instance.RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatus(authorization, uuid, accept, clientId, cardId, transactionReferenceId, clientDetails);
            //Assert.IsInstanceOf<RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse> (response, "response is RetrieveCreditChargeCardFulfillmentArrangementCreditCardStatusResponse");
        }
        /// <summary>
        /// Test RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp
        /// </summary>
        [Test]
        public void RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string offerId = null;
            //string clientDetails = null;
            //string productId = null;
            //decimal? loanAmount = null;
            //var response = instance.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp(authorization, uuid, accept, clientId, offerId, clientDetails, productId, loanAmount);
            //Assert.IsInstanceOf<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse> (response, "response is RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse");
        }
        /// <summary>
        /// Test RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings
        /// </summary>
        [Test]
        public void RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string offerId = null;
            //string clientDetails = null;
            //var response = instance.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings(body, authorization, uuid, accept, clientId, contentType, offerId, clientDetails);
            //Assert.IsInstanceOf<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse> (response, "response is RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse");
        }
        /// <summary>
        /// Test RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules
        /// </summary>
        [Test]
        public void RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string offerId = null;
            //decimal? loanAmount = null;
            //decimal? tenor = null;
            //string clientDetails = null;
            //string nextStartIndex = null;
            //bool? binaryDataFlag = null;
            //var response = instance.RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules(authorization, uuid, accept, clientId, offerId, loanAmount, tenor, clientDetails, nextStartIndex, binaryDataFlag);
            //Assert.IsInstanceOf<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse> (response, "response is RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse");
        }
        /// <summary>
        /// Test UpdateCreditChargeCardCorporateCardsCashLimit
        /// </summary>
        [Test]
        public void UpdateCreditChargeCardCorporateCardsCashLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCreditChargeCardCorporateCardsCashLimitRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string acceptLanguage = null;
            //string clientDetails = null;
            //instance.UpdateCreditChargeCardCorporateCardsCashLimit(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
            
        }
        /// <summary>
        /// Test UpdateCreditChargeCardCorporateCardsCreditLimit
        /// </summary>
        [Test]
        public void UpdateCreditChargeCardCorporateCardsCreditLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCreditChargeCardCorporateCardsCreditLimitRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string acceptLanguage = null;
            //string clientDetails = null;
            //var response = instance.UpdateCreditChargeCardCorporateCardsCreditLimit(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, clientDetails);
            //Assert.IsInstanceOf<UpdateCreditChargeCardCorporateCardsCreditLimitResponse> (response, "response is UpdateCreditChargeCardCorporateCardsCreditLimitResponse");
        }
        /// <summary>
        /// Test UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen
        /// </summary>
        [Test]
        public void UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //var response = instance.UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolen(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            //Assert.IsInstanceOf<UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse> (response, "response is UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenResponse");
        }
        /// <summary>
        /// Test UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl
        /// </summary>
        [Test]
        public void UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControlRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //instance.UpdateCreditChargeCardFulfillmentArrangementCorporateCardsSpendControl(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            
        }
        /// <summary>
        /// Test V1CardsCardIdLimitsAndEnrollmentsPut
        /// </summary>
        [Test]
        public void V1CardsCardIdLimitsAndEnrollmentsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CardsLimitsAndEnrollmentsUpdateRequest body = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string authorization = null;
            //string cardId = null;
            //string clientDetails = null;
            //instance.V1CardsCardIdLimitsAndEnrollmentsPut(body, uuid, accept, clientId, contentType, authorization, cardId, clientDetails);
            
        }
        /// <summary>
        /// Test V1CardsCardIdMultiCurrencyAccountsDelete
        /// </summary>
        [Test]
        public void V1CardsCardIdMultiCurrencyAccountsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string cardId = null;
            //string clientDetails = null;
            //instance.V1CardsCardIdMultiCurrencyAccountsDelete(authorization, uuid, accept, clientId, cardId, clientDetails);
            
        }
        /// <summary>
        /// Test V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost
        /// </summary>
        [Test]
        public void V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultiCurrencyAccountEnrollmentWithCurrencyRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string cardId = null;
            //string clientDetails = null;
            //var response = instance.V1CardsCardIdMultiCurrencyAccountsEnrollmentsCurrencyPost(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
            //Assert.IsInstanceOf<MultiCurrencyAccountEnrollmentWithCurrencyResponse> (response, "response is MultiCurrencyAccountEnrollmentWithCurrencyResponse");
        }
        /// <summary>
        /// Test V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost
        /// </summary>
        [Test]
        public void V1CardsCardIdMultiCurrencyAccountsEnrollmentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultiCurrencyAccountEnrollmentRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string cardId = null;
            //string clientDetails = null;
            //var response = instance.V1CardsCardIdMultiCurrencyAccountsEnrollmentsPost(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
            //Assert.IsInstanceOf<MultiCurrencyAccountEnrollmentResponse> (response, "response is MultiCurrencyAccountEnrollmentResponse");
        }
        /// <summary>
        /// Test V1CardsCardIdOverseasTravelPlansDelete
        /// </summary>
        [Test]
        public void V1CardsCardIdOverseasTravelPlansDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string cardId = null;
            //string clientDetails = null;
            //instance.V1CardsCardIdOverseasTravelPlansDelete(authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
            
        }
        /// <summary>
        /// Test V1CardsCardIdOverseasTravelPlansPost
        /// </summary>
        [Test]
        public void V1CardsCardIdOverseasTravelPlansPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OverseasTravelPlanAddRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string cardId = null;
            //string clientDetails = null;
            //instance.V1CardsCardIdOverseasTravelPlansPost(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
            
        }
        /// <summary>
        /// Test V1CardsCardIdOverseasTravelPlansPut
        /// </summary>
        [Test]
        public void V1CardsCardIdOverseasTravelPlansPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OverseasTravelPlanUpdateRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string cardId = null;
            //string clientDetails = null;
            //instance.V1CardsCardIdOverseasTravelPlansPut(body, authorization, uuid, accept, clientId, contentType, cardId, clientDetails);
            
        }
        /// <summary>
        /// Test V1CardsCvvVerificationPost
        /// </summary>
        [Test]
        public void V1CardsCvvVerificationPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CvvVerificationRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //instance.V1CardsCvvVerificationPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            
        }
        /// <summary>
        /// Test V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet
        /// </summary>
        [Test]
        public void V1CardsMultiCurrencyAccountsEnrollmentEligibilityGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string clientDetails = null;
            //var response = instance.V1CardsMultiCurrencyAccountsEnrollmentEligibilityGet(authorization, uuid, accept, clientId, clientDetails);
            //Assert.IsInstanceOf<MultiCurrencyAccountEligibilityResponse> (response, "response is MultiCurrencyAccountEligibilityResponse");
        }
        /// <summary>
        /// Test V1CardsOverseasTravelPlansGet
        /// </summary>
        [Test]
        public void V1CardsOverseasTravelPlansGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string clientDetails = null;
            //string cardId = null;
            //var response = instance.V1CardsOverseasTravelPlansGet(authorization, uuid, accept, clientId, clientDetails, cardId);
            //Assert.IsInstanceOf<OverseasTravelPlanInquiryResponse> (response, "response is OverseasTravelPlanInquiryResponse");
        }
        /// <summary>
        /// Test V2CardsCardIdMultiCurrencyAccountsDelete
        /// </summary>
        [Test]
        public void V2CardsCardIdMultiCurrencyAccountsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string cardId = null;
            //string clientDetails = null;
            //instance.V2CardsCardIdMultiCurrencyAccountsDelete(authorization, uuid, accept, clientId, cardId, clientDetails);
            
        }
        /// <summary>
        /// Test V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet
        /// </summary>
        [Test]
        public void V2CardsMultiCurrencyAccountsEnrollmentEligibilityGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string clientDetails = null;
            //var response = instance.V2CardsMultiCurrencyAccountsEnrollmentEligibilityGet(authorization, uuid, accept, clientId, clientDetails);
            //Assert.IsInstanceOf<MultiCurrencyAccountEligibilityResponse> (response, "response is MultiCurrencyAccountEligibilityResponse");
        }
    }

}
