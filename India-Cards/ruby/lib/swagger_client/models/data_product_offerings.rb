=begin
#Cards

#The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class DataProductOfferings
    # Type of offering
    attr_accessor :category

    attr_accessor :item

    # Additional notes for the reward, air miles and feature
    attr_accessor :remark

    # Branding for specific offering
    attr_accessor :branding

    # Absolute URL to term and conditions for specific offering
    attr_accessor :tnc_url

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'category' => :'category',
        :'item' => :'item',
        :'remark' => :'remark',
        :'branding' => :'branding',
        :'tnc_url' => :'tnc_url'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'category' => :'Object',
        :'item' => :'Object',
        :'remark' => :'Object',
        :'branding' => :'Object',
        :'tnc_url' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::DataProductOfferings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::DataProductOfferings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'item')
        self.item = attributes[:'item']
      end

      if attributes.key?(:'remark')
        self.remark = attributes[:'remark']
      end

      if attributes.key?(:'branding')
        self.branding = attributes[:'branding']
      end

      if attributes.key?(:'tnc_url')
        self.tnc_url = attributes[:'tnc_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @category.nil?
        invalid_properties.push('invalid value for "category", category cannot be nil.')
      end

      if @item.nil?
        invalid_properties.push('invalid value for "item", item cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @category.nil?
      category_validator = EnumAttributeValidator.new('Object', ['reward_cashback', 'air_miles', 'feature_benefit'])
      return false unless category_validator.valid?(@category)
      return false if @item.nil?
      item_validator = EnumAttributeValidator.new('Object', ['bookstore', 'cashless_transaction', 'cinema', 'department_store', 'dining', 'education', 'entertainment', 'express_autopay', 'gold', 'groceries', 'highway', 'hotel', 'installment_plan', 'insurance_premium', 'local_retail', 'membership_day', 'mobile_telco', 'myeg_services', 'online_air_ticket', 'online_bill_payment', 'online_shopping', 'others', 'oversea_retail', 'petrol', 'pharmacy', 'retail', 'shopping', 'touch_n_go', 'transport', 'travel', 'utility_bill', 'weekend', 'asia_miles', 'big_point_aasia', 'enrich_mas', 'garuda_miles_id', 'krisfyler_sg', 'malindo_miles_malindoair', 'star_alliance', 'airport_speed_pass', 'annual_fee_waiver', 'auto_bill_payment', 'balance_transfer_plan', 'cash_advance', 'cash_installment_plan', 'cash_withdrawal', 'charity_fund', 'concierge_services', 'contactless', 'dining_privileges', 'discount', 'easy_payment_plan', 'ecommerce_insurance', 'emergency_cheque_cashing', 'global_assistance', 'golf', 'partnership_discount', 'plaza_premium_lounge', 'retail_insurance', 'travel_insurance', 'wallet_guard'])
      return false unless item_validator.valid?(@item)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      validator = EnumAttributeValidator.new('Object', ['reward_cashback', 'air_miles', 'feature_benefit'])
      unless validator.valid?(category)
        fail ArgumentError, "invalid value for \"category\", must be one of #{validator.allowable_values}."
      end
      @category = category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] item Object to be assigned
    def item=(item)
      validator = EnumAttributeValidator.new('Object', ['bookstore', 'cashless_transaction', 'cinema', 'department_store', 'dining', 'education', 'entertainment', 'express_autopay', 'gold', 'groceries', 'highway', 'hotel', 'installment_plan', 'insurance_premium', 'local_retail', 'membership_day', 'mobile_telco', 'myeg_services', 'online_air_ticket', 'online_bill_payment', 'online_shopping', 'others', 'oversea_retail', 'petrol', 'pharmacy', 'retail', 'shopping', 'touch_n_go', 'transport', 'travel', 'utility_bill', 'weekend', 'asia_miles', 'big_point_aasia', 'enrich_mas', 'garuda_miles_id', 'krisfyler_sg', 'malindo_miles_malindoair', 'star_alliance', 'airport_speed_pass', 'annual_fee_waiver', 'auto_bill_payment', 'balance_transfer_plan', 'cash_advance', 'cash_installment_plan', 'cash_withdrawal', 'charity_fund', 'concierge_services', 'contactless', 'dining_privileges', 'discount', 'easy_payment_plan', 'ecommerce_insurance', 'emergency_cheque_cashing', 'global_assistance', 'golf', 'partnership_discount', 'plaza_premium_lounge', 'retail_insurance', 'travel_insurance', 'wallet_guard'])
      unless validator.valid?(item)
        fail ArgumentError, "invalid value for \"item\", must be one of #{validator.allowable_values}."
      end
      @item = item
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          category == o.category &&
          item == o.item &&
          remark == o.remark &&
          branding == o.branding &&
          tnc_url == o.tnc_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [category, item, remark, branding, tnc_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
