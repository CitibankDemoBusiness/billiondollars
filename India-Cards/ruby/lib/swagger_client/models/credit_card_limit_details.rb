=begin
#Cards

#The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class CreditCardLimitDetails
    # Transaction limit set by the customer for the contact less payments without pin
    attr_accessor :current_contactless_wthout_pin_pmt_limit

    # Point Sale Transaction Limit for the Credit card depends on customer selection
    attr_accessor :pos_spending_limit_amount

    # Non Point of Sale Transaction Limit for the Credit Card. Example: Online Transaction
    attr_accessor :internet_purchase_limit_amount

    # Field to indicate the limit on local ATM withdrawal amount
    attr_accessor :daily_atm_withdrawal_limit_amount

    # This is Daily accumulated Transaction amount Limit and set by customer.
    attr_accessor :daily_transaction_limit_amount

    # The indicator to enable/disable online purchase transaction (E-commerce).
    attr_accessor :internet_purchase_activation_flag

    attr_accessor :domestic_transaction

    attr_accessor :international_transaction

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'current_contactless_wthout_pin_pmt_limit' => :'currentContactlessWthoutPinPmtLimit',
        :'pos_spending_limit_amount' => :'posSpendingLimitAmount',
        :'internet_purchase_limit_amount' => :'internetPurchaseLimitAmount',
        :'daily_atm_withdrawal_limit_amount' => :'dailyAtmWithdrawalLimitAmount',
        :'daily_transaction_limit_amount' => :'dailyTransactionLimitAmount',
        :'internet_purchase_activation_flag' => :'internetPurchaseActivationFlag',
        :'domestic_transaction' => :'domesticTransaction',
        :'international_transaction' => :'internationalTransaction'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'current_contactless_wthout_pin_pmt_limit' => :'Object',
        :'pos_spending_limit_amount' => :'Object',
        :'internet_purchase_limit_amount' => :'Object',
        :'daily_atm_withdrawal_limit_amount' => :'Object',
        :'daily_transaction_limit_amount' => :'Object',
        :'internet_purchase_activation_flag' => :'Object',
        :'domestic_transaction' => :'Object',
        :'international_transaction' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::CreditCardLimitDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::CreditCardLimitDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'current_contactless_wthout_pin_pmt_limit')
        self.current_contactless_wthout_pin_pmt_limit = attributes[:'current_contactless_wthout_pin_pmt_limit']
      end

      if attributes.key?(:'pos_spending_limit_amount')
        self.pos_spending_limit_amount = attributes[:'pos_spending_limit_amount']
      end

      if attributes.key?(:'internet_purchase_limit_amount')
        self.internet_purchase_limit_amount = attributes[:'internet_purchase_limit_amount']
      end

      if attributes.key?(:'daily_atm_withdrawal_limit_amount')
        self.daily_atm_withdrawal_limit_amount = attributes[:'daily_atm_withdrawal_limit_amount']
      end

      if attributes.key?(:'daily_transaction_limit_amount')
        self.daily_transaction_limit_amount = attributes[:'daily_transaction_limit_amount']
      end

      if attributes.key?(:'internet_purchase_activation_flag')
        self.internet_purchase_activation_flag = attributes[:'internet_purchase_activation_flag']
      end

      if attributes.key?(:'domestic_transaction')
        self.domestic_transaction = attributes[:'domestic_transaction']
      end

      if attributes.key?(:'international_transaction')
        self.international_transaction = attributes[:'international_transaction']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          current_contactless_wthout_pin_pmt_limit == o.current_contactless_wthout_pin_pmt_limit &&
          pos_spending_limit_amount == o.pos_spending_limit_amount &&
          internet_purchase_limit_amount == o.internet_purchase_limit_amount &&
          daily_atm_withdrawal_limit_amount == o.daily_atm_withdrawal_limit_amount &&
          daily_transaction_limit_amount == o.daily_transaction_limit_amount &&
          internet_purchase_activation_flag == o.internet_purchase_activation_flag &&
          domestic_transaction == o.domestic_transaction &&
          international_transaction == o.international_transaction
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [current_contactless_wthout_pin_pmt_limit, pos_spending_limit_amount, internet_purchase_limit_amount, daily_atm_withdrawal_limit_amount, daily_transaction_limit_amount, internet_purchase_activation_flag, domestic_transaction, international_transaction].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
