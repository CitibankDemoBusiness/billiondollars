=begin
#Cards

#The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest
    attr_accessor :old_loan_list

    # Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount.
    attr_accessor :total_loan_amount

    # Tenure of loan against credit card. It is considered in terms of number of months.
    attr_accessor :loan_tenure_inmonths

    # Additonal Topup Amount
    attr_accessor :top_up_amount

    # New Loan Description
    attr_accessor :loan_description

    # This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description
    attr_accessor :disbursement_option

    # Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account.
    attr_accessor :account_number

    # Payee Indicator to be mapped against Payee Detail Key
    attr_accessor :payee_id

    # Year of birth of customer
    attr_accessor :birth_year

    attr_accessor :beneficiary_bank_detail

    # This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.
    attr_accessor :loan_purpose

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'old_loan_list' => :'oldLoanList',
        :'total_loan_amount' => :'totalLoanAmount',
        :'loan_tenure_inmonths' => :'loanTenureInmonths',
        :'top_up_amount' => :'topUpAmount',
        :'loan_description' => :'loanDescription',
        :'disbursement_option' => :'disbursementOption',
        :'account_number' => :'accountNumber',
        :'payee_id' => :'payeeId',
        :'birth_year' => :'birthYear',
        :'beneficiary_bank_detail' => :'beneficiaryBankDetail',
        :'loan_purpose' => :'loanPurpose'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'old_loan_list' => :'Object',
        :'total_loan_amount' => :'Object',
        :'loan_tenure_inmonths' => :'Object',
        :'top_up_amount' => :'Object',
        :'loan_description' => :'Object',
        :'disbursement_option' => :'Object',
        :'account_number' => :'Object',
        :'payee_id' => :'Object',
        :'birth_year' => :'Object',
        :'beneficiary_bank_detail' => :'Object',
        :'loan_purpose' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'old_loan_list')
        if (value = attributes[:'old_loan_list']).is_a?(Array)
          self.old_loan_list = value
        end
      end

      if attributes.key?(:'total_loan_amount')
        self.total_loan_amount = attributes[:'total_loan_amount']
      end

      if attributes.key?(:'loan_tenure_inmonths')
        self.loan_tenure_inmonths = attributes[:'loan_tenure_inmonths']
      end

      if attributes.key?(:'top_up_amount')
        self.top_up_amount = attributes[:'top_up_amount']
      end

      if attributes.key?(:'loan_description')
        self.loan_description = attributes[:'loan_description']
      end

      if attributes.key?(:'disbursement_option')
        self.disbursement_option = attributes[:'disbursement_option']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'payee_id')
        self.payee_id = attributes[:'payee_id']
      end

      if attributes.key?(:'birth_year')
        self.birth_year = attributes[:'birth_year']
      end

      if attributes.key?(:'beneficiary_bank_detail')
        self.beneficiary_bank_detail = attributes[:'beneficiary_bank_detail']
      end

      if attributes.key?(:'loan_purpose')
        self.loan_purpose = attributes[:'loan_purpose']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @total_loan_amount.nil?
        invalid_properties.push('invalid value for "total_loan_amount", total_loan_amount cannot be nil.')
      end

      if @loan_tenure_inmonths.nil?
        invalid_properties.push('invalid value for "loan_tenure_inmonths", loan_tenure_inmonths cannot be nil.')
      end

      if @top_up_amount.nil?
        invalid_properties.push('invalid value for "top_up_amount", top_up_amount cannot be nil.')
      end

      if @loan_description.nil?
        invalid_properties.push('invalid value for "loan_description", loan_description cannot be nil.')
      end

      if @disbursement_option.nil?
        invalid_properties.push('invalid value for "disbursement_option", disbursement_option cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @total_loan_amount.nil?
      return false if @loan_tenure_inmonths.nil?
      return false if @top_up_amount.nil?
      return false if @loan_description.nil?
      return false if @disbursement_option.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          old_loan_list == o.old_loan_list &&
          total_loan_amount == o.total_loan_amount &&
          loan_tenure_inmonths == o.loan_tenure_inmonths &&
          top_up_amount == o.top_up_amount &&
          loan_description == o.loan_description &&
          disbursement_option == o.disbursement_option &&
          account_number == o.account_number &&
          payee_id == o.payee_id &&
          birth_year == o.birth_year &&
          beneficiary_bank_detail == o.beneficiary_bank_detail &&
          loan_purpose == o.loan_purpose
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [old_loan_list, total_loan_amount, loan_tenure_inmonths, top_up_amount, loan_description, disbursement_option, account_number, payee_id, birth_year, beneficiary_bank_detail, loan_purpose].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
