=begin
#Cards

#The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest
    # This field provides the unique request ID generated from the VOX platform. Will be used for tracking and audit purposes
    attr_accessor :request_id

    # This field specifies the VOP transaction ID of the original transaction, that triggered the reward.
    attr_accessor :vop_transaction_id

    # This field specifies the action to be performed for the request.Valid Value is Notify
    attr_accessor :action_type

    # This field specifies the Distributor ID. Important when an aggregator (who is serving for more than one distributor) is building the API end point.
    attr_accessor :distributor_id

    # This field provides the card id generated during cardholder enrolment at VOX.
    attr_accessor :card_id

    # This field provides the external user id generated during cardholder enrolment at VOX.
    attr_accessor :user_id

    # This field specifies the reward credit status.Valid Values are Successful, Eligible, Failed
    attr_accessor :credit_status

    # This field specifies the date and time which the reward request is initiated in the format YYYY-MM-DD HH:MM:SS
    attr_accessor :request_date_time

    # This will be the VOX qualified offer ID, which the reward is given, Will be used for tracking and audit purposes.
    attr_accessor :offer_id

    # This field specifies the reward currency of the original offer
    attr_accessor :settlement_currency

    # This field specifies the cashback reward value in Settlement Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00
    attr_accessor :reward_settlement_currency

    # This field specifies the customer purchase currency derived from the VOP transaction.
    attr_accessor :billing_currency

    # This field specifies the cashback reward value in Settlement Billing Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00
    attr_accessor :reward_billing_currency

    # This field provides the merchant name
    attr_accessor :merchant_name

    # This field specifies the transaction date retrieved from the VOP Transaction in the format YYYY-MM-DD HH:MM:SS
    attr_accessor :transaction_date

    # This field specifies transaction amount in billing currency as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00
    attr_accessor :transaction_billing_amount

    # This field specifies transaction amount in settlement currency  as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00
    attr_accessor :transaction_settlement_amount

    # This field is used to pass additional information required by the partner for their records. This can pass an empty value as well.
    attr_accessor :remarks

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'request_id' => :'requestId',
        :'vop_transaction_id' => :'vopTransactionId',
        :'action_type' => :'actionType',
        :'distributor_id' => :'distributorId',
        :'card_id' => :'cardId',
        :'user_id' => :'userId',
        :'credit_status' => :'creditStatus',
        :'request_date_time' => :'requestDateTime',
        :'offer_id' => :'offerId',
        :'settlement_currency' => :'settlementCurrency',
        :'reward_settlement_currency' => :'rewardSettlementCurrency',
        :'billing_currency' => :'billingCurrency',
        :'reward_billing_currency' => :'rewardBillingCurrency',
        :'merchant_name' => :'merchantName',
        :'transaction_date' => :'transactionDate',
        :'transaction_billing_amount' => :'transactionBillingAmount',
        :'transaction_settlement_amount' => :'transactionSettlementAmount',
        :'remarks' => :'remarks'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'request_id' => :'Object',
        :'vop_transaction_id' => :'Object',
        :'action_type' => :'Object',
        :'distributor_id' => :'Object',
        :'card_id' => :'Object',
        :'user_id' => :'Object',
        :'credit_status' => :'Object',
        :'request_date_time' => :'Object',
        :'offer_id' => :'Object',
        :'settlement_currency' => :'Object',
        :'reward_settlement_currency' => :'Object',
        :'billing_currency' => :'Object',
        :'reward_billing_currency' => :'Object',
        :'merchant_name' => :'Object',
        :'transaction_date' => :'Object',
        :'transaction_billing_amount' => :'Object',
        :'transaction_settlement_amount' => :'Object',
        :'remarks' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'request_id')
        self.request_id = attributes[:'request_id']
      end

      if attributes.key?(:'vop_transaction_id')
        self.vop_transaction_id = attributes[:'vop_transaction_id']
      end

      if attributes.key?(:'action_type')
        self.action_type = attributes[:'action_type']
      end

      if attributes.key?(:'distributor_id')
        self.distributor_id = attributes[:'distributor_id']
      end

      if attributes.key?(:'card_id')
        self.card_id = attributes[:'card_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'credit_status')
        self.credit_status = attributes[:'credit_status']
      end

      if attributes.key?(:'request_date_time')
        self.request_date_time = attributes[:'request_date_time']
      end

      if attributes.key?(:'offer_id')
        self.offer_id = attributes[:'offer_id']
      end

      if attributes.key?(:'settlement_currency')
        self.settlement_currency = attributes[:'settlement_currency']
      end

      if attributes.key?(:'reward_settlement_currency')
        self.reward_settlement_currency = attributes[:'reward_settlement_currency']
      end

      if attributes.key?(:'billing_currency')
        self.billing_currency = attributes[:'billing_currency']
      end

      if attributes.key?(:'reward_billing_currency')
        self.reward_billing_currency = attributes[:'reward_billing_currency']
      end

      if attributes.key?(:'merchant_name')
        self.merchant_name = attributes[:'merchant_name']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'transaction_billing_amount')
        self.transaction_billing_amount = attributes[:'transaction_billing_amount']
      end

      if attributes.key?(:'transaction_settlement_amount')
        self.transaction_settlement_amount = attributes[:'transaction_settlement_amount']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @request_id.nil?
        invalid_properties.push('invalid value for "request_id", request_id cannot be nil.')
      end

      if @vop_transaction_id.nil?
        invalid_properties.push('invalid value for "vop_transaction_id", vop_transaction_id cannot be nil.')
      end

      if @action_type.nil?
        invalid_properties.push('invalid value for "action_type", action_type cannot be nil.')
      end

      if @distributor_id.nil?
        invalid_properties.push('invalid value for "distributor_id", distributor_id cannot be nil.')
      end

      if @card_id.nil?
        invalid_properties.push('invalid value for "card_id", card_id cannot be nil.')
      end

      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @credit_status.nil?
        invalid_properties.push('invalid value for "credit_status", credit_status cannot be nil.')
      end

      if @request_date_time.nil?
        invalid_properties.push('invalid value for "request_date_time", request_date_time cannot be nil.')
      end

      if @offer_id.nil?
        invalid_properties.push('invalid value for "offer_id", offer_id cannot be nil.')
      end

      if @settlement_currency.nil?
        invalid_properties.push('invalid value for "settlement_currency", settlement_currency cannot be nil.')
      end

      if @reward_settlement_currency.nil?
        invalid_properties.push('invalid value for "reward_settlement_currency", reward_settlement_currency cannot be nil.')
      end

      if @billing_currency.nil?
        invalid_properties.push('invalid value for "billing_currency", billing_currency cannot be nil.')
      end

      if @reward_billing_currency.nil?
        invalid_properties.push('invalid value for "reward_billing_currency", reward_billing_currency cannot be nil.')
      end

      if @merchant_name.nil?
        invalid_properties.push('invalid value for "merchant_name", merchant_name cannot be nil.')
      end

      if @transaction_date.nil?
        invalid_properties.push('invalid value for "transaction_date", transaction_date cannot be nil.')
      end

      if @transaction_billing_amount.nil?
        invalid_properties.push('invalid value for "transaction_billing_amount", transaction_billing_amount cannot be nil.')
      end

      if @transaction_settlement_amount.nil?
        invalid_properties.push('invalid value for "transaction_settlement_amount", transaction_settlement_amount cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @request_id.nil?
      return false if @vop_transaction_id.nil?
      return false if @action_type.nil?
      return false if @distributor_id.nil?
      return false if @card_id.nil?
      return false if @user_id.nil?
      return false if @credit_status.nil?
      return false if @request_date_time.nil?
      return false if @offer_id.nil?
      return false if @settlement_currency.nil?
      return false if @reward_settlement_currency.nil?
      return false if @billing_currency.nil?
      return false if @reward_billing_currency.nil?
      return false if @merchant_name.nil?
      return false if @transaction_date.nil?
      return false if @transaction_billing_amount.nil?
      return false if @transaction_settlement_amount.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          request_id == o.request_id &&
          vop_transaction_id == o.vop_transaction_id &&
          action_type == o.action_type &&
          distributor_id == o.distributor_id &&
          card_id == o.card_id &&
          user_id == o.user_id &&
          credit_status == o.credit_status &&
          request_date_time == o.request_date_time &&
          offer_id == o.offer_id &&
          settlement_currency == o.settlement_currency &&
          reward_settlement_currency == o.reward_settlement_currency &&
          billing_currency == o.billing_currency &&
          reward_billing_currency == o.reward_billing_currency &&
          merchant_name == o.merchant_name &&
          transaction_date == o.transaction_date &&
          transaction_billing_amount == o.transaction_billing_amount &&
          transaction_settlement_amount == o.transaction_settlement_amount &&
          remarks == o.remarks
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [request_id, vop_transaction_id, action_type, distributor_id, card_id, user_id, credit_status, request_date_time, offer_id, settlement_currency, reward_settlement_currency, billing_currency, reward_billing_currency, merchant_name, transaction_date, transaction_billing_amount, transaction_settlement_amount, remarks].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
