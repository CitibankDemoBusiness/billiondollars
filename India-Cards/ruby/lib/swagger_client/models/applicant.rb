=begin
#Cards

#The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class Applicant
    attr_accessor :address

    attr_accessor :partner_customer_details

    # Mother's maiden name
    attr_accessor :mother_maiden_name

    attr_accessor :identification_document_details

    attr_accessor :phone

    attr_accessor :employment_details

    attr_accessor :name

    attr_accessor :consent_details

    # Flag to indicated whether reward redemption allowed for supplementary. Valid values: true and false
    attr_accessor :reward_redemption_allowed_flag

    attr_accessor :demographics

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address' => :'address',
        :'partner_customer_details' => :'partnerCustomerDetails',
        :'mother_maiden_name' => :'motherMaidenName',
        :'identification_document_details' => :'identificationDocumentDetails',
        :'phone' => :'phone',
        :'employment_details' => :'employmentDetails',
        :'name' => :'name',
        :'consent_details' => :'consentDetails',
        :'reward_redemption_allowed_flag' => :'rewardRedemptionAllowedFlag',
        :'demographics' => :'demographics'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address' => :'Object',
        :'partner_customer_details' => :'Object',
        :'mother_maiden_name' => :'Object',
        :'identification_document_details' => :'Object',
        :'phone' => :'Object',
        :'employment_details' => :'Object',
        :'name' => :'Object',
        :'consent_details' => :'Object',
        :'reward_redemption_allowed_flag' => :'Object',
        :'demographics' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::Applicant` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::Applicant`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address')
        if (value = attributes[:'address']).is_a?(Array)
          self.address = value
        end
      end

      if attributes.key?(:'partner_customer_details')
        self.partner_customer_details = attributes[:'partner_customer_details']
      end

      if attributes.key?(:'mother_maiden_name')
        self.mother_maiden_name = attributes[:'mother_maiden_name']
      end

      if attributes.key?(:'identification_document_details')
        if (value = attributes[:'identification_document_details']).is_a?(Array)
          self.identification_document_details = value
        end
      end

      if attributes.key?(:'phone')
        if (value = attributes[:'phone']).is_a?(Array)
          self.phone = value
        end
      end

      if attributes.key?(:'employment_details')
        self.employment_details = attributes[:'employment_details']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'consent_details')
        if (value = attributes[:'consent_details']).is_a?(Array)
          self.consent_details = value
        end
      end

      if attributes.key?(:'reward_redemption_allowed_flag')
        self.reward_redemption_allowed_flag = attributes[:'reward_redemption_allowed_flag']
      end

      if attributes.key?(:'demographics')
        self.demographics = attributes[:'demographics']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @address.nil?
        invalid_properties.push('invalid value for "address", address cannot be nil.')
      end

      if @mother_maiden_name.nil?
        invalid_properties.push('invalid value for "mother_maiden_name", mother_maiden_name cannot be nil.')
      end

      if @phone.nil?
        invalid_properties.push('invalid value for "phone", phone cannot be nil.')
      end

      if @employment_details.nil?
        invalid_properties.push('invalid value for "employment_details", employment_details cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @consent_details.nil?
        invalid_properties.push('invalid value for "consent_details", consent_details cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @address.nil?
      return false if @mother_maiden_name.nil?
      return false if @phone.nil?
      return false if @employment_details.nil?
      return false if @name.nil?
      return false if @consent_details.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address == o.address &&
          partner_customer_details == o.partner_customer_details &&
          mother_maiden_name == o.mother_maiden_name &&
          identification_document_details == o.identification_document_details &&
          phone == o.phone &&
          employment_details == o.employment_details &&
          name == o.name &&
          consent_details == o.consent_details &&
          reward_redemption_allowed_flag == o.reward_redemption_allowed_flag &&
          demographics == o.demographics
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address, partner_customer_details, mother_maiden_name, identification_document_details, phone, employment_details, name, consent_details, reward_redemption_allowed_flag, demographics].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
