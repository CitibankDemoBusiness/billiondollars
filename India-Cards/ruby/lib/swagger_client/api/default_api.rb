=begin
#Cards

#The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Update local usage activation
    # This API is used to activate or deactivate the specified card's ability to be used locally.
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param client_id Client ID generated during application registration.
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param card_id Card Id in encrypted format
    # @param card_activation_code Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.
    # @param [Hash] opts the optional parameters
    # @option opts [CardUsageRequest] :body 
    # @return [nil]
    def v1_cards_card_id_activations_card_activation_code_put(uuid, client_id, authorization, card_id, card_activation_code, opts = {})
      v1_cards_card_id_activations_card_activation_code_put_with_http_info(uuid, client_id, authorization, card_id, card_activation_code, opts)
      nil
    end

    # Update local usage activation
    # This API is used to activate or deactivate the specified card&#x27;s ability to be used locally.
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param client_id Client ID generated during application registration.
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param card_id Card Id in encrypted format
    # @param card_activation_code Activation Code for card Usage. Possible values:ACTIVATE, DEACTIVATE.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardActivationCode} resource to get valid value of this field with description. You can use the cardActivationCode as the referenceCode parameter to retrieve the values.
    # @param [Hash] opts the optional parameters
    # @option opts [CardUsageRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_cards_card_id_activations_card_activation_code_put_with_http_info(uuid, client_id, authorization, card_id, card_activation_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.v1_cards_card_id_activations_card_activation_code_put ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.v1_cards_card_id_activations_card_activation_code_put"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DefaultApi.v1_cards_card_id_activations_card_activation_code_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.v1_cards_card_id_activations_card_activation_code_put"
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling DefaultApi.v1_cards_card_id_activations_card_activation_code_put"
      end
      # verify the required parameter 'card_activation_code' is set
      if @api_client.config.client_side_validation && card_activation_code.nil?
        fail ArgumentError, "Missing the required parameter 'card_activation_code' when calling DefaultApi.v1_cards_card_id_activations_card_activation_code_put"
      end
      # resource path
      local_var_path = '/v1/cards/{cardId}/activations/{cardActivationCode}'.sub('{' + 'cardId' + '}', card_id.to_s).sub('{' + 'cardActivationCode' + '}', card_activation_code.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'uuid'] = uuid
      header_params[:'client_id'] = client_id
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#v1_cards_card_id_activations_card_activation_code_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Report card as lost or stolen
    # This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
    # @param body 
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param client_id Client ID generated during application registration.
    # @param content_type application/json
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param card_id Unique Id of the card in encrypted format
    # @param [Hash] opts the optional parameters
    # @return [ReportLostStolenCardResponse]
    def v1_cards_card_id_lost_stolen_put(body, uuid, accept, client_id, content_type, authorization, card_id, opts = {})
      data, _status_code, _headers = v1_cards_card_id_lost_stolen_put_with_http_info(body, uuid, accept, client_id, content_type, authorization, card_id, opts)
      data
    end

    # Report card as lost or stolen
    # This API is used to report a specified card as lost or stolen and returns a reference number to track the request.
    # @param body 
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param client_id Client ID generated during application registration.
    # @param content_type application/json
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param card_id Unique Id of the card in encrypted format
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportLostStolenCardResponse, Integer, Hash)>] ReportLostStolenCardResponse data, response status code and response headers
    def v1_cards_card_id_lost_stolen_put_with_http_info(body, uuid, accept, client_id, content_type, authorization, card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.v1_cards_card_id_lost_stolen_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.v1_cards_card_id_lost_stolen_put"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.v1_cards_card_id_lost_stolen_put"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling DefaultApi.v1_cards_card_id_lost_stolen_put"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DefaultApi.v1_cards_card_id_lost_stolen_put"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.v1_cards_card_id_lost_stolen_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.v1_cards_card_id_lost_stolen_put"
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling DefaultApi.v1_cards_card_id_lost_stolen_put"
      end
      # resource path
      local_var_path = '/v1/cards/{cardId}/lostStolen'.sub('{' + 'cardId' + '}', card_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'uuid'] = uuid
      header_params[:'Accept'] = accept
      header_params[:'client_id'] = client_id
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ReportLostStolenCardResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#v1_cards_card_id_lost_stolen_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update overseas usage activation
    # This API is used to activate or deactivate a specified card's ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
    # @param body 
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param client_id Client ID generated during application registration.
    # @param content_type application/json
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param card_id Unique Id of the card for activation or de-activation.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_cards_card_id_overseas_usage_put(body, uuid, accept, client_id, content_type, authorization, card_id, opts = {})
      v1_cards_card_id_overseas_usage_put_with_http_info(body, uuid, accept, client_id, content_type, authorization, card_id, opts)
      nil
    end

    # Update overseas usage activation
    # This API is used to activate or deactivate a specified card&#x27;s ability to be used overseas. Cards can be activated for overseas usage permanently or for a set period of time.
    # @param body 
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param client_id Client ID generated during application registration.
    # @param content_type application/json
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param card_id Unique Id of the card for activation or de-activation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_cards_card_id_overseas_usage_put_with_http_info(body, uuid, accept, client_id, content_type, authorization, card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.v1_cards_card_id_overseas_usage_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.v1_cards_card_id_overseas_usage_put"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.v1_cards_card_id_overseas_usage_put"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling DefaultApi.v1_cards_card_id_overseas_usage_put"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DefaultApi.v1_cards_card_id_overseas_usage_put"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.v1_cards_card_id_overseas_usage_put"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.v1_cards_card_id_overseas_usage_put"
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling DefaultApi.v1_cards_card_id_overseas_usage_put"
      end
      # resource path
      local_var_path = '/v1/cards/{cardId}/overseasUsage'.sub('{' + 'cardId' + '}', card_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'uuid'] = uuid
      header_params[:'Accept'] = accept
      header_params[:'client_id'] = client_id
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#v1_cards_card_id_overseas_usage_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve all cards
    # This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param client_id client id generated during consumer onboarding
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param card_function Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
    # @param [Hash] opts the optional parameters
    # @return [CardListingResponse]
    def v1_cards_get(authorization, client_id, uuid, accept, card_function, opts = {})
      data, _status_code, _headers = v1_cards_get_with_http_info(authorization, client_id, uuid, accept, card_function, opts)
      data
    end

    # Retrieve all cards
    # This API is used to retrieve all the credit card numbers and correponding details of the customers who authorized the application.
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param client_id client id generated during consumer onboarding
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param card_function Card function. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardFunction} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardListingResponse, Integer, Hash)>] CardListingResponse data, response status code and response headers
    def v1_cards_get_with_http_info(authorization, client_id, uuid, accept, card_function, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.v1_cards_get ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.v1_cards_get"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DefaultApi.v1_cards_get"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.v1_cards_get"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling DefaultApi.v1_cards_get"
      end
      # verify the required parameter 'card_function' is set
      if @api_client.config.client_side_validation && card_function.nil?
        fail ArgumentError, "Missing the required parameter 'card_function' when calling DefaultApi.v1_cards_get"
      end
      # resource path
      local_var_path = '/v1/cards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cardFunction'] = card_function

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'client_id'] = client_id
      header_params[:'uuid'] = uuid
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CardListingResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#v1_cards_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Supplementary Card Application
    # This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param client_id Client ID generated during application registration.
    # @param card_id Primary card id in encrypted format.
    # @param [Hash] opts the optional parameters
    # @option opts [SupplementaryCardRequest] :body 
    # @return [SupplementaryCardResponse]
    def v1_credit_cards_card_id_supplementary_applications_post(authorization, uuid, client_id, card_id, opts = {})
      data, _status_code, _headers = v1_credit_cards_card_id_supplementary_applications_post_with_http_info(authorization, uuid, client_id, card_id, opts)
      data
    end

    # Supplementary Card Application
    # This API is used to authorize Citi Customer to add a Supplementary card to their existing primary card.
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param client_id Client ID generated during application registration.
    # @param card_id Primary card id in encrypted format.
    # @param [Hash] opts the optional parameters
    # @option opts [SupplementaryCardRequest] :body 
    # @return [Array<(SupplementaryCardResponse, Integer, Hash)>] SupplementaryCardResponse data, response status code and response headers
    def v1_credit_cards_card_id_supplementary_applications_post_with_http_info(authorization, uuid, client_id, card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.v1_credit_cards_card_id_supplementary_applications_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.v1_credit_cards_card_id_supplementary_applications_post"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.v1_credit_cards_card_id_supplementary_applications_post"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DefaultApi.v1_credit_cards_card_id_supplementary_applications_post"
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling DefaultApi.v1_credit_cards_card_id_supplementary_applications_post"
      end
      # resource path
      local_var_path = '/v1/creditCards/{cardId}/supplementary/applications'.sub('{' + 'cardId' + '}', card_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'uuid'] = uuid
      header_params[:'client_id'] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'SupplementaryCardResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#v1_credit_cards_card_id_supplementary_applications_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request credit limit increase
    # This API is used to request for a permanent or temporary credit limit increase on credit card.
    # @param body 
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param client_id Client ID generated during application registration.
    # @param content_type application/json
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param [Hash] opts the optional parameters
    # @return [CreditLimitIncreaseResponse]
    def v1_credit_cards_credit_limits_post(body, uuid, accept, client_id, content_type, authorization, opts = {})
      data, _status_code, _headers = v1_credit_cards_credit_limits_post_with_http_info(body, uuid, accept, client_id, content_type, authorization, opts)
      data
    end

    # Request credit limit increase
    # This API is used to request for a permanent or temporary credit limit increase on credit card.
    # @param body 
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param client_id Client ID generated during application registration.
    # @param content_type application/json
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreditLimitIncreaseResponse, Integer, Hash)>] CreditLimitIncreaseResponse data, response status code and response headers
    def v1_credit_cards_credit_limits_post_with_http_info(body, uuid, accept, client_id, content_type, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.v1_credit_cards_credit_limits_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.v1_credit_cards_credit_limits_post"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.v1_credit_cards_credit_limits_post"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling DefaultApi.v1_credit_cards_credit_limits_post"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DefaultApi.v1_credit_cards_credit_limits_post"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling DefaultApi.v1_credit_cards_credit_limits_post"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.v1_credit_cards_credit_limits_post"
      end
      # resource path
      local_var_path = '/v1/creditCards/creditLimits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'uuid'] = uuid
      header_params[:'Accept'] = accept
      header_params[:'client_id'] = client_id
      header_params[:'Content-Type'] = content_type
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CreditLimitIncreaseResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#v1_credit_cards_credit_limits_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
