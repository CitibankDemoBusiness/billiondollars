# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Demographics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nationality': 'str',
        'date_of_birth': 'date'
    }

    attribute_map = {
        'nationality': 'nationality',
        'date_of_birth': 'dateOfBirth'
    }

    def __init__(self, nationality=None, date_of_birth=None):  # noqa: E501
        """Demographics - a model defined in Swagger"""  # noqa: E501
        self._nationality = None
        self._date_of_birth = None
        self.discriminator = None
        self.nationality = nationality
        self.date_of_birth = date_of_birth

    @property
    def nationality(self):
        """Gets the nationality of this Demographics.  # noqa: E501

        Applicant's nationality. This is a reference data field. Please use /v1/apac/utilities/referenceData/{country} resource to get valid value of this field with description.  # noqa: E501

        :return: The nationality of this Demographics.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Demographics.

        Applicant's nationality. This is a reference data field. Please use /v1/apac/utilities/referenceData/{country} resource to get valid value of this field with description.  # noqa: E501

        :param nationality: The nationality of this Demographics.  # noqa: E501
        :type: str
        """
        if nationality is None:
            raise ValueError("Invalid value for `nationality`, must not be `None`")  # noqa: E501

        self._nationality = nationality

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Demographics.  # noqa: E501

        Applicant's date of birth in  ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The date_of_birth of this Demographics.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Demographics.

        Applicant's date of birth in  ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param date_of_birth: The date_of_birth of this Demographics.  # noqa: E501
        :type: date
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")  # noqa: E501

        self._date_of_birth = date_of_birth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Demographics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Demographics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
