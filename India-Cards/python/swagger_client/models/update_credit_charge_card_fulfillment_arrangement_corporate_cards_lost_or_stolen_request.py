# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tokenized_card_number': 'str',
        'corporate_officer_details': 'CorporateOfficerDetails',
        'embossed_name': 'str',
        'service_request_type': 'str',
        'stolen_date': 'date',
        'last_card_used_date': 'date',
        'last_transaction_amount': 'float',
        'card_loss_type': 'str',
        'lost_country': 'str',
        'customer_remarks': 'str'
    }

    attribute_map = {
        'tokenized_card_number': 'tokenizedCardNumber',
        'corporate_officer_details': 'corporateOfficerDetails',
        'embossed_name': 'embossedName',
        'service_request_type': 'serviceRequestType',
        'stolen_date': 'stolenDate',
        'last_card_used_date': 'lastCardUsedDate',
        'last_transaction_amount': 'lastTransactionAmount',
        'card_loss_type': 'cardLossType',
        'lost_country': 'lostCountry',
        'customer_remarks': 'customerRemarks'
    }

    def __init__(self, tokenized_card_number=None, corporate_officer_details=None, embossed_name=None, service_request_type=None, stolen_date=None, last_card_used_date=None, last_transaction_amount=None, card_loss_type=None, lost_country=None, customer_remarks=None):  # noqa: E501
        """UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest - a model defined in Swagger"""  # noqa: E501
        self._tokenized_card_number = None
        self._corporate_officer_details = None
        self._embossed_name = None
        self._service_request_type = None
        self._stolen_date = None
        self._last_card_used_date = None
        self._last_transaction_amount = None
        self._card_loss_type = None
        self._lost_country = None
        self._customer_remarks = None
        self.discriminator = None
        self.tokenized_card_number = tokenized_card_number
        if corporate_officer_details is not None:
            self.corporate_officer_details = corporate_officer_details
        self.embossed_name = embossed_name
        self.service_request_type = service_request_type
        if stolen_date is not None:
            self.stolen_date = stolen_date
        if last_card_used_date is not None:
            self.last_card_used_date = last_card_used_date
        if last_transaction_amount is not None:
            self.last_transaction_amount = last_transaction_amount
        if card_loss_type is not None:
            self.card_loss_type = card_loss_type
        if lost_country is not None:
            self.lost_country = lost_country
        if customer_remarks is not None:
            self.customer_remarks = customer_remarks

    @property
    def tokenized_card_number(self):
        """Gets the tokenized_card_number of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501

        Tokenized card number  # noqa: E501

        :return: The tokenized_card_number of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: str
        """
        return self._tokenized_card_number

    @tokenized_card_number.setter
    def tokenized_card_number(self, tokenized_card_number):
        """Sets the tokenized_card_number of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.

        Tokenized card number  # noqa: E501

        :param tokenized_card_number: The tokenized_card_number of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: str
        """
        if tokenized_card_number is None:
            raise ValueError("Invalid value for `tokenized_card_number`, must not be `None`")  # noqa: E501

        self._tokenized_card_number = tokenized_card_number

    @property
    def corporate_officer_details(self):
        """Gets the corporate_officer_details of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501


        :return: The corporate_officer_details of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: CorporateOfficerDetails
        """
        return self._corporate_officer_details

    @corporate_officer_details.setter
    def corporate_officer_details(self, corporate_officer_details):
        """Sets the corporate_officer_details of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.


        :param corporate_officer_details: The corporate_officer_details of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: CorporateOfficerDetails
        """

        self._corporate_officer_details = corporate_officer_details

    @property
    def embossed_name(self):
        """Gets the embossed_name of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501

        Customer Name embossed on the card  # noqa: E501

        :return: The embossed_name of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: str
        """
        return self._embossed_name

    @embossed_name.setter
    def embossed_name(self, embossed_name):
        """Sets the embossed_name of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.

        Customer Name embossed on the card  # noqa: E501

        :param embossed_name: The embossed_name of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: str
        """
        if embossed_name is None:
            raise ValueError("Invalid value for `embossed_name`, must not be `None`")  # noqa: E501

        self._embossed_name = embossed_name

    @property
    def service_request_type(self):
        """Gets the service_request_type of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501

        This is a reference data field. Please use /v1/utilities/referenceData/{serviceRequestType} resource to get possible values of this field with descriptions  # noqa: E501

        :return: The service_request_type of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: str
        """
        return self._service_request_type

    @service_request_type.setter
    def service_request_type(self, service_request_type):
        """Sets the service_request_type of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.

        This is a reference data field. Please use /v1/utilities/referenceData/{serviceRequestType} resource to get possible values of this field with descriptions  # noqa: E501

        :param service_request_type: The service_request_type of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: str
        """
        if service_request_type is None:
            raise ValueError("Invalid value for `service_request_type`, must not be `None`")  # noqa: E501

        self._service_request_type = service_request_type

    @property
    def stolen_date(self):
        """Gets the stolen_date of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501

        Cards Lost or Stolen date  # noqa: E501

        :return: The stolen_date of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: date
        """
        return self._stolen_date

    @stolen_date.setter
    def stolen_date(self, stolen_date):
        """Sets the stolen_date of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.

        Cards Lost or Stolen date  # noqa: E501

        :param stolen_date: The stolen_date of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: date
        """

        self._stolen_date = stolen_date

    @property
    def last_card_used_date(self):
        """Gets the last_card_used_date of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501

        Latest date when the card was used  # noqa: E501

        :return: The last_card_used_date of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: date
        """
        return self._last_card_used_date

    @last_card_used_date.setter
    def last_card_used_date(self, last_card_used_date):
        """Sets the last_card_used_date of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.

        Latest date when the card was used  # noqa: E501

        :param last_card_used_date: The last_card_used_date of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: date
        """

        self._last_card_used_date = last_card_used_date

    @property
    def last_transaction_amount(self):
        """Gets the last_transaction_amount of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501

        Latest Transaction amount on the card  # noqa: E501

        :return: The last_transaction_amount of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: float
        """
        return self._last_transaction_amount

    @last_transaction_amount.setter
    def last_transaction_amount(self, last_transaction_amount):
        """Sets the last_transaction_amount of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.

        Latest Transaction amount on the card  # noqa: E501

        :param last_transaction_amount: The last_transaction_amount of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: float
        """

        self._last_transaction_amount = last_transaction_amount

    @property
    def card_loss_type(self):
        """Gets the card_loss_type of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501

        Type of loss of the card. This is a reference data field. Please use /v1/utilities/referenceData/{typeOfLoss} resource to get possible values of this field with descriptions  # noqa: E501

        :return: The card_loss_type of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_loss_type

    @card_loss_type.setter
    def card_loss_type(self, card_loss_type):
        """Sets the card_loss_type of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.

        Type of loss of the card. This is a reference data field. Please use /v1/utilities/referenceData/{typeOfLoss} resource to get possible values of this field with descriptions  # noqa: E501

        :param card_loss_type: The card_loss_type of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: str
        """

        self._card_loss_type = card_loss_type

    @property
    def lost_country(self):
        """Gets the lost_country of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501

        Country where the card was lost. This is a reference data field. Please use /v1/utilities/referenceData/{lostCountry} resource to get possible values of this field with descriptions  # noqa: E501

        :return: The lost_country of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: str
        """
        return self._lost_country

    @lost_country.setter
    def lost_country(self, lost_country):
        """Sets the lost_country of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.

        Country where the card was lost. This is a reference data field. Please use /v1/utilities/referenceData/{lostCountry} resource to get possible values of this field with descriptions  # noqa: E501

        :param lost_country: The lost_country of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: str
        """

        self._lost_country = lost_country

    @property
    def customer_remarks(self):
        """Gets the customer_remarks of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501

        Remarks to be mentioned by customer (120 Bytes max length)  # noqa: E501

        :return: The customer_remarks of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_remarks

    @customer_remarks.setter
    def customer_remarks(self, customer_remarks):
        """Sets the customer_remarks of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.

        Remarks to be mentioned by customer (120 Bytes max length)  # noqa: E501

        :param customer_remarks: The customer_remarks of this UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest.  # noqa: E501
        :type: str
        """

        self._customer_remarks = customer_remarks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCreditChargeCardFulfillmentArrangementCorporateCardsLostOrStolenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
