# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Applicant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'list[Address]',
        'partner_customer_details': 'PartnerCustomerDetails',
        'mother_maiden_name': 'str',
        'identification_document_details': 'list[IdentificationDocumentDetails]',
        'phone': 'list[Phone]',
        'employment_details': 'EmploymentDetails',
        'name': 'Name',
        'consent_details': 'list[ConsentDetails]',
        'reward_redemption_allowed_flag': 'bool',
        'demographics': 'Demographics'
    }

    attribute_map = {
        'address': 'address',
        'partner_customer_details': 'partnerCustomerDetails',
        'mother_maiden_name': 'motherMaidenName',
        'identification_document_details': 'identificationDocumentDetails',
        'phone': 'phone',
        'employment_details': 'employmentDetails',
        'name': 'name',
        'consent_details': 'consentDetails',
        'reward_redemption_allowed_flag': 'rewardRedemptionAllowedFlag',
        'demographics': 'demographics'
    }

    def __init__(self, address=None, partner_customer_details=None, mother_maiden_name=None, identification_document_details=None, phone=None, employment_details=None, name=None, consent_details=None, reward_redemption_allowed_flag=None, demographics=None):  # noqa: E501
        """Applicant - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._partner_customer_details = None
        self._mother_maiden_name = None
        self._identification_document_details = None
        self._phone = None
        self._employment_details = None
        self._name = None
        self._consent_details = None
        self._reward_redemption_allowed_flag = None
        self._demographics = None
        self.discriminator = None
        self.address = address
        if partner_customer_details is not None:
            self.partner_customer_details = partner_customer_details
        self.mother_maiden_name = mother_maiden_name
        if identification_document_details is not None:
            self.identification_document_details = identification_document_details
        self.phone = phone
        self.employment_details = employment_details
        self.name = name
        self.consent_details = consent_details
        if reward_redemption_allowed_flag is not None:
            self.reward_redemption_allowed_flag = reward_redemption_allowed_flag
        if demographics is not None:
            self.demographics = demographics

    @property
    def address(self):
        """Gets the address of this Applicant.  # noqa: E501


        :return: The address of this Applicant.  # noqa: E501
        :rtype: list[Address]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Applicant.


        :param address: The address of this Applicant.  # noqa: E501
        :type: list[Address]
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def partner_customer_details(self):
        """Gets the partner_customer_details of this Applicant.  # noqa: E501


        :return: The partner_customer_details of this Applicant.  # noqa: E501
        :rtype: PartnerCustomerDetails
        """
        return self._partner_customer_details

    @partner_customer_details.setter
    def partner_customer_details(self, partner_customer_details):
        """Sets the partner_customer_details of this Applicant.


        :param partner_customer_details: The partner_customer_details of this Applicant.  # noqa: E501
        :type: PartnerCustomerDetails
        """

        self._partner_customer_details = partner_customer_details

    @property
    def mother_maiden_name(self):
        """Gets the mother_maiden_name of this Applicant.  # noqa: E501

        Mother's maiden name  # noqa: E501

        :return: The mother_maiden_name of this Applicant.  # noqa: E501
        :rtype: str
        """
        return self._mother_maiden_name

    @mother_maiden_name.setter
    def mother_maiden_name(self, mother_maiden_name):
        """Sets the mother_maiden_name of this Applicant.

        Mother's maiden name  # noqa: E501

        :param mother_maiden_name: The mother_maiden_name of this Applicant.  # noqa: E501
        :type: str
        """
        if mother_maiden_name is None:
            raise ValueError("Invalid value for `mother_maiden_name`, must not be `None`")  # noqa: E501

        self._mother_maiden_name = mother_maiden_name

    @property
    def identification_document_details(self):
        """Gets the identification_document_details of this Applicant.  # noqa: E501


        :return: The identification_document_details of this Applicant.  # noqa: E501
        :rtype: list[IdentificationDocumentDetails]
        """
        return self._identification_document_details

    @identification_document_details.setter
    def identification_document_details(self, identification_document_details):
        """Sets the identification_document_details of this Applicant.


        :param identification_document_details: The identification_document_details of this Applicant.  # noqa: E501
        :type: list[IdentificationDocumentDetails]
        """

        self._identification_document_details = identification_document_details

    @property
    def phone(self):
        """Gets the phone of this Applicant.  # noqa: E501


        :return: The phone of this Applicant.  # noqa: E501
        :rtype: list[Phone]
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Applicant.


        :param phone: The phone of this Applicant.  # noqa: E501
        :type: list[Phone]
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def employment_details(self):
        """Gets the employment_details of this Applicant.  # noqa: E501


        :return: The employment_details of this Applicant.  # noqa: E501
        :rtype: EmploymentDetails
        """
        return self._employment_details

    @employment_details.setter
    def employment_details(self, employment_details):
        """Sets the employment_details of this Applicant.


        :param employment_details: The employment_details of this Applicant.  # noqa: E501
        :type: EmploymentDetails
        """
        if employment_details is None:
            raise ValueError("Invalid value for `employment_details`, must not be `None`")  # noqa: E501

        self._employment_details = employment_details

    @property
    def name(self):
        """Gets the name of this Applicant.  # noqa: E501


        :return: The name of this Applicant.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Applicant.


        :param name: The name of this Applicant.  # noqa: E501
        :type: Name
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def consent_details(self):
        """Gets the consent_details of this Applicant.  # noqa: E501


        :return: The consent_details of this Applicant.  # noqa: E501
        :rtype: list[ConsentDetails]
        """
        return self._consent_details

    @consent_details.setter
    def consent_details(self, consent_details):
        """Sets the consent_details of this Applicant.


        :param consent_details: The consent_details of this Applicant.  # noqa: E501
        :type: list[ConsentDetails]
        """
        if consent_details is None:
            raise ValueError("Invalid value for `consent_details`, must not be `None`")  # noqa: E501

        self._consent_details = consent_details

    @property
    def reward_redemption_allowed_flag(self):
        """Gets the reward_redemption_allowed_flag of this Applicant.  # noqa: E501

        Flag to indicated whether reward redemption allowed for supplementary. Valid values: true and false  # noqa: E501

        :return: The reward_redemption_allowed_flag of this Applicant.  # noqa: E501
        :rtype: bool
        """
        return self._reward_redemption_allowed_flag

    @reward_redemption_allowed_flag.setter
    def reward_redemption_allowed_flag(self, reward_redemption_allowed_flag):
        """Sets the reward_redemption_allowed_flag of this Applicant.

        Flag to indicated whether reward redemption allowed for supplementary. Valid values: true and false  # noqa: E501

        :param reward_redemption_allowed_flag: The reward_redemption_allowed_flag of this Applicant.  # noqa: E501
        :type: bool
        """

        self._reward_redemption_allowed_flag = reward_redemption_allowed_flag

    @property
    def demographics(self):
        """Gets the demographics of this Applicant.  # noqa: E501


        :return: The demographics of this Applicant.  # noqa: E501
        :rtype: Demographics
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics):
        """Sets the demographics of this Applicant.


        :param demographics: The demographics of this Applicant.  # noqa: E501
        :type: Demographics
        """

        self._demographics = demographics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Applicant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Applicant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
