# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InternationalTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'atm_transaction_limit_toggle_indicator': 'str',
        'atm_transaction_limit_amount': 'float',
        'contactless_txn_limit_toggle_indicator': 'str',
        'contactless_transaction_limit_amount': 'float',
        'contact_pos_txn_limit_toggle_indicator': 'str',
        'contact_pos_transaction_limit_amount': 'float',
        'non_pos_txn_limit_toggle_indicator': 'str',
        'non_pos_transaction_limit_amount': 'float'
    }

    attribute_map = {
        'atm_transaction_limit_toggle_indicator': 'atmTransactionLimitToggleIndicator',
        'atm_transaction_limit_amount': 'atmTransactionLimitAmount',
        'contactless_txn_limit_toggle_indicator': 'contactlessTxnLimitToggleIndicator',
        'contactless_transaction_limit_amount': 'contactlessTransactionLimitAmount',
        'contact_pos_txn_limit_toggle_indicator': 'contactPosTxnLimitToggleIndicator',
        'contact_pos_transaction_limit_amount': 'contactPosTransactionLimitAmount',
        'non_pos_txn_limit_toggle_indicator': 'nonPosTxnLimitToggleIndicator',
        'non_pos_transaction_limit_amount': 'nonPosTransactionLimitAmount'
    }

    def __init__(self, atm_transaction_limit_toggle_indicator=None, atm_transaction_limit_amount=None, contactless_txn_limit_toggle_indicator=None, contactless_transaction_limit_amount=None, contact_pos_txn_limit_toggle_indicator=None, contact_pos_transaction_limit_amount=None, non_pos_txn_limit_toggle_indicator=None, non_pos_transaction_limit_amount=None):  # noqa: E501
        """InternationalTransaction - a model defined in Swagger"""  # noqa: E501
        self._atm_transaction_limit_toggle_indicator = None
        self._atm_transaction_limit_amount = None
        self._contactless_txn_limit_toggle_indicator = None
        self._contactless_transaction_limit_amount = None
        self._contact_pos_txn_limit_toggle_indicator = None
        self._contact_pos_transaction_limit_amount = None
        self._non_pos_txn_limit_toggle_indicator = None
        self._non_pos_transaction_limit_amount = None
        self.discriminator = None
        if atm_transaction_limit_toggle_indicator is not None:
            self.atm_transaction_limit_toggle_indicator = atm_transaction_limit_toggle_indicator
        if atm_transaction_limit_amount is not None:
            self.atm_transaction_limit_amount = atm_transaction_limit_amount
        if contactless_txn_limit_toggle_indicator is not None:
            self.contactless_txn_limit_toggle_indicator = contactless_txn_limit_toggle_indicator
        if contactless_transaction_limit_amount is not None:
            self.contactless_transaction_limit_amount = contactless_transaction_limit_amount
        if contact_pos_txn_limit_toggle_indicator is not None:
            self.contact_pos_txn_limit_toggle_indicator = contact_pos_txn_limit_toggle_indicator
        if contact_pos_transaction_limit_amount is not None:
            self.contact_pos_transaction_limit_amount = contact_pos_transaction_limit_amount
        if non_pos_txn_limit_toggle_indicator is not None:
            self.non_pos_txn_limit_toggle_indicator = non_pos_txn_limit_toggle_indicator
        if non_pos_transaction_limit_amount is not None:
            self.non_pos_transaction_limit_amount = non_pos_transaction_limit_amount

    @property
    def atm_transaction_limit_toggle_indicator(self):
        """Gets the atm_transaction_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501

        InternationalSingleATMTransactionLimitToggleFlag  # noqa: E501

        :return: The atm_transaction_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._atm_transaction_limit_toggle_indicator

    @atm_transaction_limit_toggle_indicator.setter
    def atm_transaction_limit_toggle_indicator(self, atm_transaction_limit_toggle_indicator):
        """Sets the atm_transaction_limit_toggle_indicator of this InternationalTransaction.

        InternationalSingleATMTransactionLimitToggleFlag  # noqa: E501

        :param atm_transaction_limit_toggle_indicator: The atm_transaction_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501
        :type: str
        """

        self._atm_transaction_limit_toggle_indicator = atm_transaction_limit_toggle_indicator

    @property
    def atm_transaction_limit_amount(self):
        """Gets the atm_transaction_limit_amount of this InternationalTransaction.  # noqa: E501

        InternationalSingleATMTransactionLimit  # noqa: E501

        :return: The atm_transaction_limit_amount of this InternationalTransaction.  # noqa: E501
        :rtype: float
        """
        return self._atm_transaction_limit_amount

    @atm_transaction_limit_amount.setter
    def atm_transaction_limit_amount(self, atm_transaction_limit_amount):
        """Sets the atm_transaction_limit_amount of this InternationalTransaction.

        InternationalSingleATMTransactionLimit  # noqa: E501

        :param atm_transaction_limit_amount: The atm_transaction_limit_amount of this InternationalTransaction.  # noqa: E501
        :type: float
        """

        self._atm_transaction_limit_amount = atm_transaction_limit_amount

    @property
    def contactless_txn_limit_toggle_indicator(self):
        """Gets the contactless_txn_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501

        InternationalSingleContactlessTransactionLimitToggleFlag  # noqa: E501

        :return: The contactless_txn_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._contactless_txn_limit_toggle_indicator

    @contactless_txn_limit_toggle_indicator.setter
    def contactless_txn_limit_toggle_indicator(self, contactless_txn_limit_toggle_indicator):
        """Sets the contactless_txn_limit_toggle_indicator of this InternationalTransaction.

        InternationalSingleContactlessTransactionLimitToggleFlag  # noqa: E501

        :param contactless_txn_limit_toggle_indicator: The contactless_txn_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501
        :type: str
        """

        self._contactless_txn_limit_toggle_indicator = contactless_txn_limit_toggle_indicator

    @property
    def contactless_transaction_limit_amount(self):
        """Gets the contactless_transaction_limit_amount of this InternationalTransaction.  # noqa: E501

        InternationalSingleContactlessTransactionLimit  # noqa: E501

        :return: The contactless_transaction_limit_amount of this InternationalTransaction.  # noqa: E501
        :rtype: float
        """
        return self._contactless_transaction_limit_amount

    @contactless_transaction_limit_amount.setter
    def contactless_transaction_limit_amount(self, contactless_transaction_limit_amount):
        """Sets the contactless_transaction_limit_amount of this InternationalTransaction.

        InternationalSingleContactlessTransactionLimit  # noqa: E501

        :param contactless_transaction_limit_amount: The contactless_transaction_limit_amount of this InternationalTransaction.  # noqa: E501
        :type: float
        """

        self._contactless_transaction_limit_amount = contactless_transaction_limit_amount

    @property
    def contact_pos_txn_limit_toggle_indicator(self):
        """Gets the contact_pos_txn_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501

        InternationalSingleContactPOSTransactionLimitToggleFlag  # noqa: E501

        :return: The contact_pos_txn_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._contact_pos_txn_limit_toggle_indicator

    @contact_pos_txn_limit_toggle_indicator.setter
    def contact_pos_txn_limit_toggle_indicator(self, contact_pos_txn_limit_toggle_indicator):
        """Sets the contact_pos_txn_limit_toggle_indicator of this InternationalTransaction.

        InternationalSingleContactPOSTransactionLimitToggleFlag  # noqa: E501

        :param contact_pos_txn_limit_toggle_indicator: The contact_pos_txn_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501
        :type: str
        """

        self._contact_pos_txn_limit_toggle_indicator = contact_pos_txn_limit_toggle_indicator

    @property
    def contact_pos_transaction_limit_amount(self):
        """Gets the contact_pos_transaction_limit_amount of this InternationalTransaction.  # noqa: E501

        InternationalSingleContactPOSTransactionLimit  # noqa: E501

        :return: The contact_pos_transaction_limit_amount of this InternationalTransaction.  # noqa: E501
        :rtype: float
        """
        return self._contact_pos_transaction_limit_amount

    @contact_pos_transaction_limit_amount.setter
    def contact_pos_transaction_limit_amount(self, contact_pos_transaction_limit_amount):
        """Sets the contact_pos_transaction_limit_amount of this InternationalTransaction.

        InternationalSingleContactPOSTransactionLimit  # noqa: E501

        :param contact_pos_transaction_limit_amount: The contact_pos_transaction_limit_amount of this InternationalTransaction.  # noqa: E501
        :type: float
        """

        self._contact_pos_transaction_limit_amount = contact_pos_transaction_limit_amount

    @property
    def non_pos_txn_limit_toggle_indicator(self):
        """Gets the non_pos_txn_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501

        InternationalSingleNonPOSTransactionLimitToggleFlag  # noqa: E501

        :return: The non_pos_txn_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501
        :rtype: str
        """
        return self._non_pos_txn_limit_toggle_indicator

    @non_pos_txn_limit_toggle_indicator.setter
    def non_pos_txn_limit_toggle_indicator(self, non_pos_txn_limit_toggle_indicator):
        """Sets the non_pos_txn_limit_toggle_indicator of this InternationalTransaction.

        InternationalSingleNonPOSTransactionLimitToggleFlag  # noqa: E501

        :param non_pos_txn_limit_toggle_indicator: The non_pos_txn_limit_toggle_indicator of this InternationalTransaction.  # noqa: E501
        :type: str
        """

        self._non_pos_txn_limit_toggle_indicator = non_pos_txn_limit_toggle_indicator

    @property
    def non_pos_transaction_limit_amount(self):
        """Gets the non_pos_transaction_limit_amount of this InternationalTransaction.  # noqa: E501

        InternationalSingleNonPOSTransactionLimit  # noqa: E501

        :return: The non_pos_transaction_limit_amount of this InternationalTransaction.  # noqa: E501
        :rtype: float
        """
        return self._non_pos_transaction_limit_amount

    @non_pos_transaction_limit_amount.setter
    def non_pos_transaction_limit_amount(self, non_pos_transaction_limit_amount):
        """Sets the non_pos_transaction_limit_amount of this InternationalTransaction.

        InternationalSingleNonPOSTransactionLimit  # noqa: E501

        :param non_pos_transaction_limit_amount: The non_pos_transaction_limit_amount of this InternationalTransaction.  # noqa: E501
        :type: float
        """

        self._non_pos_transaction_limit_amount = non_pos_transaction_limit_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InternationalTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternationalTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
