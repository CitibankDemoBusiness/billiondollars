# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RewardPoints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reward_category_code': 'str',
        'base_point_balance': 'float',
        'earned_reward_points': 'float',
        'bonus_reward_points': 'float',
        'adjusted_reward_points': 'float',
        'redeemed_reward_points': 'float',
        'available_point_balance': 'float'
    }

    attribute_map = {
        'reward_category_code': 'rewardCategoryCode',
        'base_point_balance': 'basePointBalance',
        'earned_reward_points': 'earnedRewardPoints',
        'bonus_reward_points': 'bonusRewardPoints',
        'adjusted_reward_points': 'adjustedRewardPoints',
        'redeemed_reward_points': 'redeemedRewardPoints',
        'available_point_balance': 'availablePointBalance'
    }

    def __init__(self, reward_category_code=None, base_point_balance=None, earned_reward_points=None, bonus_reward_points=None, adjusted_reward_points=None, redeemed_reward_points=None, available_point_balance=None):  # noqa: E501
        """RewardPoints - a model defined in Swagger"""  # noqa: E501
        self._reward_category_code = None
        self._base_point_balance = None
        self._earned_reward_points = None
        self._bonus_reward_points = None
        self._adjusted_reward_points = None
        self._redeemed_reward_points = None
        self._available_point_balance = None
        self.discriminator = None
        if reward_category_code is not None:
            self.reward_category_code = reward_category_code
        if base_point_balance is not None:
            self.base_point_balance = base_point_balance
        if earned_reward_points is not None:
            self.earned_reward_points = earned_reward_points
        if bonus_reward_points is not None:
            self.bonus_reward_points = bonus_reward_points
        if adjusted_reward_points is not None:
            self.adjusted_reward_points = adjusted_reward_points
        if redeemed_reward_points is not None:
            self.redeemed_reward_points = redeemed_reward_points
        if available_point_balance is not None:
            self.available_point_balance = available_point_balance

    @property
    def reward_category_code(self):
        """Gets the reward_category_code of this RewardPoints.  # noqa: E501

        Reward category code. This is a reference data field. Please use /v1/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.  # noqa: E501

        :return: The reward_category_code of this RewardPoints.  # noqa: E501
        :rtype: str
        """
        return self._reward_category_code

    @reward_category_code.setter
    def reward_category_code(self, reward_category_code):
        """Sets the reward_category_code of this RewardPoints.

        Reward category code. This is a reference data field. Please use /v1/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.  # noqa: E501

        :param reward_category_code: The reward_category_code of this RewardPoints.  # noqa: E501
        :type: str
        """

        self._reward_category_code = reward_category_code

    @property
    def base_point_balance(self):
        """Gets the base_point_balance of this RewardPoints.  # noqa: E501

        Points or Miles accumulated by the user at the start of the statement period  # noqa: E501

        :return: The base_point_balance of this RewardPoints.  # noqa: E501
        :rtype: float
        """
        return self._base_point_balance

    @base_point_balance.setter
    def base_point_balance(self, base_point_balance):
        """Sets the base_point_balance of this RewardPoints.

        Points or Miles accumulated by the user at the start of the statement period  # noqa: E501

        :param base_point_balance: The base_point_balance of this RewardPoints.  # noqa: E501
        :type: float
        """

        self._base_point_balance = base_point_balance

    @property
    def earned_reward_points(self):
        """Gets the earned_reward_points of this RewardPoints.  # noqa: E501

        Points or Miles earned by the user for the statement period.  # noqa: E501

        :return: The earned_reward_points of this RewardPoints.  # noqa: E501
        :rtype: float
        """
        return self._earned_reward_points

    @earned_reward_points.setter
    def earned_reward_points(self, earned_reward_points):
        """Sets the earned_reward_points of this RewardPoints.

        Points or Miles earned by the user for the statement period.  # noqa: E501

        :param earned_reward_points: The earned_reward_points of this RewardPoints.  # noqa: E501
        :type: float
        """

        self._earned_reward_points = earned_reward_points

    @property
    def bonus_reward_points(self):
        """Gets the bonus_reward_points of this RewardPoints.  # noqa: E501

        Bonus Points or Miles  earned by a user for the statement period. Bonus programs operate under the umbrella of a specific reward program since multiple bonus programs can be defined for one reward program.  # noqa: E501

        :return: The bonus_reward_points of this RewardPoints.  # noqa: E501
        :rtype: float
        """
        return self._bonus_reward_points

    @bonus_reward_points.setter
    def bonus_reward_points(self, bonus_reward_points):
        """Sets the bonus_reward_points of this RewardPoints.

        Bonus Points or Miles  earned by a user for the statement period. Bonus programs operate under the umbrella of a specific reward program since multiple bonus programs can be defined for one reward program.  # noqa: E501

        :param bonus_reward_points: The bonus_reward_points of this RewardPoints.  # noqa: E501
        :type: float
        """

        self._bonus_reward_points = bonus_reward_points

    @property
    def adjusted_reward_points(self):
        """Gets the adjusted_reward_points of this RewardPoints.  # noqa: E501

        Number of rewards points or miles adjusted for the user in the statement period. It will contain the value of adjusted points as a result of incorrect addition/redemption.  # noqa: E501

        :return: The adjusted_reward_points of this RewardPoints.  # noqa: E501
        :rtype: float
        """
        return self._adjusted_reward_points

    @adjusted_reward_points.setter
    def adjusted_reward_points(self, adjusted_reward_points):
        """Sets the adjusted_reward_points of this RewardPoints.

        Number of rewards points or miles adjusted for the user in the statement period. It will contain the value of adjusted points as a result of incorrect addition/redemption.  # noqa: E501

        :param adjusted_reward_points: The adjusted_reward_points of this RewardPoints.  # noqa: E501
        :type: float
        """

        self._adjusted_reward_points = adjusted_reward_points

    @property
    def redeemed_reward_points(self):
        """Gets the redeemed_reward_points of this RewardPoints.  # noqa: E501

        Bonus Points or Miles  redeemed  by a user for the statement period.  # noqa: E501

        :return: The redeemed_reward_points of this RewardPoints.  # noqa: E501
        :rtype: float
        """
        return self._redeemed_reward_points

    @redeemed_reward_points.setter
    def redeemed_reward_points(self, redeemed_reward_points):
        """Sets the redeemed_reward_points of this RewardPoints.

        Bonus Points or Miles  redeemed  by a user for the statement period.  # noqa: E501

        :param redeemed_reward_points: The redeemed_reward_points of this RewardPoints.  # noqa: E501
        :type: float
        """

        self._redeemed_reward_points = redeemed_reward_points

    @property
    def available_point_balance(self):
        """Gets the available_point_balance of this RewardPoints.  # noqa: E501

        This field indicate the reward points or miles currently available to the user.  # noqa: E501

        :return: The available_point_balance of this RewardPoints.  # noqa: E501
        :rtype: float
        """
        return self._available_point_balance

    @available_point_balance.setter
    def available_point_balance(self, available_point_balance):
        """Sets the available_point_balance of this RewardPoints.

        This field indicate the reward points or miles currently available to the user.  # noqa: E501

        :param available_point_balance: The available_point_balance of this RewardPoints.  # noqa: E501
        :type: float
        """

        self._available_point_balance = available_point_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RewardPoints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RewardPoints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
