# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatementSummaryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_id': 'str',
        'currency_code': 'str',
        'statement_list': 'list[StatementList]',
        'next_start_index': 'str'
    }

    attribute_map = {
        'card_id': 'cardId',
        'currency_code': 'currencyCode',
        'statement_list': 'statementList',
        'next_start_index': 'nextStartIndex'
    }

    def __init__(self, card_id=None, currency_code=None, statement_list=None, next_start_index=None):  # noqa: E501
        """StatementSummaryRequest - a model defined in Swagger"""  # noqa: E501
        self._card_id = None
        self._currency_code = None
        self._statement_list = None
        self._next_start_index = None
        self.discriminator = None
        if card_id is not None:
            self.card_id = card_id
        if currency_code is not None:
            self.currency_code = currency_code
        if statement_list is not None:
            self.statement_list = statement_list
        if next_start_index is not None:
            self.next_start_index = next_start_index

    @property
    def card_id(self):
        """Gets the card_id of this StatementSummaryRequest.  # noqa: E501

        The card id  in encrypted format  # noqa: E501

        :return: The card_id of this StatementSummaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this StatementSummaryRequest.

        The card id  in encrypted format  # noqa: E501

        :param card_id: The card_id of this StatementSummaryRequest.  # noqa: E501
        :type: str
        """

        self._card_id = card_id

    @property
    def currency_code(self):
        """Gets the currency_code of this StatementSummaryRequest.  # noqa: E501

        The currency code of the destination account in ISO 4217 format  # noqa: E501

        :return: The currency_code of this StatementSummaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this StatementSummaryRequest.

        The currency code of the destination account in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this StatementSummaryRequest.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def statement_list(self):
        """Gets the statement_list of this StatementSummaryRequest.  # noqa: E501


        :return: The statement_list of this StatementSummaryRequest.  # noqa: E501
        :rtype: list[StatementList]
        """
        return self._statement_list

    @statement_list.setter
    def statement_list(self, statement_list):
        """Sets the statement_list of this StatementSummaryRequest.


        :param statement_list: The statement_list of this StatementSummaryRequest.  # noqa: E501
        :type: list[StatementList]
        """

        self._statement_list = statement_list

    @property
    def next_start_index(self):
        """Gets the next_start_index of this StatementSummaryRequest.  # noqa: E501

        The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.  # noqa: E501

        :return: The next_start_index of this StatementSummaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_start_index

    @next_start_index.setter
    def next_start_index(self, next_start_index):
        """Sets the next_start_index of this StatementSummaryRequest.

        The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.  # noqa: E501

        :param next_start_index: The next_start_index of this StatementSummaryRequest.  # noqa: E501
        :type: str
        """

        self._next_start_index = next_start_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementSummaryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementSummaryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
