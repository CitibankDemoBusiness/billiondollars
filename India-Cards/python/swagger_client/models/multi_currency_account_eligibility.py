# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MultiCurrencyAccountEligibility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_card_number': 'str',
        'card_id': 'str',
        'atm_card_flag': 'bool',
        'card_enrollment_status': 'str',
        'eligible_for_currency_addition': 'str',
        'relationship_id': 'str',
        'relationship_id_type': 'str',
        'account_details': 'list[AccountDtls]',
        'currency_details': 'list[CurrencyDetails]'
    }

    attribute_map = {
        'display_card_number': 'displayCardNumber',
        'card_id': 'cardId',
        'atm_card_flag': 'atmCardFlag',
        'card_enrollment_status': 'cardEnrollmentStatus',
        'eligible_for_currency_addition': 'eligibleForCurrencyAddition',
        'relationship_id': 'relationshipId',
        'relationship_id_type': 'relationshipIdType',
        'account_details': 'accountDetails',
        'currency_details': 'currencyDetails'
    }

    def __init__(self, display_card_number=None, card_id=None, atm_card_flag=None, card_enrollment_status=None, eligible_for_currency_addition=None, relationship_id=None, relationship_id_type=None, account_details=None, currency_details=None):  # noqa: E501
        """MultiCurrencyAccountEligibility - a model defined in Swagger"""  # noqa: E501
        self._display_card_number = None
        self._card_id = None
        self._atm_card_flag = None
        self._card_enrollment_status = None
        self._eligible_for_currency_addition = None
        self._relationship_id = None
        self._relationship_id_type = None
        self._account_details = None
        self._currency_details = None
        self.discriminator = None
        self.display_card_number = display_card_number
        self.card_id = card_id
        if atm_card_flag is not None:
            self.atm_card_flag = atm_card_flag
        if card_enrollment_status is not None:
            self.card_enrollment_status = card_enrollment_status
        if eligible_for_currency_addition is not None:
            self.eligible_for_currency_addition = eligible_for_currency_addition
        if relationship_id is not None:
            self.relationship_id = relationship_id
        if relationship_id_type is not None:
            self.relationship_id_type = relationship_id_type
        if account_details is not None:
            self.account_details = account_details
        if currency_details is not None:
            self.currency_details = currency_details

    @property
    def display_card_number(self):
        """Gets the display_card_number of this MultiCurrencyAccountEligibility.  # noqa: E501

        A masked card number that can be displayed to the customer.  # noqa: E501

        :return: The display_card_number of this MultiCurrencyAccountEligibility.  # noqa: E501
        :rtype: str
        """
        return self._display_card_number

    @display_card_number.setter
    def display_card_number(self, display_card_number):
        """Sets the display_card_number of this MultiCurrencyAccountEligibility.

        A masked card number that can be displayed to the customer.  # noqa: E501

        :param display_card_number: The display_card_number of this MultiCurrencyAccountEligibility.  # noqa: E501
        :type: str
        """
        if display_card_number is None:
            raise ValueError("Invalid value for `display_card_number`, must not be `None`")  # noqa: E501

        self._display_card_number = display_card_number

    @property
    def card_id(self):
        """Gets the card_id of this MultiCurrencyAccountEligibility.  # noqa: E501

        The customer card identifier in encrypted format  # noqa: E501

        :return: The card_id of this MultiCurrencyAccountEligibility.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this MultiCurrencyAccountEligibility.

        The customer card identifier in encrypted format  # noqa: E501

        :param card_id: The card_id of this MultiCurrencyAccountEligibility.  # noqa: E501
        :type: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")  # noqa: E501

        self._card_id = card_id

    @property
    def atm_card_flag(self):
        """Gets the atm_card_flag of this MultiCurrencyAccountEligibility.  # noqa: E501

        Flag to identify if the cardNumbre in response is ATM card.  # noqa: E501

        :return: The atm_card_flag of this MultiCurrencyAccountEligibility.  # noqa: E501
        :rtype: bool
        """
        return self._atm_card_flag

    @atm_card_flag.setter
    def atm_card_flag(self, atm_card_flag):
        """Sets the atm_card_flag of this MultiCurrencyAccountEligibility.

        Flag to identify if the cardNumbre in response is ATM card.  # noqa: E501

        :param atm_card_flag: The atm_card_flag of this MultiCurrencyAccountEligibility.  # noqa: E501
        :type: bool
        """

        self._atm_card_flag = atm_card_flag

    @property
    def card_enrollment_status(self):
        """Gets the card_enrollment_status of this MultiCurrencyAccountEligibility.  # noqa: E501

        This field is to indicate if the  card is enrolled for Multi Currency Account or not.Please use /v1/apac/utilities/referenceData/{cardEnrollmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The card_enrollment_status of this MultiCurrencyAccountEligibility.  # noqa: E501
        :rtype: str
        """
        return self._card_enrollment_status

    @card_enrollment_status.setter
    def card_enrollment_status(self, card_enrollment_status):
        """Sets the card_enrollment_status of this MultiCurrencyAccountEligibility.

        This field is to indicate if the  card is enrolled for Multi Currency Account or not.Please use /v1/apac/utilities/referenceData/{cardEnrollmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param card_enrollment_status: The card_enrollment_status of this MultiCurrencyAccountEligibility.  # noqa: E501
        :type: str
        """

        self._card_enrollment_status = card_enrollment_status

    @property
    def eligible_for_currency_addition(self):
        """Gets the eligible_for_currency_addition of this MultiCurrencyAccountEligibility.  # noqa: E501

        Eligible to add new currency.This is a reference data field. Please use /utilities/referenceData/{ eligibleForCurrencyAddition} resource to get valid value of this field with description.  # noqa: E501

        :return: The eligible_for_currency_addition of this MultiCurrencyAccountEligibility.  # noqa: E501
        :rtype: str
        """
        return self._eligible_for_currency_addition

    @eligible_for_currency_addition.setter
    def eligible_for_currency_addition(self, eligible_for_currency_addition):
        """Sets the eligible_for_currency_addition of this MultiCurrencyAccountEligibility.

        Eligible to add new currency.This is a reference data field. Please use /utilities/referenceData/{ eligibleForCurrencyAddition} resource to get valid value of this field with description.  # noqa: E501

        :param eligible_for_currency_addition: The eligible_for_currency_addition of this MultiCurrencyAccountEligibility.  # noqa: E501
        :type: str
        """

        self._eligible_for_currency_addition = eligible_for_currency_addition

    @property
    def relationship_id(self):
        """Gets the relationship_id of this MultiCurrencyAccountEligibility.  # noqa: E501

        The customer relationship identifier in encrypted format  # noqa: E501

        :return: The relationship_id of this MultiCurrencyAccountEligibility.  # noqa: E501
        :rtype: str
        """
        return self._relationship_id

    @relationship_id.setter
    def relationship_id(self, relationship_id):
        """Sets the relationship_id of this MultiCurrencyAccountEligibility.

        The customer relationship identifier in encrypted format  # noqa: E501

        :param relationship_id: The relationship_id of this MultiCurrencyAccountEligibility.  # noqa: E501
        :type: str
        """

        self._relationship_id = relationship_id

    @property
    def relationship_id_type(self):
        """Gets the relationship_id_type of this MultiCurrencyAccountEligibility.  # noqa: E501

        The type of customer relationship  # noqa: E501

        :return: The relationship_id_type of this MultiCurrencyAccountEligibility.  # noqa: E501
        :rtype: str
        """
        return self._relationship_id_type

    @relationship_id_type.setter
    def relationship_id_type(self, relationship_id_type):
        """Sets the relationship_id_type of this MultiCurrencyAccountEligibility.

        The type of customer relationship  # noqa: E501

        :param relationship_id_type: The relationship_id_type of this MultiCurrencyAccountEligibility.  # noqa: E501
        :type: str
        """

        self._relationship_id_type = relationship_id_type

    @property
    def account_details(self):
        """Gets the account_details of this MultiCurrencyAccountEligibility.  # noqa: E501


        :return: The account_details of this MultiCurrencyAccountEligibility.  # noqa: E501
        :rtype: list[AccountDtls]
        """
        return self._account_details

    @account_details.setter
    def account_details(self, account_details):
        """Sets the account_details of this MultiCurrencyAccountEligibility.


        :param account_details: The account_details of this MultiCurrencyAccountEligibility.  # noqa: E501
        :type: list[AccountDtls]
        """

        self._account_details = account_details

    @property
    def currency_details(self):
        """Gets the currency_details of this MultiCurrencyAccountEligibility.  # noqa: E501


        :return: The currency_details of this MultiCurrencyAccountEligibility.  # noqa: E501
        :rtype: list[CurrencyDetails]
        """
        return self._currency_details

    @currency_details.setter
    def currency_details(self, currency_details):
        """Sets the currency_details of this MultiCurrencyAccountEligibility.


        :param currency_details: The currency_details of this MultiCurrencyAccountEligibility.  # noqa: E501
        :type: list[CurrencyDetails]
        """

        self._currency_details = currency_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultiCurrencyAccountEligibility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiCurrencyAccountEligibility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
