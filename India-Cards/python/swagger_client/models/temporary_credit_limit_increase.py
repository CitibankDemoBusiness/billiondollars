# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TemporaryCreditLimitIncrease(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_id': 'str',
        'credit_limit_increase_end_date': 'date',
        'reason_code': 'str',
        'credit_limit_increase_start_date': 'date',
        'requested_credit_limit_amount': 'float'
    }

    attribute_map = {
        'card_id': 'cardId',
        'credit_limit_increase_end_date': 'creditLimitIncreaseEndDate',
        'reason_code': 'reasonCode',
        'credit_limit_increase_start_date': 'creditLimitIncreaseStartDate',
        'requested_credit_limit_amount': 'requestedCreditLimitAmount'
    }

    def __init__(self, card_id=None, credit_limit_increase_end_date=None, reason_code=None, credit_limit_increase_start_date=None, requested_credit_limit_amount=None):  # noqa: E501
        """TemporaryCreditLimitIncrease - a model defined in Swagger"""  # noqa: E501
        self._card_id = None
        self._credit_limit_increase_end_date = None
        self._reason_code = None
        self._credit_limit_increase_start_date = None
        self._requested_credit_limit_amount = None
        self.discriminator = None
        self.card_id = card_id
        self.credit_limit_increase_end_date = credit_limit_increase_end_date
        self.reason_code = reason_code
        self.credit_limit_increase_start_date = credit_limit_increase_start_date
        self.requested_credit_limit_amount = requested_credit_limit_amount

    @property
    def card_id(self):
        """Gets the card_id of this TemporaryCreditLimitIncrease.  # noqa: E501

        The card identifier in encrypted format.  # noqa: E501

        :return: The card_id of this TemporaryCreditLimitIncrease.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this TemporaryCreditLimitIncrease.

        The card identifier in encrypted format.  # noqa: E501

        :param card_id: The card_id of this TemporaryCreditLimitIncrease.  # noqa: E501
        :type: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")  # noqa: E501

        self._card_id = card_id

    @property
    def credit_limit_increase_end_date(self):
        """Gets the credit_limit_increase_end_date of this TemporaryCreditLimitIncrease.  # noqa: E501

        Credit limit increase end  date in ISO 8601 date format YYYY-MM-DD.  # noqa: E501

        :return: The credit_limit_increase_end_date of this TemporaryCreditLimitIncrease.  # noqa: E501
        :rtype: date
        """
        return self._credit_limit_increase_end_date

    @credit_limit_increase_end_date.setter
    def credit_limit_increase_end_date(self, credit_limit_increase_end_date):
        """Sets the credit_limit_increase_end_date of this TemporaryCreditLimitIncrease.

        Credit limit increase end  date in ISO 8601 date format YYYY-MM-DD.  # noqa: E501

        :param credit_limit_increase_end_date: The credit_limit_increase_end_date of this TemporaryCreditLimitIncrease.  # noqa: E501
        :type: date
        """
        if credit_limit_increase_end_date is None:
            raise ValueError("Invalid value for `credit_limit_increase_end_date`, must not be `None`")  # noqa: E501

        self._credit_limit_increase_end_date = credit_limit_increase_end_date

    @property
    def reason_code(self):
        """Gets the reason_code of this TemporaryCreditLimitIncrease.  # noqa: E501

        Reason for the credit limit increase.This is a reference data field. Please use /v1/apac/utilities/referenceData/{reasonCode} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The reason_code of this TemporaryCreditLimitIncrease.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this TemporaryCreditLimitIncrease.

        Reason for the credit limit increase.This is a reference data field. Please use /v1/apac/utilities/referenceData/{reasonCode} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param reason_code: The reason_code of this TemporaryCreditLimitIncrease.  # noqa: E501
        :type: str
        """
        if reason_code is None:
            raise ValueError("Invalid value for `reason_code`, must not be `None`")  # noqa: E501

        self._reason_code = reason_code

    @property
    def credit_limit_increase_start_date(self):
        """Gets the credit_limit_increase_start_date of this TemporaryCreditLimitIncrease.  # noqa: E501

        Credit limit increase start date in ISO 8601 date format YYYY-MM-DD.  # noqa: E501

        :return: The credit_limit_increase_start_date of this TemporaryCreditLimitIncrease.  # noqa: E501
        :rtype: date
        """
        return self._credit_limit_increase_start_date

    @credit_limit_increase_start_date.setter
    def credit_limit_increase_start_date(self, credit_limit_increase_start_date):
        """Sets the credit_limit_increase_start_date of this TemporaryCreditLimitIncrease.

        Credit limit increase start date in ISO 8601 date format YYYY-MM-DD.  # noqa: E501

        :param credit_limit_increase_start_date: The credit_limit_increase_start_date of this TemporaryCreditLimitIncrease.  # noqa: E501
        :type: date
        """
        if credit_limit_increase_start_date is None:
            raise ValueError("Invalid value for `credit_limit_increase_start_date`, must not be `None`")  # noqa: E501

        self._credit_limit_increase_start_date = credit_limit_increase_start_date

    @property
    def requested_credit_limit_amount(self):
        """Gets the requested_credit_limit_amount of this TemporaryCreditLimitIncrease.  # noqa: E501

        Customer�€�s desired credit limit. This is the combined limit shared with all the existing credit cards of the customer  # noqa: E501

        :return: The requested_credit_limit_amount of this TemporaryCreditLimitIncrease.  # noqa: E501
        :rtype: float
        """
        return self._requested_credit_limit_amount

    @requested_credit_limit_amount.setter
    def requested_credit_limit_amount(self, requested_credit_limit_amount):
        """Sets the requested_credit_limit_amount of this TemporaryCreditLimitIncrease.

        Customer�€�s desired credit limit. This is the combined limit shared with all the existing credit cards of the customer  # noqa: E501

        :param requested_credit_limit_amount: The requested_credit_limit_amount of this TemporaryCreditLimitIncrease.  # noqa: E501
        :type: float
        """
        if requested_credit_limit_amount is None:
            raise ValueError("Invalid value for `requested_credit_limit_amount`, must not be `None`")  # noqa: E501

        self._requested_credit_limit_amount = requested_credit_limit_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemporaryCreditLimitIncrease, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemporaryCreditLimitIncrease):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
