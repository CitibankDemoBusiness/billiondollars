# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'vop_transaction_id': 'str',
        'action_type': 'str',
        'distributor_id': 'str',
        'card_id': 'str',
        'user_id': 'str',
        'credit_status': 'str',
        'request_date_time': 'str',
        'offer_id': 'int',
        'settlement_currency': 'str',
        'reward_settlement_currency': 'float',
        'billing_currency': 'str',
        'reward_billing_currency': 'float',
        'merchant_name': 'str',
        'transaction_date': 'str',
        'transaction_billing_amount': 'float',
        'transaction_settlement_amount': 'float',
        'remarks': 'str'
    }

    attribute_map = {
        'request_id': 'requestId',
        'vop_transaction_id': 'vopTransactionId',
        'action_type': 'actionType',
        'distributor_id': 'distributorId',
        'card_id': 'cardId',
        'user_id': 'userId',
        'credit_status': 'creditStatus',
        'request_date_time': 'requestDateTime',
        'offer_id': 'offerId',
        'settlement_currency': 'settlementCurrency',
        'reward_settlement_currency': 'rewardSettlementCurrency',
        'billing_currency': 'billingCurrency',
        'reward_billing_currency': 'rewardBillingCurrency',
        'merchant_name': 'merchantName',
        'transaction_date': 'transactionDate',
        'transaction_billing_amount': 'transactionBillingAmount',
        'transaction_settlement_amount': 'transactionSettlementAmount',
        'remarks': 'remarks'
    }

    def __init__(self, request_id=None, vop_transaction_id=None, action_type=None, distributor_id=None, card_id=None, user_id=None, credit_status=None, request_date_time=None, offer_id=None, settlement_currency=None, reward_settlement_currency=None, billing_currency=None, reward_billing_currency=None, merchant_name=None, transaction_date=None, transaction_billing_amount=None, transaction_settlement_amount=None, remarks=None):  # noqa: E501
        """NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._vop_transaction_id = None
        self._action_type = None
        self._distributor_id = None
        self._card_id = None
        self._user_id = None
        self._credit_status = None
        self._request_date_time = None
        self._offer_id = None
        self._settlement_currency = None
        self._reward_settlement_currency = None
        self._billing_currency = None
        self._reward_billing_currency = None
        self._merchant_name = None
        self._transaction_date = None
        self._transaction_billing_amount = None
        self._transaction_settlement_amount = None
        self._remarks = None
        self.discriminator = None
        self.request_id = request_id
        self.vop_transaction_id = vop_transaction_id
        self.action_type = action_type
        self.distributor_id = distributor_id
        self.card_id = card_id
        self.user_id = user_id
        self.credit_status = credit_status
        self.request_date_time = request_date_time
        self.offer_id = offer_id
        self.settlement_currency = settlement_currency
        self.reward_settlement_currency = reward_settlement_currency
        self.billing_currency = billing_currency
        self.reward_billing_currency = reward_billing_currency
        self.merchant_name = merchant_name
        self.transaction_date = transaction_date
        self.transaction_billing_amount = transaction_billing_amount
        self.transaction_settlement_amount = transaction_settlement_amount
        if remarks is not None:
            self.remarks = remarks

    @property
    def request_id(self):
        """Gets the request_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field provides the unique request ID generated from the VOX platform. Will be used for tracking and audit purposes  # noqa: E501

        :return: The request_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field provides the unique request ID generated from the VOX platform. Will be used for tracking and audit purposes  # noqa: E501

        :param request_id: The request_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def vop_transaction_id(self):
        """Gets the vop_transaction_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the VOP transaction ID of the original transaction, that triggered the reward.  # noqa: E501

        :return: The vop_transaction_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._vop_transaction_id

    @vop_transaction_id.setter
    def vop_transaction_id(self, vop_transaction_id):
        """Sets the vop_transaction_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the VOP transaction ID of the original transaction, that triggered the reward.  # noqa: E501

        :param vop_transaction_id: The vop_transaction_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if vop_transaction_id is None:
            raise ValueError("Invalid value for `vop_transaction_id`, must not be `None`")  # noqa: E501

        self._vop_transaction_id = vop_transaction_id

    @property
    def action_type(self):
        """Gets the action_type of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the action to be performed for the request.Valid Value is Notify  # noqa: E501

        :return: The action_type of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the action to be performed for the request.Valid Value is Notify  # noqa: E501

        :param action_type: The action_type of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501

        self._action_type = action_type

    @property
    def distributor_id(self):
        """Gets the distributor_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the Distributor ID. Important when an aggregator (who is serving for more than one distributor) is building the API end point.  # noqa: E501

        :return: The distributor_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._distributor_id

    @distributor_id.setter
    def distributor_id(self, distributor_id):
        """Sets the distributor_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the Distributor ID. Important when an aggregator (who is serving for more than one distributor) is building the API end point.  # noqa: E501

        :param distributor_id: The distributor_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if distributor_id is None:
            raise ValueError("Invalid value for `distributor_id`, must not be `None`")  # noqa: E501

        self._distributor_id = distributor_id

    @property
    def card_id(self):
        """Gets the card_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field provides the card id generated during cardholder enrolment at VOX.  # noqa: E501

        :return: The card_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field provides the card id generated during cardholder enrolment at VOX.  # noqa: E501

        :param card_id: The card_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")  # noqa: E501

        self._card_id = card_id

    @property
    def user_id(self):
        """Gets the user_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field provides the external user id generated during cardholder enrolment at VOX.  # noqa: E501

        :return: The user_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field provides the external user id generated during cardholder enrolment at VOX.  # noqa: E501

        :param user_id: The user_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def credit_status(self):
        """Gets the credit_status of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the reward credit status.Valid Values are Successful, Eligible, Failed  # noqa: E501

        :return: The credit_status of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._credit_status

    @credit_status.setter
    def credit_status(self, credit_status):
        """Sets the credit_status of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the reward credit status.Valid Values are Successful, Eligible, Failed  # noqa: E501

        :param credit_status: The credit_status of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if credit_status is None:
            raise ValueError("Invalid value for `credit_status`, must not be `None`")  # noqa: E501

        self._credit_status = credit_status

    @property
    def request_date_time(self):
        """Gets the request_date_time of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the date and time which the reward request is initiated in the format YYYY-MM-DD HH:MM:SS  # noqa: E501

        :return: The request_date_time of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._request_date_time

    @request_date_time.setter
    def request_date_time(self, request_date_time):
        """Sets the request_date_time of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the date and time which the reward request is initiated in the format YYYY-MM-DD HH:MM:SS  # noqa: E501

        :param request_date_time: The request_date_time of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if request_date_time is None:
            raise ValueError("Invalid value for `request_date_time`, must not be `None`")  # noqa: E501

        self._request_date_time = request_date_time

    @property
    def offer_id(self):
        """Gets the offer_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This will be the VOX qualified offer ID, which the reward is given, Will be used for tracking and audit purposes.  # noqa: E501

        :return: The offer_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: int
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This will be the VOX qualified offer ID, which the reward is given, Will be used for tracking and audit purposes.  # noqa: E501

        :param offer_id: The offer_id of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: int
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")  # noqa: E501

        self._offer_id = offer_id

    @property
    def settlement_currency(self):
        """Gets the settlement_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the reward currency of the original offer  # noqa: E501

        :return: The settlement_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._settlement_currency

    @settlement_currency.setter
    def settlement_currency(self, settlement_currency):
        """Sets the settlement_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the reward currency of the original offer  # noqa: E501

        :param settlement_currency: The settlement_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if settlement_currency is None:
            raise ValueError("Invalid value for `settlement_currency`, must not be `None`")  # noqa: E501

        self._settlement_currency = settlement_currency

    @property
    def reward_settlement_currency(self):
        """Gets the reward_settlement_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the cashback reward value in Settlement Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00  # noqa: E501

        :return: The reward_settlement_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: float
        """
        return self._reward_settlement_currency

    @reward_settlement_currency.setter
    def reward_settlement_currency(self, reward_settlement_currency):
        """Sets the reward_settlement_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the cashback reward value in Settlement Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00  # noqa: E501

        :param reward_settlement_currency: The reward_settlement_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: float
        """
        if reward_settlement_currency is None:
            raise ValueError("Invalid value for `reward_settlement_currency`, must not be `None`")  # noqa: E501

        self._reward_settlement_currency = reward_settlement_currency

    @property
    def billing_currency(self):
        """Gets the billing_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the customer purchase currency derived from the VOP transaction.  # noqa: E501

        :return: The billing_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._billing_currency

    @billing_currency.setter
    def billing_currency(self, billing_currency):
        """Sets the billing_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the customer purchase currency derived from the VOP transaction.  # noqa: E501

        :param billing_currency: The billing_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if billing_currency is None:
            raise ValueError("Invalid value for `billing_currency`, must not be `None`")  # noqa: E501

        self._billing_currency = billing_currency

    @property
    def reward_billing_currency(self):
        """Gets the reward_billing_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the cashback reward value in Settlement Billing Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00  # noqa: E501

        :return: The reward_billing_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: float
        """
        return self._reward_billing_currency

    @reward_billing_currency.setter
    def reward_billing_currency(self, reward_billing_currency):
        """Sets the reward_billing_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the cashback reward value in Settlement Billing Currency.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00  # noqa: E501

        :param reward_billing_currency: The reward_billing_currency of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: float
        """
        if reward_billing_currency is None:
            raise ValueError("Invalid value for `reward_billing_currency`, must not be `None`")  # noqa: E501

        self._reward_billing_currency = reward_billing_currency

    @property
    def merchant_name(self):
        """Gets the merchant_name of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field provides the merchant name  # noqa: E501

        :return: The merchant_name of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field provides the merchant name  # noqa: E501

        :param merchant_name: The merchant_name of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if merchant_name is None:
            raise ValueError("Invalid value for `merchant_name`, must not be `None`")  # noqa: E501

        self._merchant_name = merchant_name

    @property
    def transaction_date(self):
        """Gets the transaction_date of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies the transaction date retrieved from the VOP Transaction in the format YYYY-MM-DD HH:MM:SS  # noqa: E501

        :return: The transaction_date of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies the transaction date retrieved from the VOP Transaction in the format YYYY-MM-DD HH:MM:SS  # noqa: E501

        :param transaction_date: The transaction_date of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")  # noqa: E501

        self._transaction_date = transaction_date

    @property
    def transaction_billing_amount(self):
        """Gets the transaction_billing_amount of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies transaction amount in billing currency as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00  # noqa: E501

        :return: The transaction_billing_amount of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: float
        """
        return self._transaction_billing_amount

    @transaction_billing_amount.setter
    def transaction_billing_amount(self, transaction_billing_amount):
        """Sets the transaction_billing_amount of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies transaction amount in billing currency as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00  # noqa: E501

        :param transaction_billing_amount: The transaction_billing_amount of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: float
        """
        if transaction_billing_amount is None:
            raise ValueError("Invalid value for `transaction_billing_amount`, must not be `None`")  # noqa: E501

        self._transaction_billing_amount = transaction_billing_amount

    @property
    def transaction_settlement_amount(self):
        """Gets the transaction_settlement_amount of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field specifies transaction amount in settlement currency  as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00  # noqa: E501

        :return: The transaction_settlement_amount of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: float
        """
        return self._transaction_settlement_amount

    @transaction_settlement_amount.setter
    def transaction_settlement_amount(self, transaction_settlement_amount):
        """Sets the transaction_settlement_amount of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field specifies transaction amount in settlement currency  as received from the VOP transaction.If the amount is in round figure for an example 100 then the amount should be passed as per format 100.00  # noqa: E501

        :param transaction_settlement_amount: The transaction_settlement_amount of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: float
        """
        if transaction_settlement_amount is None:
            raise ValueError("Invalid value for `transaction_settlement_amount`, must not be `None`")  # noqa: E501

        self._transaction_settlement_amount = transaction_settlement_amount

    @property
    def remarks(self):
        """Gets the remarks of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501

        This field is used to pass additional information required by the partner for their records. This can pass an empty value as well.  # noqa: E501

        :return: The remarks of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.

        This field is used to pass additional information required by the partner for their records. This can pass an empty value as well.  # noqa: E501

        :param remarks: The remarks of this NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotifyCreditChargeCardFulfillmentArrangementAuthorisedTransactionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
