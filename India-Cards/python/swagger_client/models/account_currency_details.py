# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountCurrencyDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_account_number': 'str',
        'account_id': 'str',
        'new_account_opened_flag': 'bool',
        'global_wallet_account_type': 'str',
        'enrollment_status_flag': 'bool'
    }

    attribute_map = {
        'display_account_number': 'displayAccountNumber',
        'account_id': 'accountId',
        'new_account_opened_flag': 'newAccountOpenedFlag',
        'global_wallet_account_type': 'globalWalletAccountType',
        'enrollment_status_flag': 'enrollmentStatusFlag'
    }

    def __init__(self, display_account_number=None, account_id=None, new_account_opened_flag=None, global_wallet_account_type=None, enrollment_status_flag=None):  # noqa: E501
        """AccountCurrencyDetails - a model defined in Swagger"""  # noqa: E501
        self._display_account_number = None
        self._account_id = None
        self._new_account_opened_flag = None
        self._global_wallet_account_type = None
        self._enrollment_status_flag = None
        self.discriminator = None
        if display_account_number is not None:
            self.display_account_number = display_account_number
        if account_id is not None:
            self.account_id = account_id
        self.new_account_opened_flag = new_account_opened_flag
        if global_wallet_account_type is not None:
            self.global_wallet_account_type = global_wallet_account_type
        if enrollment_status_flag is not None:
            self.enrollment_status_flag = enrollment_status_flag

    @property
    def display_account_number(self):
        """Gets the display_account_number of this AccountCurrencyDetails.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this AccountCurrencyDetails.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this AccountCurrencyDetails.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this AccountCurrencyDetails.  # noqa: E501
        :type: str
        """

        self._display_account_number = display_account_number

    @property
    def account_id(self):
        """Gets the account_id of this AccountCurrencyDetails.  # noqa: E501

        The customer account identifier in encrypted format  # noqa: E501

        :return: The account_id of this AccountCurrencyDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountCurrencyDetails.

        The customer account identifier in encrypted format  # noqa: E501

        :param account_id: The account_id of this AccountCurrencyDetails.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def new_account_opened_flag(self):
        """Gets the new_account_opened_flag of this AccountCurrencyDetails.  # noqa: E501

        This field is to indicate if the  account is newly opened or not.  # noqa: E501

        :return: The new_account_opened_flag of this AccountCurrencyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._new_account_opened_flag

    @new_account_opened_flag.setter
    def new_account_opened_flag(self, new_account_opened_flag):
        """Sets the new_account_opened_flag of this AccountCurrencyDetails.

        This field is to indicate if the  account is newly opened or not.  # noqa: E501

        :param new_account_opened_flag: The new_account_opened_flag of this AccountCurrencyDetails.  # noqa: E501
        :type: bool
        """
        if new_account_opened_flag is None:
            raise ValueError("Invalid value for `new_account_opened_flag`, must not be `None`")  # noqa: E501

        self._new_account_opened_flag = new_account_opened_flag

    @property
    def global_wallet_account_type(self):
        """Gets the global_wallet_account_type of this AccountCurrencyDetails.  # noqa: E501

        Type of account.Type of account.This is a reference data field. Please use /v1/apac/utilities/referenceData/{globalWalletAccountType} resource to get possible values of this field with descriptions.  # noqa: E501

        :return: The global_wallet_account_type of this AccountCurrencyDetails.  # noqa: E501
        :rtype: str
        """
        return self._global_wallet_account_type

    @global_wallet_account_type.setter
    def global_wallet_account_type(self, global_wallet_account_type):
        """Sets the global_wallet_account_type of this AccountCurrencyDetails.

        Type of account.Type of account.This is a reference data field. Please use /v1/apac/utilities/referenceData/{globalWalletAccountType} resource to get possible values of this field with descriptions.  # noqa: E501

        :param global_wallet_account_type: The global_wallet_account_type of this AccountCurrencyDetails.  # noqa: E501
        :type: str
        """

        self._global_wallet_account_type = global_wallet_account_type

    @property
    def enrollment_status_flag(self):
        """Gets the enrollment_status_flag of this AccountCurrencyDetails.  # noqa: E501

        Flag to indicate whether new FCY account is enrolled to Multi currency account(Global Wallet).  # noqa: E501

        :return: The enrollment_status_flag of this AccountCurrencyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._enrollment_status_flag

    @enrollment_status_flag.setter
    def enrollment_status_flag(self, enrollment_status_flag):
        """Sets the enrollment_status_flag of this AccountCurrencyDetails.

        Flag to indicate whether new FCY account is enrolled to Multi currency account(Global Wallet).  # noqa: E501

        :param enrollment_status_flag: The enrollment_status_flag of this AccountCurrencyDetails.  # noqa: E501
        :type: bool
        """

        self._enrollment_status_flag = enrollment_status_flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCurrencyDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCurrencyDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
