# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DebitCardLimitDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pos_spending_limit_amount': 'float',
        'daily_atm_withdrawal_limit_amount': 'float',
        'daily_internet_purchase_limit_amount': 'float'
    }

    attribute_map = {
        'pos_spending_limit_amount': 'posSpendingLimitAmount',
        'daily_atm_withdrawal_limit_amount': 'dailyAtmWithdrawalLimitAmount',
        'daily_internet_purchase_limit_amount': 'dailyInternetPurchaseLimitAmount'
    }

    def __init__(self, pos_spending_limit_amount=None, daily_atm_withdrawal_limit_amount=None, daily_internet_purchase_limit_amount=None):  # noqa: E501
        """DebitCardLimitDetails - a model defined in Swagger"""  # noqa: E501
        self._pos_spending_limit_amount = None
        self._daily_atm_withdrawal_limit_amount = None
        self._daily_internet_purchase_limit_amount = None
        self.discriminator = None
        if pos_spending_limit_amount is not None:
            self.pos_spending_limit_amount = pos_spending_limit_amount
        if daily_atm_withdrawal_limit_amount is not None:
            self.daily_atm_withdrawal_limit_amount = daily_atm_withdrawal_limit_amount
        if daily_internet_purchase_limit_amount is not None:
            self.daily_internet_purchase_limit_amount = daily_internet_purchase_limit_amount

    @property
    def pos_spending_limit_amount(self):
        """Gets the pos_spending_limit_amount of this DebitCardLimitDetails.  # noqa: E501

        Field to indicate the limit on merchant POS spending amount per transaction  # noqa: E501

        :return: The pos_spending_limit_amount of this DebitCardLimitDetails.  # noqa: E501
        :rtype: float
        """
        return self._pos_spending_limit_amount

    @pos_spending_limit_amount.setter
    def pos_spending_limit_amount(self, pos_spending_limit_amount):
        """Sets the pos_spending_limit_amount of this DebitCardLimitDetails.

        Field to indicate the limit on merchant POS spending amount per transaction  # noqa: E501

        :param pos_spending_limit_amount: The pos_spending_limit_amount of this DebitCardLimitDetails.  # noqa: E501
        :type: float
        """

        self._pos_spending_limit_amount = pos_spending_limit_amount

    @property
    def daily_atm_withdrawal_limit_amount(self):
        """Gets the daily_atm_withdrawal_limit_amount of this DebitCardLimitDetails.  # noqa: E501

        Field to indicate the limit on local ATM withdrawal amount  # noqa: E501

        :return: The daily_atm_withdrawal_limit_amount of this DebitCardLimitDetails.  # noqa: E501
        :rtype: float
        """
        return self._daily_atm_withdrawal_limit_amount

    @daily_atm_withdrawal_limit_amount.setter
    def daily_atm_withdrawal_limit_amount(self, daily_atm_withdrawal_limit_amount):
        """Sets the daily_atm_withdrawal_limit_amount of this DebitCardLimitDetails.

        Field to indicate the limit on local ATM withdrawal amount  # noqa: E501

        :param daily_atm_withdrawal_limit_amount: The daily_atm_withdrawal_limit_amount of this DebitCardLimitDetails.  # noqa: E501
        :type: float
        """

        self._daily_atm_withdrawal_limit_amount = daily_atm_withdrawal_limit_amount

    @property
    def daily_internet_purchase_limit_amount(self):
        """Gets the daily_internet_purchase_limit_amount of this DebitCardLimitDetails.  # noqa: E501

        Field to indicate the limit on internet purchase  in a day  # noqa: E501

        :return: The daily_internet_purchase_limit_amount of this DebitCardLimitDetails.  # noqa: E501
        :rtype: float
        """
        return self._daily_internet_purchase_limit_amount

    @daily_internet_purchase_limit_amount.setter
    def daily_internet_purchase_limit_amount(self, daily_internet_purchase_limit_amount):
        """Sets the daily_internet_purchase_limit_amount of this DebitCardLimitDetails.

        Field to indicate the limit on internet purchase  in a day  # noqa: E501

        :param daily_internet_purchase_limit_amount: The daily_internet_purchase_limit_amount of this DebitCardLimitDetails.  # noqa: E501
        :type: float
        """

        self._daily_internet_purchase_limit_amount = daily_internet_purchase_limit_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebitCardLimitDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebitCardLimitDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
