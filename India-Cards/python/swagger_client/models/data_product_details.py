# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataProductDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'product_type': 'str',
        'sub_product_type': 'str',
        'shariah_compliance': 'bool',
        'shariah_compliance_remark': 'str',
        'card_type': 'str',
        'pds_url': 'str',
        'image_url': 'str',
        'disclaimer_url': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'product_type': 'product_type',
        'sub_product_type': 'sub_product_type',
        'shariah_compliance': 'shariah_compliance',
        'shariah_compliance_remark': 'shariah_compliance_remark',
        'card_type': 'card_type',
        'pds_url': 'pds_url',
        'image_url': 'image_url',
        'disclaimer_url': 'disclaimer_url'
    }

    def __init__(self, name=None, description=None, product_type=None, sub_product_type=None, shariah_compliance=None, shariah_compliance_remark=None, card_type=None, pds_url=None, image_url=None, disclaimer_url=None):  # noqa: E501
        """DataProductDetails - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._product_type = None
        self._sub_product_type = None
        self._shariah_compliance = None
        self._shariah_compliance_remark = None
        self._card_type = None
        self._pds_url = None
        self._image_url = None
        self._disclaimer_url = None
        self.discriminator = None
        self.name = name
        self.description = description
        self.product_type = product_type
        if sub_product_type is not None:
            self.sub_product_type = sub_product_type
        self.shariah_compliance = shariah_compliance
        if shariah_compliance_remark is not None:
            self.shariah_compliance_remark = shariah_compliance_remark
        self.card_type = card_type
        self.pds_url = pds_url
        if image_url is not None:
            self.image_url = image_url
        if disclaimer_url is not None:
            self.disclaimer_url = disclaimer_url

    @property
    def name(self):
        """Gets the name of this DataProductDetails.  # noqa: E501

        Product name  # noqa: E501

        :return: The name of this DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataProductDetails.

        Product name  # noqa: E501

        :param name: The name of this DataProductDetails.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this DataProductDetails.  # noqa: E501

        Product description  # noqa: E501

        :return: The description of this DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataProductDetails.

        Product description  # noqa: E501

        :param description: The description of this DataProductDetails.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def product_type(self):
        """Gets the product_type of this DataProductDetails.  # noqa: E501

        Type of product  # noqa: E501

        :return: The product_type of this DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this DataProductDetails.

        Type of product  # noqa: E501

        :param product_type: The product_type of this DataProductDetails.  # noqa: E501
        :type: str
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")  # noqa: E501
        allowed_values = ["american_express", "jcb", "mastercard", "mydebit", "others", "switch", "unionpay", "visa"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"  # noqa: E501
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def sub_product_type(self):
        """Gets the sub_product_type of this DataProductDetails.  # noqa: E501

        Type of sub-product  # noqa: E501

        :return: The sub_product_type of this DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._sub_product_type

    @sub_product_type.setter
    def sub_product_type(self, sub_product_type):
        """Sets the sub_product_type of this DataProductDetails.

        Type of sub-product  # noqa: E501

        :param sub_product_type: The sub_product_type of this DataProductDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["black", "classic", "commercial", "diamond", "electron", "generic", "gold", "infinite", "infinite_privilege", "maestro", "others", "platinum", "reserve", "signature", "world", "world_elite"]  # noqa: E501
        if sub_product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_product_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_product_type, allowed_values)
            )

        self._sub_product_type = sub_product_type

    @property
    def shariah_compliance(self):
        """Gets the shariah_compliance of this DataProductDetails.  # noqa: E501

        The indicator for Islamic or Conventional card  # noqa: E501

        :return: The shariah_compliance of this DataProductDetails.  # noqa: E501
        :rtype: bool
        """
        return self._shariah_compliance

    @shariah_compliance.setter
    def shariah_compliance(self, shariah_compliance):
        """Sets the shariah_compliance of this DataProductDetails.

        The indicator for Islamic or Conventional card  # noqa: E501

        :param shariah_compliance: The shariah_compliance of this DataProductDetails.  # noqa: E501
        :type: bool
        """
        if shariah_compliance is None:
            raise ValueError("Invalid value for `shariah_compliance`, must not be `None`")  # noqa: E501

        self._shariah_compliance = shariah_compliance

    @property
    def shariah_compliance_remark(self):
        """Gets the shariah_compliance_remark of this DataProductDetails.  # noqa: E501

        Approval body for shariah compliance  # noqa: E501

        :return: The shariah_compliance_remark of this DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._shariah_compliance_remark

    @shariah_compliance_remark.setter
    def shariah_compliance_remark(self, shariah_compliance_remark):
        """Sets the shariah_compliance_remark of this DataProductDetails.

        Approval body for shariah compliance  # noqa: E501

        :param shariah_compliance_remark: The shariah_compliance_remark of this DataProductDetails.  # noqa: E501
        :type: str
        """

        self._shariah_compliance_remark = shariah_compliance_remark

    @property
    def card_type(self):
        """Gets the card_type of this DataProductDetails.  # noqa: E501

        Type of card  # noqa: E501

        :return: The card_type of this DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this DataProductDetails.

        Type of card  # noqa: E501

        :param card_type: The card_type of this DataProductDetails.  # noqa: E501
        :type: str
        """
        if card_type is None:
            raise ValueError("Invalid value for `card_type`, must not be `None`")  # noqa: E501
        allowed_values = ["credit_card", "debit_card", "charge_card", "prepaid_card"]  # noqa: E501
        if card_type not in allowed_values:
            raise ValueError(
                "Invalid value for `card_type` ({0}), must be one of {1}"  # noqa: E501
                .format(card_type, allowed_values)
            )

        self._card_type = card_type

    @property
    def pds_url(self):
        """Gets the pds_url of this DataProductDetails.  # noqa: E501

        URL for product disclosure sheet  # noqa: E501

        :return: The pds_url of this DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._pds_url

    @pds_url.setter
    def pds_url(self, pds_url):
        """Sets the pds_url of this DataProductDetails.

        URL for product disclosure sheet  # noqa: E501

        :param pds_url: The pds_url of this DataProductDetails.  # noqa: E501
        :type: str
        """
        if pds_url is None:
            raise ValueError("Invalid value for `pds_url`, must not be `None`")  # noqa: E501

        self._pds_url = pds_url

    @property
    def image_url(self):
        """Gets the image_url of this DataProductDetails.  # noqa: E501

        Absolute URL to image in SVG format  # noqa: E501

        :return: The image_url of this DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this DataProductDetails.

        Absolute URL to image in SVG format  # noqa: E501

        :param image_url: The image_url of this DataProductDetails.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def disclaimer_url(self):
        """Gets the disclaimer_url of this DataProductDetails.  # noqa: E501

        Absolute URL for product disclaimer  # noqa: E501

        :return: The disclaimer_url of this DataProductDetails.  # noqa: E501
        :rtype: str
        """
        return self._disclaimer_url

    @disclaimer_url.setter
    def disclaimer_url(self, disclaimer_url):
        """Sets the disclaimer_url of this DataProductDetails.

        Absolute URL for product disclaimer  # noqa: E501

        :param disclaimer_url: The disclaimer_url of this DataProductDetails.  # noqa: E501
        :type: str
        """

        self._disclaimer_url = disclaimer_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataProductDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataProductDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
