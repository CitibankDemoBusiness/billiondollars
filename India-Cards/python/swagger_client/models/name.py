# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Name(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'surname': 'str',
        'given_name': 'str',
        'middle_name': 'str',
        'salutation': 'str'
    }

    attribute_map = {
        'surname': 'surname',
        'given_name': 'givenName',
        'middle_name': 'middleName',
        'salutation': 'salutation'
    }

    def __init__(self, surname=None, given_name=None, middle_name=None, salutation=None):  # noqa: E501
        """Name - a model defined in Swagger"""  # noqa: E501
        self._surname = None
        self._given_name = None
        self._middle_name = None
        self._salutation = None
        self.discriminator = None
        self.surname = surname
        self.given_name = given_name
        if middle_name is not None:
            self.middle_name = middle_name
        self.salutation = salutation

    @property
    def surname(self):
        """Gets the surname of this Name.  # noqa: E501

        Surname/last name of the applicant  # noqa: E501

        :return: The surname of this Name.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Name.

        Surname/last name of the applicant  # noqa: E501

        :param surname: The surname of this Name.  # noqa: E501
        :type: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")  # noqa: E501

        self._surname = surname

    @property
    def given_name(self):
        """Gets the given_name of this Name.  # noqa: E501

        Given/first name of the applicant  # noqa: E501

        :return: The given_name of this Name.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Name.

        Given/first name of the applicant  # noqa: E501

        :param given_name: The given_name of this Name.  # noqa: E501
        :type: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")  # noqa: E501

        self._given_name = given_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Name.  # noqa: E501

        Middle name of the applicant  # noqa: E501

        :return: The middle_name of this Name.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Name.

        Middle name of the applicant  # noqa: E501

        :param middle_name: The middle_name of this Name.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def salutation(self):
        """Gets the salutation of this Name.  # noqa: E501

        Salutation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{salutation} resource to get valid value of this field with description.  # noqa: E501

        :return: The salutation of this Name.  # noqa: E501
        :rtype: str
        """
        return self._salutation

    @salutation.setter
    def salutation(self, salutation):
        """Sets the salutation of this Name.

        Salutation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{salutation} resource to get valid value of this field with description.  # noqa: E501

        :param salutation: The salutation of this Name.  # noqa: E501
        :type: str
        """
        if salutation is None:
            raise ValueError("Invalid value for `salutation`, must not be `None`")  # noqa: E501

        self._salutation = salutation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Name, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Name):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
