# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RewardAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_id': 'str',
        'display_card_number': 'str',
        'available_point_balance': 'float',
        'reward_category_code': 'str',
        'last_statement_point_balance': 'float',
        'points_earned': 'float',
        'reward_account_error_details': 'ErrorResponse'
    }

    attribute_map = {
        'card_id': 'cardId',
        'display_card_number': 'displayCardNumber',
        'available_point_balance': 'availablePointBalance',
        'reward_category_code': 'rewardCategoryCode',
        'last_statement_point_balance': 'lastStatementPointBalance',
        'points_earned': 'pointsEarned',
        'reward_account_error_details': 'rewardAccountErrorDetails'
    }

    def __init__(self, card_id=None, display_card_number=None, available_point_balance=None, reward_category_code=None, last_statement_point_balance=None, points_earned=None, reward_account_error_details=None):  # noqa: E501
        """RewardAccount - a model defined in Swagger"""  # noqa: E501
        self._card_id = None
        self._display_card_number = None
        self._available_point_balance = None
        self._reward_category_code = None
        self._last_statement_point_balance = None
        self._points_earned = None
        self._reward_account_error_details = None
        self.discriminator = None
        self.card_id = card_id
        self.display_card_number = display_card_number
        self.available_point_balance = available_point_balance
        if reward_category_code is not None:
            self.reward_category_code = reward_category_code
        if last_statement_point_balance is not None:
            self.last_statement_point_balance = last_statement_point_balance
        if points_earned is not None:
            self.points_earned = points_earned
        if reward_account_error_details is not None:
            self.reward_account_error_details = reward_account_error_details

    @property
    def card_id(self):
        """Gets the card_id of this RewardAccount.  # noqa: E501

        The card id  in encrypted format  # noqa: E501

        :return: The card_id of this RewardAccount.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this RewardAccount.

        The card id  in encrypted format  # noqa: E501

        :param card_id: The card_id of this RewardAccount.  # noqa: E501
        :type: str
        """
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")  # noqa: E501

        self._card_id = card_id

    @property
    def display_card_number(self):
        """Gets the display_card_number of this RewardAccount.  # noqa: E501

        A masked card number that can be displayed to the customer.  # noqa: E501

        :return: The display_card_number of this RewardAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_card_number

    @display_card_number.setter
    def display_card_number(self, display_card_number):
        """Sets the display_card_number of this RewardAccount.

        A masked card number that can be displayed to the customer.  # noqa: E501

        :param display_card_number: The display_card_number of this RewardAccount.  # noqa: E501
        :type: str
        """
        if display_card_number is None:
            raise ValueError("Invalid value for `display_card_number`, must not be `None`")  # noqa: E501

        self._display_card_number = display_card_number

    @property
    def available_point_balance(self):
        """Gets the available_point_balance of this RewardAccount.  # noqa: E501

        Number of rewards points or miles available.  # noqa: E501

        :return: The available_point_balance of this RewardAccount.  # noqa: E501
        :rtype: float
        """
        return self._available_point_balance

    @available_point_balance.setter
    def available_point_balance(self, available_point_balance):
        """Sets the available_point_balance of this RewardAccount.

        Number of rewards points or miles available.  # noqa: E501

        :param available_point_balance: The available_point_balance of this RewardAccount.  # noqa: E501
        :type: float
        """
        if available_point_balance is None:
            raise ValueError("Invalid value for `available_point_balance`, must not be `None`")  # noqa: E501

        self._available_point_balance = available_point_balance

    @property
    def reward_category_code(self):
        """Gets the reward_category_code of this RewardAccount.  # noqa: E501

        Reward category code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.  # noqa: E501

        :return: The reward_category_code of this RewardAccount.  # noqa: E501
        :rtype: str
        """
        return self._reward_category_code

    @reward_category_code.setter
    def reward_category_code(self, reward_category_code):
        """Sets the reward_category_code of this RewardAccount.

        Reward category code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{rewardCategoryCode} resource to get valid value of this field with description.  # noqa: E501

        :param reward_category_code: The reward_category_code of this RewardAccount.  # noqa: E501
        :type: str
        """

        self._reward_category_code = reward_category_code

    @property
    def last_statement_point_balance(self):
        """Gets the last_statement_point_balance of this RewardAccount.  # noqa: E501

        Number of rewards points or miles available since last statement balance.  # noqa: E501

        :return: The last_statement_point_balance of this RewardAccount.  # noqa: E501
        :rtype: float
        """
        return self._last_statement_point_balance

    @last_statement_point_balance.setter
    def last_statement_point_balance(self, last_statement_point_balance):
        """Sets the last_statement_point_balance of this RewardAccount.

        Number of rewards points or miles available since last statement balance.  # noqa: E501

        :param last_statement_point_balance: The last_statement_point_balance of this RewardAccount.  # noqa: E501
        :type: float
        """

        self._last_statement_point_balance = last_statement_point_balance

    @property
    def points_earned(self):
        """Gets the points_earned of this RewardAccount.  # noqa: E501

        Number of rewards points or miles earned since last statement date.  # noqa: E501

        :return: The points_earned of this RewardAccount.  # noqa: E501
        :rtype: float
        """
        return self._points_earned

    @points_earned.setter
    def points_earned(self, points_earned):
        """Sets the points_earned of this RewardAccount.

        Number of rewards points or miles earned since last statement date.  # noqa: E501

        :param points_earned: The points_earned of this RewardAccount.  # noqa: E501
        :type: float
        """

        self._points_earned = points_earned

    @property
    def reward_account_error_details(self):
        """Gets the reward_account_error_details of this RewardAccount.  # noqa: E501


        :return: The reward_account_error_details of this RewardAccount.  # noqa: E501
        :rtype: ErrorResponse
        """
        return self._reward_account_error_details

    @reward_account_error_details.setter
    def reward_account_error_details(self, reward_account_error_details):
        """Sets the reward_account_error_details of this RewardAccount.


        :param reward_account_error_details: The reward_account_error_details of this RewardAccount.  # noqa: E501
        :type: ErrorResponse
        """

        self._reward_account_error_details = reward_account_error_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RewardAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RewardAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
