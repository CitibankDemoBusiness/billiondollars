# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditCardStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'statement_date': 'date',
        'statement_id': 'str',
        'currency_code': 'str',
        'credit_limit': 'float',
        'outstanding_balance': 'float',
        'last_statement_balance': 'float',
        'payment_due_date': 'date',
        'minimum_due_amount': 'float',
        'eligible_for_equal_payment_plans': 'list[EligibleForEqualPaymentPlan]',
        'reward_points': 'RewardPoints'
    }

    attribute_map = {
        'statement_date': 'statementDate',
        'statement_id': 'statementId',
        'currency_code': 'currencyCode',
        'credit_limit': 'creditLimit',
        'outstanding_balance': 'outstandingBalance',
        'last_statement_balance': 'lastStatementBalance',
        'payment_due_date': 'paymentDueDate',
        'minimum_due_amount': 'minimumDueAmount',
        'eligible_for_equal_payment_plans': 'eligibleForEqualPaymentPlans',
        'reward_points': 'rewardPoints'
    }

    def __init__(self, statement_date=None, statement_id=None, currency_code=None, credit_limit=None, outstanding_balance=None, last_statement_balance=None, payment_due_date=None, minimum_due_amount=None, eligible_for_equal_payment_plans=None, reward_points=None):  # noqa: E501
        """CreditCardStatement - a model defined in Swagger"""  # noqa: E501
        self._statement_date = None
        self._statement_id = None
        self._currency_code = None
        self._credit_limit = None
        self._outstanding_balance = None
        self._last_statement_balance = None
        self._payment_due_date = None
        self._minimum_due_amount = None
        self._eligible_for_equal_payment_plans = None
        self._reward_points = None
        self.discriminator = None
        if statement_date is not None:
            self.statement_date = statement_date
        if statement_id is not None:
            self.statement_id = statement_id
        if currency_code is not None:
            self.currency_code = currency_code
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if outstanding_balance is not None:
            self.outstanding_balance = outstanding_balance
        if last_statement_balance is not None:
            self.last_statement_balance = last_statement_balance
        if payment_due_date is not None:
            self.payment_due_date = payment_due_date
        if minimum_due_amount is not None:
            self.minimum_due_amount = minimum_due_amount
        if eligible_for_equal_payment_plans is not None:
            self.eligible_for_equal_payment_plans = eligible_for_equal_payment_plans
        if reward_points is not None:
            self.reward_points = reward_points

    @property
    def statement_date(self):
        """Gets the statement_date of this CreditCardStatement.  # noqa: E501

        The statement date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :return: The statement_date of this CreditCardStatement.  # noqa: E501
        :rtype: date
        """
        return self._statement_date

    @statement_date.setter
    def statement_date(self, statement_date):
        """Sets the statement_date of this CreditCardStatement.

        The statement date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :param statement_date: The statement_date of this CreditCardStatement.  # noqa: E501
        :type: date
        """

        self._statement_date = statement_date

    @property
    def statement_id(self):
        """Gets the statement_id of this CreditCardStatement.  # noqa: E501

        Unique identifier for the statement  # noqa: E501

        :return: The statement_id of this CreditCardStatement.  # noqa: E501
        :rtype: str
        """
        return self._statement_id

    @statement_id.setter
    def statement_id(self, statement_id):
        """Sets the statement_id of this CreditCardStatement.

        Unique identifier for the statement  # noqa: E501

        :param statement_id: The statement_id of this CreditCardStatement.  # noqa: E501
        :type: str
        """

        self._statement_id = statement_id

    @property
    def currency_code(self):
        """Gets the currency_code of this CreditCardStatement.  # noqa: E501

        The currency code of the statement in ISO 4217 format  # noqa: E501

        :return: The currency_code of this CreditCardStatement.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CreditCardStatement.

        The currency code of the statement in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this CreditCardStatement.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def credit_limit(self):
        """Gets the credit_limit of this CreditCardStatement.  # noqa: E501

        The maximum amount of credit that extend to a customer  # noqa: E501

        :return: The credit_limit of this CreditCardStatement.  # noqa: E501
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this CreditCardStatement.

        The maximum amount of credit that extend to a customer  # noqa: E501

        :param credit_limit: The credit_limit of this CreditCardStatement.  # noqa: E501
        :type: float
        """

        self._credit_limit = credit_limit

    @property
    def outstanding_balance(self):
        """Gets the outstanding_balance of this CreditCardStatement.  # noqa: E501

        Outstanding balance amount on the statement date  # noqa: E501

        :return: The outstanding_balance of this CreditCardStatement.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_balance

    @outstanding_balance.setter
    def outstanding_balance(self, outstanding_balance):
        """Sets the outstanding_balance of this CreditCardStatement.

        Outstanding balance amount on the statement date  # noqa: E501

        :param outstanding_balance: The outstanding_balance of this CreditCardStatement.  # noqa: E501
        :type: float
        """

        self._outstanding_balance = outstanding_balance

    @property
    def last_statement_balance(self):
        """Gets the last_statement_balance of this CreditCardStatement.  # noqa: E501

        The balance on last statement date  # noqa: E501

        :return: The last_statement_balance of this CreditCardStatement.  # noqa: E501
        :rtype: float
        """
        return self._last_statement_balance

    @last_statement_balance.setter
    def last_statement_balance(self, last_statement_balance):
        """Sets the last_statement_balance of this CreditCardStatement.

        The balance on last statement date  # noqa: E501

        :param last_statement_balance: The last_statement_balance of this CreditCardStatement.  # noqa: E501
        :type: float
        """

        self._last_statement_balance = last_statement_balance

    @property
    def payment_due_date(self):
        """Gets the payment_due_date of this CreditCardStatement.  # noqa: E501

        Next payment due date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The payment_due_date of this CreditCardStatement.  # noqa: E501
        :rtype: date
        """
        return self._payment_due_date

    @payment_due_date.setter
    def payment_due_date(self, payment_due_date):
        """Sets the payment_due_date of this CreditCardStatement.

        Next payment due date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param payment_due_date: The payment_due_date of this CreditCardStatement.  # noqa: E501
        :type: date
        """

        self._payment_due_date = payment_due_date

    @property
    def minimum_due_amount(self):
        """Gets the minimum_due_amount of this CreditCardStatement.  # noqa: E501

        Minimum due amount for a payment cycle  # noqa: E501

        :return: The minimum_due_amount of this CreditCardStatement.  # noqa: E501
        :rtype: float
        """
        return self._minimum_due_amount

    @minimum_due_amount.setter
    def minimum_due_amount(self, minimum_due_amount):
        """Sets the minimum_due_amount of this CreditCardStatement.

        Minimum due amount for a payment cycle  # noqa: E501

        :param minimum_due_amount: The minimum_due_amount of this CreditCardStatement.  # noqa: E501
        :type: float
        """

        self._minimum_due_amount = minimum_due_amount

    @property
    def eligible_for_equal_payment_plans(self):
        """Gets the eligible_for_equal_payment_plans of this CreditCardStatement.  # noqa: E501


        :return: The eligible_for_equal_payment_plans of this CreditCardStatement.  # noqa: E501
        :rtype: list[EligibleForEqualPaymentPlan]
        """
        return self._eligible_for_equal_payment_plans

    @eligible_for_equal_payment_plans.setter
    def eligible_for_equal_payment_plans(self, eligible_for_equal_payment_plans):
        """Sets the eligible_for_equal_payment_plans of this CreditCardStatement.


        :param eligible_for_equal_payment_plans: The eligible_for_equal_payment_plans of this CreditCardStatement.  # noqa: E501
        :type: list[EligibleForEqualPaymentPlan]
        """

        self._eligible_for_equal_payment_plans = eligible_for_equal_payment_plans

    @property
    def reward_points(self):
        """Gets the reward_points of this CreditCardStatement.  # noqa: E501


        :return: The reward_points of this CreditCardStatement.  # noqa: E501
        :rtype: RewardPoints
        """
        return self._reward_points

    @reward_points.setter
    def reward_points(self, reward_points):
        """Sets the reward_points of this CreditCardStatement.


        :param reward_points: The reward_points of this CreditCardStatement.  # noqa: E501
        :type: RewardPoints
        """

        self._reward_points = reward_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
