# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_loan_reference_id': 'str',
        'next_installment_amount': 'float',
        'next_installment_principal_amount': 'float',
        'interest_rate': 'float',
        'total_interest_amount': 'float',
        'initial_fee_amount': 'float',
        'closure_interest_amount': 'float',
        'loan_booking_fee': 'float'
    }

    attribute_map = {
        'new_loan_reference_id': 'newLoanReferenceId',
        'next_installment_amount': 'nextInstallmentAmount',
        'next_installment_principal_amount': 'nextInstallmentPrincipalAmount',
        'interest_rate': 'interestRate',
        'total_interest_amount': 'totalInterestAmount',
        'initial_fee_amount': 'initialFeeAmount',
        'closure_interest_amount': 'closureInterestAmount',
        'loan_booking_fee': 'loanBookingFee'
    }

    def __init__(self, new_loan_reference_id=None, next_installment_amount=None, next_installment_principal_amount=None, interest_rate=None, total_interest_amount=None, initial_fee_amount=None, closure_interest_amount=None, loan_booking_fee=None):  # noqa: E501
        """RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse - a model defined in Swagger"""  # noqa: E501
        self._new_loan_reference_id = None
        self._next_installment_amount = None
        self._next_installment_principal_amount = None
        self._interest_rate = None
        self._total_interest_amount = None
        self._initial_fee_amount = None
        self._closure_interest_amount = None
        self._loan_booking_fee = None
        self.discriminator = None
        self.new_loan_reference_id = new_loan_reference_id
        if next_installment_amount is not None:
            self.next_installment_amount = next_installment_amount
        if next_installment_principal_amount is not None:
            self.next_installment_principal_amount = next_installment_principal_amount
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if total_interest_amount is not None:
            self.total_interest_amount = total_interest_amount
        if initial_fee_amount is not None:
            self.initial_fee_amount = initial_fee_amount
        if closure_interest_amount is not None:
            self.closure_interest_amount = closure_interest_amount
        if loan_booking_fee is not None:
            self.loan_booking_fee = loan_booking_fee

    @property
    def new_loan_reference_id(self):
        """Gets the new_loan_reference_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501

        Unique refrence number associated with the loan.  # noqa: E501

        :return: The new_loan_reference_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._new_loan_reference_id

    @new_loan_reference_id.setter
    def new_loan_reference_id(self, new_loan_reference_id):
        """Sets the new_loan_reference_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.

        Unique refrence number associated with the loan.  # noqa: E501

        :param new_loan_reference_id: The new_loan_reference_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :type: str
        """
        if new_loan_reference_id is None:
            raise ValueError("Invalid value for `new_loan_reference_id`, must not be `None`")  # noqa: E501

        self._new_loan_reference_id = new_loan_reference_id

    @property
    def next_installment_amount(self):
        """Gets the next_installment_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501

        Amount of money borrower has to pay as next installment.  # noqa: E501

        :return: The next_installment_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :rtype: float
        """
        return self._next_installment_amount

    @next_installment_amount.setter
    def next_installment_amount(self, next_installment_amount):
        """Sets the next_installment_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.

        Amount of money borrower has to pay as next installment.  # noqa: E501

        :param next_installment_amount: The next_installment_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :type: float
        """

        self._next_installment_amount = next_installment_amount

    @property
    def next_installment_principal_amount(self):
        """Gets the next_installment_principal_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501

        Amount of money that contributes to principal component in next installment.  # noqa: E501

        :return: The next_installment_principal_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :rtype: float
        """
        return self._next_installment_principal_amount

    @next_installment_principal_amount.setter
    def next_installment_principal_amount(self, next_installment_principal_amount):
        """Sets the next_installment_principal_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.

        Amount of money that contributes to principal component in next installment.  # noqa: E501

        :param next_installment_principal_amount: The next_installment_principal_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :type: float
        """

        self._next_installment_principal_amount = next_installment_principal_amount

    @property
    def interest_rate(self):
        """Gets the interest_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501

        Rate of Interest.Interest rate is the amount charged, expressed as a percentage of principal, by a lender to a borrower for the use of assets. Interest rates are typically noted on an annual basis, known as the annual percentage rate (APR).  # noqa: E501

        :return: The interest_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.

        Rate of Interest.Interest rate is the amount charged, expressed as a percentage of principal, by a lender to a borrower for the use of assets. Interest rates are typically noted on an annual basis, known as the annual percentage rate (APR).  # noqa: E501

        :param interest_rate: The interest_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def total_interest_amount(self):
        """Gets the total_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501

        Total amount of money that a borrower will have to pay as interest for amount borrowed.  # noqa: E501

        :return: The total_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_amount

    @total_interest_amount.setter
    def total_interest_amount(self, total_interest_amount):
        """Sets the total_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.

        Total amount of money that a borrower will have to pay as interest for amount borrowed.  # noqa: E501

        :param total_interest_amount: The total_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :type: float
        """

        self._total_interest_amount = total_interest_amount

    @property
    def initial_fee_amount(self):
        """Gets the initial_fee_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501

        First month fee/interest charge incurred from booking date to next statement cycle date.  # noqa: E501

        :return: The initial_fee_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :rtype: float
        """
        return self._initial_fee_amount

    @initial_fee_amount.setter
    def initial_fee_amount(self, initial_fee_amount):
        """Sets the initial_fee_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.

        First month fee/interest charge incurred from booking date to next statement cycle date.  # noqa: E501

        :param initial_fee_amount: The initial_fee_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :type: float
        """

        self._initial_fee_amount = initial_fee_amount

    @property
    def closure_interest_amount(self):
        """Gets the closure_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501

        Closure Interest accrued from last cycle/booking date till date, to be charged for each of the loans getting closed due to Top up post merger.  # noqa: E501

        :return: The closure_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :rtype: float
        """
        return self._closure_interest_amount

    @closure_interest_amount.setter
    def closure_interest_amount(self, closure_interest_amount):
        """Sets the closure_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.

        Closure Interest accrued from last cycle/booking date till date, to be charged for each of the loans getting closed due to Top up post merger.  # noqa: E501

        :param closure_interest_amount: The closure_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :type: float
        """

        self._closure_interest_amount = closure_interest_amount

    @property
    def loan_booking_fee(self):
        """Gets the loan_booking_fee of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501

        Amount to be paid as fee for loan booking.  # noqa: E501

        :return: The loan_booking_fee of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :rtype: float
        """
        return self._loan_booking_fee

    @loan_booking_fee.setter
    def loan_booking_fee(self, loan_booking_fee):
        """Sets the loan_booking_fee of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.

        Amount to be paid as fee for loan booking.  # noqa: E501

        :param loan_booking_fee: The loan_booking_fee of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse.  # noqa: E501
        :type: float
        """

        self._loan_booking_fee = loan_booking_fee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
