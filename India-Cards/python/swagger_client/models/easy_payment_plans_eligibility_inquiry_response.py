# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EasyPaymentPlansEligibilityInquiryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unbilled_transaction': 'list[UnbilledTransaction]',
        'statement': 'Statement',
        'next_start_index': 'str'
    }

    attribute_map = {
        'unbilled_transaction': 'unbilledTransaction',
        'statement': 'statement',
        'next_start_index': 'nextStartIndex'
    }

    def __init__(self, unbilled_transaction=None, statement=None, next_start_index=None):  # noqa: E501
        """EasyPaymentPlansEligibilityInquiryResponse - a model defined in Swagger"""  # noqa: E501
        self._unbilled_transaction = None
        self._statement = None
        self._next_start_index = None
        self.discriminator = None
        if unbilled_transaction is not None:
            self.unbilled_transaction = unbilled_transaction
        if statement is not None:
            self.statement = statement
        if next_start_index is not None:
            self.next_start_index = next_start_index

    @property
    def unbilled_transaction(self):
        """Gets the unbilled_transaction of this EasyPaymentPlansEligibilityInquiryResponse.  # noqa: E501


        :return: The unbilled_transaction of this EasyPaymentPlansEligibilityInquiryResponse.  # noqa: E501
        :rtype: list[UnbilledTransaction]
        """
        return self._unbilled_transaction

    @unbilled_transaction.setter
    def unbilled_transaction(self, unbilled_transaction):
        """Sets the unbilled_transaction of this EasyPaymentPlansEligibilityInquiryResponse.


        :param unbilled_transaction: The unbilled_transaction of this EasyPaymentPlansEligibilityInquiryResponse.  # noqa: E501
        :type: list[UnbilledTransaction]
        """

        self._unbilled_transaction = unbilled_transaction

    @property
    def statement(self):
        """Gets the statement of this EasyPaymentPlansEligibilityInquiryResponse.  # noqa: E501


        :return: The statement of this EasyPaymentPlansEligibilityInquiryResponse.  # noqa: E501
        :rtype: Statement
        """
        return self._statement

    @statement.setter
    def statement(self, statement):
        """Sets the statement of this EasyPaymentPlansEligibilityInquiryResponse.


        :param statement: The statement of this EasyPaymentPlansEligibilityInquiryResponse.  # noqa: E501
        :type: Statement
        """

        self._statement = statement

    @property
    def next_start_index(self):
        """Gets the next_start_index of this EasyPaymentPlansEligibilityInquiryResponse.  # noqa: E501

        The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.  # noqa: E501

        :return: The next_start_index of this EasyPaymentPlansEligibilityInquiryResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_start_index

    @next_start_index.setter
    def next_start_index(self, next_start_index):
        """Sets the next_start_index of this EasyPaymentPlansEligibilityInquiryResponse.

        The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.  # noqa: E501

        :param next_start_index: The next_start_index of this EasyPaymentPlansEligibilityInquiryResponse.  # noqa: E501
        :type: str
        """

        self._next_start_index = next_start_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EasyPaymentPlansEligibilityInquiryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EasyPaymentPlansEligibilityInquiryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
