# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataRequirementsRequirementDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nationality': 'str',
        'nationality_remark': 'str',
        'residency': 'str',
        'account_holder_flag': 'bool',
        'applicant': 'list[DataRequirementsApplicant]'
    }

    attribute_map = {
        'nationality': 'nationality',
        'nationality_remark': 'nationality_remark',
        'residency': 'residency',
        'account_holder_flag': 'account_holder_flag',
        'applicant': 'applicant'
    }

    def __init__(self, nationality=None, nationality_remark=None, residency=None, account_holder_flag=None, applicant=None):  # noqa: E501
        """DataRequirementsRequirementDetail - a model defined in Swagger"""  # noqa: E501
        self._nationality = None
        self._nationality_remark = None
        self._residency = None
        self._account_holder_flag = None
        self._applicant = None
        self.discriminator = None
        self.nationality = nationality
        if nationality_remark is not None:
            self.nationality_remark = nationality_remark
        self.residency = residency
        if account_holder_flag is not None:
            self.account_holder_flag = account_holder_flag
        if applicant is not None:
            self.applicant = applicant

    @property
    def nationality(self):
        """Gets the nationality of this DataRequirementsRequirementDetail.  # noqa: E501

        Nationality of the applicant  # noqa: E501

        :return: The nationality of this DataRequirementsRequirementDetail.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this DataRequirementsRequirementDetail.

        Nationality of the applicant  # noqa: E501

        :param nationality: The nationality of this DataRequirementsRequirementDetail.  # noqa: E501
        :type: str
        """
        if nationality is None:
            raise ValueError("Invalid value for `nationality`, must not be `None`")  # noqa: E501
        allowed_values = ["malaysian", "non_malaysian", "any"]  # noqa: E501
        if nationality not in allowed_values:
            raise ValueError(
                "Invalid value for `nationality` ({0}), must be one of {1}"  # noqa: E501
                .format(nationality, allowed_values)
            )

        self._nationality = nationality

    @property
    def nationality_remark(self):
        """Gets the nationality_remark of this DataRequirementsRequirementDetail.  # noqa: E501

        Remark on nationality  # noqa: E501

        :return: The nationality_remark of this DataRequirementsRequirementDetail.  # noqa: E501
        :rtype: str
        """
        return self._nationality_remark

    @nationality_remark.setter
    def nationality_remark(self, nationality_remark):
        """Sets the nationality_remark of this DataRequirementsRequirementDetail.

        Remark on nationality  # noqa: E501

        :param nationality_remark: The nationality_remark of this DataRequirementsRequirementDetail.  # noqa: E501
        :type: str
        """

        self._nationality_remark = nationality_remark

    @property
    def residency(self):
        """Gets the residency of this DataRequirementsRequirementDetail.  # noqa: E501

        Resident status of the applicant  # noqa: E501

        :return: The residency of this DataRequirementsRequirementDetail.  # noqa: E501
        :rtype: str
        """
        return self._residency

    @residency.setter
    def residency(self, residency):
        """Sets the residency of this DataRequirementsRequirementDetail.

        Resident status of the applicant  # noqa: E501

        :param residency: The residency of this DataRequirementsRequirementDetail.  # noqa: E501
        :type: str
        """
        if residency is None:
            raise ValueError("Invalid value for `residency`, must not be `None`")  # noqa: E501
        allowed_values = ["resident", "non_resident", "any"]  # noqa: E501
        if residency not in allowed_values:
            raise ValueError(
                "Invalid value for `residency` ({0}), must be one of {1}"  # noqa: E501
                .format(residency, allowed_values)
            )

        self._residency = residency

    @property
    def account_holder_flag(self):
        """Gets the account_holder_flag of this DataRequirementsRequirementDetail.  # noqa: E501

        Requirement to have account with the bank  # noqa: E501

        :return: The account_holder_flag of this DataRequirementsRequirementDetail.  # noqa: E501
        :rtype: bool
        """
        return self._account_holder_flag

    @account_holder_flag.setter
    def account_holder_flag(self, account_holder_flag):
        """Sets the account_holder_flag of this DataRequirementsRequirementDetail.

        Requirement to have account with the bank  # noqa: E501

        :param account_holder_flag: The account_holder_flag of this DataRequirementsRequirementDetail.  # noqa: E501
        :type: bool
        """

        self._account_holder_flag = account_holder_flag

    @property
    def applicant(self):
        """Gets the applicant of this DataRequirementsRequirementDetail.  # noqa: E501


        :return: The applicant of this DataRequirementsRequirementDetail.  # noqa: E501
        :rtype: list[DataRequirementsApplicant]
        """
        return self._applicant

    @applicant.setter
    def applicant(self, applicant):
        """Sets the applicant of this DataRequirementsRequirementDetail.


        :param applicant: The applicant of this DataRequirementsRequirementDetail.  # noqa: E501
        :type: list[DataRequirementsApplicant]
        """

        self._applicant = applicant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataRequirementsRequirementDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataRequirementsRequirementDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
