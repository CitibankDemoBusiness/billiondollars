# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InitiateCreditChargeCardCorporateCardsClosureRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tokenized_card_number': 'str',
        'corporate_officer_details': 'CorporateOfficerDetails',
        'cancellation_reason_code': 'str',
        'cancellation_type': 'str',
        'effective_cancel_date': 'date',
        'postal_mail_code': 'str',
        'permenant_account_closure_flag': 'bool',
        'consent_given_flag': 'bool'
    }

    attribute_map = {
        'tokenized_card_number': 'tokenizedCardNumber',
        'corporate_officer_details': 'corporateOfficerDetails',
        'cancellation_reason_code': 'cancellationReasonCode',
        'cancellation_type': 'cancellationType',
        'effective_cancel_date': 'effectiveCancelDate',
        'postal_mail_code': 'postalMailCode',
        'permenant_account_closure_flag': 'permenantAccountClosureFlag',
        'consent_given_flag': 'consentGivenFlag'
    }

    def __init__(self, tokenized_card_number=None, corporate_officer_details=None, cancellation_reason_code=None, cancellation_type=None, effective_cancel_date=None, postal_mail_code=None, permenant_account_closure_flag=None, consent_given_flag=None):  # noqa: E501
        """InitiateCreditChargeCardCorporateCardsClosureRequest - a model defined in Swagger"""  # noqa: E501
        self._tokenized_card_number = None
        self._corporate_officer_details = None
        self._cancellation_reason_code = None
        self._cancellation_type = None
        self._effective_cancel_date = None
        self._postal_mail_code = None
        self._permenant_account_closure_flag = None
        self._consent_given_flag = None
        self.discriminator = None
        self.tokenized_card_number = tokenized_card_number
        if corporate_officer_details is not None:
            self.corporate_officer_details = corporate_officer_details
        if cancellation_reason_code is not None:
            self.cancellation_reason_code = cancellation_reason_code
        if cancellation_type is not None:
            self.cancellation_type = cancellation_type
        if effective_cancel_date is not None:
            self.effective_cancel_date = effective_cancel_date
        if postal_mail_code is not None:
            self.postal_mail_code = postal_mail_code
        if permenant_account_closure_flag is not None:
            self.permenant_account_closure_flag = permenant_account_closure_flag
        if consent_given_flag is not None:
            self.consent_given_flag = consent_given_flag

    @property
    def tokenized_card_number(self):
        """Gets the tokenized_card_number of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501

        Tokenized card number  # noqa: E501

        :return: The tokenized_card_number of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :rtype: str
        """
        return self._tokenized_card_number

    @tokenized_card_number.setter
    def tokenized_card_number(self, tokenized_card_number):
        """Sets the tokenized_card_number of this InitiateCreditChargeCardCorporateCardsClosureRequest.

        Tokenized card number  # noqa: E501

        :param tokenized_card_number: The tokenized_card_number of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :type: str
        """
        if tokenized_card_number is None:
            raise ValueError("Invalid value for `tokenized_card_number`, must not be `None`")  # noqa: E501

        self._tokenized_card_number = tokenized_card_number

    @property
    def corporate_officer_details(self):
        """Gets the corporate_officer_details of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501


        :return: The corporate_officer_details of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :rtype: CorporateOfficerDetails
        """
        return self._corporate_officer_details

    @corporate_officer_details.setter
    def corporate_officer_details(self, corporate_officer_details):
        """Sets the corporate_officer_details of this InitiateCreditChargeCardCorporateCardsClosureRequest.


        :param corporate_officer_details: The corporate_officer_details of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :type: CorporateOfficerDetails
        """

        self._corporate_officer_details = corporate_officer_details

    @property
    def cancellation_reason_code(self):
        """Gets the cancellation_reason_code of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501

        cancellationReasonCode. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationReasonCode} resource to get possible values of this field with descriptions  # noqa: E501

        :return: The cancellation_reason_code of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_reason_code

    @cancellation_reason_code.setter
    def cancellation_reason_code(self, cancellation_reason_code):
        """Sets the cancellation_reason_code of this InitiateCreditChargeCardCorporateCardsClosureRequest.

        cancellationReasonCode. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationReasonCode} resource to get possible values of this field with descriptions  # noqa: E501

        :param cancellation_reason_code: The cancellation_reason_code of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :type: str
        """

        self._cancellation_reason_code = cancellation_reason_code

    @property
    def cancellation_type(self):
        """Gets the cancellation_type of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501

        cancellationReasonDescription. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationType} resource to get possible values of this field with descriptions  # noqa: E501

        :return: The cancellation_type of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_type

    @cancellation_type.setter
    def cancellation_type(self, cancellation_type):
        """Sets the cancellation_type of this InitiateCreditChargeCardCorporateCardsClosureRequest.

        cancellationReasonDescription. This is a reference data field. Please use /v1/utilities/referenceData/{cancellationType} resource to get possible values of this field with descriptions  # noqa: E501

        :param cancellation_type: The cancellation_type of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :type: str
        """

        self._cancellation_type = cancellation_type

    @property
    def effective_cancel_date(self):
        """Gets the effective_cancel_date of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501

        Cancellation date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The effective_cancel_date of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :rtype: date
        """
        return self._effective_cancel_date

    @effective_cancel_date.setter
    def effective_cancel_date(self, effective_cancel_date):
        """Sets the effective_cancel_date of this InitiateCreditChargeCardCorporateCardsClosureRequest.

        Cancellation date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param effective_cancel_date: The effective_cancel_date of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :type: date
        """

        self._effective_cancel_date = effective_cancel_date

    @property
    def postal_mail_code(self):
        """Gets the postal_mail_code of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501

        Mail letter code if business opt to send letter to customer. This is a reference data field. Please use /v1/utilities/referenceData/{postalMailCode} resource to get possible values of this field with descriptions.  # noqa: E501

        :return: The postal_mail_code of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :rtype: str
        """
        return self._postal_mail_code

    @postal_mail_code.setter
    def postal_mail_code(self, postal_mail_code):
        """Sets the postal_mail_code of this InitiateCreditChargeCardCorporateCardsClosureRequest.

        Mail letter code if business opt to send letter to customer. This is a reference data field. Please use /v1/utilities/referenceData/{postalMailCode} resource to get possible values of this field with descriptions.  # noqa: E501

        :param postal_mail_code: The postal_mail_code of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :type: str
        """

        self._postal_mail_code = postal_mail_code

    @property
    def permenant_account_closure_flag(self):
        """Gets the permenant_account_closure_flag of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501

        Permanent Account Closure Flag  # noqa: E501

        :return: The permenant_account_closure_flag of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :rtype: bool
        """
        return self._permenant_account_closure_flag

    @permenant_account_closure_flag.setter
    def permenant_account_closure_flag(self, permenant_account_closure_flag):
        """Sets the permenant_account_closure_flag of this InitiateCreditChargeCardCorporateCardsClosureRequest.

        Permanent Account Closure Flag  # noqa: E501

        :param permenant_account_closure_flag: The permenant_account_closure_flag of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :type: bool
        """

        self._permenant_account_closure_flag = permenant_account_closure_flag

    @property
    def consent_given_flag(self):
        """Gets the consent_given_flag of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501

        This is consent flag from the customer to pay back if any outstanding on that account while closure  # noqa: E501

        :return: The consent_given_flag of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :rtype: bool
        """
        return self._consent_given_flag

    @consent_given_flag.setter
    def consent_given_flag(self, consent_given_flag):
        """Sets the consent_given_flag of this InitiateCreditChargeCardCorporateCardsClosureRequest.

        This is consent flag from the customer to pay back if any outstanding on that account while closure  # noqa: E501

        :param consent_given_flag: The consent_given_flag of this InitiateCreditChargeCardCorporateCardsClosureRequest.  # noqa: E501
        :type: bool
        """

        self._consent_given_flag = consent_given_flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitiateCreditChargeCardCorporateCardsClosureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitiateCreditChargeCardCorporateCardsClosureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
