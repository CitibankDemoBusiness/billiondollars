# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountDtls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_account_number': 'str',
        'account_id': 'str',
        'currency_code': 'str',
        'enrollment_status_flag': 'bool',
        'primary_account_flag': 'bool',
        'account_balance': 'float',
        'linked_account_details': 'list[LinkedAccountDetails]'
    }

    attribute_map = {
        'display_account_number': 'displayAccountNumber',
        'account_id': 'accountId',
        'currency_code': 'currencyCode',
        'enrollment_status_flag': 'enrollmentStatusFlag',
        'primary_account_flag': 'primaryAccountFlag',
        'account_balance': 'accountBalance',
        'linked_account_details': 'linkedAccountDetails'
    }

    def __init__(self, display_account_number=None, account_id=None, currency_code=None, enrollment_status_flag=None, primary_account_flag=None, account_balance=None, linked_account_details=None):  # noqa: E501
        """AccountDtls - a model defined in Swagger"""  # noqa: E501
        self._display_account_number = None
        self._account_id = None
        self._currency_code = None
        self._enrollment_status_flag = None
        self._primary_account_flag = None
        self._account_balance = None
        self._linked_account_details = None
        self.discriminator = None
        if display_account_number is not None:
            self.display_account_number = display_account_number
        if account_id is not None:
            self.account_id = account_id
        if currency_code is not None:
            self.currency_code = currency_code
        if enrollment_status_flag is not None:
            self.enrollment_status_flag = enrollment_status_flag
        if primary_account_flag is not None:
            self.primary_account_flag = primary_account_flag
        if account_balance is not None:
            self.account_balance = account_balance
        if linked_account_details is not None:
            self.linked_account_details = linked_account_details

    @property
    def display_account_number(self):
        """Gets the display_account_number of this AccountDtls.  # noqa: E501

        Currency code which has to be added to Multi Currency Account in ISO 4217 format.  # noqa: E501

        :return: The display_account_number of this AccountDtls.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this AccountDtls.

        Currency code which has to be added to Multi Currency Account in ISO 4217 format.  # noqa: E501

        :param display_account_number: The display_account_number of this AccountDtls.  # noqa: E501
        :type: str
        """

        self._display_account_number = display_account_number

    @property
    def account_id(self):
        """Gets the account_id of this AccountDtls.  # noqa: E501

        The customer account identifier in encrypted format  # noqa: E501

        :return: The account_id of this AccountDtls.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountDtls.

        The customer account identifier in encrypted format  # noqa: E501

        :param account_id: The account_id of this AccountDtls.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def currency_code(self):
        """Gets the currency_code of this AccountDtls.  # noqa: E501

        Currency code which has to be added to Multi Currency Account in ISO 4217 format.  # noqa: E501

        :return: The currency_code of this AccountDtls.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AccountDtls.

        Currency code which has to be added to Multi Currency Account in ISO 4217 format.  # noqa: E501

        :param currency_code: The currency_code of this AccountDtls.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def enrollment_status_flag(self):
        """Gets the enrollment_status_flag of this AccountDtls.  # noqa: E501

        This field is to indicate if the  account is enrolled for Multi Currency Account or not.  # noqa: E501

        :return: The enrollment_status_flag of this AccountDtls.  # noqa: E501
        :rtype: bool
        """
        return self._enrollment_status_flag

    @enrollment_status_flag.setter
    def enrollment_status_flag(self, enrollment_status_flag):
        """Sets the enrollment_status_flag of this AccountDtls.

        This field is to indicate if the  account is enrolled for Multi Currency Account or not.  # noqa: E501

        :param enrollment_status_flag: The enrollment_status_flag of this AccountDtls.  # noqa: E501
        :type: bool
        """

        self._enrollment_status_flag = enrollment_status_flag

    @property
    def primary_account_flag(self):
        """Gets the primary_account_flag of this AccountDtls.  # noqa: E501

        Flag to indicate if account is primary  # noqa: E501

        :return: The primary_account_flag of this AccountDtls.  # noqa: E501
        :rtype: bool
        """
        return self._primary_account_flag

    @primary_account_flag.setter
    def primary_account_flag(self, primary_account_flag):
        """Sets the primary_account_flag of this AccountDtls.

        Flag to indicate if account is primary  # noqa: E501

        :param primary_account_flag: The primary_account_flag of this AccountDtls.  # noqa: E501
        :type: bool
        """

        self._primary_account_flag = primary_account_flag

    @property
    def account_balance(self):
        """Gets the account_balance of this AccountDtls.  # noqa: E501

        Current Balance of the Account.  # noqa: E501

        :return: The account_balance of this AccountDtls.  # noqa: E501
        :rtype: float
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """Sets the account_balance of this AccountDtls.

        Current Balance of the Account.  # noqa: E501

        :param account_balance: The account_balance of this AccountDtls.  # noqa: E501
        :type: float
        """

        self._account_balance = account_balance

    @property
    def linked_account_details(self):
        """Gets the linked_account_details of this AccountDtls.  # noqa: E501


        :return: The linked_account_details of this AccountDtls.  # noqa: E501
        :rtype: list[LinkedAccountDetails]
        """
        return self._linked_account_details

    @linked_account_details.setter
    def linked_account_details(self, linked_account_details):
        """Sets the linked_account_details of this AccountDtls.


        :param linked_account_details: The linked_account_details of this AccountDtls.  # noqa: E501
        :type: list[LinkedAccountDetails]
        """

        self._linked_account_details = linked_account_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountDtls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDtls):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
