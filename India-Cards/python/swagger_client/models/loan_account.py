# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_description': 'str',
        'loan_reference_number': 'str',
        'loan_amount': 'float',
        'loan_start_date': 'date',
        'loan_tenure': 'int',
        'installment_amount': 'float',
        'processing_charge_amount': 'float',
        'annual_percentage_rate': 'float',
        'effective_interest_rate': 'float',
        'installment_cycle': 'int',
        'remaining_loan_amount': 'float',
        'loan_remaining_term_number': 'int'
    }

    attribute_map = {
        'transaction_description': 'transactionDescription',
        'loan_reference_number': 'loanReferenceNumber',
        'loan_amount': 'loanAmount',
        'loan_start_date': 'loanStartDate',
        'loan_tenure': 'loanTenure',
        'installment_amount': 'installmentAmount',
        'processing_charge_amount': 'processingChargeAmount',
        'annual_percentage_rate': 'annualPercentageRate',
        'effective_interest_rate': 'effectiveInterestRate',
        'installment_cycle': 'installmentCycle',
        'remaining_loan_amount': 'remainingLoanAmount',
        'loan_remaining_term_number': 'loanRemainingTermNumber'
    }

    def __init__(self, transaction_description=None, loan_reference_number=None, loan_amount=None, loan_start_date=None, loan_tenure=None, installment_amount=None, processing_charge_amount=None, annual_percentage_rate=None, effective_interest_rate=None, installment_cycle=None, remaining_loan_amount=None, loan_remaining_term_number=None):  # noqa: E501
        """LoanAccount - a model defined in Swagger"""  # noqa: E501
        self._transaction_description = None
        self._loan_reference_number = None
        self._loan_amount = None
        self._loan_start_date = None
        self._loan_tenure = None
        self._installment_amount = None
        self._processing_charge_amount = None
        self._annual_percentage_rate = None
        self._effective_interest_rate = None
        self._installment_cycle = None
        self._remaining_loan_amount = None
        self._loan_remaining_term_number = None
        self.discriminator = None
        if transaction_description is not None:
            self.transaction_description = transaction_description
        if loan_reference_number is not None:
            self.loan_reference_number = loan_reference_number
        if loan_amount is not None:
            self.loan_amount = loan_amount
        if loan_start_date is not None:
            self.loan_start_date = loan_start_date
        if loan_tenure is not None:
            self.loan_tenure = loan_tenure
        if installment_amount is not None:
            self.installment_amount = installment_amount
        if processing_charge_amount is not None:
            self.processing_charge_amount = processing_charge_amount
        if annual_percentage_rate is not None:
            self.annual_percentage_rate = annual_percentage_rate
        if effective_interest_rate is not None:
            self.effective_interest_rate = effective_interest_rate
        if installment_cycle is not None:
            self.installment_cycle = installment_cycle
        self.remaining_loan_amount = remaining_loan_amount
        self.loan_remaining_term_number = loan_remaining_term_number

    @property
    def transaction_description(self):
        """Gets the transaction_description of this LoanAccount.  # noqa: E501

        Transaction Description  # noqa: E501

        :return: The transaction_description of this LoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._transaction_description

    @transaction_description.setter
    def transaction_description(self, transaction_description):
        """Sets the transaction_description of this LoanAccount.

        Transaction Description  # noqa: E501

        :param transaction_description: The transaction_description of this LoanAccount.  # noqa: E501
        :type: str
        """

        self._transaction_description = transaction_description

    @property
    def loan_reference_number(self):
        """Gets the loan_reference_number of this LoanAccount.  # noqa: E501

        Unique refrence number associated with the loan.  # noqa: E501

        :return: The loan_reference_number of this LoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._loan_reference_number

    @loan_reference_number.setter
    def loan_reference_number(self, loan_reference_number):
        """Sets the loan_reference_number of this LoanAccount.

        Unique refrence number associated with the loan.  # noqa: E501

        :param loan_reference_number: The loan_reference_number of this LoanAccount.  # noqa: E501
        :type: str
        """

        self._loan_reference_number = loan_reference_number

    @property
    def loan_amount(self):
        """Gets the loan_amount of this LoanAccount.  # noqa: E501

        Loan Amount  # noqa: E501

        :return: The loan_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._loan_amount

    @loan_amount.setter
    def loan_amount(self, loan_amount):
        """Sets the loan_amount of this LoanAccount.

        Loan Amount  # noqa: E501

        :param loan_amount: The loan_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._loan_amount = loan_amount

    @property
    def loan_start_date(self):
        """Gets the loan_start_date of this LoanAccount.  # noqa: E501

        Start date of the loan.Date in ISO 8601, YYYY-MM-DD format  # noqa: E501

        :return: The loan_start_date of this LoanAccount.  # noqa: E501
        :rtype: date
        """
        return self._loan_start_date

    @loan_start_date.setter
    def loan_start_date(self, loan_start_date):
        """Sets the loan_start_date of this LoanAccount.

        Start date of the loan.Date in ISO 8601, YYYY-MM-DD format  # noqa: E501

        :param loan_start_date: The loan_start_date of this LoanAccount.  # noqa: E501
        :type: date
        """

        self._loan_start_date = loan_start_date

    @property
    def loan_tenure(self):
        """Gets the loan_tenure of this LoanAccount.  # noqa: E501

        Tenure of loan against card. It is considered in terms of number of months.  # noqa: E501

        :return: The loan_tenure of this LoanAccount.  # noqa: E501
        :rtype: int
        """
        return self._loan_tenure

    @loan_tenure.setter
    def loan_tenure(self, loan_tenure):
        """Sets the loan_tenure of this LoanAccount.

        Tenure of loan against card. It is considered in terms of number of months.  # noqa: E501

        :param loan_tenure: The loan_tenure of this LoanAccount.  # noqa: E501
        :type: int
        """

        self._loan_tenure = loan_tenure

    @property
    def installment_amount(self):
        """Gets the installment_amount of this LoanAccount.  # noqa: E501

        Amount of money a borrower has to pay as installment.  # noqa: E501

        :return: The installment_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._installment_amount

    @installment_amount.setter
    def installment_amount(self, installment_amount):
        """Sets the installment_amount of this LoanAccount.

        Amount of money a borrower has to pay as installment.  # noqa: E501

        :param installment_amount: The installment_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._installment_amount = installment_amount

    @property
    def processing_charge_amount(self):
        """Gets the processing_charge_amount of this LoanAccount.  # noqa: E501

        Charges levied on applicant by the bank to process the loan.  # noqa: E501

        :return: The processing_charge_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._processing_charge_amount

    @processing_charge_amount.setter
    def processing_charge_amount(self, processing_charge_amount):
        """Sets the processing_charge_amount of this LoanAccount.

        Charges levied on applicant by the bank to process the loan.  # noqa: E501

        :param processing_charge_amount: The processing_charge_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._processing_charge_amount = processing_charge_amount

    @property
    def annual_percentage_rate(self):
        """Gets the annual_percentage_rate of this LoanAccount.  # noqa: E501

        Annual Percentage Rate  # noqa: E501

        :return: The annual_percentage_rate of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._annual_percentage_rate

    @annual_percentage_rate.setter
    def annual_percentage_rate(self, annual_percentage_rate):
        """Sets the annual_percentage_rate of this LoanAccount.

        Annual Percentage Rate  # noqa: E501

        :param annual_percentage_rate: The annual_percentage_rate of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._annual_percentage_rate = annual_percentage_rate

    @property
    def effective_interest_rate(self):
        """Gets the effective_interest_rate of this LoanAccount.  # noqa: E501

        Effective Percentage Rate  # noqa: E501

        :return: The effective_interest_rate of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._effective_interest_rate

    @effective_interest_rate.setter
    def effective_interest_rate(self, effective_interest_rate):
        """Sets the effective_interest_rate of this LoanAccount.

        Effective Percentage Rate  # noqa: E501

        :param effective_interest_rate: The effective_interest_rate of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._effective_interest_rate = effective_interest_rate

    @property
    def installment_cycle(self):
        """Gets the installment_cycle of this LoanAccount.  # noqa: E501

        Intallment Cycle  # noqa: E501

        :return: The installment_cycle of this LoanAccount.  # noqa: E501
        :rtype: int
        """
        return self._installment_cycle

    @installment_cycle.setter
    def installment_cycle(self, installment_cycle):
        """Sets the installment_cycle of this LoanAccount.

        Intallment Cycle  # noqa: E501

        :param installment_cycle: The installment_cycle of this LoanAccount.  # noqa: E501
        :type: int
        """

        self._installment_cycle = installment_cycle

    @property
    def remaining_loan_amount(self):
        """Gets the remaining_loan_amount of this LoanAccount.  # noqa: E501

        Remaining Loan Amount  # noqa: E501

        :return: The remaining_loan_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._remaining_loan_amount

    @remaining_loan_amount.setter
    def remaining_loan_amount(self, remaining_loan_amount):
        """Sets the remaining_loan_amount of this LoanAccount.

        Remaining Loan Amount  # noqa: E501

        :param remaining_loan_amount: The remaining_loan_amount of this LoanAccount.  # noqa: E501
        :type: float
        """
        if remaining_loan_amount is None:
            raise ValueError("Invalid value for `remaining_loan_amount`, must not be `None`")  # noqa: E501

        self._remaining_loan_amount = remaining_loan_amount

    @property
    def loan_remaining_term_number(self):
        """Gets the loan_remaining_term_number of this LoanAccount.  # noqa: E501

        Remaining term of installment loan  # noqa: E501

        :return: The loan_remaining_term_number of this LoanAccount.  # noqa: E501
        :rtype: int
        """
        return self._loan_remaining_term_number

    @loan_remaining_term_number.setter
    def loan_remaining_term_number(self, loan_remaining_term_number):
        """Sets the loan_remaining_term_number of this LoanAccount.

        Remaining term of installment loan  # noqa: E501

        :param loan_remaining_term_number: The loan_remaining_term_number of this LoanAccount.  # noqa: E501
        :type: int
        """
        if loan_remaining_term_number is None:
            raise ValueError("Invalid value for `loan_remaining_term_number`, must not be `None`")  # noqa: E501

        self._loan_remaining_term_number = loan_remaining_term_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
