# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PendingAuthorizationTransactionRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_date': 'date',
        'transaction_time': 'str',
        'transaction_currency_code': 'str',
        'transaction_amount': 'float',
        'transaction_status': 'str',
        'billed_currency_code': 'str',
        'billed_amount': 'float',
        'merchant_name': 'str'
    }

    attribute_map = {
        'transaction_date': 'transactionDate',
        'transaction_time': 'transactionTime',
        'transaction_currency_code': 'transactionCurrencyCode',
        'transaction_amount': 'transactionAmount',
        'transaction_status': 'transactionStatus',
        'billed_currency_code': 'billedCurrencyCode',
        'billed_amount': 'billedAmount',
        'merchant_name': 'merchantName'
    }

    def __init__(self, transaction_date=None, transaction_time=None, transaction_currency_code=None, transaction_amount=None, transaction_status=None, billed_currency_code=None, billed_amount=None, merchant_name=None):  # noqa: E501
        """PendingAuthorizationTransactionRecords - a model defined in Swagger"""  # noqa: E501
        self._transaction_date = None
        self._transaction_time = None
        self._transaction_currency_code = None
        self._transaction_amount = None
        self._transaction_status = None
        self._billed_currency_code = None
        self._billed_amount = None
        self._merchant_name = None
        self.discriminator = None
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if transaction_time is not None:
            self.transaction_time = transaction_time
        if transaction_currency_code is not None:
            self.transaction_currency_code = transaction_currency_code
        if transaction_amount is not None:
            self.transaction_amount = transaction_amount
        if transaction_status is not None:
            self.transaction_status = transaction_status
        if billed_currency_code is not None:
            self.billed_currency_code = billed_currency_code
        if billed_amount is not None:
            self.billed_amount = billed_amount
        if merchant_name is not None:
            self.merchant_name = merchant_name

    @property
    def transaction_date(self):
        """Gets the transaction_date of this PendingAuthorizationTransactionRecords.  # noqa: E501

        EffectiveDate should be in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :return: The transaction_date of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :rtype: date
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this PendingAuthorizationTransactionRecords.

        EffectiveDate should be in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :param transaction_date: The transaction_date of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :type: date
        """

        self._transaction_date = transaction_date

    @property
    def transaction_time(self):
        """Gets the transaction_time of this PendingAuthorizationTransactionRecords.  # noqa: E501

        EffectiveTime  should follow ISO 8601 format hh:mm:ss  # noqa: E501

        :return: The transaction_time of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :rtype: str
        """
        return self._transaction_time

    @transaction_time.setter
    def transaction_time(self, transaction_time):
        """Sets the transaction_time of this PendingAuthorizationTransactionRecords.

        EffectiveTime  should follow ISO 8601 format hh:mm:ss  # noqa: E501

        :param transaction_time: The transaction_time of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :type: str
        """

        self._transaction_time = transaction_time

    @property
    def transaction_currency_code(self):
        """Gets the transaction_currency_code of this PendingAuthorizationTransactionRecords.  # noqa: E501

        transactionCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{transactionCurrencyCode} resource to get possible values of this field with descriptions  # noqa: E501

        :return: The transaction_currency_code of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :rtype: str
        """
        return self._transaction_currency_code

    @transaction_currency_code.setter
    def transaction_currency_code(self, transaction_currency_code):
        """Sets the transaction_currency_code of this PendingAuthorizationTransactionRecords.

        transactionCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{transactionCurrencyCode} resource to get possible values of this field with descriptions  # noqa: E501

        :param transaction_currency_code: The transaction_currency_code of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :type: str
        """

        self._transaction_currency_code = transaction_currency_code

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this PendingAuthorizationTransactionRecords.  # noqa: E501

        TransactionAmount  # noqa: E501

        :return: The transaction_amount of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this PendingAuthorizationTransactionRecords.

        TransactionAmount  # noqa: E501

        :param transaction_amount: The transaction_amount of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :type: float
        """

        self._transaction_amount = transaction_amount

    @property
    def transaction_status(self):
        """Gets the transaction_status of this PendingAuthorizationTransactionRecords.  # noqa: E501

        AuthorizationResponseCode of the transaction. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions  # noqa: E501

        :return: The transaction_status of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this PendingAuthorizationTransactionRecords.

        AuthorizationResponseCode of the transaction. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions  # noqa: E501

        :param transaction_status: The transaction_status of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :type: str
        """

        self._transaction_status = transaction_status

    @property
    def billed_currency_code(self):
        """Gets the billed_currency_code of this PendingAuthorizationTransactionRecords.  # noqa: E501

        billedCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{billedCurrencyCode} resource to get possible values of this field with descriptions  # noqa: E501

        :return: The billed_currency_code of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :rtype: str
        """
        return self._billed_currency_code

    @billed_currency_code.setter
    def billed_currency_code(self, billed_currency_code):
        """Sets the billed_currency_code of this PendingAuthorizationTransactionRecords.

        billedCurrencyCode. This is a reference data field. Please use /v1/utilities/referenceData/{billedCurrencyCode} resource to get possible values of this field with descriptions  # noqa: E501

        :param billed_currency_code: The billed_currency_code of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :type: str
        """

        self._billed_currency_code = billed_currency_code

    @property
    def billed_amount(self):
        """Gets the billed_amount of this PendingAuthorizationTransactionRecords.  # noqa: E501

        billedAmount  # noqa: E501

        :return: The billed_amount of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :rtype: float
        """
        return self._billed_amount

    @billed_amount.setter
    def billed_amount(self, billed_amount):
        """Sets the billed_amount of this PendingAuthorizationTransactionRecords.

        billedAmount  # noqa: E501

        :param billed_amount: The billed_amount of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :type: float
        """

        self._billed_amount = billed_amount

    @property
    def merchant_name(self):
        """Gets the merchant_name of this PendingAuthorizationTransactionRecords.  # noqa: E501

        Merchant Name  # noqa: E501

        :return: The merchant_name of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this PendingAuthorizationTransactionRecords.

        Merchant Name  # noqa: E501

        :param merchant_name: The merchant_name of this PendingAuthorizationTransactionRecords.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PendingAuthorizationTransactionRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PendingAuthorizationTransactionRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
