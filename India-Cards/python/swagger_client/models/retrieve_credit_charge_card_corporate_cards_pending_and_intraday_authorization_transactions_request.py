# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tokenized_card_number': 'str',
        'corporate_officer_details': 'CorporateOfficerDetails',
        'transaction_type': 'str',
        'pending_authorization_transaction': 'PendingAuthorizationTransaction',
        'history_and_intraday_transaction': 'HistoryAndIntradayTransaction'
    }

    attribute_map = {
        'tokenized_card_number': 'tokenizedCardNumber',
        'corporate_officer_details': 'corporateOfficerDetails',
        'transaction_type': 'transactionType',
        'pending_authorization_transaction': 'pendingAuthorizationTransaction',
        'history_and_intraday_transaction': 'historyAndIntradayTransaction'
    }

    def __init__(self, tokenized_card_number=None, corporate_officer_details=None, transaction_type=None, pending_authorization_transaction=None, history_and_intraday_transaction=None):  # noqa: E501
        """RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest - a model defined in Swagger"""  # noqa: E501
        self._tokenized_card_number = None
        self._corporate_officer_details = None
        self._transaction_type = None
        self._pending_authorization_transaction = None
        self._history_and_intraday_transaction = None
        self.discriminator = None
        self.tokenized_card_number = tokenized_card_number
        if corporate_officer_details is not None:
            self.corporate_officer_details = corporate_officer_details
        self.transaction_type = transaction_type
        if pending_authorization_transaction is not None:
            self.pending_authorization_transaction = pending_authorization_transaction
        if history_and_intraday_transaction is not None:
            self.history_and_intraday_transaction = history_and_intraday_transaction

    @property
    def tokenized_card_number(self):
        """Gets the tokenized_card_number of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501

        Tokenized card number  # noqa: E501

        :return: The tokenized_card_number of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._tokenized_card_number

    @tokenized_card_number.setter
    def tokenized_card_number(self, tokenized_card_number):
        """Sets the tokenized_card_number of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.

        Tokenized card number  # noqa: E501

        :param tokenized_card_number: The tokenized_card_number of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :type: str
        """
        if tokenized_card_number is None:
            raise ValueError("Invalid value for `tokenized_card_number`, must not be `None`")  # noqa: E501

        self._tokenized_card_number = tokenized_card_number

    @property
    def corporate_officer_details(self):
        """Gets the corporate_officer_details of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501


        :return: The corporate_officer_details of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :rtype: CorporateOfficerDetails
        """
        return self._corporate_officer_details

    @corporate_officer_details.setter
    def corporate_officer_details(self, corporate_officer_details):
        """Sets the corporate_officer_details of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.


        :param corporate_officer_details: The corporate_officer_details of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :type: CorporateOfficerDetails
        """

        self._corporate_officer_details = corporate_officer_details

    @property
    def transaction_type(self):
        """Gets the transaction_type of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501

        transactionType. This is a reference data field. Please use /v1/utilities/referenceData/{transactionType} resource to get possible values of this field with descriptions  # noqa: E501

        :return: The transaction_type of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.

        transactionType. This is a reference data field. Please use /v1/utilities/referenceData/{transactionType} resource to get possible values of this field with descriptions  # noqa: E501

        :param transaction_type: The transaction_type of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :type: str
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def pending_authorization_transaction(self):
        """Gets the pending_authorization_transaction of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501


        :return: The pending_authorization_transaction of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :rtype: PendingAuthorizationTransaction
        """
        return self._pending_authorization_transaction

    @pending_authorization_transaction.setter
    def pending_authorization_transaction(self, pending_authorization_transaction):
        """Sets the pending_authorization_transaction of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.


        :param pending_authorization_transaction: The pending_authorization_transaction of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :type: PendingAuthorizationTransaction
        """

        self._pending_authorization_transaction = pending_authorization_transaction

    @property
    def history_and_intraday_transaction(self):
        """Gets the history_and_intraday_transaction of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501


        :return: The history_and_intraday_transaction of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :rtype: HistoryAndIntradayTransaction
        """
        return self._history_and_intraday_transaction

    @history_and_intraday_transaction.setter
    def history_and_intraday_transaction(self, history_and_intraday_transaction):
        """Sets the history_and_intraday_transaction of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.


        :param history_and_intraday_transaction: The history_and_intraday_transaction of this RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest.  # noqa: E501
        :type: HistoryAndIntradayTransaction
        """

        self._history_and_intraday_transaction = history_and_intraday_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveCreditChargeCardCorporateCardsPendingAndIntradayAuthorizationTransactionsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
