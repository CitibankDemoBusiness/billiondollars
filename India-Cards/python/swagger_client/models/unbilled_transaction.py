# coding: utf-8

"""
    Cards

    The Cards API allows you to perform actions on the actual credit cards of the Citi Customer who authorized your app.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnbilledTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_date': 'date',
        'transaction_description': 'str',
        'transaction_reference_id': 'str',
        'transaction_amount': 'float',
        'currency_code': 'str'
    }

    attribute_map = {
        'transaction_date': 'transactionDate',
        'transaction_description': 'transactionDescription',
        'transaction_reference_id': 'transactionReferenceId',
        'transaction_amount': 'transactionAmount',
        'currency_code': 'currencyCode'
    }

    def __init__(self, transaction_date=None, transaction_description=None, transaction_reference_id=None, transaction_amount=None, currency_code=None):  # noqa: E501
        """UnbilledTransaction - a model defined in Swagger"""  # noqa: E501
        self._transaction_date = None
        self._transaction_description = None
        self._transaction_reference_id = None
        self._transaction_amount = None
        self._currency_code = None
        self.discriminator = None
        self.transaction_date = transaction_date
        self.transaction_description = transaction_description
        if transaction_reference_id is not None:
            self.transaction_reference_id = transaction_reference_id
        self.transaction_amount = transaction_amount
        if currency_code is not None:
            self.currency_code = currency_code

    @property
    def transaction_date(self):
        """Gets the transaction_date of this UnbilledTransaction.  # noqa: E501

        Transaction date in YYYY-MM-DD format value conforming to ISO 8601.  # noqa: E501

        :return: The transaction_date of this UnbilledTransaction.  # noqa: E501
        :rtype: date
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this UnbilledTransaction.

        Transaction date in YYYY-MM-DD format value conforming to ISO 8601.  # noqa: E501

        :param transaction_date: The transaction_date of this UnbilledTransaction.  # noqa: E501
        :type: date
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")  # noqa: E501

        self._transaction_date = transaction_date

    @property
    def transaction_description(self):
        """Gets the transaction_description of this UnbilledTransaction.  # noqa: E501

        Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.  # noqa: E501

        :return: The transaction_description of this UnbilledTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_description

    @transaction_description.setter
    def transaction_description(self, transaction_description):
        """Sets the transaction_description of this UnbilledTransaction.

        Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.  # noqa: E501

        :param transaction_description: The transaction_description of this UnbilledTransaction.  # noqa: E501
        :type: str
        """
        if transaction_description is None:
            raise ValueError("Invalid value for `transaction_description`, must not be `None`")  # noqa: E501

        self._transaction_description = transaction_description

    @property
    def transaction_reference_id(self):
        """Gets the transaction_reference_id of this UnbilledTransaction.  # noqa: E501

        Reference Id to uniquely identify the transaction.This is applicable for successful transactions.   # noqa: E501

        :return: The transaction_reference_id of this UnbilledTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_reference_id

    @transaction_reference_id.setter
    def transaction_reference_id(self, transaction_reference_id):
        """Sets the transaction_reference_id of this UnbilledTransaction.

        Reference Id to uniquely identify the transaction.This is applicable for successful transactions.   # noqa: E501

        :param transaction_reference_id: The transaction_reference_id of this UnbilledTransaction.  # noqa: E501
        :type: str
        """

        self._transaction_reference_id = transaction_reference_id

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this UnbilledTransaction.  # noqa: E501

        Transaction amount in local currency.  # noqa: E501

        :return: The transaction_amount of this UnbilledTransaction.  # noqa: E501
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this UnbilledTransaction.

        Transaction amount in local currency.  # noqa: E501

        :param transaction_amount: The transaction_amount of this UnbilledTransaction.  # noqa: E501
        :type: float
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")  # noqa: E501

        self._transaction_amount = transaction_amount

    @property
    def currency_code(self):
        """Gets the currency_code of this UnbilledTransaction.  # noqa: E501

        The currency code in ISO 4217 format  # noqa: E501

        :return: The currency_code of this UnbilledTransaction.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this UnbilledTransaction.

        The currency code in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this UnbilledTransaction.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnbilledTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnbilledTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
