/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Upload Application Documents
        /// </summary>
        /// <remarks>
        /// This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Insert the documents in documentum.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>InsertDocumentResponse</returns>
        InsertDocumentResponse V1ApacOnboardingApplicationsApplicationIdDocumentsPost (InsertDocumentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Upload Application Documents
        /// </summary>
        /// <remarks>
        /// This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Insert the documents in documentum.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>ApiResponse of InsertDocumentResponse</returns>
        ApiResponse<InsertDocumentResponse> V1ApacOnboardingApplicationsApplicationIdDocumentsPostWithHttpInfo (InsertDocumentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Supp Applicant Delete
        /// </summary>
        /// <remarks>
        /// Allows primary card holder to delete the supplementary card application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant..</param>
        /// <returns></returns>
        void V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut (ApplicantDeleteRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId);

        /// <summary>
        /// Supp Applicant Delete
        /// </summary>
        /// <remarks>
        /// Allows primary card holder to delete the supplementary card application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant..</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutWithHttpInfo (ApplicantDeleteRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId);
        /// <summary>
        /// Supp Applicant Update
        /// </summary>
        /// <remarks>
        /// Allows primary card holder to edit or update the supplementary card application details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.</param>
        /// <returns></returns>
        void V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut (ApplicantUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId);

        /// <summary>
        /// Supp Applicant Update
        /// </summary>
        /// <remarks>
        /// Allows primary card holder to edit or update the supplementary card application details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutWithHttpInfo (ApplicantUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId);
        /// <summary>
        /// Supp Applicant Inquiry
        /// </summary>
        /// <remarks>
        /// This API returns supplementary application details for the specific supplementary application id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="controlFlowId">It is used to control the flow for subsequent requests in the session.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)</param>
        /// <returns>ApplicantInquiryResponse</returns>
        ApplicantInquiryResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId, string applicantId = null);

        /// <summary>
        /// Supp Applicant Inquiry
        /// </summary>
        /// <remarks>
        /// This API returns supplementary application details for the specific supplementary application id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="controlFlowId">It is used to control the flow for subsequent requests in the session.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)</param>
        /// <returns>ApiResponse of ApplicantInquiryResponse</returns>
        ApiResponse<ApplicantInquiryResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId, string applicantId = null);
        /// <summary>
        /// Supp Applicant Add
        /// </summary>
        /// <remarks>
        /// This API creates a new supplementary card application along with primary card application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>ApplicantAddResponse</returns>
        ApplicantAddResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost (ApplicantAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Supp Applicant Add
        /// </summary>
        /// <remarks>
        /// This API creates a new supplementary card application along with primary card application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>ApiResponse of ApplicantAddResponse</returns>
        ApiResponse<ApplicantAddResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostWithHttpInfo (ApplicantAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Screen Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API submits the specified unsecured credit application for screening.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application</param>
        /// <returns>BackgroundScreeningResponse</returns>
        BackgroundScreeningResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost (BackgroundScreeningRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Screen Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API submits the specified unsecured credit application for screening.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application</param>
        /// <returns>ApiResponse of BackgroundScreeningResponse</returns>
        ApiResponse<BackgroundScreeningResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostWithHttpInfo (BackgroundScreeningRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Application Inquiry
        /// </summary>
        /// <remarks>
        /// This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique identifier for the application.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (optional)</param>
        /// <returns>ApplicationInquiryResponse</returns>
        ApplicationInquiryResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId = null);

        /// <summary>
        /// Application Inquiry
        /// </summary>
        /// <remarks>
        /// This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique identifier for the application.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (optional)</param>
        /// <returns>ApiResponse of ApplicationInquiryResponse</returns>
        ApiResponse<ApplicationInquiryResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId = null);
        /// <summary>
        /// Request Credit Application Decision
        /// </summary>
        /// <remarks>
        /// This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>InPrincipleApprovalResponse</returns>
        InPrincipleApprovalResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost (InPrincipleApprovalRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Request Credit Application Decision
        /// </summary>
        /// <remarks>
        /// This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>ApiResponse of InPrincipleApprovalResponse</returns>
        ApiResponse<InPrincipleApprovalResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostWithHttpInfo (InPrincipleApprovalRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Accept Cross Sell Products
        /// </summary>
        /// <remarks>
        /// This API accepts specified cross-sell product offers that were returned in the application decision.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to accept the product offered in the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns></returns>
        void V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost (OfferAcceptanceRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Accept Cross Sell Products
        /// </summary>
        /// <remarks>
        /// This API accepts specified cross-sell product offers that were returned in the application decision.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to accept the product offered in the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostWithHttpInfo (OfferAcceptanceRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Update Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API updates a saved application to correct information that was previously blank.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>ApplicationUpdateResponse</returns>
        ApplicationUpdateResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut (ApplicationUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Update Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API updates a saved application to correct information that was previously blank.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>ApiResponse of ApplicationUpdateResponse</returns>
        ApiResponse<ApplicationUpdateResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutWithHttpInfo (ApplicationUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Check Application Status
        /// </summary>
        /// <remarks>
        /// This API returns the status for a specified submitted application and takes the application id as parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">the ID of the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="controlFlowId">Control Flow Id</param>
        /// <returns>ApplicationStatusResponse</returns>
        ApplicationStatusResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet (string applicationId, string authorization, string uuid, string accept, string clientId, string controlFlowId);

        /// <summary>
        /// Check Application Status
        /// </summary>
        /// <remarks>
        /// This API returns the status for a specified submitted application and takes the application id as parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">the ID of the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="controlFlowId">Control Flow Id</param>
        /// <returns>ApiResponse of ApplicationStatusResponse</returns>
        ApiResponse<ApplicationStatusResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetWithHttpInfo (string applicationId, string authorization, string uuid, string accept, string clientId, string controlFlowId);
        /// <summary>
        /// Submit Application
        /// </summary>
        /// <remarks>
        /// This API submits the created application to host systems for a particular application id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns></returns>
        void V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost (FinalSubmitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Submit Application
        /// </summary>
        /// <remarks>
        /// This API submits the created application to host systems for a particular application id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostWithHttpInfo (FinalSubmitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Create Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response (optional)</param>
        /// <returns>ApplicationAddResponse</returns>
        ApplicationAddResponse V1ApacOnboardingProductsUnsecuredApplicationsPost (ApplicationAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null);

        /// <summary>
        /// Create Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response (optional)</param>
        /// <returns>ApiResponse of ApplicationAddResponse</returns>
        ApiResponse<ApplicationAddResponse> V1ApacOnboardingProductsUnsecuredApplicationsPostWithHttpInfo (ApplicationAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null);
        /// <summary>
        /// Submit Prospect
        /// </summary>
        /// <remarks>
        /// This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Prospect Add Request</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ProspectAddResponse</returns>
        ProspectAddResponse V1ApacOnboardingProspectsPost (ProspectAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Submit Prospect
        /// </summary>
        /// <remarks>
        /// This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Prospect Add Request</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of ProspectAddResponse</returns>
        ApiResponse<ProspectAddResponse> V1ApacOnboardingProspectsPostWithHttpInfo (ProspectAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Upload Application Documents
        /// </summary>
        /// <remarks>
        /// This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Insert the documents in documentum.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>Task of InsertDocumentResponse</returns>
        System.Threading.Tasks.Task<InsertDocumentResponse> V1ApacOnboardingApplicationsApplicationIdDocumentsPostAsync (InsertDocumentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Upload Application Documents
        /// </summary>
        /// <remarks>
        /// This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Insert the documents in documentum.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>Task of ApiResponse (InsertDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsertDocumentResponse>> V1ApacOnboardingApplicationsApplicationIdDocumentsPostAsyncWithHttpInfo (InsertDocumentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Supp Applicant Delete
        /// </summary>
        /// <remarks>
        /// Allows primary card holder to delete the supplementary card application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant..</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsync (ApplicantDeleteRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId);

        /// <summary>
        /// Supp Applicant Delete
        /// </summary>
        /// <remarks>
        /// Allows primary card holder to delete the supplementary card application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant..</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsyncWithHttpInfo (ApplicantDeleteRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId);
        /// <summary>
        /// Supp Applicant Update
        /// </summary>
        /// <remarks>
        /// Allows primary card holder to edit or update the supplementary card application details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsync (ApplicantUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId);

        /// <summary>
        /// Supp Applicant Update
        /// </summary>
        /// <remarks>
        /// Allows primary card holder to edit or update the supplementary card application details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsyncWithHttpInfo (ApplicantUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId);
        /// <summary>
        /// Supp Applicant Inquiry
        /// </summary>
        /// <remarks>
        /// This API returns supplementary application details for the specific supplementary application id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="controlFlowId">It is used to control the flow for subsequent requests in the session.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)</param>
        /// <returns>Task of ApplicantInquiryResponse</returns>
        System.Threading.Tasks.Task<ApplicantInquiryResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsync (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId, string applicantId = null);

        /// <summary>
        /// Supp Applicant Inquiry
        /// </summary>
        /// <remarks>
        /// This API returns supplementary application details for the specific supplementary application id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="controlFlowId">It is used to control the flow for subsequent requests in the session.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicantInquiryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicantInquiryResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId, string applicantId = null);
        /// <summary>
        /// Supp Applicant Add
        /// </summary>
        /// <remarks>
        /// This API creates a new supplementary card application along with primary card application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>Task of ApplicantAddResponse</returns>
        System.Threading.Tasks.Task<ApplicantAddResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsync (ApplicantAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Supp Applicant Add
        /// </summary>
        /// <remarks>
        /// This API creates a new supplementary card application along with primary card application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>Task of ApiResponse (ApplicantAddResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicantAddResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsyncWithHttpInfo (ApplicantAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Screen Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API submits the specified unsecured credit application for screening.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application</param>
        /// <returns>Task of BackgroundScreeningResponse</returns>
        System.Threading.Tasks.Task<BackgroundScreeningResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsync (BackgroundScreeningRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Screen Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API submits the specified unsecured credit application for screening.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application</param>
        /// <returns>Task of ApiResponse (BackgroundScreeningResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackgroundScreeningResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsyncWithHttpInfo (BackgroundScreeningRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Application Inquiry
        /// </summary>
        /// <remarks>
        /// This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique identifier for the application.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (optional)</param>
        /// <returns>Task of ApplicationInquiryResponse</returns>
        System.Threading.Tasks.Task<ApplicationInquiryResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsync (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId = null);

        /// <summary>
        /// Application Inquiry
        /// </summary>
        /// <remarks>
        /// This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique identifier for the application.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationInquiryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationInquiryResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId = null);
        /// <summary>
        /// Request Credit Application Decision
        /// </summary>
        /// <remarks>
        /// This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>Task of InPrincipleApprovalResponse</returns>
        System.Threading.Tasks.Task<InPrincipleApprovalResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsync (InPrincipleApprovalRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Request Credit Application Decision
        /// </summary>
        /// <remarks>
        /// This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>Task of ApiResponse (InPrincipleApprovalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InPrincipleApprovalResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsyncWithHttpInfo (InPrincipleApprovalRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Accept Cross Sell Products
        /// </summary>
        /// <remarks>
        /// This API accepts specified cross-sell product offers that were returned in the application decision.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to accept the product offered in the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsync (OfferAcceptanceRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Accept Cross Sell Products
        /// </summary>
        /// <remarks>
        /// This API accepts specified cross-sell product offers that were returned in the application decision.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to accept the product offered in the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsyncWithHttpInfo (OfferAcceptanceRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Update Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API updates a saved application to correct information that was previously blank.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>Task of ApplicationUpdateResponse</returns>
        System.Threading.Tasks.Task<ApplicationUpdateResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsync (ApplicationUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Update Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API updates a saved application to correct information that was previously blank.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>Task of ApiResponse (ApplicationUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationUpdateResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsyncWithHttpInfo (ApplicationUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Check Application Status
        /// </summary>
        /// <remarks>
        /// This API returns the status for a specified submitted application and takes the application id as parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">the ID of the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="controlFlowId">Control Flow Id</param>
        /// <returns>Task of ApplicationStatusResponse</returns>
        System.Threading.Tasks.Task<ApplicationStatusResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsync (string applicationId, string authorization, string uuid, string accept, string clientId, string controlFlowId);

        /// <summary>
        /// Check Application Status
        /// </summary>
        /// <remarks>
        /// This API returns the status for a specified submitted application and takes the application id as parameter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">the ID of the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="controlFlowId">Control Flow Id</param>
        /// <returns>Task of ApiResponse (ApplicationStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationStatusResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsyncWithHttpInfo (string applicationId, string authorization, string uuid, string accept, string clientId, string controlFlowId);
        /// <summary>
        /// Submit Application
        /// </summary>
        /// <remarks>
        /// This API submits the created application to host systems for a particular application id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsync (FinalSubmitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);

        /// <summary>
        /// Submit Application
        /// </summary>
        /// <remarks>
        /// This API submits the created application to host systems for a particular application id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsyncWithHttpInfo (FinalSubmitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId);
        /// <summary>
        /// Create Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response (optional)</param>
        /// <returns>Task of ApplicationAddResponse</returns>
        System.Threading.Tasks.Task<ApplicationAddResponse> V1ApacOnboardingProductsUnsecuredApplicationsPostAsync (ApplicationAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null);

        /// <summary>
        /// Create Unsecured Credit Application
        /// </summary>
        /// <remarks>
        /// This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationAddResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationAddResponse>> V1ApacOnboardingProductsUnsecuredApplicationsPostAsyncWithHttpInfo (ApplicationAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null);
        /// <summary>
        /// Submit Prospect
        /// </summary>
        /// <remarks>
        /// This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Prospect Add Request</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ProspectAddResponse</returns>
        System.Threading.Tasks.Task<ProspectAddResponse> V1ApacOnboardingProspectsPostAsync (ProspectAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Submit Prospect
        /// </summary>
        /// <remarks>
        /// This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Prospect Add Request</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (ProspectAddResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProspectAddResponse>> V1ApacOnboardingProspectsPostAsyncWithHttpInfo (ProspectAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Upload Application Documents This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Insert the documents in documentum.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>InsertDocumentResponse</returns>
        public InsertDocumentResponse V1ApacOnboardingApplicationsApplicationIdDocumentsPost (InsertDocumentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<InsertDocumentResponse> localVarResponse = V1ApacOnboardingApplicationsApplicationIdDocumentsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Application Documents This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Insert the documents in documentum.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>ApiResponse of InsertDocumentResponse</returns>
        public ApiResponse< InsertDocumentResponse > V1ApacOnboardingApplicationsApplicationIdDocumentsPostWithHttpInfo (InsertDocumentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");

            var localVarPath = "/v1/apac/onboarding/applications/{applicationId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingApplicationsApplicationIdDocumentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InsertDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocumentResponse)));
        }

        /// <summary>
        /// Upload Application Documents This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Insert the documents in documentum.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>Task of InsertDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InsertDocumentResponse> V1ApacOnboardingApplicationsApplicationIdDocumentsPostAsync (InsertDocumentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<InsertDocumentResponse> localVarResponse = await V1ApacOnboardingApplicationsApplicationIdDocumentsPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload Application Documents This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Insert the documents in documentum.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>Task of ApiResponse (InsertDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InsertDocumentResponse>> V1ApacOnboardingApplicationsApplicationIdDocumentsPostAsyncWithHttpInfo (InsertDocumentRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingApplicationsApplicationIdDocumentsPost");

            var localVarPath = "/v1/apac/onboarding/applications/{applicationId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingApplicationsApplicationIdDocumentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InsertDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InsertDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InsertDocumentResponse)));
        }

        /// <summary>
        /// Supp Applicant Delete Allows primary card holder to delete the supplementary card application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant..</param>
        /// <returns></returns>
        public void V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut (ApplicantDeleteRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId)
        {
             V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId);
        }

        /// <summary>
        /// Supp Applicant Delete Allows primary card holder to delete the supplementary card application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant..</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutWithHttpInfo (ApplicantDeleteRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'applicantId' is set
            if (applicantId == null)
                throw new ApiException(400, "Missing required parameter 'applicantId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (applicantId != null) localVarPathParams.Add("applicantId", this.Configuration.ApiClient.ParameterToString(applicantId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Supp Applicant Delete Allows primary card holder to delete the supplementary card application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant..</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsync (ApplicantDeleteRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId)
        {
             await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId);

        }

        /// <summary>
        /// Supp Applicant Delete Allows primary card holder to delete the supplementary card application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant..</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsyncWithHttpInfo (ApplicantDeleteRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");
            // verify the required parameter 'applicantId' is set
            if (applicantId == null)
                throw new ApiException(400, "Missing required parameter 'applicantId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (applicantId != null) localVarPathParams.Add("applicantId", this.Configuration.ApiClient.ParameterToString(applicantId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Supp Applicant Update Allows primary card holder to edit or update the supplementary card application details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.</param>
        /// <returns></returns>
        public void V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut (ApplicantUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId)
        {
             V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId);
        }

        /// <summary>
        /// Supp Applicant Update Allows primary card holder to edit or update the supplementary card application details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutWithHttpInfo (ApplicantUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'applicantId' is set
            if (applicantId == null)
                throw new ApiException(400, "Missing required parameter 'applicantId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (applicantId != null) localVarPathParams.Add("applicantId", this.Configuration.ApiClient.ParameterToString(applicantId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Supp Applicant Update Allows primary card holder to edit or update the supplementary card application details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsync (ApplicantUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId)
        {
             await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId);

        }

        /// <summary>
        /// Supp Applicant Update Allows primary card holder to edit or update the supplementary card application details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsyncWithHttpInfo (ApplicantUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId, string applicantId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");
            // verify the required parameter 'applicantId' is set
            if (applicantId == null)
                throw new ApiException(400, "Missing required parameter 'applicantId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (applicantId != null) localVarPathParams.Add("applicantId", this.Configuration.ApiClient.ParameterToString(applicantId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Supp Applicant Inquiry This API returns supplementary application details for the specific supplementary application id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="controlFlowId">It is used to control the flow for subsequent requests in the session.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)</param>
        /// <returns>ApplicantInquiryResponse</returns>
        public ApplicantInquiryResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId, string applicantId = null)
        {
             ApiResponse<ApplicantInquiryResponse> localVarResponse = V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetWithHttpInfo(authorization, uuid, accept, clientId, applicationId, controlFlowId, applicantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Supp Applicant Inquiry This API returns supplementary application details for the specific supplementary application id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="controlFlowId">It is used to control the flow for subsequent requests in the session.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)</param>
        /// <returns>ApiResponse of ApplicantInquiryResponse</returns>
        public ApiResponse< ApplicantInquiryResponse > V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId, string applicantId = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'controlFlowId' is set
            if (controlFlowId == null)
                throw new ApiException(400, "Missing required parameter 'controlFlowId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (applicantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicantId", applicantId)); // query parameter
            if (controlFlowId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controlFlowId", controlFlowId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicantInquiryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicantInquiryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicantInquiryResponse)));
        }

        /// <summary>
        /// Supp Applicant Inquiry This API returns supplementary application details for the specific supplementary application id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="controlFlowId">It is used to control the flow for subsequent requests in the session.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)</param>
        /// <returns>Task of ApplicantInquiryResponse</returns>
        public async System.Threading.Tasks.Task<ApplicantInquiryResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsync (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId, string applicantId = null)
        {
             ApiResponse<ApplicantInquiryResponse> localVarResponse = await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, applicationId, controlFlowId, applicantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Supp Applicant Inquiry This API returns supplementary application details for the specific supplementary application id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <param name="controlFlowId">It is used to control the flow for subsequent requests in the session.</param>
        /// <param name="applicantId">Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicantInquiryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicantInquiryResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId, string applicantId = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");
            // verify the required parameter 'controlFlowId' is set
            if (controlFlowId == null)
                throw new ApiException(400, "Missing required parameter 'controlFlowId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (applicantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicantId", applicantId)); // query parameter
            if (controlFlowId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controlFlowId", controlFlowId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicantInquiryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicantInquiryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicantInquiryResponse)));
        }

        /// <summary>
        /// Supp Applicant Add This API creates a new supplementary card application along with primary card application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>ApplicantAddResponse</returns>
        public ApplicantAddResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost (ApplicantAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<ApplicantAddResponse> localVarResponse = V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Supp Applicant Add This API creates a new supplementary card application along with primary card application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>ApiResponse of ApplicantAddResponse</returns>
        public ApiResponse< ApplicantAddResponse > V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostWithHttpInfo (ApplicantAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicantAddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicantAddResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicantAddResponse)));
        }

        /// <summary>
        /// Supp Applicant Add This API creates a new supplementary card application along with primary card application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>Task of ApplicantAddResponse</returns>
        public async System.Threading.Tasks.Task<ApplicantAddResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsync (ApplicantAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<ApplicantAddResponse> localVarResponse = await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Supp Applicant Add This API creates a new supplementary card application along with primary card application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Add applicant details to the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Types that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>Task of ApiResponse (ApplicantAddResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicantAddResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsyncWithHttpInfo (ApplicantAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicantAddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicantAddResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicantAddResponse)));
        }

        /// <summary>
        /// Screen Unsecured Credit Application This API submits the specified unsecured credit application for screening.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application</param>
        /// <returns>BackgroundScreeningResponse</returns>
        public BackgroundScreeningResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost (BackgroundScreeningRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<BackgroundScreeningResponse> localVarResponse = V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Screen Unsecured Credit Application This API submits the specified unsecured credit application for screening.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application</param>
        /// <returns>ApiResponse of BackgroundScreeningResponse</returns>
        public ApiResponse< BackgroundScreeningResponse > V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostWithHttpInfo (BackgroundScreeningRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/backgroundScreening";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackgroundScreeningResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BackgroundScreeningResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackgroundScreeningResponse)));
        }

        /// <summary>
        /// Screen Unsecured Credit Application This API submits the specified unsecured credit application for screening.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application</param>
        /// <returns>Task of BackgroundScreeningResponse</returns>
        public async System.Threading.Tasks.Task<BackgroundScreeningResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsync (BackgroundScreeningRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<BackgroundScreeningResponse> localVarResponse = await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Screen Unsecured Credit Application This API submits the specified unsecured credit application for screening.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application</param>
        /// <returns>Task of ApiResponse (BackgroundScreeningResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackgroundScreeningResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsyncWithHttpInfo (BackgroundScreeningRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/backgroundScreening";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackgroundScreeningResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BackgroundScreeningResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackgroundScreeningResponse)));
        }

        /// <summary>
        /// Application Inquiry This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique identifier for the application.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (optional)</param>
        /// <returns>ApplicationInquiryResponse</returns>
        public ApplicationInquiryResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId = null)
        {
             ApiResponse<ApplicationInquiryResponse> localVarResponse = V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetWithHttpInfo(authorization, uuid, accept, clientId, applicationId, controlFlowId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Application Inquiry This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique identifier for the application.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (optional)</param>
        /// <returns>ApiResponse of ApplicationInquiryResponse</returns>
        public ApiResponse< ApplicationInquiryResponse > V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (controlFlowId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controlFlowId", controlFlowId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationInquiryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationInquiryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationInquiryResponse)));
        }

        /// <summary>
        /// Application Inquiry This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique identifier for the application.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (optional)</param>
        /// <returns>Task of ApplicationInquiryResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationInquiryResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsync (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId = null)
        {
             ApiResponse<ApplicationInquiryResponse> localVarResponse = await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, applicationId, controlFlowId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Application Inquiry This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="applicationId">Unique identifier for the application.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationInquiryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationInquiryResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string applicationId, string controlFlowId = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (controlFlowId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controlFlowId", controlFlowId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationInquiryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationInquiryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationInquiryResponse)));
        }

        /// <summary>
        /// Request Credit Application Decision This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>InPrincipleApprovalResponse</returns>
        public InPrincipleApprovalResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost (InPrincipleApprovalRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<InPrincipleApprovalResponse> localVarResponse = V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request Credit Application Decision This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>ApiResponse of InPrincipleApprovalResponse</returns>
        public ApiResponse< InPrincipleApprovalResponse > V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostWithHttpInfo (InPrincipleApprovalRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/inPrincipleApprovals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InPrincipleApprovalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InPrincipleApprovalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InPrincipleApprovalResponse)));
        }

        /// <summary>
        /// Request Credit Application Decision This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>Task of InPrincipleApprovalResponse</returns>
        public async System.Threading.Tasks.Task<InPrincipleApprovalResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsync (InPrincipleApprovalRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<InPrincipleApprovalResponse> localVarResponse = await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request Credit Application Decision This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>Task of ApiResponse (InPrincipleApprovalResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InPrincipleApprovalResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsyncWithHttpInfo (InPrincipleApprovalRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/inPrincipleApprovals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InPrincipleApprovalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InPrincipleApprovalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InPrincipleApprovalResponse)));
        }

        /// <summary>
        /// Accept Cross Sell Products This API accepts specified cross-sell product offers that were returned in the application decision.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to accept the product offered in the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns></returns>
        public void V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost (OfferAcceptanceRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
        }

        /// <summary>
        /// Accept Cross Sell Products This API accepts specified cross-sell product offers that were returned in the application decision.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to accept the product offered in the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostWithHttpInfo (OfferAcceptanceRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/offerAcceptance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Accept Cross Sell Products This API accepts specified cross-sell product offers that were returned in the application decision.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to accept the product offered in the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsync (OfferAcceptanceRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);

        }

        /// <summary>
        /// Accept Cross Sell Products This API accepts specified cross-sell product offers that were returned in the application decision.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to accept the product offered in the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">the ID of the application</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsyncWithHttpInfo (OfferAcceptanceRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/offerAcceptance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Unsecured Credit Application This API updates a saved application to correct information that was previously blank.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>ApplicationUpdateResponse</returns>
        public ApplicationUpdateResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut (ApplicationUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<ApplicationUpdateResponse> localVarResponse = V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Unsecured Credit Application This API updates a saved application to correct information that was previously blank.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>ApiResponse of ApplicationUpdateResponse</returns>
        public ApiResponse< ApplicationUpdateResponse > V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutWithHttpInfo (ApplicationUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUpdateResponse)));
        }

        /// <summary>
        /// Update Unsecured Credit Application This API updates a saved application to correct information that was previously blank.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>Task of ApplicationUpdateResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationUpdateResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsync (ApplicationUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             ApiResponse<ApplicationUpdateResponse> localVarResponse = await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Unsecured Credit Application This API updates a saved application to correct information that was previously blank.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here.</param>
        /// <returns>Task of ApiResponse (ApplicationUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationUpdateResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsyncWithHttpInfo (ApplicationUpdateRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationUpdateResponse)));
        }

        /// <summary>
        /// Check Application Status This API returns the status for a specified submitted application and takes the application id as parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">the ID of the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="controlFlowId">Control Flow Id</param>
        /// <returns>ApplicationStatusResponse</returns>
        public ApplicationStatusResponse V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet (string applicationId, string authorization, string uuid, string accept, string clientId, string controlFlowId)
        {
             ApiResponse<ApplicationStatusResponse> localVarResponse = V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetWithHttpInfo(applicationId, authorization, uuid, accept, clientId, controlFlowId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check Application Status This API returns the status for a specified submitted application and takes the application id as parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">the ID of the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="controlFlowId">Control Flow Id</param>
        /// <returns>ApiResponse of ApplicationStatusResponse</returns>
        public ApiResponse< ApplicationStatusResponse > V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetWithHttpInfo (string applicationId, string authorization, string uuid, string accept, string clientId, string controlFlowId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'controlFlowId' is set
            if (controlFlowId == null)
                throw new ApiException(400, "Missing required parameter 'controlFlowId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (controlFlowId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controlFlowId", controlFlowId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatusResponse)));
        }

        /// <summary>
        /// Check Application Status This API returns the status for a specified submitted application and takes the application id as parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">the ID of the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="controlFlowId">Control Flow Id</param>
        /// <returns>Task of ApplicationStatusResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationStatusResponse> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsync (string applicationId, string authorization, string uuid, string accept, string clientId, string controlFlowId)
        {
             ApiResponse<ApplicationStatusResponse> localVarResponse = await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsyncWithHttpInfo(applicationId, authorization, uuid, accept, clientId, controlFlowId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check Application Status This API returns the status for a specified submitted application and takes the application id as parameter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">the ID of the application</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="controlFlowId">Control Flow Id</param>
        /// <returns>Task of ApiResponse (ApplicationStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationStatusResponse>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsyncWithHttpInfo (string applicationId, string authorization, string uuid, string accept, string clientId, string controlFlowId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");
            // verify the required parameter 'controlFlowId' is set
            if (controlFlowId == null)
                throw new ApiException(400, "Missing required parameter 'controlFlowId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (controlFlowId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "controlFlowId", controlFlowId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationStatusResponse)));
        }

        /// <summary>
        /// Submit Application This API submits the created application to host systems for a particular application id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns></returns>
        public void V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost (FinalSubmitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
        }

        /// <summary>
        /// Submit Application This API submits the created application to host systems for a particular application id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostWithHttpInfo (FinalSubmitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/submission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Submit Application This API submits the created application to host systems for a particular application id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsync (FinalSubmitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
             await V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);

        }

        /// <summary>
        /// Submit Application This API submits the created application to host systems for a particular application id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="applicationId">The unique identifier of the application.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsyncWithHttpInfo (FinalSubmitRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string applicationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/submission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Unsecured Credit Application This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response (optional)</param>
        /// <returns>ApplicationAddResponse</returns>
        public ApplicationAddResponse V1ApacOnboardingProductsUnsecuredApplicationsPost (ApplicationAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null)
        {
             ApiResponse<ApplicationAddResponse> localVarResponse = V1ApacOnboardingProductsUnsecuredApplicationsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Unsecured Credit Application This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response (optional)</param>
        /// <returns>ApiResponse of ApplicationAddResponse</returns>
        public ApiResponse< ApplicationAddResponse > V1ApacOnboardingProductsUnsecuredApplicationsPostWithHttpInfo (ApplicationAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationAddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationAddResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationAddResponse)));
        }

        /// <summary>
        /// Create Unsecured Credit Application This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response (optional)</param>
        /// <returns>Task of ApplicationAddResponse</returns>
        public async System.Threading.Tasks.Task<ApplicationAddResponse> V1ApacOnboardingProductsUnsecuredApplicationsPostAsync (ApplicationAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null)
        {
             ApiResponse<ApplicationAddResponse> localVarResponse = await V1ApacOnboardingProductsUnsecuredApplicationsPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Unsecured Credit Application This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Input Data to submit the application.</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="acceptLanguage">List of acceptable human languages for response (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationAddResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationAddResponse>> V1ApacOnboardingProductsUnsecuredApplicationsPostAsyncWithHttpInfo (ApplicationAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProductsUnsecuredApplicationsPost");

            var localVarPath = "/v1/apac/onboarding/products/unsecured/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProductsUnsecuredApplicationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationAddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationAddResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationAddResponse)));
        }

        /// <summary>
        /// Submit Prospect This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Prospect Add Request</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ProspectAddResponse</returns>
        public ProspectAddResponse V1ApacOnboardingProspectsPost (ProspectAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<ProspectAddResponse> localVarResponse = V1ApacOnboardingProspectsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit Prospect This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Prospect Add Request</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of ProspectAddResponse</returns>
        public ApiResponse< ProspectAddResponse > V1ApacOnboardingProspectsPostWithHttpInfo (ProspectAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProspectsPost");

            var localVarPath = "/v1/apac/onboarding/prospects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProspectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProspectAddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProspectAddResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProspectAddResponse)));
        }

        /// <summary>
        /// Submit Prospect This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Prospect Add Request</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ProspectAddResponse</returns>
        public async System.Threading.Tasks.Task<ProspectAddResponse> V1ApacOnboardingProspectsPostAsync (ProspectAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<ProspectAddResponse> localVarResponse = await V1ApacOnboardingProspectsPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit Prospect This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Prospect Add Request</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (ProspectAddResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProspectAddResponse>> V1ApacOnboardingProspectsPostAsyncWithHttpInfo (ProspectAddRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1ApacOnboardingProspectsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1ApacOnboardingProspectsPost");

            var localVarPath = "/v1/apac/onboarding/prospects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1ApacOnboardingProspectsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProspectAddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProspectAddResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProspectAddResponse)));
        }

    }
}
