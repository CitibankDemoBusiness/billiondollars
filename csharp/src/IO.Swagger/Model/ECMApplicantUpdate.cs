/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ECMApplicantUpdate
    /// </summary>
    [DataContract]
        public partial class ECMApplicantUpdate :  IEquatable<ECMApplicantUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ECMApplicantUpdate" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="demographics">demographics.</param>
        /// <param name="education">education.</param>
        /// <param name="identificationDocumentDetails">identificationDocumentDetails.</param>
        /// <param name="employmentDetails">employmentDetails.</param>
        /// <param name="phone">phone.</param>
        /// <param name="address">address.</param>
        /// <param name="contactPreference">contactPreference.</param>
        /// <param name="contactConsent">contactConsent.</param>
        /// <param name="additionalData">additionalData.</param>
        /// <param name="marketingConsent">marketingConsent.</param>
        /// <param name="parentInformation">parentInformation.</param>
        /// <param name="financialInformation">financialInformation.</param>
        /// <param name="consentDetails">consentDetails.</param>
        public ECMApplicantUpdate(ECMNameUpdate name = default(ECMNameUpdate), ECMDemographicsUpdate demographics = default(ECMDemographicsUpdate), ECMEducationUpdate education = default(ECMEducationUpdate), List<ECMIdentificationDocumentDetailsUpdate> identificationDocumentDetails = default(List<ECMIdentificationDocumentDetailsUpdate>), List<ECMEmploymentDetailsUpdate> employmentDetails = default(List<ECMEmploymentDetailsUpdate>), List<ECMPhoneUpdate> phone = default(List<ECMPhoneUpdate>), List<ECMAddressUpdate> address = default(List<ECMAddressUpdate>), ECMContactPreferenceUpdate contactPreference = default(ECMContactPreferenceUpdate), ECMContactConsentUpdate contactConsent = default(ECMContactConsentUpdate), ECMAdditionalDataUpdate additionalData = default(ECMAdditionalDataUpdate), MarketingConsent marketingConsent = default(MarketingConsent), ECMParentInformationUpdate parentInformation = default(ECMParentInformationUpdate), ECMFinancialInformationUpdate financialInformation = default(ECMFinancialInformationUpdate), List<ECMConsentDetails> consentDetails = default(List<ECMConsentDetails>))
        {
            this.Name = name;
            this.Demographics = demographics;
            this.Education = education;
            this.IdentificationDocumentDetails = identificationDocumentDetails;
            this.EmploymentDetails = employmentDetails;
            this.Phone = phone;
            this.Address = address;
            this.ContactPreference = contactPreference;
            this.ContactConsent = contactConsent;
            this.AdditionalData = additionalData;
            this.MarketingConsent = marketingConsent;
            this.ParentInformation = parentInformation;
            this.FinancialInformation = financialInformation;
            this.ConsentDetails = consentDetails;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public ECMNameUpdate Name { get; set; }

        /// <summary>
        /// Gets or Sets Demographics
        /// </summary>
        [DataMember(Name="demographics", EmitDefaultValue=false)]
        public ECMDemographicsUpdate Demographics { get; set; }

        /// <summary>
        /// Gets or Sets Education
        /// </summary>
        [DataMember(Name="education", EmitDefaultValue=false)]
        public ECMEducationUpdate Education { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationDocumentDetails
        /// </summary>
        [DataMember(Name="identificationDocumentDetails", EmitDefaultValue=false)]
        public List<ECMIdentificationDocumentDetailsUpdate> IdentificationDocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentDetails
        /// </summary>
        [DataMember(Name="employmentDetails", EmitDefaultValue=false)]
        public List<ECMEmploymentDetailsUpdate> EmploymentDetails { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public List<ECMPhoneUpdate> Phone { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public List<ECMAddressUpdate> Address { get; set; }

        /// <summary>
        /// Gets or Sets ContactPreference
        /// </summary>
        [DataMember(Name="contactPreference", EmitDefaultValue=false)]
        public ECMContactPreferenceUpdate ContactPreference { get; set; }

        /// <summary>
        /// Gets or Sets ContactConsent
        /// </summary>
        [DataMember(Name="contactConsent", EmitDefaultValue=false)]
        public ECMContactConsentUpdate ContactConsent { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalData
        /// </summary>
        [DataMember(Name="additionalData", EmitDefaultValue=false)]
        public ECMAdditionalDataUpdate AdditionalData { get; set; }

        /// <summary>
        /// Gets or Sets MarketingConsent
        /// </summary>
        [DataMember(Name="marketingConsent", EmitDefaultValue=false)]
        public MarketingConsent MarketingConsent { get; set; }

        /// <summary>
        /// Gets or Sets ParentInformation
        /// </summary>
        [DataMember(Name="parentInformation", EmitDefaultValue=false)]
        public ECMParentInformationUpdate ParentInformation { get; set; }

        /// <summary>
        /// Gets or Sets FinancialInformation
        /// </summary>
        [DataMember(Name="financialInformation", EmitDefaultValue=false)]
        public ECMFinancialInformationUpdate FinancialInformation { get; set; }

        /// <summary>
        /// Gets or Sets ConsentDetails
        /// </summary>
        [DataMember(Name="consentDetails", EmitDefaultValue=false)]
        public List<ECMConsentDetails> ConsentDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ECMApplicantUpdate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Demographics: ").Append(Demographics).Append("\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  IdentificationDocumentDetails: ").Append(IdentificationDocumentDetails).Append("\n");
            sb.Append("  EmploymentDetails: ").Append(EmploymentDetails).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ContactPreference: ").Append(ContactPreference).Append("\n");
            sb.Append("  ContactConsent: ").Append(ContactConsent).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  MarketingConsent: ").Append(MarketingConsent).Append("\n");
            sb.Append("  ParentInformation: ").Append(ParentInformation).Append("\n");
            sb.Append("  FinancialInformation: ").Append(FinancialInformation).Append("\n");
            sb.Append("  ConsentDetails: ").Append(ConsentDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ECMApplicantUpdate);
        }

        /// <summary>
        /// Returns true if ECMApplicantUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of ECMApplicantUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ECMApplicantUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Demographics == input.Demographics ||
                    (this.Demographics != null &&
                    this.Demographics.Equals(input.Demographics))
                ) && 
                (
                    this.Education == input.Education ||
                    (this.Education != null &&
                    this.Education.Equals(input.Education))
                ) && 
                (
                    this.IdentificationDocumentDetails == input.IdentificationDocumentDetails ||
                    this.IdentificationDocumentDetails != null &&
                    input.IdentificationDocumentDetails != null &&
                    this.IdentificationDocumentDetails.SequenceEqual(input.IdentificationDocumentDetails)
                ) && 
                (
                    this.EmploymentDetails == input.EmploymentDetails ||
                    this.EmploymentDetails != null &&
                    input.EmploymentDetails != null &&
                    this.EmploymentDetails.SequenceEqual(input.EmploymentDetails)
                ) && 
                (
                    this.Phone == input.Phone ||
                    this.Phone != null &&
                    input.Phone != null &&
                    this.Phone.SequenceEqual(input.Phone)
                ) && 
                (
                    this.Address == input.Address ||
                    this.Address != null &&
                    input.Address != null &&
                    this.Address.SequenceEqual(input.Address)
                ) && 
                (
                    this.ContactPreference == input.ContactPreference ||
                    (this.ContactPreference != null &&
                    this.ContactPreference.Equals(input.ContactPreference))
                ) && 
                (
                    this.ContactConsent == input.ContactConsent ||
                    (this.ContactConsent != null &&
                    this.ContactConsent.Equals(input.ContactConsent))
                ) && 
                (
                    this.AdditionalData == input.AdditionalData ||
                    (this.AdditionalData != null &&
                    this.AdditionalData.Equals(input.AdditionalData))
                ) && 
                (
                    this.MarketingConsent == input.MarketingConsent ||
                    (this.MarketingConsent != null &&
                    this.MarketingConsent.Equals(input.MarketingConsent))
                ) && 
                (
                    this.ParentInformation == input.ParentInformation ||
                    (this.ParentInformation != null &&
                    this.ParentInformation.Equals(input.ParentInformation))
                ) && 
                (
                    this.FinancialInformation == input.FinancialInformation ||
                    (this.FinancialInformation != null &&
                    this.FinancialInformation.Equals(input.FinancialInformation))
                ) && 
                (
                    this.ConsentDetails == input.ConsentDetails ||
                    this.ConsentDetails != null &&
                    input.ConsentDetails != null &&
                    this.ConsentDetails.SequenceEqual(input.ConsentDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Demographics != null)
                    hashCode = hashCode * 59 + this.Demographics.GetHashCode();
                if (this.Education != null)
                    hashCode = hashCode * 59 + this.Education.GetHashCode();
                if (this.IdentificationDocumentDetails != null)
                    hashCode = hashCode * 59 + this.IdentificationDocumentDetails.GetHashCode();
                if (this.EmploymentDetails != null)
                    hashCode = hashCode * 59 + this.EmploymentDetails.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.ContactPreference != null)
                    hashCode = hashCode * 59 + this.ContactPreference.GetHashCode();
                if (this.ContactConsent != null)
                    hashCode = hashCode * 59 + this.ContactConsent.GetHashCode();
                if (this.AdditionalData != null)
                    hashCode = hashCode * 59 + this.AdditionalData.GetHashCode();
                if (this.MarketingConsent != null)
                    hashCode = hashCode * 59 + this.MarketingConsent.GetHashCode();
                if (this.ParentInformation != null)
                    hashCode = hashCode * 59 + this.ParentInformation.GetHashCode();
                if (this.FinancialInformation != null)
                    hashCode = hashCode * 59 + this.FinancialInformation.GetHashCode();
                if (this.ConsentDetails != null)
                    hashCode = hashCode * 59 + this.ConsentDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
