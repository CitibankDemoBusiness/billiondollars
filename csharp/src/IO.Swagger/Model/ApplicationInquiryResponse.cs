/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApplicationInquiryResponse
    /// </summary>
    [DataContract]
        public partial class ApplicationInquiryResponse :  IEquatable<ApplicationInquiryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationInquiryResponse" /> class.
        /// </summary>
        /// <param name="applicationStage">Current stage of an application.This is a reference data field. Please use /v1/apac/utilities/referenceData/{applicationStage} resource to get possible value of this field with description. You can use applicationStage field name as the referenceCode parameter to retrieve the values. (required).</param>
        /// <param name="hasAnySupplementaryFlag">Flag indicating whether the primary applicant has any supplementary..</param>
        /// <param name="ipaExpiryDate">In principle approval expiration date in  ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="product">product (required).</param>
        /// <param name="applicant">applicant (required).</param>
        /// <param name="requestedProductDecision">requestedProductDecision.</param>
        /// <param name="counterOffers">counterOffers.</param>
        /// <param name="crossSellOffers">crossSellOffers.</param>
        public ApplicationInquiryResponse(string applicationStage = default(string), bool? hasAnySupplementaryFlag = default(bool?), DateTime? ipaExpiryDate = default(DateTime?), ApplicationInquiryProduct product = default(ApplicationInquiryProduct), ApplicationInquiryApplicant applicant = default(ApplicationInquiryApplicant), List<ApplicationInquiryRequestedProductDecision> requestedProductDecision = default(List<ApplicationInquiryRequestedProductDecision>), List<ApplicationInquiryCounterOffer> counterOffers = default(List<ApplicationInquiryCounterOffer>), List<ApplicationInquiryCrossSellOffer> crossSellOffers = default(List<ApplicationInquiryCrossSellOffer>))
        {
            // to ensure "applicationStage" is required (not null)
            if (applicationStage == null)
            {
                throw new InvalidDataException("applicationStage is a required property for ApplicationInquiryResponse and cannot be null");
            }
            else
            {
                this.ApplicationStage = applicationStage;
            }
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new InvalidDataException("product is a required property for ApplicationInquiryResponse and cannot be null");
            }
            else
            {
                this.Product = product;
            }
            // to ensure "applicant" is required (not null)
            if (applicant == null)
            {
                throw new InvalidDataException("applicant is a required property for ApplicationInquiryResponse and cannot be null");
            }
            else
            {
                this.Applicant = applicant;
            }
            this.HasAnySupplementaryFlag = hasAnySupplementaryFlag;
            this.IpaExpiryDate = ipaExpiryDate;
            this.RequestedProductDecision = requestedProductDecision;
            this.CounterOffers = counterOffers;
            this.CrossSellOffers = crossSellOffers;
        }
        
        /// <summary>
        /// Current stage of an application.This is a reference data field. Please use /v1/apac/utilities/referenceData/{applicationStage} resource to get possible value of this field with description. You can use applicationStage field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Current stage of an application.This is a reference data field. Please use /v1/apac/utilities/referenceData/{applicationStage} resource to get possible value of this field with description. You can use applicationStage field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="applicationStage", EmitDefaultValue=false)]
        public string ApplicationStage { get; set; }

        /// <summary>
        /// Flag indicating whether the primary applicant has any supplementary.
        /// </summary>
        /// <value>Flag indicating whether the primary applicant has any supplementary.</value>
        [DataMember(Name="hasAnySupplementaryFlag", EmitDefaultValue=false)]
        public bool? HasAnySupplementaryFlag { get; set; }

        /// <summary>
        /// In principle approval expiration date in  ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>In principle approval expiration date in  ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="ipaExpiryDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IpaExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public ApplicationInquiryProduct Product { get; set; }

        /// <summary>
        /// Gets or Sets Applicant
        /// </summary>
        [DataMember(Name="applicant", EmitDefaultValue=false)]
        public ApplicationInquiryApplicant Applicant { get; set; }

        /// <summary>
        /// Gets or Sets RequestedProductDecision
        /// </summary>
        [DataMember(Name="requestedProductDecision", EmitDefaultValue=false)]
        public List<ApplicationInquiryRequestedProductDecision> RequestedProductDecision { get; set; }

        /// <summary>
        /// Gets or Sets CounterOffers
        /// </summary>
        [DataMember(Name="counterOffers", EmitDefaultValue=false)]
        public List<ApplicationInquiryCounterOffer> CounterOffers { get; set; }

        /// <summary>
        /// Gets or Sets CrossSellOffers
        /// </summary>
        [DataMember(Name="crossSellOffers", EmitDefaultValue=false)]
        public List<ApplicationInquiryCrossSellOffer> CrossSellOffers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationInquiryResponse {\n");
            sb.Append("  ApplicationStage: ").Append(ApplicationStage).Append("\n");
            sb.Append("  HasAnySupplementaryFlag: ").Append(HasAnySupplementaryFlag).Append("\n");
            sb.Append("  IpaExpiryDate: ").Append(IpaExpiryDate).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Applicant: ").Append(Applicant).Append("\n");
            sb.Append("  RequestedProductDecision: ").Append(RequestedProductDecision).Append("\n");
            sb.Append("  CounterOffers: ").Append(CounterOffers).Append("\n");
            sb.Append("  CrossSellOffers: ").Append(CrossSellOffers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationInquiryResponse);
        }

        /// <summary>
        /// Returns true if ApplicationInquiryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationInquiryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationInquiryResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationStage == input.ApplicationStage ||
                    (this.ApplicationStage != null &&
                    this.ApplicationStage.Equals(input.ApplicationStage))
                ) && 
                (
                    this.HasAnySupplementaryFlag == input.HasAnySupplementaryFlag ||
                    (this.HasAnySupplementaryFlag != null &&
                    this.HasAnySupplementaryFlag.Equals(input.HasAnySupplementaryFlag))
                ) && 
                (
                    this.IpaExpiryDate == input.IpaExpiryDate ||
                    (this.IpaExpiryDate != null &&
                    this.IpaExpiryDate.Equals(input.IpaExpiryDate))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Applicant == input.Applicant ||
                    (this.Applicant != null &&
                    this.Applicant.Equals(input.Applicant))
                ) && 
                (
                    this.RequestedProductDecision == input.RequestedProductDecision ||
                    this.RequestedProductDecision != null &&
                    input.RequestedProductDecision != null &&
                    this.RequestedProductDecision.SequenceEqual(input.RequestedProductDecision)
                ) && 
                (
                    this.CounterOffers == input.CounterOffers ||
                    this.CounterOffers != null &&
                    input.CounterOffers != null &&
                    this.CounterOffers.SequenceEqual(input.CounterOffers)
                ) && 
                (
                    this.CrossSellOffers == input.CrossSellOffers ||
                    this.CrossSellOffers != null &&
                    input.CrossSellOffers != null &&
                    this.CrossSellOffers.SequenceEqual(input.CrossSellOffers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationStage != null)
                    hashCode = hashCode * 59 + this.ApplicationStage.GetHashCode();
                if (this.HasAnySupplementaryFlag != null)
                    hashCode = hashCode * 59 + this.HasAnySupplementaryFlag.GetHashCode();
                if (this.IpaExpiryDate != null)
                    hashCode = hashCode * 59 + this.IpaExpiryDate.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Applicant != null)
                    hashCode = hashCode * 59 + this.Applicant.GetHashCode();
                if (this.RequestedProductDecision != null)
                    hashCode = hashCode * 59 + this.RequestedProductDecision.GetHashCode();
                if (this.CounterOffers != null)
                    hashCode = hashCode * 59 + this.CounterOffers.GetHashCode();
                if (this.CrossSellOffers != null)
                    hashCode = hashCode * 59 + this.CrossSellOffers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
