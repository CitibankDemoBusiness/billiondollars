/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExistingCustomerCreditProductApplicationAddRequest
    /// </summary>
    [DataContract]
        public partial class ExistingCustomerCreditProductApplicationAddRequest :  IEquatable<ExistingCustomerCreditProductApplicationAddRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExistingCustomerCreditProductApplicationAddRequest" /> class.
        /// </summary>
        /// <param name="product">product.</param>
        /// <param name="applicant">applicant.</param>
        /// <param name="salesAgentDetails">salesAgentDetails.</param>
        /// <param name="marketingCampaignOfferDetails">marketingCampaignOfferDetails.</param>
        /// <param name="subCardType">Type of existing card of customer..</param>
        /// <param name="displayCardNumber">Last 4 digits of card number.</param>
        /// <param name="controlFlowId">Control Flow Id (required).</param>
        public ExistingCustomerCreditProductApplicationAddRequest(ECMProduct product = default(ECMProduct), ECMApplicant applicant = default(ECMApplicant), SalesAgentDetails salesAgentDetails = default(SalesAgentDetails), MarketingCampaignOfferDetails marketingCampaignOfferDetails = default(MarketingCampaignOfferDetails), string subCardType = default(string), string displayCardNumber = default(string), string controlFlowId = default(string))
        {
            // to ensure "controlFlowId" is required (not null)
            if (controlFlowId == null)
            {
                throw new InvalidDataException("controlFlowId is a required property for ExistingCustomerCreditProductApplicationAddRequest and cannot be null");
            }
            else
            {
                this.ControlFlowId = controlFlowId;
            }
            this.Product = product;
            this.Applicant = applicant;
            this.SalesAgentDetails = salesAgentDetails;
            this.MarketingCampaignOfferDetails = marketingCampaignOfferDetails;
            this.SubCardType = subCardType;
            this.DisplayCardNumber = displayCardNumber;
        }
        
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public ECMProduct Product { get; set; }

        /// <summary>
        /// Gets or Sets Applicant
        /// </summary>
        [DataMember(Name="applicant", EmitDefaultValue=false)]
        public ECMApplicant Applicant { get; set; }

        /// <summary>
        /// Gets or Sets SalesAgentDetails
        /// </summary>
        [DataMember(Name="salesAgentDetails", EmitDefaultValue=false)]
        public SalesAgentDetails SalesAgentDetails { get; set; }

        /// <summary>
        /// Gets or Sets MarketingCampaignOfferDetails
        /// </summary>
        [DataMember(Name="marketingCampaignOfferDetails", EmitDefaultValue=false)]
        public MarketingCampaignOfferDetails MarketingCampaignOfferDetails { get; set; }

        /// <summary>
        /// Type of existing card of customer.
        /// </summary>
        /// <value>Type of existing card of customer.</value>
        [DataMember(Name="subCardType", EmitDefaultValue=false)]
        public string SubCardType { get; set; }

        /// <summary>
        /// Last 4 digits of card number
        /// </summary>
        /// <value>Last 4 digits of card number</value>
        [DataMember(Name="displayCardNumber", EmitDefaultValue=false)]
        public string DisplayCardNumber { get; set; }

        /// <summary>
        /// Control Flow Id
        /// </summary>
        /// <value>Control Flow Id</value>
        [DataMember(Name="controlFlowId", EmitDefaultValue=false)]
        public string ControlFlowId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExistingCustomerCreditProductApplicationAddRequest {\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Applicant: ").Append(Applicant).Append("\n");
            sb.Append("  SalesAgentDetails: ").Append(SalesAgentDetails).Append("\n");
            sb.Append("  MarketingCampaignOfferDetails: ").Append(MarketingCampaignOfferDetails).Append("\n");
            sb.Append("  SubCardType: ").Append(SubCardType).Append("\n");
            sb.Append("  DisplayCardNumber: ").Append(DisplayCardNumber).Append("\n");
            sb.Append("  ControlFlowId: ").Append(ControlFlowId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExistingCustomerCreditProductApplicationAddRequest);
        }

        /// <summary>
        /// Returns true if ExistingCustomerCreditProductApplicationAddRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExistingCustomerCreditProductApplicationAddRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExistingCustomerCreditProductApplicationAddRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Applicant == input.Applicant ||
                    (this.Applicant != null &&
                    this.Applicant.Equals(input.Applicant))
                ) && 
                (
                    this.SalesAgentDetails == input.SalesAgentDetails ||
                    (this.SalesAgentDetails != null &&
                    this.SalesAgentDetails.Equals(input.SalesAgentDetails))
                ) && 
                (
                    this.MarketingCampaignOfferDetails == input.MarketingCampaignOfferDetails ||
                    (this.MarketingCampaignOfferDetails != null &&
                    this.MarketingCampaignOfferDetails.Equals(input.MarketingCampaignOfferDetails))
                ) && 
                (
                    this.SubCardType == input.SubCardType ||
                    (this.SubCardType != null &&
                    this.SubCardType.Equals(input.SubCardType))
                ) && 
                (
                    this.DisplayCardNumber == input.DisplayCardNumber ||
                    (this.DisplayCardNumber != null &&
                    this.DisplayCardNumber.Equals(input.DisplayCardNumber))
                ) && 
                (
                    this.ControlFlowId == input.ControlFlowId ||
                    (this.ControlFlowId != null &&
                    this.ControlFlowId.Equals(input.ControlFlowId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Applicant != null)
                    hashCode = hashCode * 59 + this.Applicant.GetHashCode();
                if (this.SalesAgentDetails != null)
                    hashCode = hashCode * 59 + this.SalesAgentDetails.GetHashCode();
                if (this.MarketingCampaignOfferDetails != null)
                    hashCode = hashCode * 59 + this.MarketingCampaignOfferDetails.GetHashCode();
                if (this.SubCardType != null)
                    hashCode = hashCode * 59 + this.SubCardType.GetHashCode();
                if (this.DisplayCardNumber != null)
                    hashCode = hashCode * 59 + this.DisplayCardNumber.GetHashCode();
                if (this.ControlFlowId != null)
                    hashCode = hashCode * 59 + this.ControlFlowId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
