/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApplicationUpdateConsentDetails
    /// </summary>
    [DataContract]
        public partial class ApplicationUpdateConsentDetails :  IEquatable<ApplicationUpdateConsentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationUpdateConsentDetails" /> class.
        /// </summary>
        /// <param name="consentType">Applicant&#x27;s consent types. This is a reference data data field. Please use /v1/apac/utilities/referenceData/{consentType} resource to get valid value of this field with description. You can use consentType field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="isConsentGiven">Consent flag. Valid values: true and false.</param>
        public ApplicationUpdateConsentDetails(string consentType = default(string), bool? isConsentGiven = default(bool?))
        {
            this.ConsentType = consentType;
            this.IsConsentGiven = isConsentGiven;
        }
        
        /// <summary>
        /// Applicant&#x27;s consent types. This is a reference data data field. Please use /v1/apac/utilities/referenceData/{consentType} resource to get valid value of this field with description. You can use consentType field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Applicant&#x27;s consent types. This is a reference data data field. Please use /v1/apac/utilities/referenceData/{consentType} resource to get valid value of this field with description. You can use consentType field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="consentType", EmitDefaultValue=false)]
        public string ConsentType { get; set; }

        /// <summary>
        /// Consent flag. Valid values: true and false
        /// </summary>
        /// <value>Consent flag. Valid values: true and false</value>
        [DataMember(Name="isConsentGiven", EmitDefaultValue=false)]
        public bool? IsConsentGiven { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationUpdateConsentDetails {\n");
            sb.Append("  ConsentType: ").Append(ConsentType).Append("\n");
            sb.Append("  IsConsentGiven: ").Append(IsConsentGiven).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationUpdateConsentDetails);
        }

        /// <summary>
        /// Returns true if ApplicationUpdateConsentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationUpdateConsentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationUpdateConsentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConsentType == input.ConsentType ||
                    (this.ConsentType != null &&
                    this.ConsentType.Equals(input.ConsentType))
                ) && 
                (
                    this.IsConsentGiven == input.IsConsentGiven ||
                    (this.IsConsentGiven != null &&
                    this.IsConsentGiven.Equals(input.IsConsentGiven))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsentType != null)
                    hashCode = hashCode * 59 + this.ConsentType.GetHashCode();
                if (this.IsConsentGiven != null)
                    hashCode = hashCode * 59 + this.IsConsentGiven.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
