/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoanPaymentAccountDetailsAdd
    /// </summary>
    [DataContract]
        public partial class LoanPaymentAccountDetailsAdd :  IEquatable<LoanPaymentAccountDetailsAdd>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanPaymentAccountDetailsAdd" /> class.
        /// </summary>
        /// <param name="disbursementAmount">Disbursement Amount to the applicant.</param>
        /// <param name="loanDisbursementMethod">Loan disbursement method for the unsecured loan product selected by the applicant.This a reference data field. Please use /utilities/referenceData/{disbursementType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values..</param>
        /// <param name="accountNumber">Account number of the payee. (required).</param>
        /// <param name="accountReferenceKey">Account reference key to link account in a customer session,.</param>
        /// <param name="accountNickName">The nick name of the account assigned by the customer.</param>
        /// <param name="bankName">Indicates the bank name of the customer&#x27;s account to which the loan amount will be transferred. Also, indicates the bank name of the customer&#x27;s account from which the repayment of the loan will be debited. Please use /v1/utilities/referenceData/{bankName} resource to get valid value of this field with description. (required).</param>
        /// <param name="bankCode">This field is to indicate the bank code..</param>
        /// <param name="branchCode">This field is to indicate the branch code of the bank. (required).</param>
        public LoanPaymentAccountDetailsAdd(double? disbursementAmount = default(double?), string loanDisbursementMethod = default(string), string accountNumber = default(string), string accountReferenceKey = default(string), string accountNickName = default(string), string bankName = default(string), string bankCode = default(string), string branchCode = default(string))
        {
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null)
            {
                throw new InvalidDataException("accountNumber is a required property for LoanPaymentAccountDetailsAdd and cannot be null");
            }
            else
            {
                this.AccountNumber = accountNumber;
            }
            // to ensure "bankName" is required (not null)
            if (bankName == null)
            {
                throw new InvalidDataException("bankName is a required property for LoanPaymentAccountDetailsAdd and cannot be null");
            }
            else
            {
                this.BankName = bankName;
            }
            // to ensure "branchCode" is required (not null)
            if (branchCode == null)
            {
                throw new InvalidDataException("branchCode is a required property for LoanPaymentAccountDetailsAdd and cannot be null");
            }
            else
            {
                this.BranchCode = branchCode;
            }
            this.DisbursementAmount = disbursementAmount;
            this.LoanDisbursementMethod = loanDisbursementMethod;
            this.AccountReferenceKey = accountReferenceKey;
            this.AccountNickName = accountNickName;
            this.BankCode = bankCode;
        }
        
        /// <summary>
        /// Disbursement Amount to the applicant
        /// </summary>
        /// <value>Disbursement Amount to the applicant</value>
        [DataMember(Name="disbursementAmount", EmitDefaultValue=false)]
        public double? DisbursementAmount { get; set; }

        /// <summary>
        /// Loan disbursement method for the unsecured loan product selected by the applicant.This a reference data field. Please use /utilities/referenceData/{disbursementType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Loan disbursement method for the unsecured loan product selected by the applicant.This a reference data field. Please use /utilities/referenceData/{disbursementType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="loanDisbursementMethod", EmitDefaultValue=false)]
        public string LoanDisbursementMethod { get; set; }

        /// <summary>
        /// Account number of the payee.
        /// </summary>
        /// <value>Account number of the payee.</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Account reference key to link account in a customer session,
        /// </summary>
        /// <value>Account reference key to link account in a customer session,</value>
        [DataMember(Name="accountReferenceKey", EmitDefaultValue=false)]
        public string AccountReferenceKey { get; set; }

        /// <summary>
        /// The nick name of the account assigned by the customer
        /// </summary>
        /// <value>The nick name of the account assigned by the customer</value>
        [DataMember(Name="accountNickName", EmitDefaultValue=false)]
        public string AccountNickName { get; set; }

        /// <summary>
        /// Indicates the bank name of the customer&#x27;s account to which the loan amount will be transferred. Also, indicates the bank name of the customer&#x27;s account from which the repayment of the loan will be debited. Please use /v1/utilities/referenceData/{bankName} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Indicates the bank name of the customer&#x27;s account to which the loan amount will be transferred. Also, indicates the bank name of the customer&#x27;s account from which the repayment of the loan will be debited. Please use /v1/utilities/referenceData/{bankName} resource to get valid value of this field with description.</value>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// This field is to indicate the bank code.
        /// </summary>
        /// <value>This field is to indicate the bank code.</value>
        [DataMember(Name="bankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }

        /// <summary>
        /// This field is to indicate the branch code of the bank.
        /// </summary>
        /// <value>This field is to indicate the branch code of the bank.</value>
        [DataMember(Name="branchCode", EmitDefaultValue=false)]
        public string BranchCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanPaymentAccountDetailsAdd {\n");
            sb.Append("  DisbursementAmount: ").Append(DisbursementAmount).Append("\n");
            sb.Append("  LoanDisbursementMethod: ").Append(LoanDisbursementMethod).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountReferenceKey: ").Append(AccountReferenceKey).Append("\n");
            sb.Append("  AccountNickName: ").Append(AccountNickName).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanPaymentAccountDetailsAdd);
        }

        /// <summary>
        /// Returns true if LoanPaymentAccountDetailsAdd instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanPaymentAccountDetailsAdd to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanPaymentAccountDetailsAdd input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisbursementAmount == input.DisbursementAmount ||
                    (this.DisbursementAmount != null &&
                    this.DisbursementAmount.Equals(input.DisbursementAmount))
                ) && 
                (
                    this.LoanDisbursementMethod == input.LoanDisbursementMethod ||
                    (this.LoanDisbursementMethod != null &&
                    this.LoanDisbursementMethod.Equals(input.LoanDisbursementMethod))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.AccountReferenceKey == input.AccountReferenceKey ||
                    (this.AccountReferenceKey != null &&
                    this.AccountReferenceKey.Equals(input.AccountReferenceKey))
                ) && 
                (
                    this.AccountNickName == input.AccountNickName ||
                    (this.AccountNickName != null &&
                    this.AccountNickName.Equals(input.AccountNickName))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisbursementAmount != null)
                    hashCode = hashCode * 59 + this.DisbursementAmount.GetHashCode();
                if (this.LoanDisbursementMethod != null)
                    hashCode = hashCode * 59 + this.LoanDisbursementMethod.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.AccountReferenceKey != null)
                    hashCode = hashCode * 59 + this.AccountReferenceKey.GetHashCode();
                if (this.AccountNickName != null)
                    hashCode = hashCode * 59 + this.AccountNickName.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
