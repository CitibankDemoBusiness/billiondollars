/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EqualPaymentPlan
    /// </summary>
    [DataContract]
        public partial class EqualPaymentPlan :  IEquatable<EqualPaymentPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EqualPaymentPlan" /> class.
        /// </summary>
        /// <param name="tenor">Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description..</param>
        /// <param name="bankCode">This field is to indicate the bank code to which the amount will be disbursed..</param>
        /// <param name="amountToTransfer">Amount to Transfer.</param>
        /// <param name="accountName">Account name to which the amount will be disbursed.</param>
        /// <param name="campaignCode">Code of the campaign offered to the channel..</param>
        /// <param name="disbursementType">DisbursementType . This is a reference data field. Please use /v1/utilities/referenceData/{DisbursementOption} resource to get valid value of this field with description..</param>
        /// <param name="displayAccountNumber">Masked account number or reference to which the amount will be disbursed.</param>
        public EqualPaymentPlan(string tenor = default(string), string bankCode = default(string), double? amountToTransfer = default(double?), string accountName = default(string), string campaignCode = default(string), string disbursementType = default(string), string displayAccountNumber = default(string))
        {
            this.Tenor = tenor;
            this.BankCode = bankCode;
            this.AmountToTransfer = amountToTransfer;
            this.AccountName = accountName;
            this.CampaignCode = campaignCode;
            this.DisbursementType = disbursementType;
            this.DisplayAccountNumber = displayAccountNumber;
        }
        
        /// <summary>
        /// Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description.</value>
        [DataMember(Name="tenor", EmitDefaultValue=false)]
        public string Tenor { get; set; }

        /// <summary>
        /// This field is to indicate the bank code to which the amount will be disbursed.
        /// </summary>
        /// <value>This field is to indicate the bank code to which the amount will be disbursed.</value>
        [DataMember(Name="bankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }

        /// <summary>
        /// Amount to Transfer
        /// </summary>
        /// <value>Amount to Transfer</value>
        [DataMember(Name="amountToTransfer", EmitDefaultValue=false)]
        public double? AmountToTransfer { get; set; }

        /// <summary>
        /// Account name to which the amount will be disbursed
        /// </summary>
        /// <value>Account name to which the amount will be disbursed</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Code of the campaign offered to the channel.
        /// </summary>
        /// <value>Code of the campaign offered to the channel.</value>
        [DataMember(Name="campaignCode", EmitDefaultValue=false)]
        public string CampaignCode { get; set; }

        /// <summary>
        /// DisbursementType . This is a reference data field. Please use /v1/utilities/referenceData/{DisbursementOption} resource to get valid value of this field with description.
        /// </summary>
        /// <value>DisbursementType . This is a reference data field. Please use /v1/utilities/referenceData/{DisbursementOption} resource to get valid value of this field with description.</value>
        [DataMember(Name="disbursementType", EmitDefaultValue=false)]
        public string DisbursementType { get; set; }

        /// <summary>
        /// Masked account number or reference to which the amount will be disbursed
        /// </summary>
        /// <value>Masked account number or reference to which the amount will be disbursed</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EqualPaymentPlan {\n");
            sb.Append("  Tenor: ").Append(Tenor).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  AmountToTransfer: ").Append(AmountToTransfer).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("  DisbursementType: ").Append(DisbursementType).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EqualPaymentPlan);
        }

        /// <summary>
        /// Returns true if EqualPaymentPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of EqualPaymentPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EqualPaymentPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tenor == input.Tenor ||
                    (this.Tenor != null &&
                    this.Tenor.Equals(input.Tenor))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.AmountToTransfer == input.AmountToTransfer ||
                    (this.AmountToTransfer != null &&
                    this.AmountToTransfer.Equals(input.AmountToTransfer))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.CampaignCode == input.CampaignCode ||
                    (this.CampaignCode != null &&
                    this.CampaignCode.Equals(input.CampaignCode))
                ) && 
                (
                    this.DisbursementType == input.DisbursementType ||
                    (this.DisbursementType != null &&
                    this.DisbursementType.Equals(input.DisbursementType))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tenor != null)
                    hashCode = hashCode * 59 + this.Tenor.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.AmountToTransfer != null)
                    hashCode = hashCode * 59 + this.AmountToTransfer.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.CampaignCode != null)
                    hashCode = hashCode * 59 + this.CampaignCode.GetHashCode();
                if (this.DisbursementType != null)
                    hashCode = hashCode * 59 + this.DisbursementType.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
