/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IdentificationDocumentDetails
    /// </summary>
    [DataContract]
        public partial class IdentificationDocumentDetails :  IEquatable<IdentificationDocumentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentificationDocumentDetails" /> class.
        /// </summary>
        /// <param name="idType">Type of Identification document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{idType} resource to get valid values of this field with descriptions.</param>
        /// <param name="idNumber">Unique identifier of identification document. Ex: Passport Number.</param>
        /// <param name="idExpiryDate">Expiry date of identification document. Format: ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="idIssueDate">Issuance date of identification document. Format: ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="idIssuePlace">Place of issuance.</param>
        /// <param name="idIssuingAuthority">Authority which issued the identification document.</param>
        public IdentificationDocumentDetails(string idType = default(string), string idNumber = default(string), DateTime? idExpiryDate = default(DateTime?), DateTime? idIssueDate = default(DateTime?), string idIssuePlace = default(string), string idIssuingAuthority = default(string))
        {
            this.IdType = idType;
            this.IdNumber = idNumber;
            this.IdExpiryDate = idExpiryDate;
            this.IdIssueDate = idIssueDate;
            this.IdIssuePlace = idIssuePlace;
            this.IdIssuingAuthority = idIssuingAuthority;
        }
        
        /// <summary>
        /// Type of Identification document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{idType} resource to get valid values of this field with descriptions
        /// </summary>
        /// <value>Type of Identification document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{idType} resource to get valid values of this field with descriptions</value>
        [DataMember(Name="idType", EmitDefaultValue=false)]
        public string IdType { get; set; }

        /// <summary>
        /// Unique identifier of identification document. Ex: Passport Number
        /// </summary>
        /// <value>Unique identifier of identification document. Ex: Passport Number</value>
        [DataMember(Name="idNumber", EmitDefaultValue=false)]
        public string IdNumber { get; set; }

        /// <summary>
        /// Expiry date of identification document. Format: ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Expiry date of identification document. Format: ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="idExpiryDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IdExpiryDate { get; set; }

        /// <summary>
        /// Issuance date of identification document. Format: ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Issuance date of identification document. Format: ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="idIssueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IdIssueDate { get; set; }

        /// <summary>
        /// Place of issuance
        /// </summary>
        /// <value>Place of issuance</value>
        [DataMember(Name="idIssuePlace", EmitDefaultValue=false)]
        public string IdIssuePlace { get; set; }

        /// <summary>
        /// Authority which issued the identification document
        /// </summary>
        /// <value>Authority which issued the identification document</value>
        [DataMember(Name="idIssuingAuthority", EmitDefaultValue=false)]
        public string IdIssuingAuthority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentificationDocumentDetails {\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  IdNumber: ").Append(IdNumber).Append("\n");
            sb.Append("  IdExpiryDate: ").Append(IdExpiryDate).Append("\n");
            sb.Append("  IdIssueDate: ").Append(IdIssueDate).Append("\n");
            sb.Append("  IdIssuePlace: ").Append(IdIssuePlace).Append("\n");
            sb.Append("  IdIssuingAuthority: ").Append(IdIssuingAuthority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentificationDocumentDetails);
        }

        /// <summary>
        /// Returns true if IdentificationDocumentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentificationDocumentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentificationDocumentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdType == input.IdType ||
                    (this.IdType != null &&
                    this.IdType.Equals(input.IdType))
                ) && 
                (
                    this.IdNumber == input.IdNumber ||
                    (this.IdNumber != null &&
                    this.IdNumber.Equals(input.IdNumber))
                ) && 
                (
                    this.IdExpiryDate == input.IdExpiryDate ||
                    (this.IdExpiryDate != null &&
                    this.IdExpiryDate.Equals(input.IdExpiryDate))
                ) && 
                (
                    this.IdIssueDate == input.IdIssueDate ||
                    (this.IdIssueDate != null &&
                    this.IdIssueDate.Equals(input.IdIssueDate))
                ) && 
                (
                    this.IdIssuePlace == input.IdIssuePlace ||
                    (this.IdIssuePlace != null &&
                    this.IdIssuePlace.Equals(input.IdIssuePlace))
                ) && 
                (
                    this.IdIssuingAuthority == input.IdIssuingAuthority ||
                    (this.IdIssuingAuthority != null &&
                    this.IdIssuingAuthority.Equals(input.IdIssuingAuthority))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdType != null)
                    hashCode = hashCode * 59 + this.IdType.GetHashCode();
                if (this.IdNumber != null)
                    hashCode = hashCode * 59 + this.IdNumber.GetHashCode();
                if (this.IdExpiryDate != null)
                    hashCode = hashCode * 59 + this.IdExpiryDate.GetHashCode();
                if (this.IdIssueDate != null)
                    hashCode = hashCode * 59 + this.IdIssueDate.GetHashCode();
                if (this.IdIssuePlace != null)
                    hashCode = hashCode * 59 + this.IdIssuePlace.GetHashCode();
                if (this.IdIssuingAuthority != null)
                    hashCode = hashCode * 59 + this.IdIssuingAuthority.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
