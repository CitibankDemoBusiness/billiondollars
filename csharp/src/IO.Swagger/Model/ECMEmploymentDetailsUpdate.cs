/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ECMEmploymentDetailsUpdate
    /// </summary>
    [DataContract]
        public partial class ECMEmploymentDetailsUpdate :  IEquatable<ECMEmploymentDetailsUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ECMEmploymentDetailsUpdate" /> class.
        /// </summary>
        /// <param name="employerName">Name of the employer..</param>
        /// <param name="employerRegistrationNumber">Employer registration number.</param>
        /// <param name="occupationCode">Occupation code. This is a reference data field. Please use /v1/utilities/referenceData/{occupationCode} resource to get valid value of this field with description..</param>
        /// <param name="otherOccupationDescription">Other Occupation details entered by the Applicant.This is applicable if Applicant selects Others from the occupation Code drop down.</param>
        /// <param name="industryCode">Code of the industry of employment. This is a reference data field. Please use /v1/utilities/referenceData/{industryCode} resource to get valid value of this field with description..</param>
        /// <param name="otherIndustryDescription">Other Industry details entered by the Applicant.This is applicable if Applicant selects Others from the industry code drop down.</param>
        /// <param name="employmentDurationInYears">Employment duration in years.</param>
        /// <param name="employmentDurationInMonths">Employment duration in months.</param>
        /// <param name="previousEmployerName">Name of the previous employer..</param>
        /// <param name="monthsInPreviousEmployment">Months spent in the previous employment.</param>
        /// <param name="yearsInPreviousEmployment">Years spent in the previous employment.</param>
        /// <param name="emailAddress">Employers email address.</param>
        /// <param name="employmentStatus">Status of the employment.This is a reference data field. Please use /v1/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description..</param>
        public ECMEmploymentDetailsUpdate(string employerName = default(string), string employerRegistrationNumber = default(string), string occupationCode = default(string), string otherOccupationDescription = default(string), string industryCode = default(string), string otherIndustryDescription = default(string), int? employmentDurationInYears = default(int?), int? employmentDurationInMonths = default(int?), string previousEmployerName = default(string), int? monthsInPreviousEmployment = default(int?), int? yearsInPreviousEmployment = default(int?), string emailAddress = default(string), string employmentStatus = default(string))
        {
            this.EmployerName = employerName;
            this.EmployerRegistrationNumber = employerRegistrationNumber;
            this.OccupationCode = occupationCode;
            this.OtherOccupationDescription = otherOccupationDescription;
            this.IndustryCode = industryCode;
            this.OtherIndustryDescription = otherIndustryDescription;
            this.EmploymentDurationInYears = employmentDurationInYears;
            this.EmploymentDurationInMonths = employmentDurationInMonths;
            this.PreviousEmployerName = previousEmployerName;
            this.MonthsInPreviousEmployment = monthsInPreviousEmployment;
            this.YearsInPreviousEmployment = yearsInPreviousEmployment;
            this.EmailAddress = emailAddress;
            this.EmploymentStatus = employmentStatus;
        }
        
        /// <summary>
        /// Name of the employer.
        /// </summary>
        /// <value>Name of the employer.</value>
        [DataMember(Name="employerName", EmitDefaultValue=false)]
        public string EmployerName { get; set; }

        /// <summary>
        /// Employer registration number
        /// </summary>
        /// <value>Employer registration number</value>
        [DataMember(Name="employerRegistrationNumber", EmitDefaultValue=false)]
        public string EmployerRegistrationNumber { get; set; }

        /// <summary>
        /// Occupation code. This is a reference data field. Please use /v1/utilities/referenceData/{occupationCode} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Occupation code. This is a reference data field. Please use /v1/utilities/referenceData/{occupationCode} resource to get valid value of this field with description.</value>
        [DataMember(Name="occupationCode", EmitDefaultValue=false)]
        public string OccupationCode { get; set; }

        /// <summary>
        /// Other Occupation details entered by the Applicant.This is applicable if Applicant selects Others from the occupation Code drop down
        /// </summary>
        /// <value>Other Occupation details entered by the Applicant.This is applicable if Applicant selects Others from the occupation Code drop down</value>
        [DataMember(Name="otherOccupationDescription", EmitDefaultValue=false)]
        public string OtherOccupationDescription { get; set; }

        /// <summary>
        /// Code of the industry of employment. This is a reference data field. Please use /v1/utilities/referenceData/{industryCode} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Code of the industry of employment. This is a reference data field. Please use /v1/utilities/referenceData/{industryCode} resource to get valid value of this field with description.</value>
        [DataMember(Name="industryCode", EmitDefaultValue=false)]
        public string IndustryCode { get; set; }

        /// <summary>
        /// Other Industry details entered by the Applicant.This is applicable if Applicant selects Others from the industry code drop down
        /// </summary>
        /// <value>Other Industry details entered by the Applicant.This is applicable if Applicant selects Others from the industry code drop down</value>
        [DataMember(Name="otherIndustryDescription", EmitDefaultValue=false)]
        public string OtherIndustryDescription { get; set; }

        /// <summary>
        /// Employment duration in years
        /// </summary>
        /// <value>Employment duration in years</value>
        [DataMember(Name="employmentDurationInYears", EmitDefaultValue=false)]
        public int? EmploymentDurationInYears { get; set; }

        /// <summary>
        /// Employment duration in months
        /// </summary>
        /// <value>Employment duration in months</value>
        [DataMember(Name="employmentDurationInMonths", EmitDefaultValue=false)]
        public int? EmploymentDurationInMonths { get; set; }

        /// <summary>
        /// Name of the previous employer.
        /// </summary>
        /// <value>Name of the previous employer.</value>
        [DataMember(Name="previousEmployerName", EmitDefaultValue=false)]
        public string PreviousEmployerName { get; set; }

        /// <summary>
        /// Months spent in the previous employment
        /// </summary>
        /// <value>Months spent in the previous employment</value>
        [DataMember(Name="monthsInPreviousEmployment", EmitDefaultValue=false)]
        public int? MonthsInPreviousEmployment { get; set; }

        /// <summary>
        /// Years spent in the previous employment
        /// </summary>
        /// <value>Years spent in the previous employment</value>
        [DataMember(Name="yearsInPreviousEmployment", EmitDefaultValue=false)]
        public int? YearsInPreviousEmployment { get; set; }

        /// <summary>
        /// Employers email address
        /// </summary>
        /// <value>Employers email address</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Status of the employment.This is a reference data field. Please use /v1/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Status of the employment.This is a reference data field. Please use /v1/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description.</value>
        [DataMember(Name="employmentStatus", EmitDefaultValue=false)]
        public string EmploymentStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ECMEmploymentDetailsUpdate {\n");
            sb.Append("  EmployerName: ").Append(EmployerName).Append("\n");
            sb.Append("  EmployerRegistrationNumber: ").Append(EmployerRegistrationNumber).Append("\n");
            sb.Append("  OccupationCode: ").Append(OccupationCode).Append("\n");
            sb.Append("  OtherOccupationDescription: ").Append(OtherOccupationDescription).Append("\n");
            sb.Append("  IndustryCode: ").Append(IndustryCode).Append("\n");
            sb.Append("  OtherIndustryDescription: ").Append(OtherIndustryDescription).Append("\n");
            sb.Append("  EmploymentDurationInYears: ").Append(EmploymentDurationInYears).Append("\n");
            sb.Append("  EmploymentDurationInMonths: ").Append(EmploymentDurationInMonths).Append("\n");
            sb.Append("  PreviousEmployerName: ").Append(PreviousEmployerName).Append("\n");
            sb.Append("  MonthsInPreviousEmployment: ").Append(MonthsInPreviousEmployment).Append("\n");
            sb.Append("  YearsInPreviousEmployment: ").Append(YearsInPreviousEmployment).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ECMEmploymentDetailsUpdate);
        }

        /// <summary>
        /// Returns true if ECMEmploymentDetailsUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of ECMEmploymentDetailsUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ECMEmploymentDetailsUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmployerName == input.EmployerName ||
                    (this.EmployerName != null &&
                    this.EmployerName.Equals(input.EmployerName))
                ) && 
                (
                    this.EmployerRegistrationNumber == input.EmployerRegistrationNumber ||
                    (this.EmployerRegistrationNumber != null &&
                    this.EmployerRegistrationNumber.Equals(input.EmployerRegistrationNumber))
                ) && 
                (
                    this.OccupationCode == input.OccupationCode ||
                    (this.OccupationCode != null &&
                    this.OccupationCode.Equals(input.OccupationCode))
                ) && 
                (
                    this.OtherOccupationDescription == input.OtherOccupationDescription ||
                    (this.OtherOccupationDescription != null &&
                    this.OtherOccupationDescription.Equals(input.OtherOccupationDescription))
                ) && 
                (
                    this.IndustryCode == input.IndustryCode ||
                    (this.IndustryCode != null &&
                    this.IndustryCode.Equals(input.IndustryCode))
                ) && 
                (
                    this.OtherIndustryDescription == input.OtherIndustryDescription ||
                    (this.OtherIndustryDescription != null &&
                    this.OtherIndustryDescription.Equals(input.OtherIndustryDescription))
                ) && 
                (
                    this.EmploymentDurationInYears == input.EmploymentDurationInYears ||
                    (this.EmploymentDurationInYears != null &&
                    this.EmploymentDurationInYears.Equals(input.EmploymentDurationInYears))
                ) && 
                (
                    this.EmploymentDurationInMonths == input.EmploymentDurationInMonths ||
                    (this.EmploymentDurationInMonths != null &&
                    this.EmploymentDurationInMonths.Equals(input.EmploymentDurationInMonths))
                ) && 
                (
                    this.PreviousEmployerName == input.PreviousEmployerName ||
                    (this.PreviousEmployerName != null &&
                    this.PreviousEmployerName.Equals(input.PreviousEmployerName))
                ) && 
                (
                    this.MonthsInPreviousEmployment == input.MonthsInPreviousEmployment ||
                    (this.MonthsInPreviousEmployment != null &&
                    this.MonthsInPreviousEmployment.Equals(input.MonthsInPreviousEmployment))
                ) && 
                (
                    this.YearsInPreviousEmployment == input.YearsInPreviousEmployment ||
                    (this.YearsInPreviousEmployment != null &&
                    this.YearsInPreviousEmployment.Equals(input.YearsInPreviousEmployment))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.EmploymentStatus == input.EmploymentStatus ||
                    (this.EmploymentStatus != null &&
                    this.EmploymentStatus.Equals(input.EmploymentStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmployerName != null)
                    hashCode = hashCode * 59 + this.EmployerName.GetHashCode();
                if (this.EmployerRegistrationNumber != null)
                    hashCode = hashCode * 59 + this.EmployerRegistrationNumber.GetHashCode();
                if (this.OccupationCode != null)
                    hashCode = hashCode * 59 + this.OccupationCode.GetHashCode();
                if (this.OtherOccupationDescription != null)
                    hashCode = hashCode * 59 + this.OtherOccupationDescription.GetHashCode();
                if (this.IndustryCode != null)
                    hashCode = hashCode * 59 + this.IndustryCode.GetHashCode();
                if (this.OtherIndustryDescription != null)
                    hashCode = hashCode * 59 + this.OtherIndustryDescription.GetHashCode();
                if (this.EmploymentDurationInYears != null)
                    hashCode = hashCode * 59 + this.EmploymentDurationInYears.GetHashCode();
                if (this.EmploymentDurationInMonths != null)
                    hashCode = hashCode * 59 + this.EmploymentDurationInMonths.GetHashCode();
                if (this.PreviousEmployerName != null)
                    hashCode = hashCode * 59 + this.PreviousEmployerName.GetHashCode();
                if (this.MonthsInPreviousEmployment != null)
                    hashCode = hashCode * 59 + this.MonthsInPreviousEmployment.GetHashCode();
                if (this.YearsInPreviousEmployment != null)
                    hashCode = hashCode * 59 + this.YearsInPreviousEmployment.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.EmploymentStatus != null)
                    hashCode = hashCode * 59 + this.EmploymentStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
