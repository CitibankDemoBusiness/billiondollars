/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApplicantInquiryRequiredDocuments
    /// </summary>
    [DataContract]
        public partial class ApplicantInquiryRequiredDocuments :  IEquatable<ApplicantInquiryRequiredDocuments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicantInquiryRequiredDocuments" /> class.
        /// </summary>
        /// <param name="documentIdType">Document ID for each proof. This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get valid values of this field with descriptions.You can use the documentIdType as the referenceCode parameter to retrieve the values..</param>
        /// <param name="documentStatus">Status of document proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentStatus} resource to get possible values of this field with descriptions.You can use the documentStatus as the referenceCode parameter to retrieve the values..</param>
        /// <param name="productCode">A unique code that identifies the product.</param>
        /// <param name="proofType">Type of document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values..</param>
        /// <param name="linkedDocumentId">Linked document id specifies that the same document can be used for different proof types.</param>
        /// <param name="applicantType">Applicant&#x27;s relationship with the Bank. Currently supported is Primary - P.This is a reference data field. Please use /v1/apac/utilities/referenceData/{applicantType} resource to get valid value of this field with description.You can use the documentType as the referenceCode parameter to retrieve the values..</param>
        public ApplicantInquiryRequiredDocuments(string documentIdType = default(string), string documentStatus = default(string), string productCode = default(string), string proofType = default(string), string linkedDocumentId = default(string), string applicantType = default(string))
        {
            this.DocumentIdType = documentIdType;
            this.DocumentStatus = documentStatus;
            this.ProductCode = productCode;
            this.ProofType = proofType;
            this.LinkedDocumentId = linkedDocumentId;
            this.ApplicantType = applicantType;
        }
        
        /// <summary>
        /// Document ID for each proof. This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get valid values of this field with descriptions.You can use the documentIdType as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Document ID for each proof. This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get valid values of this field with descriptions.You can use the documentIdType as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="documentIdType", EmitDefaultValue=false)]
        public string DocumentIdType { get; set; }

        /// <summary>
        /// Status of document proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentStatus} resource to get possible values of this field with descriptions.You can use the documentStatus as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Status of document proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentStatus} resource to get possible values of this field with descriptions.You can use the documentStatus as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="documentStatus", EmitDefaultValue=false)]
        public string DocumentStatus { get; set; }

        /// <summary>
        /// A unique code that identifies the product
        /// </summary>
        /// <value>A unique code that identifies the product</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Type of document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Type of document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="proofType", EmitDefaultValue=false)]
        public string ProofType { get; set; }

        /// <summary>
        /// Linked document id specifies that the same document can be used for different proof types
        /// </summary>
        /// <value>Linked document id specifies that the same document can be used for different proof types</value>
        [DataMember(Name="linkedDocumentId", EmitDefaultValue=false)]
        public string LinkedDocumentId { get; set; }

        /// <summary>
        /// Applicant&#x27;s relationship with the Bank. Currently supported is Primary - P.This is a reference data field. Please use /v1/apac/utilities/referenceData/{applicantType} resource to get valid value of this field with description.You can use the documentType as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Applicant&#x27;s relationship with the Bank. Currently supported is Primary - P.This is a reference data field. Please use /v1/apac/utilities/referenceData/{applicantType} resource to get valid value of this field with description.You can use the documentType as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="applicantType", EmitDefaultValue=false)]
        public string ApplicantType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicantInquiryRequiredDocuments {\n");
            sb.Append("  DocumentIdType: ").Append(DocumentIdType).Append("\n");
            sb.Append("  DocumentStatus: ").Append(DocumentStatus).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProofType: ").Append(ProofType).Append("\n");
            sb.Append("  LinkedDocumentId: ").Append(LinkedDocumentId).Append("\n");
            sb.Append("  ApplicantType: ").Append(ApplicantType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicantInquiryRequiredDocuments);
        }

        /// <summary>
        /// Returns true if ApplicantInquiryRequiredDocuments instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicantInquiryRequiredDocuments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicantInquiryRequiredDocuments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentIdType == input.DocumentIdType ||
                    (this.DocumentIdType != null &&
                    this.DocumentIdType.Equals(input.DocumentIdType))
                ) && 
                (
                    this.DocumentStatus == input.DocumentStatus ||
                    (this.DocumentStatus != null &&
                    this.DocumentStatus.Equals(input.DocumentStatus))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ProofType == input.ProofType ||
                    (this.ProofType != null &&
                    this.ProofType.Equals(input.ProofType))
                ) && 
                (
                    this.LinkedDocumentId == input.LinkedDocumentId ||
                    (this.LinkedDocumentId != null &&
                    this.LinkedDocumentId.Equals(input.LinkedDocumentId))
                ) && 
                (
                    this.ApplicantType == input.ApplicantType ||
                    (this.ApplicantType != null &&
                    this.ApplicantType.Equals(input.ApplicantType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentIdType != null)
                    hashCode = hashCode * 59 + this.DocumentIdType.GetHashCode();
                if (this.DocumentStatus != null)
                    hashCode = hashCode * 59 + this.DocumentStatus.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.ProofType != null)
                    hashCode = hashCode * 59 + this.ProofType.GetHashCode();
                if (this.LinkedDocumentId != null)
                    hashCode = hashCode * 59 + this.LinkedDocumentId.GetHashCode();
                if (this.ApplicantType != null)
                    hashCode = hashCode * 59 + this.ApplicantType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
