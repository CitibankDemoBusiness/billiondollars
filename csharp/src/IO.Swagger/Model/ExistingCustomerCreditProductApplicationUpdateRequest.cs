/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExistingCustomerCreditProductApplicationUpdateRequest
    /// </summary>
    [DataContract]
        public partial class ExistingCustomerCreditProductApplicationUpdateRequest :  IEquatable<ExistingCustomerCreditProductApplicationUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExistingCustomerCreditProductApplicationUpdateRequest" /> class.
        /// </summary>
        /// <param name="product">product.</param>
        /// <param name="survivorProduct">survivorProduct.</param>
        /// <param name="applicant">applicant.</param>
        /// <param name="salesAgentDetails">salesAgentDetails.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (required).</param>
        public ExistingCustomerCreditProductApplicationUpdateRequest(ECMProductUpdate product = default(ECMProductUpdate), SurvivorProduct survivorProduct = default(SurvivorProduct), ECMApplicantUpdate applicant = default(ECMApplicantUpdate), SalesAgentDetails salesAgentDetails = default(SalesAgentDetails), string controlFlowId = default(string))
        {
            // to ensure "controlFlowId" is required (not null)
            if (controlFlowId == null)
            {
                throw new InvalidDataException("controlFlowId is a required property for ExistingCustomerCreditProductApplicationUpdateRequest and cannot be null");
            }
            else
            {
                this.ControlFlowId = controlFlowId;
            }
            this.Product = product;
            this.SurvivorProduct = survivorProduct;
            this.Applicant = applicant;
            this.SalesAgentDetails = salesAgentDetails;
        }
        
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public ECMProductUpdate Product { get; set; }

        /// <summary>
        /// Gets or Sets SurvivorProduct
        /// </summary>
        [DataMember(Name="survivorProduct", EmitDefaultValue=false)]
        public SurvivorProduct SurvivorProduct { get; set; }

        /// <summary>
        /// Gets or Sets Applicant
        /// </summary>
        [DataMember(Name="applicant", EmitDefaultValue=false)]
        public ECMApplicantUpdate Applicant { get; set; }

        /// <summary>
        /// Gets or Sets SalesAgentDetails
        /// </summary>
        [DataMember(Name="salesAgentDetails", EmitDefaultValue=false)]
        public SalesAgentDetails SalesAgentDetails { get; set; }

        /// <summary>
        /// Control flow id is used to control the flow for subsequent requests in the session.
        /// </summary>
        /// <value>Control flow id is used to control the flow for subsequent requests in the session.</value>
        [DataMember(Name="controlFlowId", EmitDefaultValue=false)]
        public string ControlFlowId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExistingCustomerCreditProductApplicationUpdateRequest {\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  SurvivorProduct: ").Append(SurvivorProduct).Append("\n");
            sb.Append("  Applicant: ").Append(Applicant).Append("\n");
            sb.Append("  SalesAgentDetails: ").Append(SalesAgentDetails).Append("\n");
            sb.Append("  ControlFlowId: ").Append(ControlFlowId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExistingCustomerCreditProductApplicationUpdateRequest);
        }

        /// <summary>
        /// Returns true if ExistingCustomerCreditProductApplicationUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExistingCustomerCreditProductApplicationUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExistingCustomerCreditProductApplicationUpdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.SurvivorProduct == input.SurvivorProduct ||
                    (this.SurvivorProduct != null &&
                    this.SurvivorProduct.Equals(input.SurvivorProduct))
                ) && 
                (
                    this.Applicant == input.Applicant ||
                    (this.Applicant != null &&
                    this.Applicant.Equals(input.Applicant))
                ) && 
                (
                    this.SalesAgentDetails == input.SalesAgentDetails ||
                    (this.SalesAgentDetails != null &&
                    this.SalesAgentDetails.Equals(input.SalesAgentDetails))
                ) && 
                (
                    this.ControlFlowId == input.ControlFlowId ||
                    (this.ControlFlowId != null &&
                    this.ControlFlowId.Equals(input.ControlFlowId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.SurvivorProduct != null)
                    hashCode = hashCode * 59 + this.SurvivorProduct.GetHashCode();
                if (this.Applicant != null)
                    hashCode = hashCode * 59 + this.Applicant.GetHashCode();
                if (this.SalesAgentDetails != null)
                    hashCode = hashCode * 59 + this.SalesAgentDetails.GetHashCode();
                if (this.ControlFlowId != null)
                    hashCode = hashCode * 59 + this.ControlFlowId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
