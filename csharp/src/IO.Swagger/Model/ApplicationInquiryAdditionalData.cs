/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApplicationInquiryAdditionalData
    /// </summary>
    [DataContract]
        public partial class ApplicationInquiryAdditionalData :  IEquatable<ApplicationInquiryAdditionalData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationInquiryAdditionalData" /> class.
        /// </summary>
        /// <param name="numberOfDependents">Number of dependents.</param>
        /// <param name="staffIndicator">Flag to indicates if applicant is a Citi Staff. Valid values: true and false.</param>
        /// <param name="businessNature">Business nature of the applicant This is a reference data field. Please use /v1/apac/utilities/referenceData/{businessNature} resource to get valid value of this field with description. You can use businessNature field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="emergencyContactName">Emergency contact Name.</param>
        /// <param name="emergencyContactPhoneNumber">Emergency contact Number..</param>
        /// <param name="overLimitConsentFlag">Customer consent on spending more than the limit assigned to him. Valid values: true and false.</param>
        /// <param name="countrySpecificGroup">countrySpecificGroup.</param>
        /// <param name="referralGivenName">Referral First Name..</param>
        /// <param name="referralSurname">Referral Surname/Last Name..</param>
        /// <param name="relatedToCitiEmployeeFlag">Self declaration if applicant has any relation with citi bank employee. Valid values: true and false.</param>
        /// <param name="relatedCitiEmployeeName">Name of the citi employee if applicant has any relation with citi bank employee..</param>
        /// <param name="relatedCitiEmployeeDepartment">Department of citi employee if applicant has any relation with citi bank employee..</param>
        public ApplicationInquiryAdditionalData(decimal? numberOfDependents = default(decimal?), bool? staffIndicator = default(bool?), string businessNature = default(string), string emergencyContactName = default(string), string emergencyContactPhoneNumber = default(string), bool? overLimitConsentFlag = default(bool?), ApplicationInquiryCountrySpecificGroup countrySpecificGroup = default(ApplicationInquiryCountrySpecificGroup), string referralGivenName = default(string), string referralSurname = default(string), bool? relatedToCitiEmployeeFlag = default(bool?), string relatedCitiEmployeeName = default(string), string relatedCitiEmployeeDepartment = default(string))
        {
            this.NumberOfDependents = numberOfDependents;
            this.StaffIndicator = staffIndicator;
            this.BusinessNature = businessNature;
            this.EmergencyContactName = emergencyContactName;
            this.EmergencyContactPhoneNumber = emergencyContactPhoneNumber;
            this.OverLimitConsentFlag = overLimitConsentFlag;
            this.CountrySpecificGroup = countrySpecificGroup;
            this.ReferralGivenName = referralGivenName;
            this.ReferralSurname = referralSurname;
            this.RelatedToCitiEmployeeFlag = relatedToCitiEmployeeFlag;
            this.RelatedCitiEmployeeName = relatedCitiEmployeeName;
            this.RelatedCitiEmployeeDepartment = relatedCitiEmployeeDepartment;
        }
        
        /// <summary>
        /// Number of dependents
        /// </summary>
        /// <value>Number of dependents</value>
        [DataMember(Name="numberOfDependents", EmitDefaultValue=false)]
        public decimal? NumberOfDependents { get; set; }

        /// <summary>
        /// Flag to indicates if applicant is a Citi Staff. Valid values: true and false
        /// </summary>
        /// <value>Flag to indicates if applicant is a Citi Staff. Valid values: true and false</value>
        [DataMember(Name="staffIndicator", EmitDefaultValue=false)]
        public bool? StaffIndicator { get; set; }

        /// <summary>
        /// Business nature of the applicant This is a reference data field. Please use /v1/apac/utilities/referenceData/{businessNature} resource to get valid value of this field with description. You can use businessNature field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Business nature of the applicant This is a reference data field. Please use /v1/apac/utilities/referenceData/{businessNature} resource to get valid value of this field with description. You can use businessNature field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="businessNature", EmitDefaultValue=false)]
        public string BusinessNature { get; set; }

        /// <summary>
        /// Emergency contact Name
        /// </summary>
        /// <value>Emergency contact Name</value>
        [DataMember(Name="emergencyContactName", EmitDefaultValue=false)]
        public string EmergencyContactName { get; set; }

        /// <summary>
        /// Emergency contact Number.
        /// </summary>
        /// <value>Emergency contact Number.</value>
        [DataMember(Name="emergencyContactPhoneNumber", EmitDefaultValue=false)]
        public string EmergencyContactPhoneNumber { get; set; }

        /// <summary>
        /// Customer consent on spending more than the limit assigned to him. Valid values: true and false
        /// </summary>
        /// <value>Customer consent on spending more than the limit assigned to him. Valid values: true and false</value>
        [DataMember(Name="overLimitConsentFlag", EmitDefaultValue=false)]
        public bool? OverLimitConsentFlag { get; set; }

        /// <summary>
        /// Gets or Sets CountrySpecificGroup
        /// </summary>
        [DataMember(Name="countrySpecificGroup", EmitDefaultValue=false)]
        public ApplicationInquiryCountrySpecificGroup CountrySpecificGroup { get; set; }

        /// <summary>
        /// Referral First Name.
        /// </summary>
        /// <value>Referral First Name.</value>
        [DataMember(Name="referralGivenName", EmitDefaultValue=false)]
        public string ReferralGivenName { get; set; }

        /// <summary>
        /// Referral Surname/Last Name.
        /// </summary>
        /// <value>Referral Surname/Last Name.</value>
        [DataMember(Name="referralSurname", EmitDefaultValue=false)]
        public string ReferralSurname { get; set; }

        /// <summary>
        /// Self declaration if applicant has any relation with citi bank employee. Valid values: true and false
        /// </summary>
        /// <value>Self declaration if applicant has any relation with citi bank employee. Valid values: true and false</value>
        [DataMember(Name="relatedToCitiEmployeeFlag", EmitDefaultValue=false)]
        public bool? RelatedToCitiEmployeeFlag { get; set; }

        /// <summary>
        /// Name of the citi employee if applicant has any relation with citi bank employee.
        /// </summary>
        /// <value>Name of the citi employee if applicant has any relation with citi bank employee.</value>
        [DataMember(Name="relatedCitiEmployeeName", EmitDefaultValue=false)]
        public string RelatedCitiEmployeeName { get; set; }

        /// <summary>
        /// Department of citi employee if applicant has any relation with citi bank employee.
        /// </summary>
        /// <value>Department of citi employee if applicant has any relation with citi bank employee.</value>
        [DataMember(Name="relatedCitiEmployeeDepartment", EmitDefaultValue=false)]
        public string RelatedCitiEmployeeDepartment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationInquiryAdditionalData {\n");
            sb.Append("  NumberOfDependents: ").Append(NumberOfDependents).Append("\n");
            sb.Append("  StaffIndicator: ").Append(StaffIndicator).Append("\n");
            sb.Append("  BusinessNature: ").Append(BusinessNature).Append("\n");
            sb.Append("  EmergencyContactName: ").Append(EmergencyContactName).Append("\n");
            sb.Append("  EmergencyContactPhoneNumber: ").Append(EmergencyContactPhoneNumber).Append("\n");
            sb.Append("  OverLimitConsentFlag: ").Append(OverLimitConsentFlag).Append("\n");
            sb.Append("  CountrySpecificGroup: ").Append(CountrySpecificGroup).Append("\n");
            sb.Append("  ReferralGivenName: ").Append(ReferralGivenName).Append("\n");
            sb.Append("  ReferralSurname: ").Append(ReferralSurname).Append("\n");
            sb.Append("  RelatedToCitiEmployeeFlag: ").Append(RelatedToCitiEmployeeFlag).Append("\n");
            sb.Append("  RelatedCitiEmployeeName: ").Append(RelatedCitiEmployeeName).Append("\n");
            sb.Append("  RelatedCitiEmployeeDepartment: ").Append(RelatedCitiEmployeeDepartment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationInquiryAdditionalData);
        }

        /// <summary>
        /// Returns true if ApplicationInquiryAdditionalData instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationInquiryAdditionalData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationInquiryAdditionalData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberOfDependents == input.NumberOfDependents ||
                    (this.NumberOfDependents != null &&
                    this.NumberOfDependents.Equals(input.NumberOfDependents))
                ) && 
                (
                    this.StaffIndicator == input.StaffIndicator ||
                    (this.StaffIndicator != null &&
                    this.StaffIndicator.Equals(input.StaffIndicator))
                ) && 
                (
                    this.BusinessNature == input.BusinessNature ||
                    (this.BusinessNature != null &&
                    this.BusinessNature.Equals(input.BusinessNature))
                ) && 
                (
                    this.EmergencyContactName == input.EmergencyContactName ||
                    (this.EmergencyContactName != null &&
                    this.EmergencyContactName.Equals(input.EmergencyContactName))
                ) && 
                (
                    this.EmergencyContactPhoneNumber == input.EmergencyContactPhoneNumber ||
                    (this.EmergencyContactPhoneNumber != null &&
                    this.EmergencyContactPhoneNumber.Equals(input.EmergencyContactPhoneNumber))
                ) && 
                (
                    this.OverLimitConsentFlag == input.OverLimitConsentFlag ||
                    (this.OverLimitConsentFlag != null &&
                    this.OverLimitConsentFlag.Equals(input.OverLimitConsentFlag))
                ) && 
                (
                    this.CountrySpecificGroup == input.CountrySpecificGroup ||
                    (this.CountrySpecificGroup != null &&
                    this.CountrySpecificGroup.Equals(input.CountrySpecificGroup))
                ) && 
                (
                    this.ReferralGivenName == input.ReferralGivenName ||
                    (this.ReferralGivenName != null &&
                    this.ReferralGivenName.Equals(input.ReferralGivenName))
                ) && 
                (
                    this.ReferralSurname == input.ReferralSurname ||
                    (this.ReferralSurname != null &&
                    this.ReferralSurname.Equals(input.ReferralSurname))
                ) && 
                (
                    this.RelatedToCitiEmployeeFlag == input.RelatedToCitiEmployeeFlag ||
                    (this.RelatedToCitiEmployeeFlag != null &&
                    this.RelatedToCitiEmployeeFlag.Equals(input.RelatedToCitiEmployeeFlag))
                ) && 
                (
                    this.RelatedCitiEmployeeName == input.RelatedCitiEmployeeName ||
                    (this.RelatedCitiEmployeeName != null &&
                    this.RelatedCitiEmployeeName.Equals(input.RelatedCitiEmployeeName))
                ) && 
                (
                    this.RelatedCitiEmployeeDepartment == input.RelatedCitiEmployeeDepartment ||
                    (this.RelatedCitiEmployeeDepartment != null &&
                    this.RelatedCitiEmployeeDepartment.Equals(input.RelatedCitiEmployeeDepartment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumberOfDependents != null)
                    hashCode = hashCode * 59 + this.NumberOfDependents.GetHashCode();
                if (this.StaffIndicator != null)
                    hashCode = hashCode * 59 + this.StaffIndicator.GetHashCode();
                if (this.BusinessNature != null)
                    hashCode = hashCode * 59 + this.BusinessNature.GetHashCode();
                if (this.EmergencyContactName != null)
                    hashCode = hashCode * 59 + this.EmergencyContactName.GetHashCode();
                if (this.EmergencyContactPhoneNumber != null)
                    hashCode = hashCode * 59 + this.EmergencyContactPhoneNumber.GetHashCode();
                if (this.OverLimitConsentFlag != null)
                    hashCode = hashCode * 59 + this.OverLimitConsentFlag.GetHashCode();
                if (this.CountrySpecificGroup != null)
                    hashCode = hashCode * 59 + this.CountrySpecificGroup.GetHashCode();
                if (this.ReferralGivenName != null)
                    hashCode = hashCode * 59 + this.ReferralGivenName.GetHashCode();
                if (this.ReferralSurname != null)
                    hashCode = hashCode * 59 + this.ReferralSurname.GetHashCode();
                if (this.RelatedToCitiEmployeeFlag != null)
                    hashCode = hashCode * 59 + this.RelatedToCitiEmployeeFlag.GetHashCode();
                if (this.RelatedCitiEmployeeName != null)
                    hashCode = hashCode * 59 + this.RelatedCitiEmployeeName.GetHashCode();
                if (this.RelatedCitiEmployeeDepartment != null)
                    hashCode = hashCode * 59 + this.RelatedCitiEmployeeDepartment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
