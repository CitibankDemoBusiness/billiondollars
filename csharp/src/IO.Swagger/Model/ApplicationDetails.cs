/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApplicationDetails
    /// </summary>
    [DataContract]
        public partial class ApplicationDetails :  IEquatable<ApplicationDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationDetails" /> class.
        /// </summary>
        /// <param name="applicationId">Unique identifier for the application. (required).</param>
        /// <param name="productCode">A unique code that identifies the product..</param>
        /// <param name="applicationStage">Application Stage of an Application (required).</param>
        /// <param name="applicationReceivedDate">Application Received Date in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="applicationSubmittedFlag">Flag to indicate if application is already submitted.</param>
        /// <param name="ekycSubmittedFlag">Flag to indicate if eKYC request is already submitted.</param>
        /// <param name="marketingCampaignOfferDetails">marketingCampaignOfferDetails.</param>
        public ApplicationDetails(string applicationId = default(string), string productCode = default(string), string applicationStage = default(string), DateTime? applicationReceivedDate = default(DateTime?), bool? applicationSubmittedFlag = default(bool?), bool? ekycSubmittedFlag = default(bool?), PendingMarketingCampaignOfferDetails marketingCampaignOfferDetails = default(PendingMarketingCampaignOfferDetails))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new InvalidDataException("applicationId is a required property for ApplicationDetails and cannot be null");
            }
            else
            {
                this.ApplicationId = applicationId;
            }
            // to ensure "applicationStage" is required (not null)
            if (applicationStage == null)
            {
                throw new InvalidDataException("applicationStage is a required property for ApplicationDetails and cannot be null");
            }
            else
            {
                this.ApplicationStage = applicationStage;
            }
            this.ProductCode = productCode;
            this.ApplicationReceivedDate = applicationReceivedDate;
            this.ApplicationSubmittedFlag = applicationSubmittedFlag;
            this.EkycSubmittedFlag = ekycSubmittedFlag;
            this.MarketingCampaignOfferDetails = marketingCampaignOfferDetails;
        }
        
        /// <summary>
        /// Unique identifier for the application.
        /// </summary>
        /// <value>Unique identifier for the application.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// A unique code that identifies the product.
        /// </summary>
        /// <value>A unique code that identifies the product.</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Application Stage of an Application
        /// </summary>
        /// <value>Application Stage of an Application</value>
        [DataMember(Name="applicationStage", EmitDefaultValue=false)]
        public string ApplicationStage { get; set; }

        /// <summary>
        /// Application Received Date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Application Received Date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="applicationReceivedDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ApplicationReceivedDate { get; set; }

        /// <summary>
        /// Flag to indicate if application is already submitted
        /// </summary>
        /// <value>Flag to indicate if application is already submitted</value>
        [DataMember(Name="applicationSubmittedFlag", EmitDefaultValue=false)]
        public bool? ApplicationSubmittedFlag { get; set; }

        /// <summary>
        /// Flag to indicate if eKYC request is already submitted
        /// </summary>
        /// <value>Flag to indicate if eKYC request is already submitted</value>
        [DataMember(Name="ekycSubmittedFlag", EmitDefaultValue=false)]
        public bool? EkycSubmittedFlag { get; set; }

        /// <summary>
        /// Gets or Sets MarketingCampaignOfferDetails
        /// </summary>
        [DataMember(Name="marketingCampaignOfferDetails", EmitDefaultValue=false)]
        public PendingMarketingCampaignOfferDetails MarketingCampaignOfferDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationDetails {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ApplicationStage: ").Append(ApplicationStage).Append("\n");
            sb.Append("  ApplicationReceivedDate: ").Append(ApplicationReceivedDate).Append("\n");
            sb.Append("  ApplicationSubmittedFlag: ").Append(ApplicationSubmittedFlag).Append("\n");
            sb.Append("  EkycSubmittedFlag: ").Append(EkycSubmittedFlag).Append("\n");
            sb.Append("  MarketingCampaignOfferDetails: ").Append(MarketingCampaignOfferDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationDetails);
        }

        /// <summary>
        /// Returns true if ApplicationDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ApplicationStage == input.ApplicationStage ||
                    (this.ApplicationStage != null &&
                    this.ApplicationStage.Equals(input.ApplicationStage))
                ) && 
                (
                    this.ApplicationReceivedDate == input.ApplicationReceivedDate ||
                    (this.ApplicationReceivedDate != null &&
                    this.ApplicationReceivedDate.Equals(input.ApplicationReceivedDate))
                ) && 
                (
                    this.ApplicationSubmittedFlag == input.ApplicationSubmittedFlag ||
                    (this.ApplicationSubmittedFlag != null &&
                    this.ApplicationSubmittedFlag.Equals(input.ApplicationSubmittedFlag))
                ) && 
                (
                    this.EkycSubmittedFlag == input.EkycSubmittedFlag ||
                    (this.EkycSubmittedFlag != null &&
                    this.EkycSubmittedFlag.Equals(input.EkycSubmittedFlag))
                ) && 
                (
                    this.MarketingCampaignOfferDetails == input.MarketingCampaignOfferDetails ||
                    (this.MarketingCampaignOfferDetails != null &&
                    this.MarketingCampaignOfferDetails.Equals(input.MarketingCampaignOfferDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.ApplicationStage != null)
                    hashCode = hashCode * 59 + this.ApplicationStage.GetHashCode();
                if (this.ApplicationReceivedDate != null)
                    hashCode = hashCode * 59 + this.ApplicationReceivedDate.GetHashCode();
                if (this.ApplicationSubmittedFlag != null)
                    hashCode = hashCode * 59 + this.ApplicationSubmittedFlag.GetHashCode();
                if (this.EkycSubmittedFlag != null)
                    hashCode = hashCode * 59 + this.EkycSubmittedFlag.GetHashCode();
                if (this.MarketingCampaignOfferDetails != null)
                    hashCode = hashCode * 59 + this.MarketingCampaignOfferDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
