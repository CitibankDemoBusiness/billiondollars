/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// KycInformation
    /// </summary>
    [DataContract]
        public partial class KycInformation :  IEquatable<KycInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KycInformation" /> class.
        /// </summary>
        /// <param name="usTaxStatus">US Tax status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{usTaxStatus} resource to get possible values of this field with descriptions. You can use usTaxStatus field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="usTaxId">US Tax ID.</param>
        public KycInformation(string usTaxStatus = default(string), string usTaxId = default(string))
        {
            this.UsTaxStatus = usTaxStatus;
            this.UsTaxId = usTaxId;
        }
        
        /// <summary>
        /// US Tax status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{usTaxStatus} resource to get possible values of this field with descriptions. You can use usTaxStatus field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>US Tax status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{usTaxStatus} resource to get possible values of this field with descriptions. You can use usTaxStatus field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="usTaxStatus", EmitDefaultValue=false)]
        public string UsTaxStatus { get; set; }

        /// <summary>
        /// US Tax ID
        /// </summary>
        /// <value>US Tax ID</value>
        [DataMember(Name="usTaxId", EmitDefaultValue=false)]
        public string UsTaxId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KycInformation {\n");
            sb.Append("  UsTaxStatus: ").Append(UsTaxStatus).Append("\n");
            sb.Append("  UsTaxId: ").Append(UsTaxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KycInformation);
        }

        /// <summary>
        /// Returns true if KycInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of KycInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KycInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UsTaxStatus == input.UsTaxStatus ||
                    (this.UsTaxStatus != null &&
                    this.UsTaxStatus.Equals(input.UsTaxStatus))
                ) && 
                (
                    this.UsTaxId == input.UsTaxId ||
                    (this.UsTaxId != null &&
                    this.UsTaxId.Equals(input.UsTaxId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UsTaxStatus != null)
                    hashCode = hashCode * 59 + this.UsTaxStatus.GetHashCode();
                if (this.UsTaxId != null)
                    hashCode = hashCode * 59 + this.UsTaxId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
