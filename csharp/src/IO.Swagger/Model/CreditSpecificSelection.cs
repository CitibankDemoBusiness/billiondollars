/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditSpecificSelection
    /// </summary>
    [DataContract]
        public partial class CreditSpecificSelection :  IEquatable<CreditSpecificSelection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditSpecificSelection" /> class.
        /// </summary>
        /// <param name="requestCreditShield">Insurance enrolment for outstanding balance on the card. Valid values: true and false.</param>
        /// <param name="embossName">Name to be embossed on card.</param>
        /// <param name="billingAddress">Billing address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use billingAddress field as the referenceCode parameter to retrieve the values..</param>
        /// <param name="cardDeliveryAddress">Card delivery address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use cardDeliveryAddress field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="pinDeliveryAddress">Delivery address  for card pin of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid values of this field with descriptions. You can use pinDeliveryAddress field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="requestedCreditLimit">Credit limit accepted by customer.</param>
        /// <param name="offeredCreditLimitAcceptedFlag">Consent to offered credit limit and If the customer has not accepted Bankâ€™s approved credit limit then requestedCreditLimit is mandatory. Valid values: true and false.</param>
        /// <param name="atmRequiredFlag">Option to get ATM card along with product. Valid values: true and false.</param>
        /// <param name="chequeBookRequiredFlag">Option to get cheque book along with product. Valid values: true and false.</param>
        /// <param name="creditLimitIncreaseIndicator">Option  to increase credit limit. Valid values: true and false.</param>
        public CreditSpecificSelection(bool? requestCreditShield = default(bool?), string embossName = default(string), string billingAddress = default(string), string cardDeliveryAddress = default(string), string pinDeliveryAddress = default(string), double? requestedCreditLimit = default(double?), bool? offeredCreditLimitAcceptedFlag = default(bool?), bool? atmRequiredFlag = default(bool?), bool? chequeBookRequiredFlag = default(bool?), bool? creditLimitIncreaseIndicator = default(bool?))
        {
            this.RequestCreditShield = requestCreditShield;
            this.EmbossName = embossName;
            this.BillingAddress = billingAddress;
            this.CardDeliveryAddress = cardDeliveryAddress;
            this.PinDeliveryAddress = pinDeliveryAddress;
            this.RequestedCreditLimit = requestedCreditLimit;
            this.OfferedCreditLimitAcceptedFlag = offeredCreditLimitAcceptedFlag;
            this.AtmRequiredFlag = atmRequiredFlag;
            this.ChequeBookRequiredFlag = chequeBookRequiredFlag;
            this.CreditLimitIncreaseIndicator = creditLimitIncreaseIndicator;
        }
        
        /// <summary>
        /// Insurance enrolment for outstanding balance on the card. Valid values: true and false
        /// </summary>
        /// <value>Insurance enrolment for outstanding balance on the card. Valid values: true and false</value>
        [DataMember(Name="requestCreditShield", EmitDefaultValue=false)]
        public bool? RequestCreditShield { get; set; }

        /// <summary>
        /// Name to be embossed on card
        /// </summary>
        /// <value>Name to be embossed on card</value>
        [DataMember(Name="embossName", EmitDefaultValue=false)]
        public string EmbossName { get; set; }

        /// <summary>
        /// Billing address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use billingAddress field as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Billing address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use billingAddress field as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public string BillingAddress { get; set; }

        /// <summary>
        /// Card delivery address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use cardDeliveryAddress field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Card delivery address of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid value of this field with description. You can use cardDeliveryAddress field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="cardDeliveryAddress", EmitDefaultValue=false)]
        public string CardDeliveryAddress { get; set; }

        /// <summary>
        /// Delivery address  for card pin of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid values of this field with descriptions. You can use pinDeliveryAddress field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Delivery address  for card pin of applicant. This is a reference data field. Please use /v1/apac/utilities/referenceData/{addressType} resource to get valid values of this field with descriptions. You can use pinDeliveryAddress field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="pinDeliveryAddress", EmitDefaultValue=false)]
        public string PinDeliveryAddress { get; set; }

        /// <summary>
        /// Credit limit accepted by customer
        /// </summary>
        /// <value>Credit limit accepted by customer</value>
        [DataMember(Name="requestedCreditLimit", EmitDefaultValue=false)]
        public double? RequestedCreditLimit { get; set; }

        /// <summary>
        /// Consent to offered credit limit and If the customer has not accepted Bankâ€™s approved credit limit then requestedCreditLimit is mandatory. Valid values: true and false
        /// </summary>
        /// <value>Consent to offered credit limit and If the customer has not accepted Bankâ€™s approved credit limit then requestedCreditLimit is mandatory. Valid values: true and false</value>
        [DataMember(Name="offeredCreditLimitAcceptedFlag", EmitDefaultValue=false)]
        public bool? OfferedCreditLimitAcceptedFlag { get; set; }

        /// <summary>
        /// Option to get ATM card along with product. Valid values: true and false
        /// </summary>
        /// <value>Option to get ATM card along with product. Valid values: true and false</value>
        [DataMember(Name="atmRequiredFlag", EmitDefaultValue=false)]
        public bool? AtmRequiredFlag { get; set; }

        /// <summary>
        /// Option to get cheque book along with product. Valid values: true and false
        /// </summary>
        /// <value>Option to get cheque book along with product. Valid values: true and false</value>
        [DataMember(Name="chequeBookRequiredFlag", EmitDefaultValue=false)]
        public bool? ChequeBookRequiredFlag { get; set; }

        /// <summary>
        /// Option  to increase credit limit. Valid values: true and false
        /// </summary>
        /// <value>Option  to increase credit limit. Valid values: true and false</value>
        [DataMember(Name="creditLimitIncreaseIndicator", EmitDefaultValue=false)]
        public bool? CreditLimitIncreaseIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditSpecificSelection {\n");
            sb.Append("  RequestCreditShield: ").Append(RequestCreditShield).Append("\n");
            sb.Append("  EmbossName: ").Append(EmbossName).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  CardDeliveryAddress: ").Append(CardDeliveryAddress).Append("\n");
            sb.Append("  PinDeliveryAddress: ").Append(PinDeliveryAddress).Append("\n");
            sb.Append("  RequestedCreditLimit: ").Append(RequestedCreditLimit).Append("\n");
            sb.Append("  OfferedCreditLimitAcceptedFlag: ").Append(OfferedCreditLimitAcceptedFlag).Append("\n");
            sb.Append("  AtmRequiredFlag: ").Append(AtmRequiredFlag).Append("\n");
            sb.Append("  ChequeBookRequiredFlag: ").Append(ChequeBookRequiredFlag).Append("\n");
            sb.Append("  CreditLimitIncreaseIndicator: ").Append(CreditLimitIncreaseIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditSpecificSelection);
        }

        /// <summary>
        /// Returns true if CreditSpecificSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditSpecificSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditSpecificSelection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestCreditShield == input.RequestCreditShield ||
                    (this.RequestCreditShield != null &&
                    this.RequestCreditShield.Equals(input.RequestCreditShield))
                ) && 
                (
                    this.EmbossName == input.EmbossName ||
                    (this.EmbossName != null &&
                    this.EmbossName.Equals(input.EmbossName))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.CardDeliveryAddress == input.CardDeliveryAddress ||
                    (this.CardDeliveryAddress != null &&
                    this.CardDeliveryAddress.Equals(input.CardDeliveryAddress))
                ) && 
                (
                    this.PinDeliveryAddress == input.PinDeliveryAddress ||
                    (this.PinDeliveryAddress != null &&
                    this.PinDeliveryAddress.Equals(input.PinDeliveryAddress))
                ) && 
                (
                    this.RequestedCreditLimit == input.RequestedCreditLimit ||
                    (this.RequestedCreditLimit != null &&
                    this.RequestedCreditLimit.Equals(input.RequestedCreditLimit))
                ) && 
                (
                    this.OfferedCreditLimitAcceptedFlag == input.OfferedCreditLimitAcceptedFlag ||
                    (this.OfferedCreditLimitAcceptedFlag != null &&
                    this.OfferedCreditLimitAcceptedFlag.Equals(input.OfferedCreditLimitAcceptedFlag))
                ) && 
                (
                    this.AtmRequiredFlag == input.AtmRequiredFlag ||
                    (this.AtmRequiredFlag != null &&
                    this.AtmRequiredFlag.Equals(input.AtmRequiredFlag))
                ) && 
                (
                    this.ChequeBookRequiredFlag == input.ChequeBookRequiredFlag ||
                    (this.ChequeBookRequiredFlag != null &&
                    this.ChequeBookRequiredFlag.Equals(input.ChequeBookRequiredFlag))
                ) && 
                (
                    this.CreditLimitIncreaseIndicator == input.CreditLimitIncreaseIndicator ||
                    (this.CreditLimitIncreaseIndicator != null &&
                    this.CreditLimitIncreaseIndicator.Equals(input.CreditLimitIncreaseIndicator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestCreditShield != null)
                    hashCode = hashCode * 59 + this.RequestCreditShield.GetHashCode();
                if (this.EmbossName != null)
                    hashCode = hashCode * 59 + this.EmbossName.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.CardDeliveryAddress != null)
                    hashCode = hashCode * 59 + this.CardDeliveryAddress.GetHashCode();
                if (this.PinDeliveryAddress != null)
                    hashCode = hashCode * 59 + this.PinDeliveryAddress.GetHashCode();
                if (this.RequestedCreditLimit != null)
                    hashCode = hashCode * 59 + this.RequestedCreditLimit.GetHashCode();
                if (this.OfferedCreditLimitAcceptedFlag != null)
                    hashCode = hashCode * 59 + this.OfferedCreditLimitAcceptedFlag.GetHashCode();
                if (this.AtmRequiredFlag != null)
                    hashCode = hashCode * 59 + this.AtmRequiredFlag.GetHashCode();
                if (this.ChequeBookRequiredFlag != null)
                    hashCode = hashCode * 59 + this.ChequeBookRequiredFlag.GetHashCode();
                if (this.CreditLimitIncreaseIndicator != null)
                    hashCode = hashCode * 59 + this.CreditLimitIncreaseIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
