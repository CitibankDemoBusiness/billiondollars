/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PresetAtmPinAddRequest
    /// </summary>
    [DataContract]
        public partial class PresetAtmPinAddRequest :  IEquatable<PresetAtmPinAddRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PresetAtmPinAddRequest" /> class.
        /// </summary>
        /// <param name="applicationId">The unique identifier of the application. (required).</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session. (required).</param>
        /// <param name="encryptedPin">Encrypted ATM PIN set by the customer (required).</param>
        /// <param name="pinRegistrationKey">Unique key used for the registration of ATM PIN (required).</param>
        /// <param name="pinLength">Length of the ATM  PIN (required).</param>
        /// <param name="keyDeviceId">Label to identify the HSM keys used to encrypt PIN (required).</param>
        /// <param name="keyGenerationId">It is the generation ID of the HSM Keys referred for encryption for PIN (required).</param>
        public PresetAtmPinAddRequest(string applicationId = default(string), string controlFlowId = default(string), string encryptedPin = default(string), string pinRegistrationKey = default(string), int? pinLength = default(int?), string keyDeviceId = default(string), string keyGenerationId = default(string))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new InvalidDataException("applicationId is a required property for PresetAtmPinAddRequest and cannot be null");
            }
            else
            {
                this.ApplicationId = applicationId;
            }
            // to ensure "controlFlowId" is required (not null)
            if (controlFlowId == null)
            {
                throw new InvalidDataException("controlFlowId is a required property for PresetAtmPinAddRequest and cannot be null");
            }
            else
            {
                this.ControlFlowId = controlFlowId;
            }
            // to ensure "encryptedPin" is required (not null)
            if (encryptedPin == null)
            {
                throw new InvalidDataException("encryptedPin is a required property for PresetAtmPinAddRequest and cannot be null");
            }
            else
            {
                this.EncryptedPin = encryptedPin;
            }
            // to ensure "pinRegistrationKey" is required (not null)
            if (pinRegistrationKey == null)
            {
                throw new InvalidDataException("pinRegistrationKey is a required property for PresetAtmPinAddRequest and cannot be null");
            }
            else
            {
                this.PinRegistrationKey = pinRegistrationKey;
            }
            // to ensure "pinLength" is required (not null)
            if (pinLength == null)
            {
                throw new InvalidDataException("pinLength is a required property for PresetAtmPinAddRequest and cannot be null");
            }
            else
            {
                this.PinLength = pinLength;
            }
            // to ensure "keyDeviceId" is required (not null)
            if (keyDeviceId == null)
            {
                throw new InvalidDataException("keyDeviceId is a required property for PresetAtmPinAddRequest and cannot be null");
            }
            else
            {
                this.KeyDeviceId = keyDeviceId;
            }
            // to ensure "keyGenerationId" is required (not null)
            if (keyGenerationId == null)
            {
                throw new InvalidDataException("keyGenerationId is a required property for PresetAtmPinAddRequest and cannot be null");
            }
            else
            {
                this.KeyGenerationId = keyGenerationId;
            }
        }
        
        /// <summary>
        /// The unique identifier of the application.
        /// </summary>
        /// <value>The unique identifier of the application.</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Control flow id is used to control the flow for subsequent requests in the session.
        /// </summary>
        /// <value>Control flow id is used to control the flow for subsequent requests in the session.</value>
        [DataMember(Name="controlFlowId", EmitDefaultValue=false)]
        public string ControlFlowId { get; set; }

        /// <summary>
        /// Encrypted ATM PIN set by the customer
        /// </summary>
        /// <value>Encrypted ATM PIN set by the customer</value>
        [DataMember(Name="encryptedPin", EmitDefaultValue=false)]
        public string EncryptedPin { get; set; }

        /// <summary>
        /// Unique key used for the registration of ATM PIN
        /// </summary>
        /// <value>Unique key used for the registration of ATM PIN</value>
        [DataMember(Name="pinRegistrationKey", EmitDefaultValue=false)]
        public string PinRegistrationKey { get; set; }

        /// <summary>
        /// Length of the ATM  PIN
        /// </summary>
        /// <value>Length of the ATM  PIN</value>
        [DataMember(Name="pinLength", EmitDefaultValue=false)]
        public int? PinLength { get; set; }

        /// <summary>
        /// Label to identify the HSM keys used to encrypt PIN
        /// </summary>
        /// <value>Label to identify the HSM keys used to encrypt PIN</value>
        [DataMember(Name="keyDeviceId", EmitDefaultValue=false)]
        public string KeyDeviceId { get; set; }

        /// <summary>
        /// It is the generation ID of the HSM Keys referred for encryption for PIN
        /// </summary>
        /// <value>It is the generation ID of the HSM Keys referred for encryption for PIN</value>
        [DataMember(Name="keyGenerationId", EmitDefaultValue=false)]
        public string KeyGenerationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PresetAtmPinAddRequest {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ControlFlowId: ").Append(ControlFlowId).Append("\n");
            sb.Append("  EncryptedPin: ").Append(EncryptedPin).Append("\n");
            sb.Append("  PinRegistrationKey: ").Append(PinRegistrationKey).Append("\n");
            sb.Append("  PinLength: ").Append(PinLength).Append("\n");
            sb.Append("  KeyDeviceId: ").Append(KeyDeviceId).Append("\n");
            sb.Append("  KeyGenerationId: ").Append(KeyGenerationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PresetAtmPinAddRequest);
        }

        /// <summary>
        /// Returns true if PresetAtmPinAddRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PresetAtmPinAddRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PresetAtmPinAddRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.ControlFlowId == input.ControlFlowId ||
                    (this.ControlFlowId != null &&
                    this.ControlFlowId.Equals(input.ControlFlowId))
                ) && 
                (
                    this.EncryptedPin == input.EncryptedPin ||
                    (this.EncryptedPin != null &&
                    this.EncryptedPin.Equals(input.EncryptedPin))
                ) && 
                (
                    this.PinRegistrationKey == input.PinRegistrationKey ||
                    (this.PinRegistrationKey != null &&
                    this.PinRegistrationKey.Equals(input.PinRegistrationKey))
                ) && 
                (
                    this.PinLength == input.PinLength ||
                    (this.PinLength != null &&
                    this.PinLength.Equals(input.PinLength))
                ) && 
                (
                    this.KeyDeviceId == input.KeyDeviceId ||
                    (this.KeyDeviceId != null &&
                    this.KeyDeviceId.Equals(input.KeyDeviceId))
                ) && 
                (
                    this.KeyGenerationId == input.KeyGenerationId ||
                    (this.KeyGenerationId != null &&
                    this.KeyGenerationId.Equals(input.KeyGenerationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.ControlFlowId != null)
                    hashCode = hashCode * 59 + this.ControlFlowId.GetHashCode();
                if (this.EncryptedPin != null)
                    hashCode = hashCode * 59 + this.EncryptedPin.GetHashCode();
                if (this.PinRegistrationKey != null)
                    hashCode = hashCode * 59 + this.PinRegistrationKey.GetHashCode();
                if (this.PinLength != null)
                    hashCode = hashCode * 59 + this.PinLength.GetHashCode();
                if (this.KeyDeviceId != null)
                    hashCode = hashCode * 59 + this.KeyDeviceId.GetHashCode();
                if (this.KeyGenerationId != null)
                    hashCode = hashCode * 59 + this.KeyGenerationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
