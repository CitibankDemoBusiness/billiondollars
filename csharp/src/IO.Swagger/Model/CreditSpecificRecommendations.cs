/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditSpecificRecommendations
    /// </summary>
    [DataContract]
        public partial class CreditSpecificRecommendations :  IEquatable<CreditSpecificRecommendations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditSpecificRecommendations" /> class.
        /// </summary>
        /// <param name="recommendedCreditLimit">Eligible Credit limit.</param>
        /// <param name="btMaximumLoanPercentage">Balance transfer maximum loan percentage. Applicable to Counter and Cross-sell offers.</param>
        /// <param name="btMonthlyInterestRate">Balance transfer monthly interest rate. Applicable to Counter and Cross-sell offers.</param>
        /// <param name="eppMaximumLoanPercentage">EPP(Equal Payment Plan) Max loan percentage. Applicable to counter and cross-sell offers..</param>
        /// <param name="eppMonthlyInterestRate">Equal payment plan monthly interest rate. Applicable to counter and cross-sell offers.</param>
        /// <param name="btCampaignId">Balance transfer campaignId. Applicable to counter and cross-sell offers..</param>
        /// <param name="eppPromoId">PromoId of equal payment plan. Applicable for ready credit, Counter and cross-sell offers.</param>
        public CreditSpecificRecommendations(double? recommendedCreditLimit = default(double?), double? btMaximumLoanPercentage = default(double?), double? btMonthlyInterestRate = default(double?), double? eppMaximumLoanPercentage = default(double?), double? eppMonthlyInterestRate = default(double?), string btCampaignId = default(string), string eppPromoId = default(string))
        {
            this.RecommendedCreditLimit = recommendedCreditLimit;
            this.BtMaximumLoanPercentage = btMaximumLoanPercentage;
            this.BtMonthlyInterestRate = btMonthlyInterestRate;
            this.EppMaximumLoanPercentage = eppMaximumLoanPercentage;
            this.EppMonthlyInterestRate = eppMonthlyInterestRate;
            this.BtCampaignId = btCampaignId;
            this.EppPromoId = eppPromoId;
        }
        
        /// <summary>
        /// Eligible Credit limit
        /// </summary>
        /// <value>Eligible Credit limit</value>
        [DataMember(Name="recommendedCreditLimit", EmitDefaultValue=false)]
        public double? RecommendedCreditLimit { get; set; }

        /// <summary>
        /// Balance transfer maximum loan percentage. Applicable to Counter and Cross-sell offers
        /// </summary>
        /// <value>Balance transfer maximum loan percentage. Applicable to Counter and Cross-sell offers</value>
        [DataMember(Name="btMaximumLoanPercentage", EmitDefaultValue=false)]
        public double? BtMaximumLoanPercentage { get; set; }

        /// <summary>
        /// Balance transfer monthly interest rate. Applicable to Counter and Cross-sell offers
        /// </summary>
        /// <value>Balance transfer monthly interest rate. Applicable to Counter and Cross-sell offers</value>
        [DataMember(Name="btMonthlyInterestRate", EmitDefaultValue=false)]
        public double? BtMonthlyInterestRate { get; set; }

        /// <summary>
        /// EPP(Equal Payment Plan) Max loan percentage. Applicable to counter and cross-sell offers.
        /// </summary>
        /// <value>EPP(Equal Payment Plan) Max loan percentage. Applicable to counter and cross-sell offers.</value>
        [DataMember(Name="eppMaximumLoanPercentage", EmitDefaultValue=false)]
        public double? EppMaximumLoanPercentage { get; set; }

        /// <summary>
        /// Equal payment plan monthly interest rate. Applicable to counter and cross-sell offers
        /// </summary>
        /// <value>Equal payment plan monthly interest rate. Applicable to counter and cross-sell offers</value>
        [DataMember(Name="eppMonthlyInterestRate", EmitDefaultValue=false)]
        public double? EppMonthlyInterestRate { get; set; }

        /// <summary>
        /// Balance transfer campaignId. Applicable to counter and cross-sell offers.
        /// </summary>
        /// <value>Balance transfer campaignId. Applicable to counter and cross-sell offers.</value>
        [DataMember(Name="btCampaignId", EmitDefaultValue=false)]
        public string BtCampaignId { get; set; }

        /// <summary>
        /// PromoId of equal payment plan. Applicable for ready credit, Counter and cross-sell offers
        /// </summary>
        /// <value>PromoId of equal payment plan. Applicable for ready credit, Counter and cross-sell offers</value>
        [DataMember(Name="eppPromoId", EmitDefaultValue=false)]
        public string EppPromoId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditSpecificRecommendations {\n");
            sb.Append("  RecommendedCreditLimit: ").Append(RecommendedCreditLimit).Append("\n");
            sb.Append("  BtMaximumLoanPercentage: ").Append(BtMaximumLoanPercentage).Append("\n");
            sb.Append("  BtMonthlyInterestRate: ").Append(BtMonthlyInterestRate).Append("\n");
            sb.Append("  EppMaximumLoanPercentage: ").Append(EppMaximumLoanPercentage).Append("\n");
            sb.Append("  EppMonthlyInterestRate: ").Append(EppMonthlyInterestRate).Append("\n");
            sb.Append("  BtCampaignId: ").Append(BtCampaignId).Append("\n");
            sb.Append("  EppPromoId: ").Append(EppPromoId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditSpecificRecommendations);
        }

        /// <summary>
        /// Returns true if CreditSpecificRecommendations instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditSpecificRecommendations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditSpecificRecommendations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecommendedCreditLimit == input.RecommendedCreditLimit ||
                    (this.RecommendedCreditLimit != null &&
                    this.RecommendedCreditLimit.Equals(input.RecommendedCreditLimit))
                ) && 
                (
                    this.BtMaximumLoanPercentage == input.BtMaximumLoanPercentage ||
                    (this.BtMaximumLoanPercentage != null &&
                    this.BtMaximumLoanPercentage.Equals(input.BtMaximumLoanPercentage))
                ) && 
                (
                    this.BtMonthlyInterestRate == input.BtMonthlyInterestRate ||
                    (this.BtMonthlyInterestRate != null &&
                    this.BtMonthlyInterestRate.Equals(input.BtMonthlyInterestRate))
                ) && 
                (
                    this.EppMaximumLoanPercentage == input.EppMaximumLoanPercentage ||
                    (this.EppMaximumLoanPercentage != null &&
                    this.EppMaximumLoanPercentage.Equals(input.EppMaximumLoanPercentage))
                ) && 
                (
                    this.EppMonthlyInterestRate == input.EppMonthlyInterestRate ||
                    (this.EppMonthlyInterestRate != null &&
                    this.EppMonthlyInterestRate.Equals(input.EppMonthlyInterestRate))
                ) && 
                (
                    this.BtCampaignId == input.BtCampaignId ||
                    (this.BtCampaignId != null &&
                    this.BtCampaignId.Equals(input.BtCampaignId))
                ) && 
                (
                    this.EppPromoId == input.EppPromoId ||
                    (this.EppPromoId != null &&
                    this.EppPromoId.Equals(input.EppPromoId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecommendedCreditLimit != null)
                    hashCode = hashCode * 59 + this.RecommendedCreditLimit.GetHashCode();
                if (this.BtMaximumLoanPercentage != null)
                    hashCode = hashCode * 59 + this.BtMaximumLoanPercentage.GetHashCode();
                if (this.BtMonthlyInterestRate != null)
                    hashCode = hashCode * 59 + this.BtMonthlyInterestRate.GetHashCode();
                if (this.EppMaximumLoanPercentage != null)
                    hashCode = hashCode * 59 + this.EppMaximumLoanPercentage.GetHashCode();
                if (this.EppMonthlyInterestRate != null)
                    hashCode = hashCode * 59 + this.EppMonthlyInterestRate.GetHashCode();
                if (this.BtCampaignId != null)
                    hashCode = hashCode * 59 + this.BtCampaignId.GetHashCode();
                if (this.EppPromoId != null)
                    hashCode = hashCode * 59 + this.EppPromoId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
