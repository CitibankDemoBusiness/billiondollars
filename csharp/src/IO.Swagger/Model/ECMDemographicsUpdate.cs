/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ECMDemographicsUpdate
    /// </summary>
    [DataContract]
        public partial class ECMDemographicsUpdate :  IEquatable<ECMDemographicsUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ECMDemographicsUpdate" /> class.
        /// </summary>
        /// <param name="maritalStatus">Applicants marital status. This is a reference data field. Please use /v1/utilities/referenceData/{maritalStatus} resource to get valid value of this field with description..</param>
        /// <param name="residencyStatus">Indicate status of residence. This is a reference data field. Please use /v1/utilities/referenceData/{residenceStatus} resource to get valid value of this field with description..</param>
        /// <param name="correspondenceLanguageCode">Code for correspondence language of applicant. This is a reference data field. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description..</param>
        /// <param name="placeOfBirth">Applicants place of birth.</param>
        public ECMDemographicsUpdate(string maritalStatus = default(string), string residencyStatus = default(string), string correspondenceLanguageCode = default(string), string placeOfBirth = default(string))
        {
            this.MaritalStatus = maritalStatus;
            this.ResidencyStatus = residencyStatus;
            this.CorrespondenceLanguageCode = correspondenceLanguageCode;
            this.PlaceOfBirth = placeOfBirth;
        }
        
        /// <summary>
        /// Applicants marital status. This is a reference data field. Please use /v1/utilities/referenceData/{maritalStatus} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Applicants marital status. This is a reference data field. Please use /v1/utilities/referenceData/{maritalStatus} resource to get valid value of this field with description.</value>
        [DataMember(Name="maritalStatus", EmitDefaultValue=false)]
        public string MaritalStatus { get; set; }

        /// <summary>
        /// Indicate status of residence. This is a reference data field. Please use /v1/utilities/referenceData/{residenceStatus} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Indicate status of residence. This is a reference data field. Please use /v1/utilities/referenceData/{residenceStatus} resource to get valid value of this field with description.</value>
        [DataMember(Name="residencyStatus", EmitDefaultValue=false)]
        public string ResidencyStatus { get; set; }

        /// <summary>
        /// Code for correspondence language of applicant. This is a reference data field. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Code for correspondence language of applicant. This is a reference data field. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description.</value>
        [DataMember(Name="correspondenceLanguageCode", EmitDefaultValue=false)]
        public string CorrespondenceLanguageCode { get; set; }

        /// <summary>
        /// Applicants place of birth
        /// </summary>
        /// <value>Applicants place of birth</value>
        [DataMember(Name="placeOfBirth", EmitDefaultValue=false)]
        public string PlaceOfBirth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ECMDemographicsUpdate {\n");
            sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
            sb.Append("  ResidencyStatus: ").Append(ResidencyStatus).Append("\n");
            sb.Append("  CorrespondenceLanguageCode: ").Append(CorrespondenceLanguageCode).Append("\n");
            sb.Append("  PlaceOfBirth: ").Append(PlaceOfBirth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ECMDemographicsUpdate);
        }

        /// <summary>
        /// Returns true if ECMDemographicsUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of ECMDemographicsUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ECMDemographicsUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaritalStatus == input.MaritalStatus ||
                    (this.MaritalStatus != null &&
                    this.MaritalStatus.Equals(input.MaritalStatus))
                ) && 
                (
                    this.ResidencyStatus == input.ResidencyStatus ||
                    (this.ResidencyStatus != null &&
                    this.ResidencyStatus.Equals(input.ResidencyStatus))
                ) && 
                (
                    this.CorrespondenceLanguageCode == input.CorrespondenceLanguageCode ||
                    (this.CorrespondenceLanguageCode != null &&
                    this.CorrespondenceLanguageCode.Equals(input.CorrespondenceLanguageCode))
                ) && 
                (
                    this.PlaceOfBirth == input.PlaceOfBirth ||
                    (this.PlaceOfBirth != null &&
                    this.PlaceOfBirth.Equals(input.PlaceOfBirth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaritalStatus != null)
                    hashCode = hashCode * 59 + this.MaritalStatus.GetHashCode();
                if (this.ResidencyStatus != null)
                    hashCode = hashCode * 59 + this.ResidencyStatus.GetHashCode();
                if (this.CorrespondenceLanguageCode != null)
                    hashCode = hashCode * 59 + this.CorrespondenceLanguageCode.GetHashCode();
                if (this.PlaceOfBirth != null)
                    hashCode = hashCode * 59 + this.PlaceOfBirth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
