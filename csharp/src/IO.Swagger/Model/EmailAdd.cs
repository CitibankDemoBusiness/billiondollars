/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EmailAdd
    /// </summary>
    [DataContract]
        public partial class EmailAdd :  IEquatable<EmailAdd>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAdd" /> class.
        /// </summary>
        /// <param name="emailType">The type of email.  This is a reference data field. Please use /v1/utilities/referenceData/{emailType} resource to get valid value of this field with description..</param>
        /// <param name="emailAddress">Applicant&#x27;s email address (required).</param>
        /// <param name="okToEmail">Applicant&#x27;s consent for receiving email. Valid values: true and false.</param>
        /// <param name="isPreferredEmailAddress">Flag to mark preferred email. Valid values: true and false.</param>
        public EmailAdd(string emailType = default(string), string emailAddress = default(string), bool? okToEmail = default(bool?), bool? isPreferredEmailAddress = default(bool?))
        {
            // to ensure "emailAddress" is required (not null)
            if (emailAddress == null)
            {
                throw new InvalidDataException("emailAddress is a required property for EmailAdd and cannot be null");
            }
            else
            {
                this.EmailAddress = emailAddress;
            }
            this.EmailType = emailType;
            this.OkToEmail = okToEmail;
            this.IsPreferredEmailAddress = isPreferredEmailAddress;
        }
        
        /// <summary>
        /// The type of email.  This is a reference data field. Please use /v1/utilities/referenceData/{emailType} resource to get valid value of this field with description.
        /// </summary>
        /// <value>The type of email.  This is a reference data field. Please use /v1/utilities/referenceData/{emailType} resource to get valid value of this field with description.</value>
        [DataMember(Name="emailType", EmitDefaultValue=false)]
        public string EmailType { get; set; }

        /// <summary>
        /// Applicant&#x27;s email address
        /// </summary>
        /// <value>Applicant&#x27;s email address</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Applicant&#x27;s consent for receiving email. Valid values: true and false
        /// </summary>
        /// <value>Applicant&#x27;s consent for receiving email. Valid values: true and false</value>
        [DataMember(Name="okToEmail", EmitDefaultValue=false)]
        public bool? OkToEmail { get; set; }

        /// <summary>
        /// Flag to mark preferred email. Valid values: true and false
        /// </summary>
        /// <value>Flag to mark preferred email. Valid values: true and false</value>
        [DataMember(Name="isPreferredEmailAddress", EmitDefaultValue=false)]
        public bool? IsPreferredEmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailAdd {\n");
            sb.Append("  EmailType: ").Append(EmailType).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  OkToEmail: ").Append(OkToEmail).Append("\n");
            sb.Append("  IsPreferredEmailAddress: ").Append(IsPreferredEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailAdd);
        }

        /// <summary>
        /// Returns true if EmailAdd instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailAdd to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailAdd input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailType == input.EmailType ||
                    (this.EmailType != null &&
                    this.EmailType.Equals(input.EmailType))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.OkToEmail == input.OkToEmail ||
                    (this.OkToEmail != null &&
                    this.OkToEmail.Equals(input.OkToEmail))
                ) && 
                (
                    this.IsPreferredEmailAddress == input.IsPreferredEmailAddress ||
                    (this.IsPreferredEmailAddress != null &&
                    this.IsPreferredEmailAddress.Equals(input.IsPreferredEmailAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailType != null)
                    hashCode = hashCode * 59 + this.EmailType.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.OkToEmail != null)
                    hashCode = hashCode * 59 + this.OkToEmail.GetHashCode();
                if (this.IsPreferredEmailAddress != null)
                    hashCode = hashCode * 59 + this.IsPreferredEmailAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
