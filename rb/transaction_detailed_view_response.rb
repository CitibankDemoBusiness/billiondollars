=begin
#Accounts

#The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class TransactionDetailedViewResponse
    # A masked account number that can be displayed to the customer
    attr_accessor :display_source_account_number

    # The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.
    attr_accessor :payment_type

    # Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
    attr_accessor :transaction_description

    # Transaction amount in account currency.
    attr_accessor :transaction_amount

    # The currency code for the transaction amount in ISO 4217 format.
    attr_accessor :transaction_currency_code

    # Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,
    attr_accessor :transaction_date

    # The transaction amount in the foreign account current
    attr_accessor :foreign_transaction_amount

    # The currency code for the foreign transaction amount in ISO 4217 format.
    attr_accessor :foreign_currency_code

    # The exchange rate at the time the foreign transaction was done
    attr_accessor :foreign_exchange_rate

    # The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.
    attr_accessor :transaction_status

    # Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601.
    attr_accessor :transaction_posting_date

    attr_accessor :customer_name

    attr_accessor :customer_address

    attr_accessor :beneficiary_bank_details

    attr_accessor :customer_merchant_reference_details

    # Payment notes. Free text from screen
    attr_accessor :remarks

    # This code is used to indicate the priority payments
    attr_accessor :payment_priority_code

    # The code to identify merchant
    attr_accessor :merchant_code

    # The name of the merchant
    attr_accessor :merchant_name

    # Transaction reversal description as provided by the returnee
    attr_accessor :transaction_reversal_description

    attr_accessor :original_transaction_details

    # End to End Identification status
    attr_accessor :end_to_end_identification

    attr_accessor :creditor_details

    attr_accessor :debtor_details

    # Name of the bank.
    attr_accessor :source_bank_name

    # The bank code of the payer account
    attr_accessor :source_bank_code

    # Clearing Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS
    attr_accessor :clearing_time_stamp

    # Settlement Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS
    attr_accessor :settlement_time_stamp

    # Transaction ID identifying the transaction across banks
    attr_accessor :central_bank_transaction_reference_id

    attr_accessor :original_creditor_details

    attr_accessor :original_credit_account_details

    # Original Debtor Name
    attr_accessor :original_debtor_name

    attr_accessor :original_debit_account_details

    # Fees charged for the debit.
    attr_accessor :transaction_debit_fee_amount

    # Bank Member ID
    attr_accessor :bank_member_id

    # Legal Name of the Beneficiary
    attr_accessor :beneficiary_legal_name

    attr_accessor :beneficiary_address

    # Beneficiary Tax ID
    attr_accessor :beneficiary_tax_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'display_source_account_number' => :'displaySourceAccountNumber',
        :'payment_type' => :'paymentType',
        :'transaction_description' => :'transactionDescription',
        :'transaction_amount' => :'transactionAmount',
        :'transaction_currency_code' => :'transactionCurrencyCode',
        :'transaction_date' => :'transactionDate',
        :'foreign_transaction_amount' => :'foreignTransactionAmount',
        :'foreign_currency_code' => :'foreignCurrencyCode',
        :'foreign_exchange_rate' => :'foreignExchangeRate',
        :'transaction_status' => :'transactionStatus',
        :'transaction_posting_date' => :'transactionPostingDate',
        :'customer_name' => :'customerName',
        :'customer_address' => :'customerAddress',
        :'beneficiary_bank_details' => :'beneficiaryBankDetails',
        :'customer_merchant_reference_details' => :'customerMerchantReferenceDetails',
        :'remarks' => :'remarks',
        :'payment_priority_code' => :'paymentPriorityCode',
        :'merchant_code' => :'merchantCode',
        :'merchant_name' => :'merchantName',
        :'transaction_reversal_description' => :'transactionReversalDescription',
        :'original_transaction_details' => :'originalTransactionDetails',
        :'end_to_end_identification' => :'endToEndIdentification',
        :'creditor_details' => :'creditorDetails',
        :'debtor_details' => :'debtorDetails',
        :'source_bank_name' => :'sourceBankName',
        :'source_bank_code' => :'sourceBankCode',
        :'clearing_time_stamp' => :'clearingTimeStamp',
        :'settlement_time_stamp' => :'settlementTimeStamp',
        :'central_bank_transaction_reference_id' => :'centralBankTransactionReferenceId',
        :'original_creditor_details' => :'originalCreditorDetails',
        :'original_credit_account_details' => :'originalCreditAccountDetails',
        :'original_debtor_name' => :'originalDebtorName',
        :'original_debit_account_details' => :'originalDebitAccountDetails',
        :'transaction_debit_fee_amount' => :'transactionDebitFeeAmount',
        :'bank_member_id' => :'bankMemberId',
        :'beneficiary_legal_name' => :'beneficiaryLegalName',
        :'beneficiary_address' => :'beneficiaryAddress',
        :'beneficiary_tax_id' => :'beneficiaryTaxId'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'display_source_account_number' => :'Object',
        :'payment_type' => :'Object',
        :'transaction_description' => :'Object',
        :'transaction_amount' => :'Object',
        :'transaction_currency_code' => :'Object',
        :'transaction_date' => :'Object',
        :'foreign_transaction_amount' => :'Object',
        :'foreign_currency_code' => :'Object',
        :'foreign_exchange_rate' => :'Object',
        :'transaction_status' => :'Object',
        :'transaction_posting_date' => :'Object',
        :'customer_name' => :'Object',
        :'customer_address' => :'Object',
        :'beneficiary_bank_details' => :'Object',
        :'customer_merchant_reference_details' => :'Object',
        :'remarks' => :'Object',
        :'payment_priority_code' => :'Object',
        :'merchant_code' => :'Object',
        :'merchant_name' => :'Object',
        :'transaction_reversal_description' => :'Object',
        :'original_transaction_details' => :'Object',
        :'end_to_end_identification' => :'Object',
        :'creditor_details' => :'Object',
        :'debtor_details' => :'Object',
        :'source_bank_name' => :'Object',
        :'source_bank_code' => :'Object',
        :'clearing_time_stamp' => :'Object',
        :'settlement_time_stamp' => :'Object',
        :'central_bank_transaction_reference_id' => :'Object',
        :'original_creditor_details' => :'Object',
        :'original_credit_account_details' => :'Object',
        :'original_debtor_name' => :'Object',
        :'original_debit_account_details' => :'Object',
        :'transaction_debit_fee_amount' => :'Object',
        :'bank_member_id' => :'Object',
        :'beneficiary_legal_name' => :'Object',
        :'beneficiary_address' => :'Object',
        :'beneficiary_tax_id' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::TransactionDetailedViewResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::TransactionDetailedViewResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'display_source_account_number')
        self.display_source_account_number = attributes[:'display_source_account_number']
      end

      if attributes.key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.key?(:'transaction_description')
        self.transaction_description = attributes[:'transaction_description']
      end

      if attributes.key?(:'transaction_amount')
        self.transaction_amount = attributes[:'transaction_amount']
      end

      if attributes.key?(:'transaction_currency_code')
        self.transaction_currency_code = attributes[:'transaction_currency_code']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'foreign_transaction_amount')
        self.foreign_transaction_amount = attributes[:'foreign_transaction_amount']
      end

      if attributes.key?(:'foreign_currency_code')
        self.foreign_currency_code = attributes[:'foreign_currency_code']
      end

      if attributes.key?(:'foreign_exchange_rate')
        self.foreign_exchange_rate = attributes[:'foreign_exchange_rate']
      end

      if attributes.key?(:'transaction_status')
        self.transaction_status = attributes[:'transaction_status']
      end

      if attributes.key?(:'transaction_posting_date')
        self.transaction_posting_date = attributes[:'transaction_posting_date']
      end

      if attributes.key?(:'customer_name')
        self.customer_name = attributes[:'customer_name']
      end

      if attributes.key?(:'customer_address')
        self.customer_address = attributes[:'customer_address']
      end

      if attributes.key?(:'beneficiary_bank_details')
        self.beneficiary_bank_details = attributes[:'beneficiary_bank_details']
      end

      if attributes.key?(:'customer_merchant_reference_details')
        if (value = attributes[:'customer_merchant_reference_details']).is_a?(Array)
          self.customer_merchant_reference_details = value
        end
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'payment_priority_code')
        self.payment_priority_code = attributes[:'payment_priority_code']
      end

      if attributes.key?(:'merchant_code')
        self.merchant_code = attributes[:'merchant_code']
      end

      if attributes.key?(:'merchant_name')
        self.merchant_name = attributes[:'merchant_name']
      end

      if attributes.key?(:'transaction_reversal_description')
        self.transaction_reversal_description = attributes[:'transaction_reversal_description']
      end

      if attributes.key?(:'original_transaction_details')
        self.original_transaction_details = attributes[:'original_transaction_details']
      end

      if attributes.key?(:'end_to_end_identification')
        self.end_to_end_identification = attributes[:'end_to_end_identification']
      end

      if attributes.key?(:'creditor_details')
        self.creditor_details = attributes[:'creditor_details']
      end

      if attributes.key?(:'debtor_details')
        self.debtor_details = attributes[:'debtor_details']
      end

      if attributes.key?(:'source_bank_name')
        self.source_bank_name = attributes[:'source_bank_name']
      end

      if attributes.key?(:'source_bank_code')
        self.source_bank_code = attributes[:'source_bank_code']
      end

      if attributes.key?(:'clearing_time_stamp')
        self.clearing_time_stamp = attributes[:'clearing_time_stamp']
      end

      if attributes.key?(:'settlement_time_stamp')
        self.settlement_time_stamp = attributes[:'settlement_time_stamp']
      end

      if attributes.key?(:'central_bank_transaction_reference_id')
        self.central_bank_transaction_reference_id = attributes[:'central_bank_transaction_reference_id']
      end

      if attributes.key?(:'original_creditor_details')
        self.original_creditor_details = attributes[:'original_creditor_details']
      end

      if attributes.key?(:'original_credit_account_details')
        self.original_credit_account_details = attributes[:'original_credit_account_details']
      end

      if attributes.key?(:'original_debtor_name')
        self.original_debtor_name = attributes[:'original_debtor_name']
      end

      if attributes.key?(:'original_debit_account_details')
        self.original_debit_account_details = attributes[:'original_debit_account_details']
      end

      if attributes.key?(:'transaction_debit_fee_amount')
        self.transaction_debit_fee_amount = attributes[:'transaction_debit_fee_amount']
      end

      if attributes.key?(:'bank_member_id')
        self.bank_member_id = attributes[:'bank_member_id']
      end

      if attributes.key?(:'beneficiary_legal_name')
        self.beneficiary_legal_name = attributes[:'beneficiary_legal_name']
      end

      if attributes.key?(:'beneficiary_address')
        if (value = attributes[:'beneficiary_address']).is_a?(Array)
          self.beneficiary_address = value
        end
      end

      if attributes.key?(:'beneficiary_tax_id')
        self.beneficiary_tax_id = attributes[:'beneficiary_tax_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @payment_type.nil?
        invalid_properties.push('invalid value for "payment_type", payment_type cannot be nil.')
      end

      if @transaction_amount.nil?
        invalid_properties.push('invalid value for "transaction_amount", transaction_amount cannot be nil.')
      end

      if @transaction_currency_code.nil?
        invalid_properties.push('invalid value for "transaction_currency_code", transaction_currency_code cannot be nil.')
      end

      if @transaction_date.nil?
        invalid_properties.push('invalid value for "transaction_date", transaction_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @payment_type.nil?
      return false if @transaction_amount.nil?
      return false if @transaction_currency_code.nil?
      return false if @transaction_date.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          display_source_account_number == o.display_source_account_number &&
          payment_type == o.payment_type &&
          transaction_description == o.transaction_description &&
          transaction_amount == o.transaction_amount &&
          transaction_currency_code == o.transaction_currency_code &&
          transaction_date == o.transaction_date &&
          foreign_transaction_amount == o.foreign_transaction_amount &&
          foreign_currency_code == o.foreign_currency_code &&
          foreign_exchange_rate == o.foreign_exchange_rate &&
          transaction_status == o.transaction_status &&
          transaction_posting_date == o.transaction_posting_date &&
          customer_name == o.customer_name &&
          customer_address == o.customer_address &&
          beneficiary_bank_details == o.beneficiary_bank_details &&
          customer_merchant_reference_details == o.customer_merchant_reference_details &&
          remarks == o.remarks &&
          payment_priority_code == o.payment_priority_code &&
          merchant_code == o.merchant_code &&
          merchant_name == o.merchant_name &&
          transaction_reversal_description == o.transaction_reversal_description &&
          original_transaction_details == o.original_transaction_details &&
          end_to_end_identification == o.end_to_end_identification &&
          creditor_details == o.creditor_details &&
          debtor_details == o.debtor_details &&
          source_bank_name == o.source_bank_name &&
          source_bank_code == o.source_bank_code &&
          clearing_time_stamp == o.clearing_time_stamp &&
          settlement_time_stamp == o.settlement_time_stamp &&
          central_bank_transaction_reference_id == o.central_bank_transaction_reference_id &&
          original_creditor_details == o.original_creditor_details &&
          original_credit_account_details == o.original_credit_account_details &&
          original_debtor_name == o.original_debtor_name &&
          original_debit_account_details == o.original_debit_account_details &&
          transaction_debit_fee_amount == o.transaction_debit_fee_amount &&
          bank_member_id == o.bank_member_id &&
          beneficiary_legal_name == o.beneficiary_legal_name &&
          beneficiary_address == o.beneficiary_address &&
          beneficiary_tax_id == o.beneficiary_tax_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [display_source_account_number, payment_type, transaction_description, transaction_amount, transaction_currency_code, transaction_date, foreign_transaction_amount, foreign_currency_code, foreign_exchange_rate, transaction_status, transaction_posting_date, customer_name, customer_address, beneficiary_bank_details, customer_merchant_reference_details, remarks, payment_priority_code, merchant_code, merchant_name, transaction_reversal_description, original_transaction_details, end_to_end_identification, creditor_details, debtor_details, source_bank_name, source_bank_code, clearing_time_stamp, settlement_time_stamp, central_bank_transaction_reference_id, original_creditor_details, original_credit_account_details, original_debtor_name, original_debit_account_details, transaction_debit_fee_amount, bank_member_id, beneficiary_legal_name, beneficiary_address, beneficiary_tax_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
