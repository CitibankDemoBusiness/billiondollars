=begin
#TaxStatement_Digital_Orchestation

#Account Documents APIs Version 2.0. These APIs will be used by Citi Partners to retrieve tax documents for existing Accounts from various regions. PCF Deployment Reference name --> DM-O-DocumentServices-Statements  </br>Version 2.0.0 Added new Tax statements apis.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class TaxStatementsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # OB Return the masked tax statement for the given tax statement id
    # This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
    # @param authorization The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.
    # @param accept Content types that are acceptable for the response. Currently we support application/json
    # @param content_type Content-Type of the request
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param client_id The client ID received during customer onboarding.
    # @param taxstatement_id Unique id that maps to the specific tax statement to be downloaded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code Two character ISO format country code.
    # @return [Document]
    def get_tax_statement(authorization, accept, content_type, uuid, client_id, taxstatement_id, opts = {})
      data, _status_code, _headers = get_tax_statement_with_http_info(authorization, accept, content_type, uuid, client_id, taxstatement_id, opts)
      data
    end

    # OB Return the masked tax statement for the given tax statement id
    # This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
    # @param authorization The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.
    # @param accept Content types that are acceptable for the response. Currently we support application/json
    # @param content_type Content-Type of the request
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param client_id The client ID received during customer onboarding.
    # @param taxstatement_id Unique id that maps to the specific tax statement to be downloaded.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code Two character ISO format country code.
    # @return [Array<(Document, Integer, Hash)>] Document data, response status code and response headers
    def get_tax_statement_with_http_info(authorization, accept, content_type, uuid, client_id, taxstatement_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxStatementsApi.get_tax_statement ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxStatementsApi.get_tax_statement"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling TaxStatementsApi.get_tax_statement"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling TaxStatementsApi.get_tax_statement"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling TaxStatementsApi.get_tax_statement"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling TaxStatementsApi.get_tax_statement"
      end
      # verify the required parameter 'taxstatement_id' is set
      if @api_client.config.client_side_validation && taxstatement_id.nil?
        fail ArgumentError, "Missing the required parameter 'taxstatement_id' when calling TaxStatementsApi.get_tax_statement"
      end
      # resource path
      local_var_path = '/taxStatements/{taxstatementId}'.sub('{' + 'taxstatementId' + '}', taxstatement_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'charset=UTF-8'])
      header_params[:'Authorization'] = authorization
      header_params[:'Accept'] = accept
      header_params[:'Content-Type'] = content_type
      header_params[:'uuid'] = uuid
      header_params[:'client_id'] = client_id
      header_params[:'countryCode'] = opts[:'country_code'] if !opts[:'country_code'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Document' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxStatementsApi#get_tax_statement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # OB Returns list of masked tax statements
    # This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
    # @param authorization The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.
    # @param accept Content types that are acceptable for the response. Currently we support application/json
    # @param uuid 128 bit random UUID generated uniquely for every request
    # @param content_type Content-Type of the request
    # @param client_id The client ID received during application registration in the developer portal.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code Two character ISO format country code.
    # @return [Documents]
    def get_tax_statements(authorization, accept, uuid, content_type, client_id, opts = {})
      data, _status_code, _headers = get_tax_statements_with_http_info(authorization, accept, uuid, content_type, client_id, opts)
      data
    end

    # OB Returns list of masked tax statements
    # This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
    # @param authorization The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.
    # @param accept Content types that are acceptable for the response. Currently we support application/json
    # @param uuid 128 bit random UUID generated uniquely for every request
    # @param content_type Content-Type of the request
    # @param client_id The client ID received during application registration in the developer portal.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code Two character ISO format country code.
    # @return [Array<(Documents, Integer, Hash)>] Documents data, response status code and response headers
    def get_tax_statements_with_http_info(authorization, accept, uuid, content_type, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxStatementsApi.get_tax_statements ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxStatementsApi.get_tax_statements"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling TaxStatementsApi.get_tax_statements"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling TaxStatementsApi.get_tax_statements"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling TaxStatementsApi.get_tax_statements"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling TaxStatementsApi.get_tax_statements"
      end
      # resource path
      local_var_path = '/taxStatements'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'charset=UTF-8'])
      header_params[:'Authorization'] = authorization
      header_params[:'Accept'] = accept
      header_params[:'uuid'] = uuid
      header_params[:'Content-Type'] = content_type
      header_params[:'client_id'] = client_id
      header_params[:'countryCode'] = opts[:'country_code'] if !opts[:'country_code'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Documents' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxStatementsApi#get_tax_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
