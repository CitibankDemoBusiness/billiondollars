=begin
#ConsumerDataStandards_Digital_Regulatory

#The product \\amp Product Details APIs allow third-parties to retrieve a list of Product categories \\amp details for Citi and our White-label Partners.

OpenAPI spec version: 1.2.0
Contact: cdr-data61@csiro.au
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class BankingProductFeature
    # The type of feature described
    attr_accessor :feature_type

    # Generic field containing additional information relevant to the [featureType] (#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.] (#tocSproductfeaturetypedoc)
    attr_accessor :additional_value

    # Display text providing more information on the feature. Mandatory if the [feature type] (#tocSproductfeaturetypedoc) is set to OTHER
    attr_accessor :additional_info

    # Link to a web page with more information on this feature
    attr_accessor :additional_info_uri

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'feature_type' => :'featureType',
        :'additional_value' => :'additionalValue',
        :'additional_info' => :'additionalInfo',
        :'additional_info_uri' => :'additionalInfoUri'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'feature_type' => :'Object',
        :'additional_value' => :'Object',
        :'additional_info' => :'Object',
        :'additional_info_uri' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::BankingProductFeature` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::BankingProductFeature`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'feature_type')
        self.feature_type = attributes[:'feature_type']
      end

      if attributes.key?(:'additional_value')
        self.additional_value = attributes[:'additional_value']
      end

      if attributes.key?(:'additional_info')
        self.additional_info = attributes[:'additional_info']
      end

      if attributes.key?(:'additional_info_uri')
        self.additional_info_uri = attributes[:'additional_info_uri']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @feature_type.nil?
        invalid_properties.push('invalid value for "feature_type", feature_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @feature_type.nil?
      feature_type_validator = EnumAttributeValidator.new('Object', ['CARD_ACCESS', 'ADDITIONAL_CARDS', 'UNLIMITED_TXNS', 'FREE_TXNS', 'FREE_TXNS_ALLOWANCE', 'LOYALTY_PROGRAM', 'OFFSET', 'OVERDRAFT', 'REDRAW', 'INSURANCE', 'BALANCE_TRANSFERS', 'INTEREST_FREE', 'INTEREST_FREE_TRANSFERS', 'DIGITAL_WALLET', 'DIGITAL_BANKING', 'NPP_PAYID', 'NPP_ENABLED', 'DONATE_INTEREST', 'BILL_PAYMENT', 'COMPLEMENTARY_PRODUCT_DISCOUNTS', 'BONUS_REWARDS', 'NOTIFICATIONS', 'OTHER'])
      return false unless feature_type_validator.valid?(@feature_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] feature_type Object to be assigned
    def feature_type=(feature_type)
      validator = EnumAttributeValidator.new('Object', ['CARD_ACCESS', 'ADDITIONAL_CARDS', 'UNLIMITED_TXNS', 'FREE_TXNS', 'FREE_TXNS_ALLOWANCE', 'LOYALTY_PROGRAM', 'OFFSET', 'OVERDRAFT', 'REDRAW', 'INSURANCE', 'BALANCE_TRANSFERS', 'INTEREST_FREE', 'INTEREST_FREE_TRANSFERS', 'DIGITAL_WALLET', 'DIGITAL_BANKING', 'NPP_PAYID', 'NPP_ENABLED', 'DONATE_INTEREST', 'BILL_PAYMENT', 'COMPLEMENTARY_PRODUCT_DISCOUNTS', 'BONUS_REWARDS', 'NOTIFICATIONS', 'OTHER'])
      unless validator.valid?(feature_type)
        fail ArgumentError, "invalid value for \"feature_type\", must be one of #{validator.allowable_values}."
      end
      @feature_type = feature_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          feature_type == o.feature_type &&
          additional_value == o.additional_value &&
          additional_info == o.additional_info &&
          additional_info_uri == o.additional_info_uri
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [feature_type, additional_value, additional_info, additional_info_uri].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
