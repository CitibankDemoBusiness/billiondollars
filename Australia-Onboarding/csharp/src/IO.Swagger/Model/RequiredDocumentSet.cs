/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RequiredDocumentSet
    /// </summary>
    [DataContract]
        public partial class RequiredDocumentSet :  IEquatable<RequiredDocumentSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredDocumentSet" /> class.
        /// </summary>
        /// <param name="documentSet">Document set a mandated combination of document types for each proof. This is a reference data field. Please use /v1/utilities/referenceData/{documentIdType} resource to get valid values of this field with descriptions..</param>
        /// <param name="productCode">A unique code that identifies the product.</param>
        /// <param name="proofType">Type of document. This is a reference data field. Please use /v1/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions..</param>
        /// <param name="applicantType">Applicant relationship with the Bank. Currently supported value is primary.This is a reference data data field. Please use /v1/utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions.</param>
        public RequiredDocumentSet(string documentSet = default(string), string productCode = default(string), string proofType = default(string), string applicantType = default(string))
        {
            this.DocumentSet = documentSet;
            this.ProductCode = productCode;
            this.ProofType = proofType;
            this.ApplicantType = applicantType;
        }
        
        /// <summary>
        /// Document set a mandated combination of document types for each proof. This is a reference data field. Please use /v1/utilities/referenceData/{documentIdType} resource to get valid values of this field with descriptions.
        /// </summary>
        /// <value>Document set a mandated combination of document types for each proof. This is a reference data field. Please use /v1/utilities/referenceData/{documentIdType} resource to get valid values of this field with descriptions.</value>
        [DataMember(Name="documentSet", EmitDefaultValue=false)]
        public string DocumentSet { get; set; }

        /// <summary>
        /// A unique code that identifies the product
        /// </summary>
        /// <value>A unique code that identifies the product</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Type of document. This is a reference data field. Please use /v1/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.
        /// </summary>
        /// <value>Type of document. This is a reference data field. Please use /v1/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.</value>
        [DataMember(Name="proofType", EmitDefaultValue=false)]
        public string ProofType { get; set; }

        /// <summary>
        /// Applicant relationship with the Bank. Currently supported value is primary.This is a reference data data field. Please use /v1/utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions
        /// </summary>
        /// <value>Applicant relationship with the Bank. Currently supported value is primary.This is a reference data data field. Please use /v1/utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions</value>
        [DataMember(Name="applicantType", EmitDefaultValue=false)]
        public string ApplicantType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequiredDocumentSet {\n");
            sb.Append("  DocumentSet: ").Append(DocumentSet).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProofType: ").Append(ProofType).Append("\n");
            sb.Append("  ApplicantType: ").Append(ApplicantType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequiredDocumentSet);
        }

        /// <summary>
        /// Returns true if RequiredDocumentSet instances are equal
        /// </summary>
        /// <param name="input">Instance of RequiredDocumentSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequiredDocumentSet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentSet == input.DocumentSet ||
                    (this.DocumentSet != null &&
                    this.DocumentSet.Equals(input.DocumentSet))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ProofType == input.ProofType ||
                    (this.ProofType != null &&
                    this.ProofType.Equals(input.ProofType))
                ) && 
                (
                    this.ApplicantType == input.ApplicantType ||
                    (this.ApplicantType != null &&
                    this.ApplicantType.Equals(input.ApplicantType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentSet != null)
                    hashCode = hashCode * 59 + this.DocumentSet.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.ProofType != null)
                    hashCode = hashCode * 59 + this.ProofType.GetHashCode();
                if (this.ApplicantType != null)
                    hashCode = hashCode * 59 + this.ApplicantType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
