/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SuggestedDisbursementAccount
    /// </summary>
    [DataContract]
        public partial class SuggestedDisbursementAccount :  IEquatable<SuggestedDisbursementAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuggestedDisbursementAccount" /> class.
        /// </summary>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer.</param>
        /// <param name="accountReferenceKey">Account reference key for linking account in a customer session..</param>
        /// <param name="accountType">Type of the account. This is a reference data field. Please use /v1/utilities/referenceData/{accountType} resource to get valid value of this field with description..</param>
        /// <param name="bankName">bank name to be displayed to customer.</param>
        /// <param name="currentDdaFlag">Identifies whether account is current direct disbursement account or not. Valid values: true and false.</param>
        public SuggestedDisbursementAccount(string displayAccountNumber = default(string), string accountReferenceKey = default(string), string accountType = default(string), string bankName = default(string), bool? currentDdaFlag = default(bool?))
        {
            this.DisplayAccountNumber = displayAccountNumber;
            this.AccountReferenceKey = accountReferenceKey;
            this.AccountType = accountType;
            this.BankName = bankName;
            this.CurrentDdaFlag = currentDdaFlag;
        }
        
        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// Account reference key for linking account in a customer session.
        /// </summary>
        /// <value>Account reference key for linking account in a customer session.</value>
        [DataMember(Name="accountReferenceKey", EmitDefaultValue=false)]
        public string AccountReferenceKey { get; set; }

        /// <summary>
        /// Type of the account. This is a reference data field. Please use /v1/utilities/referenceData/{accountType} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Type of the account. This is a reference data field. Please use /v1/utilities/referenceData/{accountType} resource to get valid value of this field with description.</value>
        [DataMember(Name="accountType", EmitDefaultValue=false)]
        public string AccountType { get; set; }

        /// <summary>
        /// bank name to be displayed to customer
        /// </summary>
        /// <value>bank name to be displayed to customer</value>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// Identifies whether account is current direct disbursement account or not. Valid values: true and false
        /// </summary>
        /// <value>Identifies whether account is current direct disbursement account or not. Valid values: true and false</value>
        [DataMember(Name="currentDdaFlag", EmitDefaultValue=false)]
        public bool? CurrentDdaFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuggestedDisbursementAccount {\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  AccountReferenceKey: ").Append(AccountReferenceKey).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  CurrentDdaFlag: ").Append(CurrentDdaFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SuggestedDisbursementAccount);
        }

        /// <summary>
        /// Returns true if SuggestedDisbursementAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of SuggestedDisbursementAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuggestedDisbursementAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.AccountReferenceKey == input.AccountReferenceKey ||
                    (this.AccountReferenceKey != null &&
                    this.AccountReferenceKey.Equals(input.AccountReferenceKey))
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.CurrentDdaFlag == input.CurrentDdaFlag ||
                    (this.CurrentDdaFlag != null &&
                    this.CurrentDdaFlag.Equals(input.CurrentDdaFlag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.AccountReferenceKey != null)
                    hashCode = hashCode * 59 + this.AccountReferenceKey.GetHashCode();
                if (this.AccountType != null)
                    hashCode = hashCode * 59 + this.AccountType.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.CurrentDdaFlag != null)
                    hashCode = hashCode * 59 + this.CurrentDdaFlag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
