/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AdditionalDataUpdate
    /// </summary>
    [DataContract]
        public partial class AdditionalDataUpdate :  IEquatable<AdditionalDataUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDataUpdate" /> class.
        /// </summary>
        /// <param name="accountFundSource">This field is to indicates the primary source from which this account will be funded. This is a reference data field. Please use /v1/utilities/referenceData/{accountFundSource} resource to get valid value of this field with description..</param>
        /// <param name="numberOfDependents">Number of dependants.</param>
        /// <param name="staffIndicator">Flag to indicates if applicant is a Citi Staff. Valid values: true and false.</param>
        /// <param name="otpAuthenticationSuccessFlag">Flag to indicate if customer is authenticated successfully.</param>
        /// <param name="bureauDataPrePopulateConsentFlag">Flag to capture applicant&#x27;s consent for Bureau Data Prepopulation.</param>
        /// <param name="businessNature">Business nature of the applicant. This is a reference data data field. Please use /v1/utilities/referenceData/{businessNature} resource to get valid value of this field with description..</param>
        /// <param name="emergencyContactName">Emergency contact given name.</param>
        /// <param name="emergencyContactSurname">Emergency contact surname.</param>
        /// <param name="emergencyContactRelationship">Applicant&#x27;s relationship with the emergency contact.This is a reference data. Please use /v1/utilities/referenceData/{emergencyContactRelationship} resource to get valid value of this field.</param>
        /// <param name="emergencyContactPhoneNumber">Emergency Contact Number..</param>
        /// <param name="overLimitConsentFlag">Customer Consent on spending more than the limit assigned to him. Valid values: true and false.</param>
        /// <param name="countrySpecificGroup">countrySpecificGroup.</param>
        /// <param name="primaryBankDetails">primaryBankDetails.</param>
        /// <param name="referralGivenName">Referral First Name..</param>
        /// <param name="referralSurname">Referral Surname/Last Name..</param>
        /// <param name="introducerId">Unique identifier associated with the introducer who had referred the applicant..</param>
        /// <param name="relatedToCitiEmployeeFlag">Self declaration if applicant has any relation with citi bank employee. Valid values: true and false.</param>
        /// <param name="relatedCitiEmployeeName">Name of the citi employee if applicant has any relation with citi bank employee..</param>
        /// <param name="relatedCitiEmployeeDepartment">Department of citi employee if applicant has any relation with citi bank employee..</param>
        /// <param name="creditCardUsagePurpose">Indicates applicants usage of credit card whether it is for personal or business.Please use /v1/utilities/referenceData/{creditCardUsagePurpose} resource to get valid value of this field with description..</param>
        /// <param name="cashPinFlag">Indicates whether the customer wants a separate cash PIN..</param>
        /// <param name="mediaId">The media ID will be used to determine which offer / campaign banner was clicked when the customer made his application .</param>
        /// <param name="referralCode">Referral Code used for the customer.</param>
        /// <param name="referralTracking">referralTracking.</param>
        /// <param name="utilityBillDetails">utilityBillDetails.</param>
        /// <param name="feeCode">Fee code that applied to the requested product.</param>
        /// <param name="billingCycleDay">Day of each month for the bill payment. This is a reference data field. Please use /v1/utilities/referenceData/{billingCycleDay} resource to get valid value of this field with description..</param>
        /// <param name="applicationReferenceId">Unique reference ID associated with the application.</param>
        /// <param name="customerSegment">Customer segment decides each applicantâ€™s interest rate  Different customer target will be subjected to different interest rate..This is a reference data field. Please use /v1/utilities/referenceData/{customerSegment} resource to get valid value of this field with description. .</param>
        /// <param name="printingSerialNumber">This field refers to the unique number for each application to be identified by COLA and printed in PDF form.It enables to identify the customer in case the customer could not complete filling his/her details and was dropped-off in between.</param>
        /// <param name="additionalInformation">This field refers to the additional comments given by the customer which is to be noted-down during the application process..</param>
        /// <param name="tradeReferenceDetails">tradeReferenceDetails.</param>
        /// <param name="bureauSessionId_">Session ID that is generated from the session / interaction of channel with bureau..</param>
        public AdditionalDataUpdate(string accountFundSource = default(string), decimal? numberOfDependents = default(decimal?), bool? staffIndicator = default(bool?), bool? otpAuthenticationSuccessFlag = default(bool?), bool? bureauDataPrePopulateConsentFlag = default(bool?), string businessNature = default(string), string emergencyContactName = default(string), string emergencyContactSurname = default(string), string emergencyContactRelationship = default(string), string emergencyContactPhoneNumber = default(string), bool? overLimitConsentFlag = default(bool?), CountrySpecificGroup countrySpecificGroup = default(CountrySpecificGroup), PrimaryBankDetails primaryBankDetails = default(PrimaryBankDetails), string referralGivenName = default(string), string referralSurname = default(string), string introducerId = default(string), bool? relatedToCitiEmployeeFlag = default(bool?), string relatedCitiEmployeeName = default(string), string relatedCitiEmployeeDepartment = default(string), string creditCardUsagePurpose = default(string), bool? cashPinFlag = default(bool?), string mediaId = default(string), string referralCode = default(string), ReferralTracking referralTracking = default(ReferralTracking), UtilityBillDetails utilityBillDetails = default(UtilityBillDetails), string feeCode = default(string), string billingCycleDay = default(string), string applicationReferenceId = default(string), string customerSegment = default(string), string printingSerialNumber = default(string), string additionalInformation = default(string), TradeReferenceDetails tradeReferenceDetails = default(TradeReferenceDetails), string bureauSessionId_ = default(string))
        {
            this.AccountFundSource = accountFundSource;
            this.NumberOfDependents = numberOfDependents;
            this.StaffIndicator = staffIndicator;
            this.OtpAuthenticationSuccessFlag = otpAuthenticationSuccessFlag;
            this.BureauDataPrePopulateConsentFlag = bureauDataPrePopulateConsentFlag;
            this.BusinessNature = businessNature;
            this.EmergencyContactName = emergencyContactName;
            this.EmergencyContactSurname = emergencyContactSurname;
            this.EmergencyContactRelationship = emergencyContactRelationship;
            this.EmergencyContactPhoneNumber = emergencyContactPhoneNumber;
            this.OverLimitConsentFlag = overLimitConsentFlag;
            this.CountrySpecificGroup = countrySpecificGroup;
            this.PrimaryBankDetails = primaryBankDetails;
            this.ReferralGivenName = referralGivenName;
            this.ReferralSurname = referralSurname;
            this.IntroducerId = introducerId;
            this.RelatedToCitiEmployeeFlag = relatedToCitiEmployeeFlag;
            this.RelatedCitiEmployeeName = relatedCitiEmployeeName;
            this.RelatedCitiEmployeeDepartment = relatedCitiEmployeeDepartment;
            this.CreditCardUsagePurpose = creditCardUsagePurpose;
            this.CashPinFlag = cashPinFlag;
            this.MediaId = mediaId;
            this.ReferralCode = referralCode;
            this.ReferralTracking = referralTracking;
            this.UtilityBillDetails = utilityBillDetails;
            this.FeeCode = feeCode;
            this.BillingCycleDay = billingCycleDay;
            this.ApplicationReferenceId = applicationReferenceId;
            this.CustomerSegment = customerSegment;
            this.PrintingSerialNumber = printingSerialNumber;
            this.AdditionalInformation = additionalInformation;
            this.TradeReferenceDetails = tradeReferenceDetails;
            this.BureauSessionId_ = bureauSessionId_;
        }
        
        /// <summary>
        /// This field is to indicates the primary source from which this account will be funded. This is a reference data field. Please use /v1/utilities/referenceData/{accountFundSource} resource to get valid value of this field with description.
        /// </summary>
        /// <value>This field is to indicates the primary source from which this account will be funded. This is a reference data field. Please use /v1/utilities/referenceData/{accountFundSource} resource to get valid value of this field with description.</value>
        [DataMember(Name="accountFundSource", EmitDefaultValue=false)]
        public string AccountFundSource { get; set; }

        /// <summary>
        /// Number of dependants
        /// </summary>
        /// <value>Number of dependants</value>
        [DataMember(Name="numberOfDependents", EmitDefaultValue=false)]
        public decimal? NumberOfDependents { get; set; }

        /// <summary>
        /// Flag to indicates if applicant is a Citi Staff. Valid values: true and false
        /// </summary>
        /// <value>Flag to indicates if applicant is a Citi Staff. Valid values: true and false</value>
        [DataMember(Name="staffIndicator", EmitDefaultValue=false)]
        public bool? StaffIndicator { get; set; }

        /// <summary>
        /// Flag to indicate if customer is authenticated successfully
        /// </summary>
        /// <value>Flag to indicate if customer is authenticated successfully</value>
        [DataMember(Name="otpAuthenticationSuccessFlag", EmitDefaultValue=false)]
        public bool? OtpAuthenticationSuccessFlag { get; set; }

        /// <summary>
        /// Flag to capture applicant&#x27;s consent for Bureau Data Prepopulation
        /// </summary>
        /// <value>Flag to capture applicant&#x27;s consent for Bureau Data Prepopulation</value>
        [DataMember(Name="bureauDataPrePopulateConsentFlag", EmitDefaultValue=false)]
        public bool? BureauDataPrePopulateConsentFlag { get; set; }

        /// <summary>
        /// Business nature of the applicant. This is a reference data data field. Please use /v1/utilities/referenceData/{businessNature} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Business nature of the applicant. This is a reference data data field. Please use /v1/utilities/referenceData/{businessNature} resource to get valid value of this field with description.</value>
        [DataMember(Name="businessNature", EmitDefaultValue=false)]
        public string BusinessNature { get; set; }

        /// <summary>
        /// Emergency contact given name
        /// </summary>
        /// <value>Emergency contact given name</value>
        [DataMember(Name="emergencyContactName", EmitDefaultValue=false)]
        public string EmergencyContactName { get; set; }

        /// <summary>
        /// Emergency contact surname
        /// </summary>
        /// <value>Emergency contact surname</value>
        [DataMember(Name="emergencyContactSurname", EmitDefaultValue=false)]
        public string EmergencyContactSurname { get; set; }

        /// <summary>
        /// Applicant&#x27;s relationship with the emergency contact.This is a reference data. Please use /v1/utilities/referenceData/{emergencyContactRelationship} resource to get valid value of this field
        /// </summary>
        /// <value>Applicant&#x27;s relationship with the emergency contact.This is a reference data. Please use /v1/utilities/referenceData/{emergencyContactRelationship} resource to get valid value of this field</value>
        [DataMember(Name="emergencyContactRelationship", EmitDefaultValue=false)]
        public string EmergencyContactRelationship { get; set; }

        /// <summary>
        /// Emergency Contact Number.
        /// </summary>
        /// <value>Emergency Contact Number.</value>
        [DataMember(Name="emergencyContactPhoneNumber", EmitDefaultValue=false)]
        public string EmergencyContactPhoneNumber { get; set; }

        /// <summary>
        /// Customer Consent on spending more than the limit assigned to him. Valid values: true and false
        /// </summary>
        /// <value>Customer Consent on spending more than the limit assigned to him. Valid values: true and false</value>
        [DataMember(Name="overLimitConsentFlag", EmitDefaultValue=false)]
        public bool? OverLimitConsentFlag { get; set; }

        /// <summary>
        /// Gets or Sets CountrySpecificGroup
        /// </summary>
        [DataMember(Name="countrySpecificGroup", EmitDefaultValue=false)]
        public CountrySpecificGroup CountrySpecificGroup { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryBankDetails
        /// </summary>
        [DataMember(Name="primaryBankDetails", EmitDefaultValue=false)]
        public PrimaryBankDetails PrimaryBankDetails { get; set; }

        /// <summary>
        /// Referral First Name.
        /// </summary>
        /// <value>Referral First Name.</value>
        [DataMember(Name="referralGivenName", EmitDefaultValue=false)]
        public string ReferralGivenName { get; set; }

        /// <summary>
        /// Referral Surname/Last Name.
        /// </summary>
        /// <value>Referral Surname/Last Name.</value>
        [DataMember(Name="referralSurname", EmitDefaultValue=false)]
        public string ReferralSurname { get; set; }

        /// <summary>
        /// Unique identifier associated with the introducer who had referred the applicant.
        /// </summary>
        /// <value>Unique identifier associated with the introducer who had referred the applicant.</value>
        [DataMember(Name="introducerId", EmitDefaultValue=false)]
        public string IntroducerId { get; set; }

        /// <summary>
        /// Self declaration if applicant has any relation with citi bank employee. Valid values: true and false
        /// </summary>
        /// <value>Self declaration if applicant has any relation with citi bank employee. Valid values: true and false</value>
        [DataMember(Name="relatedToCitiEmployeeFlag", EmitDefaultValue=false)]
        public bool? RelatedToCitiEmployeeFlag { get; set; }

        /// <summary>
        /// Name of the citi employee if applicant has any relation with citi bank employee.
        /// </summary>
        /// <value>Name of the citi employee if applicant has any relation with citi bank employee.</value>
        [DataMember(Name="relatedCitiEmployeeName", EmitDefaultValue=false)]
        public string RelatedCitiEmployeeName { get; set; }

        /// <summary>
        /// Department of citi employee if applicant has any relation with citi bank employee.
        /// </summary>
        /// <value>Department of citi employee if applicant has any relation with citi bank employee.</value>
        [DataMember(Name="relatedCitiEmployeeDepartment", EmitDefaultValue=false)]
        public string RelatedCitiEmployeeDepartment { get; set; }

        /// <summary>
        /// Indicates applicants usage of credit card whether it is for personal or business.Please use /v1/utilities/referenceData/{creditCardUsagePurpose} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Indicates applicants usage of credit card whether it is for personal or business.Please use /v1/utilities/referenceData/{creditCardUsagePurpose} resource to get valid value of this field with description.</value>
        [DataMember(Name="creditCardUsagePurpose", EmitDefaultValue=false)]
        public string CreditCardUsagePurpose { get; set; }

        /// <summary>
        /// Indicates whether the customer wants a separate cash PIN.
        /// </summary>
        /// <value>Indicates whether the customer wants a separate cash PIN.</value>
        [DataMember(Name="cashPinFlag", EmitDefaultValue=false)]
        public bool? CashPinFlag { get; set; }

        /// <summary>
        /// The media ID will be used to determine which offer / campaign banner was clicked when the customer made his application 
        /// </summary>
        /// <value>The media ID will be used to determine which offer / campaign banner was clicked when the customer made his application </value>
        [DataMember(Name="mediaId", EmitDefaultValue=false)]
        public string MediaId { get; set; }

        /// <summary>
        /// Referral Code used for the customer
        /// </summary>
        /// <value>Referral Code used for the customer</value>
        [DataMember(Name="referralCode", EmitDefaultValue=false)]
        public string ReferralCode { get; set; }

        /// <summary>
        /// Gets or Sets ReferralTracking
        /// </summary>
        [DataMember(Name="referralTracking", EmitDefaultValue=false)]
        public ReferralTracking ReferralTracking { get; set; }

        /// <summary>
        /// Gets or Sets UtilityBillDetails
        /// </summary>
        [DataMember(Name="utilityBillDetails", EmitDefaultValue=false)]
        public UtilityBillDetails UtilityBillDetails { get; set; }

        /// <summary>
        /// Fee code that applied to the requested product
        /// </summary>
        /// <value>Fee code that applied to the requested product</value>
        [DataMember(Name="feeCode", EmitDefaultValue=false)]
        public string FeeCode { get; set; }

        /// <summary>
        /// Day of each month for the bill payment. This is a reference data field. Please use /v1/utilities/referenceData/{billingCycleDay} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Day of each month for the bill payment. This is a reference data field. Please use /v1/utilities/referenceData/{billingCycleDay} resource to get valid value of this field with description.</value>
        [DataMember(Name="billingCycleDay", EmitDefaultValue=false)]
        public string BillingCycleDay { get; set; }

        /// <summary>
        /// Unique reference ID associated with the application
        /// </summary>
        /// <value>Unique reference ID associated with the application</value>
        [DataMember(Name="applicationReferenceId", EmitDefaultValue=false)]
        public string ApplicationReferenceId { get; set; }

        /// <summary>
        /// Customer segment decides each applicantâ€™s interest rate  Different customer target will be subjected to different interest rate..This is a reference data field. Please use /v1/utilities/referenceData/{customerSegment} resource to get valid value of this field with description. 
        /// </summary>
        /// <value>Customer segment decides each applicantâ€™s interest rate  Different customer target will be subjected to different interest rate..This is a reference data field. Please use /v1/utilities/referenceData/{customerSegment} resource to get valid value of this field with description. </value>
        [DataMember(Name="customerSegment", EmitDefaultValue=false)]
        public string CustomerSegment { get; set; }

        /// <summary>
        /// This field refers to the unique number for each application to be identified by COLA and printed in PDF form.It enables to identify the customer in case the customer could not complete filling his/her details and was dropped-off in between
        /// </summary>
        /// <value>This field refers to the unique number for each application to be identified by COLA and printed in PDF form.It enables to identify the customer in case the customer could not complete filling his/her details and was dropped-off in between</value>
        [DataMember(Name="printingSerialNumber", EmitDefaultValue=false)]
        public string PrintingSerialNumber { get; set; }

        /// <summary>
        /// This field refers to the additional comments given by the customer which is to be noted-down during the application process.
        /// </summary>
        /// <value>This field refers to the additional comments given by the customer which is to be noted-down during the application process.</value>
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Gets or Sets TradeReferenceDetails
        /// </summary>
        [DataMember(Name="tradeReferenceDetails", EmitDefaultValue=false)]
        public TradeReferenceDetails TradeReferenceDetails { get; set; }

        /// <summary>
        /// Session ID that is generated from the session / interaction of channel with bureau.
        /// </summary>
        /// <value>Session ID that is generated from the session / interaction of channel with bureau.</value>
        [DataMember(Name="bureauSessionId ", EmitDefaultValue=false)]
        public string BureauSessionId_ { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalDataUpdate {\n");
            sb.Append("  AccountFundSource: ").Append(AccountFundSource).Append("\n");
            sb.Append("  NumberOfDependents: ").Append(NumberOfDependents).Append("\n");
            sb.Append("  StaffIndicator: ").Append(StaffIndicator).Append("\n");
            sb.Append("  OtpAuthenticationSuccessFlag: ").Append(OtpAuthenticationSuccessFlag).Append("\n");
            sb.Append("  BureauDataPrePopulateConsentFlag: ").Append(BureauDataPrePopulateConsentFlag).Append("\n");
            sb.Append("  BusinessNature: ").Append(BusinessNature).Append("\n");
            sb.Append("  EmergencyContactName: ").Append(EmergencyContactName).Append("\n");
            sb.Append("  EmergencyContactSurname: ").Append(EmergencyContactSurname).Append("\n");
            sb.Append("  EmergencyContactRelationship: ").Append(EmergencyContactRelationship).Append("\n");
            sb.Append("  EmergencyContactPhoneNumber: ").Append(EmergencyContactPhoneNumber).Append("\n");
            sb.Append("  OverLimitConsentFlag: ").Append(OverLimitConsentFlag).Append("\n");
            sb.Append("  CountrySpecificGroup: ").Append(CountrySpecificGroup).Append("\n");
            sb.Append("  PrimaryBankDetails: ").Append(PrimaryBankDetails).Append("\n");
            sb.Append("  ReferralGivenName: ").Append(ReferralGivenName).Append("\n");
            sb.Append("  ReferralSurname: ").Append(ReferralSurname).Append("\n");
            sb.Append("  IntroducerId: ").Append(IntroducerId).Append("\n");
            sb.Append("  RelatedToCitiEmployeeFlag: ").Append(RelatedToCitiEmployeeFlag).Append("\n");
            sb.Append("  RelatedCitiEmployeeName: ").Append(RelatedCitiEmployeeName).Append("\n");
            sb.Append("  RelatedCitiEmployeeDepartment: ").Append(RelatedCitiEmployeeDepartment).Append("\n");
            sb.Append("  CreditCardUsagePurpose: ").Append(CreditCardUsagePurpose).Append("\n");
            sb.Append("  CashPinFlag: ").Append(CashPinFlag).Append("\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("  ReferralCode: ").Append(ReferralCode).Append("\n");
            sb.Append("  ReferralTracking: ").Append(ReferralTracking).Append("\n");
            sb.Append("  UtilityBillDetails: ").Append(UtilityBillDetails).Append("\n");
            sb.Append("  FeeCode: ").Append(FeeCode).Append("\n");
            sb.Append("  BillingCycleDay: ").Append(BillingCycleDay).Append("\n");
            sb.Append("  ApplicationReferenceId: ").Append(ApplicationReferenceId).Append("\n");
            sb.Append("  CustomerSegment: ").Append(CustomerSegment).Append("\n");
            sb.Append("  PrintingSerialNumber: ").Append(PrintingSerialNumber).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  TradeReferenceDetails: ").Append(TradeReferenceDetails).Append("\n");
            sb.Append("  BureauSessionId_: ").Append(BureauSessionId_).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalDataUpdate);
        }

        /// <summary>
        /// Returns true if AdditionalDataUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalDataUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalDataUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountFundSource == input.AccountFundSource ||
                    (this.AccountFundSource != null &&
                    this.AccountFundSource.Equals(input.AccountFundSource))
                ) && 
                (
                    this.NumberOfDependents == input.NumberOfDependents ||
                    (this.NumberOfDependents != null &&
                    this.NumberOfDependents.Equals(input.NumberOfDependents))
                ) && 
                (
                    this.StaffIndicator == input.StaffIndicator ||
                    (this.StaffIndicator != null &&
                    this.StaffIndicator.Equals(input.StaffIndicator))
                ) && 
                (
                    this.OtpAuthenticationSuccessFlag == input.OtpAuthenticationSuccessFlag ||
                    (this.OtpAuthenticationSuccessFlag != null &&
                    this.OtpAuthenticationSuccessFlag.Equals(input.OtpAuthenticationSuccessFlag))
                ) && 
                (
                    this.BureauDataPrePopulateConsentFlag == input.BureauDataPrePopulateConsentFlag ||
                    (this.BureauDataPrePopulateConsentFlag != null &&
                    this.BureauDataPrePopulateConsentFlag.Equals(input.BureauDataPrePopulateConsentFlag))
                ) && 
                (
                    this.BusinessNature == input.BusinessNature ||
                    (this.BusinessNature != null &&
                    this.BusinessNature.Equals(input.BusinessNature))
                ) && 
                (
                    this.EmergencyContactName == input.EmergencyContactName ||
                    (this.EmergencyContactName != null &&
                    this.EmergencyContactName.Equals(input.EmergencyContactName))
                ) && 
                (
                    this.EmergencyContactSurname == input.EmergencyContactSurname ||
                    (this.EmergencyContactSurname != null &&
                    this.EmergencyContactSurname.Equals(input.EmergencyContactSurname))
                ) && 
                (
                    this.EmergencyContactRelationship == input.EmergencyContactRelationship ||
                    (this.EmergencyContactRelationship != null &&
                    this.EmergencyContactRelationship.Equals(input.EmergencyContactRelationship))
                ) && 
                (
                    this.EmergencyContactPhoneNumber == input.EmergencyContactPhoneNumber ||
                    (this.EmergencyContactPhoneNumber != null &&
                    this.EmergencyContactPhoneNumber.Equals(input.EmergencyContactPhoneNumber))
                ) && 
                (
                    this.OverLimitConsentFlag == input.OverLimitConsentFlag ||
                    (this.OverLimitConsentFlag != null &&
                    this.OverLimitConsentFlag.Equals(input.OverLimitConsentFlag))
                ) && 
                (
                    this.CountrySpecificGroup == input.CountrySpecificGroup ||
                    (this.CountrySpecificGroup != null &&
                    this.CountrySpecificGroup.Equals(input.CountrySpecificGroup))
                ) && 
                (
                    this.PrimaryBankDetails == input.PrimaryBankDetails ||
                    (this.PrimaryBankDetails != null &&
                    this.PrimaryBankDetails.Equals(input.PrimaryBankDetails))
                ) && 
                (
                    this.ReferralGivenName == input.ReferralGivenName ||
                    (this.ReferralGivenName != null &&
                    this.ReferralGivenName.Equals(input.ReferralGivenName))
                ) && 
                (
                    this.ReferralSurname == input.ReferralSurname ||
                    (this.ReferralSurname != null &&
                    this.ReferralSurname.Equals(input.ReferralSurname))
                ) && 
                (
                    this.IntroducerId == input.IntroducerId ||
                    (this.IntroducerId != null &&
                    this.IntroducerId.Equals(input.IntroducerId))
                ) && 
                (
                    this.RelatedToCitiEmployeeFlag == input.RelatedToCitiEmployeeFlag ||
                    (this.RelatedToCitiEmployeeFlag != null &&
                    this.RelatedToCitiEmployeeFlag.Equals(input.RelatedToCitiEmployeeFlag))
                ) && 
                (
                    this.RelatedCitiEmployeeName == input.RelatedCitiEmployeeName ||
                    (this.RelatedCitiEmployeeName != null &&
                    this.RelatedCitiEmployeeName.Equals(input.RelatedCitiEmployeeName))
                ) && 
                (
                    this.RelatedCitiEmployeeDepartment == input.RelatedCitiEmployeeDepartment ||
                    (this.RelatedCitiEmployeeDepartment != null &&
                    this.RelatedCitiEmployeeDepartment.Equals(input.RelatedCitiEmployeeDepartment))
                ) && 
                (
                    this.CreditCardUsagePurpose == input.CreditCardUsagePurpose ||
                    (this.CreditCardUsagePurpose != null &&
                    this.CreditCardUsagePurpose.Equals(input.CreditCardUsagePurpose))
                ) && 
                (
                    this.CashPinFlag == input.CashPinFlag ||
                    (this.CashPinFlag != null &&
                    this.CashPinFlag.Equals(input.CashPinFlag))
                ) && 
                (
                    this.MediaId == input.MediaId ||
                    (this.MediaId != null &&
                    this.MediaId.Equals(input.MediaId))
                ) && 
                (
                    this.ReferralCode == input.ReferralCode ||
                    (this.ReferralCode != null &&
                    this.ReferralCode.Equals(input.ReferralCode))
                ) && 
                (
                    this.ReferralTracking == input.ReferralTracking ||
                    (this.ReferralTracking != null &&
                    this.ReferralTracking.Equals(input.ReferralTracking))
                ) && 
                (
                    this.UtilityBillDetails == input.UtilityBillDetails ||
                    (this.UtilityBillDetails != null &&
                    this.UtilityBillDetails.Equals(input.UtilityBillDetails))
                ) && 
                (
                    this.FeeCode == input.FeeCode ||
                    (this.FeeCode != null &&
                    this.FeeCode.Equals(input.FeeCode))
                ) && 
                (
                    this.BillingCycleDay == input.BillingCycleDay ||
                    (this.BillingCycleDay != null &&
                    this.BillingCycleDay.Equals(input.BillingCycleDay))
                ) && 
                (
                    this.ApplicationReferenceId == input.ApplicationReferenceId ||
                    (this.ApplicationReferenceId != null &&
                    this.ApplicationReferenceId.Equals(input.ApplicationReferenceId))
                ) && 
                (
                    this.CustomerSegment == input.CustomerSegment ||
                    (this.CustomerSegment != null &&
                    this.CustomerSegment.Equals(input.CustomerSegment))
                ) && 
                (
                    this.PrintingSerialNumber == input.PrintingSerialNumber ||
                    (this.PrintingSerialNumber != null &&
                    this.PrintingSerialNumber.Equals(input.PrintingSerialNumber))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                ) && 
                (
                    this.TradeReferenceDetails == input.TradeReferenceDetails ||
                    (this.TradeReferenceDetails != null &&
                    this.TradeReferenceDetails.Equals(input.TradeReferenceDetails))
                ) && 
                (
                    this.BureauSessionId_ == input.BureauSessionId_ ||
                    (this.BureauSessionId_ != null &&
                    this.BureauSessionId_.Equals(input.BureauSessionId_))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountFundSource != null)
                    hashCode = hashCode * 59 + this.AccountFundSource.GetHashCode();
                if (this.NumberOfDependents != null)
                    hashCode = hashCode * 59 + this.NumberOfDependents.GetHashCode();
                if (this.StaffIndicator != null)
                    hashCode = hashCode * 59 + this.StaffIndicator.GetHashCode();
                if (this.OtpAuthenticationSuccessFlag != null)
                    hashCode = hashCode * 59 + this.OtpAuthenticationSuccessFlag.GetHashCode();
                if (this.BureauDataPrePopulateConsentFlag != null)
                    hashCode = hashCode * 59 + this.BureauDataPrePopulateConsentFlag.GetHashCode();
                if (this.BusinessNature != null)
                    hashCode = hashCode * 59 + this.BusinessNature.GetHashCode();
                if (this.EmergencyContactName != null)
                    hashCode = hashCode * 59 + this.EmergencyContactName.GetHashCode();
                if (this.EmergencyContactSurname != null)
                    hashCode = hashCode * 59 + this.EmergencyContactSurname.GetHashCode();
                if (this.EmergencyContactRelationship != null)
                    hashCode = hashCode * 59 + this.EmergencyContactRelationship.GetHashCode();
                if (this.EmergencyContactPhoneNumber != null)
                    hashCode = hashCode * 59 + this.EmergencyContactPhoneNumber.GetHashCode();
                if (this.OverLimitConsentFlag != null)
                    hashCode = hashCode * 59 + this.OverLimitConsentFlag.GetHashCode();
                if (this.CountrySpecificGroup != null)
                    hashCode = hashCode * 59 + this.CountrySpecificGroup.GetHashCode();
                if (this.PrimaryBankDetails != null)
                    hashCode = hashCode * 59 + this.PrimaryBankDetails.GetHashCode();
                if (this.ReferralGivenName != null)
                    hashCode = hashCode * 59 + this.ReferralGivenName.GetHashCode();
                if (this.ReferralSurname != null)
                    hashCode = hashCode * 59 + this.ReferralSurname.GetHashCode();
                if (this.IntroducerId != null)
                    hashCode = hashCode * 59 + this.IntroducerId.GetHashCode();
                if (this.RelatedToCitiEmployeeFlag != null)
                    hashCode = hashCode * 59 + this.RelatedToCitiEmployeeFlag.GetHashCode();
                if (this.RelatedCitiEmployeeName != null)
                    hashCode = hashCode * 59 + this.RelatedCitiEmployeeName.GetHashCode();
                if (this.RelatedCitiEmployeeDepartment != null)
                    hashCode = hashCode * 59 + this.RelatedCitiEmployeeDepartment.GetHashCode();
                if (this.CreditCardUsagePurpose != null)
                    hashCode = hashCode * 59 + this.CreditCardUsagePurpose.GetHashCode();
                if (this.CashPinFlag != null)
                    hashCode = hashCode * 59 + this.CashPinFlag.GetHashCode();
                if (this.MediaId != null)
                    hashCode = hashCode * 59 + this.MediaId.GetHashCode();
                if (this.ReferralCode != null)
                    hashCode = hashCode * 59 + this.ReferralCode.GetHashCode();
                if (this.ReferralTracking != null)
                    hashCode = hashCode * 59 + this.ReferralTracking.GetHashCode();
                if (this.UtilityBillDetails != null)
                    hashCode = hashCode * 59 + this.UtilityBillDetails.GetHashCode();
                if (this.FeeCode != null)
                    hashCode = hashCode * 59 + this.FeeCode.GetHashCode();
                if (this.BillingCycleDay != null)
                    hashCode = hashCode * 59 + this.BillingCycleDay.GetHashCode();
                if (this.ApplicationReferenceId != null)
                    hashCode = hashCode * 59 + this.ApplicationReferenceId.GetHashCode();
                if (this.CustomerSegment != null)
                    hashCode = hashCode * 59 + this.CustomerSegment.GetHashCode();
                if (this.PrintingSerialNumber != null)
                    hashCode = hashCode * 59 + this.PrintingSerialNumber.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                if (this.TradeReferenceDetails != null)
                    hashCode = hashCode * 59 + this.TradeReferenceDetails.GetHashCode();
                if (this.BureauSessionId_ != null)
                    hashCode = hashCode * 59 + this.BureauSessionId_.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
