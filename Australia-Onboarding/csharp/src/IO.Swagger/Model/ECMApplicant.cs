/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ECMApplicant
    /// </summary>
    [DataContract]
        public partial class ECMApplicant :  IEquatable<ECMApplicant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ECMApplicant" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="demographics">demographics.</param>
        /// <param name="email">email.</param>
        /// <param name="phone">phone.</param>
        /// <param name="identificationDocumentDetails">identificationDocumentDetails.</param>
        /// <param name="additionalData">additionalData.</param>
        /// <param name="consentDetails">consentDetails.</param>
        /// <param name="partnerCustomerDetails">partnerCustomerDetails.</param>
        /// <param name="studentIndicator">Indicates if the applicant is a student.Valid values are Yes or No.</param>
        public ECMApplicant(ECMName name = default(ECMName), ECMDemographics demographics = default(ECMDemographics), List<ECMEmail> email = default(List<ECMEmail>), List<ECMPhone> phone = default(List<ECMPhone>), List<ECMIdentificationDocumentDetails> identificationDocumentDetails = default(List<ECMIdentificationDocumentDetails>), ECMAdditionalData additionalData = default(ECMAdditionalData), List<ECMConsentDetails> consentDetails = default(List<ECMConsentDetails>), ECMPartnerCustomerDetails partnerCustomerDetails = default(ECMPartnerCustomerDetails), bool? studentIndicator = default(bool?))
        {
            this.Name = name;
            this.Demographics = demographics;
            this.Email = email;
            this.Phone = phone;
            this.IdentificationDocumentDetails = identificationDocumentDetails;
            this.AdditionalData = additionalData;
            this.ConsentDetails = consentDetails;
            this.PartnerCustomerDetails = partnerCustomerDetails;
            this.StudentIndicator = studentIndicator;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public ECMName Name { get; set; }

        /// <summary>
        /// Gets or Sets Demographics
        /// </summary>
        [DataMember(Name="demographics", EmitDefaultValue=false)]
        public ECMDemographics Demographics { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public List<ECMEmail> Email { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public List<ECMPhone> Phone { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationDocumentDetails
        /// </summary>
        [DataMember(Name="identificationDocumentDetails", EmitDefaultValue=false)]
        public List<ECMIdentificationDocumentDetails> IdentificationDocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalData
        /// </summary>
        [DataMember(Name="additionalData", EmitDefaultValue=false)]
        public ECMAdditionalData AdditionalData { get; set; }

        /// <summary>
        /// Gets or Sets ConsentDetails
        /// </summary>
        [DataMember(Name="consentDetails", EmitDefaultValue=false)]
        public List<ECMConsentDetails> ConsentDetails { get; set; }

        /// <summary>
        /// Gets or Sets PartnerCustomerDetails
        /// </summary>
        [DataMember(Name="partnerCustomerDetails", EmitDefaultValue=false)]
        public ECMPartnerCustomerDetails PartnerCustomerDetails { get; set; }

        /// <summary>
        /// Indicates if the applicant is a student.Valid values are Yes or No
        /// </summary>
        /// <value>Indicates if the applicant is a student.Valid values are Yes or No</value>
        [DataMember(Name="studentIndicator", EmitDefaultValue=false)]
        public bool? StudentIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ECMApplicant {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Demographics: ").Append(Demographics).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  IdentificationDocumentDetails: ").Append(IdentificationDocumentDetails).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  ConsentDetails: ").Append(ConsentDetails).Append("\n");
            sb.Append("  PartnerCustomerDetails: ").Append(PartnerCustomerDetails).Append("\n");
            sb.Append("  StudentIndicator: ").Append(StudentIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ECMApplicant);
        }

        /// <summary>
        /// Returns true if ECMApplicant instances are equal
        /// </summary>
        /// <param name="input">Instance of ECMApplicant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ECMApplicant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Demographics == input.Demographics ||
                    (this.Demographics != null &&
                    this.Demographics.Equals(input.Demographics))
                ) && 
                (
                    this.Email == input.Email ||
                    this.Email != null &&
                    input.Email != null &&
                    this.Email.SequenceEqual(input.Email)
                ) && 
                (
                    this.Phone == input.Phone ||
                    this.Phone != null &&
                    input.Phone != null &&
                    this.Phone.SequenceEqual(input.Phone)
                ) && 
                (
                    this.IdentificationDocumentDetails == input.IdentificationDocumentDetails ||
                    this.IdentificationDocumentDetails != null &&
                    input.IdentificationDocumentDetails != null &&
                    this.IdentificationDocumentDetails.SequenceEqual(input.IdentificationDocumentDetails)
                ) && 
                (
                    this.AdditionalData == input.AdditionalData ||
                    (this.AdditionalData != null &&
                    this.AdditionalData.Equals(input.AdditionalData))
                ) && 
                (
                    this.ConsentDetails == input.ConsentDetails ||
                    this.ConsentDetails != null &&
                    input.ConsentDetails != null &&
                    this.ConsentDetails.SequenceEqual(input.ConsentDetails)
                ) && 
                (
                    this.PartnerCustomerDetails == input.PartnerCustomerDetails ||
                    (this.PartnerCustomerDetails != null &&
                    this.PartnerCustomerDetails.Equals(input.PartnerCustomerDetails))
                ) && 
                (
                    this.StudentIndicator == input.StudentIndicator ||
                    (this.StudentIndicator != null &&
                    this.StudentIndicator.Equals(input.StudentIndicator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Demographics != null)
                    hashCode = hashCode * 59 + this.Demographics.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.IdentificationDocumentDetails != null)
                    hashCode = hashCode * 59 + this.IdentificationDocumentDetails.GetHashCode();
                if (this.AdditionalData != null)
                    hashCode = hashCode * 59 + this.AdditionalData.GetHashCode();
                if (this.ConsentDetails != null)
                    hashCode = hashCode * 59 + this.ConsentDetails.GetHashCode();
                if (this.PartnerCustomerDetails != null)
                    hashCode = hashCode * 59 + this.PartnerCustomerDetails.GetHashCode();
                if (this.StudentIndicator != null)
                    hashCode = hashCode * 59 + this.StudentIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
