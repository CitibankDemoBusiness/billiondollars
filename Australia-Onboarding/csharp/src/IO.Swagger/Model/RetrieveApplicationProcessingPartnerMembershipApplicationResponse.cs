/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveApplicationProcessingPartnerMembershipApplicationResponse
    /// </summary>
    [DataContract]
        public partial class RetrieveApplicationProcessingPartnerMembershipApplicationResponse :  IEquatable<RetrieveApplicationProcessingPartnerMembershipApplicationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveApplicationProcessingPartnerMembershipApplicationResponse" /> class.
        /// </summary>
        /// <param name="applicationId">Unique identifier for the application.</param>
        /// <param name="applicant">applicant.</param>
        /// <param name="applicationStage">Application Stage.</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session..</param>
        /// <param name="providerInfo">providerInfo.</param>
        public RetrieveApplicationProcessingPartnerMembershipApplicationResponse(string applicationId = default(string), Applicant applicant = default(Applicant), string applicationStage = default(string), string controlFlowId = default(string), List<ProviderInfo> providerInfo = default(List<ProviderInfo>))
        {
            this.ApplicationId = applicationId;
            this.Applicant = applicant;
            this.ApplicationStage = applicationStage;
            this.ControlFlowId = controlFlowId;
            this.ProviderInfo = providerInfo;
        }
        
        /// <summary>
        /// Unique identifier for the application
        /// </summary>
        /// <value>Unique identifier for the application</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets Applicant
        /// </summary>
        [DataMember(Name="applicant", EmitDefaultValue=false)]
        public Applicant Applicant { get; set; }

        /// <summary>
        /// Application Stage
        /// </summary>
        /// <value>Application Stage</value>
        [DataMember(Name="applicationStage", EmitDefaultValue=false)]
        public string ApplicationStage { get; set; }

        /// <summary>
        /// Control flow id is used to control the flow for subsequent requests in the session.
        /// </summary>
        /// <value>Control flow id is used to control the flow for subsequent requests in the session.</value>
        [DataMember(Name="controlFlowId", EmitDefaultValue=false)]
        public string ControlFlowId { get; set; }

        /// <summary>
        /// Gets or Sets ProviderInfo
        /// </summary>
        [DataMember(Name="providerInfo", EmitDefaultValue=false)]
        public List<ProviderInfo> ProviderInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveApplicationProcessingPartnerMembershipApplicationResponse {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Applicant: ").Append(Applicant).Append("\n");
            sb.Append("  ApplicationStage: ").Append(ApplicationStage).Append("\n");
            sb.Append("  ControlFlowId: ").Append(ControlFlowId).Append("\n");
            sb.Append("  ProviderInfo: ").Append(ProviderInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveApplicationProcessingPartnerMembershipApplicationResponse);
        }

        /// <summary>
        /// Returns true if RetrieveApplicationProcessingPartnerMembershipApplicationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveApplicationProcessingPartnerMembershipApplicationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveApplicationProcessingPartnerMembershipApplicationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.Applicant == input.Applicant ||
                    (this.Applicant != null &&
                    this.Applicant.Equals(input.Applicant))
                ) && 
                (
                    this.ApplicationStage == input.ApplicationStage ||
                    (this.ApplicationStage != null &&
                    this.ApplicationStage.Equals(input.ApplicationStage))
                ) && 
                (
                    this.ControlFlowId == input.ControlFlowId ||
                    (this.ControlFlowId != null &&
                    this.ControlFlowId.Equals(input.ControlFlowId))
                ) && 
                (
                    this.ProviderInfo == input.ProviderInfo ||
                    this.ProviderInfo != null &&
                    input.ProviderInfo != null &&
                    this.ProviderInfo.SequenceEqual(input.ProviderInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.Applicant != null)
                    hashCode = hashCode * 59 + this.Applicant.GetHashCode();
                if (this.ApplicationStage != null)
                    hashCode = hashCode * 59 + this.ApplicationStage.GetHashCode();
                if (this.ControlFlowId != null)
                    hashCode = hashCode * 59 + this.ControlFlowId.GetHashCode();
                if (this.ProviderInfo != null)
                    hashCode = hashCode * 59 + this.ProviderInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
