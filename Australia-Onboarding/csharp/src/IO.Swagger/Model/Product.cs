/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
        public partial class Product :  IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="productCode">A unique code that identifies the product. (required).</param>
        /// <param name="productDescription">Detailed information about offered product (required).</param>
        /// <param name="sourceCode">A source code to identify the product. (required).</param>
        /// <param name="logo">Logo to identify the product..</param>
        /// <param name="organisation">Card issuing organization name.</param>
        /// <param name="productType">Type of the product.This is a reference data field. Please use /v1/apac/utilities/referenceData/{productType} resource to get valid values of this field with descriptions. (required).</param>
        /// <param name="minimumCreditLimitAmount">Minimum credit limit amount for the product type (required).</param>
        /// <param name="maximumCreditLimitAmount">Maximum credit limit amount for the product type (required).</param>
        /// <param name="annualFeeAmount">Annual fees for product type and source code.</param>
        /// <param name="currencyCode">The currency code in ISO 4217 format (required).</param>
        /// <param name="interestRate">Annual interest rate (required).</param>
        /// <param name="latePaymentFee">Late payment fee for the product type and source code (required).</param>
        /// <param name="importantInformations">Important informations to know about the product type (required).</param>
        /// <param name="termsAndConditions">Fees, charges and credit criteria apply. Terms and conditions apply and are available upon request. Cards are offered, issued and administered by Citigroup Pty Limited.Allow up to 15 working days to process your Application subject to verification. (required).</param>
        /// <param name="agreementStartDate">Product validity start date in ISO 8601 date format YYYY-MM-DD (required).</param>
        /// <param name="agreementExpiryDate">Product validity expiry date in ISO 8601 date format YYYY-MM-DD (required).</param>
        public Product(string productCode = default(string), string productDescription = default(string), string sourceCode = default(string), string logo = default(string), string organisation = default(string), string productType = default(string), double? minimumCreditLimitAmount = default(double?), double? maximumCreditLimitAmount = default(double?), double? annualFeeAmount = default(double?), string currencyCode = default(string), double? interestRate = default(double?), double? latePaymentFee = default(double?), string importantInformations = default(string), string termsAndConditions = default(string), DateTime? agreementStartDate = default(DateTime?), DateTime? agreementExpiryDate = default(DateTime?))
        {
            // to ensure "productCode" is required (not null)
            if (productCode == null)
            {
                throw new InvalidDataException("productCode is a required property for Product and cannot be null");
            }
            else
            {
                this.ProductCode = productCode;
            }
            // to ensure "productDescription" is required (not null)
            if (productDescription == null)
            {
                throw new InvalidDataException("productDescription is a required property for Product and cannot be null");
            }
            else
            {
                this.ProductDescription = productDescription;
            }
            // to ensure "sourceCode" is required (not null)
            if (sourceCode == null)
            {
                throw new InvalidDataException("sourceCode is a required property for Product and cannot be null");
            }
            else
            {
                this.SourceCode = sourceCode;
            }
            // to ensure "productType" is required (not null)
            if (productType == null)
            {
                throw new InvalidDataException("productType is a required property for Product and cannot be null");
            }
            else
            {
                this.ProductType = productType;
            }
            // to ensure "minimumCreditLimitAmount" is required (not null)
            if (minimumCreditLimitAmount == null)
            {
                throw new InvalidDataException("minimumCreditLimitAmount is a required property for Product and cannot be null");
            }
            else
            {
                this.MinimumCreditLimitAmount = minimumCreditLimitAmount;
            }
            // to ensure "maximumCreditLimitAmount" is required (not null)
            if (maximumCreditLimitAmount == null)
            {
                throw new InvalidDataException("maximumCreditLimitAmount is a required property for Product and cannot be null");
            }
            else
            {
                this.MaximumCreditLimitAmount = maximumCreditLimitAmount;
            }
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for Product and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            // to ensure "interestRate" is required (not null)
            if (interestRate == null)
            {
                throw new InvalidDataException("interestRate is a required property for Product and cannot be null");
            }
            else
            {
                this.InterestRate = interestRate;
            }
            // to ensure "latePaymentFee" is required (not null)
            if (latePaymentFee == null)
            {
                throw new InvalidDataException("latePaymentFee is a required property for Product and cannot be null");
            }
            else
            {
                this.LatePaymentFee = latePaymentFee;
            }
            // to ensure "importantInformations" is required (not null)
            if (importantInformations == null)
            {
                throw new InvalidDataException("importantInformations is a required property for Product and cannot be null");
            }
            else
            {
                this.ImportantInformations = importantInformations;
            }
            // to ensure "termsAndConditions" is required (not null)
            if (termsAndConditions == null)
            {
                throw new InvalidDataException("termsAndConditions is a required property for Product and cannot be null");
            }
            else
            {
                this.TermsAndConditions = termsAndConditions;
            }
            // to ensure "agreementStartDate" is required (not null)
            if (agreementStartDate == null)
            {
                throw new InvalidDataException("agreementStartDate is a required property for Product and cannot be null");
            }
            else
            {
                this.AgreementStartDate = agreementStartDate;
            }
            // to ensure "agreementExpiryDate" is required (not null)
            if (agreementExpiryDate == null)
            {
                throw new InvalidDataException("agreementExpiryDate is a required property for Product and cannot be null");
            }
            else
            {
                this.AgreementExpiryDate = agreementExpiryDate;
            }
            this.Logo = logo;
            this.Organisation = organisation;
            this.AnnualFeeAmount = annualFeeAmount;
        }
        
        /// <summary>
        /// A unique code that identifies the product.
        /// </summary>
        /// <value>A unique code that identifies the product.</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Detailed information about offered product
        /// </summary>
        /// <value>Detailed information about offered product</value>
        [DataMember(Name="productDescription", EmitDefaultValue=false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// A source code to identify the product.
        /// </summary>
        /// <value>A source code to identify the product.</value>
        [DataMember(Name="sourceCode", EmitDefaultValue=false)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Logo to identify the product.
        /// </summary>
        /// <value>Logo to identify the product.</value>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public string Logo { get; set; }

        /// <summary>
        /// Card issuing organization name
        /// </summary>
        /// <value>Card issuing organization name</value>
        [DataMember(Name="organisation", EmitDefaultValue=false)]
        public string Organisation { get; set; }

        /// <summary>
        /// Type of the product.This is a reference data field. Please use /v1/apac/utilities/referenceData/{productType} resource to get valid values of this field with descriptions.
        /// </summary>
        /// <value>Type of the product.This is a reference data field. Please use /v1/apac/utilities/referenceData/{productType} resource to get valid values of this field with descriptions.</value>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public string ProductType { get; set; }

        /// <summary>
        /// Minimum credit limit amount for the product type
        /// </summary>
        /// <value>Minimum credit limit amount for the product type</value>
        [DataMember(Name="minimumCreditLimitAmount", EmitDefaultValue=false)]
        public double? MinimumCreditLimitAmount { get; set; }

        /// <summary>
        /// Maximum credit limit amount for the product type
        /// </summary>
        /// <value>Maximum credit limit amount for the product type</value>
        [DataMember(Name="maximumCreditLimitAmount", EmitDefaultValue=false)]
        public double? MaximumCreditLimitAmount { get; set; }

        /// <summary>
        /// Annual fees for product type and source code
        /// </summary>
        /// <value>Annual fees for product type and source code</value>
        [DataMember(Name="annualFeeAmount", EmitDefaultValue=false)]
        public double? AnnualFeeAmount { get; set; }

        /// <summary>
        /// The currency code in ISO 4217 format
        /// </summary>
        /// <value>The currency code in ISO 4217 format</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Annual interest rate
        /// </summary>
        /// <value>Annual interest rate</value>
        [DataMember(Name="interestRate", EmitDefaultValue=false)]
        public double? InterestRate { get; set; }

        /// <summary>
        /// Late payment fee for the product type and source code
        /// </summary>
        /// <value>Late payment fee for the product type and source code</value>
        [DataMember(Name="latePaymentFee", EmitDefaultValue=false)]
        public double? LatePaymentFee { get; set; }

        /// <summary>
        /// Important informations to know about the product type
        /// </summary>
        /// <value>Important informations to know about the product type</value>
        [DataMember(Name="importantInformations", EmitDefaultValue=false)]
        public string ImportantInformations { get; set; }

        /// <summary>
        /// Fees, charges and credit criteria apply. Terms and conditions apply and are available upon request. Cards are offered, issued and administered by Citigroup Pty Limited.Allow up to 15 working days to process your Application subject to verification.
        /// </summary>
        /// <value>Fees, charges and credit criteria apply. Terms and conditions apply and are available upon request. Cards are offered, issued and administered by Citigroup Pty Limited.Allow up to 15 working days to process your Application subject to verification.</value>
        [DataMember(Name="termsAndConditions", EmitDefaultValue=false)]
        public string TermsAndConditions { get; set; }

        /// <summary>
        /// Product validity start date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Product validity start date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="agreementStartDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? AgreementStartDate { get; set; }

        /// <summary>
        /// Product validity expiry date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Product validity expiry date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="agreementExpiryDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? AgreementExpiryDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Organisation: ").Append(Organisation).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  MinimumCreditLimitAmount: ").Append(MinimumCreditLimitAmount).Append("\n");
            sb.Append("  MaximumCreditLimitAmount: ").Append(MaximumCreditLimitAmount).Append("\n");
            sb.Append("  AnnualFeeAmount: ").Append(AnnualFeeAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  LatePaymentFee: ").Append(LatePaymentFee).Append("\n");
            sb.Append("  ImportantInformations: ").Append(ImportantInformations).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  AgreementStartDate: ").Append(AgreementStartDate).Append("\n");
            sb.Append("  AgreementExpiryDate: ").Append(AgreementExpiryDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.ProductDescription == input.ProductDescription ||
                    (this.ProductDescription != null &&
                    this.ProductDescription.Equals(input.ProductDescription))
                ) && 
                (
                    this.SourceCode == input.SourceCode ||
                    (this.SourceCode != null &&
                    this.SourceCode.Equals(input.SourceCode))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.Organisation == input.Organisation ||
                    (this.Organisation != null &&
                    this.Organisation.Equals(input.Organisation))
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    (this.ProductType != null &&
                    this.ProductType.Equals(input.ProductType))
                ) && 
                (
                    this.MinimumCreditLimitAmount == input.MinimumCreditLimitAmount ||
                    (this.MinimumCreditLimitAmount != null &&
                    this.MinimumCreditLimitAmount.Equals(input.MinimumCreditLimitAmount))
                ) && 
                (
                    this.MaximumCreditLimitAmount == input.MaximumCreditLimitAmount ||
                    (this.MaximumCreditLimitAmount != null &&
                    this.MaximumCreditLimitAmount.Equals(input.MaximumCreditLimitAmount))
                ) && 
                (
                    this.AnnualFeeAmount == input.AnnualFeeAmount ||
                    (this.AnnualFeeAmount != null &&
                    this.AnnualFeeAmount.Equals(input.AnnualFeeAmount))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && 
                (
                    this.LatePaymentFee == input.LatePaymentFee ||
                    (this.LatePaymentFee != null &&
                    this.LatePaymentFee.Equals(input.LatePaymentFee))
                ) && 
                (
                    this.ImportantInformations == input.ImportantInformations ||
                    (this.ImportantInformations != null &&
                    this.ImportantInformations.Equals(input.ImportantInformations))
                ) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    (this.TermsAndConditions != null &&
                    this.TermsAndConditions.Equals(input.TermsAndConditions))
                ) && 
                (
                    this.AgreementStartDate == input.AgreementStartDate ||
                    (this.AgreementStartDate != null &&
                    this.AgreementStartDate.Equals(input.AgreementStartDate))
                ) && 
                (
                    this.AgreementExpiryDate == input.AgreementExpiryDate ||
                    (this.AgreementExpiryDate != null &&
                    this.AgreementExpiryDate.Equals(input.AgreementExpiryDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.ProductDescription != null)
                    hashCode = hashCode * 59 + this.ProductDescription.GetHashCode();
                if (this.SourceCode != null)
                    hashCode = hashCode * 59 + this.SourceCode.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.Organisation != null)
                    hashCode = hashCode * 59 + this.Organisation.GetHashCode();
                if (this.ProductType != null)
                    hashCode = hashCode * 59 + this.ProductType.GetHashCode();
                if (this.MinimumCreditLimitAmount != null)
                    hashCode = hashCode * 59 + this.MinimumCreditLimitAmount.GetHashCode();
                if (this.MaximumCreditLimitAmount != null)
                    hashCode = hashCode * 59 + this.MaximumCreditLimitAmount.GetHashCode();
                if (this.AnnualFeeAmount != null)
                    hashCode = hashCode * 59 + this.AnnualFeeAmount.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                if (this.LatePaymentFee != null)
                    hashCode = hashCode * 59 + this.LatePaymentFee.GetHashCode();
                if (this.ImportantInformations != null)
                    hashCode = hashCode * 59 + this.ImportantInformations.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.AgreementStartDate != null)
                    hashCode = hashCode * 59 + this.AgreementStartDate.GetHashCode();
                if (this.AgreementExpiryDate != null)
                    hashCode = hashCode * 59 + this.AgreementExpiryDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
