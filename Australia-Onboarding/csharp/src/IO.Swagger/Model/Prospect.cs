/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Prospect
    /// </summary>
    [DataContract]
        public partial class Prospect :  IEquatable<Prospect>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Prospect" /> class.
        /// </summary>
        /// <param name="motherMaidenName">Mother&#x27;s maiden name.</param>
        /// <param name="name">name (required).</param>
        /// <param name="demographics">demographics.</param>
        /// <param name="address">address (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="contactPreference">contactPreference (required).</param>
        /// <param name="financialInformation">financialInformation.</param>
        /// <param name="education">education.</param>
        /// <param name="employmentDetails">employmentDetails.</param>
        /// <param name="identificationDocumentDetails">identificationDocumentDetails.</param>
        /// <param name="additionalData">additionalData.</param>
        /// <param name="selfDeclaration">selfDeclaration.</param>
        /// <param name="kycInformation">kycInformation.</param>
        public Prospect(string motherMaidenName = default(string), Name name = default(Name), Demographics demographics = default(Demographics), List<Address> address = default(List<Address>), List<Email> email = default(List<Email>), List<Phone> phone = default(List<Phone>), ContactPreference contactPreference = default(ContactPreference), FinancialInformation financialInformation = default(FinancialInformation), Education education = default(Education), List<EmploymentDetails> employmentDetails = default(List<EmploymentDetails>), List<IdentificationDocumentDetails> identificationDocumentDetails = default(List<IdentificationDocumentDetails>), AdditionalData additionalData = default(AdditionalData), SelfDeclaration selfDeclaration = default(SelfDeclaration), KycInformation kycInformation = default(KycInformation))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Prospect and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for Prospect and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for Prospect and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for Prospect and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            // to ensure "contactPreference" is required (not null)
            if (contactPreference == null)
            {
                throw new InvalidDataException("contactPreference is a required property for Prospect and cannot be null");
            }
            else
            {
                this.ContactPreference = contactPreference;
            }
            this.MotherMaidenName = motherMaidenName;
            this.Demographics = demographics;
            this.FinancialInformation = financialInformation;
            this.Education = education;
            this.EmploymentDetails = employmentDetails;
            this.IdentificationDocumentDetails = identificationDocumentDetails;
            this.AdditionalData = additionalData;
            this.SelfDeclaration = selfDeclaration;
            this.KycInformation = kycInformation;
        }
        
        /// <summary>
        /// Mother&#x27;s maiden name
        /// </summary>
        /// <value>Mother&#x27;s maiden name</value>
        [DataMember(Name="motherMaidenName", EmitDefaultValue=false)]
        public string MotherMaidenName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public Name Name { get; set; }

        /// <summary>
        /// Gets or Sets Demographics
        /// </summary>
        [DataMember(Name="demographics", EmitDefaultValue=false)]
        public Demographics Demographics { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public List<Address> Address { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public List<Email> Email { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public List<Phone> Phone { get; set; }

        /// <summary>
        /// Gets or Sets ContactPreference
        /// </summary>
        [DataMember(Name="contactPreference", EmitDefaultValue=false)]
        public ContactPreference ContactPreference { get; set; }

        /// <summary>
        /// Gets or Sets FinancialInformation
        /// </summary>
        [DataMember(Name="financialInformation", EmitDefaultValue=false)]
        public FinancialInformation FinancialInformation { get; set; }

        /// <summary>
        /// Gets or Sets Education
        /// </summary>
        [DataMember(Name="education", EmitDefaultValue=false)]
        public Education Education { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentDetails
        /// </summary>
        [DataMember(Name="employmentDetails", EmitDefaultValue=false)]
        public List<EmploymentDetails> EmploymentDetails { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationDocumentDetails
        /// </summary>
        [DataMember(Name="identificationDocumentDetails", EmitDefaultValue=false)]
        public List<IdentificationDocumentDetails> IdentificationDocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalData
        /// </summary>
        [DataMember(Name="additionalData", EmitDefaultValue=false)]
        public AdditionalData AdditionalData { get; set; }

        /// <summary>
        /// Gets or Sets SelfDeclaration
        /// </summary>
        [DataMember(Name="selfDeclaration", EmitDefaultValue=false)]
        public SelfDeclaration SelfDeclaration { get; set; }

        /// <summary>
        /// Gets or Sets KycInformation
        /// </summary>
        [DataMember(Name="kycInformation", EmitDefaultValue=false)]
        public KycInformation KycInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Prospect {\n");
            sb.Append("  MotherMaidenName: ").Append(MotherMaidenName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Demographics: ").Append(Demographics).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  ContactPreference: ").Append(ContactPreference).Append("\n");
            sb.Append("  FinancialInformation: ").Append(FinancialInformation).Append("\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  EmploymentDetails: ").Append(EmploymentDetails).Append("\n");
            sb.Append("  IdentificationDocumentDetails: ").Append(IdentificationDocumentDetails).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  SelfDeclaration: ").Append(SelfDeclaration).Append("\n");
            sb.Append("  KycInformation: ").Append(KycInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Prospect);
        }

        /// <summary>
        /// Returns true if Prospect instances are equal
        /// </summary>
        /// <param name="input">Instance of Prospect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Prospect input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MotherMaidenName == input.MotherMaidenName ||
                    (this.MotherMaidenName != null &&
                    this.MotherMaidenName.Equals(input.MotherMaidenName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Demographics == input.Demographics ||
                    (this.Demographics != null &&
                    this.Demographics.Equals(input.Demographics))
                ) && 
                (
                    this.Address == input.Address ||
                    this.Address != null &&
                    input.Address != null &&
                    this.Address.SequenceEqual(input.Address)
                ) && 
                (
                    this.Email == input.Email ||
                    this.Email != null &&
                    input.Email != null &&
                    this.Email.SequenceEqual(input.Email)
                ) && 
                (
                    this.Phone == input.Phone ||
                    this.Phone != null &&
                    input.Phone != null &&
                    this.Phone.SequenceEqual(input.Phone)
                ) && 
                (
                    this.ContactPreference == input.ContactPreference ||
                    (this.ContactPreference != null &&
                    this.ContactPreference.Equals(input.ContactPreference))
                ) && 
                (
                    this.FinancialInformation == input.FinancialInformation ||
                    (this.FinancialInformation != null &&
                    this.FinancialInformation.Equals(input.FinancialInformation))
                ) && 
                (
                    this.Education == input.Education ||
                    (this.Education != null &&
                    this.Education.Equals(input.Education))
                ) && 
                (
                    this.EmploymentDetails == input.EmploymentDetails ||
                    this.EmploymentDetails != null &&
                    input.EmploymentDetails != null &&
                    this.EmploymentDetails.SequenceEqual(input.EmploymentDetails)
                ) && 
                (
                    this.IdentificationDocumentDetails == input.IdentificationDocumentDetails ||
                    this.IdentificationDocumentDetails != null &&
                    input.IdentificationDocumentDetails != null &&
                    this.IdentificationDocumentDetails.SequenceEqual(input.IdentificationDocumentDetails)
                ) && 
                (
                    this.AdditionalData == input.AdditionalData ||
                    (this.AdditionalData != null &&
                    this.AdditionalData.Equals(input.AdditionalData))
                ) && 
                (
                    this.SelfDeclaration == input.SelfDeclaration ||
                    (this.SelfDeclaration != null &&
                    this.SelfDeclaration.Equals(input.SelfDeclaration))
                ) && 
                (
                    this.KycInformation == input.KycInformation ||
                    (this.KycInformation != null &&
                    this.KycInformation.Equals(input.KycInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MotherMaidenName != null)
                    hashCode = hashCode * 59 + this.MotherMaidenName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Demographics != null)
                    hashCode = hashCode * 59 + this.Demographics.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.ContactPreference != null)
                    hashCode = hashCode * 59 + this.ContactPreference.GetHashCode();
                if (this.FinancialInformation != null)
                    hashCode = hashCode * 59 + this.FinancialInformation.GetHashCode();
                if (this.Education != null)
                    hashCode = hashCode * 59 + this.Education.GetHashCode();
                if (this.EmploymentDetails != null)
                    hashCode = hashCode * 59 + this.EmploymentDetails.GetHashCode();
                if (this.IdentificationDocumentDetails != null)
                    hashCode = hashCode * 59 + this.IdentificationDocumentDetails.GetHashCode();
                if (this.AdditionalData != null)
                    hashCode = hashCode * 59 + this.AdditionalData.GetHashCode();
                if (this.SelfDeclaration != null)
                    hashCode = hashCode * 59 + this.SelfDeclaration.GetHashCode();
                if (this.KycInformation != null)
                    hashCode = hashCode * 59 + this.KycInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
