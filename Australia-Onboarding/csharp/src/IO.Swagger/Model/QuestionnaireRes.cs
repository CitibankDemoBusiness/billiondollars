/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuestionnaireRes
    /// </summary>
    [DataContract]
        public partial class QuestionnaireRes :  IEquatable<QuestionnaireRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionnaireRes" /> class.
        /// </summary>
        /// <param name="questionSequenceNumber">Question sequence number.</param>
        /// <param name="questionnaireId">Identifer used in request to map a response to a given questionnaire..</param>
        /// <param name="questionNumber">Question Number used in request to map a response to a given enquiry..</param>
        /// <param name="questionText">Question text to be displayed to the end user..</param>
        /// <param name="questionType">Type of question..</param>
        /// <param name="responseOptions">responseOptions.</param>
        public QuestionnaireRes(int? questionSequenceNumber = default(int?), string questionnaireId = default(string), string questionNumber = default(string), string questionText = default(string), string questionType = default(string), List<KbaQResponseOptions> responseOptions = default(List<KbaQResponseOptions>))
        {
            this.QuestionSequenceNumber = questionSequenceNumber;
            this.QuestionnaireId = questionnaireId;
            this.QuestionNumber = questionNumber;
            this.QuestionText = questionText;
            this.QuestionType = questionType;
            this.ResponseOptions = responseOptions;
        }
        
        /// <summary>
        /// Question sequence number
        /// </summary>
        /// <value>Question sequence number</value>
        [DataMember(Name="questionSequenceNumber", EmitDefaultValue=false)]
        public int? QuestionSequenceNumber { get; set; }

        /// <summary>
        /// Identifer used in request to map a response to a given questionnaire.
        /// </summary>
        /// <value>Identifer used in request to map a response to a given questionnaire.</value>
        [DataMember(Name="questionnaireId", EmitDefaultValue=false)]
        public string QuestionnaireId { get; set; }

        /// <summary>
        /// Question Number used in request to map a response to a given enquiry.
        /// </summary>
        /// <value>Question Number used in request to map a response to a given enquiry.</value>
        [DataMember(Name="questionNumber", EmitDefaultValue=false)]
        public string QuestionNumber { get; set; }

        /// <summary>
        /// Question text to be displayed to the end user.
        /// </summary>
        /// <value>Question text to be displayed to the end user.</value>
        [DataMember(Name="questionText", EmitDefaultValue=false)]
        public string QuestionText { get; set; }

        /// <summary>
        /// Type of question.
        /// </summary>
        /// <value>Type of question.</value>
        [DataMember(Name="questionType", EmitDefaultValue=false)]
        public string QuestionType { get; set; }

        /// <summary>
        /// Gets or Sets ResponseOptions
        /// </summary>
        [DataMember(Name="responseOptions", EmitDefaultValue=false)]
        public List<KbaQResponseOptions> ResponseOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuestionnaireRes {\n");
            sb.Append("  QuestionSequenceNumber: ").Append(QuestionSequenceNumber).Append("\n");
            sb.Append("  QuestionnaireId: ").Append(QuestionnaireId).Append("\n");
            sb.Append("  QuestionNumber: ").Append(QuestionNumber).Append("\n");
            sb.Append("  QuestionText: ").Append(QuestionText).Append("\n");
            sb.Append("  QuestionType: ").Append(QuestionType).Append("\n");
            sb.Append("  ResponseOptions: ").Append(ResponseOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuestionnaireRes);
        }

        /// <summary>
        /// Returns true if QuestionnaireRes instances are equal
        /// </summary>
        /// <param name="input">Instance of QuestionnaireRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuestionnaireRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuestionSequenceNumber == input.QuestionSequenceNumber ||
                    (this.QuestionSequenceNumber != null &&
                    this.QuestionSequenceNumber.Equals(input.QuestionSequenceNumber))
                ) && 
                (
                    this.QuestionnaireId == input.QuestionnaireId ||
                    (this.QuestionnaireId != null &&
                    this.QuestionnaireId.Equals(input.QuestionnaireId))
                ) && 
                (
                    this.QuestionNumber == input.QuestionNumber ||
                    (this.QuestionNumber != null &&
                    this.QuestionNumber.Equals(input.QuestionNumber))
                ) && 
                (
                    this.QuestionText == input.QuestionText ||
                    (this.QuestionText != null &&
                    this.QuestionText.Equals(input.QuestionText))
                ) && 
                (
                    this.QuestionType == input.QuestionType ||
                    (this.QuestionType != null &&
                    this.QuestionType.Equals(input.QuestionType))
                ) && 
                (
                    this.ResponseOptions == input.ResponseOptions ||
                    this.ResponseOptions != null &&
                    input.ResponseOptions != null &&
                    this.ResponseOptions.SequenceEqual(input.ResponseOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuestionSequenceNumber != null)
                    hashCode = hashCode * 59 + this.QuestionSequenceNumber.GetHashCode();
                if (this.QuestionnaireId != null)
                    hashCode = hashCode * 59 + this.QuestionnaireId.GetHashCode();
                if (this.QuestionNumber != null)
                    hashCode = hashCode * 59 + this.QuestionNumber.GetHashCode();
                if (this.QuestionText != null)
                    hashCode = hashCode * 59 + this.QuestionText.GetHashCode();
                if (this.QuestionType != null)
                    hashCode = hashCode * 59 + this.QuestionType.GetHashCode();
                if (this.ResponseOptions != null)
                    hashCode = hashCode * 59 + this.ResponseOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
