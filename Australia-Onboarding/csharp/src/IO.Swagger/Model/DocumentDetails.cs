/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentDetails
    /// </summary>
    [DataContract]
        public partial class DocumentDetails :  IEquatable<DocumentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDetails" /> class.
        /// </summary>
        /// <param name="documentIdType">Document ID for each proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get possible value of this field with description. You can use the documentIdType as the referenceCode parameter to retrieve the values. (required).</param>
        /// <param name="documentFormat">Format of the scanned document.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentFormat} resource to get possible value of this field with description. You can use the documentFormat as the referenceCode parameter to retrieve the values. (required).</param>
        /// <param name="proofType">Classification of the document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values. (required).</param>
        /// <param name="applicantType">Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the applicantType as the referenceCode parameter to retrieve the values..</param>
        /// <param name="applicantId">Unique identifier to be provided for a supplementary applicant..</param>
        /// <param name="binaryData">This field contains binary data of the uploaded document. (required).</param>
        public DocumentDetails(string documentIdType = default(string), string documentFormat = default(string), string proofType = default(string), string applicantType = default(string), string applicantId = default(string), string binaryData = default(string))
        {
            // to ensure "documentIdType" is required (not null)
            if (documentIdType == null)
            {
                throw new InvalidDataException("documentIdType is a required property for DocumentDetails and cannot be null");
            }
            else
            {
                this.DocumentIdType = documentIdType;
            }
            // to ensure "documentFormat" is required (not null)
            if (documentFormat == null)
            {
                throw new InvalidDataException("documentFormat is a required property for DocumentDetails and cannot be null");
            }
            else
            {
                this.DocumentFormat = documentFormat;
            }
            // to ensure "proofType" is required (not null)
            if (proofType == null)
            {
                throw new InvalidDataException("proofType is a required property for DocumentDetails and cannot be null");
            }
            else
            {
                this.ProofType = proofType;
            }
            // to ensure "binaryData" is required (not null)
            if (binaryData == null)
            {
                throw new InvalidDataException("binaryData is a required property for DocumentDetails and cannot be null");
            }
            else
            {
                this.BinaryData = binaryData;
            }
            this.ApplicantType = applicantType;
            this.ApplicantId = applicantId;
        }
        
        /// <summary>
        /// Document ID for each proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get possible value of this field with description. You can use the documentIdType as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Document ID for each proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get possible value of this field with description. You can use the documentIdType as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="documentIdType", EmitDefaultValue=false)]
        public string DocumentIdType { get; set; }

        /// <summary>
        /// Format of the scanned document.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentFormat} resource to get possible value of this field with description. You can use the documentFormat as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Format of the scanned document.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentFormat} resource to get possible value of this field with description. You can use the documentFormat as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="documentFormat", EmitDefaultValue=false)]
        public string DocumentFormat { get; set; }

        /// <summary>
        /// Classification of the document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Classification of the document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="proofType", EmitDefaultValue=false)]
        public string ProofType { get; set; }

        /// <summary>
        /// Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the applicantType as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the applicantType as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="applicantType", EmitDefaultValue=false)]
        public string ApplicantType { get; set; }

        /// <summary>
        /// Unique identifier to be provided for a supplementary applicant.
        /// </summary>
        /// <value>Unique identifier to be provided for a supplementary applicant.</value>
        [DataMember(Name="applicantId", EmitDefaultValue=false)]
        public string ApplicantId { get; set; }

        /// <summary>
        /// This field contains binary data of the uploaded document.
        /// </summary>
        /// <value>This field contains binary data of the uploaded document.</value>
        [DataMember(Name="binaryData", EmitDefaultValue=false)]
        public string BinaryData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentDetails {\n");
            sb.Append("  DocumentIdType: ").Append(DocumentIdType).Append("\n");
            sb.Append("  DocumentFormat: ").Append(DocumentFormat).Append("\n");
            sb.Append("  ProofType: ").Append(ProofType).Append("\n");
            sb.Append("  ApplicantType: ").Append(ApplicantType).Append("\n");
            sb.Append("  ApplicantId: ").Append(ApplicantId).Append("\n");
            sb.Append("  BinaryData: ").Append(BinaryData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentDetails);
        }

        /// <summary>
        /// Returns true if DocumentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentIdType == input.DocumentIdType ||
                    (this.DocumentIdType != null &&
                    this.DocumentIdType.Equals(input.DocumentIdType))
                ) && 
                (
                    this.DocumentFormat == input.DocumentFormat ||
                    (this.DocumentFormat != null &&
                    this.DocumentFormat.Equals(input.DocumentFormat))
                ) && 
                (
                    this.ProofType == input.ProofType ||
                    (this.ProofType != null &&
                    this.ProofType.Equals(input.ProofType))
                ) && 
                (
                    this.ApplicantType == input.ApplicantType ||
                    (this.ApplicantType != null &&
                    this.ApplicantType.Equals(input.ApplicantType))
                ) && 
                (
                    this.ApplicantId == input.ApplicantId ||
                    (this.ApplicantId != null &&
                    this.ApplicantId.Equals(input.ApplicantId))
                ) && 
                (
                    this.BinaryData == input.BinaryData ||
                    (this.BinaryData != null &&
                    this.BinaryData.Equals(input.BinaryData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentIdType != null)
                    hashCode = hashCode * 59 + this.DocumentIdType.GetHashCode();
                if (this.DocumentFormat != null)
                    hashCode = hashCode * 59 + this.DocumentFormat.GetHashCode();
                if (this.ProofType != null)
                    hashCode = hashCode * 59 + this.ProofType.GetHashCode();
                if (this.ApplicantType != null)
                    hashCode = hashCode * 59 + this.ApplicantType.GetHashCode();
                if (this.ApplicantId != null)
                    hashCode = hashCode * 59 + this.ApplicantId.GetHashCode();
                if (this.BinaryData != null)
                    hashCode = hashCode * 59 + this.BinaryData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
