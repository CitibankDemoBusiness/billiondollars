/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TradeReferenceDetails
    /// </summary>
    [DataContract]
        public partial class TradeReferenceDetails :  IEquatable<TradeReferenceDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeReferenceDetails" /> class.
        /// </summary>
        /// <param name="referenceName">Reference Name from the Trade done by the customer..</param>
        /// <param name="relationship">Trade Reference Relationship. This is a reference data field.Please use /v1/utilities/referenceData/{tradeReferenceRelationshipGCG} resource to get valid value of this field with description..</param>
        /// <param name="accountantName">Accountant  Name from the Trade done by the customer..</param>
        public TradeReferenceDetails(string referenceName = default(string), string relationship = default(string), string accountantName = default(string))
        {
            this.ReferenceName = referenceName;
            this.Relationship = relationship;
            this.AccountantName = accountantName;
        }
        
        /// <summary>
        /// Reference Name from the Trade done by the customer.
        /// </summary>
        /// <value>Reference Name from the Trade done by the customer.</value>
        [DataMember(Name="referenceName", EmitDefaultValue=false)]
        public string ReferenceName { get; set; }

        /// <summary>
        /// Trade Reference Relationship. This is a reference data field.Please use /v1/utilities/referenceData/{tradeReferenceRelationshipGCG} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Trade Reference Relationship. This is a reference data field.Please use /v1/utilities/referenceData/{tradeReferenceRelationshipGCG} resource to get valid value of this field with description.</value>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public string Relationship { get; set; }

        /// <summary>
        /// Accountant  Name from the Trade done by the customer.
        /// </summary>
        /// <value>Accountant  Name from the Trade done by the customer.</value>
        [DataMember(Name="accountantName", EmitDefaultValue=false)]
        public string AccountantName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradeReferenceDetails {\n");
            sb.Append("  ReferenceName: ").Append(ReferenceName).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  AccountantName: ").Append(AccountantName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradeReferenceDetails);
        }

        /// <summary>
        /// Returns true if TradeReferenceDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeReferenceDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeReferenceDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReferenceName == input.ReferenceName ||
                    (this.ReferenceName != null &&
                    this.ReferenceName.Equals(input.ReferenceName))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.AccountantName == input.AccountantName ||
                    (this.AccountantName != null &&
                    this.AccountantName.Equals(input.AccountantName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceName != null)
                    hashCode = hashCode * 59 + this.ReferenceName.GetHashCode();
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                if (this.AccountantName != null)
                    hashCode = hashCode * 59 + this.AccountantName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
