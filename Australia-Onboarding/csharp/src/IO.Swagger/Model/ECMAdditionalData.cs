/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ECMAdditionalData
    /// </summary>
    [DataContract]
        public partial class ECMAdditionalData :  IEquatable<ECMAdditionalData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ECMAdditionalData" /> class.
        /// </summary>
        /// <param name="feeCode">Fee code that applied to the requested product.</param>
        /// <param name="countrySpecificGroup">countrySpecificGroup.</param>
        /// <param name="introducerId">Unique identifier associated with the introducer who had referred the applicant..</param>
        /// <param name="referralTracking">referralTracking.</param>
        /// <param name="mediaId">The media ID will be used to determine which offer/campaign banner was clicked when the customer has submitted the application.</param>
        public ECMAdditionalData(string feeCode = default(string), ECMCountrySpecificGroup countrySpecificGroup = default(ECMCountrySpecificGroup), string introducerId = default(string), ReferralTracking referralTracking = default(ReferralTracking), string mediaId = default(string))
        {
            this.FeeCode = feeCode;
            this.CountrySpecificGroup = countrySpecificGroup;
            this.IntroducerId = introducerId;
            this.ReferralTracking = referralTracking;
            this.MediaId = mediaId;
        }
        
        /// <summary>
        /// Fee code that applied to the requested product
        /// </summary>
        /// <value>Fee code that applied to the requested product</value>
        [DataMember(Name="feeCode", EmitDefaultValue=false)]
        public string FeeCode { get; set; }

        /// <summary>
        /// Gets or Sets CountrySpecificGroup
        /// </summary>
        [DataMember(Name="countrySpecificGroup", EmitDefaultValue=false)]
        public ECMCountrySpecificGroup CountrySpecificGroup { get; set; }

        /// <summary>
        /// Unique identifier associated with the introducer who had referred the applicant.
        /// </summary>
        /// <value>Unique identifier associated with the introducer who had referred the applicant.</value>
        [DataMember(Name="introducerId", EmitDefaultValue=false)]
        public string IntroducerId { get; set; }

        /// <summary>
        /// Gets or Sets ReferralTracking
        /// </summary>
        [DataMember(Name="referralTracking", EmitDefaultValue=false)]
        public ReferralTracking ReferralTracking { get; set; }

        /// <summary>
        /// The media ID will be used to determine which offer/campaign banner was clicked when the customer has submitted the application
        /// </summary>
        /// <value>The media ID will be used to determine which offer/campaign banner was clicked when the customer has submitted the application</value>
        [DataMember(Name="mediaId", EmitDefaultValue=false)]
        public string MediaId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ECMAdditionalData {\n");
            sb.Append("  FeeCode: ").Append(FeeCode).Append("\n");
            sb.Append("  CountrySpecificGroup: ").Append(CountrySpecificGroup).Append("\n");
            sb.Append("  IntroducerId: ").Append(IntroducerId).Append("\n");
            sb.Append("  ReferralTracking: ").Append(ReferralTracking).Append("\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ECMAdditionalData);
        }

        /// <summary>
        /// Returns true if ECMAdditionalData instances are equal
        /// </summary>
        /// <param name="input">Instance of ECMAdditionalData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ECMAdditionalData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeeCode == input.FeeCode ||
                    (this.FeeCode != null &&
                    this.FeeCode.Equals(input.FeeCode))
                ) && 
                (
                    this.CountrySpecificGroup == input.CountrySpecificGroup ||
                    (this.CountrySpecificGroup != null &&
                    this.CountrySpecificGroup.Equals(input.CountrySpecificGroup))
                ) && 
                (
                    this.IntroducerId == input.IntroducerId ||
                    (this.IntroducerId != null &&
                    this.IntroducerId.Equals(input.IntroducerId))
                ) && 
                (
                    this.ReferralTracking == input.ReferralTracking ||
                    (this.ReferralTracking != null &&
                    this.ReferralTracking.Equals(input.ReferralTracking))
                ) && 
                (
                    this.MediaId == input.MediaId ||
                    (this.MediaId != null &&
                    this.MediaId.Equals(input.MediaId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeeCode != null)
                    hashCode = hashCode * 59 + this.FeeCode.GetHashCode();
                if (this.CountrySpecificGroup != null)
                    hashCode = hashCode * 59 + this.CountrySpecificGroup.GetHashCode();
                if (this.IntroducerId != null)
                    hashCode = hashCode * 59 + this.IntroducerId.GetHashCode();
                if (this.ReferralTracking != null)
                    hashCode = hashCode * 59 + this.ReferralTracking.GetHashCode();
                if (this.MediaId != null)
                    hashCode = hashCode * 59 + this.MediaId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
