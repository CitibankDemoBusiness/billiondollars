/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApplicantUpdateEmploymentDetails
    /// </summary>
    [DataContract]
        public partial class ApplicantUpdateEmploymentDetails :  IEquatable<ApplicantUpdateEmploymentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicantUpdateEmploymentDetails" /> class.
        /// </summary>
        /// <param name="employmentDurationInYears">Employment duration in years.</param>
        /// <param name="employmentDurationiInMonths">Employment duration in months.</param>
        /// <param name="employerName">Name of the employer..</param>
        /// <param name="jobTitle">Job Title. This a reference data field. Please use /utilities/referenceData/{jobTitle} resource to get valid values of this field with descriptions. You can use the jobTitle as the referenceCode parameter to retrieve the values..</param>
        /// <param name="occupationCode">Occupation code. This is a reference data field. Please use /utilities/referenceData/{occupationCode} resource to get valid values of this field with descriptions. You can use the occupationCode as the referenceCode parameter to retrieve the values..</param>
        /// <param name="employmentStatus">Status of the employment.This is a reference data field. Please use /v1/apac/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        public ApplicantUpdateEmploymentDetails(int? employmentDurationInYears = default(int?), int? employmentDurationiInMonths = default(int?), string employerName = default(string), string jobTitle = default(string), string occupationCode = default(string), string employmentStatus = default(string))
        {
            this.EmploymentDurationInYears = employmentDurationInYears;
            this.EmploymentDurationiInMonths = employmentDurationiInMonths;
            this.EmployerName = employerName;
            this.JobTitle = jobTitle;
            this.OccupationCode = occupationCode;
            this.EmploymentStatus = employmentStatus;
        }
        
        /// <summary>
        /// Employment duration in years
        /// </summary>
        /// <value>Employment duration in years</value>
        [DataMember(Name="employmentDurationInYears", EmitDefaultValue=false)]
        public int? EmploymentDurationInYears { get; set; }

        /// <summary>
        /// Employment duration in months
        /// </summary>
        /// <value>Employment duration in months</value>
        [DataMember(Name="employmentDurationiInMonths", EmitDefaultValue=false)]
        public int? EmploymentDurationiInMonths { get; set; }

        /// <summary>
        /// Name of the employer.
        /// </summary>
        /// <value>Name of the employer.</value>
        [DataMember(Name="employerName", EmitDefaultValue=false)]
        public string EmployerName { get; set; }

        /// <summary>
        /// Job Title. This a reference data field. Please use /utilities/referenceData/{jobTitle} resource to get valid values of this field with descriptions. You can use the jobTitle as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Job Title. This a reference data field. Please use /utilities/referenceData/{jobTitle} resource to get valid values of this field with descriptions. You can use the jobTitle as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// Occupation code. This is a reference data field. Please use /utilities/referenceData/{occupationCode} resource to get valid values of this field with descriptions. You can use the occupationCode as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Occupation code. This is a reference data field. Please use /utilities/referenceData/{occupationCode} resource to get valid values of this field with descriptions. You can use the occupationCode as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="occupationCode", EmitDefaultValue=false)]
        public string OccupationCode { get; set; }

        /// <summary>
        /// Status of the employment.This is a reference data field. Please use /v1/apac/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Status of the employment.This is a reference data field. Please use /v1/apac/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="employmentStatus", EmitDefaultValue=false)]
        public string EmploymentStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicantUpdateEmploymentDetails {\n");
            sb.Append("  EmploymentDurationInYears: ").Append(EmploymentDurationInYears).Append("\n");
            sb.Append("  EmploymentDurationiInMonths: ").Append(EmploymentDurationiInMonths).Append("\n");
            sb.Append("  EmployerName: ").Append(EmployerName).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  OccupationCode: ").Append(OccupationCode).Append("\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicantUpdateEmploymentDetails);
        }

        /// <summary>
        /// Returns true if ApplicantUpdateEmploymentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicantUpdateEmploymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicantUpdateEmploymentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmploymentDurationInYears == input.EmploymentDurationInYears ||
                    (this.EmploymentDurationInYears != null &&
                    this.EmploymentDurationInYears.Equals(input.EmploymentDurationInYears))
                ) && 
                (
                    this.EmploymentDurationiInMonths == input.EmploymentDurationiInMonths ||
                    (this.EmploymentDurationiInMonths != null &&
                    this.EmploymentDurationiInMonths.Equals(input.EmploymentDurationiInMonths))
                ) && 
                (
                    this.EmployerName == input.EmployerName ||
                    (this.EmployerName != null &&
                    this.EmployerName.Equals(input.EmployerName))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.OccupationCode == input.OccupationCode ||
                    (this.OccupationCode != null &&
                    this.OccupationCode.Equals(input.OccupationCode))
                ) && 
                (
                    this.EmploymentStatus == input.EmploymentStatus ||
                    (this.EmploymentStatus != null &&
                    this.EmploymentStatus.Equals(input.EmploymentStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmploymentDurationInYears != null)
                    hashCode = hashCode * 59 + this.EmploymentDurationInYears.GetHashCode();
                if (this.EmploymentDurationiInMonths != null)
                    hashCode = hashCode * 59 + this.EmploymentDurationiInMonths.GetHashCode();
                if (this.EmployerName != null)
                    hashCode = hashCode * 59 + this.EmployerName.GetHashCode();
                if (this.JobTitle != null)
                    hashCode = hashCode * 59 + this.JobTitle.GetHashCode();
                if (this.OccupationCode != null)
                    hashCode = hashCode * 59 + this.OccupationCode.GetHashCode();
                if (this.EmploymentStatus != null)
                    hashCode = hashCode * 59 + this.EmploymentStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
