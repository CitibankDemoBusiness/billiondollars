/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CardDeliveryDetails
    /// </summary>
    [DataContract]
        public partial class CardDeliveryDetails :  IEquatable<CardDeliveryDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardDeliveryDetails" /> class.
        /// </summary>
        /// <param name="cardDeliveryStatus">Cd delivery status.  This is a reference data field. Please use /v1/utilities/referenceData/{cardDeliveryStatus} resource to get possible values of this field with descriptions..</param>
        /// <param name="airwayBillNumber">New Field in EPCDFIL. This field denotes the Airway Bill Number or reference number provided by the courier company for the dispatch..</param>
        /// <param name="deliveryMethod">New Field in EPCDFIL. This field denotes the mode through which the card was disptached. Valid Values :  &#x27;Courier&#x27; or &#x27;Post&#x27; .</param>
        /// <param name="cardDeliveryDate">New Field in EPCDFIL This field denotes the date of card delivery..</param>
        /// <param name="receivedBy">New Field in EPCDFIL. This field denotes the Name and Relationship of the individual who has received the card on behalf of the cardholder. If the card holder has received the card, then this field will have the value as ‘Self’..</param>
        /// <param name="displayCardNumber">Card last four Digit..</param>
        public CardDeliveryDetails(string cardDeliveryStatus = default(string), string airwayBillNumber = default(string), string deliveryMethod = default(string), string cardDeliveryDate = default(string), string receivedBy = default(string), string displayCardNumber = default(string))
        {
            this.CardDeliveryStatus = cardDeliveryStatus;
            this.AirwayBillNumber = airwayBillNumber;
            this.DeliveryMethod = deliveryMethod;
            this.CardDeliveryDate = cardDeliveryDate;
            this.ReceivedBy = receivedBy;
            this.DisplayCardNumber = displayCardNumber;
        }
        
        /// <summary>
        /// Cd delivery status.  This is a reference data field. Please use /v1/utilities/referenceData/{cardDeliveryStatus} resource to get possible values of this field with descriptions.
        /// </summary>
        /// <value>Cd delivery status.  This is a reference data field. Please use /v1/utilities/referenceData/{cardDeliveryStatus} resource to get possible values of this field with descriptions.</value>
        [DataMember(Name="cardDeliveryStatus", EmitDefaultValue=false)]
        public string CardDeliveryStatus { get; set; }

        /// <summary>
        /// New Field in EPCDFIL. This field denotes the Airway Bill Number or reference number provided by the courier company for the dispatch.
        /// </summary>
        /// <value>New Field in EPCDFIL. This field denotes the Airway Bill Number or reference number provided by the courier company for the dispatch.</value>
        [DataMember(Name="airwayBillNumber", EmitDefaultValue=false)]
        public string AirwayBillNumber { get; set; }

        /// <summary>
        /// New Field in EPCDFIL. This field denotes the mode through which the card was disptached. Valid Values :  &#x27;Courier&#x27; or &#x27;Post&#x27; 
        /// </summary>
        /// <value>New Field in EPCDFIL. This field denotes the mode through which the card was disptached. Valid Values :  &#x27;Courier&#x27; or &#x27;Post&#x27; </value>
        [DataMember(Name="deliveryMethod", EmitDefaultValue=false)]
        public string DeliveryMethod { get; set; }

        /// <summary>
        /// New Field in EPCDFIL This field denotes the date of card delivery.
        /// </summary>
        /// <value>New Field in EPCDFIL This field denotes the date of card delivery.</value>
        [DataMember(Name="cardDeliveryDate", EmitDefaultValue=false)]
        public string CardDeliveryDate { get; set; }

        /// <summary>
        /// New Field in EPCDFIL. This field denotes the Name and Relationship of the individual who has received the card on behalf of the cardholder. If the card holder has received the card, then this field will have the value as ‘Self’.
        /// </summary>
        /// <value>New Field in EPCDFIL. This field denotes the Name and Relationship of the individual who has received the card on behalf of the cardholder. If the card holder has received the card, then this field will have the value as ‘Self’.</value>
        [DataMember(Name="receivedBy", EmitDefaultValue=false)]
        public string ReceivedBy { get; set; }

        /// <summary>
        /// Card last four Digit.
        /// </summary>
        /// <value>Card last four Digit.</value>
        [DataMember(Name="displayCardNumber", EmitDefaultValue=false)]
        public string DisplayCardNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardDeliveryDetails {\n");
            sb.Append("  CardDeliveryStatus: ").Append(CardDeliveryStatus).Append("\n");
            sb.Append("  AirwayBillNumber: ").Append(AirwayBillNumber).Append("\n");
            sb.Append("  DeliveryMethod: ").Append(DeliveryMethod).Append("\n");
            sb.Append("  CardDeliveryDate: ").Append(CardDeliveryDate).Append("\n");
            sb.Append("  ReceivedBy: ").Append(ReceivedBy).Append("\n");
            sb.Append("  DisplayCardNumber: ").Append(DisplayCardNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardDeliveryDetails);
        }

        /// <summary>
        /// Returns true if CardDeliveryDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CardDeliveryDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardDeliveryDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardDeliveryStatus == input.CardDeliveryStatus ||
                    (this.CardDeliveryStatus != null &&
                    this.CardDeliveryStatus.Equals(input.CardDeliveryStatus))
                ) && 
                (
                    this.AirwayBillNumber == input.AirwayBillNumber ||
                    (this.AirwayBillNumber != null &&
                    this.AirwayBillNumber.Equals(input.AirwayBillNumber))
                ) && 
                (
                    this.DeliveryMethod == input.DeliveryMethod ||
                    (this.DeliveryMethod != null &&
                    this.DeliveryMethod.Equals(input.DeliveryMethod))
                ) && 
                (
                    this.CardDeliveryDate == input.CardDeliveryDate ||
                    (this.CardDeliveryDate != null &&
                    this.CardDeliveryDate.Equals(input.CardDeliveryDate))
                ) && 
                (
                    this.ReceivedBy == input.ReceivedBy ||
                    (this.ReceivedBy != null &&
                    this.ReceivedBy.Equals(input.ReceivedBy))
                ) && 
                (
                    this.DisplayCardNumber == input.DisplayCardNumber ||
                    (this.DisplayCardNumber != null &&
                    this.DisplayCardNumber.Equals(input.DisplayCardNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardDeliveryStatus != null)
                    hashCode = hashCode * 59 + this.CardDeliveryStatus.GetHashCode();
                if (this.AirwayBillNumber != null)
                    hashCode = hashCode * 59 + this.AirwayBillNumber.GetHashCode();
                if (this.DeliveryMethod != null)
                    hashCode = hashCode * 59 + this.DeliveryMethod.GetHashCode();
                if (this.CardDeliveryDate != null)
                    hashCode = hashCode * 59 + this.CardDeliveryDate.GetHashCode();
                if (this.ReceivedBy != null)
                    hashCode = hashCode * 59 + this.ReceivedBy.GetHashCode();
                if (this.DisplayCardNumber != null)
                    hashCode = hashCode * 59 + this.DisplayCardNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
