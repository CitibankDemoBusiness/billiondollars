/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CrossSellOffer
    /// </summary>
    [DataContract]
        public partial class CrossSellOffer :  IEquatable<CrossSellOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossSellOffer" /> class.
        /// </summary>
        /// <param name="creditSpecificRecommendations">creditSpecificRecommendations.</param>
        /// <param name="loanSpecificRecommendations">loanSpecificRecommendations.</param>
        /// <param name="offerProductCode">A unique code that identifies the product.</param>
        /// <param name="offerProductOrganisation">Card issuing organization name.</param>
        /// <param name="offerSourceCode">A source code to identify the product.</param>
        /// <param name="requiredDocuments">requiredDocuments.</param>
        public CrossSellOffer(List<CreditSpecificRecommendations> creditSpecificRecommendations = default(List<CreditSpecificRecommendations>), List<LoanSpecificRecommendations> loanSpecificRecommendations = default(List<LoanSpecificRecommendations>), string offerProductCode = default(string), string offerProductOrganisation = default(string), string offerSourceCode = default(string), List<RequiredDocuments> requiredDocuments = default(List<RequiredDocuments>))
        {
            this.CreditSpecificRecommendations = creditSpecificRecommendations;
            this.LoanSpecificRecommendations = loanSpecificRecommendations;
            this.OfferProductCode = offerProductCode;
            this.OfferProductOrganisation = offerProductOrganisation;
            this.OfferSourceCode = offerSourceCode;
            this.RequiredDocuments = requiredDocuments;
        }
        
        /// <summary>
        /// Gets or Sets CreditSpecificRecommendations
        /// </summary>
        [DataMember(Name="creditSpecificRecommendations", EmitDefaultValue=false)]
        public List<CreditSpecificRecommendations> CreditSpecificRecommendations { get; set; }

        /// <summary>
        /// Gets or Sets LoanSpecificRecommendations
        /// </summary>
        [DataMember(Name="loanSpecificRecommendations", EmitDefaultValue=false)]
        public List<LoanSpecificRecommendations> LoanSpecificRecommendations { get; set; }

        /// <summary>
        /// A unique code that identifies the product
        /// </summary>
        /// <value>A unique code that identifies the product</value>
        [DataMember(Name="offerProductCode", EmitDefaultValue=false)]
        public string OfferProductCode { get; set; }

        /// <summary>
        /// Card issuing organization name
        /// </summary>
        /// <value>Card issuing organization name</value>
        [DataMember(Name="offerProductOrganisation", EmitDefaultValue=false)]
        public string OfferProductOrganisation { get; set; }

        /// <summary>
        /// A source code to identify the product
        /// </summary>
        /// <value>A source code to identify the product</value>
        [DataMember(Name="offerSourceCode", EmitDefaultValue=false)]
        public string OfferSourceCode { get; set; }

        /// <summary>
        /// Gets or Sets RequiredDocuments
        /// </summary>
        [DataMember(Name="requiredDocuments", EmitDefaultValue=false)]
        public List<RequiredDocuments> RequiredDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossSellOffer {\n");
            sb.Append("  CreditSpecificRecommendations: ").Append(CreditSpecificRecommendations).Append("\n");
            sb.Append("  LoanSpecificRecommendations: ").Append(LoanSpecificRecommendations).Append("\n");
            sb.Append("  OfferProductCode: ").Append(OfferProductCode).Append("\n");
            sb.Append("  OfferProductOrganisation: ").Append(OfferProductOrganisation).Append("\n");
            sb.Append("  OfferSourceCode: ").Append(OfferSourceCode).Append("\n");
            sb.Append("  RequiredDocuments: ").Append(RequiredDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossSellOffer);
        }

        /// <summary>
        /// Returns true if CrossSellOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossSellOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossSellOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreditSpecificRecommendations == input.CreditSpecificRecommendations ||
                    this.CreditSpecificRecommendations != null &&
                    input.CreditSpecificRecommendations != null &&
                    this.CreditSpecificRecommendations.SequenceEqual(input.CreditSpecificRecommendations)
                ) && 
                (
                    this.LoanSpecificRecommendations == input.LoanSpecificRecommendations ||
                    this.LoanSpecificRecommendations != null &&
                    input.LoanSpecificRecommendations != null &&
                    this.LoanSpecificRecommendations.SequenceEqual(input.LoanSpecificRecommendations)
                ) && 
                (
                    this.OfferProductCode == input.OfferProductCode ||
                    (this.OfferProductCode != null &&
                    this.OfferProductCode.Equals(input.OfferProductCode))
                ) && 
                (
                    this.OfferProductOrganisation == input.OfferProductOrganisation ||
                    (this.OfferProductOrganisation != null &&
                    this.OfferProductOrganisation.Equals(input.OfferProductOrganisation))
                ) && 
                (
                    this.OfferSourceCode == input.OfferSourceCode ||
                    (this.OfferSourceCode != null &&
                    this.OfferSourceCode.Equals(input.OfferSourceCode))
                ) && 
                (
                    this.RequiredDocuments == input.RequiredDocuments ||
                    this.RequiredDocuments != null &&
                    input.RequiredDocuments != null &&
                    this.RequiredDocuments.SequenceEqual(input.RequiredDocuments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreditSpecificRecommendations != null)
                    hashCode = hashCode * 59 + this.CreditSpecificRecommendations.GetHashCode();
                if (this.LoanSpecificRecommendations != null)
                    hashCode = hashCode * 59 + this.LoanSpecificRecommendations.GetHashCode();
                if (this.OfferProductCode != null)
                    hashCode = hashCode * 59 + this.OfferProductCode.GetHashCode();
                if (this.OfferProductOrganisation != null)
                    hashCode = hashCode * 59 + this.OfferProductOrganisation.GetHashCode();
                if (this.OfferSourceCode != null)
                    hashCode = hashCode * 59 + this.OfferSourceCode.GetHashCode();
                if (this.RequiredDocuments != null)
                    hashCode = hashCode * 59 + this.RequiredDocuments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
