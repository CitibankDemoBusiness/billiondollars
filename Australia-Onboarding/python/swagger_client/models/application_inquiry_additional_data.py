# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationInquiryAdditionalData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_of_dependents': 'float',
        'staff_indicator': 'bool',
        'business_nature': 'str',
        'emergency_contact_name': 'str',
        'emergency_contact_phone_number': 'str',
        'over_limit_consent_flag': 'bool',
        'country_specific_group': 'ApplicationInquiryCountrySpecificGroup',
        'referral_given_name': 'str',
        'referral_surname': 'str',
        'related_to_citi_employee_flag': 'bool',
        'related_citi_employee_name': 'str',
        'related_citi_employee_department': 'str'
    }

    attribute_map = {
        'number_of_dependents': 'numberOfDependents',
        'staff_indicator': 'staffIndicator',
        'business_nature': 'businessNature',
        'emergency_contact_name': 'emergencyContactName',
        'emergency_contact_phone_number': 'emergencyContactPhoneNumber',
        'over_limit_consent_flag': 'overLimitConsentFlag',
        'country_specific_group': 'countrySpecificGroup',
        'referral_given_name': 'referralGivenName',
        'referral_surname': 'referralSurname',
        'related_to_citi_employee_flag': 'relatedToCitiEmployeeFlag',
        'related_citi_employee_name': 'relatedCitiEmployeeName',
        'related_citi_employee_department': 'relatedCitiEmployeeDepartment'
    }

    def __init__(self, number_of_dependents=None, staff_indicator=None, business_nature=None, emergency_contact_name=None, emergency_contact_phone_number=None, over_limit_consent_flag=None, country_specific_group=None, referral_given_name=None, referral_surname=None, related_to_citi_employee_flag=None, related_citi_employee_name=None, related_citi_employee_department=None):  # noqa: E501
        """ApplicationInquiryAdditionalData - a model defined in Swagger"""  # noqa: E501
        self._number_of_dependents = None
        self._staff_indicator = None
        self._business_nature = None
        self._emergency_contact_name = None
        self._emergency_contact_phone_number = None
        self._over_limit_consent_flag = None
        self._country_specific_group = None
        self._referral_given_name = None
        self._referral_surname = None
        self._related_to_citi_employee_flag = None
        self._related_citi_employee_name = None
        self._related_citi_employee_department = None
        self.discriminator = None
        if number_of_dependents is not None:
            self.number_of_dependents = number_of_dependents
        if staff_indicator is not None:
            self.staff_indicator = staff_indicator
        if business_nature is not None:
            self.business_nature = business_nature
        if emergency_contact_name is not None:
            self.emergency_contact_name = emergency_contact_name
        if emergency_contact_phone_number is not None:
            self.emergency_contact_phone_number = emergency_contact_phone_number
        if over_limit_consent_flag is not None:
            self.over_limit_consent_flag = over_limit_consent_flag
        if country_specific_group is not None:
            self.country_specific_group = country_specific_group
        if referral_given_name is not None:
            self.referral_given_name = referral_given_name
        if referral_surname is not None:
            self.referral_surname = referral_surname
        if related_to_citi_employee_flag is not None:
            self.related_to_citi_employee_flag = related_to_citi_employee_flag
        if related_citi_employee_name is not None:
            self.related_citi_employee_name = related_citi_employee_name
        if related_citi_employee_department is not None:
            self.related_citi_employee_department = related_citi_employee_department

    @property
    def number_of_dependents(self):
        """Gets the number_of_dependents of this ApplicationInquiryAdditionalData.  # noqa: E501

        Number of dependents  # noqa: E501

        :return: The number_of_dependents of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: float
        """
        return self._number_of_dependents

    @number_of_dependents.setter
    def number_of_dependents(self, number_of_dependents):
        """Sets the number_of_dependents of this ApplicationInquiryAdditionalData.

        Number of dependents  # noqa: E501

        :param number_of_dependents: The number_of_dependents of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: float
        """

        self._number_of_dependents = number_of_dependents

    @property
    def staff_indicator(self):
        """Gets the staff_indicator of this ApplicationInquiryAdditionalData.  # noqa: E501

        Flag to indicates if applicant is a Citi Staff. Valid values: true and false  # noqa: E501

        :return: The staff_indicator of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: bool
        """
        return self._staff_indicator

    @staff_indicator.setter
    def staff_indicator(self, staff_indicator):
        """Sets the staff_indicator of this ApplicationInquiryAdditionalData.

        Flag to indicates if applicant is a Citi Staff. Valid values: true and false  # noqa: E501

        :param staff_indicator: The staff_indicator of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: bool
        """

        self._staff_indicator = staff_indicator

    @property
    def business_nature(self):
        """Gets the business_nature of this ApplicationInquiryAdditionalData.  # noqa: E501

        Business nature of the applicant This is a reference data field. Please use /v1/apac/utilities/referenceData/{businessNature} resource to get valid value of this field with description. You can use businessNature field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The business_nature of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: str
        """
        return self._business_nature

    @business_nature.setter
    def business_nature(self, business_nature):
        """Sets the business_nature of this ApplicationInquiryAdditionalData.

        Business nature of the applicant This is a reference data field. Please use /v1/apac/utilities/referenceData/{businessNature} resource to get valid value of this field with description. You can use businessNature field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param business_nature: The business_nature of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: str
        """

        self._business_nature = business_nature

    @property
    def emergency_contact_name(self):
        """Gets the emergency_contact_name of this ApplicationInquiryAdditionalData.  # noqa: E501

        Emergency contact Name  # noqa: E501

        :return: The emergency_contact_name of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_name

    @emergency_contact_name.setter
    def emergency_contact_name(self, emergency_contact_name):
        """Sets the emergency_contact_name of this ApplicationInquiryAdditionalData.

        Emergency contact Name  # noqa: E501

        :param emergency_contact_name: The emergency_contact_name of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: str
        """

        self._emergency_contact_name = emergency_contact_name

    @property
    def emergency_contact_phone_number(self):
        """Gets the emergency_contact_phone_number of this ApplicationInquiryAdditionalData.  # noqa: E501

        Emergency contact Number.  # noqa: E501

        :return: The emergency_contact_phone_number of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_phone_number

    @emergency_contact_phone_number.setter
    def emergency_contact_phone_number(self, emergency_contact_phone_number):
        """Sets the emergency_contact_phone_number of this ApplicationInquiryAdditionalData.

        Emergency contact Number.  # noqa: E501

        :param emergency_contact_phone_number: The emergency_contact_phone_number of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: str
        """

        self._emergency_contact_phone_number = emergency_contact_phone_number

    @property
    def over_limit_consent_flag(self):
        """Gets the over_limit_consent_flag of this ApplicationInquiryAdditionalData.  # noqa: E501

        Customer consent on spending more than the limit assigned to him. Valid values: true and false  # noqa: E501

        :return: The over_limit_consent_flag of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: bool
        """
        return self._over_limit_consent_flag

    @over_limit_consent_flag.setter
    def over_limit_consent_flag(self, over_limit_consent_flag):
        """Sets the over_limit_consent_flag of this ApplicationInquiryAdditionalData.

        Customer consent on spending more than the limit assigned to him. Valid values: true and false  # noqa: E501

        :param over_limit_consent_flag: The over_limit_consent_flag of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: bool
        """

        self._over_limit_consent_flag = over_limit_consent_flag

    @property
    def country_specific_group(self):
        """Gets the country_specific_group of this ApplicationInquiryAdditionalData.  # noqa: E501


        :return: The country_specific_group of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: ApplicationInquiryCountrySpecificGroup
        """
        return self._country_specific_group

    @country_specific_group.setter
    def country_specific_group(self, country_specific_group):
        """Sets the country_specific_group of this ApplicationInquiryAdditionalData.


        :param country_specific_group: The country_specific_group of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: ApplicationInquiryCountrySpecificGroup
        """

        self._country_specific_group = country_specific_group

    @property
    def referral_given_name(self):
        """Gets the referral_given_name of this ApplicationInquiryAdditionalData.  # noqa: E501

        Referral First Name.  # noqa: E501

        :return: The referral_given_name of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: str
        """
        return self._referral_given_name

    @referral_given_name.setter
    def referral_given_name(self, referral_given_name):
        """Sets the referral_given_name of this ApplicationInquiryAdditionalData.

        Referral First Name.  # noqa: E501

        :param referral_given_name: The referral_given_name of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: str
        """

        self._referral_given_name = referral_given_name

    @property
    def referral_surname(self):
        """Gets the referral_surname of this ApplicationInquiryAdditionalData.  # noqa: E501

        Referral Surname/Last Name.  # noqa: E501

        :return: The referral_surname of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: str
        """
        return self._referral_surname

    @referral_surname.setter
    def referral_surname(self, referral_surname):
        """Sets the referral_surname of this ApplicationInquiryAdditionalData.

        Referral Surname/Last Name.  # noqa: E501

        :param referral_surname: The referral_surname of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: str
        """

        self._referral_surname = referral_surname

    @property
    def related_to_citi_employee_flag(self):
        """Gets the related_to_citi_employee_flag of this ApplicationInquiryAdditionalData.  # noqa: E501

        Self declaration if applicant has any relation with citi bank employee. Valid values: true and false  # noqa: E501

        :return: The related_to_citi_employee_flag of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: bool
        """
        return self._related_to_citi_employee_flag

    @related_to_citi_employee_flag.setter
    def related_to_citi_employee_flag(self, related_to_citi_employee_flag):
        """Sets the related_to_citi_employee_flag of this ApplicationInquiryAdditionalData.

        Self declaration if applicant has any relation with citi bank employee. Valid values: true and false  # noqa: E501

        :param related_to_citi_employee_flag: The related_to_citi_employee_flag of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: bool
        """

        self._related_to_citi_employee_flag = related_to_citi_employee_flag

    @property
    def related_citi_employee_name(self):
        """Gets the related_citi_employee_name of this ApplicationInquiryAdditionalData.  # noqa: E501

        Name of the citi employee if applicant has any relation with citi bank employee.  # noqa: E501

        :return: The related_citi_employee_name of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: str
        """
        return self._related_citi_employee_name

    @related_citi_employee_name.setter
    def related_citi_employee_name(self, related_citi_employee_name):
        """Sets the related_citi_employee_name of this ApplicationInquiryAdditionalData.

        Name of the citi employee if applicant has any relation with citi bank employee.  # noqa: E501

        :param related_citi_employee_name: The related_citi_employee_name of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: str
        """

        self._related_citi_employee_name = related_citi_employee_name

    @property
    def related_citi_employee_department(self):
        """Gets the related_citi_employee_department of this ApplicationInquiryAdditionalData.  # noqa: E501

        Department of citi employee if applicant has any relation with citi bank employee.  # noqa: E501

        :return: The related_citi_employee_department of this ApplicationInquiryAdditionalData.  # noqa: E501
        :rtype: str
        """
        return self._related_citi_employee_department

    @related_citi_employee_department.setter
    def related_citi_employee_department(self, related_citi_employee_department):
        """Sets the related_citi_employee_department of this ApplicationInquiryAdditionalData.

        Department of citi employee if applicant has any relation with citi bank employee.  # noqa: E501

        :param related_citi_employee_department: The related_citi_employee_department of this ApplicationInquiryAdditionalData.  # noqa: E501
        :type: str
        """

        self._related_citi_employee_department = related_citi_employee_department

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationInquiryAdditionalData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationInquiryAdditionalData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
