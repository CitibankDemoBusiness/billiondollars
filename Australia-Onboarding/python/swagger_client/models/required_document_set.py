# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequiredDocumentSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_set': 'str',
        'product_code': 'str',
        'proof_type': 'str',
        'applicant_type': 'str'
    }

    attribute_map = {
        'document_set': 'documentSet',
        'product_code': 'productCode',
        'proof_type': 'proofType',
        'applicant_type': 'applicantType'
    }

    def __init__(self, document_set=None, product_code=None, proof_type=None, applicant_type=None):  # noqa: E501
        """RequiredDocumentSet - a model defined in Swagger"""  # noqa: E501
        self._document_set = None
        self._product_code = None
        self._proof_type = None
        self._applicant_type = None
        self.discriminator = None
        if document_set is not None:
            self.document_set = document_set
        if product_code is not None:
            self.product_code = product_code
        if proof_type is not None:
            self.proof_type = proof_type
        if applicant_type is not None:
            self.applicant_type = applicant_type

    @property
    def document_set(self):
        """Gets the document_set of this RequiredDocumentSet.  # noqa: E501

        Document set a mandated combination of document types for each proof. This is a reference data field. Please use /v1/utilities/referenceData/{documentIdType} resource to get valid values of this field with descriptions.  # noqa: E501

        :return: The document_set of this RequiredDocumentSet.  # noqa: E501
        :rtype: str
        """
        return self._document_set

    @document_set.setter
    def document_set(self, document_set):
        """Sets the document_set of this RequiredDocumentSet.

        Document set a mandated combination of document types for each proof. This is a reference data field. Please use /v1/utilities/referenceData/{documentIdType} resource to get valid values of this field with descriptions.  # noqa: E501

        :param document_set: The document_set of this RequiredDocumentSet.  # noqa: E501
        :type: str
        """

        self._document_set = document_set

    @property
    def product_code(self):
        """Gets the product_code of this RequiredDocumentSet.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this RequiredDocumentSet.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this RequiredDocumentSet.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this RequiredDocumentSet.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def proof_type(self):
        """Gets the proof_type of this RequiredDocumentSet.  # noqa: E501

        Type of document. This is a reference data field. Please use /v1/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.  # noqa: E501

        :return: The proof_type of this RequiredDocumentSet.  # noqa: E501
        :rtype: str
        """
        return self._proof_type

    @proof_type.setter
    def proof_type(self, proof_type):
        """Sets the proof_type of this RequiredDocumentSet.

        Type of document. This is a reference data field. Please use /v1/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.  # noqa: E501

        :param proof_type: The proof_type of this RequiredDocumentSet.  # noqa: E501
        :type: str
        """

        self._proof_type = proof_type

    @property
    def applicant_type(self):
        """Gets the applicant_type of this RequiredDocumentSet.  # noqa: E501

        Applicant relationship with the Bank. Currently supported value is primary.This is a reference data data field. Please use /v1/utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions  # noqa: E501

        :return: The applicant_type of this RequiredDocumentSet.  # noqa: E501
        :rtype: str
        """
        return self._applicant_type

    @applicant_type.setter
    def applicant_type(self, applicant_type):
        """Sets the applicant_type of this RequiredDocumentSet.

        Applicant relationship with the Bank. Currently supported value is primary.This is a reference data data field. Please use /v1/utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions  # noqa: E501

        :param applicant_type: The applicant_type of this RequiredDocumentSet.  # noqa: E501
        :type: str
        """

        self._applicant_type = applicant_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequiredDocumentSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequiredDocumentSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
