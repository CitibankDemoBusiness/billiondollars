# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Interest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_group': 'str',
        'campaign_id': 'str',
        'wave_id': 'str'
    }

    attribute_map = {
        'product_group': 'productGroup',
        'campaign_id': 'campaignId',
        'wave_id': 'waveId'
    }

    def __init__(self, product_group=None, campaign_id=None, wave_id=None):  # noqa: E501
        """Interest - a model defined in Swagger"""  # noqa: E501
        self._product_group = None
        self._campaign_id = None
        self._wave_id = None
        self.discriminator = None
        self.product_group = product_group
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if wave_id is not None:
            self.wave_id = wave_id

    @property
    def product_group(self):
        """Gets the product_group of this Interest.  # noqa: E501

        A unique code that identifies the product group. This is prospect selected product  # noqa: E501

        :return: The product_group of this Interest.  # noqa: E501
        :rtype: str
        """
        return self._product_group

    @product_group.setter
    def product_group(self, product_group):
        """Sets the product_group of this Interest.

        A unique code that identifies the product group. This is prospect selected product  # noqa: E501

        :param product_group: The product_group of this Interest.  # noqa: E501
        :type: str
        """
        if product_group is None:
            raise ValueError("Invalid value for `product_group`, must not be `None`")  # noqa: E501

        self._product_group = product_group

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Interest.  # noqa: E501

        Campaign Id. The unique identifier for campaign.  # noqa: E501

        :return: The campaign_id of this Interest.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Interest.

        Campaign Id. The unique identifier for campaign.  # noqa: E501

        :param campaign_id: The campaign_id of this Interest.  # noqa: E501
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def wave_id(self):
        """Gets the wave_id of this Interest.  # noqa: E501

        Wave Id corresponding to campaign.  # noqa: E501

        :return: The wave_id of this Interest.  # noqa: E501
        :rtype: str
        """
        return self._wave_id

    @wave_id.setter
    def wave_id(self, wave_id):
        """Sets the wave_id of this Interest.

        Wave Id corresponding to campaign.  # noqa: E501

        :param wave_id: The wave_id of this Interest.  # noqa: E501
        :type: str
        """

        self._wave_id = wave_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Interest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
