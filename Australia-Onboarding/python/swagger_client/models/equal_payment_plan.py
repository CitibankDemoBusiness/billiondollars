# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EqualPaymentPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenor': 'str',
        'bank_code': 'str',
        'amount_to_transfer': 'float',
        'account_name': 'str',
        'campaign_code': 'str',
        'disbursement_type': 'str',
        'display_account_number': 'str'
    }

    attribute_map = {
        'tenor': 'tenor',
        'bank_code': 'bankCode',
        'amount_to_transfer': 'amountToTransfer',
        'account_name': 'accountName',
        'campaign_code': 'campaignCode',
        'disbursement_type': 'disbursementType',
        'display_account_number': 'displayAccountNumber'
    }

    def __init__(self, tenor=None, bank_code=None, amount_to_transfer=None, account_name=None, campaign_code=None, disbursement_type=None, display_account_number=None):  # noqa: E501
        """EqualPaymentPlan - a model defined in Swagger"""  # noqa: E501
        self._tenor = None
        self._bank_code = None
        self._amount_to_transfer = None
        self._account_name = None
        self._campaign_code = None
        self._disbursement_type = None
        self._display_account_number = None
        self.discriminator = None
        if tenor is not None:
            self.tenor = tenor
        if bank_code is not None:
            self.bank_code = bank_code
        if amount_to_transfer is not None:
            self.amount_to_transfer = amount_to_transfer
        if account_name is not None:
            self.account_name = account_name
        if campaign_code is not None:
            self.campaign_code = campaign_code
        if disbursement_type is not None:
            self.disbursement_type = disbursement_type
        if display_account_number is not None:
            self.display_account_number = display_account_number

    @property
    def tenor(self):
        """Gets the tenor of this EqualPaymentPlan.  # noqa: E501

        Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description.  # noqa: E501

        :return: The tenor of this EqualPaymentPlan.  # noqa: E501
        :rtype: str
        """
        return self._tenor

    @tenor.setter
    def tenor(self, tenor):
        """Sets the tenor of this EqualPaymentPlan.

        Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description.  # noqa: E501

        :param tenor: The tenor of this EqualPaymentPlan.  # noqa: E501
        :type: str
        """

        self._tenor = tenor

    @property
    def bank_code(self):
        """Gets the bank_code of this EqualPaymentPlan.  # noqa: E501

        This field is to indicate the bank code to which the amount will be disbursed.  # noqa: E501

        :return: The bank_code of this EqualPaymentPlan.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this EqualPaymentPlan.

        This field is to indicate the bank code to which the amount will be disbursed.  # noqa: E501

        :param bank_code: The bank_code of this EqualPaymentPlan.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def amount_to_transfer(self):
        """Gets the amount_to_transfer of this EqualPaymentPlan.  # noqa: E501

        Amount to Transfer  # noqa: E501

        :return: The amount_to_transfer of this EqualPaymentPlan.  # noqa: E501
        :rtype: float
        """
        return self._amount_to_transfer

    @amount_to_transfer.setter
    def amount_to_transfer(self, amount_to_transfer):
        """Sets the amount_to_transfer of this EqualPaymentPlan.

        Amount to Transfer  # noqa: E501

        :param amount_to_transfer: The amount_to_transfer of this EqualPaymentPlan.  # noqa: E501
        :type: float
        """

        self._amount_to_transfer = amount_to_transfer

    @property
    def account_name(self):
        """Gets the account_name of this EqualPaymentPlan.  # noqa: E501

        Account name to which the amount will be disbursed  # noqa: E501

        :return: The account_name of this EqualPaymentPlan.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this EqualPaymentPlan.

        Account name to which the amount will be disbursed  # noqa: E501

        :param account_name: The account_name of this EqualPaymentPlan.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def campaign_code(self):
        """Gets the campaign_code of this EqualPaymentPlan.  # noqa: E501

        Code of the campaign offered to the channel.  # noqa: E501

        :return: The campaign_code of this EqualPaymentPlan.  # noqa: E501
        :rtype: str
        """
        return self._campaign_code

    @campaign_code.setter
    def campaign_code(self, campaign_code):
        """Sets the campaign_code of this EqualPaymentPlan.

        Code of the campaign offered to the channel.  # noqa: E501

        :param campaign_code: The campaign_code of this EqualPaymentPlan.  # noqa: E501
        :type: str
        """

        self._campaign_code = campaign_code

    @property
    def disbursement_type(self):
        """Gets the disbursement_type of this EqualPaymentPlan.  # noqa: E501

        DisbursementType . This is a reference data field. Please use /v1/utilities/referenceData/{DisbursementOption} resource to get valid value of this field with description.  # noqa: E501

        :return: The disbursement_type of this EqualPaymentPlan.  # noqa: E501
        :rtype: str
        """
        return self._disbursement_type

    @disbursement_type.setter
    def disbursement_type(self, disbursement_type):
        """Sets the disbursement_type of this EqualPaymentPlan.

        DisbursementType . This is a reference data field. Please use /v1/utilities/referenceData/{DisbursementOption} resource to get valid value of this field with description.  # noqa: E501

        :param disbursement_type: The disbursement_type of this EqualPaymentPlan.  # noqa: E501
        :type: str
        """

        self._disbursement_type = disbursement_type

    @property
    def display_account_number(self):
        """Gets the display_account_number of this EqualPaymentPlan.  # noqa: E501

        Masked account number or reference to which the amount will be disbursed  # noqa: E501

        :return: The display_account_number of this EqualPaymentPlan.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this EqualPaymentPlan.

        Masked account number or reference to which the amount will be disbursed  # noqa: E501

        :param display_account_number: The display_account_number of this EqualPaymentPlan.  # noqa: E501
        :type: str
        """

        self._display_account_number = display_account_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EqualPaymentPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EqualPaymentPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
