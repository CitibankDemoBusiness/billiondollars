# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicantInquiryDemographics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gender': 'str',
        'date_of_birth': 'date',
        'place_of_birth': 'str',
        'country_of_birth': 'str',
        'nationality': 'str',
        'marital_status': 'str',
        'residential_status': 'str'
    }

    attribute_map = {
        'gender': 'gender',
        'date_of_birth': 'dateOfBirth',
        'place_of_birth': 'placeOfBirth',
        'country_of_birth': 'countryOfBirth',
        'nationality': 'nationality',
        'marital_status': 'maritalStatus',
        'residential_status': 'residentialStatus'
    }

    def __init__(self, gender=None, date_of_birth=None, place_of_birth=None, country_of_birth=None, nationality=None, marital_status=None, residential_status=None):  # noqa: E501
        """ApplicantInquiryDemographics - a model defined in Swagger"""  # noqa: E501
        self._gender = None
        self._date_of_birth = None
        self._place_of_birth = None
        self._country_of_birth = None
        self._nationality = None
        self._marital_status = None
        self._residential_status = None
        self.discriminator = None
        if gender is not None:
            self.gender = gender
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if place_of_birth is not None:
            self.place_of_birth = place_of_birth
        if country_of_birth is not None:
            self.country_of_birth = country_of_birth
        if nationality is not None:
            self.nationality = nationality
        if marital_status is not None:
            self.marital_status = marital_status
        if residential_status is not None:
            self.residential_status = residential_status

    @property
    def gender(self):
        """Gets the gender of this ApplicantInquiryDemographics.  # noqa: E501

        Gender/sex. This is a reference data field. Please use /v1/apac/utilities/referenceData/{gender} resource to get valid value of this field with description. You can use gender field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The gender of this ApplicantInquiryDemographics.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ApplicantInquiryDemographics.

        Gender/sex. This is a reference data field. Please use /v1/apac/utilities/referenceData/{gender} resource to get valid value of this field with description. You can use gender field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param gender: The gender of this ApplicantInquiryDemographics.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ApplicantInquiryDemographics.  # noqa: E501

        Applicant's date of birth in  ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The date_of_birth of this ApplicantInquiryDemographics.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ApplicantInquiryDemographics.

        Applicant's date of birth in  ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param date_of_birth: The date_of_birth of this ApplicantInquiryDemographics.  # noqa: E501
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this ApplicantInquiryDemographics.  # noqa: E501

        Applicant's place of birth  # noqa: E501

        :return: The place_of_birth of this ApplicantInquiryDemographics.  # noqa: E501
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this ApplicantInquiryDemographics.

        Applicant's place of birth  # noqa: E501

        :param place_of_birth: The place_of_birth of this ApplicantInquiryDemographics.  # noqa: E501
        :type: str
        """

        self._place_of_birth = place_of_birth

    @property
    def country_of_birth(self):
        """Gets the country_of_birth of this ApplicantInquiryDemographics.  # noqa: E501

        Applicant's Country of birth. This is a reference data field. Please use /utilities/referenceData/{country} resource to get valid values of this field with descriptions. You can use the countryOfBirth as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The country_of_birth of this ApplicantInquiryDemographics.  # noqa: E501
        :rtype: str
        """
        return self._country_of_birth

    @country_of_birth.setter
    def country_of_birth(self, country_of_birth):
        """Sets the country_of_birth of this ApplicantInquiryDemographics.

        Applicant's Country of birth. This is a reference data field. Please use /utilities/referenceData/{country} resource to get valid values of this field with descriptions. You can use the countryOfBirth as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param country_of_birth: The country_of_birth of this ApplicantInquiryDemographics.  # noqa: E501
        :type: str
        """

        self._country_of_birth = country_of_birth

    @property
    def nationality(self):
        """Gets the nationality of this ApplicantInquiryDemographics.  # noqa: E501

        Applicant's nationality. This is a reference data field. Please use /v1/apac/utilities/referenceData/{country} resource to get valid value of this field with description. You can use nationality field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The nationality of this ApplicantInquiryDemographics.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this ApplicantInquiryDemographics.

        Applicant's nationality. This is a reference data field. Please use /v1/apac/utilities/referenceData/{country} resource to get valid value of this field with description. You can use nationality field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param nationality: The nationality of this ApplicantInquiryDemographics.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def marital_status(self):
        """Gets the marital_status of this ApplicantInquiryDemographics.  # noqa: E501

        Applicant's marital status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{maritalStatus} resource to get valid value of this field with description. You can use maritalStatus field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The marital_status of this ApplicantInquiryDemographics.  # noqa: E501
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this ApplicantInquiryDemographics.

        Applicant's marital status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{maritalStatus} resource to get valid value of this field with description. You can use maritalStatus field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param marital_status: The marital_status of this ApplicantInquiryDemographics.  # noqa: E501
        :type: str
        """

        self._marital_status = marital_status

    @property
    def residential_status(self):
        """Gets the residential_status of this ApplicantInquiryDemographics.  # noqa: E501

        Indicate status of residence. This is a reference data field. Please use /v1/apac/utilities/referenceData/{residenceStatus} resource to get valid value of this field with description. You can use residenceStatus field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The residential_status of this ApplicantInquiryDemographics.  # noqa: E501
        :rtype: str
        """
        return self._residential_status

    @residential_status.setter
    def residential_status(self, residential_status):
        """Sets the residential_status of this ApplicantInquiryDemographics.

        Indicate status of residence. This is a reference data field. Please use /v1/apac/utilities/referenceData/{residenceStatus} resource to get valid value of this field with description. You can use residenceStatus field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param residential_status: The residential_status of this ApplicantInquiryDemographics.  # noqa: E501
        :type: str
        """

        self._residential_status = residential_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantInquiryDemographics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantInquiryDemographics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
