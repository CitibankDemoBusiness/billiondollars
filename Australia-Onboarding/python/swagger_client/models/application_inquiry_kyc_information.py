# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationInquiryKycInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'self_public_figure_declaration_flag': 'bool',
        'public_figure_office_status': 'str',
        'public_figure_office_details': 'str',
        'public_figure_office_start_date': 'date',
        'public_figure_office_end_date': 'date',
        'is_related_to_senior_public_figure': 'bool',
        'related_senior_public_figure_name': 'str',
        'related_senior_public_figure_designation': 'str',
        'related_spf_country_of_government': 'str',
        'related_senior_public_figure_department': 'str',
        'relationship_with_senior_public_figure': 'str',
        'related_senior_public_figure_last_name': 'str',
        'us_tax_status': 'str',
        'us_tax_id': 'str'
    }

    attribute_map = {
        'self_public_figure_declaration_flag': 'selfPublicFigureDeclarationFlag',
        'public_figure_office_status': 'publicFigureOfficeStatus',
        'public_figure_office_details': 'publicFigureOfficeDetails',
        'public_figure_office_start_date': 'publicFigureOfficeStartDate',
        'public_figure_office_end_date': 'publicFigureOfficeEndDate',
        'is_related_to_senior_public_figure': 'isRelatedToSeniorPublicFigure',
        'related_senior_public_figure_name': 'relatedSeniorPublicFigureName',
        'related_senior_public_figure_designation': 'relatedSeniorPublicFigureDesignation',
        'related_spf_country_of_government': 'relatedSpfCountryOfGovernment',
        'related_senior_public_figure_department': 'relatedSeniorPublicFigureDepartment',
        'relationship_with_senior_public_figure': 'relationshipWithSeniorPublicFigure',
        'related_senior_public_figure_last_name': 'relatedSeniorPublicFigureLastName',
        'us_tax_status': 'usTaxStatus',
        'us_tax_id': 'usTaxId'
    }

    def __init__(self, self_public_figure_declaration_flag=None, public_figure_office_status=None, public_figure_office_details=None, public_figure_office_start_date=None, public_figure_office_end_date=None, is_related_to_senior_public_figure=None, related_senior_public_figure_name=None, related_senior_public_figure_designation=None, related_spf_country_of_government=None, related_senior_public_figure_department=None, relationship_with_senior_public_figure=None, related_senior_public_figure_last_name=None, us_tax_status=None, us_tax_id=None):  # noqa: E501
        """ApplicationInquiryKycInformation - a model defined in Swagger"""  # noqa: E501
        self._self_public_figure_declaration_flag = None
        self._public_figure_office_status = None
        self._public_figure_office_details = None
        self._public_figure_office_start_date = None
        self._public_figure_office_end_date = None
        self._is_related_to_senior_public_figure = None
        self._related_senior_public_figure_name = None
        self._related_senior_public_figure_designation = None
        self._related_spf_country_of_government = None
        self._related_senior_public_figure_department = None
        self._relationship_with_senior_public_figure = None
        self._related_senior_public_figure_last_name = None
        self._us_tax_status = None
        self._us_tax_id = None
        self.discriminator = None
        if self_public_figure_declaration_flag is not None:
            self.self_public_figure_declaration_flag = self_public_figure_declaration_flag
        if public_figure_office_status is not None:
            self.public_figure_office_status = public_figure_office_status
        if public_figure_office_details is not None:
            self.public_figure_office_details = public_figure_office_details
        if public_figure_office_start_date is not None:
            self.public_figure_office_start_date = public_figure_office_start_date
        if public_figure_office_end_date is not None:
            self.public_figure_office_end_date = public_figure_office_end_date
        if is_related_to_senior_public_figure is not None:
            self.is_related_to_senior_public_figure = is_related_to_senior_public_figure
        if related_senior_public_figure_name is not None:
            self.related_senior_public_figure_name = related_senior_public_figure_name
        if related_senior_public_figure_designation is not None:
            self.related_senior_public_figure_designation = related_senior_public_figure_designation
        if related_spf_country_of_government is not None:
            self.related_spf_country_of_government = related_spf_country_of_government
        if related_senior_public_figure_department is not None:
            self.related_senior_public_figure_department = related_senior_public_figure_department
        if relationship_with_senior_public_figure is not None:
            self.relationship_with_senior_public_figure = relationship_with_senior_public_figure
        if related_senior_public_figure_last_name is not None:
            self.related_senior_public_figure_last_name = related_senior_public_figure_last_name
        if us_tax_status is not None:
            self.us_tax_status = us_tax_status
        if us_tax_id is not None:
            self.us_tax_id = us_tax_id

    @property
    def self_public_figure_declaration_flag(self):
        """Gets the self_public_figure_declaration_flag of this ApplicationInquiryKycInformation.  # noqa: E501

        Flag for self declaration if applicant is public figure. Valid values: true and false  # noqa: E501

        :return: The self_public_figure_declaration_flag of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: bool
        """
        return self._self_public_figure_declaration_flag

    @self_public_figure_declaration_flag.setter
    def self_public_figure_declaration_flag(self, self_public_figure_declaration_flag):
        """Sets the self_public_figure_declaration_flag of this ApplicationInquiryKycInformation.

        Flag for self declaration if applicant is public figure. Valid values: true and false  # noqa: E501

        :param self_public_figure_declaration_flag: The self_public_figure_declaration_flag of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: bool
        """

        self._self_public_figure_declaration_flag = self_public_figure_declaration_flag

    @property
    def public_figure_office_status(self):
        """Gets the public_figure_office_status of this ApplicationInquiryKycInformation.  # noqa: E501

        Flag for status of public office if applicant is public figure  # noqa: E501

        :return: The public_figure_office_status of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._public_figure_office_status

    @public_figure_office_status.setter
    def public_figure_office_status(self, public_figure_office_status):
        """Sets the public_figure_office_status of this ApplicationInquiryKycInformation.

        Flag for status of public office if applicant is public figure  # noqa: E501

        :param public_figure_office_status: The public_figure_office_status of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._public_figure_office_status = public_figure_office_status

    @property
    def public_figure_office_details(self):
        """Gets the public_figure_office_details of this ApplicationInquiryKycInformation.  # noqa: E501

        Office details if applicant is public figure  # noqa: E501

        :return: The public_figure_office_details of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._public_figure_office_details

    @public_figure_office_details.setter
    def public_figure_office_details(self, public_figure_office_details):
        """Sets the public_figure_office_details of this ApplicationInquiryKycInformation.

        Office details if applicant is public figure  # noqa: E501

        :param public_figure_office_details: The public_figure_office_details of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._public_figure_office_details = public_figure_office_details

    @property
    def public_figure_office_start_date(self):
        """Gets the public_figure_office_start_date of this ApplicationInquiryKycInformation.  # noqa: E501

        Public figure office start date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The public_figure_office_start_date of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: date
        """
        return self._public_figure_office_start_date

    @public_figure_office_start_date.setter
    def public_figure_office_start_date(self, public_figure_office_start_date):
        """Sets the public_figure_office_start_date of this ApplicationInquiryKycInformation.

        Public figure office start date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param public_figure_office_start_date: The public_figure_office_start_date of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: date
        """

        self._public_figure_office_start_date = public_figure_office_start_date

    @property
    def public_figure_office_end_date(self):
        """Gets the public_figure_office_end_date of this ApplicationInquiryKycInformation.  # noqa: E501

        Public figure office end date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The public_figure_office_end_date of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: date
        """
        return self._public_figure_office_end_date

    @public_figure_office_end_date.setter
    def public_figure_office_end_date(self, public_figure_office_end_date):
        """Sets the public_figure_office_end_date of this ApplicationInquiryKycInformation.

        Public figure office end date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param public_figure_office_end_date: The public_figure_office_end_date of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: date
        """

        self._public_figure_office_end_date = public_figure_office_end_date

    @property
    def is_related_to_senior_public_figure(self):
        """Gets the is_related_to_senior_public_figure of this ApplicationInquiryKycInformation.  # noqa: E501

        Self declaration if applicant has any relation with senior public figure. Valid values: true and false  # noqa: E501

        :return: The is_related_to_senior_public_figure of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_related_to_senior_public_figure

    @is_related_to_senior_public_figure.setter
    def is_related_to_senior_public_figure(self, is_related_to_senior_public_figure):
        """Sets the is_related_to_senior_public_figure of this ApplicationInquiryKycInformation.

        Self declaration if applicant has any relation with senior public figure. Valid values: true and false  # noqa: E501

        :param is_related_to_senior_public_figure: The is_related_to_senior_public_figure of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: bool
        """

        self._is_related_to_senior_public_figure = is_related_to_senior_public_figure

    @property
    def related_senior_public_figure_name(self):
        """Gets the related_senior_public_figure_name of this ApplicationInquiryKycInformation.  # noqa: E501

        Senior Public Figure Name  # noqa: E501

        :return: The related_senior_public_figure_name of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._related_senior_public_figure_name

    @related_senior_public_figure_name.setter
    def related_senior_public_figure_name(self, related_senior_public_figure_name):
        """Sets the related_senior_public_figure_name of this ApplicationInquiryKycInformation.

        Senior Public Figure Name  # noqa: E501

        :param related_senior_public_figure_name: The related_senior_public_figure_name of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._related_senior_public_figure_name = related_senior_public_figure_name

    @property
    def related_senior_public_figure_designation(self):
        """Gets the related_senior_public_figure_designation of this ApplicationInquiryKycInformation.  # noqa: E501

        Public figure designation.  # noqa: E501

        :return: The related_senior_public_figure_designation of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._related_senior_public_figure_designation

    @related_senior_public_figure_designation.setter
    def related_senior_public_figure_designation(self, related_senior_public_figure_designation):
        """Sets the related_senior_public_figure_designation of this ApplicationInquiryKycInformation.

        Public figure designation.  # noqa: E501

        :param related_senior_public_figure_designation: The related_senior_public_figure_designation of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._related_senior_public_figure_designation = related_senior_public_figure_designation

    @property
    def related_spf_country_of_government(self):
        """Gets the related_spf_country_of_government of this ApplicationInquiryKycInformation.  # noqa: E501

        Senior Public Figure Country of Government  # noqa: E501

        :return: The related_spf_country_of_government of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._related_spf_country_of_government

    @related_spf_country_of_government.setter
    def related_spf_country_of_government(self, related_spf_country_of_government):
        """Sets the related_spf_country_of_government of this ApplicationInquiryKycInformation.

        Senior Public Figure Country of Government  # noqa: E501

        :param related_spf_country_of_government: The related_spf_country_of_government of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._related_spf_country_of_government = related_spf_country_of_government

    @property
    def related_senior_public_figure_department(self):
        """Gets the related_senior_public_figure_department of this ApplicationInquiryKycInformation.  # noqa: E501

        Department Senior Public Figure belongs to  # noqa: E501

        :return: The related_senior_public_figure_department of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._related_senior_public_figure_department

    @related_senior_public_figure_department.setter
    def related_senior_public_figure_department(self, related_senior_public_figure_department):
        """Sets the related_senior_public_figure_department of this ApplicationInquiryKycInformation.

        Department Senior Public Figure belongs to  # noqa: E501

        :param related_senior_public_figure_department: The related_senior_public_figure_department of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._related_senior_public_figure_department = related_senior_public_figure_department

    @property
    def relationship_with_senior_public_figure(self):
        """Gets the relationship_with_senior_public_figure of this ApplicationInquiryKycInformation.  # noqa: E501

        Senior Public Figure relationship with applicant  # noqa: E501

        :return: The relationship_with_senior_public_figure of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._relationship_with_senior_public_figure

    @relationship_with_senior_public_figure.setter
    def relationship_with_senior_public_figure(self, relationship_with_senior_public_figure):
        """Sets the relationship_with_senior_public_figure of this ApplicationInquiryKycInformation.

        Senior Public Figure relationship with applicant  # noqa: E501

        :param relationship_with_senior_public_figure: The relationship_with_senior_public_figure of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._relationship_with_senior_public_figure = relationship_with_senior_public_figure

    @property
    def related_senior_public_figure_last_name(self):
        """Gets the related_senior_public_figure_last_name of this ApplicationInquiryKycInformation.  # noqa: E501

        Senior Public Figure Last Name  # noqa: E501

        :return: The related_senior_public_figure_last_name of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._related_senior_public_figure_last_name

    @related_senior_public_figure_last_name.setter
    def related_senior_public_figure_last_name(self, related_senior_public_figure_last_name):
        """Sets the related_senior_public_figure_last_name of this ApplicationInquiryKycInformation.

        Senior Public Figure Last Name  # noqa: E501

        :param related_senior_public_figure_last_name: The related_senior_public_figure_last_name of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._related_senior_public_figure_last_name = related_senior_public_figure_last_name

    @property
    def us_tax_status(self):
        """Gets the us_tax_status of this ApplicationInquiryKycInformation.  # noqa: E501

        US Tax status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{usTaxStatus} resource to get valid value of this field with description. You can use usTaxStatus field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The us_tax_status of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._us_tax_status

    @us_tax_status.setter
    def us_tax_status(self, us_tax_status):
        """Sets the us_tax_status of this ApplicationInquiryKycInformation.

        US Tax status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{usTaxStatus} resource to get valid value of this field with description. You can use usTaxStatus field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param us_tax_status: The us_tax_status of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._us_tax_status = us_tax_status

    @property
    def us_tax_id(self):
        """Gets the us_tax_id of this ApplicationInquiryKycInformation.  # noqa: E501

        US Tax ID  # noqa: E501

        :return: The us_tax_id of this ApplicationInquiryKycInformation.  # noqa: E501
        :rtype: str
        """
        return self._us_tax_id

    @us_tax_id.setter
    def us_tax_id(self, us_tax_id):
        """Sets the us_tax_id of this ApplicationInquiryKycInformation.

        US Tax ID  # noqa: E501

        :param us_tax_id: The us_tax_id of this ApplicationInquiryKycInformation.  # noqa: E501
        :type: str
        """

        self._us_tax_id = us_tax_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationInquiryKycInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationInquiryKycInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
