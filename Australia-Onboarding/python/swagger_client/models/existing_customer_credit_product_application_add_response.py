# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExistingCustomerCreditProductApplicationAddResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'application_stage': 'str',
        'survivor_line_required_flag': 'bool',
        'existing_credit_limit': 'float',
        'display_applicant_details': 'DisplayApplicantDetails',
        'control_flow_id': 'str'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'application_stage': 'applicationStage',
        'survivor_line_required_flag': 'survivorLineRequiredFlag',
        'existing_credit_limit': 'existingCreditLimit',
        'display_applicant_details': 'displayApplicantDetails',
        'control_flow_id': 'controlFlowId'
    }

    def __init__(self, application_id=None, application_stage=None, survivor_line_required_flag=None, existing_credit_limit=None, display_applicant_details=None, control_flow_id=None):  # noqa: E501
        """ExistingCustomerCreditProductApplicationAddResponse - a model defined in Swagger"""  # noqa: E501
        self._application_id = None
        self._application_stage = None
        self._survivor_line_required_flag = None
        self._existing_credit_limit = None
        self._display_applicant_details = None
        self._control_flow_id = None
        self.discriminator = None
        self.application_id = application_id
        self.application_stage = application_stage
        if survivor_line_required_flag is not None:
            self.survivor_line_required_flag = survivor_line_required_flag
        if existing_credit_limit is not None:
            self.existing_credit_limit = existing_credit_limit
        self.display_applicant_details = display_applicant_details
        if control_flow_id is not None:
            self.control_flow_id = control_flow_id

    @property
    def application_id(self):
        """Gets the application_id of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501

        Unique identifier for the application  # noqa: E501

        :return: The application_id of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ExistingCustomerCreditProductApplicationAddResponse.

        Unique identifier for the application  # noqa: E501

        :param application_id: The application_id of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :type: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def application_stage(self):
        """Gets the application_stage of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501

        Application stage of an Application  # noqa: E501

        :return: The application_stage of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :rtype: str
        """
        return self._application_stage

    @application_stage.setter
    def application_stage(self, application_stage):
        """Sets the application_stage of this ExistingCustomerCreditProductApplicationAddResponse.

        Application stage of an Application  # noqa: E501

        :param application_stage: The application_stage of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :type: str
        """
        if application_stage is None:
            raise ValueError("Invalid value for `application_stage`, must not be `None`")  # noqa: E501

        self._application_stage = application_stage

    @property
    def survivor_line_required_flag(self):
        """Gets the survivor_line_required_flag of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501

        This indicates whether customer requires a Survivor Line product (Credit Card) or not. Valid values: true and false  # noqa: E501

        :return: The survivor_line_required_flag of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :rtype: bool
        """
        return self._survivor_line_required_flag

    @survivor_line_required_flag.setter
    def survivor_line_required_flag(self, survivor_line_required_flag):
        """Sets the survivor_line_required_flag of this ExistingCustomerCreditProductApplicationAddResponse.

        This indicates whether customer requires a Survivor Line product (Credit Card) or not. Valid values: true and false  # noqa: E501

        :param survivor_line_required_flag: The survivor_line_required_flag of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :type: bool
        """

        self._survivor_line_required_flag = survivor_line_required_flag

    @property
    def existing_credit_limit(self):
        """Gets the existing_credit_limit of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501

        Credit limit of customer for the existing credit card  # noqa: E501

        :return: The existing_credit_limit of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :rtype: float
        """
        return self._existing_credit_limit

    @existing_credit_limit.setter
    def existing_credit_limit(self, existing_credit_limit):
        """Sets the existing_credit_limit of this ExistingCustomerCreditProductApplicationAddResponse.

        Credit limit of customer for the existing credit card  # noqa: E501

        :param existing_credit_limit: The existing_credit_limit of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :type: float
        """

        self._existing_credit_limit = existing_credit_limit

    @property
    def display_applicant_details(self):
        """Gets the display_applicant_details of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501


        :return: The display_applicant_details of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :rtype: DisplayApplicantDetails
        """
        return self._display_applicant_details

    @display_applicant_details.setter
    def display_applicant_details(self, display_applicant_details):
        """Sets the display_applicant_details of this ExistingCustomerCreditProductApplicationAddResponse.


        :param display_applicant_details: The display_applicant_details of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :type: DisplayApplicantDetails
        """
        if display_applicant_details is None:
            raise ValueError("Invalid value for `display_applicant_details`, must not be `None`")  # noqa: E501

        self._display_applicant_details = display_applicant_details

    @property
    def control_flow_id(self):
        """Gets the control_flow_id of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501

        Control flow id is used to control the flow for subsequent requests in the session.  # noqa: E501

        :return: The control_flow_id of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :rtype: str
        """
        return self._control_flow_id

    @control_flow_id.setter
    def control_flow_id(self, control_flow_id):
        """Sets the control_flow_id of this ExistingCustomerCreditProductApplicationAddResponse.

        Control flow id is used to control the flow for subsequent requests in the session.  # noqa: E501

        :param control_flow_id: The control_flow_id of this ExistingCustomerCreditProductApplicationAddResponse.  # noqa: E501
        :type: str
        """

        self._control_flow_id = control_flow_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExistingCustomerCreditProductApplicationAddResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExistingCustomerCreditProductApplicationAddResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
