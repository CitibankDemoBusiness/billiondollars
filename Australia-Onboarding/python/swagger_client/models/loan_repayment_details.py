# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanRepaymentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_amount': 'float',
        'loan_repayment_method': 'str',
        'payment_account_number': 'str',
        'account_reference_key': 'str',
        'account_nick_name': 'str',
        'bank_details': 'BankDetails'
    }

    attribute_map = {
        'loan_amount': 'loanAmount',
        'loan_repayment_method': 'loanRepaymentMethod',
        'payment_account_number': 'paymentAccountNumber',
        'account_reference_key': 'accountReferenceKey',
        'account_nick_name': 'accountNickName',
        'bank_details': 'bankDetails'
    }

    def __init__(self, loan_amount=None, loan_repayment_method=None, payment_account_number=None, account_reference_key=None, account_nick_name=None, bank_details=None):  # noqa: E501
        """LoanRepaymentDetails - a model defined in Swagger"""  # noqa: E501
        self._loan_amount = None
        self._loan_repayment_method = None
        self._payment_account_number = None
        self._account_reference_key = None
        self._account_nick_name = None
        self._bank_details = None
        self.discriminator = None
        if loan_amount is not None:
            self.loan_amount = loan_amount
        if loan_repayment_method is not None:
            self.loan_repayment_method = loan_repayment_method
        if payment_account_number is not None:
            self.payment_account_number = payment_account_number
        if account_reference_key is not None:
            self.account_reference_key = account_reference_key
        if account_nick_name is not None:
            self.account_nick_name = account_nick_name
        if bank_details is not None:
            self.bank_details = bank_details

    @property
    def loan_amount(self):
        """Gets the loan_amount of this LoanRepaymentDetails.  # noqa: E501

        Requested disbursement amount  # noqa: E501

        :return: The loan_amount of this LoanRepaymentDetails.  # noqa: E501
        :rtype: float
        """
        return self._loan_amount

    @loan_amount.setter
    def loan_amount(self, loan_amount):
        """Sets the loan_amount of this LoanRepaymentDetails.

        Requested disbursement amount  # noqa: E501

        :param loan_amount: The loan_amount of this LoanRepaymentDetails.  # noqa: E501
        :type: float
        """

        self._loan_amount = loan_amount

    @property
    def loan_repayment_method(self):
        """Gets the loan_repayment_method of this LoanRepaymentDetails.  # noqa: E501

        Loan repayment method for the unsecured loan selected by the applicant Ex:SI,PDC,UAE Exchange,Direct Debit,Manual Direct Debit Please use /v1/utilities/referenceData/{loanRepaymentMethod} resource to get valid value of this field with description.  # noqa: E501

        :return: The loan_repayment_method of this LoanRepaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._loan_repayment_method

    @loan_repayment_method.setter
    def loan_repayment_method(self, loan_repayment_method):
        """Sets the loan_repayment_method of this LoanRepaymentDetails.

        Loan repayment method for the unsecured loan selected by the applicant Ex:SI,PDC,UAE Exchange,Direct Debit,Manual Direct Debit Please use /v1/utilities/referenceData/{loanRepaymentMethod} resource to get valid value of this field with description.  # noqa: E501

        :param loan_repayment_method: The loan_repayment_method of this LoanRepaymentDetails.  # noqa: E501
        :type: str
        """

        self._loan_repayment_method = loan_repayment_method

    @property
    def payment_account_number(self):
        """Gets the payment_account_number of this LoanRepaymentDetails.  # noqa: E501

        Payment account number associated with the bank   through which the loan repayment is carried out  by the applicant  # noqa: E501

        :return: The payment_account_number of this LoanRepaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._payment_account_number

    @payment_account_number.setter
    def payment_account_number(self, payment_account_number):
        """Sets the payment_account_number of this LoanRepaymentDetails.

        Payment account number associated with the bank   through which the loan repayment is carried out  by the applicant  # noqa: E501

        :param payment_account_number: The payment_account_number of this LoanRepaymentDetails.  # noqa: E501
        :type: str
        """

        self._payment_account_number = payment_account_number

    @property
    def account_reference_key(self):
        """Gets the account_reference_key of this LoanRepaymentDetails.  # noqa: E501

        Account reference key to link account in a customer session,  # noqa: E501

        :return: The account_reference_key of this LoanRepaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_reference_key

    @account_reference_key.setter
    def account_reference_key(self, account_reference_key):
        """Sets the account_reference_key of this LoanRepaymentDetails.

        Account reference key to link account in a customer session,  # noqa: E501

        :param account_reference_key: The account_reference_key of this LoanRepaymentDetails.  # noqa: E501
        :type: str
        """

        self._account_reference_key = account_reference_key

    @property
    def account_nick_name(self):
        """Gets the account_nick_name of this LoanRepaymentDetails.  # noqa: E501

        The nick name of the account assigned by the customer  # noqa: E501

        :return: The account_nick_name of this LoanRepaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_nick_name

    @account_nick_name.setter
    def account_nick_name(self, account_nick_name):
        """Sets the account_nick_name of this LoanRepaymentDetails.

        The nick name of the account assigned by the customer  # noqa: E501

        :param account_nick_name: The account_nick_name of this LoanRepaymentDetails.  # noqa: E501
        :type: str
        """

        self._account_nick_name = account_nick_name

    @property
    def bank_details(self):
        """Gets the bank_details of this LoanRepaymentDetails.  # noqa: E501


        :return: The bank_details of this LoanRepaymentDetails.  # noqa: E501
        :rtype: BankDetails
        """
        return self._bank_details

    @bank_details.setter
    def bank_details(self, bank_details):
        """Sets the bank_details of this LoanRepaymentDetails.


        :param bank_details: The bank_details of this LoanRepaymentDetails.  # noqa: E501
        :type: BankDetails
        """

        self._bank_details = bank_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanRepaymentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanRepaymentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
