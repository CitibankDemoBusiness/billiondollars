# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RetrieveApplicationProcessingPartnerMembershipApplicationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'applicant': 'Applicant',
        'application_stage': 'str',
        'control_flow_id': 'str',
        'provider_info': 'list[ProviderInfo]'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'applicant': 'applicant',
        'application_stage': 'applicationStage',
        'control_flow_id': 'controlFlowId',
        'provider_info': 'providerInfo'
    }

    def __init__(self, application_id=None, applicant=None, application_stage=None, control_flow_id=None, provider_info=None):  # noqa: E501
        """RetrieveApplicationProcessingPartnerMembershipApplicationResponse - a model defined in Swagger"""  # noqa: E501
        self._application_id = None
        self._applicant = None
        self._application_stage = None
        self._control_flow_id = None
        self._provider_info = None
        self.discriminator = None
        if application_id is not None:
            self.application_id = application_id
        if applicant is not None:
            self.applicant = applicant
        if application_stage is not None:
            self.application_stage = application_stage
        if control_flow_id is not None:
            self.control_flow_id = control_flow_id
        if provider_info is not None:
            self.provider_info = provider_info

    @property
    def application_id(self):
        """Gets the application_id of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501

        Unique identifier for the application  # noqa: E501

        :return: The application_id of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.

        Unique identifier for the application  # noqa: E501

        :param application_id: The application_id of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def applicant(self):
        """Gets the applicant of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501


        :return: The applicant of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :rtype: Applicant
        """
        return self._applicant

    @applicant.setter
    def applicant(self, applicant):
        """Sets the applicant of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.


        :param applicant: The applicant of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :type: Applicant
        """

        self._applicant = applicant

    @property
    def application_stage(self):
        """Gets the application_stage of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501

        Application Stage  # noqa: E501

        :return: The application_stage of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :rtype: str
        """
        return self._application_stage

    @application_stage.setter
    def application_stage(self, application_stage):
        """Sets the application_stage of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.

        Application Stage  # noqa: E501

        :param application_stage: The application_stage of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :type: str
        """

        self._application_stage = application_stage

    @property
    def control_flow_id(self):
        """Gets the control_flow_id of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501

        Control flow id is used to control the flow for subsequent requests in the session.  # noqa: E501

        :return: The control_flow_id of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :rtype: str
        """
        return self._control_flow_id

    @control_flow_id.setter
    def control_flow_id(self, control_flow_id):
        """Sets the control_flow_id of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.

        Control flow id is used to control the flow for subsequent requests in the session.  # noqa: E501

        :param control_flow_id: The control_flow_id of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :type: str
        """

        self._control_flow_id = control_flow_id

    @property
    def provider_info(self):
        """Gets the provider_info of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501


        :return: The provider_info of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :rtype: list[ProviderInfo]
        """
        return self._provider_info

    @provider_info.setter
    def provider_info(self, provider_info):
        """Sets the provider_info of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.


        :param provider_info: The provider_info of this RetrieveApplicationProcessingPartnerMembershipApplicationResponse.  # noqa: E501
        :type: list[ProviderInfo]
        """

        self._provider_info = provider_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveApplicationProcessingPartnerMembershipApplicationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveApplicationProcessingPartnerMembershipApplicationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
