# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicantInquiryEmploymentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employment_duration_in_years': 'int',
        'employment_durationi_in_months': 'int',
        'employer_name': 'str',
        'job_title': 'str',
        'occupation_code': 'str',
        'employment_status': 'str'
    }

    attribute_map = {
        'employment_duration_in_years': 'employmentDurationInYears',
        'employment_durationi_in_months': 'employmentDurationiInMonths',
        'employer_name': 'employerName',
        'job_title': 'jobTitle',
        'occupation_code': 'occupationCode',
        'employment_status': 'employmentStatus'
    }

    def __init__(self, employment_duration_in_years=None, employment_durationi_in_months=None, employer_name=None, job_title=None, occupation_code=None, employment_status=None):  # noqa: E501
        """ApplicantInquiryEmploymentDetails - a model defined in Swagger"""  # noqa: E501
        self._employment_duration_in_years = None
        self._employment_durationi_in_months = None
        self._employer_name = None
        self._job_title = None
        self._occupation_code = None
        self._employment_status = None
        self.discriminator = None
        if employment_duration_in_years is not None:
            self.employment_duration_in_years = employment_duration_in_years
        if employment_durationi_in_months is not None:
            self.employment_durationi_in_months = employment_durationi_in_months
        if employer_name is not None:
            self.employer_name = employer_name
        if job_title is not None:
            self.job_title = job_title
        if occupation_code is not None:
            self.occupation_code = occupation_code
        if employment_status is not None:
            self.employment_status = employment_status

    @property
    def employment_duration_in_years(self):
        """Gets the employment_duration_in_years of this ApplicantInquiryEmploymentDetails.  # noqa: E501

        Employment duration in years  # noqa: E501

        :return: The employment_duration_in_years of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :rtype: int
        """
        return self._employment_duration_in_years

    @employment_duration_in_years.setter
    def employment_duration_in_years(self, employment_duration_in_years):
        """Sets the employment_duration_in_years of this ApplicantInquiryEmploymentDetails.

        Employment duration in years  # noqa: E501

        :param employment_duration_in_years: The employment_duration_in_years of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :type: int
        """

        self._employment_duration_in_years = employment_duration_in_years

    @property
    def employment_durationi_in_months(self):
        """Gets the employment_durationi_in_months of this ApplicantInquiryEmploymentDetails.  # noqa: E501

        Employment duration in months  # noqa: E501

        :return: The employment_durationi_in_months of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :rtype: int
        """
        return self._employment_durationi_in_months

    @employment_durationi_in_months.setter
    def employment_durationi_in_months(self, employment_durationi_in_months):
        """Sets the employment_durationi_in_months of this ApplicantInquiryEmploymentDetails.

        Employment duration in months  # noqa: E501

        :param employment_durationi_in_months: The employment_durationi_in_months of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :type: int
        """

        self._employment_durationi_in_months = employment_durationi_in_months

    @property
    def employer_name(self):
        """Gets the employer_name of this ApplicantInquiryEmploymentDetails.  # noqa: E501

        Name of the employer.  # noqa: E501

        :return: The employer_name of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._employer_name

    @employer_name.setter
    def employer_name(self, employer_name):
        """Sets the employer_name of this ApplicantInquiryEmploymentDetails.

        Name of the employer.  # noqa: E501

        :param employer_name: The employer_name of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :type: str
        """

        self._employer_name = employer_name

    @property
    def job_title(self):
        """Gets the job_title of this ApplicantInquiryEmploymentDetails.  # noqa: E501

        Job Title. This a reference data field. Please use /utilities/referenceData/{jobTitle} resource to get valid values of this field with descriptions. You can use the jobTitle as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The job_title of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this ApplicantInquiryEmploymentDetails.

        Job Title. This a reference data field. Please use /utilities/referenceData/{jobTitle} resource to get valid values of this field with descriptions. You can use the jobTitle as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param job_title: The job_title of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def occupation_code(self):
        """Gets the occupation_code of this ApplicantInquiryEmploymentDetails.  # noqa: E501

        Occupation code. This is a reference data field. Please use /utilities/referenceData/{occupationCode} resource to get valid values of this field with descriptions. You can use the occupationCode as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The occupation_code of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._occupation_code

    @occupation_code.setter
    def occupation_code(self, occupation_code):
        """Sets the occupation_code of this ApplicantInquiryEmploymentDetails.

        Occupation code. This is a reference data field. Please use /utilities/referenceData/{occupationCode} resource to get valid values of this field with descriptions. You can use the occupationCode as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param occupation_code: The occupation_code of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :type: str
        """

        self._occupation_code = occupation_code

    @property
    def employment_status(self):
        """Gets the employment_status of this ApplicantInquiryEmploymentDetails.  # noqa: E501

        Status of the employment.This is a reference data field. Please use /v1/apac/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The employment_status of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this ApplicantInquiryEmploymentDetails.

        Status of the employment.This is a reference data field. Please use /v1/apac/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param employment_status: The employment_status of this ApplicantInquiryEmploymentDetails.  # noqa: E501
        :type: str
        """

        self._employment_status = employment_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantInquiryEmploymentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantInquiryEmploymentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
