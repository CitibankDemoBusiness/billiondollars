# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationUpdateBalanceTransferDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount_to_transfer': 'float',
        'issuing_organization_name': 'str',
        'account_name': 'str',
        'account_reference_number': 'str',
        'biller_code': 'str',
        'campaign_id': 'str'
    }

    attribute_map = {
        'amount_to_transfer': 'amountToTransfer',
        'issuing_organization_name': 'issuingOrganizationName',
        'account_name': 'accountName',
        'account_reference_number': 'accountReferenceNumber',
        'biller_code': 'billerCode',
        'campaign_id': 'campaignId'
    }

    def __init__(self, amount_to_transfer=None, issuing_organization_name=None, account_name=None, account_reference_number=None, biller_code=None, campaign_id=None):  # noqa: E501
        """ApplicationUpdateBalanceTransferDetails - a model defined in Swagger"""  # noqa: E501
        self._amount_to_transfer = None
        self._issuing_organization_name = None
        self._account_name = None
        self._account_reference_number = None
        self._biller_code = None
        self._campaign_id = None
        self.discriminator = None
        self.amount_to_transfer = amount_to_transfer
        if issuing_organization_name is not None:
            self.issuing_organization_name = issuing_organization_name
        if account_name is not None:
            self.account_name = account_name
        if account_reference_number is not None:
            self.account_reference_number = account_reference_number
        self.biller_code = biller_code
        if campaign_id is not None:
            self.campaign_id = campaign_id

    @property
    def amount_to_transfer(self):
        """Gets the amount_to_transfer of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501

        Amount to Transfer  # noqa: E501

        :return: The amount_to_transfer of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :rtype: float
        """
        return self._amount_to_transfer

    @amount_to_transfer.setter
    def amount_to_transfer(self, amount_to_transfer):
        """Sets the amount_to_transfer of this ApplicationUpdateBalanceTransferDetails.

        Amount to Transfer  # noqa: E501

        :param amount_to_transfer: The amount_to_transfer of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :type: float
        """
        if amount_to_transfer is None:
            raise ValueError("Invalid value for `amount_to_transfer`, must not be `None`")  # noqa: E501

        self._amount_to_transfer = amount_to_transfer

    @property
    def issuing_organization_name(self):
        """Gets the issuing_organization_name of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501

        Name of the Organization to which the fund has to be transferred. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardIssuingOrganization} resource to get valid value of this field with description. You can use cardIssuingOrganization field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The issuing_organization_name of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuing_organization_name

    @issuing_organization_name.setter
    def issuing_organization_name(self, issuing_organization_name):
        """Sets the issuing_organization_name of this ApplicationUpdateBalanceTransferDetails.

        Name of the Organization to which the fund has to be transferred. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardIssuingOrganization} resource to get valid value of this field with description. You can use cardIssuingOrganization field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param issuing_organization_name: The issuing_organization_name of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :type: str
        """

        self._issuing_organization_name = issuing_organization_name

    @property
    def account_name(self):
        """Gets the account_name of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501

        Customer's account Name  # noqa: E501

        :return: The account_name of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ApplicationUpdateBalanceTransferDetails.

        Customer's account Name  # noqa: E501

        :param account_name: The account_name of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_reference_number(self):
        """Gets the account_reference_number of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501

        Customer's account reference number with biller.  # noqa: E501

        :return: The account_reference_number of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_reference_number

    @account_reference_number.setter
    def account_reference_number(self, account_reference_number):
        """Sets the account_reference_number of this ApplicationUpdateBalanceTransferDetails.

        Customer's account reference number with biller.  # noqa: E501

        :param account_reference_number: The account_reference_number of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :type: str
        """

        self._account_reference_number = account_reference_number

    @property
    def biller_code(self):
        """Gets the biller_code of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501

        It is a unique code to identify a BPAY biller  # noqa: E501

        :return: The biller_code of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :rtype: str
        """
        return self._biller_code

    @biller_code.setter
    def biller_code(self, biller_code):
        """Sets the biller_code of this ApplicationUpdateBalanceTransferDetails.

        It is a unique code to identify a BPAY biller  # noqa: E501

        :param biller_code: The biller_code of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :type: str
        """
        if biller_code is None:
            raise ValueError("Invalid value for `biller_code`, must not be `None`")  # noqa: E501

        self._biller_code = biller_code

    @property
    def campaign_id(self):
        """Gets the campaign_id of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501

        Campaign code of the balance transfer.  # noqa: E501

        :return: The campaign_id of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this ApplicationUpdateBalanceTransferDetails.

        Campaign code of the balance transfer.  # noqa: E501

        :param campaign_id: The campaign_id of this ApplicationUpdateBalanceTransferDetails.  # noqa: E501
        :type: str
        """

        self._campaign_id = campaign_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationUpdateBalanceTransferDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationUpdateBalanceTransferDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
