# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ECMAddressUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_type': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'postal_code': 'str',
        'country_code': 'str'
    }

    attribute_map = {
        'address_type': 'addressType',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'postal_code': 'postalCode',
        'country_code': 'countryCode'
    }

    def __init__(self, address_type=None, address_line1=None, address_line2=None, postal_code=None, country_code=None):  # noqa: E501
        """ECMAddressUpdate - a model defined in Swagger"""  # noqa: E501
        self._address_type = None
        self._address_line1 = None
        self._address_line2 = None
        self._postal_code = None
        self._country_code = None
        self.discriminator = None
        if address_type is not None:
            self.address_type = address_type
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if postal_code is not None:
            self.postal_code = postal_code
        if country_code is not None:
            self.country_code = country_code

    @property
    def address_type(self):
        """Gets the address_type of this ECMAddressUpdate.  # noqa: E501

        Type of address. This is a reference data field. Please use /v1/utilities/referenceData/{addressType} resource to get valid value of this field with description.  # noqa: E501

        :return: The address_type of this ECMAddressUpdate.  # noqa: E501
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this ECMAddressUpdate.

        Type of address. This is a reference data field. Please use /v1/utilities/referenceData/{addressType} resource to get valid value of this field with description.  # noqa: E501

        :param address_type: The address_type of this ECMAddressUpdate.  # noqa: E501
        :type: str
        """

        self._address_type = address_type

    @property
    def address_line1(self):
        """Gets the address_line1 of this ECMAddressUpdate.  # noqa: E501

        Address line 1  # noqa: E501

        :return: The address_line1 of this ECMAddressUpdate.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this ECMAddressUpdate.

        Address line 1  # noqa: E501

        :param address_line1: The address_line1 of this ECMAddressUpdate.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this ECMAddressUpdate.  # noqa: E501

        Address line 2  # noqa: E501

        :return: The address_line2 of this ECMAddressUpdate.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this ECMAddressUpdate.

        Address line 2  # noqa: E501

        :param address_line2: The address_line2 of this ECMAddressUpdate.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def postal_code(self):
        """Gets the postal_code of this ECMAddressUpdate.  # noqa: E501

        Postal/ZIP code  # noqa: E501

        :return: The postal_code of this ECMAddressUpdate.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ECMAddressUpdate.

        Postal/ZIP code  # noqa: E501

        :param postal_code: The postal_code of this ECMAddressUpdate.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country_code(self):
        """Gets the country_code of this ECMAddressUpdate.  # noqa: E501

        ISO country code. This is a reference data field. Please use /v1/utilities/referenceData/{country} resource to get valid value of this field with description.  # noqa: E501

        :return: The country_code of this ECMAddressUpdate.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ECMAddressUpdate.

        ISO country code. This is a reference data field. Please use /v1/utilities/referenceData/{country} resource to get valid value of this field with description.  # noqa: E501

        :param country_code: The country_code of this ECMAddressUpdate.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECMAddressUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECMAddressUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
