# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ECMDemographics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gender': 'str',
        'date_of_birth': 'date',
        'nationality': 'str'
    }

    attribute_map = {
        'gender': 'gender',
        'date_of_birth': 'dateOfBirth',
        'nationality': 'nationality'
    }

    def __init__(self, gender=None, date_of_birth=None, nationality=None):  # noqa: E501
        """ECMDemographics - a model defined in Swagger"""  # noqa: E501
        self._gender = None
        self._date_of_birth = None
        self._nationality = None
        self.discriminator = None
        if gender is not None:
            self.gender = gender
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if nationality is not None:
            self.nationality = nationality

    @property
    def gender(self):
        """Gets the gender of this ECMDemographics.  # noqa: E501

        Gender/sex. This is a reference data field. Please use /v1/utilities/referenceData/{gender} resource to get valid value of this field with description.  # noqa: E501

        :return: The gender of this ECMDemographics.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ECMDemographics.

        Gender/sex. This is a reference data field. Please use /v1/utilities/referenceData/{gender} resource to get valid value of this field with description.  # noqa: E501

        :param gender: The gender of this ECMDemographics.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ECMDemographics.  # noqa: E501

        Applicants date of birth in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The date_of_birth of this ECMDemographics.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ECMDemographics.

        Applicants date of birth in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param date_of_birth: The date_of_birth of this ECMDemographics.  # noqa: E501
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def nationality(self):
        """Gets the nationality of this ECMDemographics.  # noqa: E501

        Applicants nationality. This is a reference data field. Please use /v1/utilities/referenceData/{country} resource to get valid value of this field with description.  # noqa: E501

        :return: The nationality of this ECMDemographics.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this ECMDemographics.

        Applicants nationality. This is a reference data field. Please use /v1/utilities/referenceData/{country} resource to get valid value of this field with description.  # noqa: E501

        :param nationality: The nationality of this ECMDemographics.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECMDemographics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECMDemographics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
