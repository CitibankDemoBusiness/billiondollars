# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PresetAtmPinAddRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'control_flow_id': 'str',
        'encrypted_pin': 'str',
        'pin_registration_key': 'str',
        'pin_length': 'int',
        'key_device_id': 'str',
        'key_generation_id': 'str'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'control_flow_id': 'controlFlowId',
        'encrypted_pin': 'encryptedPin',
        'pin_registration_key': 'pinRegistrationKey',
        'pin_length': 'pinLength',
        'key_device_id': 'keyDeviceId',
        'key_generation_id': 'keyGenerationId'
    }

    def __init__(self, application_id=None, control_flow_id=None, encrypted_pin=None, pin_registration_key=None, pin_length=None, key_device_id=None, key_generation_id=None):  # noqa: E501
        """PresetAtmPinAddRequest - a model defined in Swagger"""  # noqa: E501
        self._application_id = None
        self._control_flow_id = None
        self._encrypted_pin = None
        self._pin_registration_key = None
        self._pin_length = None
        self._key_device_id = None
        self._key_generation_id = None
        self.discriminator = None
        self.application_id = application_id
        self.control_flow_id = control_flow_id
        self.encrypted_pin = encrypted_pin
        self.pin_registration_key = pin_registration_key
        self.pin_length = pin_length
        self.key_device_id = key_device_id
        self.key_generation_id = key_generation_id

    @property
    def application_id(self):
        """Gets the application_id of this PresetAtmPinAddRequest.  # noqa: E501

        The unique identifier of the application.  # noqa: E501

        :return: The application_id of this PresetAtmPinAddRequest.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this PresetAtmPinAddRequest.

        The unique identifier of the application.  # noqa: E501

        :param application_id: The application_id of this PresetAtmPinAddRequest.  # noqa: E501
        :type: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")  # noqa: E501

        self._application_id = application_id

    @property
    def control_flow_id(self):
        """Gets the control_flow_id of this PresetAtmPinAddRequest.  # noqa: E501

        Control flow id is used to control the flow for subsequent requests in the session.  # noqa: E501

        :return: The control_flow_id of this PresetAtmPinAddRequest.  # noqa: E501
        :rtype: str
        """
        return self._control_flow_id

    @control_flow_id.setter
    def control_flow_id(self, control_flow_id):
        """Sets the control_flow_id of this PresetAtmPinAddRequest.

        Control flow id is used to control the flow for subsequent requests in the session.  # noqa: E501

        :param control_flow_id: The control_flow_id of this PresetAtmPinAddRequest.  # noqa: E501
        :type: str
        """
        if control_flow_id is None:
            raise ValueError("Invalid value for `control_flow_id`, must not be `None`")  # noqa: E501

        self._control_flow_id = control_flow_id

    @property
    def encrypted_pin(self):
        """Gets the encrypted_pin of this PresetAtmPinAddRequest.  # noqa: E501

        Encrypted ATM PIN set by the customer  # noqa: E501

        :return: The encrypted_pin of this PresetAtmPinAddRequest.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_pin

    @encrypted_pin.setter
    def encrypted_pin(self, encrypted_pin):
        """Sets the encrypted_pin of this PresetAtmPinAddRequest.

        Encrypted ATM PIN set by the customer  # noqa: E501

        :param encrypted_pin: The encrypted_pin of this PresetAtmPinAddRequest.  # noqa: E501
        :type: str
        """
        if encrypted_pin is None:
            raise ValueError("Invalid value for `encrypted_pin`, must not be `None`")  # noqa: E501

        self._encrypted_pin = encrypted_pin

    @property
    def pin_registration_key(self):
        """Gets the pin_registration_key of this PresetAtmPinAddRequest.  # noqa: E501

        Unique key used for the registration of ATM PIN  # noqa: E501

        :return: The pin_registration_key of this PresetAtmPinAddRequest.  # noqa: E501
        :rtype: str
        """
        return self._pin_registration_key

    @pin_registration_key.setter
    def pin_registration_key(self, pin_registration_key):
        """Sets the pin_registration_key of this PresetAtmPinAddRequest.

        Unique key used for the registration of ATM PIN  # noqa: E501

        :param pin_registration_key: The pin_registration_key of this PresetAtmPinAddRequest.  # noqa: E501
        :type: str
        """
        if pin_registration_key is None:
            raise ValueError("Invalid value for `pin_registration_key`, must not be `None`")  # noqa: E501

        self._pin_registration_key = pin_registration_key

    @property
    def pin_length(self):
        """Gets the pin_length of this PresetAtmPinAddRequest.  # noqa: E501

        Length of the ATM  PIN  # noqa: E501

        :return: The pin_length of this PresetAtmPinAddRequest.  # noqa: E501
        :rtype: int
        """
        return self._pin_length

    @pin_length.setter
    def pin_length(self, pin_length):
        """Sets the pin_length of this PresetAtmPinAddRequest.

        Length of the ATM  PIN  # noqa: E501

        :param pin_length: The pin_length of this PresetAtmPinAddRequest.  # noqa: E501
        :type: int
        """
        if pin_length is None:
            raise ValueError("Invalid value for `pin_length`, must not be `None`")  # noqa: E501

        self._pin_length = pin_length

    @property
    def key_device_id(self):
        """Gets the key_device_id of this PresetAtmPinAddRequest.  # noqa: E501

        Label to identify the HSM keys used to encrypt PIN  # noqa: E501

        :return: The key_device_id of this PresetAtmPinAddRequest.  # noqa: E501
        :rtype: str
        """
        return self._key_device_id

    @key_device_id.setter
    def key_device_id(self, key_device_id):
        """Sets the key_device_id of this PresetAtmPinAddRequest.

        Label to identify the HSM keys used to encrypt PIN  # noqa: E501

        :param key_device_id: The key_device_id of this PresetAtmPinAddRequest.  # noqa: E501
        :type: str
        """
        if key_device_id is None:
            raise ValueError("Invalid value for `key_device_id`, must not be `None`")  # noqa: E501

        self._key_device_id = key_device_id

    @property
    def key_generation_id(self):
        """Gets the key_generation_id of this PresetAtmPinAddRequest.  # noqa: E501

        It is the generation ID of the HSM Keys referred for encryption for PIN  # noqa: E501

        :return: The key_generation_id of this PresetAtmPinAddRequest.  # noqa: E501
        :rtype: str
        """
        return self._key_generation_id

    @key_generation_id.setter
    def key_generation_id(self, key_generation_id):
        """Sets the key_generation_id of this PresetAtmPinAddRequest.

        It is the generation ID of the HSM Keys referred for encryption for PIN  # noqa: E501

        :param key_generation_id: The key_generation_id of this PresetAtmPinAddRequest.  # noqa: E501
        :type: str
        """
        if key_generation_id is None:
            raise ValueError("Invalid value for `key_generation_id`, must not be `None`")  # noqa: E501

        self._key_generation_id = key_generation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PresetAtmPinAddRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PresetAtmPinAddRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
