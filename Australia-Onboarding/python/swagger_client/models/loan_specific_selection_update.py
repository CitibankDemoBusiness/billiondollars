# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanSpecificSelectionUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_amount': 'float',
        'tenor': 'str',
        'interest_rate': 'float'
    }

    attribute_map = {
        'loan_amount': 'loanAmount',
        'tenor': 'tenor',
        'interest_rate': 'interestRate'
    }

    def __init__(self, loan_amount=None, tenor=None, interest_rate=None):  # noqa: E501
        """LoanSpecificSelectionUpdate - a model defined in Swagger"""  # noqa: E501
        self._loan_amount = None
        self._tenor = None
        self._interest_rate = None
        self.discriminator = None
        if loan_amount is not None:
            self.loan_amount = loan_amount
        if tenor is not None:
            self.tenor = tenor
        if interest_rate is not None:
            self.interest_rate = interest_rate

    @property
    def loan_amount(self):
        """Gets the loan_amount of this LoanSpecificSelectionUpdate.  # noqa: E501

        Loan Amount accepted by customer  # noqa: E501

        :return: The loan_amount of this LoanSpecificSelectionUpdate.  # noqa: E501
        :rtype: float
        """
        return self._loan_amount

    @loan_amount.setter
    def loan_amount(self, loan_amount):
        """Sets the loan_amount of this LoanSpecificSelectionUpdate.

        Loan Amount accepted by customer  # noqa: E501

        :param loan_amount: The loan_amount of this LoanSpecificSelectionUpdate.  # noqa: E501
        :type: float
        """

        self._loan_amount = loan_amount

    @property
    def tenor(self):
        """Gets the tenor of this LoanSpecificSelectionUpdate.  # noqa: E501

        Tenor of loan. This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenor} resource to get valid values of this field with descriptions. You can use tenor field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The tenor of this LoanSpecificSelectionUpdate.  # noqa: E501
        :rtype: str
        """
        return self._tenor

    @tenor.setter
    def tenor(self, tenor):
        """Sets the tenor of this LoanSpecificSelectionUpdate.

        Tenor of loan. This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenor} resource to get valid values of this field with descriptions. You can use tenor field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param tenor: The tenor of this LoanSpecificSelectionUpdate.  # noqa: E501
        :type: str
        """

        self._tenor = tenor

    @property
    def interest_rate(self):
        """Gets the interest_rate of this LoanSpecificSelectionUpdate.  # noqa: E501

        Interest rate applicable for the loan  # noqa: E501

        :return: The interest_rate of this LoanSpecificSelectionUpdate.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this LoanSpecificSelectionUpdate.

        Interest rate applicable for the loan  # noqa: E501

        :param interest_rate: The interest_rate of this LoanSpecificSelectionUpdate.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanSpecificSelectionUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanSpecificSelectionUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
