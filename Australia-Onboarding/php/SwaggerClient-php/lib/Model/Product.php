<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_code' => 'string',
'product_description' => 'string',
'source_code' => 'string',
'logo' => 'string',
'organisation' => 'string',
'product_type' => 'string',
'minimum_credit_limit_amount' => 'double',
'maximum_credit_limit_amount' => 'double',
'annual_fee_amount' => 'double',
'currency_code' => 'string',
'interest_rate' => 'double',
'late_payment_fee' => 'double',
'important_informations' => 'string',
'terms_and_conditions' => 'string',
'agreement_start_date' => '\DateTime',
'agreement_expiry_date' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_code' => null,
'product_description' => null,
'source_code' => null,
'logo' => null,
'organisation' => null,
'product_type' => null,
'minimum_credit_limit_amount' => 'double',
'maximum_credit_limit_amount' => 'double',
'annual_fee_amount' => 'double',
'currency_code' => null,
'interest_rate' => 'double',
'late_payment_fee' => 'double',
'important_informations' => null,
'terms_and_conditions' => null,
'agreement_start_date' => 'date',
'agreement_expiry_date' => 'date'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_code' => 'productCode',
'product_description' => 'productDescription',
'source_code' => 'sourceCode',
'logo' => 'logo',
'organisation' => 'organisation',
'product_type' => 'productType',
'minimum_credit_limit_amount' => 'minimumCreditLimitAmount',
'maximum_credit_limit_amount' => 'maximumCreditLimitAmount',
'annual_fee_amount' => 'annualFeeAmount',
'currency_code' => 'currencyCode',
'interest_rate' => 'interestRate',
'late_payment_fee' => 'latePaymentFee',
'important_informations' => 'importantInformations',
'terms_and_conditions' => 'termsAndConditions',
'agreement_start_date' => 'agreementStartDate',
'agreement_expiry_date' => 'agreementExpiryDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_code' => 'setProductCode',
'product_description' => 'setProductDescription',
'source_code' => 'setSourceCode',
'logo' => 'setLogo',
'organisation' => 'setOrganisation',
'product_type' => 'setProductType',
'minimum_credit_limit_amount' => 'setMinimumCreditLimitAmount',
'maximum_credit_limit_amount' => 'setMaximumCreditLimitAmount',
'annual_fee_amount' => 'setAnnualFeeAmount',
'currency_code' => 'setCurrencyCode',
'interest_rate' => 'setInterestRate',
'late_payment_fee' => 'setLatePaymentFee',
'important_informations' => 'setImportantInformations',
'terms_and_conditions' => 'setTermsAndConditions',
'agreement_start_date' => 'setAgreementStartDate',
'agreement_expiry_date' => 'setAgreementExpiryDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_code' => 'getProductCode',
'product_description' => 'getProductDescription',
'source_code' => 'getSourceCode',
'logo' => 'getLogo',
'organisation' => 'getOrganisation',
'product_type' => 'getProductType',
'minimum_credit_limit_amount' => 'getMinimumCreditLimitAmount',
'maximum_credit_limit_amount' => 'getMaximumCreditLimitAmount',
'annual_fee_amount' => 'getAnnualFeeAmount',
'currency_code' => 'getCurrencyCode',
'interest_rate' => 'getInterestRate',
'late_payment_fee' => 'getLatePaymentFee',
'important_informations' => 'getImportantInformations',
'terms_and_conditions' => 'getTermsAndConditions',
'agreement_start_date' => 'getAgreementStartDate',
'agreement_expiry_date' => 'getAgreementExpiryDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['product_description'] = isset($data['product_description']) ? $data['product_description'] : null;
        $this->container['source_code'] = isset($data['source_code']) ? $data['source_code'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['organisation'] = isset($data['organisation']) ? $data['organisation'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['minimum_credit_limit_amount'] = isset($data['minimum_credit_limit_amount']) ? $data['minimum_credit_limit_amount'] : null;
        $this->container['maximum_credit_limit_amount'] = isset($data['maximum_credit_limit_amount']) ? $data['maximum_credit_limit_amount'] : null;
        $this->container['annual_fee_amount'] = isset($data['annual_fee_amount']) ? $data['annual_fee_amount'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['interest_rate'] = isset($data['interest_rate']) ? $data['interest_rate'] : null;
        $this->container['late_payment_fee'] = isset($data['late_payment_fee']) ? $data['late_payment_fee'] : null;
        $this->container['important_informations'] = isset($data['important_informations']) ? $data['important_informations'] : null;
        $this->container['terms_and_conditions'] = isset($data['terms_and_conditions']) ? $data['terms_and_conditions'] : null;
        $this->container['agreement_start_date'] = isset($data['agreement_start_date']) ? $data['agreement_start_date'] : null;
        $this->container['agreement_expiry_date'] = isset($data['agreement_expiry_date']) ? $data['agreement_expiry_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_code'] === null) {
            $invalidProperties[] = "'product_code' can't be null";
        }
        if ($this->container['product_description'] === null) {
            $invalidProperties[] = "'product_description' can't be null";
        }
        if ($this->container['source_code'] === null) {
            $invalidProperties[] = "'source_code' can't be null";
        }
        if ($this->container['product_type'] === null) {
            $invalidProperties[] = "'product_type' can't be null";
        }
        if ($this->container['minimum_credit_limit_amount'] === null) {
            $invalidProperties[] = "'minimum_credit_limit_amount' can't be null";
        }
        if ($this->container['maximum_credit_limit_amount'] === null) {
            $invalidProperties[] = "'maximum_credit_limit_amount' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['interest_rate'] === null) {
            $invalidProperties[] = "'interest_rate' can't be null";
        }
        if ($this->container['late_payment_fee'] === null) {
            $invalidProperties[] = "'late_payment_fee' can't be null";
        }
        if ($this->container['important_informations'] === null) {
            $invalidProperties[] = "'important_informations' can't be null";
        }
        if ($this->container['terms_and_conditions'] === null) {
            $invalidProperties[] = "'terms_and_conditions' can't be null";
        }
        if ($this->container['agreement_start_date'] === null) {
            $invalidProperties[] = "'agreement_start_date' can't be null";
        }
        if ($this->container['agreement_expiry_date'] === null) {
            $invalidProperties[] = "'agreement_expiry_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code A unique code that identifies the product.
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return string
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string $product_description Detailed information about offered product
     *
     * @return $this
     */
    public function setProductDescription($product_description)
    {
        $this->container['product_description'] = $product_description;

        return $this;
    }

    /**
     * Gets source_code
     *
     * @return string
     */
    public function getSourceCode()
    {
        return $this->container['source_code'];
    }

    /**
     * Sets source_code
     *
     * @param string $source_code A source code to identify the product.
     *
     * @return $this
     */
    public function setSourceCode($source_code)
    {
        $this->container['source_code'] = $source_code;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo Logo to identify the product.
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets organisation
     *
     * @return string
     */
    public function getOrganisation()
    {
        return $this->container['organisation'];
    }

    /**
     * Sets organisation
     *
     * @param string $organisation Card issuing organization name
     *
     * @return $this
     */
    public function setOrganisation($organisation)
    {
        $this->container['organisation'] = $organisation;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type Type of the product.This is a reference data field. Please use /v1/apac/utilities/referenceData/{productType} resource to get valid values of this field with descriptions.
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets minimum_credit_limit_amount
     *
     * @return double
     */
    public function getMinimumCreditLimitAmount()
    {
        return $this->container['minimum_credit_limit_amount'];
    }

    /**
     * Sets minimum_credit_limit_amount
     *
     * @param double $minimum_credit_limit_amount Minimum credit limit amount for the product type
     *
     * @return $this
     */
    public function setMinimumCreditLimitAmount($minimum_credit_limit_amount)
    {
        $this->container['minimum_credit_limit_amount'] = $minimum_credit_limit_amount;

        return $this;
    }

    /**
     * Gets maximum_credit_limit_amount
     *
     * @return double
     */
    public function getMaximumCreditLimitAmount()
    {
        return $this->container['maximum_credit_limit_amount'];
    }

    /**
     * Sets maximum_credit_limit_amount
     *
     * @param double $maximum_credit_limit_amount Maximum credit limit amount for the product type
     *
     * @return $this
     */
    public function setMaximumCreditLimitAmount($maximum_credit_limit_amount)
    {
        $this->container['maximum_credit_limit_amount'] = $maximum_credit_limit_amount;

        return $this;
    }

    /**
     * Gets annual_fee_amount
     *
     * @return double
     */
    public function getAnnualFeeAmount()
    {
        return $this->container['annual_fee_amount'];
    }

    /**
     * Sets annual_fee_amount
     *
     * @param double $annual_fee_amount Annual fees for product type and source code
     *
     * @return $this
     */
    public function setAnnualFeeAmount($annual_fee_amount)
    {
        $this->container['annual_fee_amount'] = $annual_fee_amount;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code in ISO 4217 format
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return double
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param double $interest_rate Annual interest rate
     *
     * @return $this
     */
    public function setInterestRate($interest_rate)
    {
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets late_payment_fee
     *
     * @return double
     */
    public function getLatePaymentFee()
    {
        return $this->container['late_payment_fee'];
    }

    /**
     * Sets late_payment_fee
     *
     * @param double $late_payment_fee Late payment fee for the product type and source code
     *
     * @return $this
     */
    public function setLatePaymentFee($late_payment_fee)
    {
        $this->container['late_payment_fee'] = $late_payment_fee;

        return $this;
    }

    /**
     * Gets important_informations
     *
     * @return string
     */
    public function getImportantInformations()
    {
        return $this->container['important_informations'];
    }

    /**
     * Sets important_informations
     *
     * @param string $important_informations Important informations to know about the product type
     *
     * @return $this
     */
    public function setImportantInformations($important_informations)
    {
        $this->container['important_informations'] = $important_informations;

        return $this;
    }

    /**
     * Gets terms_and_conditions
     *
     * @return string
     */
    public function getTermsAndConditions()
    {
        return $this->container['terms_and_conditions'];
    }

    /**
     * Sets terms_and_conditions
     *
     * @param string $terms_and_conditions Fees, charges and credit criteria apply. Terms and conditions apply and are available upon request. Cards are offered, issued and administered by Citigroup Pty Limited.Allow up to 15 working days to process your Application subject to verification.
     *
     * @return $this
     */
    public function setTermsAndConditions($terms_and_conditions)
    {
        $this->container['terms_and_conditions'] = $terms_and_conditions;

        return $this;
    }

    /**
     * Gets agreement_start_date
     *
     * @return \DateTime
     */
    public function getAgreementStartDate()
    {
        return $this->container['agreement_start_date'];
    }

    /**
     * Sets agreement_start_date
     *
     * @param \DateTime $agreement_start_date Product validity start date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setAgreementStartDate($agreement_start_date)
    {
        $this->container['agreement_start_date'] = $agreement_start_date;

        return $this;
    }

    /**
     * Gets agreement_expiry_date
     *
     * @return \DateTime
     */
    public function getAgreementExpiryDate()
    {
        return $this->container['agreement_expiry_date'];
    }

    /**
     * Sets agreement_expiry_date
     *
     * @param \DateTime $agreement_expiry_date Product validity expiry date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setAgreementExpiryDate($agreement_expiry_date)
    {
        $this->container['agreement_expiry_date'] = $agreement_expiry_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
