<?php
/**
 * CardDeliveryDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CardDeliveryDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardDeliveryDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CardDeliveryDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'card_delivery_status' => 'string',
'airway_bill_number' => 'string',
'delivery_method' => 'string',
'card_delivery_date' => 'string',
'received_by' => 'string',
'display_card_number' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'card_delivery_status' => null,
'airway_bill_number' => null,
'delivery_method' => null,
'card_delivery_date' => null,
'received_by' => null,
'display_card_number' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_delivery_status' => 'cardDeliveryStatus',
'airway_bill_number' => 'airwayBillNumber',
'delivery_method' => 'deliveryMethod',
'card_delivery_date' => 'cardDeliveryDate',
'received_by' => 'receivedBy',
'display_card_number' => 'displayCardNumber'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_delivery_status' => 'setCardDeliveryStatus',
'airway_bill_number' => 'setAirwayBillNumber',
'delivery_method' => 'setDeliveryMethod',
'card_delivery_date' => 'setCardDeliveryDate',
'received_by' => 'setReceivedBy',
'display_card_number' => 'setDisplayCardNumber'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_delivery_status' => 'getCardDeliveryStatus',
'airway_bill_number' => 'getAirwayBillNumber',
'delivery_method' => 'getDeliveryMethod',
'card_delivery_date' => 'getCardDeliveryDate',
'received_by' => 'getReceivedBy',
'display_card_number' => 'getDisplayCardNumber'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_delivery_status'] = isset($data['card_delivery_status']) ? $data['card_delivery_status'] : null;
        $this->container['airway_bill_number'] = isset($data['airway_bill_number']) ? $data['airway_bill_number'] : null;
        $this->container['delivery_method'] = isset($data['delivery_method']) ? $data['delivery_method'] : null;
        $this->container['card_delivery_date'] = isset($data['card_delivery_date']) ? $data['card_delivery_date'] : null;
        $this->container['received_by'] = isset($data['received_by']) ? $data['received_by'] : null;
        $this->container['display_card_number'] = isset($data['display_card_number']) ? $data['display_card_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_delivery_status
     *
     * @return string
     */
    public function getCardDeliveryStatus()
    {
        return $this->container['card_delivery_status'];
    }

    /**
     * Sets card_delivery_status
     *
     * @param string $card_delivery_status Cd delivery status.  This is a reference data field. Please use /v1/utilities/referenceData/{cardDeliveryStatus} resource to get possible values of this field with descriptions.
     *
     * @return $this
     */
    public function setCardDeliveryStatus($card_delivery_status)
    {
        $this->container['card_delivery_status'] = $card_delivery_status;

        return $this;
    }

    /**
     * Gets airway_bill_number
     *
     * @return string
     */
    public function getAirwayBillNumber()
    {
        return $this->container['airway_bill_number'];
    }

    /**
     * Sets airway_bill_number
     *
     * @param string $airway_bill_number New Field in EPCDFIL. This field denotes the Airway Bill Number or reference number provided by the courier company for the dispatch.
     *
     * @return $this
     */
    public function setAirwayBillNumber($airway_bill_number)
    {
        $this->container['airway_bill_number'] = $airway_bill_number;

        return $this;
    }

    /**
     * Gets delivery_method
     *
     * @return string
     */
    public function getDeliveryMethod()
    {
        return $this->container['delivery_method'];
    }

    /**
     * Sets delivery_method
     *
     * @param string $delivery_method New Field in EPCDFIL. This field denotes the mode through which the card was disptached. Valid Values :  'Courier' or 'Post'
     *
     * @return $this
     */
    public function setDeliveryMethod($delivery_method)
    {
        $this->container['delivery_method'] = $delivery_method;

        return $this;
    }

    /**
     * Gets card_delivery_date
     *
     * @return string
     */
    public function getCardDeliveryDate()
    {
        return $this->container['card_delivery_date'];
    }

    /**
     * Sets card_delivery_date
     *
     * @param string $card_delivery_date New Field in EPCDFIL This field denotes the date of card delivery.
     *
     * @return $this
     */
    public function setCardDeliveryDate($card_delivery_date)
    {
        $this->container['card_delivery_date'] = $card_delivery_date;

        return $this;
    }

    /**
     * Gets received_by
     *
     * @return string
     */
    public function getReceivedBy()
    {
        return $this->container['received_by'];
    }

    /**
     * Sets received_by
     *
     * @param string $received_by New Field in EPCDFIL. This field denotes the Name and Relationship of the individual who has received the card on behalf of the cardholder. If the card holder has received the card, then this field will have the value as â€˜Selfâ€™.
     *
     * @return $this
     */
    public function setReceivedBy($received_by)
    {
        $this->container['received_by'] = $received_by;

        return $this;
    }

    /**
     * Gets display_card_number
     *
     * @return string
     */
    public function getDisplayCardNumber()
    {
        return $this->container['display_card_number'];
    }

    /**
     * Sets display_card_number
     *
     * @param string $display_card_number Card last four Digit.
     *
     * @return $this
     */
    public function setDisplayCardNumber($display_card_number)
    {
        $this->container['display_card_number'] = $display_card_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
