<?php
/**
 * ApplicantUpdateContactConsent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicantUpdateContactConsent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicantUpdateContactConsent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicantUpdateContactConsent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ok_to_call' => 'bool',
'ok_to_mail' => 'bool',
'ok_to_sms' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ok_to_call' => null,
'ok_to_mail' => null,
'ok_to_sms' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ok_to_call' => 'okToCall',
'ok_to_mail' => 'okToMail',
'ok_to_sms' => 'okToSms'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ok_to_call' => 'setOkToCall',
'ok_to_mail' => 'setOkToMail',
'ok_to_sms' => 'setOkToSms'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ok_to_call' => 'getOkToCall',
'ok_to_mail' => 'getOkToMail',
'ok_to_sms' => 'getOkToSms'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ok_to_call'] = isset($data['ok_to_call']) ? $data['ok_to_call'] : null;
        $this->container['ok_to_mail'] = isset($data['ok_to_mail']) ? $data['ok_to_mail'] : null;
        $this->container['ok_to_sms'] = isset($data['ok_to_sms']) ? $data['ok_to_sms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ok_to_call
     *
     * @return bool
     */
    public function getOkToCall()
    {
        return $this->container['ok_to_call'];
    }

    /**
     * Sets ok_to_call
     *
     * @param bool $ok_to_call Applicant's consent for receiving phone calls. Valid values: true and false
     *
     * @return $this
     */
    public function setOkToCall($ok_to_call)
    {
        $this->container['ok_to_call'] = $ok_to_call;

        return $this;
    }

    /**
     * Gets ok_to_mail
     *
     * @return bool
     */
    public function getOkToMail()
    {
        return $this->container['ok_to_mail'];
    }

    /**
     * Sets ok_to_mail
     *
     * @param bool $ok_to_mail Applicant's consent for receiving mails. Valid values: true and false
     *
     * @return $this
     */
    public function setOkToMail($ok_to_mail)
    {
        $this->container['ok_to_mail'] = $ok_to_mail;

        return $this;
    }

    /**
     * Gets ok_to_sms
     *
     * @return bool
     */
    public function getOkToSms()
    {
        return $this->container['ok_to_sms'];
    }

    /**
     * Sets ok_to_sms
     *
     * @param bool $ok_to_sms Applicant's consent for receiving sms. Valid values: true and false
     *
     * @return $this
     */
    public function setOkToSms($ok_to_sms)
    {
        $this->container['ok_to_sms'] = $ok_to_sms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
