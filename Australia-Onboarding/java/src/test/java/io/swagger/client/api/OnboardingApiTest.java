/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApplicantSalaryAndContributionsUploadRequest;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.KbaQuestionnaireResponse;
import io.swagger.client.model.KbaSubmissionRequest;
import io.swagger.client.model.KbaSubmissionResponse;
import io.swagger.client.model.PresetAtmPinAddConfirmationRequest;
import io.swagger.client.model.PresetAtmPinAddRequest;
import io.swagger.client.model.UnsecuredApplicationGenerateAndSendOtpRequest;
import io.swagger.client.model.UnsecuredApplicationGenerateAndSendOtpResponse;
import io.swagger.client.model.UnsecuredApplicationValidateOtpRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OnboardingApi
 */
@Ignore
public class OnboardingApiTest {

    private final OnboardingApi api = new OnboardingApi();

    /**
     * Upload Salary and Employer Contributions (Superannuation) Document
     *
     * This API is used to upload the salary and employer contributions (superannuation) document retrieved from third party (Verifier) to host (CI).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applicantSalaryAndContributionsUploadTest() throws ApiException {
        ApplicantSalaryAndContributionsUploadRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String applicationId = null;
        String clientDetails = null;
        api.applicantSalaryAndContributionsUpload(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails);

        // TODO: test validations
    }
    /**
     * Pre-set ATM Pin
     *
     * This API is used to pre-set the ATM Pin of the cards during the onboarding flow before the card is approved. This functionality should only be exposed to internal channels and white label partners.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void presetAtmPinAddTest() throws ApiException {
        PresetAtmPinAddRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        api.presetAtmPinAdd(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * Pre-set ATM Pin Confirmation
     *
     * This API is triggered after the PresetAtmPinAdd API and completes the preset ATM Pin process during the onboarding flow. This functionality should only be exposed to internal channels and white label partners.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void presetAtmPinAddConfirmationTest() throws ApiException {
        PresetAtmPinAddConfirmationRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String clientDetails = null;
        api.presetAtmPinAddConfirmation(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        // TODO: test validations
    }
    /**
     * Generate and Send OTP for Unsecured Application Flow
     *
     * This API is used to generate the one time password and deliver to customer for unsecured application flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsecuredApplicationGenerateAndSendOTPTest() throws ApiException {
        UnsecuredApplicationGenerateAndSendOtpRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String applicationId = null;
        String clientDetails = null;
        UnsecuredApplicationGenerateAndSendOtpResponse response = api.unsecuredApplicationGenerateAndSendOTP(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails);

        // TODO: test validations
    }
    /**
     * Validate OTP for Unsecured Application Flow
     *
     * This API is used to validate the OTP for unsecured application flow.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsecuredApplicationValidateOtpTest() throws ApiException {
        UnsecuredApplicationValidateOtpRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String applicationId = null;
        String clientDetails = null;
        api.unsecuredApplicationValidateOtp(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails);

        // TODO: test validations
    }
    /**
     * Submit KBA Answers to Bureau
     *
     * This API is used to submit KBA answers to Bureau for customer authentication. Application id along with KBA answers are passed in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdKnowledgeBasedAssessmentsPostTest() throws ApiException {
        KbaSubmissionRequest body = null;
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String contentType = null;
        String applicationId = null;
        String clientDetails = null;
        KbaSubmissionResponse response = api.v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdKnowledgeBasedAssessmentsPost(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails);

        // TODO: test validations
    }
    /**
     * Retrieve KBA Questionnaire
     *
     * This API retrieves the KBA questionnaire.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdKnowledgeBasedAssessmentsQuestionnaireGetTest() throws ApiException {
        String authorization = null;
        String uuid = null;
        String accept = null;
        String clientId = null;
        String applicationId = null;
        String controlFlowId = null;
        String clientDetails = null;
        KbaQuestionnaireResponse response = api.v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdKnowledgeBasedAssessmentsQuestionnaireGet(authorization, uuid, accept, clientId, applicationId, controlFlowId, clientDetails);

        // TODO: test validations
    }
}
