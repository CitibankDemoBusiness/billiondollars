/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.SupplementaryCardApplicationStatusInquiryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient apiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for supplementaryCardApplicationStatusInquiry
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId client id generated during consumer on-boarding (required)
     * @param applicationId This refers to Unique identifier for the application. (required)
     * @param dateOfBirth Applicant&#x27;s date of birth in  ISO 8601 date format YYYY-MM-DD (required)
     * @param motherMaidenName Mother&#x27;s maiden name (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call supplementaryCardApplicationStatusInquiryCall(String authorization, String uuid, String accept, String clientId, String applicationId, String dateOfBirth, String motherMaidenName, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/onboarding/supplementary/applications/{applicationId}/status"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dateOfBirth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateOfBirth", dateOfBirth));
        if (motherMaidenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("motherMaidenName", motherMaidenName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call supplementaryCardApplicationStatusInquiryValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String applicationId, String dateOfBirth, String motherMaidenName, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling supplementaryCardApplicationStatusInquiry(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling supplementaryCardApplicationStatusInquiry(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling supplementaryCardApplicationStatusInquiry(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling supplementaryCardApplicationStatusInquiry(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling supplementaryCardApplicationStatusInquiry(Async)");
        }
        // verify the required parameter 'dateOfBirth' is set
        if (dateOfBirth == null) {
            throw new ApiException("Missing the required parameter 'dateOfBirth' when calling supplementaryCardApplicationStatusInquiry(Async)");
        }
        // verify the required parameter 'motherMaidenName' is set
        if (motherMaidenName == null) {
            throw new ApiException("Missing the required parameter 'motherMaidenName' when calling supplementaryCardApplicationStatusInquiry(Async)");
        }
        
        com.squareup.okhttp.Call call = supplementaryCardApplicationStatusInquiryCall(authorization, uuid, accept, clientId, applicationId, dateOfBirth, motherMaidenName, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check Supplementary Application Status
     * This API is used to check the status of the supplementary application.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId client id generated during consumer on-boarding (required)
     * @param applicationId This refers to Unique identifier for the application. (required)
     * @param dateOfBirth Applicant&#x27;s date of birth in  ISO 8601 date format YYYY-MM-DD (required)
     * @param motherMaidenName Mother&#x27;s maiden name (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return SupplementaryCardApplicationStatusInquiryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SupplementaryCardApplicationStatusInquiryResponse supplementaryCardApplicationStatusInquiry(String authorization, String uuid, String accept, String clientId, String applicationId, String dateOfBirth, String motherMaidenName, String clientDetails) throws ApiException {
        ApiResponse<SupplementaryCardApplicationStatusInquiryResponse> resp = supplementaryCardApplicationStatusInquiryWithHttpInfo(authorization, uuid, accept, clientId, applicationId, dateOfBirth, motherMaidenName, clientDetails);
        return resp.getData();
    }

    /**
     * Check Supplementary Application Status
     * This API is used to check the status of the supplementary application.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId client id generated during consumer on-boarding (required)
     * @param applicationId This refers to Unique identifier for the application. (required)
     * @param dateOfBirth Applicant&#x27;s date of birth in  ISO 8601 date format YYYY-MM-DD (required)
     * @param motherMaidenName Mother&#x27;s maiden name (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;SupplementaryCardApplicationStatusInquiryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SupplementaryCardApplicationStatusInquiryResponse> supplementaryCardApplicationStatusInquiryWithHttpInfo(String authorization, String uuid, String accept, String clientId, String applicationId, String dateOfBirth, String motherMaidenName, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = supplementaryCardApplicationStatusInquiryValidateBeforeCall(authorization, uuid, accept, clientId, applicationId, dateOfBirth, motherMaidenName, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<SupplementaryCardApplicationStatusInquiryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check Supplementary Application Status (asynchronously)
     * This API is used to check the status of the supplementary application.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D; (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId client id generated during consumer on-boarding (required)
     * @param applicationId This refers to Unique identifier for the application. (required)
     * @param dateOfBirth Applicant&#x27;s date of birth in  ISO 8601 date format YYYY-MM-DD (required)
     * @param motherMaidenName Mother&#x27;s maiden name (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call supplementaryCardApplicationStatusInquiryAsync(String authorization, String uuid, String accept, String clientId, String applicationId, String dateOfBirth, String motherMaidenName, String clientDetails, final ApiCallback<SupplementaryCardApplicationStatusInquiryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = supplementaryCardApplicationStatusInquiryValidateBeforeCall(authorization, uuid, accept, clientId, applicationId, dateOfBirth, motherMaidenName, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SupplementaryCardApplicationStatusInquiryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
