/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Email
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class Email {
  @SerializedName("emailAddress")
  private String emailAddress = null;

  @SerializedName("okToEmail")
  private Boolean okToEmail = null;

  @SerializedName("isPrerferredEmailAddress")
  private Boolean isPrerferredEmailAddress = null;

  public Email emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Email ID
   * @return emailAddress
  **/
  @Schema(example = "matt.hayden@gmail.com", required = true, description = "Email ID")
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }

  public Email okToEmail(Boolean okToEmail) {
    this.okToEmail = okToEmail;
    return this;
  }

   /**
   * Flag to indicate whether prospect wants to receive emails or not. Valid values: true and false
   * @return okToEmail
  **/
  @Schema(example = "true", description = "Flag to indicate whether prospect wants to receive emails or not. Valid values: true and false")
  public Boolean isOkToEmail() {
    return okToEmail;
  }

  public void setOkToEmail(Boolean okToEmail) {
    this.okToEmail = okToEmail;
  }

  public Email isPrerferredEmailAddress(Boolean isPrerferredEmailAddress) {
    this.isPrerferredEmailAddress = isPrerferredEmailAddress;
    return this;
  }

   /**
   * Indicates whether this email id is preferred email for all communications. Valid values: true and false
   * @return isPrerferredEmailAddress
  **/
  @Schema(example = "true", description = "Indicates whether this email id is preferred email for all communications. Valid values: true and false")
  public Boolean isIsPrerferredEmailAddress() {
    return isPrerferredEmailAddress;
  }

  public void setIsPrerferredEmailAddress(Boolean isPrerferredEmailAddress) {
    this.isPrerferredEmailAddress = isPrerferredEmailAddress;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Email email = (Email) o;
    return Objects.equals(this.emailAddress, email.emailAddress) &&
        Objects.equals(this.okToEmail, email.okToEmail) &&
        Objects.equals(this.isPrerferredEmailAddress, email.isPrerferredEmailAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailAddress, okToEmail, isPrerferredEmailAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Email {\n");
    
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    okToEmail: ").append(toIndentedString(okToEmail)).append("\n");
    sb.append("    isPrerferredEmailAddress: ").append(toIndentedString(isPrerferredEmailAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
