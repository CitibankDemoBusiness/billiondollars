/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ApplicationInquiryExistingLoanDetails;
import io.swagger.client.model.ApplicationInquiryExpenseDetails;
import io.swagger.client.model.ApplicationInquiryIncomeDetails;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ApplicationInquiryFinancialInformation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class ApplicationInquiryFinancialInformation {
  @SerializedName("hasForeseeableFinancialChanges")
  private Boolean hasForeseeableFinancialChanges = null;

  @SerializedName("expenseDetails")
  private List<ApplicationInquiryExpenseDetails> expenseDetails = null;

  @SerializedName("incomeDetails")
  private List<ApplicationInquiryIncomeDetails> incomeDetails = null;

  @SerializedName("existingLoanDetails")
  private List<ApplicationInquiryExistingLoanDetails> existingLoanDetails = null;

  public ApplicationInquiryFinancialInformation hasForeseeableFinancialChanges(Boolean hasForeseeableFinancialChanges) {
    this.hasForeseeableFinancialChanges = hasForeseeableFinancialChanges;
    return this;
  }

   /**
   * Indicates whether any foreseeable changes in customer&#x27;s financial circumstances.
   * @return hasForeseeableFinancialChanges
  **/
  @Schema(example = "true", description = "Indicates whether any foreseeable changes in customer's financial circumstances.")
  public Boolean isHasForeseeableFinancialChanges() {
    return hasForeseeableFinancialChanges;
  }

  public void setHasForeseeableFinancialChanges(Boolean hasForeseeableFinancialChanges) {
    this.hasForeseeableFinancialChanges = hasForeseeableFinancialChanges;
  }

  public ApplicationInquiryFinancialInformation expenseDetails(List<ApplicationInquiryExpenseDetails> expenseDetails) {
    this.expenseDetails = expenseDetails;
    return this;
  }

  public ApplicationInquiryFinancialInformation addExpenseDetailsItem(ApplicationInquiryExpenseDetails expenseDetailsItem) {
    if (this.expenseDetails == null) {
      this.expenseDetails = new ArrayList<ApplicationInquiryExpenseDetails>();
    }
    this.expenseDetails.add(expenseDetailsItem);
    return this;
  }

   /**
   * Get expenseDetails
   * @return expenseDetails
  **/
  @Schema(description = "")
  public List<ApplicationInquiryExpenseDetails> getExpenseDetails() {
    return expenseDetails;
  }

  public void setExpenseDetails(List<ApplicationInquiryExpenseDetails> expenseDetails) {
    this.expenseDetails = expenseDetails;
  }

  public ApplicationInquiryFinancialInformation incomeDetails(List<ApplicationInquiryIncomeDetails> incomeDetails) {
    this.incomeDetails = incomeDetails;
    return this;
  }

  public ApplicationInquiryFinancialInformation addIncomeDetailsItem(ApplicationInquiryIncomeDetails incomeDetailsItem) {
    if (this.incomeDetails == null) {
      this.incomeDetails = new ArrayList<ApplicationInquiryIncomeDetails>();
    }
    this.incomeDetails.add(incomeDetailsItem);
    return this;
  }

   /**
   * Get incomeDetails
   * @return incomeDetails
  **/
  @Schema(description = "")
  public List<ApplicationInquiryIncomeDetails> getIncomeDetails() {
    return incomeDetails;
  }

  public void setIncomeDetails(List<ApplicationInquiryIncomeDetails> incomeDetails) {
    this.incomeDetails = incomeDetails;
  }

  public ApplicationInquiryFinancialInformation existingLoanDetails(List<ApplicationInquiryExistingLoanDetails> existingLoanDetails) {
    this.existingLoanDetails = existingLoanDetails;
    return this;
  }

  public ApplicationInquiryFinancialInformation addExistingLoanDetailsItem(ApplicationInquiryExistingLoanDetails existingLoanDetailsItem) {
    if (this.existingLoanDetails == null) {
      this.existingLoanDetails = new ArrayList<ApplicationInquiryExistingLoanDetails>();
    }
    this.existingLoanDetails.add(existingLoanDetailsItem);
    return this;
  }

   /**
   * Get existingLoanDetails
   * @return existingLoanDetails
  **/
  @Schema(description = "")
  public List<ApplicationInquiryExistingLoanDetails> getExistingLoanDetails() {
    return existingLoanDetails;
  }

  public void setExistingLoanDetails(List<ApplicationInquiryExistingLoanDetails> existingLoanDetails) {
    this.existingLoanDetails = existingLoanDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationInquiryFinancialInformation applicationInquiryFinancialInformation = (ApplicationInquiryFinancialInformation) o;
    return Objects.equals(this.hasForeseeableFinancialChanges, applicationInquiryFinancialInformation.hasForeseeableFinancialChanges) &&
        Objects.equals(this.expenseDetails, applicationInquiryFinancialInformation.expenseDetails) &&
        Objects.equals(this.incomeDetails, applicationInquiryFinancialInformation.incomeDetails) &&
        Objects.equals(this.existingLoanDetails, applicationInquiryFinancialInformation.existingLoanDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasForeseeableFinancialChanges, expenseDetails, incomeDetails, existingLoanDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationInquiryFinancialInformation {\n");
    
    sb.append("    hasForeseeableFinancialChanges: ").append(toIndentedString(hasForeseeableFinancialChanges)).append("\n");
    sb.append("    expenseDetails: ").append(toIndentedString(expenseDetails)).append("\n");
    sb.append("    incomeDetails: ").append(toIndentedString(incomeDetails)).append("\n");
    sb.append("    existingLoanDetails: ").append(toIndentedString(existingLoanDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
