/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ApplicantAddAdditionalData;
import io.swagger.client.model.ApplicantAddAddress;
import io.swagger.client.model.ApplicantAddConsentDetails;
import io.swagger.client.model.ApplicantAddContactConsent;
import io.swagger.client.model.ApplicantAddDemographics;
import io.swagger.client.model.ApplicantAddEmail;
import io.swagger.client.model.ApplicantAddEmploymentDetails;
import io.swagger.client.model.ApplicantAddFinancialInformation;
import io.swagger.client.model.ApplicantAddIdentificationDocumentDetails;
import io.swagger.client.model.ApplicantAddKycInformation;
import io.swagger.client.model.ApplicantAddName;
import io.swagger.client.model.ApplicantAddPartnerCustomerDetails;
import io.swagger.client.model.ApplicantAddPhone;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ApplicantAddApplicant
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class ApplicantAddApplicant {
  @SerializedName("applicantType")
  private String applicantType = null;

  @SerializedName("motherMaidenName")
  private String motherMaidenName = null;

  @SerializedName("name")
  private ApplicantAddName name = null;

  @SerializedName("demographics")
  private ApplicantAddDemographics demographics = null;

  @SerializedName("address")
  private List<ApplicantAddAddress> address = null;

  @SerializedName("email")
  private List<ApplicantAddEmail> email = null;

  @SerializedName("phone")
  private List<ApplicantAddPhone> phone = null;

  @SerializedName("financialInformation")
  private ApplicantAddFinancialInformation financialInformation = null;

  @SerializedName("employmentDetails")
  private List<ApplicantAddEmploymentDetails> employmentDetails = null;

  @SerializedName("identificationDocumentDetails")
  private List<ApplicantAddIdentificationDocumentDetails> identificationDocumentDetails = null;

  @SerializedName("additionalData")
  private ApplicantAddAdditionalData additionalData = null;

  @SerializedName("partnerCustomerDetails")
  private ApplicantAddPartnerCustomerDetails partnerCustomerDetails = null;

  @SerializedName("consentDetails")
  private List<ApplicantAddConsentDetails> consentDetails = null;

  @SerializedName("kycInformation")
  private ApplicantAddKycInformation kycInformation = null;

  @SerializedName("contactConsent")
  private ApplicantAddContactConsent contactConsent = null;

  public ApplicantAddApplicant applicantType(String applicantType) {
    this.applicantType = applicantType;
    return this;
  }

   /**
   * Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.
   * @return applicantType
  **/
  @Schema(example = "SUPPLEMENTARY", required = true, description = "Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.")
  public String getApplicantType() {
    return applicantType;
  }

  public void setApplicantType(String applicantType) {
    this.applicantType = applicantType;
  }

  public ApplicantAddApplicant motherMaidenName(String motherMaidenName) {
    this.motherMaidenName = motherMaidenName;
    return this;
  }

   /**
   * Mothers maiden name
   * @return motherMaidenName
  **/
  @Schema(example = "Monica", description = "Mothers maiden name")
  public String getMotherMaidenName() {
    return motherMaidenName;
  }

  public void setMotherMaidenName(String motherMaidenName) {
    this.motherMaidenName = motherMaidenName;
  }

  public ApplicantAddApplicant name(ApplicantAddName name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public ApplicantAddName getName() {
    return name;
  }

  public void setName(ApplicantAddName name) {
    this.name = name;
  }

  public ApplicantAddApplicant demographics(ApplicantAddDemographics demographics) {
    this.demographics = demographics;
    return this;
  }

   /**
   * Get demographics
   * @return demographics
  **/
  @Schema(description = "")
  public ApplicantAddDemographics getDemographics() {
    return demographics;
  }

  public void setDemographics(ApplicantAddDemographics demographics) {
    this.demographics = demographics;
  }

  public ApplicantAddApplicant address(List<ApplicantAddAddress> address) {
    this.address = address;
    return this;
  }

  public ApplicantAddApplicant addAddressItem(ApplicantAddAddress addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<ApplicantAddAddress>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(description = "")
  public List<ApplicantAddAddress> getAddress() {
    return address;
  }

  public void setAddress(List<ApplicantAddAddress> address) {
    this.address = address;
  }

  public ApplicantAddApplicant email(List<ApplicantAddEmail> email) {
    this.email = email;
    return this;
  }

  public ApplicantAddApplicant addEmailItem(ApplicantAddEmail emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<ApplicantAddEmail>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(description = "")
  public List<ApplicantAddEmail> getEmail() {
    return email;
  }

  public void setEmail(List<ApplicantAddEmail> email) {
    this.email = email;
  }

  public ApplicantAddApplicant phone(List<ApplicantAddPhone> phone) {
    this.phone = phone;
    return this;
  }

  public ApplicantAddApplicant addPhoneItem(ApplicantAddPhone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<ApplicantAddPhone>();
    }
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @Schema(description = "")
  public List<ApplicantAddPhone> getPhone() {
    return phone;
  }

  public void setPhone(List<ApplicantAddPhone> phone) {
    this.phone = phone;
  }

  public ApplicantAddApplicant financialInformation(ApplicantAddFinancialInformation financialInformation) {
    this.financialInformation = financialInformation;
    return this;
  }

   /**
   * Get financialInformation
   * @return financialInformation
  **/
  @Schema(description = "")
  public ApplicantAddFinancialInformation getFinancialInformation() {
    return financialInformation;
  }

  public void setFinancialInformation(ApplicantAddFinancialInformation financialInformation) {
    this.financialInformation = financialInformation;
  }

  public ApplicantAddApplicant employmentDetails(List<ApplicantAddEmploymentDetails> employmentDetails) {
    this.employmentDetails = employmentDetails;
    return this;
  }

  public ApplicantAddApplicant addEmploymentDetailsItem(ApplicantAddEmploymentDetails employmentDetailsItem) {
    if (this.employmentDetails == null) {
      this.employmentDetails = new ArrayList<ApplicantAddEmploymentDetails>();
    }
    this.employmentDetails.add(employmentDetailsItem);
    return this;
  }

   /**
   * Get employmentDetails
   * @return employmentDetails
  **/
  @Schema(description = "")
  public List<ApplicantAddEmploymentDetails> getEmploymentDetails() {
    return employmentDetails;
  }

  public void setEmploymentDetails(List<ApplicantAddEmploymentDetails> employmentDetails) {
    this.employmentDetails = employmentDetails;
  }

  public ApplicantAddApplicant identificationDocumentDetails(List<ApplicantAddIdentificationDocumentDetails> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
    return this;
  }

  public ApplicantAddApplicant addIdentificationDocumentDetailsItem(ApplicantAddIdentificationDocumentDetails identificationDocumentDetailsItem) {
    if (this.identificationDocumentDetails == null) {
      this.identificationDocumentDetails = new ArrayList<ApplicantAddIdentificationDocumentDetails>();
    }
    this.identificationDocumentDetails.add(identificationDocumentDetailsItem);
    return this;
  }

   /**
   * Get identificationDocumentDetails
   * @return identificationDocumentDetails
  **/
  @Schema(description = "")
  public List<ApplicantAddIdentificationDocumentDetails> getIdentificationDocumentDetails() {
    return identificationDocumentDetails;
  }

  public void setIdentificationDocumentDetails(List<ApplicantAddIdentificationDocumentDetails> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
  }

  public ApplicantAddApplicant additionalData(ApplicantAddAdditionalData additionalData) {
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Get additionalData
   * @return additionalData
  **/
  @Schema(description = "")
  public ApplicantAddAdditionalData getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(ApplicantAddAdditionalData additionalData) {
    this.additionalData = additionalData;
  }

  public ApplicantAddApplicant partnerCustomerDetails(ApplicantAddPartnerCustomerDetails partnerCustomerDetails) {
    this.partnerCustomerDetails = partnerCustomerDetails;
    return this;
  }

   /**
   * Get partnerCustomerDetails
   * @return partnerCustomerDetails
  **/
  @Schema(description = "")
  public ApplicantAddPartnerCustomerDetails getPartnerCustomerDetails() {
    return partnerCustomerDetails;
  }

  public void setPartnerCustomerDetails(ApplicantAddPartnerCustomerDetails partnerCustomerDetails) {
    this.partnerCustomerDetails = partnerCustomerDetails;
  }

  public ApplicantAddApplicant consentDetails(List<ApplicantAddConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
    return this;
  }

  public ApplicantAddApplicant addConsentDetailsItem(ApplicantAddConsentDetails consentDetailsItem) {
    if (this.consentDetails == null) {
      this.consentDetails = new ArrayList<ApplicantAddConsentDetails>();
    }
    this.consentDetails.add(consentDetailsItem);
    return this;
  }

   /**
   * Get consentDetails
   * @return consentDetails
  **/
  @Schema(description = "")
  public List<ApplicantAddConsentDetails> getConsentDetails() {
    return consentDetails;
  }

  public void setConsentDetails(List<ApplicantAddConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
  }

  public ApplicantAddApplicant kycInformation(ApplicantAddKycInformation kycInformation) {
    this.kycInformation = kycInformation;
    return this;
  }

   /**
   * Get kycInformation
   * @return kycInformation
  **/
  @Schema(description = "")
  public ApplicantAddKycInformation getKycInformation() {
    return kycInformation;
  }

  public void setKycInformation(ApplicantAddKycInformation kycInformation) {
    this.kycInformation = kycInformation;
  }

  public ApplicantAddApplicant contactConsent(ApplicantAddContactConsent contactConsent) {
    this.contactConsent = contactConsent;
    return this;
  }

   /**
   * Get contactConsent
   * @return contactConsent
  **/
  @Schema(description = "")
  public ApplicantAddContactConsent getContactConsent() {
    return contactConsent;
  }

  public void setContactConsent(ApplicantAddContactConsent contactConsent) {
    this.contactConsent = contactConsent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantAddApplicant applicantAddApplicant = (ApplicantAddApplicant) o;
    return Objects.equals(this.applicantType, applicantAddApplicant.applicantType) &&
        Objects.equals(this.motherMaidenName, applicantAddApplicant.motherMaidenName) &&
        Objects.equals(this.name, applicantAddApplicant.name) &&
        Objects.equals(this.demographics, applicantAddApplicant.demographics) &&
        Objects.equals(this.address, applicantAddApplicant.address) &&
        Objects.equals(this.email, applicantAddApplicant.email) &&
        Objects.equals(this.phone, applicantAddApplicant.phone) &&
        Objects.equals(this.financialInformation, applicantAddApplicant.financialInformation) &&
        Objects.equals(this.employmentDetails, applicantAddApplicant.employmentDetails) &&
        Objects.equals(this.identificationDocumentDetails, applicantAddApplicant.identificationDocumentDetails) &&
        Objects.equals(this.additionalData, applicantAddApplicant.additionalData) &&
        Objects.equals(this.partnerCustomerDetails, applicantAddApplicant.partnerCustomerDetails) &&
        Objects.equals(this.consentDetails, applicantAddApplicant.consentDetails) &&
        Objects.equals(this.kycInformation, applicantAddApplicant.kycInformation) &&
        Objects.equals(this.contactConsent, applicantAddApplicant.contactConsent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicantType, motherMaidenName, name, demographics, address, email, phone, financialInformation, employmentDetails, identificationDocumentDetails, additionalData, partnerCustomerDetails, consentDetails, kycInformation, contactConsent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantAddApplicant {\n");
    
    sb.append("    applicantType: ").append(toIndentedString(applicantType)).append("\n");
    sb.append("    motherMaidenName: ").append(toIndentedString(motherMaidenName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    demographics: ").append(toIndentedString(demographics)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    financialInformation: ").append(toIndentedString(financialInformation)).append("\n");
    sb.append("    employmentDetails: ").append(toIndentedString(employmentDetails)).append("\n");
    sb.append("    identificationDocumentDetails: ").append(toIndentedString(identificationDocumentDetails)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    partnerCustomerDetails: ").append(toIndentedString(partnerCustomerDetails)).append("\n");
    sb.append("    consentDetails: ").append(toIndentedString(consentDetails)).append("\n");
    sb.append("    kycInformation: ").append(toIndentedString(kycInformation)).append("\n");
    sb.append("    contactConsent: ").append(toIndentedString(contactConsent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
