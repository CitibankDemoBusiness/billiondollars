/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ECMAdditionalDataUpdate;
import io.swagger.client.model.ECMAddressUpdate;
import io.swagger.client.model.ECMConsentDetails;
import io.swagger.client.model.ECMContactConsentUpdate;
import io.swagger.client.model.ECMContactPreferenceUpdate;
import io.swagger.client.model.ECMDemographicsUpdate;
import io.swagger.client.model.ECMEducationUpdate;
import io.swagger.client.model.ECMEmploymentDetailsUpdate;
import io.swagger.client.model.ECMFinancialInformationUpdate;
import io.swagger.client.model.ECMIdentificationDocumentDetailsUpdate;
import io.swagger.client.model.ECMNameUpdate;
import io.swagger.client.model.ECMParentInformationUpdate;
import io.swagger.client.model.ECMPhoneUpdate;
import io.swagger.client.model.MarketingConsent;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ECMApplicantUpdate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class ECMApplicantUpdate {
  @SerializedName("name")
  private ECMNameUpdate name = null;

  @SerializedName("demographics")
  private ECMDemographicsUpdate demographics = null;

  @SerializedName("education")
  private ECMEducationUpdate education = null;

  @SerializedName("identificationDocumentDetails")
  private List<ECMIdentificationDocumentDetailsUpdate> identificationDocumentDetails = null;

  @SerializedName("employmentDetails")
  private List<ECMEmploymentDetailsUpdate> employmentDetails = null;

  @SerializedName("phone")
  private List<ECMPhoneUpdate> phone = null;

  @SerializedName("address")
  private List<ECMAddressUpdate> address = null;

  @SerializedName("contactPreference")
  private ECMContactPreferenceUpdate contactPreference = null;

  @SerializedName("contactConsent")
  private ECMContactConsentUpdate contactConsent = null;

  @SerializedName("additionalData")
  private ECMAdditionalDataUpdate additionalData = null;

  @SerializedName("marketingConsent")
  private MarketingConsent marketingConsent = null;

  @SerializedName("parentInformation")
  private ECMParentInformationUpdate parentInformation = null;

  @SerializedName("financialInformation")
  private ECMFinancialInformationUpdate financialInformation = null;

  @SerializedName("consentDetails")
  private List<ECMConsentDetails> consentDetails = null;

  public ECMApplicantUpdate name(ECMNameUpdate name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public ECMNameUpdate getName() {
    return name;
  }

  public void setName(ECMNameUpdate name) {
    this.name = name;
  }

  public ECMApplicantUpdate demographics(ECMDemographicsUpdate demographics) {
    this.demographics = demographics;
    return this;
  }

   /**
   * Get demographics
   * @return demographics
  **/
  @Schema(description = "")
  public ECMDemographicsUpdate getDemographics() {
    return demographics;
  }

  public void setDemographics(ECMDemographicsUpdate demographics) {
    this.demographics = demographics;
  }

  public ECMApplicantUpdate education(ECMEducationUpdate education) {
    this.education = education;
    return this;
  }

   /**
   * Get education
   * @return education
  **/
  @Schema(description = "")
  public ECMEducationUpdate getEducation() {
    return education;
  }

  public void setEducation(ECMEducationUpdate education) {
    this.education = education;
  }

  public ECMApplicantUpdate identificationDocumentDetails(List<ECMIdentificationDocumentDetailsUpdate> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
    return this;
  }

  public ECMApplicantUpdate addIdentificationDocumentDetailsItem(ECMIdentificationDocumentDetailsUpdate identificationDocumentDetailsItem) {
    if (this.identificationDocumentDetails == null) {
      this.identificationDocumentDetails = new ArrayList<ECMIdentificationDocumentDetailsUpdate>();
    }
    this.identificationDocumentDetails.add(identificationDocumentDetailsItem);
    return this;
  }

   /**
   * Get identificationDocumentDetails
   * @return identificationDocumentDetails
  **/
  @Schema(description = "")
  public List<ECMIdentificationDocumentDetailsUpdate> getIdentificationDocumentDetails() {
    return identificationDocumentDetails;
  }

  public void setIdentificationDocumentDetails(List<ECMIdentificationDocumentDetailsUpdate> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
  }

  public ECMApplicantUpdate employmentDetails(List<ECMEmploymentDetailsUpdate> employmentDetails) {
    this.employmentDetails = employmentDetails;
    return this;
  }

  public ECMApplicantUpdate addEmploymentDetailsItem(ECMEmploymentDetailsUpdate employmentDetailsItem) {
    if (this.employmentDetails == null) {
      this.employmentDetails = new ArrayList<ECMEmploymentDetailsUpdate>();
    }
    this.employmentDetails.add(employmentDetailsItem);
    return this;
  }

   /**
   * Get employmentDetails
   * @return employmentDetails
  **/
  @Schema(description = "")
  public List<ECMEmploymentDetailsUpdate> getEmploymentDetails() {
    return employmentDetails;
  }

  public void setEmploymentDetails(List<ECMEmploymentDetailsUpdate> employmentDetails) {
    this.employmentDetails = employmentDetails;
  }

  public ECMApplicantUpdate phone(List<ECMPhoneUpdate> phone) {
    this.phone = phone;
    return this;
  }

  public ECMApplicantUpdate addPhoneItem(ECMPhoneUpdate phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<ECMPhoneUpdate>();
    }
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @Schema(description = "")
  public List<ECMPhoneUpdate> getPhone() {
    return phone;
  }

  public void setPhone(List<ECMPhoneUpdate> phone) {
    this.phone = phone;
  }

  public ECMApplicantUpdate address(List<ECMAddressUpdate> address) {
    this.address = address;
    return this;
  }

  public ECMApplicantUpdate addAddressItem(ECMAddressUpdate addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<ECMAddressUpdate>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(description = "")
  public List<ECMAddressUpdate> getAddress() {
    return address;
  }

  public void setAddress(List<ECMAddressUpdate> address) {
    this.address = address;
  }

  public ECMApplicantUpdate contactPreference(ECMContactPreferenceUpdate contactPreference) {
    this.contactPreference = contactPreference;
    return this;
  }

   /**
   * Get contactPreference
   * @return contactPreference
  **/
  @Schema(description = "")
  public ECMContactPreferenceUpdate getContactPreference() {
    return contactPreference;
  }

  public void setContactPreference(ECMContactPreferenceUpdate contactPreference) {
    this.contactPreference = contactPreference;
  }

  public ECMApplicantUpdate contactConsent(ECMContactConsentUpdate contactConsent) {
    this.contactConsent = contactConsent;
    return this;
  }

   /**
   * Get contactConsent
   * @return contactConsent
  **/
  @Schema(description = "")
  public ECMContactConsentUpdate getContactConsent() {
    return contactConsent;
  }

  public void setContactConsent(ECMContactConsentUpdate contactConsent) {
    this.contactConsent = contactConsent;
  }

  public ECMApplicantUpdate additionalData(ECMAdditionalDataUpdate additionalData) {
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Get additionalData
   * @return additionalData
  **/
  @Schema(description = "")
  public ECMAdditionalDataUpdate getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(ECMAdditionalDataUpdate additionalData) {
    this.additionalData = additionalData;
  }

  public ECMApplicantUpdate marketingConsent(MarketingConsent marketingConsent) {
    this.marketingConsent = marketingConsent;
    return this;
  }

   /**
   * Get marketingConsent
   * @return marketingConsent
  **/
  @Schema(description = "")
  public MarketingConsent getMarketingConsent() {
    return marketingConsent;
  }

  public void setMarketingConsent(MarketingConsent marketingConsent) {
    this.marketingConsent = marketingConsent;
  }

  public ECMApplicantUpdate parentInformation(ECMParentInformationUpdate parentInformation) {
    this.parentInformation = parentInformation;
    return this;
  }

   /**
   * Get parentInformation
   * @return parentInformation
  **/
  @Schema(description = "")
  public ECMParentInformationUpdate getParentInformation() {
    return parentInformation;
  }

  public void setParentInformation(ECMParentInformationUpdate parentInformation) {
    this.parentInformation = parentInformation;
  }

  public ECMApplicantUpdate financialInformation(ECMFinancialInformationUpdate financialInformation) {
    this.financialInformation = financialInformation;
    return this;
  }

   /**
   * Get financialInformation
   * @return financialInformation
  **/
  @Schema(description = "")
  public ECMFinancialInformationUpdate getFinancialInformation() {
    return financialInformation;
  }

  public void setFinancialInformation(ECMFinancialInformationUpdate financialInformation) {
    this.financialInformation = financialInformation;
  }

  public ECMApplicantUpdate consentDetails(List<ECMConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
    return this;
  }

  public ECMApplicantUpdate addConsentDetailsItem(ECMConsentDetails consentDetailsItem) {
    if (this.consentDetails == null) {
      this.consentDetails = new ArrayList<ECMConsentDetails>();
    }
    this.consentDetails.add(consentDetailsItem);
    return this;
  }

   /**
   * Get consentDetails
   * @return consentDetails
  **/
  @Schema(description = "")
  public List<ECMConsentDetails> getConsentDetails() {
    return consentDetails;
  }

  public void setConsentDetails(List<ECMConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ECMApplicantUpdate ecMApplicantUpdate = (ECMApplicantUpdate) o;
    return Objects.equals(this.name, ecMApplicantUpdate.name) &&
        Objects.equals(this.demographics, ecMApplicantUpdate.demographics) &&
        Objects.equals(this.education, ecMApplicantUpdate.education) &&
        Objects.equals(this.identificationDocumentDetails, ecMApplicantUpdate.identificationDocumentDetails) &&
        Objects.equals(this.employmentDetails, ecMApplicantUpdate.employmentDetails) &&
        Objects.equals(this.phone, ecMApplicantUpdate.phone) &&
        Objects.equals(this.address, ecMApplicantUpdate.address) &&
        Objects.equals(this.contactPreference, ecMApplicantUpdate.contactPreference) &&
        Objects.equals(this.contactConsent, ecMApplicantUpdate.contactConsent) &&
        Objects.equals(this.additionalData, ecMApplicantUpdate.additionalData) &&
        Objects.equals(this.marketingConsent, ecMApplicantUpdate.marketingConsent) &&
        Objects.equals(this.parentInformation, ecMApplicantUpdate.parentInformation) &&
        Objects.equals(this.financialInformation, ecMApplicantUpdate.financialInformation) &&
        Objects.equals(this.consentDetails, ecMApplicantUpdate.consentDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, demographics, education, identificationDocumentDetails, employmentDetails, phone, address, contactPreference, contactConsent, additionalData, marketingConsent, parentInformation, financialInformation, consentDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ECMApplicantUpdate {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    demographics: ").append(toIndentedString(demographics)).append("\n");
    sb.append("    education: ").append(toIndentedString(education)).append("\n");
    sb.append("    identificationDocumentDetails: ").append(toIndentedString(identificationDocumentDetails)).append("\n");
    sb.append("    employmentDetails: ").append(toIndentedString(employmentDetails)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    contactPreference: ").append(toIndentedString(contactPreference)).append("\n");
    sb.append("    contactConsent: ").append(toIndentedString(contactConsent)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    marketingConsent: ").append(toIndentedString(marketingConsent)).append("\n");
    sb.append("    parentInformation: ").append(toIndentedString(parentInformation)).append("\n");
    sb.append("    financialInformation: ").append(toIndentedString(financialInformation)).append("\n");
    sb.append("    consentDetails: ").append(toIndentedString(consentDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
