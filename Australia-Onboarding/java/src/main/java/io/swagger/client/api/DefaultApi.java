/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApplicantAddRequest;
import io.swagger.client.model.ApplicantAddResponse;
import io.swagger.client.model.ApplicantDeleteRequest;
import io.swagger.client.model.ApplicantInquiryResponse;
import io.swagger.client.model.ApplicantUpdateRequest;
import io.swagger.client.model.ApplicationAddRequest;
import io.swagger.client.model.ApplicationAddResponse;
import io.swagger.client.model.ApplicationInquiryResponse;
import io.swagger.client.model.ApplicationStatusResponse;
import io.swagger.client.model.ApplicationUpdateRequest;
import io.swagger.client.model.ApplicationUpdateResponse;
import io.swagger.client.model.BackgroundScreeningRequest;
import io.swagger.client.model.BackgroundScreeningResponse;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.FinalSubmitRequest;
import io.swagger.client.model.InPrincipleApprovalRequest;
import io.swagger.client.model.InPrincipleApprovalResponse;
import io.swagger.client.model.InsertDocumentRequest;
import io.swagger.client.model.InsertDocumentResponse;
import io.swagger.client.model.OfferAcceptanceRequest;
import io.swagger.client.model.ProspectAddRequest;
import io.swagger.client.model.ProspectAddResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v1ApacOnboardingApplicationsApplicationIdDocumentsPost
     * @param body Insert the documents in documentum. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingApplicationsApplicationIdDocumentsPostCall(InsertDocumentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/applications/{applicationId}/documents"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingApplicationsApplicationIdDocumentsPostValidateBeforeCall(InsertDocumentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingApplicationsApplicationIdDocumentsPostCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload Application Documents
     * This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
     * @param body Insert the documents in documentum. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application. (required)
     * @return InsertDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InsertDocumentResponse v1ApacOnboardingApplicationsApplicationIdDocumentsPost(InsertDocumentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        ApiResponse<InsertDocumentResponse> resp = v1ApacOnboardingApplicationsApplicationIdDocumentsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
        return resp.getData();
    }

    /**
     * Upload Application Documents
     * This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
     * @param body Insert the documents in documentum. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application. (required)
     * @return ApiResponse&lt;InsertDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InsertDocumentResponse> v1ApacOnboardingApplicationsApplicationIdDocumentsPostWithHttpInfo(InsertDocumentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingApplicationsApplicationIdDocumentsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, null, null);
        Type localVarReturnType = new TypeToken<InsertDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload Application Documents (asynchronously)
     * This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.
     * @param body Insert the documents in documentum. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingApplicationsApplicationIdDocumentsPostAsync(InsertDocumentRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ApiCallback<InsertDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingApplicationsApplicationIdDocumentsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InsertDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param applicantId Unique ID created for an Applicant.. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutCall(ApplicantDeleteRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}/delete"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "applicantId" + "\\}", apiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutValidateBeforeCall(ApplicantDeleteRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut(Async)");
        }
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutCall(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Supp Applicant Delete
     * Allows primary card holder to delete the supplementary card application.
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param applicantId Unique ID created for an Applicant.. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut(ApplicantDeleteRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId) throws ApiException {
        v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId);
    }

    /**
     * Supp Applicant Delete
     * Allows primary card holder to delete the supplementary card application.
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param applicantId Unique ID created for an Applicant.. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutWithHttpInfo(ApplicantDeleteRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Supp Applicant Delete (asynchronously)
     * Allows primary card holder to delete the supplementary card application.
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param applicantId Unique ID created for an Applicant.. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsync(ApplicantDeleteRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param applicantId Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutCall(ApplicantUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "applicantId" + "\\}", apiClient.escapeString(applicantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutValidateBeforeCall(ApplicantUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut(Async)");
        }
        // verify the required parameter 'applicantId' is set
        if (applicantId == null) {
            throw new ApiException("Missing the required parameter 'applicantId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutCall(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Supp Applicant Update
     * Allows primary card holder to edit or update the supplementary card application details.
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param applicantId Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut(ApplicantUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId) throws ApiException {
        v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId);
    }

    /**
     * Supp Applicant Update
     * Allows primary card holder to edit or update the supplementary card application details.
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param applicantId Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutWithHttpInfo(ApplicantUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Supp Applicant Update (asynchronously)
     * Allows primary card holder to edit or update the supplementary card application details.
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param applicantId Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsync(ApplicantUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String applicantId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, applicantId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param controlFlowId It is used to control the flow for subsequent requests in the session. (required)
     * @param applicantId Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetCall(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId, String applicantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicantId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applicantId", applicantId));
        if (controlFlowId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("controlFlowId", controlFlowId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId, String applicantId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet(Async)");
        }
        // verify the required parameter 'controlFlowId' is set
        if (controlFlowId == null) {
            throw new ApiException("Missing the required parameter 'controlFlowId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetCall(authorization, uuid, accept, clientId, applicationId, controlFlowId, applicantId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Supp Applicant Inquiry
     * This API returns supplementary application details for the specific supplementary application id.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param controlFlowId It is used to control the flow for subsequent requests in the session. (required)
     * @param applicantId Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)
     * @return ApplicantInquiryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicantInquiryResponse v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId, String applicantId) throws ApiException {
        ApiResponse<ApplicantInquiryResponse> resp = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetWithHttpInfo(authorization, uuid, accept, clientId, applicationId, controlFlowId, applicantId);
        return resp.getData();
    }

    /**
     * Supp Applicant Inquiry
     * This API returns supplementary application details for the specific supplementary application id.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param controlFlowId It is used to control the flow for subsequent requests in the session. (required)
     * @param applicantId Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)
     * @return ApiResponse&lt;ApplicantInquiryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicantInquiryResponse> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetWithHttpInfo(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId, String applicantId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetValidateBeforeCall(authorization, uuid, accept, clientId, applicationId, controlFlowId, applicantId, null, null);
        Type localVarReturnType = new TypeToken<ApplicantInquiryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Supp Applicant Inquiry (asynchronously)
     * This API returns supplementary application details for the specific supplementary application id.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param controlFlowId It is used to control the flow for subsequent requests in the session. (required)
     * @param applicantId Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsync(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId, String applicantId, final ApiCallback<ApplicantInquiryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetValidateBeforeCall(authorization, uuid, accept, clientId, applicationId, controlFlowId, applicantId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicantInquiryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostCall(ApplicantAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostValidateBeforeCall(ApplicantAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Supp Applicant Add
     * This API creates a new supplementary card application along with primary card application.
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @return ApplicantAddResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicantAddResponse v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost(ApplicantAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        ApiResponse<ApplicantAddResponse> resp = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
        return resp.getData();
    }

    /**
     * Supp Applicant Add
     * This API creates a new supplementary card application along with primary card application.
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @return ApiResponse&lt;ApplicantAddResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicantAddResponse> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostWithHttpInfo(ApplicantAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, null, null);
        Type localVarReturnType = new TypeToken<ApplicantAddResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Supp Applicant Add (asynchronously)
     * This API creates a new supplementary card application along with primary card application.
     * @param body Add applicant details to the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Types that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsync(ApplicantAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ApiCallback<ApplicantAddResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicantAddResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostCall(BackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/backgroundScreening"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostValidateBeforeCall(BackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Screen Unsecured Credit Application
     * This API submits the specified unsecured credit application for screening.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application (required)
     * @return BackgroundScreeningResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackgroundScreeningResponse v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost(BackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        ApiResponse<BackgroundScreeningResponse> resp = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
        return resp.getData();
    }

    /**
     * Screen Unsecured Credit Application
     * This API submits the specified unsecured credit application for screening.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application (required)
     * @return ApiResponse&lt;BackgroundScreeningResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackgroundScreeningResponse> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostWithHttpInfo(BackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, null, null);
        Type localVarReturnType = new TypeToken<BackgroundScreeningResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Screen Unsecured Credit Application (asynchronously)
     * This API submits the specified unsecured credit application for screening.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsync(BackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ApiCallback<BackgroundScreeningResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackgroundScreeningResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param applicationId Unique identifier for the application. (required)
     * @param controlFlowId Control flow id is used to control the flow for subsequent requests in the session. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetCall(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (controlFlowId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("controlFlowId", controlFlowId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetCall(authorization, uuid, accept, clientId, applicationId, controlFlowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Application Inquiry
     * This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param applicationId Unique identifier for the application. (required)
     * @param controlFlowId Control flow id is used to control the flow for subsequent requests in the session. (optional)
     * @return ApplicationInquiryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicationInquiryResponse v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId) throws ApiException {
        ApiResponse<ApplicationInquiryResponse> resp = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetWithHttpInfo(authorization, uuid, accept, clientId, applicationId, controlFlowId);
        return resp.getData();
    }

    /**
     * Application Inquiry
     * This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param applicationId Unique identifier for the application. (required)
     * @param controlFlowId Control flow id is used to control the flow for subsequent requests in the session. (optional)
     * @return ApiResponse&lt;ApplicationInquiryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicationInquiryResponse> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetWithHttpInfo(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetValidateBeforeCall(authorization, uuid, accept, clientId, applicationId, controlFlowId, null, null);
        Type localVarReturnType = new TypeToken<ApplicationInquiryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Application Inquiry (asynchronously)
     * This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param applicationId Unique identifier for the application. (required)
     * @param controlFlowId Control flow id is used to control the flow for subsequent requests in the session. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsync(String authorization, String uuid, String accept, String clientId, String applicationId, String controlFlowId, final ApiCallback<ApplicationInquiryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetValidateBeforeCall(authorization, uuid, accept, clientId, applicationId, controlFlowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicationInquiryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId the ID of the application (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostCall(InPrincipleApprovalRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/inPrincipleApprovals"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostValidateBeforeCall(InPrincipleApprovalRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request Credit Application Decision
     * This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId the ID of the application (required)
     * @return InPrincipleApprovalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InPrincipleApprovalResponse v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost(InPrincipleApprovalRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        ApiResponse<InPrincipleApprovalResponse> resp = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
        return resp.getData();
    }

    /**
     * Request Credit Application Decision
     * This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId the ID of the application (required)
     * @return ApiResponse&lt;InPrincipleApprovalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InPrincipleApprovalResponse> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostWithHttpInfo(InPrincipleApprovalRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, null, null);
        Type localVarReturnType = new TypeToken<InPrincipleApprovalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request Credit Application Decision (asynchronously)
     * This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId the ID of the application (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsync(InPrincipleApprovalRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ApiCallback<InPrincipleApprovalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InPrincipleApprovalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost
     * @param body Input Data to accept the product offered in the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId the ID of the application (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostCall(OfferAcceptanceRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/offerAcceptance"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostValidateBeforeCall(OfferAcceptanceRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Accept Cross Sell Products
     * This API accepts specified cross-sell product offers that were returned in the application decision.
     * @param body Input Data to accept the product offered in the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId the ID of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost(OfferAcceptanceRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
    }

    /**
     * Accept Cross Sell Products
     * This API accepts specified cross-sell product offers that were returned in the application decision.
     * @param body Input Data to accept the product offered in the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId the ID of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostWithHttpInfo(OfferAcceptanceRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Accept Cross Sell Products (asynchronously)
     * This API accepts specified cross-sell product offers that were returned in the application decision.
     * @param body Input Data to accept the product offered in the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId the ID of the application (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsync(OfferAcceptanceRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut
     * @param body Input Data to submit the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutCall(ApplicationUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutValidateBeforeCall(ApplicationUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Unsecured Credit Application
     * This API updates a saved application to correct information that was previously blank.
     * @param body Input Data to submit the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @return ApplicationUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicationUpdateResponse v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut(ApplicationUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        ApiResponse<ApplicationUpdateResponse> resp = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
        return resp.getData();
    }

    /**
     * Update Unsecured Credit Application
     * This API updates a saved application to correct information that was previously blank.
     * @param body Input Data to submit the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @return ApiResponse&lt;ApplicationUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicationUpdateResponse> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutWithHttpInfo(ApplicationUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, null, null);
        Type localVarReturnType = new TypeToken<ApplicationUpdateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Unsecured Credit Application (asynchronously)
     * This API updates a saved application to correct information that was previously blank.
     * @param body Input Data to submit the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsync(ApplicationUpdateRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ApiCallback<ApplicationUpdateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicationUpdateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet
     * @param applicationId the ID of the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param controlFlowId Control Flow Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetCall(String applicationId, String authorization, String uuid, String accept, String clientId, String controlFlowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/status"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (controlFlowId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("controlFlowId", controlFlowId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetValidateBeforeCall(String applicationId, String authorization, String uuid, String accept, String clientId, String controlFlowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet(Async)");
        }
        // verify the required parameter 'controlFlowId' is set
        if (controlFlowId == null) {
            throw new ApiException("Missing the required parameter 'controlFlowId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetCall(applicationId, authorization, uuid, accept, clientId, controlFlowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check Application Status
     * This API returns the status for a specified submitted application and takes the application id as parameter.
     * @param applicationId the ID of the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param controlFlowId Control Flow Id (required)
     * @return ApplicationStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicationStatusResponse v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet(String applicationId, String authorization, String uuid, String accept, String clientId, String controlFlowId) throws ApiException {
        ApiResponse<ApplicationStatusResponse> resp = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetWithHttpInfo(applicationId, authorization, uuid, accept, clientId, controlFlowId);
        return resp.getData();
    }

    /**
     * Check Application Status
     * This API returns the status for a specified submitted application and takes the application id as parameter.
     * @param applicationId the ID of the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param controlFlowId Control Flow Id (required)
     * @return ApiResponse&lt;ApplicationStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicationStatusResponse> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetWithHttpInfo(String applicationId, String authorization, String uuid, String accept, String clientId, String controlFlowId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetValidateBeforeCall(applicationId, authorization, uuid, accept, clientId, controlFlowId, null, null);
        Type localVarReturnType = new TypeToken<ApplicationStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check Application Status (asynchronously)
     * This API returns the status for a specified submitted application and takes the application id as parameter.
     * @param applicationId the ID of the application (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param controlFlowId Control Flow Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsync(String applicationId, String authorization, String uuid, String accept, String clientId, String controlFlowId, final ApiCallback<ApplicationStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetValidateBeforeCall(applicationId, authorization, uuid, accept, clientId, controlFlowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicationStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostCall(FinalSubmitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications/{applicationId}/submission"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostValidateBeforeCall(FinalSubmitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Submit Application
     * This API submits the created application to host systems for a particular application id.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost(FinalSubmitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId);
    }

    /**
     * Submit Application
     * This API submits the created application to host systems for a particular application id.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostWithHttpInfo(FinalSubmitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Submit Application (asynchronously)
     * This API submits the created application to host systems for a particular application id.
     * @param body  (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId The unique identifier of the application. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsync(FinalSubmitRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProductsUnsecuredApplicationsPost
     * @param body Input Data to submit the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsPostCall(ApplicationAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/products/unsecured/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsPostValidateBeforeCall(ApplicationAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProductsUnsecuredApplicationsPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProductsUnsecuredApplicationsPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProductsUnsecuredApplicationsPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProductsUnsecuredApplicationsPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProductsUnsecuredApplicationsPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProductsUnsecuredApplicationsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsPostCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Unsecured Credit Application
     * This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
     * @param body Input Data to submit the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response (optional)
     * @return ApplicationAddResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplicationAddResponse v1ApacOnboardingProductsUnsecuredApplicationsPost(ApplicationAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage) throws ApiException {
        ApiResponse<ApplicationAddResponse> resp = v1ApacOnboardingProductsUnsecuredApplicationsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, acceptLanguage);
        return resp.getData();
    }

    /**
     * Create Unsecured Credit Application
     * This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
     * @param body Input Data to submit the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response (optional)
     * @return ApiResponse&lt;ApplicationAddResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplicationAddResponse> v1ApacOnboardingProductsUnsecuredApplicationsPostWithHttpInfo(ApplicationAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ApplicationAddResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Unsecured Credit Application (asynchronously)
     * This API pre-populates an application for card and banking products with the applicant&#x27;s details. The API will then return an application id that can be used to perform actions on the application and check status.
     * @param body Input Data to submit the application. (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param acceptLanguage List of acceptable human languages for response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProductsUnsecuredApplicationsPostAsync(ApplicationAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String acceptLanguage, final ApiCallback<ApplicationAddResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProductsUnsecuredApplicationsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplicationAddResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1ApacOnboardingProspectsPost
     * @param body Prospect Add Request (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProspectsPostCall(ProspectAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/apac/onboarding/prospects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1ApacOnboardingProspectsPostValidateBeforeCall(ProspectAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v1ApacOnboardingProspectsPost(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling v1ApacOnboardingProspectsPost(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling v1ApacOnboardingProspectsPost(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling v1ApacOnboardingProspectsPost(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling v1ApacOnboardingProspectsPost(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling v1ApacOnboardingProspectsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = v1ApacOnboardingProspectsPostCall(body, authorization, uuid, accept, clientId, contentType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Submit Prospect
     * This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
     * @param body Prospect Add Request (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @return ProspectAddResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProspectAddResponse v1ApacOnboardingProspectsPost(ProspectAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType) throws ApiException {
        ApiResponse<ProspectAddResponse> resp = v1ApacOnboardingProspectsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
        return resp.getData();
    }

    /**
     * Submit Prospect
     * This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
     * @param body Prospect Add Request (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @return ApiResponse&lt;ProspectAddResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProspectAddResponse> v1ApacOnboardingProspectsPostWithHttpInfo(ProspectAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType) throws ApiException {
        com.squareup.okhttp.Call call = v1ApacOnboardingProspectsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, null, null);
        Type localVarReturnType = new TypeToken<ProspectAddResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit Prospect (asynchronously)
     * This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.
     * @param body Prospect Add Request (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1ApacOnboardingProspectsPostAsync(ProspectAddRequest body, String authorization, String uuid, String accept, String clientId, String contentType, final ApiCallback<ProspectAddResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1ApacOnboardingProspectsPostValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProspectAddResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
