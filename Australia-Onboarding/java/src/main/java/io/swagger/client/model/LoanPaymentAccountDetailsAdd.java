/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LoanPaymentAccountDetailsAdd
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class LoanPaymentAccountDetailsAdd {
  @SerializedName("disbursementAmount")
  private Double disbursementAmount = null;

  @SerializedName("loanDisbursementMethod")
  private String loanDisbursementMethod = null;

  @SerializedName("accountNumber")
  private String accountNumber = null;

  @SerializedName("accountReferenceKey")
  private String accountReferenceKey = null;

  @SerializedName("accountNickName")
  private String accountNickName = null;

  @SerializedName("bankName")
  private String bankName = null;

  @SerializedName("bankCode")
  private String bankCode = null;

  @SerializedName("branchCode")
  private String branchCode = null;

  public LoanPaymentAccountDetailsAdd disbursementAmount(Double disbursementAmount) {
    this.disbursementAmount = disbursementAmount;
    return this;
  }

   /**
   * Disbursement Amount to the applicant
   * @return disbursementAmount
  **/
  @Schema(example = "2100.0", description = "Disbursement Amount to the applicant")
  public Double getDisbursementAmount() {
    return disbursementAmount;
  }

  public void setDisbursementAmount(Double disbursementAmount) {
    this.disbursementAmount = disbursementAmount;
  }

  public LoanPaymentAccountDetailsAdd loanDisbursementMethod(String loanDisbursementMethod) {
    this.loanDisbursementMethod = loanDisbursementMethod;
    return this;
  }

   /**
   * Loan disbursement method for the unsecured loan product selected by the applicant.This a reference data field. Please use /utilities/referenceData/{disbursementType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.
   * @return loanDisbursementMethod
  **/
  @Schema(example = "BANK_ACCOUNT", description = "Loan disbursement method for the unsecured loan product selected by the applicant.This a reference data field. Please use /utilities/referenceData/{disbursementType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.")
  public String getLoanDisbursementMethod() {
    return loanDisbursementMethod;
  }

  public void setLoanDisbursementMethod(String loanDisbursementMethod) {
    this.loanDisbursementMethod = loanDisbursementMethod;
  }

  public LoanPaymentAccountDetailsAdd accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Account number of the payee.
   * @return accountNumber
  **/
  @Schema(example = "9125812364", required = true, description = "Account number of the payee.")
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public LoanPaymentAccountDetailsAdd accountReferenceKey(String accountReferenceKey) {
    this.accountReferenceKey = accountReferenceKey;
    return this;
  }

   /**
   * Account reference key to link account in a customer session,
   * @return accountReferenceKey
  **/
  @Schema(example = "11000111234", description = "Account reference key to link account in a customer session,")
  public String getAccountReferenceKey() {
    return accountReferenceKey;
  }

  public void setAccountReferenceKey(String accountReferenceKey) {
    this.accountReferenceKey = accountReferenceKey;
  }

  public LoanPaymentAccountDetailsAdd accountNickName(String accountNickName) {
    this.accountNickName = accountNickName;
    return this;
  }

   /**
   * The nick name of the account assigned by the customer
   * @return accountNickName
  **/
  @Schema(example = "James", description = "The nick name of the account assigned by the customer")
  public String getAccountNickName() {
    return accountNickName;
  }

  public void setAccountNickName(String accountNickName) {
    this.accountNickName = accountNickName;
  }

  public LoanPaymentAccountDetailsAdd bankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

   /**
   * Indicates the bank name of the customer&#x27;s account to which the loan amount will be transferred. Also, indicates the bank name of the customer&#x27;s account from which the repayment of the loan will be debited. Please use /v1/utilities/referenceData/{bankName} resource to get valid value of this field with description.
   * @return bankName
  **/
  @Schema(example = "Westpac Banking Corporation", required = true, description = "Indicates the bank name of the customer's account to which the loan amount will be transferred. Also, indicates the bank name of the customer's account from which the repayment of the loan will be debited. Please use /v1/utilities/referenceData/{bankName} resource to get valid value of this field with description.")
  public String getBankName() {
    return bankName;
  }

  public void setBankName(String bankName) {
    this.bankName = bankName;
  }

  public LoanPaymentAccountDetailsAdd bankCode(String bankCode) {
    this.bankCode = bankCode;
    return this;
  }

   /**
   * This field is to indicate the bank code.
   * @return bankCode
  **/
  @Schema(example = "101", description = "This field is to indicate the bank code.")
  public String getBankCode() {
    return bankCode;
  }

  public void setBankCode(String bankCode) {
    this.bankCode = bankCode;
  }

  public LoanPaymentAccountDetailsAdd branchCode(String branchCode) {
    this.branchCode = branchCode;
    return this;
  }

   /**
   * This field is to indicate the branch code of the bank.
   * @return branchCode
  **/
  @Schema(example = "242200", required = true, description = "This field is to indicate the branch code of the bank.")
  public String getBranchCode() {
    return branchCode;
  }

  public void setBranchCode(String branchCode) {
    this.branchCode = branchCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanPaymentAccountDetailsAdd loanPaymentAccountDetailsAdd = (LoanPaymentAccountDetailsAdd) o;
    return Objects.equals(this.disbursementAmount, loanPaymentAccountDetailsAdd.disbursementAmount) &&
        Objects.equals(this.loanDisbursementMethod, loanPaymentAccountDetailsAdd.loanDisbursementMethod) &&
        Objects.equals(this.accountNumber, loanPaymentAccountDetailsAdd.accountNumber) &&
        Objects.equals(this.accountReferenceKey, loanPaymentAccountDetailsAdd.accountReferenceKey) &&
        Objects.equals(this.accountNickName, loanPaymentAccountDetailsAdd.accountNickName) &&
        Objects.equals(this.bankName, loanPaymentAccountDetailsAdd.bankName) &&
        Objects.equals(this.bankCode, loanPaymentAccountDetailsAdd.bankCode) &&
        Objects.equals(this.branchCode, loanPaymentAccountDetailsAdd.branchCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disbursementAmount, loanDisbursementMethod, accountNumber, accountReferenceKey, accountNickName, bankName, bankCode, branchCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanPaymentAccountDetailsAdd {\n");
    
    sb.append("    disbursementAmount: ").append(toIndentedString(disbursementAmount)).append("\n");
    sb.append("    loanDisbursementMethod: ").append(toIndentedString(loanDisbursementMethod)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountReferenceKey: ").append(toIndentedString(accountReferenceKey)).append("\n");
    sb.append("    accountNickName: ").append(toIndentedString(accountNickName)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("    branchCode: ").append(toIndentedString(branchCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
