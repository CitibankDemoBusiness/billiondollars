/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BankDetails;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LoanRepaymentDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class LoanRepaymentDetails {
  @SerializedName("loanAmount")
  private Double loanAmount = null;

  @SerializedName("loanRepaymentMethod")
  private String loanRepaymentMethod = null;

  @SerializedName("paymentAccountNumber")
  private String paymentAccountNumber = null;

  @SerializedName("accountReferenceKey")
  private String accountReferenceKey = null;

  @SerializedName("accountNickName")
  private String accountNickName = null;

  @SerializedName("bankDetails")
  private BankDetails bankDetails = null;

  public LoanRepaymentDetails loanAmount(Double loanAmount) {
    this.loanAmount = loanAmount;
    return this;
  }

   /**
   * Requested disbursement amount
   * @return loanAmount
  **/
  @Schema(description = "Requested disbursement amount")
  public Double getLoanAmount() {
    return loanAmount;
  }

  public void setLoanAmount(Double loanAmount) {
    this.loanAmount = loanAmount;
  }

  public LoanRepaymentDetails loanRepaymentMethod(String loanRepaymentMethod) {
    this.loanRepaymentMethod = loanRepaymentMethod;
    return this;
  }

   /**
   * Loan repayment method for the unsecured loan selected by the applicant Ex:SI,PDC,UAE Exchange,Direct Debit,Manual Direct Debit Please use /v1/utilities/referenceData/{loanRepaymentMethod} resource to get valid value of this field with description.
   * @return loanRepaymentMethod
  **/
  @Schema(example = "BANK_ACCOUNT", description = "Loan repayment method for the unsecured loan selected by the applicant Ex:SI,PDC,UAE Exchange,Direct Debit,Manual Direct Debit Please use /v1/utilities/referenceData/{loanRepaymentMethod} resource to get valid value of this field with description.")
  public String getLoanRepaymentMethod() {
    return loanRepaymentMethod;
  }

  public void setLoanRepaymentMethod(String loanRepaymentMethod) {
    this.loanRepaymentMethod = loanRepaymentMethod;
  }

  public LoanRepaymentDetails paymentAccountNumber(String paymentAccountNumber) {
    this.paymentAccountNumber = paymentAccountNumber;
    return this;
  }

   /**
   * Payment account number associated with the bank   through which the loan repayment is carried out  by the applicant
   * @return paymentAccountNumber
  **/
  @Schema(example = "XXXXXX2364/1000002364", description = "Payment account number associated with the bank   through which the loan repayment is carried out  by the applicant")
  public String getPaymentAccountNumber() {
    return paymentAccountNumber;
  }

  public void setPaymentAccountNumber(String paymentAccountNumber) {
    this.paymentAccountNumber = paymentAccountNumber;
  }

  public LoanRepaymentDetails accountReferenceKey(String accountReferenceKey) {
    this.accountReferenceKey = accountReferenceKey;
    return this;
  }

   /**
   * Account reference key to link account in a customer session,
   * @return accountReferenceKey
  **/
  @Schema(example = "11000111234", description = "Account reference key to link account in a customer session,")
  public String getAccountReferenceKey() {
    return accountReferenceKey;
  }

  public void setAccountReferenceKey(String accountReferenceKey) {
    this.accountReferenceKey = accountReferenceKey;
  }

  public LoanRepaymentDetails accountNickName(String accountNickName) {
    this.accountNickName = accountNickName;
    return this;
  }

   /**
   * The nick name of the account assigned by the customer
   * @return accountNickName
  **/
  @Schema(example = "James", description = "The nick name of the account assigned by the customer")
  public String getAccountNickName() {
    return accountNickName;
  }

  public void setAccountNickName(String accountNickName) {
    this.accountNickName = accountNickName;
  }

  public LoanRepaymentDetails bankDetails(BankDetails bankDetails) {
    this.bankDetails = bankDetails;
    return this;
  }

   /**
   * Get bankDetails
   * @return bankDetails
  **/
  @Schema(description = "")
  public BankDetails getBankDetails() {
    return bankDetails;
  }

  public void setBankDetails(BankDetails bankDetails) {
    this.bankDetails = bankDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanRepaymentDetails loanRepaymentDetails = (LoanRepaymentDetails) o;
    return Objects.equals(this.loanAmount, loanRepaymentDetails.loanAmount) &&
        Objects.equals(this.loanRepaymentMethod, loanRepaymentDetails.loanRepaymentMethod) &&
        Objects.equals(this.paymentAccountNumber, loanRepaymentDetails.paymentAccountNumber) &&
        Objects.equals(this.accountReferenceKey, loanRepaymentDetails.accountReferenceKey) &&
        Objects.equals(this.accountNickName, loanRepaymentDetails.accountNickName) &&
        Objects.equals(this.bankDetails, loanRepaymentDetails.bankDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loanAmount, loanRepaymentMethod, paymentAccountNumber, accountReferenceKey, accountNickName, bankDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanRepaymentDetails {\n");
    
    sb.append("    loanAmount: ").append(toIndentedString(loanAmount)).append("\n");
    sb.append("    loanRepaymentMethod: ").append(toIndentedString(loanRepaymentMethod)).append("\n");
    sb.append("    paymentAccountNumber: ").append(toIndentedString(paymentAccountNumber)).append("\n");
    sb.append("    accountReferenceKey: ").append(toIndentedString(accountReferenceKey)).append("\n");
    sb.append("    accountNickName: ").append(toIndentedString(accountNickName)).append("\n");
    sb.append("    bankDetails: ").append(toIndentedString(bankDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
