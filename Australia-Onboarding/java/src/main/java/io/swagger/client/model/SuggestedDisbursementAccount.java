/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SuggestedDisbursementAccount
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class SuggestedDisbursementAccount {
  @SerializedName("displayAccountNumber")
  private String displayAccountNumber = null;

  @SerializedName("accountReferenceKey")
  private String accountReferenceKey = null;

  @SerializedName("accountType")
  private String accountType = null;

  @SerializedName("bankName")
  private String bankName = null;

  @SerializedName("currentDdaFlag")
  private Boolean currentDdaFlag = null;

  public SuggestedDisbursementAccount displayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
    return this;
  }

   /**
   * A masked account number that can be displayed to the customer
   * @return displayAccountNumber
  **/
  @Schema(example = "XXXXXX2391", description = "A masked account number that can be displayed to the customer")
  public String getDisplayAccountNumber() {
    return displayAccountNumber;
  }

  public void setDisplayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
  }

  public SuggestedDisbursementAccount accountReferenceKey(String accountReferenceKey) {
    this.accountReferenceKey = accountReferenceKey;
    return this;
  }

   /**
   * Account reference key for linking account in a customer session.
   * @return accountReferenceKey
  **/
  @Schema(example = "11000111234", description = "Account reference key for linking account in a customer session.")
  public String getAccountReferenceKey() {
    return accountReferenceKey;
  }

  public void setAccountReferenceKey(String accountReferenceKey) {
    this.accountReferenceKey = accountReferenceKey;
  }

  public SuggestedDisbursementAccount accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

   /**
   * Type of the account. This is a reference data field. Please use /v1/utilities/referenceData/{accountType} resource to get valid value of this field with description.
   * @return accountType
  **/
  @Schema(example = "SAVING_ACCOUNT", description = "Type of the account. This is a reference data field. Please use /v1/utilities/referenceData/{accountType} resource to get valid value of this field with description.")
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }

  public SuggestedDisbursementAccount bankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

   /**
   * bank name to be displayed to customer
   * @return bankName
  **/
  @Schema(example = "CITIBANK (HONG KONG) LIMITED", description = "bank name to be displayed to customer")
  public String getBankName() {
    return bankName;
  }

  public void setBankName(String bankName) {
    this.bankName = bankName;
  }

  public SuggestedDisbursementAccount currentDdaFlag(Boolean currentDdaFlag) {
    this.currentDdaFlag = currentDdaFlag;
    return this;
  }

   /**
   * Identifies whether account is current direct disbursement account or not. Valid values: true and false
   * @return currentDdaFlag
  **/
  @Schema(example = "true", description = "Identifies whether account is current direct disbursement account or not. Valid values: true and false")
  public Boolean isCurrentDdaFlag() {
    return currentDdaFlag;
  }

  public void setCurrentDdaFlag(Boolean currentDdaFlag) {
    this.currentDdaFlag = currentDdaFlag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestedDisbursementAccount suggestedDisbursementAccount = (SuggestedDisbursementAccount) o;
    return Objects.equals(this.displayAccountNumber, suggestedDisbursementAccount.displayAccountNumber) &&
        Objects.equals(this.accountReferenceKey, suggestedDisbursementAccount.accountReferenceKey) &&
        Objects.equals(this.accountType, suggestedDisbursementAccount.accountType) &&
        Objects.equals(this.bankName, suggestedDisbursementAccount.bankName) &&
        Objects.equals(this.currentDdaFlag, suggestedDisbursementAccount.currentDdaFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayAccountNumber, accountReferenceKey, accountType, bankName, currentDdaFlag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestedDisbursementAccount {\n");
    
    sb.append("    displayAccountNumber: ").append(toIndentedString(displayAccountNumber)).append("\n");
    sb.append("    accountReferenceKey: ").append(toIndentedString(accountReferenceKey)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    currentDdaFlag: ").append(toIndentedString(currentDdaFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
