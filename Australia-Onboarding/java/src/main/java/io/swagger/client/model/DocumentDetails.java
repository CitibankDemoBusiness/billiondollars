/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DocumentDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class DocumentDetails {
  @SerializedName("documentIdType")
  private String documentIdType = null;

  @SerializedName("documentFormat")
  private String documentFormat = null;

  @SerializedName("proofType")
  private String proofType = null;

  @SerializedName("applicantType")
  private String applicantType = null;

  @SerializedName("applicantId")
  private String applicantId = null;

  @SerializedName("binaryData")
  private String binaryData = null;

  public DocumentDetails documentIdType(String documentIdType) {
    this.documentIdType = documentIdType;
    return this;
  }

   /**
   * Document ID for each proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get possible value of this field with description. You can use the documentIdType as the referenceCode parameter to retrieve the values.
   * @return documentIdType
  **/
  @Schema(example = "PAYSLIP", required = true, description = "Document ID for each proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get possible value of this field with description. You can use the documentIdType as the referenceCode parameter to retrieve the values.")
  public String getDocumentIdType() {
    return documentIdType;
  }

  public void setDocumentIdType(String documentIdType) {
    this.documentIdType = documentIdType;
  }

  public DocumentDetails documentFormat(String documentFormat) {
    this.documentFormat = documentFormat;
    return this;
  }

   /**
   * Format of the scanned document.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentFormat} resource to get possible value of this field with description. You can use the documentFormat as the referenceCode parameter to retrieve the values.
   * @return documentFormat
  **/
  @Schema(example = "PDF", required = true, description = "Format of the scanned document.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentFormat} resource to get possible value of this field with description. You can use the documentFormat as the referenceCode parameter to retrieve the values.")
  public String getDocumentFormat() {
    return documentFormat;
  }

  public void setDocumentFormat(String documentFormat) {
    this.documentFormat = documentFormat;
  }

  public DocumentDetails proofType(String proofType) {
    this.proofType = proofType;
    return this;
  }

   /**
   * Classification of the document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values.
   * @return proofType
  **/
  @Schema(example = "INCOME_PROOF", required = true, description = "Classification of the document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values.")
  public String getProofType() {
    return proofType;
  }

  public void setProofType(String proofType) {
    this.proofType = proofType;
  }

  public DocumentDetails applicantType(String applicantType) {
    this.applicantType = applicantType;
    return this;
  }

   /**
   * Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the applicantType as the referenceCode parameter to retrieve the values.
   * @return applicantType
  **/
  @Schema(example = "SUPPLEMENTARY", description = "Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the applicantType as the referenceCode parameter to retrieve the values.")
  public String getApplicantType() {
    return applicantType;
  }

  public void setApplicantType(String applicantType) {
    this.applicantType = applicantType;
  }

  public DocumentDetails applicantId(String applicantId) {
    this.applicantId = applicantId;
    return this;
  }

   /**
   * Unique identifier to be provided for a supplementary applicant.
   * @return applicantId
  **/
  @Schema(example = "C$ZOW9IO793854", description = "Unique identifier to be provided for a supplementary applicant.")
  public String getApplicantId() {
    return applicantId;
  }

  public void setApplicantId(String applicantId) {
    this.applicantId = applicantId;
  }

  public DocumentDetails binaryData(String binaryData) {
    this.binaryData = binaryData;
    return this;
  }

   /**
   * This field contains binary data of the uploaded document.
   * @return binaryData
  **/
  @Schema(example = "0101010001101000011010010111001100100000011001100110100101100101011011000110010000100000011000110110", required = true, description = "This field contains binary data of the uploaded document.")
  public String getBinaryData() {
    return binaryData;
  }

  public void setBinaryData(String binaryData) {
    this.binaryData = binaryData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentDetails documentDetails = (DocumentDetails) o;
    return Objects.equals(this.documentIdType, documentDetails.documentIdType) &&
        Objects.equals(this.documentFormat, documentDetails.documentFormat) &&
        Objects.equals(this.proofType, documentDetails.proofType) &&
        Objects.equals(this.applicantType, documentDetails.applicantType) &&
        Objects.equals(this.applicantId, documentDetails.applicantId) &&
        Objects.equals(this.binaryData, documentDetails.binaryData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentIdType, documentFormat, proofType, applicantType, applicantId, binaryData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentDetails {\n");
    
    sb.append("    documentIdType: ").append(toIndentedString(documentIdType)).append("\n");
    sb.append("    documentFormat: ").append(toIndentedString(documentFormat)).append("\n");
    sb.append("    proofType: ").append(toIndentedString(proofType)).append("\n");
    sb.append("    applicantType: ").append(toIndentedString(applicantType)).append("\n");
    sb.append("    applicantId: ").append(toIndentedString(applicantId)).append("\n");
    sb.append("    binaryData: ").append(toIndentedString(binaryData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
