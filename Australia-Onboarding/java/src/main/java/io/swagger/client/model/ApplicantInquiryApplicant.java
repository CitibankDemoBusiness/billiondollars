/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ApplicantInquiryAdditionalData;
import io.swagger.client.model.ApplicantInquiryAddress;
import io.swagger.client.model.ApplicantInquiryConsentDetails;
import io.swagger.client.model.ApplicantInquiryContactConsent;
import io.swagger.client.model.ApplicantInquiryDemographics;
import io.swagger.client.model.ApplicantInquiryEmail;
import io.swagger.client.model.ApplicantInquiryEmploymentDetails;
import io.swagger.client.model.ApplicantInquiryFinancialInformation;
import io.swagger.client.model.ApplicantInquiryIdentificationDocumentDetails;
import io.swagger.client.model.ApplicantInquiryKycInformation;
import io.swagger.client.model.ApplicantInquiryName;
import io.swagger.client.model.ApplicantInquiryPartnerCustomerDetails;
import io.swagger.client.model.ApplicantInquiryPhone;
import io.swagger.client.model.ApplicantInquiryRequiredDocuments;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ApplicantInquiryApplicant
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class ApplicantInquiryApplicant {
  @SerializedName("applicantType")
  private String applicantType = null;

  @SerializedName("applicantId")
  private String applicantId = null;

  @SerializedName("motherMaidenName")
  private String motherMaidenName = null;

  @SerializedName("name")
  private ApplicantInquiryName name = null;

  @SerializedName("demographics")
  private ApplicantInquiryDemographics demographics = null;

  @SerializedName("address")
  private List<ApplicantInquiryAddress> address = null;

  @SerializedName("email")
  private List<ApplicantInquiryEmail> email = null;

  @SerializedName("phone")
  private List<ApplicantInquiryPhone> phone = null;

  @SerializedName("financialInformation")
  private ApplicantInquiryFinancialInformation financialInformation = null;

  @SerializedName("employmentDetails")
  private List<ApplicantInquiryEmploymentDetails> employmentDetails = null;

  @SerializedName("identificationDocumentDetails")
  private List<ApplicantInquiryIdentificationDocumentDetails> identificationDocumentDetails = null;

  @SerializedName("additionalData")
  private ApplicantInquiryAdditionalData additionalData = null;

  @SerializedName("partnerCustomerDetails")
  private ApplicantInquiryPartnerCustomerDetails partnerCustomerDetails = null;

  @SerializedName("consentDetails")
  private List<ApplicantInquiryConsentDetails> consentDetails = null;

  @SerializedName("requiredDocuments")
  private List<ApplicantInquiryRequiredDocuments> requiredDocuments = null;

  @SerializedName("kycInformation")
  private ApplicantInquiryKycInformation kycInformation = null;

  @SerializedName("contactConsent")
  private ApplicantInquiryContactConsent contactConsent = null;

  public ApplicantInquiryApplicant applicantType(String applicantType) {
    this.applicantType = applicantType;
    return this;
  }

   /**
   * Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.
   * @return applicantType
  **/
  @Schema(example = "SUPPLEMENTARY", required = true, description = "Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.")
  public String getApplicantType() {
    return applicantType;
  }

  public void setApplicantType(String applicantType) {
    this.applicantType = applicantType;
  }

  public ApplicantInquiryApplicant applicantId(String applicantId) {
    this.applicantId = applicantId;
    return this;
  }

   /**
   * Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.
   * @return applicantId
  **/
  @Schema(example = "Z012378545", description = "Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.")
  public String getApplicantId() {
    return applicantId;
  }

  public void setApplicantId(String applicantId) {
    this.applicantId = applicantId;
  }

  public ApplicantInquiryApplicant motherMaidenName(String motherMaidenName) {
    this.motherMaidenName = motherMaidenName;
    return this;
  }

   /**
   * Mothers maiden name
   * @return motherMaidenName
  **/
  @Schema(example = "Monica", description = "Mothers maiden name")
  public String getMotherMaidenName() {
    return motherMaidenName;
  }

  public void setMotherMaidenName(String motherMaidenName) {
    this.motherMaidenName = motherMaidenName;
  }

  public ApplicantInquiryApplicant name(ApplicantInquiryName name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public ApplicantInquiryName getName() {
    return name;
  }

  public void setName(ApplicantInquiryName name) {
    this.name = name;
  }

  public ApplicantInquiryApplicant demographics(ApplicantInquiryDemographics demographics) {
    this.demographics = demographics;
    return this;
  }

   /**
   * Get demographics
   * @return demographics
  **/
  @Schema(description = "")
  public ApplicantInquiryDemographics getDemographics() {
    return demographics;
  }

  public void setDemographics(ApplicantInquiryDemographics demographics) {
    this.demographics = demographics;
  }

  public ApplicantInquiryApplicant address(List<ApplicantInquiryAddress> address) {
    this.address = address;
    return this;
  }

  public ApplicantInquiryApplicant addAddressItem(ApplicantInquiryAddress addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<ApplicantInquiryAddress>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(description = "")
  public List<ApplicantInquiryAddress> getAddress() {
    return address;
  }

  public void setAddress(List<ApplicantInquiryAddress> address) {
    this.address = address;
  }

  public ApplicantInquiryApplicant email(List<ApplicantInquiryEmail> email) {
    this.email = email;
    return this;
  }

  public ApplicantInquiryApplicant addEmailItem(ApplicantInquiryEmail emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<ApplicantInquiryEmail>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(description = "")
  public List<ApplicantInquiryEmail> getEmail() {
    return email;
  }

  public void setEmail(List<ApplicantInquiryEmail> email) {
    this.email = email;
  }

  public ApplicantInquiryApplicant phone(List<ApplicantInquiryPhone> phone) {
    this.phone = phone;
    return this;
  }

  public ApplicantInquiryApplicant addPhoneItem(ApplicantInquiryPhone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<ApplicantInquiryPhone>();
    }
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @Schema(description = "")
  public List<ApplicantInquiryPhone> getPhone() {
    return phone;
  }

  public void setPhone(List<ApplicantInquiryPhone> phone) {
    this.phone = phone;
  }

  public ApplicantInquiryApplicant financialInformation(ApplicantInquiryFinancialInformation financialInformation) {
    this.financialInformation = financialInformation;
    return this;
  }

   /**
   * Get financialInformation
   * @return financialInformation
  **/
  @Schema(description = "")
  public ApplicantInquiryFinancialInformation getFinancialInformation() {
    return financialInformation;
  }

  public void setFinancialInformation(ApplicantInquiryFinancialInformation financialInformation) {
    this.financialInformation = financialInformation;
  }

  public ApplicantInquiryApplicant employmentDetails(List<ApplicantInquiryEmploymentDetails> employmentDetails) {
    this.employmentDetails = employmentDetails;
    return this;
  }

  public ApplicantInquiryApplicant addEmploymentDetailsItem(ApplicantInquiryEmploymentDetails employmentDetailsItem) {
    if (this.employmentDetails == null) {
      this.employmentDetails = new ArrayList<ApplicantInquiryEmploymentDetails>();
    }
    this.employmentDetails.add(employmentDetailsItem);
    return this;
  }

   /**
   * Get employmentDetails
   * @return employmentDetails
  **/
  @Schema(description = "")
  public List<ApplicantInquiryEmploymentDetails> getEmploymentDetails() {
    return employmentDetails;
  }

  public void setEmploymentDetails(List<ApplicantInquiryEmploymentDetails> employmentDetails) {
    this.employmentDetails = employmentDetails;
  }

  public ApplicantInquiryApplicant identificationDocumentDetails(List<ApplicantInquiryIdentificationDocumentDetails> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
    return this;
  }

  public ApplicantInquiryApplicant addIdentificationDocumentDetailsItem(ApplicantInquiryIdentificationDocumentDetails identificationDocumentDetailsItem) {
    if (this.identificationDocumentDetails == null) {
      this.identificationDocumentDetails = new ArrayList<ApplicantInquiryIdentificationDocumentDetails>();
    }
    this.identificationDocumentDetails.add(identificationDocumentDetailsItem);
    return this;
  }

   /**
   * Get identificationDocumentDetails
   * @return identificationDocumentDetails
  **/
  @Schema(description = "")
  public List<ApplicantInquiryIdentificationDocumentDetails> getIdentificationDocumentDetails() {
    return identificationDocumentDetails;
  }

  public void setIdentificationDocumentDetails(List<ApplicantInquiryIdentificationDocumentDetails> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
  }

  public ApplicantInquiryApplicant additionalData(ApplicantInquiryAdditionalData additionalData) {
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Get additionalData
   * @return additionalData
  **/
  @Schema(description = "")
  public ApplicantInquiryAdditionalData getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(ApplicantInquiryAdditionalData additionalData) {
    this.additionalData = additionalData;
  }

  public ApplicantInquiryApplicant partnerCustomerDetails(ApplicantInquiryPartnerCustomerDetails partnerCustomerDetails) {
    this.partnerCustomerDetails = partnerCustomerDetails;
    return this;
  }

   /**
   * Get partnerCustomerDetails
   * @return partnerCustomerDetails
  **/
  @Schema(description = "")
  public ApplicantInquiryPartnerCustomerDetails getPartnerCustomerDetails() {
    return partnerCustomerDetails;
  }

  public void setPartnerCustomerDetails(ApplicantInquiryPartnerCustomerDetails partnerCustomerDetails) {
    this.partnerCustomerDetails = partnerCustomerDetails;
  }

  public ApplicantInquiryApplicant consentDetails(List<ApplicantInquiryConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
    return this;
  }

  public ApplicantInquiryApplicant addConsentDetailsItem(ApplicantInquiryConsentDetails consentDetailsItem) {
    if (this.consentDetails == null) {
      this.consentDetails = new ArrayList<ApplicantInquiryConsentDetails>();
    }
    this.consentDetails.add(consentDetailsItem);
    return this;
  }

   /**
   * Get consentDetails
   * @return consentDetails
  **/
  @Schema(description = "")
  public List<ApplicantInquiryConsentDetails> getConsentDetails() {
    return consentDetails;
  }

  public void setConsentDetails(List<ApplicantInquiryConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
  }

  public ApplicantInquiryApplicant requiredDocuments(List<ApplicantInquiryRequiredDocuments> requiredDocuments) {
    this.requiredDocuments = requiredDocuments;
    return this;
  }

  public ApplicantInquiryApplicant addRequiredDocumentsItem(ApplicantInquiryRequiredDocuments requiredDocumentsItem) {
    if (this.requiredDocuments == null) {
      this.requiredDocuments = new ArrayList<ApplicantInquiryRequiredDocuments>();
    }
    this.requiredDocuments.add(requiredDocumentsItem);
    return this;
  }

   /**
   * Get requiredDocuments
   * @return requiredDocuments
  **/
  @Schema(description = "")
  public List<ApplicantInquiryRequiredDocuments> getRequiredDocuments() {
    return requiredDocuments;
  }

  public void setRequiredDocuments(List<ApplicantInquiryRequiredDocuments> requiredDocuments) {
    this.requiredDocuments = requiredDocuments;
  }

  public ApplicantInquiryApplicant kycInformation(ApplicantInquiryKycInformation kycInformation) {
    this.kycInformation = kycInformation;
    return this;
  }

   /**
   * Get kycInformation
   * @return kycInformation
  **/
  @Schema(description = "")
  public ApplicantInquiryKycInformation getKycInformation() {
    return kycInformation;
  }

  public void setKycInformation(ApplicantInquiryKycInformation kycInformation) {
    this.kycInformation = kycInformation;
  }

  public ApplicantInquiryApplicant contactConsent(ApplicantInquiryContactConsent contactConsent) {
    this.contactConsent = contactConsent;
    return this;
  }

   /**
   * Get contactConsent
   * @return contactConsent
  **/
  @Schema(description = "")
  public ApplicantInquiryContactConsent getContactConsent() {
    return contactConsent;
  }

  public void setContactConsent(ApplicantInquiryContactConsent contactConsent) {
    this.contactConsent = contactConsent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicantInquiryApplicant applicantInquiryApplicant = (ApplicantInquiryApplicant) o;
    return Objects.equals(this.applicantType, applicantInquiryApplicant.applicantType) &&
        Objects.equals(this.applicantId, applicantInquiryApplicant.applicantId) &&
        Objects.equals(this.motherMaidenName, applicantInquiryApplicant.motherMaidenName) &&
        Objects.equals(this.name, applicantInquiryApplicant.name) &&
        Objects.equals(this.demographics, applicantInquiryApplicant.demographics) &&
        Objects.equals(this.address, applicantInquiryApplicant.address) &&
        Objects.equals(this.email, applicantInquiryApplicant.email) &&
        Objects.equals(this.phone, applicantInquiryApplicant.phone) &&
        Objects.equals(this.financialInformation, applicantInquiryApplicant.financialInformation) &&
        Objects.equals(this.employmentDetails, applicantInquiryApplicant.employmentDetails) &&
        Objects.equals(this.identificationDocumentDetails, applicantInquiryApplicant.identificationDocumentDetails) &&
        Objects.equals(this.additionalData, applicantInquiryApplicant.additionalData) &&
        Objects.equals(this.partnerCustomerDetails, applicantInquiryApplicant.partnerCustomerDetails) &&
        Objects.equals(this.consentDetails, applicantInquiryApplicant.consentDetails) &&
        Objects.equals(this.requiredDocuments, applicantInquiryApplicant.requiredDocuments) &&
        Objects.equals(this.kycInformation, applicantInquiryApplicant.kycInformation) &&
        Objects.equals(this.contactConsent, applicantInquiryApplicant.contactConsent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicantType, applicantId, motherMaidenName, name, demographics, address, email, phone, financialInformation, employmentDetails, identificationDocumentDetails, additionalData, partnerCustomerDetails, consentDetails, requiredDocuments, kycInformation, contactConsent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicantInquiryApplicant {\n");
    
    sb.append("    applicantType: ").append(toIndentedString(applicantType)).append("\n");
    sb.append("    applicantId: ").append(toIndentedString(applicantId)).append("\n");
    sb.append("    motherMaidenName: ").append(toIndentedString(motherMaidenName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    demographics: ").append(toIndentedString(demographics)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    financialInformation: ").append(toIndentedString(financialInformation)).append("\n");
    sb.append("    employmentDetails: ").append(toIndentedString(employmentDetails)).append("\n");
    sb.append("    identificationDocumentDetails: ").append(toIndentedString(identificationDocumentDetails)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    partnerCustomerDetails: ").append(toIndentedString(partnerCustomerDetails)).append("\n");
    sb.append("    consentDetails: ").append(toIndentedString(consentDetails)).append("\n");
    sb.append("    requiredDocuments: ").append(toIndentedString(requiredDocuments)).append("\n");
    sb.append("    kycInformation: ").append(toIndentedString(kycInformation)).append("\n");
    sb.append("    contactConsent: ").append(toIndentedString(contactConsent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
