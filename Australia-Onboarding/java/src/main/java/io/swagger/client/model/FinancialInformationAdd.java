/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ExistingLoanDetails;
import io.swagger.client.model.ExpenseDetails;
import io.swagger.client.model.ExternalCreditCardDetailsAdd;
import io.swagger.client.model.IncomeDetails;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FinancialInformationAdd
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class FinancialInformationAdd {
  @SerializedName("hasForeseeableFinancialChanges")
  private Boolean hasForeseeableFinancialChanges = null;

  @SerializedName("nonBankDebtObligationFlag")
  private Boolean nonBankDebtObligationFlag = null;

  @SerializedName("expenseDetails")
  private List<ExpenseDetails> expenseDetails = null;

  @SerializedName("incomeDetails")
  private List<IncomeDetails> incomeDetails = null;

  @SerializedName("existingLoanDetails")
  private List<ExistingLoanDetails> existingLoanDetails = null;

  @SerializedName("externalCreditCardDetails")
  private List<ExternalCreditCardDetailsAdd> externalCreditCardDetails = null;

  @SerializedName("selfEmployedBusinessAssetValue")
  private String selfEmployedBusinessAssetValue = null;

  public FinancialInformationAdd hasForeseeableFinancialChanges(Boolean hasForeseeableFinancialChanges) {
    this.hasForeseeableFinancialChanges = hasForeseeableFinancialChanges;
    return this;
  }

   /**
   * Indicates whether any foreseeable changes in customer&#x27;s financial circumstances.
   * @return hasForeseeableFinancialChanges
  **/
  @Schema(example = "true", description = "Indicates whether any foreseeable changes in customer's financial circumstances.")
  public Boolean isHasForeseeableFinancialChanges() {
    return hasForeseeableFinancialChanges;
  }

  public void setHasForeseeableFinancialChanges(Boolean hasForeseeableFinancialChanges) {
    this.hasForeseeableFinancialChanges = hasForeseeableFinancialChanges;
  }

  public FinancialInformationAdd nonBankDebtObligationFlag(Boolean nonBankDebtObligationFlag) {
    this.nonBankDebtObligationFlag = nonBankDebtObligationFlag;
    return this;
  }

   /**
   * Indicates if the applicant has any loan with any non-banking financial organization.
   * @return nonBankDebtObligationFlag
  **/
  @Schema(example = "true", description = "Indicates if the applicant has any loan with any non-banking financial organization.")
  public Boolean isNonBankDebtObligationFlag() {
    return nonBankDebtObligationFlag;
  }

  public void setNonBankDebtObligationFlag(Boolean nonBankDebtObligationFlag) {
    this.nonBankDebtObligationFlag = nonBankDebtObligationFlag;
  }

  public FinancialInformationAdd expenseDetails(List<ExpenseDetails> expenseDetails) {
    this.expenseDetails = expenseDetails;
    return this;
  }

  public FinancialInformationAdd addExpenseDetailsItem(ExpenseDetails expenseDetailsItem) {
    if (this.expenseDetails == null) {
      this.expenseDetails = new ArrayList<ExpenseDetails>();
    }
    this.expenseDetails.add(expenseDetailsItem);
    return this;
  }

   /**
   * Get expenseDetails
   * @return expenseDetails
  **/
  @Schema(description = "")
  public List<ExpenseDetails> getExpenseDetails() {
    return expenseDetails;
  }

  public void setExpenseDetails(List<ExpenseDetails> expenseDetails) {
    this.expenseDetails = expenseDetails;
  }

  public FinancialInformationAdd incomeDetails(List<IncomeDetails> incomeDetails) {
    this.incomeDetails = incomeDetails;
    return this;
  }

  public FinancialInformationAdd addIncomeDetailsItem(IncomeDetails incomeDetailsItem) {
    if (this.incomeDetails == null) {
      this.incomeDetails = new ArrayList<IncomeDetails>();
    }
    this.incomeDetails.add(incomeDetailsItem);
    return this;
  }

   /**
   * Get incomeDetails
   * @return incomeDetails
  **/
  @Schema(description = "")
  public List<IncomeDetails> getIncomeDetails() {
    return incomeDetails;
  }

  public void setIncomeDetails(List<IncomeDetails> incomeDetails) {
    this.incomeDetails = incomeDetails;
  }

  public FinancialInformationAdd existingLoanDetails(List<ExistingLoanDetails> existingLoanDetails) {
    this.existingLoanDetails = existingLoanDetails;
    return this;
  }

  public FinancialInformationAdd addExistingLoanDetailsItem(ExistingLoanDetails existingLoanDetailsItem) {
    if (this.existingLoanDetails == null) {
      this.existingLoanDetails = new ArrayList<ExistingLoanDetails>();
    }
    this.existingLoanDetails.add(existingLoanDetailsItem);
    return this;
  }

   /**
   * Get existingLoanDetails
   * @return existingLoanDetails
  **/
  @Schema(description = "")
  public List<ExistingLoanDetails> getExistingLoanDetails() {
    return existingLoanDetails;
  }

  public void setExistingLoanDetails(List<ExistingLoanDetails> existingLoanDetails) {
    this.existingLoanDetails = existingLoanDetails;
  }

  public FinancialInformationAdd externalCreditCardDetails(List<ExternalCreditCardDetailsAdd> externalCreditCardDetails) {
    this.externalCreditCardDetails = externalCreditCardDetails;
    return this;
  }

  public FinancialInformationAdd addExternalCreditCardDetailsItem(ExternalCreditCardDetailsAdd externalCreditCardDetailsItem) {
    if (this.externalCreditCardDetails == null) {
      this.externalCreditCardDetails = new ArrayList<ExternalCreditCardDetailsAdd>();
    }
    this.externalCreditCardDetails.add(externalCreditCardDetailsItem);
    return this;
  }

   /**
   * Get externalCreditCardDetails
   * @return externalCreditCardDetails
  **/
  @Schema(description = "")
  public List<ExternalCreditCardDetailsAdd> getExternalCreditCardDetails() {
    return externalCreditCardDetails;
  }

  public void setExternalCreditCardDetails(List<ExternalCreditCardDetailsAdd> externalCreditCardDetails) {
    this.externalCreditCardDetails = externalCreditCardDetails;
  }

  public FinancialInformationAdd selfEmployedBusinessAssetValue(String selfEmployedBusinessAssetValue) {
    this.selfEmployedBusinessAssetValue = selfEmployedBusinessAssetValue;
    return this;
  }

   /**
   * This field is used to capture the total assets of  the self employed business. This is applicable only for Self Employed Business/ Professionals. This is a reference data field. Please use /v1/utilities/referenceData/{selfEmployedBusinessAssetValue} resource to get valid value of this field with description.
   * @return selfEmployedBusinessAssetValue
  **/
  @Schema(example = "UPTO_PHP_3_MILLION", description = "This field is used to capture the total assets of  the self employed business. This is applicable only for Self Employed Business/ Professionals. This is a reference data field. Please use /v1/utilities/referenceData/{selfEmployedBusinessAssetValue} resource to get valid value of this field with description.")
  public String getSelfEmployedBusinessAssetValue() {
    return selfEmployedBusinessAssetValue;
  }

  public void setSelfEmployedBusinessAssetValue(String selfEmployedBusinessAssetValue) {
    this.selfEmployedBusinessAssetValue = selfEmployedBusinessAssetValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinancialInformationAdd financialInformationAdd = (FinancialInformationAdd) o;
    return Objects.equals(this.hasForeseeableFinancialChanges, financialInformationAdd.hasForeseeableFinancialChanges) &&
        Objects.equals(this.nonBankDebtObligationFlag, financialInformationAdd.nonBankDebtObligationFlag) &&
        Objects.equals(this.expenseDetails, financialInformationAdd.expenseDetails) &&
        Objects.equals(this.incomeDetails, financialInformationAdd.incomeDetails) &&
        Objects.equals(this.existingLoanDetails, financialInformationAdd.existingLoanDetails) &&
        Objects.equals(this.externalCreditCardDetails, financialInformationAdd.externalCreditCardDetails) &&
        Objects.equals(this.selfEmployedBusinessAssetValue, financialInformationAdd.selfEmployedBusinessAssetValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasForeseeableFinancialChanges, nonBankDebtObligationFlag, expenseDetails, incomeDetails, existingLoanDetails, externalCreditCardDetails, selfEmployedBusinessAssetValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinancialInformationAdd {\n");
    
    sb.append("    hasForeseeableFinancialChanges: ").append(toIndentedString(hasForeseeableFinancialChanges)).append("\n");
    sb.append("    nonBankDebtObligationFlag: ").append(toIndentedString(nonBankDebtObligationFlag)).append("\n");
    sb.append("    expenseDetails: ").append(toIndentedString(expenseDetails)).append("\n");
    sb.append("    incomeDetails: ").append(toIndentedString(incomeDetails)).append("\n");
    sb.append("    existingLoanDetails: ").append(toIndentedString(existingLoanDetails)).append("\n");
    sb.append("    externalCreditCardDetails: ").append(toIndentedString(externalCreditCardDetails)).append("\n");
    sb.append("    selfEmployedBusinessAssetValue: ").append(toIndentedString(selfEmployedBusinessAssetValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
