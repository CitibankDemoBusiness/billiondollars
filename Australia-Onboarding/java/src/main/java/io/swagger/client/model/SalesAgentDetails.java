/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * SalesAgentDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class SalesAgentDetails {
  @SerializedName("originatingSalesAgentId")
  private String originatingSalesAgentId = null;

  @SerializedName("originatingSalesBranchName")
  private String originatingSalesBranchName = null;

  public SalesAgentDetails originatingSalesAgentId(String originatingSalesAgentId) {
    this.originatingSalesAgentId = originatingSalesAgentId;
    return this;
  }

   /**
   * Agent Id of the bank representative sourcing the application form. This agent might be different from the agent who is processing the application.
   * @return originatingSalesAgentId
  **/
  @Schema(example = "300123401", description = "Agent Id of the bank representative sourcing the application form. This agent might be different from the agent who is processing the application.")
  public String getOriginatingSalesAgentId() {
    return originatingSalesAgentId;
  }

  public void setOriginatingSalesAgentId(String originatingSalesAgentId) {
    this.originatingSalesAgentId = originatingSalesAgentId;
  }

  public SalesAgentDetails originatingSalesBranchName(String originatingSalesBranchName) {
    this.originatingSalesBranchName = originatingSalesBranchName;
    return this;
  }

   /**
   * Name of branch where the application is originally sourced.
   * @return originatingSalesBranchName
  **/
  @Schema(example = "Samsung branch", description = "Name of branch where the application is originally sourced.")
  public String getOriginatingSalesBranchName() {
    return originatingSalesBranchName;
  }

  public void setOriginatingSalesBranchName(String originatingSalesBranchName) {
    this.originatingSalesBranchName = originatingSalesBranchName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesAgentDetails salesAgentDetails = (SalesAgentDetails) o;
    return Objects.equals(this.originatingSalesAgentId, salesAgentDetails.originatingSalesAgentId) &&
        Objects.equals(this.originatingSalesBranchName, salesAgentDetails.originatingSalesBranchName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originatingSalesAgentId, originatingSalesBranchName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesAgentDetails {\n");
    
    sb.append("    originatingSalesAgentId: ").append(toIndentedString(originatingSalesAgentId)).append("\n");
    sb.append("    originatingSalesBranchName: ").append(toIndentedString(originatingSalesBranchName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
