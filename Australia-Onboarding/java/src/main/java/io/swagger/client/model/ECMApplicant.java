/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ECMAdditionalData;
import io.swagger.client.model.ECMConsentDetails;
import io.swagger.client.model.ECMDemographics;
import io.swagger.client.model.ECMEmail;
import io.swagger.client.model.ECMIdentificationDocumentDetails;
import io.swagger.client.model.ECMName;
import io.swagger.client.model.ECMPartnerCustomerDetails;
import io.swagger.client.model.ECMPhone;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ECMApplicant
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class ECMApplicant {
  @SerializedName("name")
  private ECMName name = null;

  @SerializedName("demographics")
  private ECMDemographics demographics = null;

  @SerializedName("email")
  private List<ECMEmail> email = null;

  @SerializedName("phone")
  private List<ECMPhone> phone = null;

  @SerializedName("identificationDocumentDetails")
  private List<ECMIdentificationDocumentDetails> identificationDocumentDetails = null;

  @SerializedName("additionalData")
  private ECMAdditionalData additionalData = null;

  @SerializedName("consentDetails")
  private List<ECMConsentDetails> consentDetails = null;

  @SerializedName("partnerCustomerDetails")
  private ECMPartnerCustomerDetails partnerCustomerDetails = null;

  @SerializedName("studentIndicator")
  private Boolean studentIndicator = null;

  public ECMApplicant name(ECMName name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public ECMName getName() {
    return name;
  }

  public void setName(ECMName name) {
    this.name = name;
  }

  public ECMApplicant demographics(ECMDemographics demographics) {
    this.demographics = demographics;
    return this;
  }

   /**
   * Get demographics
   * @return demographics
  **/
  @Schema(description = "")
  public ECMDemographics getDemographics() {
    return demographics;
  }

  public void setDemographics(ECMDemographics demographics) {
    this.demographics = demographics;
  }

  public ECMApplicant email(List<ECMEmail> email) {
    this.email = email;
    return this;
  }

  public ECMApplicant addEmailItem(ECMEmail emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<ECMEmail>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(description = "")
  public List<ECMEmail> getEmail() {
    return email;
  }

  public void setEmail(List<ECMEmail> email) {
    this.email = email;
  }

  public ECMApplicant phone(List<ECMPhone> phone) {
    this.phone = phone;
    return this;
  }

  public ECMApplicant addPhoneItem(ECMPhone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<ECMPhone>();
    }
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @Schema(description = "")
  public List<ECMPhone> getPhone() {
    return phone;
  }

  public void setPhone(List<ECMPhone> phone) {
    this.phone = phone;
  }

  public ECMApplicant identificationDocumentDetails(List<ECMIdentificationDocumentDetails> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
    return this;
  }

  public ECMApplicant addIdentificationDocumentDetailsItem(ECMIdentificationDocumentDetails identificationDocumentDetailsItem) {
    if (this.identificationDocumentDetails == null) {
      this.identificationDocumentDetails = new ArrayList<ECMIdentificationDocumentDetails>();
    }
    this.identificationDocumentDetails.add(identificationDocumentDetailsItem);
    return this;
  }

   /**
   * Get identificationDocumentDetails
   * @return identificationDocumentDetails
  **/
  @Schema(description = "")
  public List<ECMIdentificationDocumentDetails> getIdentificationDocumentDetails() {
    return identificationDocumentDetails;
  }

  public void setIdentificationDocumentDetails(List<ECMIdentificationDocumentDetails> identificationDocumentDetails) {
    this.identificationDocumentDetails = identificationDocumentDetails;
  }

  public ECMApplicant additionalData(ECMAdditionalData additionalData) {
    this.additionalData = additionalData;
    return this;
  }

   /**
   * Get additionalData
   * @return additionalData
  **/
  @Schema(description = "")
  public ECMAdditionalData getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(ECMAdditionalData additionalData) {
    this.additionalData = additionalData;
  }

  public ECMApplicant consentDetails(List<ECMConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
    return this;
  }

  public ECMApplicant addConsentDetailsItem(ECMConsentDetails consentDetailsItem) {
    if (this.consentDetails == null) {
      this.consentDetails = new ArrayList<ECMConsentDetails>();
    }
    this.consentDetails.add(consentDetailsItem);
    return this;
  }

   /**
   * Get consentDetails
   * @return consentDetails
  **/
  @Schema(description = "")
  public List<ECMConsentDetails> getConsentDetails() {
    return consentDetails;
  }

  public void setConsentDetails(List<ECMConsentDetails> consentDetails) {
    this.consentDetails = consentDetails;
  }

  public ECMApplicant partnerCustomerDetails(ECMPartnerCustomerDetails partnerCustomerDetails) {
    this.partnerCustomerDetails = partnerCustomerDetails;
    return this;
  }

   /**
   * Get partnerCustomerDetails
   * @return partnerCustomerDetails
  **/
  @Schema(description = "")
  public ECMPartnerCustomerDetails getPartnerCustomerDetails() {
    return partnerCustomerDetails;
  }

  public void setPartnerCustomerDetails(ECMPartnerCustomerDetails partnerCustomerDetails) {
    this.partnerCustomerDetails = partnerCustomerDetails;
  }

  public ECMApplicant studentIndicator(Boolean studentIndicator) {
    this.studentIndicator = studentIndicator;
    return this;
  }

   /**
   * Indicates if the applicant is a student.Valid values are Yes or No
   * @return studentIndicator
  **/
  @Schema(description = "Indicates if the applicant is a student.Valid values are Yes or No")
  public Boolean isStudentIndicator() {
    return studentIndicator;
  }

  public void setStudentIndicator(Boolean studentIndicator) {
    this.studentIndicator = studentIndicator;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ECMApplicant ecMApplicant = (ECMApplicant) o;
    return Objects.equals(this.name, ecMApplicant.name) &&
        Objects.equals(this.demographics, ecMApplicant.demographics) &&
        Objects.equals(this.email, ecMApplicant.email) &&
        Objects.equals(this.phone, ecMApplicant.phone) &&
        Objects.equals(this.identificationDocumentDetails, ecMApplicant.identificationDocumentDetails) &&
        Objects.equals(this.additionalData, ecMApplicant.additionalData) &&
        Objects.equals(this.consentDetails, ecMApplicant.consentDetails) &&
        Objects.equals(this.partnerCustomerDetails, ecMApplicant.partnerCustomerDetails) &&
        Objects.equals(this.studentIndicator, ecMApplicant.studentIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, demographics, email, phone, identificationDocumentDetails, additionalData, consentDetails, partnerCustomerDetails, studentIndicator);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ECMApplicant {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    demographics: ").append(toIndentedString(demographics)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    identificationDocumentDetails: ").append(toIndentedString(identificationDocumentDetails)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    consentDetails: ").append(toIndentedString(consentDetails)).append("\n");
    sb.append("    partnerCustomerDetails: ").append(toIndentedString(partnerCustomerDetails)).append("\n");
    sb.append("    studentIndicator: ").append(toIndentedString(studentIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
