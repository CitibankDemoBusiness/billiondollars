/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ParentAddress;
import io.swagger.client.model.ParentName;
import io.swagger.client.model.ParentPhone;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ParentInformation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class ParentInformation {
  @SerializedName("name")
  private ParentName name = null;

  @SerializedName("address")
  private List<ParentAddress> address = null;

  @SerializedName("phone")
  private List<ParentPhone> phone = null;

  public ParentInformation name(ParentName name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public ParentName getName() {
    return name;
  }

  public void setName(ParentName name) {
    this.name = name;
  }

  public ParentInformation address(List<ParentAddress> address) {
    this.address = address;
    return this;
  }

  public ParentInformation addAddressItem(ParentAddress addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<ParentAddress>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Schema(description = "")
  public List<ParentAddress> getAddress() {
    return address;
  }

  public void setAddress(List<ParentAddress> address) {
    this.address = address;
  }

  public ParentInformation phone(List<ParentPhone> phone) {
    this.phone = phone;
    return this;
  }

  public ParentInformation addPhoneItem(ParentPhone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<ParentPhone>();
    }
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @Schema(description = "")
  public List<ParentPhone> getPhone() {
    return phone;
  }

  public void setPhone(List<ParentPhone> phone) {
    this.phone = phone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParentInformation parentInformation = (ParentInformation) o;
    return Objects.equals(this.name, parentInformation.name) &&
        Objects.equals(this.address, parentInformation.address) &&
        Objects.equals(this.phone, parentInformation.phone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, address, phone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParentInformation {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
