/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Applicant;
import io.swagger.client.model.ProviderInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * RetrieveApplicationProcessingPartnerMembershipApplicationResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class RetrieveApplicationProcessingPartnerMembershipApplicationResponse {
  @SerializedName("applicationId")
  private String applicationId = null;

  @SerializedName("applicant")
  private Applicant applicant = null;

  @SerializedName("applicationStage")
  private String applicationStage = null;

  @SerializedName("controlFlowId")
  private String controlFlowId = null;

  @SerializedName("providerInfo")
  private List<ProviderInfo> providerInfo = null;

  public RetrieveApplicationProcessingPartnerMembershipApplicationResponse applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

   /**
   * Unique identifier for the application
   * @return applicationId
  **/
  @Schema(description = "Unique identifier for the application")
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  public RetrieveApplicationProcessingPartnerMembershipApplicationResponse applicant(Applicant applicant) {
    this.applicant = applicant;
    return this;
  }

   /**
   * Get applicant
   * @return applicant
  **/
  @Schema(description = "")
  public Applicant getApplicant() {
    return applicant;
  }

  public void setApplicant(Applicant applicant) {
    this.applicant = applicant;
  }

  public RetrieveApplicationProcessingPartnerMembershipApplicationResponse applicationStage(String applicationStage) {
    this.applicationStage = applicationStage;
    return this;
  }

   /**
   * Application Stage
   * @return applicationStage
  **/
  @Schema(example = "Confirmation", description = "Application Stage")
  public String getApplicationStage() {
    return applicationStage;
  }

  public void setApplicationStage(String applicationStage) {
    this.applicationStage = applicationStage;
  }

  public RetrieveApplicationProcessingPartnerMembershipApplicationResponse controlFlowId(String controlFlowId) {
    this.controlFlowId = controlFlowId;
    return this;
  }

   /**
   * Control flow id is used to control the flow for subsequent requests in the session.
   * @return controlFlowId
  **/
  @Schema(description = "Control flow id is used to control the flow for subsequent requests in the session.")
  public String getControlFlowId() {
    return controlFlowId;
  }

  public void setControlFlowId(String controlFlowId) {
    this.controlFlowId = controlFlowId;
  }

  public RetrieveApplicationProcessingPartnerMembershipApplicationResponse providerInfo(List<ProviderInfo> providerInfo) {
    this.providerInfo = providerInfo;
    return this;
  }

  public RetrieveApplicationProcessingPartnerMembershipApplicationResponse addProviderInfoItem(ProviderInfo providerInfoItem) {
    if (this.providerInfo == null) {
      this.providerInfo = new ArrayList<ProviderInfo>();
    }
    this.providerInfo.add(providerInfoItem);
    return this;
  }

   /**
   * Get providerInfo
   * @return providerInfo
  **/
  @Schema(description = "")
  public List<ProviderInfo> getProviderInfo() {
    return providerInfo;
  }

  public void setProviderInfo(List<ProviderInfo> providerInfo) {
    this.providerInfo = providerInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveApplicationProcessingPartnerMembershipApplicationResponse retrieveApplicationProcessingPartnerMembershipApplicationResponse = (RetrieveApplicationProcessingPartnerMembershipApplicationResponse) o;
    return Objects.equals(this.applicationId, retrieveApplicationProcessingPartnerMembershipApplicationResponse.applicationId) &&
        Objects.equals(this.applicant, retrieveApplicationProcessingPartnerMembershipApplicationResponse.applicant) &&
        Objects.equals(this.applicationStage, retrieveApplicationProcessingPartnerMembershipApplicationResponse.applicationStage) &&
        Objects.equals(this.controlFlowId, retrieveApplicationProcessingPartnerMembershipApplicationResponse.controlFlowId) &&
        Objects.equals(this.providerInfo, retrieveApplicationProcessingPartnerMembershipApplicationResponse.providerInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, applicant, applicationStage, controlFlowId, providerInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveApplicationProcessingPartnerMembershipApplicationResponse {\n");
    
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    applicant: ").append(toIndentedString(applicant)).append("\n");
    sb.append("    applicationStage: ").append(toIndentedString(applicationStage)).append("\n");
    sb.append("    controlFlowId: ").append(toIndentedString(controlFlowId)).append("\n");
    sb.append("    providerInfo: ").append(toIndentedString(providerInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
