/*
 * Onboarding
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ECMContactPreferenceUpdate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:52:20.568061Z[Etc/UTC]")
public class ECMContactPreferenceUpdate {
  @SerializedName("eStatementEnrollmentFlag")
  private Boolean eStatementEnrollmentFlag = null;

  @SerializedName("eStatementEnrollmentOption")
  private String eStatementEnrollmentOption = null;

  public ECMContactPreferenceUpdate eStatementEnrollmentFlag(Boolean eStatementEnrollmentFlag) {
    this.eStatementEnrollmentFlag = eStatementEnrollmentFlag;
    return this;
  }

   /**
   * Applicants subscription for receiving statement over email. Valid values: true and false
   * @return eStatementEnrollmentFlag
  **/
  @Schema(description = "Applicants subscription for receiving statement over email. Valid values: true and false")
  public Boolean isEStatementEnrollmentFlag() {
    return eStatementEnrollmentFlag;
  }

  public void setEStatementEnrollmentFlag(Boolean eStatementEnrollmentFlag) {
    this.eStatementEnrollmentFlag = eStatementEnrollmentFlag;
  }

  public ECMContactPreferenceUpdate eStatementEnrollmentOption(String eStatementEnrollmentOption) {
    this.eStatementEnrollmentOption = eStatementEnrollmentOption;
    return this;
  }

   /**
   * Customer preference for eStatement. This is a reference data field. Please use /v1/utilities/referenceData/{eStatementEnrollmentOption} resource to get valid value of this field with description.
   * @return eStatementEnrollmentOption
  **/
  @Schema(description = "Customer preference for eStatement. This is a reference data field. Please use /v1/utilities/referenceData/{eStatementEnrollmentOption} resource to get valid value of this field with description.")
  public String getEStatementEnrollmentOption() {
    return eStatementEnrollmentOption;
  }

  public void setEStatementEnrollmentOption(String eStatementEnrollmentOption) {
    this.eStatementEnrollmentOption = eStatementEnrollmentOption;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ECMContactPreferenceUpdate ecMContactPreferenceUpdate = (ECMContactPreferenceUpdate) o;
    return Objects.equals(this.eStatementEnrollmentFlag, ecMContactPreferenceUpdate.eStatementEnrollmentFlag) &&
        Objects.equals(this.eStatementEnrollmentOption, ecMContactPreferenceUpdate.eStatementEnrollmentOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eStatementEnrollmentFlag, eStatementEnrollmentOption);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ECMContactPreferenceUpdate {\n");
    
    sb.append("    eStatementEnrollmentFlag: ").append(toIndentedString(eStatementEnrollmentFlag)).append("\n");
    sb.append("    eStatementEnrollmentOption: ").append(toIndentedString(eStatementEnrollmentOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
