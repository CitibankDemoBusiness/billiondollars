<?php
/**
 * ECMAdditionalData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ECMAdditionalData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ECMAdditionalData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ECMAdditionalData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fee_code' => 'string',
'country_specific_group' => '\Swagger\Client\Model\ECMCountrySpecificGroup',
'introducer_id' => 'string',
'referral_tracking' => '\Swagger\Client\Model\ReferralTracking',
'media_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fee_code' => null,
'country_specific_group' => null,
'introducer_id' => null,
'referral_tracking' => null,
'media_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fee_code' => 'feeCode',
'country_specific_group' => 'countrySpecificGroup',
'introducer_id' => 'introducerId',
'referral_tracking' => 'referralTracking',
'media_id' => 'mediaId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fee_code' => 'setFeeCode',
'country_specific_group' => 'setCountrySpecificGroup',
'introducer_id' => 'setIntroducerId',
'referral_tracking' => 'setReferralTracking',
'media_id' => 'setMediaId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fee_code' => 'getFeeCode',
'country_specific_group' => 'getCountrySpecificGroup',
'introducer_id' => 'getIntroducerId',
'referral_tracking' => 'getReferralTracking',
'media_id' => 'getMediaId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fee_code'] = isset($data['fee_code']) ? $data['fee_code'] : null;
        $this->container['country_specific_group'] = isset($data['country_specific_group']) ? $data['country_specific_group'] : null;
        $this->container['introducer_id'] = isset($data['introducer_id']) ? $data['introducer_id'] : null;
        $this->container['referral_tracking'] = isset($data['referral_tracking']) ? $data['referral_tracking'] : null;
        $this->container['media_id'] = isset($data['media_id']) ? $data['media_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fee_code
     *
     * @return string
     */
    public function getFeeCode()
    {
        return $this->container['fee_code'];
    }

    /**
     * Sets fee_code
     *
     * @param string $fee_code Fee code that applied to the requested product
     *
     * @return $this
     */
    public function setFeeCode($fee_code)
    {
        $this->container['fee_code'] = $fee_code;

        return $this;
    }

    /**
     * Gets country_specific_group
     *
     * @return \Swagger\Client\Model\ECMCountrySpecificGroup
     */
    public function getCountrySpecificGroup()
    {
        return $this->container['country_specific_group'];
    }

    /**
     * Sets country_specific_group
     *
     * @param \Swagger\Client\Model\ECMCountrySpecificGroup $country_specific_group country_specific_group
     *
     * @return $this
     */
    public function setCountrySpecificGroup($country_specific_group)
    {
        $this->container['country_specific_group'] = $country_specific_group;

        return $this;
    }

    /**
     * Gets introducer_id
     *
     * @return string
     */
    public function getIntroducerId()
    {
        return $this->container['introducer_id'];
    }

    /**
     * Sets introducer_id
     *
     * @param string $introducer_id Unique identifier associated with the introducer who had referred the applicant.
     *
     * @return $this
     */
    public function setIntroducerId($introducer_id)
    {
        $this->container['introducer_id'] = $introducer_id;

        return $this;
    }

    /**
     * Gets referral_tracking
     *
     * @return \Swagger\Client\Model\ReferralTracking
     */
    public function getReferralTracking()
    {
        return $this->container['referral_tracking'];
    }

    /**
     * Sets referral_tracking
     *
     * @param \Swagger\Client\Model\ReferralTracking $referral_tracking referral_tracking
     *
     * @return $this
     */
    public function setReferralTracking($referral_tracking)
    {
        $this->container['referral_tracking'] = $referral_tracking;

        return $this;
    }

    /**
     * Gets media_id
     *
     * @return string
     */
    public function getMediaId()
    {
        return $this->container['media_id'];
    }

    /**
     * Sets media_id
     *
     * @param string $media_id The media ID will be used to determine which offer/campaign banner was clicked when the customer has submitted the application
     *
     * @return $this
     */
    public function setMediaId($media_id)
    {
        $this->container['media_id'] = $media_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
