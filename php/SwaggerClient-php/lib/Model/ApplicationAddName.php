<?php
/**
 * ApplicationAddName
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicationAddName Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationAddName implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationAddName';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'salutation' => 'string',
'given_name' => 'string',
'middle_name' => 'string',
'surname' => 'string',
'local_english_given_name' => 'string',
'local_english_surname' => 'string',
'alias_name' => 'string',
'full_name' => 'string',
'salute_by' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'salutation' => null,
'given_name' => null,
'middle_name' => null,
'surname' => null,
'local_english_given_name' => null,
'local_english_surname' => null,
'alias_name' => null,
'full_name' => null,
'salute_by' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'salutation' => 'salutation',
'given_name' => 'givenName',
'middle_name' => 'middleName',
'surname' => 'surname',
'local_english_given_name' => 'localEnglishGivenName',
'local_english_surname' => 'localEnglishSurname',
'alias_name' => 'aliasName',
'full_name' => 'fullName',
'salute_by' => 'saluteBy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'salutation' => 'setSalutation',
'given_name' => 'setGivenName',
'middle_name' => 'setMiddleName',
'surname' => 'setSurname',
'local_english_given_name' => 'setLocalEnglishGivenName',
'local_english_surname' => 'setLocalEnglishSurname',
'alias_name' => 'setAliasName',
'full_name' => 'setFullName',
'salute_by' => 'setSaluteBy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'salutation' => 'getSalutation',
'given_name' => 'getGivenName',
'middle_name' => 'getMiddleName',
'surname' => 'getSurname',
'local_english_given_name' => 'getLocalEnglishGivenName',
'local_english_surname' => 'getLocalEnglishSurname',
'alias_name' => 'getAliasName',
'full_name' => 'getFullName',
'salute_by' => 'getSaluteBy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['given_name'] = isset($data['given_name']) ? $data['given_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['local_english_given_name'] = isset($data['local_english_given_name']) ? $data['local_english_given_name'] : null;
        $this->container['local_english_surname'] = isset($data['local_english_surname']) ? $data['local_english_surname'] : null;
        $this->container['alias_name'] = isset($data['alias_name']) ? $data['alias_name'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['salute_by'] = isset($data['salute_by']) ? $data['salute_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['given_name'] === null) {
            $invalidProperties[] = "'given_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets salutation
     *
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string $salutation Salutation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{salutation} resource to get valid value of this field with description. You can use salutation field name as the referenceCode parameter to retrieve the values.
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string $given_name Given/first name of the applicant
     *
     * @return $this
     */
    public function setGivenName($given_name)
    {
        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name Middle name of the applicant
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string $surname Surname/last name of the applicant
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets local_english_given_name
     *
     * @return string
     */
    public function getLocalEnglishGivenName()
    {
        return $this->container['local_english_given_name'];
    }

    /**
     * Sets local_english_given_name
     *
     * @param string $local_english_given_name Local given name in English
     *
     * @return $this
     */
    public function setLocalEnglishGivenName($local_english_given_name)
    {
        $this->container['local_english_given_name'] = $local_english_given_name;

        return $this;
    }

    /**
     * Gets local_english_surname
     *
     * @return string
     */
    public function getLocalEnglishSurname()
    {
        return $this->container['local_english_surname'];
    }

    /**
     * Sets local_english_surname
     *
     * @param string $local_english_surname Local surname in English
     *
     * @return $this
     */
    public function setLocalEnglishSurname($local_english_surname)
    {
        $this->container['local_english_surname'] = $local_english_surname;

        return $this;
    }

    /**
     * Gets alias_name
     *
     * @return string
     */
    public function getAliasName()
    {
        return $this->container['alias_name'];
    }

    /**
     * Sets alias_name
     *
     * @param string $alias_name Alias name of the applicant
     *
     * @return $this
     */
    public function setAliasName($alias_name)
    {
        $this->container['alias_name'] = $alias_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name Full name of the applicant.
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets salute_by
     *
     * @return string
     */
    public function getSaluteBy()
    {
        return $this->container['salute_by'];
    }

    /**
     * Sets salute_by
     *
     * @param string $salute_by Contains value with which applicant like to be addressed. This is a reference data field. Please use /v1/apac/utilities/referenceData/{saluteBy} resource to get valid value of this field with description. You can use saluteBy field name as the referenceCode parameter to retrieve the values.
     *
     * @return $this
     */
    public function setSaluteBy($salute_by)
    {
        $this->container['salute_by'] = $salute_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
