<?php
/**
 * ApplicationInquiryBalanceTransferDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicationInquiryBalanceTransferDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationInquiryBalanceTransferDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationInquiryBalanceTransferDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount_to_transfer' => 'double',
'issuing_organization_name' => 'string',
'account_name' => 'string',
'account_reference_number' => 'string',
'biller_code' => 'string',
'campaign_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount_to_transfer' => 'double',
'issuing_organization_name' => null,
'account_name' => null,
'account_reference_number' => null,
'biller_code' => null,
'campaign_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_to_transfer' => 'amountToTransfer',
'issuing_organization_name' => 'issuingOrganizationName',
'account_name' => 'accountName',
'account_reference_number' => 'accountReferenceNumber',
'biller_code' => 'billerCode',
'campaign_id' => 'campaignId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_to_transfer' => 'setAmountToTransfer',
'issuing_organization_name' => 'setIssuingOrganizationName',
'account_name' => 'setAccountName',
'account_reference_number' => 'setAccountReferenceNumber',
'biller_code' => 'setBillerCode',
'campaign_id' => 'setCampaignId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_to_transfer' => 'getAmountToTransfer',
'issuing_organization_name' => 'getIssuingOrganizationName',
'account_name' => 'getAccountName',
'account_reference_number' => 'getAccountReferenceNumber',
'biller_code' => 'getBillerCode',
'campaign_id' => 'getCampaignId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount_to_transfer'] = isset($data['amount_to_transfer']) ? $data['amount_to_transfer'] : null;
        $this->container['issuing_organization_name'] = isset($data['issuing_organization_name']) ? $data['issuing_organization_name'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['account_reference_number'] = isset($data['account_reference_number']) ? $data['account_reference_number'] : null;
        $this->container['biller_code'] = isset($data['biller_code']) ? $data['biller_code'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount_to_transfer'] === null) {
            $invalidProperties[] = "'amount_to_transfer' can't be null";
        }
        if ($this->container['biller_code'] === null) {
            $invalidProperties[] = "'biller_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_to_transfer
     *
     * @return double
     */
    public function getAmountToTransfer()
    {
        return $this->container['amount_to_transfer'];
    }

    /**
     * Sets amount_to_transfer
     *
     * @param double $amount_to_transfer Amount to Transfer
     *
     * @return $this
     */
    public function setAmountToTransfer($amount_to_transfer)
    {
        $this->container['amount_to_transfer'] = $amount_to_transfer;

        return $this;
    }

    /**
     * Gets issuing_organization_name
     *
     * @return string
     */
    public function getIssuingOrganizationName()
    {
        return $this->container['issuing_organization_name'];
    }

    /**
     * Sets issuing_organization_name
     *
     * @param string $issuing_organization_name Name of the Organization to which the fund has to be transferred. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardIssuingOrganization} resource to get valid value of this field with description. You can use cardIssuingOrganization field name as the referenceCode parameter to retrieve the values.
     *
     * @return $this
     */
    public function setIssuingOrganizationName($issuing_organization_name)
    {
        $this->container['issuing_organization_name'] = $issuing_organization_name;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name Customer's account Name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_reference_number
     *
     * @return string
     */
    public function getAccountReferenceNumber()
    {
        return $this->container['account_reference_number'];
    }

    /**
     * Sets account_reference_number
     *
     * @param string $account_reference_number Customer's account reference number with biller.
     *
     * @return $this
     */
    public function setAccountReferenceNumber($account_reference_number)
    {
        $this->container['account_reference_number'] = $account_reference_number;

        return $this;
    }

    /**
     * Gets biller_code
     *
     * @return string
     */
    public function getBillerCode()
    {
        return $this->container['biller_code'];
    }

    /**
     * Sets biller_code
     *
     * @param string $biller_code It is a unique code to identify a BPAY biller
     *
     * @return $this
     */
    public function setBillerCode($biller_code)
    {
        $this->container['biller_code'] = $biller_code;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string $campaign_id Campaign code of the balance transfer.
     *
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
