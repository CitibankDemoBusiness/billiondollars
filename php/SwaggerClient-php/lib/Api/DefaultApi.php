<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1ApacOnboardingApplicationsApplicationIdDocumentsPost
     *
     * Upload Application Documents
     *
     * @param  \Swagger\Client\Model\InsertDocumentRequest $body Insert the documents in documentum. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InsertDocumentResponse
     */
    public function v1ApacOnboardingApplicationsApplicationIdDocumentsPost($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        list($response) = $this->v1ApacOnboardingApplicationsApplicationIdDocumentsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingApplicationsApplicationIdDocumentsPostWithHttpInfo
     *
     * Upload Application Documents
     *
     * @param  \Swagger\Client\Model\InsertDocumentRequest $body Insert the documents in documentum. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InsertDocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingApplicationsApplicationIdDocumentsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\InsertDocumentResponse';
        $request = $this->v1ApacOnboardingApplicationsApplicationIdDocumentsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InsertDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingApplicationsApplicationIdDocumentsPostAsync
     *
     * Upload Application Documents
     *
     * @param  \Swagger\Client\Model\InsertDocumentRequest $body Insert the documents in documentum. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingApplicationsApplicationIdDocumentsPostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        return $this->v1ApacOnboardingApplicationsApplicationIdDocumentsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingApplicationsApplicationIdDocumentsPostAsyncWithHttpInfo
     *
     * Upload Application Documents
     *
     * @param  \Swagger\Client\Model\InsertDocumentRequest $body Insert the documents in documentum. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingApplicationsApplicationIdDocumentsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\InsertDocumentResponse';
        $request = $this->v1ApacOnboardingApplicationsApplicationIdDocumentsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingApplicationsApplicationIdDocumentsPost'
     *
     * @param  \Swagger\Client\Model\InsertDocumentRequest $body Insert the documents in documentum. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingApplicationsApplicationIdDocumentsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingApplicationsApplicationIdDocumentsPost'
            );
        }

        $resourcePath = '/v1/apac/onboarding/applications/{applicationId}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut
     *
     * Supp Applicant Delete
     *
     * @param  \Swagger\Client\Model\ApplicantDeleteRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant.. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id);
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutWithHttpInfo
     *
     * Supp Applicant Delete
     *
     * @param  \Swagger\Client\Model\ApplicantDeleteRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant.. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        $returnType = '';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsync
     *
     * Supp Applicant Delete
     *
     * @param  \Swagger\Client\Model\ApplicantDeleteRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant.. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsyncWithHttpInfo
     *
     * Supp Applicant Delete
     *
     * @param  \Swagger\Client\Model\ApplicantDeleteRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant.. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        $returnType = '';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut'
     *
     * @param  \Swagger\Client\Model\ApplicantDeleteRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant.. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePutRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut'
            );
        }
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null || (is_array($applicant_id) && count($applicant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applicant_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdDeletePut'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }
        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicantId' . '}',
                ObjectSerializer::toPathValue($applicant_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut
     *
     * Supp Applicant Update
     *
     * @param  \Swagger\Client\Model\ApplicantUpdateRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id);
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutWithHttpInfo
     *
     * Supp Applicant Update
     *
     * @param  \Swagger\Client\Model\ApplicantUpdateRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        $returnType = '';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsync
     *
     * Supp Applicant Update
     *
     * @param  \Swagger\Client\Model\ApplicantUpdateRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsyncWithHttpInfo
     *
     * Supp Applicant Update
     *
     * @param  \Swagger\Client\Model\ApplicantUpdateRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        $returnType = '';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut'
     *
     * @param  \Swagger\Client\Model\ApplicantUpdateRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPutRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id, $applicant_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut'
            );
        }
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null || (is_array($applicant_id) && count($applicant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applicant_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsApplicantIdPut'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }
        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicantId' . '}',
                ObjectSerializer::toPathValue($applicant_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet
     *
     * Supp Applicant Inquiry
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $control_flow_id It is used to control the flow for subsequent requests in the session. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApplicantInquiryResponse
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id, $applicant_id = null)
    {
        list($response) = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id, $applicant_id);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetWithHttpInfo
     *
     * Supp Applicant Inquiry
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $control_flow_id It is used to control the flow for subsequent requests in the session. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApplicantInquiryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id, $applicant_id = null)
    {
        $returnType = '\Swagger\Client\Model\ApplicantInquiryResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetRequest($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id, $applicant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApplicantInquiryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsync
     *
     * Supp Applicant Inquiry
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $control_flow_id It is used to control the flow for subsequent requests in the session. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsync($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id, $applicant_id = null)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id, $applicant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsyncWithHttpInfo
     *
     * Supp Applicant Inquiry
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $control_flow_id It is used to control the flow for subsequent requests in the session. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id, $applicant_id = null)
    {
        $returnType = '\Swagger\Client\Model\ApplicantInquiryResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetRequest($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id, $applicant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     * @param  string $control_flow_id It is used to control the flow for subsequent requests in the session. (required)
     * @param  string $applicant_id Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGetRequest($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id, $applicant_id = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet'
            );
        }
        // verify the required parameter 'control_flow_id' is set
        if ($control_flow_id === null || (is_array($control_flow_id) && count($control_flow_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $control_flow_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsGet'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($applicant_id !== null) {
            $queryParams['applicantId'] = ObjectSerializer::toQueryValue($applicant_id, null);
        }
        // query params
        if ($control_flow_id !== null) {
            $queryParams['controlFlowId'] = ObjectSerializer::toQueryValue($control_flow_id, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost
     *
     * Supp Applicant Add
     *
     * @param  \Swagger\Client\Model\ApplicantAddRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApplicantAddResponse
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        list($response) = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostWithHttpInfo
     *
     * Supp Applicant Add
     *
     * @param  \Swagger\Client\Model\ApplicantAddRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApplicantAddResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicantAddResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApplicantAddResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsync
     *
     * Supp Applicant Add
     *
     * @param  \Swagger\Client\Model\ApplicantAddRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsyncWithHttpInfo
     *
     * Supp Applicant Add
     *
     * @param  \Swagger\Client\Model\ApplicantAddRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicantAddResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost'
     *
     * @param  \Swagger\Client\Model\ApplicantAddRequest $body Add applicant details to the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Types that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdApplicantsPost'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost
     *
     * Screen Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\BackgroundScreeningRequest $body body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BackgroundScreeningResponse
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        list($response) = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostWithHttpInfo
     *
     * Screen Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\BackgroundScreeningRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BackgroundScreeningResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\BackgroundScreeningResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BackgroundScreeningResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsync
     *
     * Screen Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\BackgroundScreeningRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsyncWithHttpInfo
     *
     * Screen Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\BackgroundScreeningRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\BackgroundScreeningResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost'
     *
     * @param  \Swagger\Client\Model\BackgroundScreeningRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdBackgroundScreeningPost'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/backgroundScreening';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet
     *
     * Application Inquiry
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique identifier for the application. (required)
     * @param  string $control_flow_id Control flow id is used to control the flow for subsequent requests in the session. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApplicationInquiryResponse
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id = null)
    {
        list($response) = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetWithHttpInfo
     *
     * Application Inquiry
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique identifier for the application. (required)
     * @param  string $control_flow_id Control flow id is used to control the flow for subsequent requests in the session. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApplicationInquiryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id = null)
    {
        $returnType = '\Swagger\Client\Model\ApplicationInquiryResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetRequest($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApplicationInquiryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsync
     *
     * Application Inquiry
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique identifier for the application. (required)
     * @param  string $control_flow_id Control flow id is used to control the flow for subsequent requests in the session. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsync($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id = null)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsyncWithHttpInfo
     *
     * Application Inquiry
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique identifier for the application. (required)
     * @param  string $control_flow_id Control flow id is used to control the flow for subsequent requests in the session. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id = null)
    {
        $returnType = '\Swagger\Client\Model\ApplicationInquiryResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetRequest($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $application_id Unique identifier for the application. (required)
     * @param  string $control_flow_id Control flow id is used to control the flow for subsequent requests in the session. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGetRequest($authorization, $uuid, $accept, $client_id, $application_id, $control_flow_id = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdGet'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($control_flow_id !== null) {
            $queryParams['controlFlowId'] = ObjectSerializer::toQueryValue($control_flow_id, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost
     *
     * Request Credit Application Decision
     *
     * @param  \Swagger\Client\Model\InPrincipleApprovalRequest $body body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InPrincipleApprovalResponse
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        list($response) = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostWithHttpInfo
     *
     * Request Credit Application Decision
     *
     * @param  \Swagger\Client\Model\InPrincipleApprovalRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InPrincipleApprovalResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\InPrincipleApprovalResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InPrincipleApprovalResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsync
     *
     * Request Credit Application Decision
     *
     * @param  \Swagger\Client\Model\InPrincipleApprovalRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsyncWithHttpInfo
     *
     * Request Credit Application Decision
     *
     * @param  \Swagger\Client\Model\InPrincipleApprovalRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\InPrincipleApprovalResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost'
     *
     * @param  \Swagger\Client\Model\InPrincipleApprovalRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdInPrincipleApprovalsPost'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/inPrincipleApprovals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost
     *
     * Accept Cross Sell Products
     *
     * @param  \Swagger\Client\Model\OfferAcceptanceRequest $body Input Data to accept the product offered in the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostWithHttpInfo
     *
     * Accept Cross Sell Products
     *
     * @param  \Swagger\Client\Model\OfferAcceptanceRequest $body Input Data to accept the product offered in the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsync
     *
     * Accept Cross Sell Products
     *
     * @param  \Swagger\Client\Model\OfferAcceptanceRequest $body Input Data to accept the product offered in the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsyncWithHttpInfo
     *
     * Accept Cross Sell Products
     *
     * @param  \Swagger\Client\Model\OfferAcceptanceRequest $body Input Data to accept the product offered in the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost'
     *
     * @param  \Swagger\Client\Model\OfferAcceptanceRequest $body Input Data to accept the product offered in the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id the ID of the application (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdOfferAcceptancePost'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/offerAcceptance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut
     *
     * Update Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\ApplicationUpdateRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApplicationUpdateResponse
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        list($response) = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutWithHttpInfo
     *
     * Update Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\ApplicationUpdateRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApplicationUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicationUpdateResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApplicationUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsync
     *
     * Update Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\ApplicationUpdateRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsyncWithHttpInfo
     *
     * Update Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\ApplicationUpdateRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicationUpdateResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut'
     *
     * @param  \Swagger\Client\Model\ApplicationUpdateRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPutRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdPut'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet
     *
     * Check Application Status
     *
     * @param  string $application_id the ID of the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $control_flow_id Control Flow Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApplicationStatusResponse
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet($application_id, $authorization, $uuid, $accept, $client_id, $control_flow_id)
    {
        list($response) = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetWithHttpInfo($application_id, $authorization, $uuid, $accept, $client_id, $control_flow_id);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetWithHttpInfo
     *
     * Check Application Status
     *
     * @param  string $application_id the ID of the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $control_flow_id Control Flow Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApplicationStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetWithHttpInfo($application_id, $authorization, $uuid, $accept, $client_id, $control_flow_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicationStatusResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetRequest($application_id, $authorization, $uuid, $accept, $client_id, $control_flow_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApplicationStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsync
     *
     * Check Application Status
     *
     * @param  string $application_id the ID of the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $control_flow_id Control Flow Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsync($application_id, $authorization, $uuid, $accept, $client_id, $control_flow_id)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsyncWithHttpInfo($application_id, $authorization, $uuid, $accept, $client_id, $control_flow_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsyncWithHttpInfo
     *
     * Check Application Status
     *
     * @param  string $application_id the ID of the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $control_flow_id Control Flow Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetAsyncWithHttpInfo($application_id, $authorization, $uuid, $accept, $client_id, $control_flow_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicationStatusResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetRequest($application_id, $authorization, $uuid, $accept, $client_id, $control_flow_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet'
     *
     * @param  string $application_id the ID of the application (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $control_flow_id Control Flow Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGetRequest($application_id, $authorization, $uuid, $accept, $client_id, $control_flow_id)
    {
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet'
            );
        }
        // verify the required parameter 'control_flow_id' is set
        if ($control_flow_id === null || (is_array($control_flow_id) && count($control_flow_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $control_flow_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdStatusGet'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($control_flow_id !== null) {
            $queryParams['controlFlowId'] = ObjectSerializer::toQueryValue($control_flow_id, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost
     *
     * Submit Application
     *
     * @param  \Swagger\Client\Model\FinalSubmitRequest $body body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostWithHttpInfo
     *
     * Submit Application
     *
     * @param  \Swagger\Client\Model\FinalSubmitRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsync
     *
     * Submit Application
     *
     * @param  \Swagger\Client\Model\FinalSubmitRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsyncWithHttpInfo
     *
     * Submit Application
     *
     * @param  \Swagger\Client\Model\FinalSubmitRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        $returnType = '';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost'
     *
     * @param  \Swagger\Client\Model\FinalSubmitRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $application_id The unique identifier of the application. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $application_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling v1ApacOnboardingProductsUnsecuredApplicationsApplicationIdSubmissionPost'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/submission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsPost
     *
     * Create Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\ApplicationAddRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $accept_language List of acceptable human languages for response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApplicationAddResponse
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsPost($body, $authorization, $uuid, $accept, $client_id, $content_type, $accept_language = null)
    {
        list($response) = $this->v1ApacOnboardingProductsUnsecuredApplicationsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $accept_language);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsPostWithHttpInfo
     *
     * Create Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\ApplicationAddRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $accept_language List of acceptable human languages for response (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApplicationAddResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $accept_language = null)
    {
        $returnType = '\Swagger\Client\Model\ApplicationAddResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApplicationAddResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsPostAsync
     *
     * Create Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\ApplicationAddRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $accept_language List of acceptable human languages for response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsPostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $accept_language = null)
    {
        return $this->v1ApacOnboardingProductsUnsecuredApplicationsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProductsUnsecuredApplicationsPostAsyncWithHttpInfo
     *
     * Create Unsecured Credit Application
     *
     * @param  \Swagger\Client\Model\ApplicationAddRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $accept_language List of acceptable human languages for response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProductsUnsecuredApplicationsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $accept_language = null)
    {
        $returnType = '\Swagger\Client\Model\ApplicationAddResponse';
        $request = $this->v1ApacOnboardingProductsUnsecuredApplicationsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProductsUnsecuredApplicationsPost'
     *
     * @param  \Swagger\Client\Model\ApplicationAddRequest $body Input Data to submit the application. (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $accept_language List of acceptable human languages for response (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProductsUnsecuredApplicationsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $accept_language = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProductsUnsecuredApplicationsPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProductsUnsecuredApplicationsPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProductsUnsecuredApplicationsPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProductsUnsecuredApplicationsPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProductsUnsecuredApplicationsPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProductsUnsecuredApplicationsPost'
            );
        }

        $resourcePath = '/v1/apac/onboarding/products/unsecured/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1ApacOnboardingProspectsPost
     *
     * Submit Prospect
     *
     * @param  \Swagger\Client\Model\ProspectAddRequest $body Prospect Add Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProspectAddResponse
     */
    public function v1ApacOnboardingProspectsPost($body, $authorization, $uuid, $accept, $client_id, $content_type)
    {
        list($response) = $this->v1ApacOnboardingProspectsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type);
        return $response;
    }

    /**
     * Operation v1ApacOnboardingProspectsPostWithHttpInfo
     *
     * Submit Prospect
     *
     * @param  \Swagger\Client\Model\ProspectAddRequest $body Prospect Add Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProspectAddResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1ApacOnboardingProspectsPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type)
    {
        $returnType = '\Swagger\Client\Model\ProspectAddResponse';
        $request = $this->v1ApacOnboardingProspectsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProspectAddResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1ApacOnboardingProspectsPostAsync
     *
     * Submit Prospect
     *
     * @param  \Swagger\Client\Model\ProspectAddRequest $body Prospect Add Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProspectsPostAsync($body, $authorization, $uuid, $accept, $client_id, $content_type)
    {
        return $this->v1ApacOnboardingProspectsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1ApacOnboardingProspectsPostAsyncWithHttpInfo
     *
     * Submit Prospect
     *
     * @param  \Swagger\Client\Model\ProspectAddRequest $body Prospect Add Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1ApacOnboardingProspectsPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type)
    {
        $returnType = '\Swagger\Client\Model\ProspectAddResponse';
        $request = $this->v1ApacOnboardingProspectsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1ApacOnboardingProspectsPost'
     *
     * @param  \Swagger\Client\Model\ProspectAddRequest $body Prospect Add Request (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1ApacOnboardingProspectsPostRequest($body, $authorization, $uuid, $accept, $client_id, $content_type)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1ApacOnboardingProspectsPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1ApacOnboardingProspectsPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1ApacOnboardingProspectsPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1ApacOnboardingProspectsPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1ApacOnboardingProspectsPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling v1ApacOnboardingProspectsPost'
            );
        }

        $resourcePath = '/v1/apac/onboarding/prospects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
