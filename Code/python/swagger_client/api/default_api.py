# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_apac_onboarding_applications_application_id_documents_post(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Upload Application Documents  # noqa: E501

        This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_applications_application_id_documents_post(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InsertDocumentRequest body: Insert the documents in documentum. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: The unique identifier of the application. (required)
        :return: InsertDocumentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_applications_application_id_documents_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_applications_application_id_documents_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_applications_application_id_documents_post_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Upload Application Documents  # noqa: E501

        This API allows the applicant to upload the documents online to the specified application. Required documents such as drivers license and banking statements will be returned in the application decision.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_applications_application_id_documents_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InsertDocumentRequest body: Insert the documents in documentum. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: The unique identifier of the application. (required)
        :return: InsertDocumentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_applications_application_id_documents_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_applications_application_id_documents_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_applications_application_id_documents_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_applications_application_id_documents_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_applications_application_id_documents_post`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_applications_application_id_documents_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_applications_application_id_documents_post`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_applications_application_id_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/applications/{applicationId}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InsertDocumentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put(self, body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, **kwargs):  # noqa: E501
        """Supp Applicant Delete  # noqa: E501

        Allows primary card holder to delete the supplementary card application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put(body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicantDeleteRequest body: Add applicant details to the application (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Types that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :param str applicant_id: Unique ID created for an Applicant.. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, **kwargs):  # noqa: E501
        """Supp Applicant Delete  # noqa: E501

        Allows primary card holder to delete the supplementary card application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicantDeleteRequest body: Add applicant details to the application (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Types that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :param str applicant_id: Unique ID created for an Applicant.. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id', 'applicant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put`")  # noqa: E501
        # verify the required parameter 'applicant_id' is set
        if ('applicant_id' not in params or
                params['applicant_id'] is None):
            raise ValueError("Missing the required parameter `applicant_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_delete_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'applicant_id' in params:
            path_params['applicantId'] = params['applicant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}/delete', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put(self, body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, **kwargs):  # noqa: E501
        """Supp Applicant Update  # noqa: E501

        Allows primary card holder to edit or update the supplementary card application details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put(body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicantUpdateRequest body: Add applicant details to the application (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Types that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :param str applicant_id: Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, **kwargs):  # noqa: E501
        """Supp Applicant Update  # noqa: E501

        Allows primary card holder to edit or update the supplementary card application details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, applicant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicantUpdateRequest body: Add applicant details to the application (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Types that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :param str applicant_id: Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id', 'applicant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put`")  # noqa: E501
        # verify the required parameter 'applicant_id' is set
        if ('applicant_id' not in params or
                params['applicant_id'] is None):
            raise ValueError("Missing the required parameter `applicant_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_applicant_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'applicant_id' in params:
            path_params['applicantId'] = params['applicant_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants/{applicantId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get(self, authorization, uuid, accept, client_id, application_id, control_flow_id, **kwargs):  # noqa: E501
        """Supp Applicant Inquiry  # noqa: E501

        This API returns supplementary application details for the specific supplementary application id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get(authorization, uuid, accept, client_id, application_id, control_flow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Types that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :param str control_flow_id: It is used to control the flow for subsequent requests in the session. (required)
        :param str applicant_id: Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.
        :return: ApplicantInquiryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get_with_http_info(authorization, uuid, accept, client_id, application_id, control_flow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get_with_http_info(authorization, uuid, accept, client_id, application_id, control_flow_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get_with_http_info(self, authorization, uuid, accept, client_id, application_id, control_flow_id, **kwargs):  # noqa: E501
        """Supp Applicant Inquiry  # noqa: E501

        This API returns supplementary application details for the specific supplementary application id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get_with_http_info(authorization, uuid, accept, client_id, application_id, control_flow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Types that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :param str control_flow_id: It is used to control the flow for subsequent requests in the session. (required)
        :param str applicant_id: Unique ID created for an Applicant. This is retuned back in ApplicantAdd response and the same should be passed here.
        :return: ApplicantInquiryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'uuid', 'accept', 'client_id', 'application_id', 'control_flow_id', 'applicant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get`")  # noqa: E501
        # verify the required parameter 'control_flow_id' is set
        if ('control_flow_id' not in params or
                params['control_flow_id'] is None):
            raise ValueError("Missing the required parameter `control_flow_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []
        if 'applicant_id' in params:
            query_params.append(('applicantId', params['applicant_id']))  # noqa: E501
        if 'control_flow_id' in params:
            query_params.append(('controlFlowId', params['control_flow_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantInquiryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Supp Applicant Add  # noqa: E501

        This API creates a new supplementary card application along with primary card application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicantAddRequest body: Add applicant details to the application (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Types that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :return: ApplicantAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Supp Applicant Add  # noqa: E501

        This API creates a new supplementary card application along with primary card application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicantAddRequest body: Add applicant details to the application (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Types that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :return: ApplicantAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_applicants_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/applicants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicantAddResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Screen Unsecured Credit Application  # noqa: E501

        This API submits the specified unsecured credit application for screening.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BackgroundScreeningRequest body: (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: The unique identifier of the application (required)
        :return: BackgroundScreeningResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Screen Unsecured Credit Application  # noqa: E501

        This API submits the specified unsecured credit application for screening.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BackgroundScreeningRequest body: (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: The unique identifier of the application (required)
        :return: BackgroundScreeningResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_background_screening_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/backgroundScreening', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackgroundScreeningResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_get(self, authorization, uuid, accept, client_id, application_id, **kwargs):  # noqa: E501
        """Application Inquiry  # noqa: E501

        This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_get(authorization, uuid, accept, client_id, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str application_id: Unique identifier for the application. (required)
        :param str control_flow_id: Control flow id is used to control the flow for subsequent requests in the session.
        :return: ApplicationInquiryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_get_with_http_info(authorization, uuid, accept, client_id, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_get_with_http_info(authorization, uuid, accept, client_id, application_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_get_with_http_info(self, authorization, uuid, accept, client_id, application_id, **kwargs):  # noqa: E501
        """Application Inquiry  # noqa: E501

        This API returns the application details and status for a specific application id after a successful Multi Factor Authentication.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_get_with_http_info(authorization, uuid, accept, client_id, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str application_id: Unique identifier for the application. (required)
        :param str control_flow_id: Control flow id is used to control the flow for subsequent requests in the session.
        :return: ApplicationInquiryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'uuid', 'accept', 'client_id', 'application_id', 'control_flow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_get`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_get`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_get`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []
        if 'control_flow_id' in params:
            query_params.append(('controlFlowId', params['control_flow_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationInquiryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Request Credit Application Decision  # noqa: E501

        This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InPrincipleApprovalRequest body: (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: the ID of the application (required)
        :return: InPrincipleApprovalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Request Credit Application Decision  # noqa: E501

        This API returns the results of a decision inquiry for an application, including credit limit, counter-product offers and cross-sell offers along with the list of required documents.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InPrincipleApprovalRequest body: (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: the ID of the application (required)
        :return: InPrincipleApprovalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_in_principle_approvals_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/inPrincipleApprovals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InPrincipleApprovalResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Accept Cross Sell Products  # noqa: E501

        This API accepts specified cross-sell product offers that were returned in the application decision.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferAcceptanceRequest body: Input Data to accept the product offered in the application. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: the ID of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Accept Cross Sell Products  # noqa: E501

        This API accepts specified cross-sell product offers that were returned in the application decision.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OfferAcceptanceRequest body: Input Data to accept the product offered in the application. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: the ID of the application (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_offer_acceptance_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/offerAcceptance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_put(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Update Unsecured Credit Application  # noqa: E501

        This API updates a saved application to correct information that was previously blank.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_put(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationUpdateRequest body: Input Data to submit the application. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :return: ApplicationUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_put_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_put_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_put_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Update Unsecured Credit Application  # noqa: E501

        This API updates a saved application to correct information that was previously blank.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_put_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationUpdateRequest body: Input Data to submit the application. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: Unique ID created for an Application. This is retuned back in ApplicationAdd response and the same should be passed here. (required)
        :return: ApplicationUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_put`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_put`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_put`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_put`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_put`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_status_get(self, application_id, authorization, uuid, accept, client_id, control_flow_id, **kwargs):  # noqa: E501
        """Check Application Status  # noqa: E501

        This API returns the status for a specified submitted application and takes the application id as parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_status_get(application_id, authorization, uuid, accept, client_id, control_flow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: the ID of the application (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str control_flow_id: Control Flow Id (required)
        :return: ApplicationStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_status_get_with_http_info(application_id, authorization, uuid, accept, client_id, control_flow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_status_get_with_http_info(application_id, authorization, uuid, accept, client_id, control_flow_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_status_get_with_http_info(self, application_id, authorization, uuid, accept, client_id, control_flow_id, **kwargs):  # noqa: E501
        """Check Application Status  # noqa: E501

        This API returns the status for a specified submitted application and takes the application id as parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_status_get_with_http_info(application_id, authorization, uuid, accept, client_id, control_flow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: the ID of the application (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str control_flow_id: Control Flow Id (required)
        :return: ApplicationStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'authorization', 'uuid', 'accept', 'client_id', 'control_flow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_status_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_status_get`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_status_get`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_status_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_status_get`")  # noqa: E501
        # verify the required parameter 'control_flow_id' is set
        if ('control_flow_id' not in params or
                params['control_flow_id'] is None):
            raise ValueError("Missing the required parameter `control_flow_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []
        if 'control_flow_id' in params:
            query_params.append(('controlFlowId', params['control_flow_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_application_id_submission_post(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Submit Application  # noqa: E501

        This API submits the created application to host systems for a particular application id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_submission_post(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FinalSubmitRequest body: (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: The unique identifier of the application. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_application_id_submission_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_application_id_submission_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_application_id_submission_post_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """Submit Application  # noqa: E501

        This API submits the created application to host systems for a particular application id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_application_id_submission_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FinalSubmitRequest body: (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: The unique identifier of the application. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_application_id_submission_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_submission_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_submission_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_submission_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_submission_post`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_submission_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_submission_post`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `v1_apac_onboarding_products_unsecured_applications_application_id_submission_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications/{applicationId}/submission', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_products_unsecured_applications_post(self, body, authorization, uuid, accept, client_id, content_type, **kwargs):  # noqa: E501
        """Create Unsecured Credit Application  # noqa: E501

        This API pre-populates an application for card and banking products with the applicant's details. The API will then return an application id that can be used to perform actions on the application and check status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_post(body, authorization, uuid, accept, client_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationAddRequest body: Input Data to submit the application. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str accept_language: List of acceptable human languages for response
        :return: ApplicationAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_products_unsecured_applications_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_products_unsecured_applications_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_products_unsecured_applications_post_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, **kwargs):  # noqa: E501
        """Create Unsecured Credit Application  # noqa: E501

        This API pre-populates an application for card and banking products with the applicant's details. The API will then return an application id that can be used to perform actions on the application and check status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_products_unsecured_applications_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationAddRequest body: Input Data to submit the application. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str accept_language: List of acceptable human languages for response
        :return: ApplicationAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_products_unsecured_applications_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_products_unsecured_applications_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_products_unsecured_applications_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_products_unsecured_applications_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_products_unsecured_applications_post`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_products_unsecured_applications_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_products_unsecured_applications_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/products/unsecured/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationAddResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_apac_onboarding_prospects_post(self, body, authorization, uuid, accept, client_id, content_type, **kwargs):  # noqa: E501
        """Submit Prospect  # noqa: E501

        This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_prospects_post(body, authorization, uuid, accept, client_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProspectAddRequest body: Prospect Add Request (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :return: ProspectAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_apac_onboarding_prospects_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_apac_onboarding_prospects_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, **kwargs)  # noqa: E501
            return data

    def v1_apac_onboarding_prospects_post_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, **kwargs):  # noqa: E501
        """Submit Prospect  # noqa: E501

        This API is used to create a new prospect or a potential customer for the bank. Returns a prospect id that can be used for reach out and conversions to applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_apac_onboarding_prospects_post_with_http_info(body, authorization, uuid, accept, client_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProspectAddRequest body: Prospect Add Request (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :return: ProspectAddResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_apac_onboarding_prospects_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v1_apac_onboarding_prospects_post`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_apac_onboarding_prospects_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_apac_onboarding_prospects_post`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_apac_onboarding_prospects_post`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_apac_onboarding_prospects_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `v1_apac_onboarding_prospects_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/apac/onboarding/prospects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProspectAddResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
