# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_id_type': 'str',
        'document_format': 'str',
        'proof_type': 'str',
        'applicant_type': 'str',
        'applicant_id': 'str',
        'binary_data': 'str'
    }

    attribute_map = {
        'document_id_type': 'documentIdType',
        'document_format': 'documentFormat',
        'proof_type': 'proofType',
        'applicant_type': 'applicantType',
        'applicant_id': 'applicantId',
        'binary_data': 'binaryData'
    }

    def __init__(self, document_id_type=None, document_format=None, proof_type=None, applicant_type=None, applicant_id=None, binary_data=None):  # noqa: E501
        """DocumentDetails - a model defined in Swagger"""  # noqa: E501
        self._document_id_type = None
        self._document_format = None
        self._proof_type = None
        self._applicant_type = None
        self._applicant_id = None
        self._binary_data = None
        self.discriminator = None
        self.document_id_type = document_id_type
        self.document_format = document_format
        self.proof_type = proof_type
        if applicant_type is not None:
            self.applicant_type = applicant_type
        if applicant_id is not None:
            self.applicant_id = applicant_id
        self.binary_data = binary_data

    @property
    def document_id_type(self):
        """Gets the document_id_type of this DocumentDetails.  # noqa: E501

        Document ID for each proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get possible value of this field with description. You can use the documentIdType as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The document_id_type of this DocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._document_id_type

    @document_id_type.setter
    def document_id_type(self, document_id_type):
        """Sets the document_id_type of this DocumentDetails.

        Document ID for each proof.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentIdType} resource to get possible value of this field with description. You can use the documentIdType as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param document_id_type: The document_id_type of this DocumentDetails.  # noqa: E501
        :type: str
        """
        if document_id_type is None:
            raise ValueError("Invalid value for `document_id_type`, must not be `None`")  # noqa: E501

        self._document_id_type = document_id_type

    @property
    def document_format(self):
        """Gets the document_format of this DocumentDetails.  # noqa: E501

        Format of the scanned document.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentFormat} resource to get possible value of this field with description. You can use the documentFormat as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The document_format of this DocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._document_format

    @document_format.setter
    def document_format(self, document_format):
        """Sets the document_format of this DocumentDetails.

        Format of the scanned document.This is a reference data field. Please use /v1/apac/utilities/referenceData/{documentFormat} resource to get possible value of this field with description. You can use the documentFormat as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param document_format: The document_format of this DocumentDetails.  # noqa: E501
        :type: str
        """
        if document_format is None:
            raise ValueError("Invalid value for `document_format`, must not be `None`")  # noqa: E501

        self._document_format = document_format

    @property
    def proof_type(self):
        """Gets the proof_type of this DocumentDetails.  # noqa: E501

        Classification of the document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The proof_type of this DocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._proof_type

    @proof_type.setter
    def proof_type(self, proof_type):
        """Sets the proof_type of this DocumentDetails.

        Classification of the document. This is a reference data field. Please use /v1/apac/utilities/referenceData/{proofType} resource to get possible values of this field with descriptions.You can use the proofType as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param proof_type: The proof_type of this DocumentDetails.  # noqa: E501
        :type: str
        """
        if proof_type is None:
            raise ValueError("Invalid value for `proof_type`, must not be `None`")  # noqa: E501

        self._proof_type = proof_type

    @property
    def applicant_type(self):
        """Gets the applicant_type of this DocumentDetails.  # noqa: E501

        Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the applicantType as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The applicant_type of this DocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._applicant_type

    @applicant_type.setter
    def applicant_type(self, applicant_type):
        """Sets the applicant_type of this DocumentDetails.

        Type of an applicant.This is a reference data field.Please use /utilities/referenceData/{applicantType} resource to get valid values of this field with descriptions. You can use the applicantType as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param applicant_type: The applicant_type of this DocumentDetails.  # noqa: E501
        :type: str
        """

        self._applicant_type = applicant_type

    @property
    def applicant_id(self):
        """Gets the applicant_id of this DocumentDetails.  # noqa: E501

        Unique identifier to be provided for a supplementary applicant.  # noqa: E501

        :return: The applicant_id of this DocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._applicant_id

    @applicant_id.setter
    def applicant_id(self, applicant_id):
        """Sets the applicant_id of this DocumentDetails.

        Unique identifier to be provided for a supplementary applicant.  # noqa: E501

        :param applicant_id: The applicant_id of this DocumentDetails.  # noqa: E501
        :type: str
        """

        self._applicant_id = applicant_id

    @property
    def binary_data(self):
        """Gets the binary_data of this DocumentDetails.  # noqa: E501

        This field contains binary data of the uploaded document.  # noqa: E501

        :return: The binary_data of this DocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._binary_data

    @binary_data.setter
    def binary_data(self, binary_data):
        """Sets the binary_data of this DocumentDetails.

        This field contains binary data of the uploaded document.  # noqa: E501

        :param binary_data: The binary_data of this DocumentDetails.  # noqa: E501
        :type: str
        """
        if binary_data is None:
            raise ValueError("Invalid value for `binary_data`, must not be `None`")  # noqa: E501

        self._binary_data = binary_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
