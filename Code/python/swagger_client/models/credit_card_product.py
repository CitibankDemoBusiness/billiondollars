# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditCardProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_code': 'str',
        'source_code': 'str',
        'organization': 'str',
        'logo': 'str'
    }

    attribute_map = {
        'product_code': 'productCode',
        'source_code': 'sourceCode',
        'organization': 'organization',
        'logo': 'logo'
    }

    def __init__(self, product_code=None, source_code=None, organization=None, logo=None):  # noqa: E501
        """CreditCardProduct - a model defined in Swagger"""  # noqa: E501
        self._product_code = None
        self._source_code = None
        self._organization = None
        self._logo = None
        self.discriminator = None
        if product_code is not None:
            self.product_code = product_code
        if source_code is not None:
            self.source_code = source_code
        if organization is not None:
            self.organization = organization
        if logo is not None:
            self.logo = logo

    @property
    def product_code(self):
        """Gets the product_code of this CreditCardProduct.  # noqa: E501

        A unique code that identifies the product.  # noqa: E501

        :return: The product_code of this CreditCardProduct.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this CreditCardProduct.

        A unique code that identifies the product.  # noqa: E501

        :param product_code: The product_code of this CreditCardProduct.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def source_code(self):
        """Gets the source_code of this CreditCardProduct.  # noqa: E501

        A source code to identify the product  # noqa: E501

        :return: The source_code of this CreditCardProduct.  # noqa: E501
        :rtype: str
        """
        return self._source_code

    @source_code.setter
    def source_code(self, source_code):
        """Sets the source_code of this CreditCardProduct.

        A source code to identify the product  # noqa: E501

        :param source_code: The source_code of this CreditCardProduct.  # noqa: E501
        :type: str
        """

        self._source_code = source_code

    @property
    def organization(self):
        """Gets the organization of this CreditCardProduct.  # noqa: E501

        Card issuing organization name  # noqa: E501

        :return: The organization of this CreditCardProduct.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CreditCardProduct.

        Card issuing organization name  # noqa: E501

        :param organization: The organization of this CreditCardProduct.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def logo(self):
        """Gets the logo of this CreditCardProduct.  # noqa: E501

        Product logo to identify the product  # noqa: E501

        :return: The logo of this CreditCardProduct.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CreditCardProduct.

        Product logo to identify the product  # noqa: E501

        :param logo: The logo of this CreditCardProduct.  # noqa: E501
        :type: str
        """

        self._logo = logo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
