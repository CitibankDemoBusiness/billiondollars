# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicantInquiryConsentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consent_type': 'str',
        'is_consent_given': 'bool'
    }

    attribute_map = {
        'consent_type': 'consentType',
        'is_consent_given': 'isConsentGiven'
    }

    def __init__(self, consent_type=None, is_consent_given=None):  # noqa: E501
        """ApplicantInquiryConsentDetails - a model defined in Swagger"""  # noqa: E501
        self._consent_type = None
        self._is_consent_given = None
        self.discriminator = None
        if consent_type is not None:
            self.consent_type = consent_type
        if is_consent_given is not None:
            self.is_consent_given = is_consent_given

    @property
    def consent_type(self):
        """Gets the consent_type of this ApplicantInquiryConsentDetails.  # noqa: E501

        Applicant's consent types. This is a reference data field. Please use /v1/apac/utilities/referenceData/{consentType} resource to get valid value of this field with description. You can use consentType field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The consent_type of this ApplicantInquiryConsentDetails.  # noqa: E501
        :rtype: str
        """
        return self._consent_type

    @consent_type.setter
    def consent_type(self, consent_type):
        """Sets the consent_type of this ApplicantInquiryConsentDetails.

        Applicant's consent types. This is a reference data field. Please use /v1/apac/utilities/referenceData/{consentType} resource to get valid value of this field with description. You can use consentType field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param consent_type: The consent_type of this ApplicantInquiryConsentDetails.  # noqa: E501
        :type: str
        """

        self._consent_type = consent_type

    @property
    def is_consent_given(self):
        """Gets the is_consent_given of this ApplicantInquiryConsentDetails.  # noqa: E501

        Consent flag. Valid values: true and false  # noqa: E501

        :return: The is_consent_given of this ApplicantInquiryConsentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_consent_given

    @is_consent_given.setter
    def is_consent_given(self, is_consent_given):
        """Sets the is_consent_given of this ApplicantInquiryConsentDetails.

        Consent flag. Valid values: true and false  # noqa: E501

        :param is_consent_given: The is_consent_given of this ApplicantInquiryConsentDetails.  # noqa: E501
        :type: bool
        """

        self._is_consent_given = is_consent_given

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantInquiryConsentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantInquiryConsentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
