# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ECMApplicant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'ECMName',
        'demographics': 'ECMDemographics',
        'email': 'list[ECMEmail]',
        'phone': 'list[ECMPhone]',
        'identification_document_details': 'list[ECMIdentificationDocumentDetails]',
        'additional_data': 'ECMAdditionalData',
        'consent_details': 'list[ECMConsentDetails]',
        'partner_customer_details': 'ECMPartnerCustomerDetails',
        'student_indicator': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'demographics': 'demographics',
        'email': 'email',
        'phone': 'phone',
        'identification_document_details': 'identificationDocumentDetails',
        'additional_data': 'additionalData',
        'consent_details': 'consentDetails',
        'partner_customer_details': 'partnerCustomerDetails',
        'student_indicator': 'studentIndicator'
    }

    def __init__(self, name=None, demographics=None, email=None, phone=None, identification_document_details=None, additional_data=None, consent_details=None, partner_customer_details=None, student_indicator=None):  # noqa: E501
        """ECMApplicant - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._demographics = None
        self._email = None
        self._phone = None
        self._identification_document_details = None
        self._additional_data = None
        self._consent_details = None
        self._partner_customer_details = None
        self._student_indicator = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if demographics is not None:
            self.demographics = demographics
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if identification_document_details is not None:
            self.identification_document_details = identification_document_details
        if additional_data is not None:
            self.additional_data = additional_data
        if consent_details is not None:
            self.consent_details = consent_details
        if partner_customer_details is not None:
            self.partner_customer_details = partner_customer_details
        if student_indicator is not None:
            self.student_indicator = student_indicator

    @property
    def name(self):
        """Gets the name of this ECMApplicant.  # noqa: E501


        :return: The name of this ECMApplicant.  # noqa: E501
        :rtype: ECMName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ECMApplicant.


        :param name: The name of this ECMApplicant.  # noqa: E501
        :type: ECMName
        """

        self._name = name

    @property
    def demographics(self):
        """Gets the demographics of this ECMApplicant.  # noqa: E501


        :return: The demographics of this ECMApplicant.  # noqa: E501
        :rtype: ECMDemographics
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics):
        """Sets the demographics of this ECMApplicant.


        :param demographics: The demographics of this ECMApplicant.  # noqa: E501
        :type: ECMDemographics
        """

        self._demographics = demographics

    @property
    def email(self):
        """Gets the email of this ECMApplicant.  # noqa: E501


        :return: The email of this ECMApplicant.  # noqa: E501
        :rtype: list[ECMEmail]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ECMApplicant.


        :param email: The email of this ECMApplicant.  # noqa: E501
        :type: list[ECMEmail]
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this ECMApplicant.  # noqa: E501


        :return: The phone of this ECMApplicant.  # noqa: E501
        :rtype: list[ECMPhone]
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ECMApplicant.


        :param phone: The phone of this ECMApplicant.  # noqa: E501
        :type: list[ECMPhone]
        """

        self._phone = phone

    @property
    def identification_document_details(self):
        """Gets the identification_document_details of this ECMApplicant.  # noqa: E501


        :return: The identification_document_details of this ECMApplicant.  # noqa: E501
        :rtype: list[ECMIdentificationDocumentDetails]
        """
        return self._identification_document_details

    @identification_document_details.setter
    def identification_document_details(self, identification_document_details):
        """Sets the identification_document_details of this ECMApplicant.


        :param identification_document_details: The identification_document_details of this ECMApplicant.  # noqa: E501
        :type: list[ECMIdentificationDocumentDetails]
        """

        self._identification_document_details = identification_document_details

    @property
    def additional_data(self):
        """Gets the additional_data of this ECMApplicant.  # noqa: E501


        :return: The additional_data of this ECMApplicant.  # noqa: E501
        :rtype: ECMAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this ECMApplicant.


        :param additional_data: The additional_data of this ECMApplicant.  # noqa: E501
        :type: ECMAdditionalData
        """

        self._additional_data = additional_data

    @property
    def consent_details(self):
        """Gets the consent_details of this ECMApplicant.  # noqa: E501


        :return: The consent_details of this ECMApplicant.  # noqa: E501
        :rtype: list[ECMConsentDetails]
        """
        return self._consent_details

    @consent_details.setter
    def consent_details(self, consent_details):
        """Sets the consent_details of this ECMApplicant.


        :param consent_details: The consent_details of this ECMApplicant.  # noqa: E501
        :type: list[ECMConsentDetails]
        """

        self._consent_details = consent_details

    @property
    def partner_customer_details(self):
        """Gets the partner_customer_details of this ECMApplicant.  # noqa: E501


        :return: The partner_customer_details of this ECMApplicant.  # noqa: E501
        :rtype: ECMPartnerCustomerDetails
        """
        return self._partner_customer_details

    @partner_customer_details.setter
    def partner_customer_details(self, partner_customer_details):
        """Sets the partner_customer_details of this ECMApplicant.


        :param partner_customer_details: The partner_customer_details of this ECMApplicant.  # noqa: E501
        :type: ECMPartnerCustomerDetails
        """

        self._partner_customer_details = partner_customer_details

    @property
    def student_indicator(self):
        """Gets the student_indicator of this ECMApplicant.  # noqa: E501

        Indicates if the applicant is a student.Valid values are Yes or No  # noqa: E501

        :return: The student_indicator of this ECMApplicant.  # noqa: E501
        :rtype: bool
        """
        return self._student_indicator

    @student_indicator.setter
    def student_indicator(self, student_indicator):
        """Sets the student_indicator of this ECMApplicant.

        Indicates if the applicant is a student.Valid values are Yes or No  # noqa: E501

        :param student_indicator: The student_indicator of this ECMApplicant.  # noqa: E501
        :type: bool
        """

        self._student_indicator = student_indicator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECMApplicant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECMApplicant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
