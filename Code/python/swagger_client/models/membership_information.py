# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MembershipInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'membership_number': 'str',
        'membership_type': 'str'
    }

    attribute_map = {
        'membership_number': 'membershipNumber',
        'membership_type': 'membershipType'
    }

    def __init__(self, membership_number=None, membership_type=None):  # noqa: E501
        """MembershipInformation - a model defined in Swagger"""  # noqa: E501
        self._membership_number = None
        self._membership_type = None
        self.discriminator = None
        if membership_number is not None:
            self.membership_number = membership_number
        if membership_type is not None:
            self.membership_type = membership_type

    @property
    def membership_number(self):
        """Gets the membership_number of this MembershipInformation.  # noqa: E501

        Applicants 12-digit membership number.  # noqa: E501

        :return: The membership_number of this MembershipInformation.  # noqa: E501
        :rtype: str
        """
        return self._membership_number

    @membership_number.setter
    def membership_number(self, membership_number):
        """Sets the membership_number of this MembershipInformation.

        Applicants 12-digit membership number.  # noqa: E501

        :param membership_number: The membership_number of this MembershipInformation.  # noqa: E501
        :type: str
        """

        self._membership_number = membership_number

    @property
    def membership_type(self):
        """Gets the membership_type of this MembershipInformation.  # noqa: E501

        Applicants membership type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{membershipType} resource to get valid value of this field with description.  # noqa: E501

        :return: The membership_type of this MembershipInformation.  # noqa: E501
        :rtype: str
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this MembershipInformation.

        Applicants membership type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{membershipType} resource to get valid value of this field with description.  # noqa: E501

        :param membership_type: The membership_type of this MembershipInformation.  # noqa: E501
        :type: str
        """

        self._membership_type = membership_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MembershipInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MembershipInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
