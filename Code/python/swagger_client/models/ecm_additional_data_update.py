# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ECMAdditionalDataUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cash_pin_flag': 'bool',
        'utility_bill_details': 'UtilityBillDetails',
        'billing_cycle_day': 'str',
        'application_reference_id': 'str',
        'printing_serial_number': 'str',
        'account_fund_source': 'str',
        'media_id': 'str',
        'referral_tracking': 'ReferralTracking'
    }

    attribute_map = {
        'cash_pin_flag': 'cashPinFlag',
        'utility_bill_details': 'utilityBillDetails',
        'billing_cycle_day': 'billingCycleDay',
        'application_reference_id': 'applicationReferenceId',
        'printing_serial_number': 'printingSerialNumber',
        'account_fund_source': 'accountFundSource',
        'media_id': 'mediaId',
        'referral_tracking': 'referralTracking'
    }

    def __init__(self, cash_pin_flag=None, utility_bill_details=None, billing_cycle_day=None, application_reference_id=None, printing_serial_number=None, account_fund_source=None, media_id=None, referral_tracking=None):  # noqa: E501
        """ECMAdditionalDataUpdate - a model defined in Swagger"""  # noqa: E501
        self._cash_pin_flag = None
        self._utility_bill_details = None
        self._billing_cycle_day = None
        self._application_reference_id = None
        self._printing_serial_number = None
        self._account_fund_source = None
        self._media_id = None
        self._referral_tracking = None
        self.discriminator = None
        if cash_pin_flag is not None:
            self.cash_pin_flag = cash_pin_flag
        if utility_bill_details is not None:
            self.utility_bill_details = utility_bill_details
        if billing_cycle_day is not None:
            self.billing_cycle_day = billing_cycle_day
        if application_reference_id is not None:
            self.application_reference_id = application_reference_id
        if printing_serial_number is not None:
            self.printing_serial_number = printing_serial_number
        if account_fund_source is not None:
            self.account_fund_source = account_fund_source
        if media_id is not None:
            self.media_id = media_id
        if referral_tracking is not None:
            self.referral_tracking = referral_tracking

    @property
    def cash_pin_flag(self):
        """Gets the cash_pin_flag of this ECMAdditionalDataUpdate.  # noqa: E501

        Indicates whether the customer wants a separate cash PIN.  # noqa: E501

        :return: The cash_pin_flag of this ECMAdditionalDataUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._cash_pin_flag

    @cash_pin_flag.setter
    def cash_pin_flag(self, cash_pin_flag):
        """Sets the cash_pin_flag of this ECMAdditionalDataUpdate.

        Indicates whether the customer wants a separate cash PIN.  # noqa: E501

        :param cash_pin_flag: The cash_pin_flag of this ECMAdditionalDataUpdate.  # noqa: E501
        :type: bool
        """

        self._cash_pin_flag = cash_pin_flag

    @property
    def utility_bill_details(self):
        """Gets the utility_bill_details of this ECMAdditionalDataUpdate.  # noqa: E501


        :return: The utility_bill_details of this ECMAdditionalDataUpdate.  # noqa: E501
        :rtype: UtilityBillDetails
        """
        return self._utility_bill_details

    @utility_bill_details.setter
    def utility_bill_details(self, utility_bill_details):
        """Sets the utility_bill_details of this ECMAdditionalDataUpdate.


        :param utility_bill_details: The utility_bill_details of this ECMAdditionalDataUpdate.  # noqa: E501
        :type: UtilityBillDetails
        """

        self._utility_bill_details = utility_bill_details

    @property
    def billing_cycle_day(self):
        """Gets the billing_cycle_day of this ECMAdditionalDataUpdate.  # noqa: E501

        Day of each month for the bill payment. This is a reference data field. Please use /v1/utilities/referenceData/{billingCycleDay} resource to get valid value of this field with description.  # noqa: E501

        :return: The billing_cycle_day of this ECMAdditionalDataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._billing_cycle_day

    @billing_cycle_day.setter
    def billing_cycle_day(self, billing_cycle_day):
        """Sets the billing_cycle_day of this ECMAdditionalDataUpdate.

        Day of each month for the bill payment. This is a reference data field. Please use /v1/utilities/referenceData/{billingCycleDay} resource to get valid value of this field with description.  # noqa: E501

        :param billing_cycle_day: The billing_cycle_day of this ECMAdditionalDataUpdate.  # noqa: E501
        :type: str
        """

        self._billing_cycle_day = billing_cycle_day

    @property
    def application_reference_id(self):
        """Gets the application_reference_id of this ECMAdditionalDataUpdate.  # noqa: E501

        Unique reference ID associated with the application  # noqa: E501

        :return: The application_reference_id of this ECMAdditionalDataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._application_reference_id

    @application_reference_id.setter
    def application_reference_id(self, application_reference_id):
        """Sets the application_reference_id of this ECMAdditionalDataUpdate.

        Unique reference ID associated with the application  # noqa: E501

        :param application_reference_id: The application_reference_id of this ECMAdditionalDataUpdate.  # noqa: E501
        :type: str
        """

        self._application_reference_id = application_reference_id

    @property
    def printing_serial_number(self):
        """Gets the printing_serial_number of this ECMAdditionalDataUpdate.  # noqa: E501

        This field refers to the unique number for each application to be identified by COLA and printed in PDF form.It enables to identify the customer in case the customer could not complete filling his/her details and was dropped-off in between  # noqa: E501

        :return: The printing_serial_number of this ECMAdditionalDataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._printing_serial_number

    @printing_serial_number.setter
    def printing_serial_number(self, printing_serial_number):
        """Sets the printing_serial_number of this ECMAdditionalDataUpdate.

        This field refers to the unique number for each application to be identified by COLA and printed in PDF form.It enables to identify the customer in case the customer could not complete filling his/her details and was dropped-off in between  # noqa: E501

        :param printing_serial_number: The printing_serial_number of this ECMAdditionalDataUpdate.  # noqa: E501
        :type: str
        """

        self._printing_serial_number = printing_serial_number

    @property
    def account_fund_source(self):
        """Gets the account_fund_source of this ECMAdditionalDataUpdate.  # noqa: E501

        Primary source from which this account will be funded. This is a reference data field. Please use /v1/utilities/referenceData/{accountFundSource} resource to get valid value of this field with description.  # noqa: E501

        :return: The account_fund_source of this ECMAdditionalDataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._account_fund_source

    @account_fund_source.setter
    def account_fund_source(self, account_fund_source):
        """Sets the account_fund_source of this ECMAdditionalDataUpdate.

        Primary source from which this account will be funded. This is a reference data field. Please use /v1/utilities/referenceData/{accountFundSource} resource to get valid value of this field with description.  # noqa: E501

        :param account_fund_source: The account_fund_source of this ECMAdditionalDataUpdate.  # noqa: E501
        :type: str
        """

        self._account_fund_source = account_fund_source

    @property
    def media_id(self):
        """Gets the media_id of this ECMAdditionalDataUpdate.  # noqa: E501

        The media ID will be used to determine which offer/campaign banner was clicked when the customer has submitted the application  # noqa: E501

        :return: The media_id of this ECMAdditionalDataUpdate.  # noqa: E501
        :rtype: str
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this ECMAdditionalDataUpdate.

        The media ID will be used to determine which offer/campaign banner was clicked when the customer has submitted the application  # noqa: E501

        :param media_id: The media_id of this ECMAdditionalDataUpdate.  # noqa: E501
        :type: str
        """

        self._media_id = media_id

    @property
    def referral_tracking(self):
        """Gets the referral_tracking of this ECMAdditionalDataUpdate.  # noqa: E501


        :return: The referral_tracking of this ECMAdditionalDataUpdate.  # noqa: E501
        :rtype: ReferralTracking
        """
        return self._referral_tracking

    @referral_tracking.setter
    def referral_tracking(self, referral_tracking):
        """Sets the referral_tracking of this ECMAdditionalDataUpdate.


        :param referral_tracking: The referral_tracking of this ECMAdditionalDataUpdate.  # noqa: E501
        :type: ReferralTracking
        """

        self._referral_tracking = referral_tracking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECMAdditionalDataUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECMAdditionalDataUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
