# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateApplicationProcessingPartnerMembershipValidationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'membership_information': 'MembershipInformation',
        'sales_agent_details': 'SalesAgentDetails',
        'product': 'Product',
        'consent_details': 'list[ConsentDetails]'
    }

    attribute_map = {
        'membership_information': 'membershipInformation',
        'sales_agent_details': 'salesAgentDetails',
        'product': 'product',
        'consent_details': 'consentDetails'
    }

    def __init__(self, membership_information=None, sales_agent_details=None, product=None, consent_details=None):  # noqa: E501
        """UpdateApplicationProcessingPartnerMembershipValidationRequest - a model defined in Swagger"""  # noqa: E501
        self._membership_information = None
        self._sales_agent_details = None
        self._product = None
        self._consent_details = None
        self.discriminator = None
        if membership_information is not None:
            self.membership_information = membership_information
        if sales_agent_details is not None:
            self.sales_agent_details = sales_agent_details
        if product is not None:
            self.product = product
        if consent_details is not None:
            self.consent_details = consent_details

    @property
    def membership_information(self):
        """Gets the membership_information of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501


        :return: The membership_information of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501
        :rtype: MembershipInformation
        """
        return self._membership_information

    @membership_information.setter
    def membership_information(self, membership_information):
        """Sets the membership_information of this UpdateApplicationProcessingPartnerMembershipValidationRequest.


        :param membership_information: The membership_information of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501
        :type: MembershipInformation
        """

        self._membership_information = membership_information

    @property
    def sales_agent_details(self):
        """Gets the sales_agent_details of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501


        :return: The sales_agent_details of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501
        :rtype: SalesAgentDetails
        """
        return self._sales_agent_details

    @sales_agent_details.setter
    def sales_agent_details(self, sales_agent_details):
        """Sets the sales_agent_details of this UpdateApplicationProcessingPartnerMembershipValidationRequest.


        :param sales_agent_details: The sales_agent_details of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501
        :type: SalesAgentDetails
        """

        self._sales_agent_details = sales_agent_details

    @property
    def product(self):
        """Gets the product of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501


        :return: The product of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this UpdateApplicationProcessingPartnerMembershipValidationRequest.


        :param product: The product of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def consent_details(self):
        """Gets the consent_details of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501


        :return: The consent_details of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501
        :rtype: list[ConsentDetails]
        """
        return self._consent_details

    @consent_details.setter
    def consent_details(self, consent_details):
        """Sets the consent_details of this UpdateApplicationProcessingPartnerMembershipValidationRequest.


        :param consent_details: The consent_details of this UpdateApplicationProcessingPartnerMembershipValidationRequest.  # noqa: E501
        :type: list[ConsentDetails]
        """

        self._consent_details = consent_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateApplicationProcessingPartnerMembershipValidationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateApplicationProcessingPartnerMembershipValidationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
