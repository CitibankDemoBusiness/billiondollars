# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicantInquiryIncomeDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'income_type': 'str',
        'fixed_amount': 'float',
        'variable_amount': 'float',
        'frequency': 'str'
    }

    attribute_map = {
        'income_type': 'incomeType',
        'fixed_amount': 'fixedAmount',
        'variable_amount': 'variableAmount',
        'frequency': 'frequency'
    }

    def __init__(self, income_type=None, fixed_amount=None, variable_amount=None, frequency=None):  # noqa: E501
        """ApplicantInquiryIncomeDetails - a model defined in Swagger"""  # noqa: E501
        self._income_type = None
        self._fixed_amount = None
        self._variable_amount = None
        self._frequency = None
        self.discriminator = None
        if income_type is not None:
            self.income_type = income_type
        if fixed_amount is not None:
            self.fixed_amount = fixed_amount
        if variable_amount is not None:
            self.variable_amount = variable_amount
        if frequency is not None:
            self.frequency = frequency

    @property
    def income_type(self):
        """Gets the income_type of this ApplicantInquiryIncomeDetails.  # noqa: E501

        Applciants income type. This is a reference data field. Please use /utilities/referenceData/{incomeType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The income_type of this ApplicantInquiryIncomeDetails.  # noqa: E501
        :rtype: str
        """
        return self._income_type

    @income_type.setter
    def income_type(self, income_type):
        """Sets the income_type of this ApplicantInquiryIncomeDetails.

        Applciants income type. This is a reference data field. Please use /utilities/referenceData/{incomeType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param income_type: The income_type of this ApplicantInquiryIncomeDetails.  # noqa: E501
        :type: str
        """

        self._income_type = income_type

    @property
    def fixed_amount(self):
        """Gets the fixed_amount of this ApplicantInquiryIncomeDetails.  # noqa: E501

        Fixed income amount of applicant  # noqa: E501

        :return: The fixed_amount of this ApplicantInquiryIncomeDetails.  # noqa: E501
        :rtype: float
        """
        return self._fixed_amount

    @fixed_amount.setter
    def fixed_amount(self, fixed_amount):
        """Sets the fixed_amount of this ApplicantInquiryIncomeDetails.

        Fixed income amount of applicant  # noqa: E501

        :param fixed_amount: The fixed_amount of this ApplicantInquiryIncomeDetails.  # noqa: E501
        :type: float
        """

        self._fixed_amount = fixed_amount

    @property
    def variable_amount(self):
        """Gets the variable_amount of this ApplicantInquiryIncomeDetails.  # noqa: E501

        Variable income amount of applicant  # noqa: E501

        :return: The variable_amount of this ApplicantInquiryIncomeDetails.  # noqa: E501
        :rtype: float
        """
        return self._variable_amount

    @variable_amount.setter
    def variable_amount(self, variable_amount):
        """Sets the variable_amount of this ApplicantInquiryIncomeDetails.

        Variable income amount of applicant  # noqa: E501

        :param variable_amount: The variable_amount of this ApplicantInquiryIncomeDetails.  # noqa: E501
        :type: float
        """

        self._variable_amount = variable_amount

    @property
    def frequency(self):
        """Gets the frequency of this ApplicantInquiryIncomeDetails.  # noqa: E501

        Income Frequency. This a reference data field. Please use /utilities/referenceData/{frequency} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The frequency of this ApplicantInquiryIncomeDetails.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ApplicantInquiryIncomeDetails.

        Income Frequency. This a reference data field. Please use /utilities/referenceData/{frequency} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param frequency: The frequency of this ApplicantInquiryIncomeDetails.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicantInquiryIncomeDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicantInquiryIncomeDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
