# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OfferAcceptanceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'counter_product_accepted_flag': 'bool',
        'counter_product_confirmation': 'list[ProductConfirmation]',
        'requested_product_confirmation': 'list[ProductConfirmation]',
        'control_flow_id': 'str'
    }

    attribute_map = {
        'counter_product_accepted_flag': 'counterProductAcceptedFlag',
        'counter_product_confirmation': 'counterProductConfirmation',
        'requested_product_confirmation': 'requestedProductConfirmation',
        'control_flow_id': 'controlFlowId'
    }

    def __init__(self, counter_product_accepted_flag=None, counter_product_confirmation=None, requested_product_confirmation=None, control_flow_id=None):  # noqa: E501
        """OfferAcceptanceRequest - a model defined in Swagger"""  # noqa: E501
        self._counter_product_accepted_flag = None
        self._counter_product_confirmation = None
        self._requested_product_confirmation = None
        self._control_flow_id = None
        self.discriminator = None
        if counter_product_accepted_flag is not None:
            self.counter_product_accepted_flag = counter_product_accepted_flag
        if counter_product_confirmation is not None:
            self.counter_product_confirmation = counter_product_confirmation
        self.requested_product_confirmation = requested_product_confirmation
        self.control_flow_id = control_flow_id

    @property
    def counter_product_accepted_flag(self):
        """Gets the counter_product_accepted_flag of this OfferAcceptanceRequest.  # noqa: E501

        Flag to indicate a counter offer selected by an applicant. Valid values: true and false  # noqa: E501

        :return: The counter_product_accepted_flag of this OfferAcceptanceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._counter_product_accepted_flag

    @counter_product_accepted_flag.setter
    def counter_product_accepted_flag(self, counter_product_accepted_flag):
        """Sets the counter_product_accepted_flag of this OfferAcceptanceRequest.

        Flag to indicate a counter offer selected by an applicant. Valid values: true and false  # noqa: E501

        :param counter_product_accepted_flag: The counter_product_accepted_flag of this OfferAcceptanceRequest.  # noqa: E501
        :type: bool
        """

        self._counter_product_accepted_flag = counter_product_accepted_flag

    @property
    def counter_product_confirmation(self):
        """Gets the counter_product_confirmation of this OfferAcceptanceRequest.  # noqa: E501


        :return: The counter_product_confirmation of this OfferAcceptanceRequest.  # noqa: E501
        :rtype: list[ProductConfirmation]
        """
        return self._counter_product_confirmation

    @counter_product_confirmation.setter
    def counter_product_confirmation(self, counter_product_confirmation):
        """Sets the counter_product_confirmation of this OfferAcceptanceRequest.


        :param counter_product_confirmation: The counter_product_confirmation of this OfferAcceptanceRequest.  # noqa: E501
        :type: list[ProductConfirmation]
        """

        self._counter_product_confirmation = counter_product_confirmation

    @property
    def requested_product_confirmation(self):
        """Gets the requested_product_confirmation of this OfferAcceptanceRequest.  # noqa: E501


        :return: The requested_product_confirmation of this OfferAcceptanceRequest.  # noqa: E501
        :rtype: list[ProductConfirmation]
        """
        return self._requested_product_confirmation

    @requested_product_confirmation.setter
    def requested_product_confirmation(self, requested_product_confirmation):
        """Sets the requested_product_confirmation of this OfferAcceptanceRequest.


        :param requested_product_confirmation: The requested_product_confirmation of this OfferAcceptanceRequest.  # noqa: E501
        :type: list[ProductConfirmation]
        """
        if requested_product_confirmation is None:
            raise ValueError("Invalid value for `requested_product_confirmation`, must not be `None`")  # noqa: E501

        self._requested_product_confirmation = requested_product_confirmation

    @property
    def control_flow_id(self):
        """Gets the control_flow_id of this OfferAcceptanceRequest.  # noqa: E501

        Control Flow Id  # noqa: E501

        :return: The control_flow_id of this OfferAcceptanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._control_flow_id

    @control_flow_id.setter
    def control_flow_id(self, control_flow_id):
        """Sets the control_flow_id of this OfferAcceptanceRequest.

        Control Flow Id  # noqa: E501

        :param control_flow_id: The control_flow_id of this OfferAcceptanceRequest.  # noqa: E501
        :type: str
        """
        if control_flow_id is None:
            raise ValueError("Invalid value for `control_flow_id`, must not be `None`")  # noqa: E501

        self._control_flow_id = control_flow_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfferAcceptanceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfferAcceptanceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
