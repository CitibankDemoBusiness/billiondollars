# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuestionnaireRes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question_sequence_number': 'int',
        'questionnaire_id': 'str',
        'question_number': 'str',
        'question_text': 'str',
        'question_type': 'str',
        'response_options': 'list[KbaQResponseOptions]'
    }

    attribute_map = {
        'question_sequence_number': 'questionSequenceNumber',
        'questionnaire_id': 'questionnaireId',
        'question_number': 'questionNumber',
        'question_text': 'questionText',
        'question_type': 'questionType',
        'response_options': 'responseOptions'
    }

    def __init__(self, question_sequence_number=None, questionnaire_id=None, question_number=None, question_text=None, question_type=None, response_options=None):  # noqa: E501
        """QuestionnaireRes - a model defined in Swagger"""  # noqa: E501
        self._question_sequence_number = None
        self._questionnaire_id = None
        self._question_number = None
        self._question_text = None
        self._question_type = None
        self._response_options = None
        self.discriminator = None
        if question_sequence_number is not None:
            self.question_sequence_number = question_sequence_number
        if questionnaire_id is not None:
            self.questionnaire_id = questionnaire_id
        if question_number is not None:
            self.question_number = question_number
        if question_text is not None:
            self.question_text = question_text
        if question_type is not None:
            self.question_type = question_type
        if response_options is not None:
            self.response_options = response_options

    @property
    def question_sequence_number(self):
        """Gets the question_sequence_number of this QuestionnaireRes.  # noqa: E501

        Question sequence number  # noqa: E501

        :return: The question_sequence_number of this QuestionnaireRes.  # noqa: E501
        :rtype: int
        """
        return self._question_sequence_number

    @question_sequence_number.setter
    def question_sequence_number(self, question_sequence_number):
        """Sets the question_sequence_number of this QuestionnaireRes.

        Question sequence number  # noqa: E501

        :param question_sequence_number: The question_sequence_number of this QuestionnaireRes.  # noqa: E501
        :type: int
        """

        self._question_sequence_number = question_sequence_number

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this QuestionnaireRes.  # noqa: E501

        Identifer used in request to map a response to a given questionnaire.  # noqa: E501

        :return: The questionnaire_id of this QuestionnaireRes.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this QuestionnaireRes.

        Identifer used in request to map a response to a given questionnaire.  # noqa: E501

        :param questionnaire_id: The questionnaire_id of this QuestionnaireRes.  # noqa: E501
        :type: str
        """

        self._questionnaire_id = questionnaire_id

    @property
    def question_number(self):
        """Gets the question_number of this QuestionnaireRes.  # noqa: E501

        Question Number used in request to map a response to a given enquiry.  # noqa: E501

        :return: The question_number of this QuestionnaireRes.  # noqa: E501
        :rtype: str
        """
        return self._question_number

    @question_number.setter
    def question_number(self, question_number):
        """Sets the question_number of this QuestionnaireRes.

        Question Number used in request to map a response to a given enquiry.  # noqa: E501

        :param question_number: The question_number of this QuestionnaireRes.  # noqa: E501
        :type: str
        """

        self._question_number = question_number

    @property
    def question_text(self):
        """Gets the question_text of this QuestionnaireRes.  # noqa: E501

        Question text to be displayed to the end user.  # noqa: E501

        :return: The question_text of this QuestionnaireRes.  # noqa: E501
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this QuestionnaireRes.

        Question text to be displayed to the end user.  # noqa: E501

        :param question_text: The question_text of this QuestionnaireRes.  # noqa: E501
        :type: str
        """

        self._question_text = question_text

    @property
    def question_type(self):
        """Gets the question_type of this QuestionnaireRes.  # noqa: E501

        Type of question.  # noqa: E501

        :return: The question_type of this QuestionnaireRes.  # noqa: E501
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this QuestionnaireRes.

        Type of question.  # noqa: E501

        :param question_type: The question_type of this QuestionnaireRes.  # noqa: E501
        :type: str
        """

        self._question_type = question_type

    @property
    def response_options(self):
        """Gets the response_options of this QuestionnaireRes.  # noqa: E501


        :return: The response_options of this QuestionnaireRes.  # noqa: E501
        :rtype: list[KbaQResponseOptions]
        """
        return self._response_options

    @response_options.setter
    def response_options(self, response_options):
        """Sets the response_options of this QuestionnaireRes.


        :param response_options: The response_options of this QuestionnaireRes.  # noqa: E501
        :type: list[KbaQResponseOptions]
        """

        self._response_options = response_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionnaireRes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionnaireRes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
