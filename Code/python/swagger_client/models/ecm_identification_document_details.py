# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ECMIdentificationDocumentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_type': 'str',
        'id_number': 'str',
        'is_primary_id': 'bool'
    }

    attribute_map = {
        'id_type': 'idType',
        'id_number': 'idNumber',
        'is_primary_id': 'isPrimaryId'
    }

    def __init__(self, id_type=None, id_number=None, is_primary_id=None):  # noqa: E501
        """ECMIdentificationDocumentDetails - a model defined in Swagger"""  # noqa: E501
        self._id_type = None
        self._id_number = None
        self._is_primary_id = None
        self.discriminator = None
        if id_type is not None:
            self.id_type = id_type
        if id_number is not None:
            self.id_number = id_number
        if is_primary_id is not None:
            self.is_primary_id = is_primary_id

    @property
    def id_type(self):
        """Gets the id_type of this ECMIdentificationDocumentDetails.  # noqa: E501

        Type of Identification document. This is a reference data field. Please use /v1/utilities/referenceData/{idType} resource to get valid values of this field with descriptions  # noqa: E501

        :return: The id_type of this ECMIdentificationDocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this ECMIdentificationDocumentDetails.

        Type of Identification document. This is a reference data field. Please use /v1/utilities/referenceData/{idType} resource to get valid values of this field with descriptions  # noqa: E501

        :param id_type: The id_type of this ECMIdentificationDocumentDetails.  # noqa: E501
        :type: str
        """

        self._id_type = id_type

    @property
    def id_number(self):
        """Gets the id_number of this ECMIdentificationDocumentDetails.  # noqa: E501

        Unique identifier of identification document.  # noqa: E501

        :return: The id_number of this ECMIdentificationDocumentDetails.  # noqa: E501
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this ECMIdentificationDocumentDetails.

        Unique identifier of identification document.  # noqa: E501

        :param id_number: The id_number of this ECMIdentificationDocumentDetails.  # noqa: E501
        :type: str
        """

        self._id_number = id_number

    @property
    def is_primary_id(self):
        """Gets the is_primary_id of this ECMIdentificationDocumentDetails.  # noqa: E501

        Flag to mark primary identification document. Valid values: true and false  # noqa: E501

        :return: The is_primary_id of this ECMIdentificationDocumentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary_id

    @is_primary_id.setter
    def is_primary_id(self, is_primary_id):
        """Sets the is_primary_id of this ECMIdentificationDocumentDetails.

        Flag to mark primary identification document. Valid values: true and false  # noqa: E501

        :param is_primary_id: The is_primary_id of this ECMIdentificationDocumentDetails.  # noqa: E501
        :type: bool
        """

        self._is_primary_id = is_primary_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ECMIdentificationDocumentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ECMIdentificationDocumentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
