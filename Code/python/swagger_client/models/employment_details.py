# coding: utf-8

"""
    Onboarding

    The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmploymentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employer_name': 'str',
        'job_title': 'str',
        'occupation_code': 'str',
        'industry_code': 'str'
    }

    attribute_map = {
        'employer_name': 'employerName',
        'job_title': 'jobTitle',
        'occupation_code': 'occupationCode',
        'industry_code': 'industryCode'
    }

    def __init__(self, employer_name=None, job_title=None, occupation_code=None, industry_code=None):  # noqa: E501
        """EmploymentDetails - a model defined in Swagger"""  # noqa: E501
        self._employer_name = None
        self._job_title = None
        self._occupation_code = None
        self._industry_code = None
        self.discriminator = None
        if employer_name is not None:
            self.employer_name = employer_name
        if job_title is not None:
            self.job_title = job_title
        if occupation_code is not None:
            self.occupation_code = occupation_code
        if industry_code is not None:
            self.industry_code = industry_code

    @property
    def employer_name(self):
        """Gets the employer_name of this EmploymentDetails.  # noqa: E501

        Name of the Employer.  # noqa: E501

        :return: The employer_name of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._employer_name

    @employer_name.setter
    def employer_name(self, employer_name):
        """Sets the employer_name of this EmploymentDetails.

        Name of the Employer.  # noqa: E501

        :param employer_name: The employer_name of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._employer_name = employer_name

    @property
    def job_title(self):
        """Gets the job_title of this EmploymentDetails.  # noqa: E501

        Job Title. This is a reference data field. Please use /v1/apac/utilities/referenceData/{jobTitle} resource to get possible values of this field with descriptions. You can use jobTitle field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The job_title of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this EmploymentDetails.

        Job Title. This is a reference data field. Please use /v1/apac/utilities/referenceData/{jobTitle} resource to get possible values of this field with descriptions. You can use jobTitle field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param job_title: The job_title of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def occupation_code(self):
        """Gets the occupation_code of this EmploymentDetails.  # noqa: E501

        Occupation code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{occupationCode} resource to get possible values of this field with descriptions. You can use occupationCode field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The occupation_code of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._occupation_code

    @occupation_code.setter
    def occupation_code(self, occupation_code):
        """Sets the occupation_code of this EmploymentDetails.

        Occupation code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{occupationCode} resource to get possible values of this field with descriptions. You can use occupationCode field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param occupation_code: The occupation_code of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._occupation_code = occupation_code

    @property
    def industry_code(self):
        """Gets the industry_code of this EmploymentDetails.  # noqa: E501

        Code of the industry of employment. This is a reference data field. Please use /v1/apac/utilities/referenceData/{industryCode} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The industry_code of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._industry_code

    @industry_code.setter
    def industry_code(self, industry_code):
        """Sets the industry_code of this EmploymentDetails.

        Code of the industry of employment. This is a reference data field. Please use /v1/apac/utilities/referenceData/{industryCode} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param industry_code: The industry_code of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._industry_code = industry_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmploymentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmploymentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
