/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExistingCustomerCreditProductApplicationAddResponse
    /// </summary>
    [DataContract]
        public partial class ExistingCustomerCreditProductApplicationAddResponse :  IEquatable<ExistingCustomerCreditProductApplicationAddResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExistingCustomerCreditProductApplicationAddResponse" /> class.
        /// </summary>
        /// <param name="applicationId">Unique identifier for the application (required).</param>
        /// <param name="applicationStage">Application stage of an Application (required).</param>
        /// <param name="survivorLineRequiredFlag">This indicates whether customer requires a Survivor Line product (Credit Card) or not. Valid values: true and false.</param>
        /// <param name="existingCreditLimit">Credit limit of customer for the existing credit card.</param>
        /// <param name="displayApplicantDetails">displayApplicantDetails (required).</param>
        /// <param name="controlFlowId">Control flow id is used to control the flow for subsequent requests in the session..</param>
        public ExistingCustomerCreditProductApplicationAddResponse(string applicationId = default(string), string applicationStage = default(string), bool? survivorLineRequiredFlag = default(bool?), double? existingCreditLimit = default(double?), DisplayApplicantDetails displayApplicantDetails = default(DisplayApplicantDetails), string controlFlowId = default(string))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new InvalidDataException("applicationId is a required property for ExistingCustomerCreditProductApplicationAddResponse and cannot be null");
            }
            else
            {
                this.ApplicationId = applicationId;
            }
            // to ensure "applicationStage" is required (not null)
            if (applicationStage == null)
            {
                throw new InvalidDataException("applicationStage is a required property for ExistingCustomerCreditProductApplicationAddResponse and cannot be null");
            }
            else
            {
                this.ApplicationStage = applicationStage;
            }
            // to ensure "displayApplicantDetails" is required (not null)
            if (displayApplicantDetails == null)
            {
                throw new InvalidDataException("displayApplicantDetails is a required property for ExistingCustomerCreditProductApplicationAddResponse and cannot be null");
            }
            else
            {
                this.DisplayApplicantDetails = displayApplicantDetails;
            }
            this.SurvivorLineRequiredFlag = survivorLineRequiredFlag;
            this.ExistingCreditLimit = existingCreditLimit;
            this.ControlFlowId = controlFlowId;
        }
        
        /// <summary>
        /// Unique identifier for the application
        /// </summary>
        /// <value>Unique identifier for the application</value>
        [DataMember(Name="applicationId", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Application stage of an Application
        /// </summary>
        /// <value>Application stage of an Application</value>
        [DataMember(Name="applicationStage", EmitDefaultValue=false)]
        public string ApplicationStage { get; set; }

        /// <summary>
        /// This indicates whether customer requires a Survivor Line product (Credit Card) or not. Valid values: true and false
        /// </summary>
        /// <value>This indicates whether customer requires a Survivor Line product (Credit Card) or not. Valid values: true and false</value>
        [DataMember(Name="survivorLineRequiredFlag", EmitDefaultValue=false)]
        public bool? SurvivorLineRequiredFlag { get; set; }

        /// <summary>
        /// Credit limit of customer for the existing credit card
        /// </summary>
        /// <value>Credit limit of customer for the existing credit card</value>
        [DataMember(Name="existingCreditLimit", EmitDefaultValue=false)]
        public double? ExistingCreditLimit { get; set; }

        /// <summary>
        /// Gets or Sets DisplayApplicantDetails
        /// </summary>
        [DataMember(Name="displayApplicantDetails", EmitDefaultValue=false)]
        public DisplayApplicantDetails DisplayApplicantDetails { get; set; }

        /// <summary>
        /// Control flow id is used to control the flow for subsequent requests in the session.
        /// </summary>
        /// <value>Control flow id is used to control the flow for subsequent requests in the session.</value>
        [DataMember(Name="controlFlowId", EmitDefaultValue=false)]
        public string ControlFlowId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExistingCustomerCreditProductApplicationAddResponse {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ApplicationStage: ").Append(ApplicationStage).Append("\n");
            sb.Append("  SurvivorLineRequiredFlag: ").Append(SurvivorLineRequiredFlag).Append("\n");
            sb.Append("  ExistingCreditLimit: ").Append(ExistingCreditLimit).Append("\n");
            sb.Append("  DisplayApplicantDetails: ").Append(DisplayApplicantDetails).Append("\n");
            sb.Append("  ControlFlowId: ").Append(ControlFlowId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExistingCustomerCreditProductApplicationAddResponse);
        }

        /// <summary>
        /// Returns true if ExistingCustomerCreditProductApplicationAddResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ExistingCustomerCreditProductApplicationAddResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExistingCustomerCreditProductApplicationAddResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.ApplicationStage == input.ApplicationStage ||
                    (this.ApplicationStage != null &&
                    this.ApplicationStage.Equals(input.ApplicationStage))
                ) && 
                (
                    this.SurvivorLineRequiredFlag == input.SurvivorLineRequiredFlag ||
                    (this.SurvivorLineRequiredFlag != null &&
                    this.SurvivorLineRequiredFlag.Equals(input.SurvivorLineRequiredFlag))
                ) && 
                (
                    this.ExistingCreditLimit == input.ExistingCreditLimit ||
                    (this.ExistingCreditLimit != null &&
                    this.ExistingCreditLimit.Equals(input.ExistingCreditLimit))
                ) && 
                (
                    this.DisplayApplicantDetails == input.DisplayApplicantDetails ||
                    (this.DisplayApplicantDetails != null &&
                    this.DisplayApplicantDetails.Equals(input.DisplayApplicantDetails))
                ) && 
                (
                    this.ControlFlowId == input.ControlFlowId ||
                    (this.ControlFlowId != null &&
                    this.ControlFlowId.Equals(input.ControlFlowId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.ApplicationStage != null)
                    hashCode = hashCode * 59 + this.ApplicationStage.GetHashCode();
                if (this.SurvivorLineRequiredFlag != null)
                    hashCode = hashCode * 59 + this.SurvivorLineRequiredFlag.GetHashCode();
                if (this.ExistingCreditLimit != null)
                    hashCode = hashCode * 59 + this.ExistingCreditLimit.GetHashCode();
                if (this.DisplayApplicantDetails != null)
                    hashCode = hashCode * 59 + this.DisplayApplicantDetails.GetHashCode();
                if (this.ControlFlowId != null)
                    hashCode = hashCode * 59 + this.ControlFlowId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
