/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApplicationStatusInqRequestedProductDecision
    /// </summary>
    [DataContract]
        public partial class ApplicationStatusInqRequestedProductDecision :  IEquatable<ApplicationStatusInqRequestedProductDecision>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationStatusInqRequestedProductDecision" /> class.
        /// </summary>
        /// <param name="productCode">A unique code that identifies the product.</param>
        /// <param name="organisationName">Card issuing Organisation.</param>
        /// <param name="sourceCode">A source code to identify the product.</param>
        /// <param name="creditDecision">Evaluated Applicant Credit Decision. This is a reference data field. Please use /v1/apac/utilities/referenceData/{creditDecision} resource to get valid value of this field with description..</param>
        /// <param name="creditSpecificRecommendations">creditSpecificRecommendations.</param>
        /// <param name="loanSpecificRecommendations">loanSpecificRecommendations.</param>
        /// <param name="requiredDocuments">requiredDocuments.</param>
        public ApplicationStatusInqRequestedProductDecision(string productCode = default(string), string organisationName = default(string), string sourceCode = default(string), string creditDecision = default(string), List<CreditSpecificRecommendations> creditSpecificRecommendations = default(List<CreditSpecificRecommendations>), List<LoanSpecificRecommendations> loanSpecificRecommendations = default(List<LoanSpecificRecommendations>), List<RequiredDocuments> requiredDocuments = default(List<RequiredDocuments>))
        {
            this.ProductCode = productCode;
            this.OrganisationName = organisationName;
            this.SourceCode = sourceCode;
            this.CreditDecision = creditDecision;
            this.CreditSpecificRecommendations = creditSpecificRecommendations;
            this.LoanSpecificRecommendations = loanSpecificRecommendations;
            this.RequiredDocuments = requiredDocuments;
        }
        
        /// <summary>
        /// A unique code that identifies the product
        /// </summary>
        /// <value>A unique code that identifies the product</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Card issuing Organisation
        /// </summary>
        /// <value>Card issuing Organisation</value>
        [DataMember(Name="organisationName", EmitDefaultValue=false)]
        public string OrganisationName { get; set; }

        /// <summary>
        /// A source code to identify the product
        /// </summary>
        /// <value>A source code to identify the product</value>
        [DataMember(Name="sourceCode", EmitDefaultValue=false)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Evaluated Applicant Credit Decision. This is a reference data field. Please use /v1/apac/utilities/referenceData/{creditDecision} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Evaluated Applicant Credit Decision. This is a reference data field. Please use /v1/apac/utilities/referenceData/{creditDecision} resource to get valid value of this field with description.</value>
        [DataMember(Name="creditDecision", EmitDefaultValue=false)]
        public string CreditDecision { get; set; }

        /// <summary>
        /// Gets or Sets CreditSpecificRecommendations
        /// </summary>
        [DataMember(Name="creditSpecificRecommendations", EmitDefaultValue=false)]
        public List<CreditSpecificRecommendations> CreditSpecificRecommendations { get; set; }

        /// <summary>
        /// Gets or Sets LoanSpecificRecommendations
        /// </summary>
        [DataMember(Name="loanSpecificRecommendations", EmitDefaultValue=false)]
        public List<LoanSpecificRecommendations> LoanSpecificRecommendations { get; set; }

        /// <summary>
        /// Gets or Sets RequiredDocuments
        /// </summary>
        [DataMember(Name="requiredDocuments", EmitDefaultValue=false)]
        public List<RequiredDocuments> RequiredDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationStatusInqRequestedProductDecision {\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  OrganisationName: ").Append(OrganisationName).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  CreditDecision: ").Append(CreditDecision).Append("\n");
            sb.Append("  CreditSpecificRecommendations: ").Append(CreditSpecificRecommendations).Append("\n");
            sb.Append("  LoanSpecificRecommendations: ").Append(LoanSpecificRecommendations).Append("\n");
            sb.Append("  RequiredDocuments: ").Append(RequiredDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationStatusInqRequestedProductDecision);
        }

        /// <summary>
        /// Returns true if ApplicationStatusInqRequestedProductDecision instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationStatusInqRequestedProductDecision to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationStatusInqRequestedProductDecision input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.OrganisationName == input.OrganisationName ||
                    (this.OrganisationName != null &&
                    this.OrganisationName.Equals(input.OrganisationName))
                ) && 
                (
                    this.SourceCode == input.SourceCode ||
                    (this.SourceCode != null &&
                    this.SourceCode.Equals(input.SourceCode))
                ) && 
                (
                    this.CreditDecision == input.CreditDecision ||
                    (this.CreditDecision != null &&
                    this.CreditDecision.Equals(input.CreditDecision))
                ) && 
                (
                    this.CreditSpecificRecommendations == input.CreditSpecificRecommendations ||
                    this.CreditSpecificRecommendations != null &&
                    input.CreditSpecificRecommendations != null &&
                    this.CreditSpecificRecommendations.SequenceEqual(input.CreditSpecificRecommendations)
                ) && 
                (
                    this.LoanSpecificRecommendations == input.LoanSpecificRecommendations ||
                    this.LoanSpecificRecommendations != null &&
                    input.LoanSpecificRecommendations != null &&
                    this.LoanSpecificRecommendations.SequenceEqual(input.LoanSpecificRecommendations)
                ) && 
                (
                    this.RequiredDocuments == input.RequiredDocuments ||
                    this.RequiredDocuments != null &&
                    input.RequiredDocuments != null &&
                    this.RequiredDocuments.SequenceEqual(input.RequiredDocuments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.OrganisationName != null)
                    hashCode = hashCode * 59 + this.OrganisationName.GetHashCode();
                if (this.SourceCode != null)
                    hashCode = hashCode * 59 + this.SourceCode.GetHashCode();
                if (this.CreditDecision != null)
                    hashCode = hashCode * 59 + this.CreditDecision.GetHashCode();
                if (this.CreditSpecificRecommendations != null)
                    hashCode = hashCode * 59 + this.CreditSpecificRecommendations.GetHashCode();
                if (this.LoanSpecificRecommendations != null)
                    hashCode = hashCode * 59 + this.LoanSpecificRecommendations.GetHashCode();
                if (this.RequiredDocuments != null)
                    hashCode = hashCode * 59 + this.RequiredDocuments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
