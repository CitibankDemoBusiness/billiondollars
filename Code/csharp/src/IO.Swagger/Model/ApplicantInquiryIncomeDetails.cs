/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApplicantInquiryIncomeDetails
    /// </summary>
    [DataContract]
        public partial class ApplicantInquiryIncomeDetails :  IEquatable<ApplicantInquiryIncomeDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicantInquiryIncomeDetails" /> class.
        /// </summary>
        /// <param name="incomeType">Applciants income type. This is a reference data field. Please use /utilities/referenceData/{incomeType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values..</param>
        /// <param name="fixedAmount">Fixed income amount of applicant.</param>
        /// <param name="variableAmount">Variable income amount of applicant.</param>
        /// <param name="frequency">Income Frequency. This a reference data field. Please use /utilities/referenceData/{frequency} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values..</param>
        public ApplicantInquiryIncomeDetails(string incomeType = default(string), double? fixedAmount = default(double?), double? variableAmount = default(double?), string frequency = default(string))
        {
            this.IncomeType = incomeType;
            this.FixedAmount = fixedAmount;
            this.VariableAmount = variableAmount;
            this.Frequency = frequency;
        }
        
        /// <summary>
        /// Applciants income type. This is a reference data field. Please use /utilities/referenceData/{incomeType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Applciants income type. This is a reference data field. Please use /utilities/referenceData/{incomeType} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="incomeType", EmitDefaultValue=false)]
        public string IncomeType { get; set; }

        /// <summary>
        /// Fixed income amount of applicant
        /// </summary>
        /// <value>Fixed income amount of applicant</value>
        [DataMember(Name="fixedAmount", EmitDefaultValue=false)]
        public double? FixedAmount { get; set; }

        /// <summary>
        /// Variable income amount of applicant
        /// </summary>
        /// <value>Variable income amount of applicant</value>
        [DataMember(Name="variableAmount", EmitDefaultValue=false)]
        public double? VariableAmount { get; set; }

        /// <summary>
        /// Income Frequency. This a reference data field. Please use /utilities/referenceData/{frequency} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Income Frequency. This a reference data field. Please use /utilities/referenceData/{frequency} resource to get valid values of this field with descriptions. You can use the fieldname as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public string Frequency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicantInquiryIncomeDetails {\n");
            sb.Append("  IncomeType: ").Append(IncomeType).Append("\n");
            sb.Append("  FixedAmount: ").Append(FixedAmount).Append("\n");
            sb.Append("  VariableAmount: ").Append(VariableAmount).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicantInquiryIncomeDetails);
        }

        /// <summary>
        /// Returns true if ApplicantInquiryIncomeDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicantInquiryIncomeDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicantInquiryIncomeDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncomeType == input.IncomeType ||
                    (this.IncomeType != null &&
                    this.IncomeType.Equals(input.IncomeType))
                ) && 
                (
                    this.FixedAmount == input.FixedAmount ||
                    (this.FixedAmount != null &&
                    this.FixedAmount.Equals(input.FixedAmount))
                ) && 
                (
                    this.VariableAmount == input.VariableAmount ||
                    (this.VariableAmount != null &&
                    this.VariableAmount.Equals(input.VariableAmount))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncomeType != null)
                    hashCode = hashCode * 59 + this.IncomeType.GetHashCode();
                if (this.FixedAmount != null)
                    hashCode = hashCode * 59 + this.FixedAmount.GetHashCode();
                if (this.VariableAmount != null)
                    hashCode = hashCode * 59 + this.VariableAmount.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
