/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApplicantUpdateName
    /// </summary>
    [DataContract]
        public partial class ApplicantUpdateName :  IEquatable<ApplicantUpdateName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicantUpdateName" /> class.
        /// </summary>
        /// <param name="salutation">Salutation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{salutation} resource to get valid value of this field with description. You can use salutation field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="givenName">Given/first name of the applicant (required).</param>
        /// <param name="middleName">Middle name of the applicant.</param>
        /// <param name="surname">Surname/last name of the applicant.</param>
        /// <param name="aliasName">Alias name of the applicant.</param>
        public ApplicantUpdateName(string salutation = default(string), string givenName = default(string), string middleName = default(string), string surname = default(string), string aliasName = default(string))
        {
            // to ensure "givenName" is required (not null)
            if (givenName == null)
            {
                throw new InvalidDataException("givenName is a required property for ApplicantUpdateName and cannot be null");
            }
            else
            {
                this.GivenName = givenName;
            }
            this.Salutation = salutation;
            this.MiddleName = middleName;
            this.Surname = surname;
            this.AliasName = aliasName;
        }
        
        /// <summary>
        /// Salutation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{salutation} resource to get valid value of this field with description. You can use salutation field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Salutation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{salutation} resource to get valid value of this field with description. You can use salutation field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="salutation", EmitDefaultValue=false)]
        public string Salutation { get; set; }

        /// <summary>
        /// Given/first name of the applicant
        /// </summary>
        /// <value>Given/first name of the applicant</value>
        [DataMember(Name="givenName", EmitDefaultValue=false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Middle name of the applicant
        /// </summary>
        /// <value>Middle name of the applicant</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Surname/last name of the applicant
        /// </summary>
        /// <value>Surname/last name of the applicant</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Alias name of the applicant
        /// </summary>
        /// <value>Alias name of the applicant</value>
        [DataMember(Name="aliasName", EmitDefaultValue=false)]
        public string AliasName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicantUpdateName {\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  AliasName: ").Append(AliasName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicantUpdateName);
        }

        /// <summary>
        /// Returns true if ApplicantUpdateName instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicantUpdateName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicantUpdateName input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.AliasName == input.AliasName ||
                    (this.AliasName != null &&
                    this.AliasName.Equals(input.AliasName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Salutation != null)
                    hashCode = hashCode * 59 + this.Salutation.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.AliasName != null)
                    hashCode = hashCode * 59 + this.AliasName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
