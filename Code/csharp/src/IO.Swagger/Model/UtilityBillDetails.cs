/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UtilityBillDetails
    /// </summary>
    [DataContract]
        public partial class UtilityBillDetails :  IEquatable<UtilityBillDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UtilityBillDetails" /> class.
        /// </summary>
        /// <param name="utilityCode">Utility service provider codes. Please use /v1/utilities/referenceData/{utilityCode} resource to get valid value of this field with description. You can use utilityCode as the referenceCode parameter to retrieve the values.</param>
        /// <param name="telephoneIndicator">Type of the telephone to be enrolled for bill payment.Please use /v1/utilities/referenceData/{telephoneIndicator} resource to get valid value of this field with description..</param>
        /// <param name="telecomOperatorName">Telecom operator name..</param>
        /// <param name="phoneBillingCycleDay">Day of each month for the phone bill payment. This is a reference data field. Please use /v1/utilities/referenceData/{phoneBillingCycleDay} resource to get valid value of this field with description..</param>
        public UtilityBillDetails(string utilityCode = default(string), string telephoneIndicator = default(string), string telecomOperatorName = default(string), string phoneBillingCycleDay = default(string))
        {
            this.UtilityCode = utilityCode;
            this.TelephoneIndicator = telephoneIndicator;
            this.TelecomOperatorName = telecomOperatorName;
            this.PhoneBillingCycleDay = phoneBillingCycleDay;
        }
        
        /// <summary>
        /// Utility service provider codes. Please use /v1/utilities/referenceData/{utilityCode} resource to get valid value of this field with description. You can use utilityCode as the referenceCode parameter to retrieve the values
        /// </summary>
        /// <value>Utility service provider codes. Please use /v1/utilities/referenceData/{utilityCode} resource to get valid value of this field with description. You can use utilityCode as the referenceCode parameter to retrieve the values</value>
        [DataMember(Name="utilityCode", EmitDefaultValue=false)]
        public string UtilityCode { get; set; }

        /// <summary>
        /// Type of the telephone to be enrolled for bill payment.Please use /v1/utilities/referenceData/{telephoneIndicator} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Type of the telephone to be enrolled for bill payment.Please use /v1/utilities/referenceData/{telephoneIndicator} resource to get valid value of this field with description.</value>
        [DataMember(Name="telephoneIndicator", EmitDefaultValue=false)]
        public string TelephoneIndicator { get; set; }

        /// <summary>
        /// Telecom operator name.
        /// </summary>
        /// <value>Telecom operator name.</value>
        [DataMember(Name="telecomOperatorName", EmitDefaultValue=false)]
        public string TelecomOperatorName { get; set; }

        /// <summary>
        /// Day of each month for the phone bill payment. This is a reference data field. Please use /v1/utilities/referenceData/{phoneBillingCycleDay} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Day of each month for the phone bill payment. This is a reference data field. Please use /v1/utilities/referenceData/{phoneBillingCycleDay} resource to get valid value of this field with description.</value>
        [DataMember(Name="phoneBillingCycleDay", EmitDefaultValue=false)]
        public string PhoneBillingCycleDay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UtilityBillDetails {\n");
            sb.Append("  UtilityCode: ").Append(UtilityCode).Append("\n");
            sb.Append("  TelephoneIndicator: ").Append(TelephoneIndicator).Append("\n");
            sb.Append("  TelecomOperatorName: ").Append(TelecomOperatorName).Append("\n");
            sb.Append("  PhoneBillingCycleDay: ").Append(PhoneBillingCycleDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UtilityBillDetails);
        }

        /// <summary>
        /// Returns true if UtilityBillDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of UtilityBillDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UtilityBillDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UtilityCode == input.UtilityCode ||
                    (this.UtilityCode != null &&
                    this.UtilityCode.Equals(input.UtilityCode))
                ) && 
                (
                    this.TelephoneIndicator == input.TelephoneIndicator ||
                    (this.TelephoneIndicator != null &&
                    this.TelephoneIndicator.Equals(input.TelephoneIndicator))
                ) && 
                (
                    this.TelecomOperatorName == input.TelecomOperatorName ||
                    (this.TelecomOperatorName != null &&
                    this.TelecomOperatorName.Equals(input.TelecomOperatorName))
                ) && 
                (
                    this.PhoneBillingCycleDay == input.PhoneBillingCycleDay ||
                    (this.PhoneBillingCycleDay != null &&
                    this.PhoneBillingCycleDay.Equals(input.PhoneBillingCycleDay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UtilityCode != null)
                    hashCode = hashCode * 59 + this.UtilityCode.GetHashCode();
                if (this.TelephoneIndicator != null)
                    hashCode = hashCode * 59 + this.TelephoneIndicator.GetHashCode();
                if (this.TelecomOperatorName != null)
                    hashCode = hashCode * 59 + this.TelecomOperatorName.GetHashCode();
                if (this.PhoneBillingCycleDay != null)
                    hashCode = hashCode * 59 + this.PhoneBillingCycleDay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
