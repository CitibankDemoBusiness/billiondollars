/* 
 * Onboarding
 *
 * The Onboarding API allows you to initiate the basic account opening process for new customers. The resources allow you to present eligible products, send applications for screening and submit a new application for one or more products. The resources also allow you to submit supporting documents. Application status can be checked at any point in the process, with decisioning happening in real time.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ParentName
    /// </summary>
    [DataContract]
        public partial class ParentName :  IEquatable<ParentName>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParentName" /> class.
        /// </summary>
        /// <param name="salutation">Salutation. This is a reference data field. Please use /v1/utilities/referenceData/{salutation} resource to get valid value of this field with description..</param>
        /// <param name="givenName">Given/first name of the Parent (required).</param>
        /// <param name="middleName">Middle name of the Parent.</param>
        /// <param name="surname">Surname/last name of the Parent.</param>
        /// <param name="localEnglishGivenName">Local given name in English.</param>
        /// <param name="localEnglishSurname">Local surname in English.</param>
        /// <param name="aliasName">Alias name of the Parent.</param>
        /// <param name="fullName">Full name of the Parent..</param>
        /// <param name="saluteBy">Contains value with which Parent like to be addressed. This is a reference data field. Please use /v1/utilities/referenceData/{saluteBy} resource to get valid value of this field with description..</param>
        public ParentName(string salutation = default(string), string givenName = default(string), string middleName = default(string), string surname = default(string), string localEnglishGivenName = default(string), string localEnglishSurname = default(string), string aliasName = default(string), string fullName = default(string), string saluteBy = default(string))
        {
            // to ensure "givenName" is required (not null)
            if (givenName == null)
            {
                throw new InvalidDataException("givenName is a required property for ParentName and cannot be null");
            }
            else
            {
                this.GivenName = givenName;
            }
            this.Salutation = salutation;
            this.MiddleName = middleName;
            this.Surname = surname;
            this.LocalEnglishGivenName = localEnglishGivenName;
            this.LocalEnglishSurname = localEnglishSurname;
            this.AliasName = aliasName;
            this.FullName = fullName;
            this.SaluteBy = saluteBy;
        }
        
        /// <summary>
        /// Salutation. This is a reference data field. Please use /v1/utilities/referenceData/{salutation} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Salutation. This is a reference data field. Please use /v1/utilities/referenceData/{salutation} resource to get valid value of this field with description.</value>
        [DataMember(Name="salutation", EmitDefaultValue=false)]
        public string Salutation { get; set; }

        /// <summary>
        /// Given/first name of the Parent
        /// </summary>
        /// <value>Given/first name of the Parent</value>
        [DataMember(Name="givenName", EmitDefaultValue=false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Middle name of the Parent
        /// </summary>
        /// <value>Middle name of the Parent</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Surname/last name of the Parent
        /// </summary>
        /// <value>Surname/last name of the Parent</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Local given name in English
        /// </summary>
        /// <value>Local given name in English</value>
        [DataMember(Name="localEnglishGivenName", EmitDefaultValue=false)]
        public string LocalEnglishGivenName { get; set; }

        /// <summary>
        /// Local surname in English
        /// </summary>
        /// <value>Local surname in English</value>
        [DataMember(Name="localEnglishSurname", EmitDefaultValue=false)]
        public string LocalEnglishSurname { get; set; }

        /// <summary>
        /// Alias name of the Parent
        /// </summary>
        /// <value>Alias name of the Parent</value>
        [DataMember(Name="aliasName", EmitDefaultValue=false)]
        public string AliasName { get; set; }

        /// <summary>
        /// Full name of the Parent.
        /// </summary>
        /// <value>Full name of the Parent.</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Contains value with which Parent like to be addressed. This is a reference data field. Please use /v1/utilities/referenceData/{saluteBy} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Contains value with which Parent like to be addressed. This is a reference data field. Please use /v1/utilities/referenceData/{saluteBy} resource to get valid value of this field with description.</value>
        [DataMember(Name="saluteBy", EmitDefaultValue=false)]
        public string SaluteBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParentName {\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  LocalEnglishGivenName: ").Append(LocalEnglishGivenName).Append("\n");
            sb.Append("  LocalEnglishSurname: ").Append(LocalEnglishSurname).Append("\n");
            sb.Append("  AliasName: ").Append(AliasName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  SaluteBy: ").Append(SaluteBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParentName);
        }

        /// <summary>
        /// Returns true if ParentName instances are equal
        /// </summary>
        /// <param name="input">Instance of ParentName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParentName input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.LocalEnglishGivenName == input.LocalEnglishGivenName ||
                    (this.LocalEnglishGivenName != null &&
                    this.LocalEnglishGivenName.Equals(input.LocalEnglishGivenName))
                ) && 
                (
                    this.LocalEnglishSurname == input.LocalEnglishSurname ||
                    (this.LocalEnglishSurname != null &&
                    this.LocalEnglishSurname.Equals(input.LocalEnglishSurname))
                ) && 
                (
                    this.AliasName == input.AliasName ||
                    (this.AliasName != null &&
                    this.AliasName.Equals(input.AliasName))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.SaluteBy == input.SaluteBy ||
                    (this.SaluteBy != null &&
                    this.SaluteBy.Equals(input.SaluteBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Salutation != null)
                    hashCode = hashCode * 59 + this.Salutation.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.LocalEnglishGivenName != null)
                    hashCode = hashCode * 59 + this.LocalEnglishGivenName.GetHashCode();
                if (this.LocalEnglishSurname != null)
                    hashCode = hashCode * 59 + this.LocalEnglishSurname.GetHashCode();
                if (this.AliasName != null)
                    hashCode = hashCode * 59 + this.AliasName.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.SaluteBy != null)
                    hashCode = hashCode * 59 + this.SaluteBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
