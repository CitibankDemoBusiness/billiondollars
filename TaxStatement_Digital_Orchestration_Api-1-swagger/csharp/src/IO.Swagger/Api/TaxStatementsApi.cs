/* 
 * TaxStatement_Digital_Orchestation
 *
 * Account Documents APIs Version 2.0. These APIs will be used by Citi Partners to retrieve tax documents for existing Accounts from various regions. PCF Deployment Reference name - -> DM-O-DocumentServices-Statements  </br>Version 2.0.0 Added new Tax statements apis.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITaxStatementsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// OB Return the masked tax statement for the given tax statement id
        /// </summary>
        /// <remarks>
        /// This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">The client ID received during customer onboarding.</param>
        /// <param name="taxstatementId">Unique id that maps to the specific tax statement to be downloaded.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Document</returns>
        Document GetTaxStatement (string authorization, string accept, string contentType, string uuid, string clientId, string taxstatementId, string countryCode = null);

        /// <summary>
        /// OB Return the masked tax statement for the given tax statement id
        /// </summary>
        /// <remarks>
        /// This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">The client ID received during customer onboarding.</param>
        /// <param name="taxstatementId">Unique id that maps to the specific tax statement to be downloaded.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        ApiResponse<Document> GetTaxStatementWithHttpInfo (string authorization, string accept, string contentType, string uuid, string clientId, string taxstatementId, string countryCode = null);
        /// <summary>
        /// OB Returns list of masked tax statements
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="clientId">The client ID received during application registration in the developer portal.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Documents</returns>
        Documents GetTaxStatements (string authorization, string accept, string uuid, string contentType, string clientId, string countryCode = null);

        /// <summary>
        /// OB Returns list of masked tax statements
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="clientId">The client ID received during application registration in the developer portal.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>ApiResponse of Documents</returns>
        ApiResponse<Documents> GetTaxStatementsWithHttpInfo (string authorization, string accept, string uuid, string contentType, string clientId, string countryCode = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// OB Return the masked tax statement for the given tax statement id
        /// </summary>
        /// <remarks>
        /// This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">The client ID received during customer onboarding.</param>
        /// <param name="taxstatementId">Unique id that maps to the specific tax statement to be downloaded.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Task of Document</returns>
        System.Threading.Tasks.Task<Document> GetTaxStatementAsync (string authorization, string accept, string contentType, string uuid, string clientId, string taxstatementId, string countryCode = null);

        /// <summary>
        /// OB Return the masked tax statement for the given tax statement id
        /// </summary>
        /// <remarks>
        /// This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">The client ID received during customer onboarding.</param>
        /// <param name="taxstatementId">Unique id that maps to the specific tax statement to be downloaded.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        System.Threading.Tasks.Task<ApiResponse<Document>> GetTaxStatementAsyncWithHttpInfo (string authorization, string accept, string contentType, string uuid, string clientId, string taxstatementId, string countryCode = null);
        /// <summary>
        /// OB Returns list of masked tax statements
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="clientId">The client ID received during application registration in the developer portal.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Task of Documents</returns>
        System.Threading.Tasks.Task<Documents> GetTaxStatementsAsync (string authorization, string accept, string uuid, string contentType, string clientId, string countryCode = null);

        /// <summary>
        /// OB Returns list of masked tax statements
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="clientId">The client ID received during application registration in the developer portal.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Task of ApiResponse (Documents)</returns>
        System.Threading.Tasks.Task<ApiResponse<Documents>> GetTaxStatementsAsyncWithHttpInfo (string authorization, string accept, string uuid, string contentType, string clientId, string countryCode = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TaxStatementsApi : ITaxStatementsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxStatementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxStatementsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxStatementsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TaxStatementsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxStatementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaxStatementsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// OB Return the masked tax statement for the given tax statement id This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">The client ID received during customer onboarding.</param>
        /// <param name="taxstatementId">Unique id that maps to the specific tax statement to be downloaded.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Document</returns>
        public Document GetTaxStatement (string authorization, string accept, string contentType, string uuid, string clientId, string taxstatementId, string countryCode = null)
        {
             ApiResponse<Document> localVarResponse = GetTaxStatementWithHttpInfo(authorization, accept, contentType, uuid, clientId, taxstatementId, countryCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// OB Return the masked tax statement for the given tax statement id This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">The client ID received during customer onboarding.</param>
        /// <param name="taxstatementId">Unique id that maps to the specific tax statement to be downloaded.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>ApiResponse of Document</returns>
        public ApiResponse< Document > GetTaxStatementWithHttpInfo (string authorization, string accept, string contentType, string uuid, string clientId, string taxstatementId, string countryCode = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'taxstatementId' is set
            if (taxstatementId == null)
                throw new ApiException(400, "Missing required parameter 'taxstatementId' when calling TaxStatementsApi->GetTaxStatement");

            var localVarPath = "/taxStatements/{taxstatementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxstatementId != null) localVarPathParams.Add("taxstatementId", this.Configuration.ApiClient.ParameterToString(taxstatementId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (countryCode != null) localVarHeaderParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxStatement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        /// OB Return the masked tax statement for the given tax statement id This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">The client ID received during customer onboarding.</param>
        /// <param name="taxstatementId">Unique id that maps to the specific tax statement to be downloaded.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Task of Document</returns>
        public async System.Threading.Tasks.Task<Document> GetTaxStatementAsync (string authorization, string accept, string contentType, string uuid, string clientId, string taxstatementId, string countryCode = null)
        {
             ApiResponse<Document> localVarResponse = await GetTaxStatementAsyncWithHttpInfo(authorization, accept, contentType, uuid, clientId, taxstatementId, countryCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// OB Return the masked tax statement for the given tax statement id This API retrieves a masked tax statement for the given tax statement id. This global API uses country fields to identify the appropriate regional services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="clientId">The client ID received during customer onboarding.</param>
        /// <param name="taxstatementId">Unique id that maps to the specific tax statement to be downloaded.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Task of ApiResponse (Document)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Document>> GetTaxStatementAsyncWithHttpInfo (string authorization, string accept, string contentType, string uuid, string clientId, string taxstatementId, string countryCode = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling TaxStatementsApi->GetTaxStatement");
            // verify the required parameter 'taxstatementId' is set
            if (taxstatementId == null)
                throw new ApiException(400, "Missing required parameter 'taxstatementId' when calling TaxStatementsApi->GetTaxStatement");

            var localVarPath = "/taxStatements/{taxstatementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taxstatementId != null) localVarPathParams.Add("taxstatementId", this.Configuration.ApiClient.ParameterToString(taxstatementId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (countryCode != null) localVarHeaderParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxStatement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Document>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Document) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Document)));
        }

        /// <summary>
        /// OB Returns list of masked tax statements This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="clientId">The client ID received during application registration in the developer portal.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Documents</returns>
        public Documents GetTaxStatements (string authorization, string accept, string uuid, string contentType, string clientId, string countryCode = null)
        {
             ApiResponse<Documents> localVarResponse = GetTaxStatementsWithHttpInfo(authorization, accept, uuid, contentType, clientId, countryCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// OB Returns list of masked tax statements This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="clientId">The client ID received during application registration in the developer portal.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>ApiResponse of Documents</returns>
        public ApiResponse< Documents > GetTaxStatementsWithHttpInfo (string authorization, string accept, string uuid, string contentType, string clientId, string countryCode = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TaxStatementsApi->GetTaxStatements");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TaxStatementsApi->GetTaxStatements");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling TaxStatementsApi->GetTaxStatements");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TaxStatementsApi->GetTaxStatements");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling TaxStatementsApi->GetTaxStatements");

            var localVarPath = "/taxStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (countryCode != null) localVarHeaderParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Documents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Documents) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Documents)));
        }

        /// <summary>
        /// OB Returns list of masked tax statements This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="clientId">The client ID received during application registration in the developer portal.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Task of Documents</returns>
        public async System.Threading.Tasks.Task<Documents> GetTaxStatementsAsync (string authorization, string accept, string uuid, string contentType, string clientId, string countryCode = null)
        {
             ApiResponse<Documents> localVarResponse = await GetTaxStatementsAsyncWithHttpInfo(authorization, accept, uuid, contentType, clientId, countryCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// OB Returns list of masked tax statements This API is used to retrieve list of masked tax statements for given parameters. This global API uses country fields to identify the appropriate regional services.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The authorization token received in earlier API call. This will contain the access token and partner identity. This header is populated only for third-party partners.</param>
        /// <param name="accept">Content types that are acceptable for the response. Currently we support application/json</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request</param>
        /// <param name="contentType">Content-Type of the request</param>
        /// <param name="clientId">The client ID received during application registration in the developer portal.</param>
        /// <param name="countryCode">Two character ISO format country code. (optional)</param>
        /// <returns>Task of ApiResponse (Documents)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Documents>> GetTaxStatementsAsyncWithHttpInfo (string authorization, string accept, string uuid, string contentType, string clientId, string countryCode = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TaxStatementsApi->GetTaxStatements");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling TaxStatementsApi->GetTaxStatements");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling TaxStatementsApi->GetTaxStatements");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling TaxStatementsApi->GetTaxStatements");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling TaxStatementsApi->GetTaxStatements");

            var localVarPath = "/taxStatements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "charset=UTF-8"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (countryCode != null) localVarHeaderParams.Add("countryCode", this.Configuration.ApiClient.ParameterToString(countryCode)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaxStatements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Documents>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Documents) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Documents)));
        }

    }
}
