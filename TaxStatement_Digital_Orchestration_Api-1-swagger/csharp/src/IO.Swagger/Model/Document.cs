/* 
 * TaxStatement_Digital_Orchestation
 *
 * Account Documents APIs Version 2.0. These APIs will be used by Citi Partners to retrieve tax documents for existing Accounts from various regions. PCF Deployment Reference name - -> DM-O-DocumentServices-Statements  </br>Version 2.0.0 Added new Tax statements apis.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Document
    /// </summary>
    [DataContract]
        public partial class Document :  IEquatable<Document>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        /// <param name="documentFormat">The format for the document..</param>
        /// <param name="encodeType">Image Encoding Type e.g. base16, base64.</param>
        /// <param name="dataPayload">This field contains binary data for the statement..</param>
        public Document(string documentFormat = default(string), string encodeType = default(string), string dataPayload = default(string))
        {
            this.DocumentFormat = documentFormat;
            this.EncodeType = encodeType;
            this.DataPayload = dataPayload;
        }
        
        /// <summary>
        /// The format for the document.
        /// </summary>
        /// <value>The format for the document.</value>
        [DataMember(Name="documentFormat", EmitDefaultValue=false)]
        public string DocumentFormat { get; set; }

        /// <summary>
        /// Image Encoding Type e.g. base16, base64
        /// </summary>
        /// <value>Image Encoding Type e.g. base16, base64</value>
        [DataMember(Name="encodeType", EmitDefaultValue=false)]
        public string EncodeType { get; set; }

        /// <summary>
        /// This field contains binary data for the statement.
        /// </summary>
        /// <value>This field contains binary data for the statement.</value>
        [DataMember(Name="dataPayload", EmitDefaultValue=false)]
        public string DataPayload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  DocumentFormat: ").Append(DocumentFormat).Append("\n");
            sb.Append("  EncodeType: ").Append(EncodeType).Append("\n");
            sb.Append("  DataPayload: ").Append(DataPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Document);
        }

        /// <summary>
        /// Returns true if Document instances are equal
        /// </summary>
        /// <param name="input">Instance of Document to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Document input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentFormat == input.DocumentFormat ||
                    (this.DocumentFormat != null &&
                    this.DocumentFormat.Equals(input.DocumentFormat))
                ) && 
                (
                    this.EncodeType == input.EncodeType ||
                    (this.EncodeType != null &&
                    this.EncodeType.Equals(input.EncodeType))
                ) && 
                (
                    this.DataPayload == input.DataPayload ||
                    (this.DataPayload != null &&
                    this.DataPayload.Equals(input.DataPayload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentFormat != null)
                    hashCode = hashCode * 59 + this.DocumentFormat.GetHashCode();
                if (this.EncodeType != null)
                    hashCode = hashCode * 59 + this.EncodeType.GetHashCode();
                if (this.DataPayload != null)
                    hashCode = hashCode * 59 + this.DataPayload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
