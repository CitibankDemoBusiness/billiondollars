/* 
 * TaxStatement_Digital_Orchestation
 *
 * Account Documents APIs Version 2.0. These APIs will be used by Citi Partners to retrieve tax documents for existing Accounts from various regions. PCF Deployment Reference name - -> DM-O-DocumentServices-Statements  </br>Version 2.0.0 Added new Tax statements apis.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentDetails
    /// </summary>
    [DataContract]
        public partial class DocumentDetails :  IEquatable<DocumentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentDetails" /> class.
        /// </summary>
        /// <param name="statementId">Unique identifier for the tax statement document..</param>
        /// <param name="statementType">Type of a tax statement..</param>
        /// <param name="statementPostingDate">Date on which this tax statement was generated. Format should be MM/DD/YYYY..</param>
        /// <param name="primaryUserIndicator">This field is used for identifier for what type of user( primary or authorized) tax statement is being generated..</param>
        /// <param name="statementYear">It represents document tax year..</param>
        public DocumentDetails(string statementId = default(string), string statementType = default(string), DateTime? statementPostingDate = default(DateTime?), string primaryUserIndicator = default(string), int? statementYear = default(int?))
        {
            this.StatementId = statementId;
            this.StatementType = statementType;
            this.StatementPostingDate = statementPostingDate;
            this.PrimaryUserIndicator = primaryUserIndicator;
            this.StatementYear = statementYear;
        }
        
        /// <summary>
        /// Unique identifier for the tax statement document.
        /// </summary>
        /// <value>Unique identifier for the tax statement document.</value>
        [DataMember(Name="statementId", EmitDefaultValue=false)]
        public string StatementId { get; set; }

        /// <summary>
        /// Type of a tax statement.
        /// </summary>
        /// <value>Type of a tax statement.</value>
        [DataMember(Name="statementType", EmitDefaultValue=false)]
        public string StatementType { get; set; }

        /// <summary>
        /// Date on which this tax statement was generated. Format should be MM/DD/YYYY.
        /// </summary>
        /// <value>Date on which this tax statement was generated. Format should be MM/DD/YYYY.</value>
        [DataMember(Name="statementPostingDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StatementPostingDate { get; set; }

        /// <summary>
        /// This field is used for identifier for what type of user( primary or authorized) tax statement is being generated.
        /// </summary>
        /// <value>This field is used for identifier for what type of user( primary or authorized) tax statement is being generated.</value>
        [DataMember(Name="primaryUserIndicator", EmitDefaultValue=false)]
        public string PrimaryUserIndicator { get; set; }

        /// <summary>
        /// It represents document tax year.
        /// </summary>
        /// <value>It represents document tax year.</value>
        [DataMember(Name="statementYear", EmitDefaultValue=false)]
        public int? StatementYear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentDetails {\n");
            sb.Append("  StatementId: ").Append(StatementId).Append("\n");
            sb.Append("  StatementType: ").Append(StatementType).Append("\n");
            sb.Append("  StatementPostingDate: ").Append(StatementPostingDate).Append("\n");
            sb.Append("  PrimaryUserIndicator: ").Append(PrimaryUserIndicator).Append("\n");
            sb.Append("  StatementYear: ").Append(StatementYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentDetails);
        }

        /// <summary>
        /// Returns true if DocumentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatementId == input.StatementId ||
                    (this.StatementId != null &&
                    this.StatementId.Equals(input.StatementId))
                ) && 
                (
                    this.StatementType == input.StatementType ||
                    (this.StatementType != null &&
                    this.StatementType.Equals(input.StatementType))
                ) && 
                (
                    this.StatementPostingDate == input.StatementPostingDate ||
                    (this.StatementPostingDate != null &&
                    this.StatementPostingDate.Equals(input.StatementPostingDate))
                ) && 
                (
                    this.PrimaryUserIndicator == input.PrimaryUserIndicator ||
                    (this.PrimaryUserIndicator != null &&
                    this.PrimaryUserIndicator.Equals(input.PrimaryUserIndicator))
                ) && 
                (
                    this.StatementYear == input.StatementYear ||
                    (this.StatementYear != null &&
                    this.StatementYear.Equals(input.StatementYear))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatementId != null)
                    hashCode = hashCode * 59 + this.StatementId.GetHashCode();
                if (this.StatementType != null)
                    hashCode = hashCode * 59 + this.StatementType.GetHashCode();
                if (this.StatementPostingDate != null)
                    hashCode = hashCode * 59 + this.StatementPostingDate.GetHashCode();
                if (this.PrimaryUserIndicator != null)
                    hashCode = hashCode * 59 + this.PrimaryUserIndicator.GetHashCode();
                if (this.StatementYear != null)
                    hashCode = hashCode * 59 + this.StatementYear.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
