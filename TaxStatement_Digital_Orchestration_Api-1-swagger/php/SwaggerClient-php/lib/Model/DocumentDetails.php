<?php
/**
 * DocumentDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TaxStatement_Digital_Orchestation
 *
 * Account Documents APIs Version 2.0. These APIs will be used by Citi Partners to retrieve tax documents for existing Accounts from various regions. PCF Deployment Reference name --> DM-O-DocumentServices-Statements  </br>Version 2.0.0 Added new Tax statements apis.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'statement_id' => 'string',
'statement_type' => 'string',
'statement_posting_date' => '\DateTime',
'primary_user_indicator' => 'string',
'statement_year' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'statement_id' => null,
'statement_type' => null,
'statement_posting_date' => 'date',
'primary_user_indicator' => null,
'statement_year' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'statement_id' => 'statementId',
'statement_type' => 'statementType',
'statement_posting_date' => 'statementPostingDate',
'primary_user_indicator' => 'primaryUserIndicator',
'statement_year' => 'statementYear'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'statement_id' => 'setStatementId',
'statement_type' => 'setStatementType',
'statement_posting_date' => 'setStatementPostingDate',
'primary_user_indicator' => 'setPrimaryUserIndicator',
'statement_year' => 'setStatementYear'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'statement_id' => 'getStatementId',
'statement_type' => 'getStatementType',
'statement_posting_date' => 'getStatementPostingDate',
'primary_user_indicator' => 'getPrimaryUserIndicator',
'statement_year' => 'getStatementYear'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['statement_id'] = isset($data['statement_id']) ? $data['statement_id'] : null;
        $this->container['statement_type'] = isset($data['statement_type']) ? $data['statement_type'] : null;
        $this->container['statement_posting_date'] = isset($data['statement_posting_date']) ? $data['statement_posting_date'] : null;
        $this->container['primary_user_indicator'] = isset($data['primary_user_indicator']) ? $data['primary_user_indicator'] : null;
        $this->container['statement_year'] = isset($data['statement_year']) ? $data['statement_year'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets statement_id
     *
     * @return string
     */
    public function getStatementId()
    {
        return $this->container['statement_id'];
    }

    /**
     * Sets statement_id
     *
     * @param string $statement_id Unique identifier for the tax statement document.
     *
     * @return $this
     */
    public function setStatementId($statement_id)
    {
        $this->container['statement_id'] = $statement_id;

        return $this;
    }

    /**
     * Gets statement_type
     *
     * @return string
     */
    public function getStatementType()
    {
        return $this->container['statement_type'];
    }

    /**
     * Sets statement_type
     *
     * @param string $statement_type Type of a tax statement.
     *
     * @return $this
     */
    public function setStatementType($statement_type)
    {
        $this->container['statement_type'] = $statement_type;

        return $this;
    }

    /**
     * Gets statement_posting_date
     *
     * @return \DateTime
     */
    public function getStatementPostingDate()
    {
        return $this->container['statement_posting_date'];
    }

    /**
     * Sets statement_posting_date
     *
     * @param \DateTime $statement_posting_date Date on which this tax statement was generated. Format should be MM/DD/YYYY.
     *
     * @return $this
     */
    public function setStatementPostingDate($statement_posting_date)
    {
        $this->container['statement_posting_date'] = $statement_posting_date;

        return $this;
    }

    /**
     * Gets primary_user_indicator
     *
     * @return string
     */
    public function getPrimaryUserIndicator()
    {
        return $this->container['primary_user_indicator'];
    }

    /**
     * Sets primary_user_indicator
     *
     * @param string $primary_user_indicator This field is used for identifier for what type of user( primary or authorized) tax statement is being generated.
     *
     * @return $this
     */
    public function setPrimaryUserIndicator($primary_user_indicator)
    {
        $this->container['primary_user_indicator'] = $primary_user_indicator;

        return $this;
    }

    /**
     * Gets statement_year
     *
     * @return int
     */
    public function getStatementYear()
    {
        return $this->container['statement_year'];
    }

    /**
     * Sets statement_year
     *
     * @param int $statement_year It represents document tax year.
     *
     * @return $this
     */
    public function setStatementYear($statement_year)
    {
        $this->container['statement_year'] = $statement_year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
