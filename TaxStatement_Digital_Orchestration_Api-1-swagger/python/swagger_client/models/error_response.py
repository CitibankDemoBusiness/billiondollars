# coding: utf-8

"""
    TaxStatement_Digital_Orchestation

    Account Documents APIs Version 2.0. These APIs will be used by Citi Partners to retrieve tax documents for existing Accounts from various regions. PCF Deployment Reference name --> DM-O-DocumentServices-Statements  </br>Version 2.0.0 Added new Tax statements apis.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ErrorResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'details': 'str',
        'location': 'str',
        'type': 'str',
        'more_info': 'object'
    }

    attribute_map = {
        'code': 'code',
        'details': 'details',
        'location': 'location',
        'type': 'type',
        'more_info': 'moreInfo'
    }

    def __init__(self, code=None, details=None, location=None, type=None, more_info=None):  # noqa: E501
        """ErrorResponse - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._details = None
        self._location = None
        self._type = None
        self._more_info = None
        self.discriminator = None
        self.code = code
        if details is not None:
            self.details = details
        if location is not None:
            self.location = location
        self.type = type
        if more_info is not None:
            self.more_info = more_info

    @property
    def code(self):
        """Gets the code of this ErrorResponse.  # noqa: E501

        Error code  # noqa: E501

        :return: The code of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorResponse.

        Error code  # noqa: E501

        :param code: The code of this ErrorResponse.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def details(self):
        """Gets the details of this ErrorResponse.  # noqa: E501

        Verbose explanation of the error  # noqa: E501

        :return: The details of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ErrorResponse.

        Verbose explanation of the error  # noqa: E501

        :param details: The details of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def location(self):
        """Gets the location of this ErrorResponse.  # noqa: E501

        The name of the field that resulted in the error  # noqa: E501

        :return: The location of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ErrorResponse.

        The name of the field that resulted in the error  # noqa: E501

        :param location: The location of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def type(self):
        """Gets the type of this ErrorResponse.  # noqa: E501

        error type  # noqa: E501

        :return: The type of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ErrorResponse.

        error type  # noqa: E501

        :param type: The type of this ErrorResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ERROR", "WARN", "INVALID", "FATAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def more_info(self):
        """Gets the more_info of this ErrorResponse.  # noqa: E501

        URI to documentation of the error  # noqa: E501

        :return: The more_info of this ErrorResponse.  # noqa: E501
        :rtype: object
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this ErrorResponse.

        URI to documentation of the error  # noqa: E501

        :param more_info: The more_info of this ErrorResponse.  # noqa: E501
        :type: object
        """

        self._more_info = more_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
