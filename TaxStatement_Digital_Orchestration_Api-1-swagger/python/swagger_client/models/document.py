# coding: utf-8

"""
    TaxStatement_Digital_Orchestation

    Account Documents APIs Version 2.0. These APIs will be used by Citi Partners to retrieve tax documents for existing Accounts from various regions. PCF Deployment Reference name --> DM-O-DocumentServices-Statements  </br>Version 2.0.0 Added new Tax statements apis.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_format': 'str',
        'encode_type': 'str',
        'data_payload': 'str'
    }

    attribute_map = {
        'document_format': 'documentFormat',
        'encode_type': 'encodeType',
        'data_payload': 'dataPayload'
    }

    def __init__(self, document_format=None, encode_type=None, data_payload=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        self._document_format = None
        self._encode_type = None
        self._data_payload = None
        self.discriminator = None
        if document_format is not None:
            self.document_format = document_format
        if encode_type is not None:
            self.encode_type = encode_type
        if data_payload is not None:
            self.data_payload = data_payload

    @property
    def document_format(self):
        """Gets the document_format of this Document.  # noqa: E501

        The format for the document.  # noqa: E501

        :return: The document_format of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_format

    @document_format.setter
    def document_format(self, document_format):
        """Sets the document_format of this Document.

        The format for the document.  # noqa: E501

        :param document_format: The document_format of this Document.  # noqa: E501
        :type: str
        """

        self._document_format = document_format

    @property
    def encode_type(self):
        """Gets the encode_type of this Document.  # noqa: E501

        Image Encoding Type e.g. base16, base64  # noqa: E501

        :return: The encode_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._encode_type

    @encode_type.setter
    def encode_type(self, encode_type):
        """Sets the encode_type of this Document.

        Image Encoding Type e.g. base16, base64  # noqa: E501

        :param encode_type: The encode_type of this Document.  # noqa: E501
        :type: str
        """

        self._encode_type = encode_type

    @property
    def data_payload(self):
        """Gets the data_payload of this Document.  # noqa: E501

        This field contains binary data for the statement.  # noqa: E501

        :return: The data_payload of this Document.  # noqa: E501
        :rtype: str
        """
        return self._data_payload

    @data_payload.setter
    def data_payload(self, data_payload):
        """Sets the data_payload of this Document.

        This field contains binary data for the statement.  # noqa: E501

        :param data_payload: The data_payload of this Document.  # noqa: E501
        :type: str
        """

        self._data_payload = data_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
