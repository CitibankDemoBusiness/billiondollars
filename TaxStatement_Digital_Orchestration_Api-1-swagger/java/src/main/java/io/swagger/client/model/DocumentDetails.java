/*
 * TaxStatement_Digital_Orchestation
 * Account Documents APIs Version 2.0. These APIs will be used by Citi Partners to retrieve tax documents for existing Accounts from various regions. PCF Deployment Reference name --> DM-O-DocumentServices-Statements  </br>Version 2.0.0 Added new Tax statements apis.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * DocumentDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:47:58.241136Z[Etc/UTC]")
public class DocumentDetails {
  @SerializedName("statementId")
  private String statementId = null;

  @SerializedName("statementType")
  private String statementType = null;

  @SerializedName("statementPostingDate")
  private LocalDate statementPostingDate = null;

  @SerializedName("primaryUserIndicator")
  private String primaryUserIndicator = null;

  @SerializedName("statementYear")
  private Integer statementYear = null;

  public DocumentDetails statementId(String statementId) {
    this.statementId = statementId;
    return this;
  }

   /**
   * Unique identifier for the tax statement document.
   * @return statementId
  **/
  @Schema(example = "5d8b3fcf435dd400101037f4", description = "Unique identifier for the tax statement document.")
  public String getStatementId() {
    return statementId;
  }

  public void setStatementId(String statementId) {
    this.statementId = statementId;
  }

  public DocumentDetails statementType(String statementType) {
    this.statementType = statementType;
    return this;
  }

   /**
   * Type of a tax statement.
   * @return statementType
  **/
  @Schema(example = "801", description = "Type of a tax statement.")
  public String getStatementType() {
    return statementType;
  }

  public void setStatementType(String statementType) {
    this.statementType = statementType;
  }

  public DocumentDetails statementPostingDate(LocalDate statementPostingDate) {
    this.statementPostingDate = statementPostingDate;
    return this;
  }

   /**
   * Date on which this tax statement was generated. Format should be MM/DD/YYYY.
   * @return statementPostingDate
  **/
  @Schema(description = "Date on which this tax statement was generated. Format should be MM/DD/YYYY.")
  public LocalDate getStatementPostingDate() {
    return statementPostingDate;
  }

  public void setStatementPostingDate(LocalDate statementPostingDate) {
    this.statementPostingDate = statementPostingDate;
  }

  public DocumentDetails primaryUserIndicator(String primaryUserIndicator) {
    this.primaryUserIndicator = primaryUserIndicator;
    return this;
  }

   /**
   * This field is used for identifier for what type of user( primary or authorized) tax statement is being generated.
   * @return primaryUserIndicator
  **/
  @Schema(example = "1", description = "This field is used for identifier for what type of user( primary or authorized) tax statement is being generated.")
  public String getPrimaryUserIndicator() {
    return primaryUserIndicator;
  }

  public void setPrimaryUserIndicator(String primaryUserIndicator) {
    this.primaryUserIndicator = primaryUserIndicator;
  }

  public DocumentDetails statementYear(Integer statementYear) {
    this.statementYear = statementYear;
    return this;
  }

   /**
   * It represents document tax year.
   * @return statementYear
  **/
  @Schema(example = "2016", description = "It represents document tax year.")
  public Integer getStatementYear() {
    return statementYear;
  }

  public void setStatementYear(Integer statementYear) {
    this.statementYear = statementYear;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentDetails documentDetails = (DocumentDetails) o;
    return Objects.equals(this.statementId, documentDetails.statementId) &&
        Objects.equals(this.statementType, documentDetails.statementType) &&
        Objects.equals(this.statementPostingDate, documentDetails.statementPostingDate) &&
        Objects.equals(this.primaryUserIndicator, documentDetails.primaryUserIndicator) &&
        Objects.equals(this.statementYear, documentDetails.statementYear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statementId, statementType, statementPostingDate, primaryUserIndicator, statementYear);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentDetails {\n");
    
    sb.append("    statementId: ").append(toIndentedString(statementId)).append("\n");
    sb.append("    statementType: ").append(toIndentedString(statementType)).append("\n");
    sb.append("    statementPostingDate: ").append(toIndentedString(statementPostingDate)).append("\n");
    sb.append("    primaryUserIndicator: ").append(toIndentedString(primaryUserIndicator)).append("\n");
    sb.append("    statementYear: ").append(toIndentedString(statementYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
