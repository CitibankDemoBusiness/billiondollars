=begin
#Accounts

#The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class StatementSummary
    # Outstanding balance amount on the statement date
    attr_accessor :outstanding_balance

    # The maximum amount of credit that extend to a customer
    attr_accessor :credit_limit

    # Number of active plans under equal payment plan
    attr_accessor :active_equal_payment_plan_count

    # Balance as on Last Statement Date
    attr_accessor :beginning_balance_amount

    # Total debits made during the statement period
    attr_accessor :total_debit_amount

    # Total payments made during the statement period.
    attr_accessor :total_credit_amount

    # Total interest amount of monetary transactions posted to cardholder account
    attr_accessor :net_interest_amount

    # Next payment due date in ISO 8601 date format YYYY-MM-DD
    attr_accessor :payment_due_date

    # Past due amount to be paid
    attr_accessor :past_due_amount

    # Some percentage of credit limit to withdraw cash
    attr_accessor :cash_advance_limit

    # The total fee applied in the cycle
    attr_accessor :cycle_to_date_fee_amount

    # Interest amount paid on the credit card from the last billing cycle.
    attr_accessor :interest_paid_amount

    # Billing currency code in  in ISO 4217 format
    attr_accessor :billing_currency_code

    # Available Cash Amount for withdrawal
    attr_accessor :cash_advance_available_amount

    # Retail Interest Rate for merchant transactions.
    attr_accessor :retail_cycle_interest_rate

    # Cash Interest Rate for withdrawal
    attr_accessor :cash_cycle_interest_rate

    attr_accessor :private_label_credit_cards

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'outstanding_balance' => :'outstandingBalance',
        :'credit_limit' => :'creditLimit',
        :'active_equal_payment_plan_count' => :'activeEqualPaymentPlanCount',
        :'beginning_balance_amount' => :'beginningBalanceAmount',
        :'total_debit_amount' => :'totalDebitAmount',
        :'total_credit_amount' => :'totalCreditAmount',
        :'net_interest_amount' => :'netInterestAmount',
        :'payment_due_date' => :'paymentDueDate',
        :'past_due_amount' => :'pastDueAmount',
        :'cash_advance_limit' => :'cashAdvanceLimit',
        :'cycle_to_date_fee_amount' => :'cycleToDateFeeAmount',
        :'interest_paid_amount' => :'interestPaidAmount',
        :'billing_currency_code' => :'billingCurrencyCode',
        :'cash_advance_available_amount' => :'cashAdvanceAvailableAmount',
        :'retail_cycle_interest_rate' => :'retailCycleInterestRate',
        :'cash_cycle_interest_rate' => :'cashCycleInterestRate',
        :'private_label_credit_cards' => :'privateLabelCreditCards'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'outstanding_balance' => :'Object',
        :'credit_limit' => :'Object',
        :'active_equal_payment_plan_count' => :'Object',
        :'beginning_balance_amount' => :'Object',
        :'total_debit_amount' => :'Object',
        :'total_credit_amount' => :'Object',
        :'net_interest_amount' => :'Object',
        :'payment_due_date' => :'Object',
        :'past_due_amount' => :'Object',
        :'cash_advance_limit' => :'Object',
        :'cycle_to_date_fee_amount' => :'Object',
        :'interest_paid_amount' => :'Object',
        :'billing_currency_code' => :'Object',
        :'cash_advance_available_amount' => :'Object',
        :'retail_cycle_interest_rate' => :'Object',
        :'cash_cycle_interest_rate' => :'Object',
        :'private_label_credit_cards' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::StatementSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::StatementSummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'outstanding_balance')
        self.outstanding_balance = attributes[:'outstanding_balance']
      end

      if attributes.key?(:'credit_limit')
        self.credit_limit = attributes[:'credit_limit']
      end

      if attributes.key?(:'active_equal_payment_plan_count')
        self.active_equal_payment_plan_count = attributes[:'active_equal_payment_plan_count']
      end

      if attributes.key?(:'beginning_balance_amount')
        self.beginning_balance_amount = attributes[:'beginning_balance_amount']
      end

      if attributes.key?(:'total_debit_amount')
        self.total_debit_amount = attributes[:'total_debit_amount']
      end

      if attributes.key?(:'total_credit_amount')
        self.total_credit_amount = attributes[:'total_credit_amount']
      end

      if attributes.key?(:'net_interest_amount')
        self.net_interest_amount = attributes[:'net_interest_amount']
      end

      if attributes.key?(:'payment_due_date')
        self.payment_due_date = attributes[:'payment_due_date']
      end

      if attributes.key?(:'past_due_amount')
        self.past_due_amount = attributes[:'past_due_amount']
      end

      if attributes.key?(:'cash_advance_limit')
        self.cash_advance_limit = attributes[:'cash_advance_limit']
      end

      if attributes.key?(:'cycle_to_date_fee_amount')
        self.cycle_to_date_fee_amount = attributes[:'cycle_to_date_fee_amount']
      end

      if attributes.key?(:'interest_paid_amount')
        self.interest_paid_amount = attributes[:'interest_paid_amount']
      end

      if attributes.key?(:'billing_currency_code')
        self.billing_currency_code = attributes[:'billing_currency_code']
      end

      if attributes.key?(:'cash_advance_available_amount')
        self.cash_advance_available_amount = attributes[:'cash_advance_available_amount']
      end

      if attributes.key?(:'retail_cycle_interest_rate')
        self.retail_cycle_interest_rate = attributes[:'retail_cycle_interest_rate']
      end

      if attributes.key?(:'cash_cycle_interest_rate')
        self.cash_cycle_interest_rate = attributes[:'cash_cycle_interest_rate']
      end

      if attributes.key?(:'private_label_credit_cards')
        self.private_label_credit_cards = attributes[:'private_label_credit_cards']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          outstanding_balance == o.outstanding_balance &&
          credit_limit == o.credit_limit &&
          active_equal_payment_plan_count == o.active_equal_payment_plan_count &&
          beginning_balance_amount == o.beginning_balance_amount &&
          total_debit_amount == o.total_debit_amount &&
          total_credit_amount == o.total_credit_amount &&
          net_interest_amount == o.net_interest_amount &&
          payment_due_date == o.payment_due_date &&
          past_due_amount == o.past_due_amount &&
          cash_advance_limit == o.cash_advance_limit &&
          cycle_to_date_fee_amount == o.cycle_to_date_fee_amount &&
          interest_paid_amount == o.interest_paid_amount &&
          billing_currency_code == o.billing_currency_code &&
          cash_advance_available_amount == o.cash_advance_available_amount &&
          retail_cycle_interest_rate == o.retail_cycle_interest_rate &&
          cash_cycle_interest_rate == o.cash_cycle_interest_rate &&
          private_label_credit_cards == o.private_label_credit_cards
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [outstanding_balance, credit_limit, active_equal_payment_plan_count, beginning_balance_amount, total_debit_amount, total_credit_amount, net_interest_amount, payment_due_date, past_due_amount, cash_advance_limit, cycle_to_date_fee_amount, interest_paid_amount, billing_currency_code, cash_advance_available_amount, retail_cycle_interest_rate, cash_cycle_interest_rate, private_label_credit_cards].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
