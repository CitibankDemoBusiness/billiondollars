=begin
#Accounts

#The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class Transaction
    # A masked account number that can be displayed to the customer
    attr_accessor :display_account_number

    # Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,
    attr_accessor :transaction_date

    # Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
    attr_accessor :transaction_description

    # Reference Id to uniquely identify the transaction
    attr_accessor :transaction_reference_id

    # The check serial number. Applicable for checking accounts only
    attr_accessor :check_serial_number

    # Transaction amount in local currency.
    attr_accessor :transaction_amount

    # The currency code of the transaction in ISO 4217 format
    attr_accessor :currency_code

    # The transaction amount in the foreign currency
    attr_accessor :foreign_transaction_amount

    # The foreign currency code of the transaction in ISO 4217 format
    attr_accessor :foreign_currency_code

    # The exchange rate at the time the foreign transaction was done
    attr_accessor :foreign_exchange_rate

    # The type of transaction. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionType} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values
    attr_accessor :transaction_type

    # The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values
    attr_accessor :transaction_status

    # The amount available to transact immediately
    attr_accessor :running_balance

    # Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting
    attr_accessor :transaction_posting_date

    # The transaction code
    attr_accessor :transaction_code

    # The merchant name with which this transaction was made with
    attr_accessor :merchant_name

    # The EPP allowed indicator. This is applicable for credit cards transactions only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{eligibleForEqualPaymentPlan} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values
    attr_accessor :eligible_for_equal_payment_plan

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'display_account_number' => :'displayAccountNumber',
        :'transaction_date' => :'transactionDate',
        :'transaction_description' => :'transactionDescription',
        :'transaction_reference_id' => :'transactionReferenceId',
        :'check_serial_number' => :'checkSerialNumber',
        :'transaction_amount' => :'transactionAmount',
        :'currency_code' => :'currencyCode',
        :'foreign_transaction_amount' => :'foreignTransactionAmount',
        :'foreign_currency_code' => :'foreignCurrencyCode',
        :'foreign_exchange_rate' => :'foreignExchangeRate',
        :'transaction_type' => :'transactionType',
        :'transaction_status' => :'transactionStatus',
        :'running_balance' => :'runningBalance',
        :'transaction_posting_date' => :'transactionPostingDate',
        :'transaction_code' => :'transactionCode',
        :'merchant_name' => :'merchantName',
        :'eligible_for_equal_payment_plan' => :'eligibleForEqualPaymentPlan'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'display_account_number' => :'Object',
        :'transaction_date' => :'Object',
        :'transaction_description' => :'Object',
        :'transaction_reference_id' => :'Object',
        :'check_serial_number' => :'Object',
        :'transaction_amount' => :'Object',
        :'currency_code' => :'Object',
        :'foreign_transaction_amount' => :'Object',
        :'foreign_currency_code' => :'Object',
        :'foreign_exchange_rate' => :'Object',
        :'transaction_type' => :'Object',
        :'transaction_status' => :'Object',
        :'running_balance' => :'Object',
        :'transaction_posting_date' => :'Object',
        :'transaction_code' => :'Object',
        :'merchant_name' => :'Object',
        :'eligible_for_equal_payment_plan' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::Transaction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::Transaction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'display_account_number')
        self.display_account_number = attributes[:'display_account_number']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'transaction_description')
        self.transaction_description = attributes[:'transaction_description']
      end

      if attributes.key?(:'transaction_reference_id')
        self.transaction_reference_id = attributes[:'transaction_reference_id']
      end

      if attributes.key?(:'check_serial_number')
        self.check_serial_number = attributes[:'check_serial_number']
      end

      if attributes.key?(:'transaction_amount')
        self.transaction_amount = attributes[:'transaction_amount']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'foreign_transaction_amount')
        self.foreign_transaction_amount = attributes[:'foreign_transaction_amount']
      end

      if attributes.key?(:'foreign_currency_code')
        self.foreign_currency_code = attributes[:'foreign_currency_code']
      end

      if attributes.key?(:'foreign_exchange_rate')
        self.foreign_exchange_rate = attributes[:'foreign_exchange_rate']
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'transaction_status')
        self.transaction_status = attributes[:'transaction_status']
      end

      if attributes.key?(:'running_balance')
        self.running_balance = attributes[:'running_balance']
      end

      if attributes.key?(:'transaction_posting_date')
        self.transaction_posting_date = attributes[:'transaction_posting_date']
      end

      if attributes.key?(:'transaction_code')
        self.transaction_code = attributes[:'transaction_code']
      end

      if attributes.key?(:'merchant_name')
        self.merchant_name = attributes[:'merchant_name']
      end

      if attributes.key?(:'eligible_for_equal_payment_plan')
        self.eligible_for_equal_payment_plan = attributes[:'eligible_for_equal_payment_plan']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          display_account_number == o.display_account_number &&
          transaction_date == o.transaction_date &&
          transaction_description == o.transaction_description &&
          transaction_reference_id == o.transaction_reference_id &&
          check_serial_number == o.check_serial_number &&
          transaction_amount == o.transaction_amount &&
          currency_code == o.currency_code &&
          foreign_transaction_amount == o.foreign_transaction_amount &&
          foreign_currency_code == o.foreign_currency_code &&
          foreign_exchange_rate == o.foreign_exchange_rate &&
          transaction_type == o.transaction_type &&
          transaction_status == o.transaction_status &&
          running_balance == o.running_balance &&
          transaction_posting_date == o.transaction_posting_date &&
          transaction_code == o.transaction_code &&
          merchant_name == o.merchant_name &&
          eligible_for_equal_payment_plan == o.eligible_for_equal_payment_plan
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [display_account_number, transaction_date, transaction_description, transaction_reference_id, check_serial_number, transaction_amount, currency_code, foreign_transaction_amount, foreign_currency_code, foreign_exchange_rate, transaction_type, transaction_status, running_balance, transaction_posting_date, transaction_code, merchant_name, eligible_for_equal_payment_plan].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
