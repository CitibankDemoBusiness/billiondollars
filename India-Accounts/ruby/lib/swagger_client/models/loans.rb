=begin
#Accounts

#The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class Loans
    # Reference Id to uniquely identify the loan. 
    attr_accessor :loan_reference_id

    # Last 4 digits of account number. 
    attr_accessor :display_account_number

    # Transaction date in YYYY-MM-DD format value conforming to ISO 8601.
    attr_accessor :transaction_date

    # Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
    attr_accessor :transaction_description

    # Installment loan payment amount
    attr_accessor :installment_amount

    # Next installment amount in local currency.
    attr_accessor :next_installment_amount

    # The amount of money owed.
    attr_accessor :outstanding_balance_amount

    # Tenure of loan in months.
    attr_accessor :tenor

    # Number of months remaining for completion of loan.
    attr_accessor :outstanding_tenor

    # Original loan amount borrowed by customer.
    attr_accessor :original_loan_amount

    # Interest rate for a whole year. This includes any fees or additional cost associated.
    attr_accessor :annual_percentage_rate

    # Effective Percentage Rate
    attr_accessor :effective_interest_rate

    # Charges levied on applicant by the bank to process the loan.
    attr_accessor :processing_charge_amount

    # Total Outstanding Interest Amount.
    attr_accessor :outstanding_interest_amount

    # Flag to identify if the loan is allowed to be early self closed by customer or not..
    attr_accessor :self_early_loan_closure_allowed_flag

    # Intallment Cycle
    attr_accessor :installment_cycle

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'loan_reference_id' => :'loanReferenceId',
        :'display_account_number' => :'displayAccountNumber',
        :'transaction_date' => :'transactionDate',
        :'transaction_description' => :'transactionDescription',
        :'installment_amount' => :'installmentAmount',
        :'next_installment_amount' => :'nextInstallmentAmount',
        :'outstanding_balance_amount' => :'outstandingBalanceAmount',
        :'tenor' => :'tenor',
        :'outstanding_tenor' => :'outstandingTenor',
        :'original_loan_amount' => :'originalLoanAmount',
        :'annual_percentage_rate' => :'annualPercentageRate',
        :'effective_interest_rate' => :'effectiveInterestRate',
        :'processing_charge_amount' => :'processingChargeAmount',
        :'outstanding_interest_amount' => :'outstandingInterestAmount',
        :'self_early_loan_closure_allowed_flag' => :'selfEarlyLoanClosureAllowedFlag',
        :'installment_cycle' => :'installmentCycle'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'loan_reference_id' => :'Object',
        :'display_account_number' => :'Object',
        :'transaction_date' => :'Object',
        :'transaction_description' => :'Object',
        :'installment_amount' => :'Object',
        :'next_installment_amount' => :'Object',
        :'outstanding_balance_amount' => :'Object',
        :'tenor' => :'Object',
        :'outstanding_tenor' => :'Object',
        :'original_loan_amount' => :'Object',
        :'annual_percentage_rate' => :'Object',
        :'effective_interest_rate' => :'Object',
        :'processing_charge_amount' => :'Object',
        :'outstanding_interest_amount' => :'Object',
        :'self_early_loan_closure_allowed_flag' => :'Object',
        :'installment_cycle' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::Loans` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::Loans`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'loan_reference_id')
        self.loan_reference_id = attributes[:'loan_reference_id']
      end

      if attributes.key?(:'display_account_number')
        self.display_account_number = attributes[:'display_account_number']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'transaction_description')
        self.transaction_description = attributes[:'transaction_description']
      end

      if attributes.key?(:'installment_amount')
        self.installment_amount = attributes[:'installment_amount']
      end

      if attributes.key?(:'next_installment_amount')
        self.next_installment_amount = attributes[:'next_installment_amount']
      end

      if attributes.key?(:'outstanding_balance_amount')
        self.outstanding_balance_amount = attributes[:'outstanding_balance_amount']
      end

      if attributes.key?(:'tenor')
        self.tenor = attributes[:'tenor']
      end

      if attributes.key?(:'outstanding_tenor')
        self.outstanding_tenor = attributes[:'outstanding_tenor']
      end

      if attributes.key?(:'original_loan_amount')
        self.original_loan_amount = attributes[:'original_loan_amount']
      end

      if attributes.key?(:'annual_percentage_rate')
        self.annual_percentage_rate = attributes[:'annual_percentage_rate']
      end

      if attributes.key?(:'effective_interest_rate')
        self.effective_interest_rate = attributes[:'effective_interest_rate']
      end

      if attributes.key?(:'processing_charge_amount')
        self.processing_charge_amount = attributes[:'processing_charge_amount']
      end

      if attributes.key?(:'outstanding_interest_amount')
        self.outstanding_interest_amount = attributes[:'outstanding_interest_amount']
      end

      if attributes.key?(:'self_early_loan_closure_allowed_flag')
        self.self_early_loan_closure_allowed_flag = attributes[:'self_early_loan_closure_allowed_flag']
      end

      if attributes.key?(:'installment_cycle')
        self.installment_cycle = attributes[:'installment_cycle']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @loan_reference_id.nil?
        invalid_properties.push('invalid value for "loan_reference_id", loan_reference_id cannot be nil.')
      end

      if @transaction_date.nil?
        invalid_properties.push('invalid value for "transaction_date", transaction_date cannot be nil.')
      end

      if @transaction_description.nil?
        invalid_properties.push('invalid value for "transaction_description", transaction_description cannot be nil.')
      end

      if @installment_amount.nil?
        invalid_properties.push('invalid value for "installment_amount", installment_amount cannot be nil.')
      end

      if @outstanding_balance_amount.nil?
        invalid_properties.push('invalid value for "outstanding_balance_amount", outstanding_balance_amount cannot be nil.')
      end

      if @tenor.nil?
        invalid_properties.push('invalid value for "tenor", tenor cannot be nil.')
      end

      if @original_loan_amount.nil?
        invalid_properties.push('invalid value for "original_loan_amount", original_loan_amount cannot be nil.')
      end

      if @annual_percentage_rate.nil?
        invalid_properties.push('invalid value for "annual_percentage_rate", annual_percentage_rate cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @loan_reference_id.nil?
      return false if @transaction_date.nil?
      return false if @transaction_description.nil?
      return false if @installment_amount.nil?
      return false if @outstanding_balance_amount.nil?
      return false if @tenor.nil?
      return false if @original_loan_amount.nil?
      return false if @annual_percentage_rate.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          loan_reference_id == o.loan_reference_id &&
          display_account_number == o.display_account_number &&
          transaction_date == o.transaction_date &&
          transaction_description == o.transaction_description &&
          installment_amount == o.installment_amount &&
          next_installment_amount == o.next_installment_amount &&
          outstanding_balance_amount == o.outstanding_balance_amount &&
          tenor == o.tenor &&
          outstanding_tenor == o.outstanding_tenor &&
          original_loan_amount == o.original_loan_amount &&
          annual_percentage_rate == o.annual_percentage_rate &&
          effective_interest_rate == o.effective_interest_rate &&
          processing_charge_amount == o.processing_charge_amount &&
          outstanding_interest_amount == o.outstanding_interest_amount &&
          self_early_loan_closure_allowed_flag == o.self_early_loan_closure_allowed_flag &&
          installment_cycle == o.installment_cycle
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [loan_reference_id, display_account_number, transaction_date, transaction_description, installment_amount, next_installment_amount, outstanding_balance_amount, tenor, outstanding_tenor, original_loan_amount, annual_percentage_rate, effective_interest_rate, processing_charge_amount, outstanding_interest_amount, self_early_loan_closure_allowed_flag, installment_cycle].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
