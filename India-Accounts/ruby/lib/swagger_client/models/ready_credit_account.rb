=begin
#Accounts

#The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class ReadyCreditAccount
    # The name of the product
    attr_accessor :product_name

    # A unique code that identifies the product
    attr_accessor :product_code

    # A masked account number that can be displayed to the customer
    attr_accessor :display_account_number

    # The currency code of the account in ISO 4217 format
    attr_accessor :currency_code

    # The amount of money owed
    attr_accessor :outstanding_balance

    # The balance on last statement date
    attr_accessor :last_statement_balance

    # The date of the last statement in ISO 8601 date format YYYY-MM-DD
    attr_accessor :last_statement_date

    # Minimum due amount for a payment cycle
    attr_accessor :minimum_due_amount

    # The maximum amount of credit that extend to a customer
    attr_accessor :credit_limit

    # Available credit limit of ready credit account
    attr_accessor :available_credit

    # Some percentage of credit limit to withdraw cash
    attr_accessor :cash_advance_limit

    # The amount available under cash advance limit
    attr_accessor :cash_advance_available_amount

    # The amount of the last payment made
    attr_accessor :last_payment_amount

    # The date of the last payment in ISO 8601 date format YYYY-MM-DD
    attr_accessor :last_payment_date

    # The next payment amount due
    attr_accessor :next_payment_amount

    # The date of the next payment in ISO 8601 date format YYYY-MM-DD
    attr_accessor :next_payment_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'product_name' => :'productName',
        :'product_code' => :'productCode',
        :'display_account_number' => :'displayAccountNumber',
        :'currency_code' => :'currencyCode',
        :'outstanding_balance' => :'outstandingBalance',
        :'last_statement_balance' => :'lastStatementBalance',
        :'last_statement_date' => :'lastStatementDate',
        :'minimum_due_amount' => :'minimumDueAmount',
        :'credit_limit' => :'creditLimit',
        :'available_credit' => :'availableCredit',
        :'cash_advance_limit' => :'cashAdvanceLimit',
        :'cash_advance_available_amount' => :'cashAdvanceAvailableAmount',
        :'last_payment_amount' => :'lastPaymentAmount',
        :'last_payment_date' => :'lastPaymentDate',
        :'next_payment_amount' => :'nextPaymentAmount',
        :'next_payment_date' => :'nextPaymentDate'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'product_name' => :'Object',
        :'product_code' => :'Object',
        :'display_account_number' => :'Object',
        :'currency_code' => :'Object',
        :'outstanding_balance' => :'Object',
        :'last_statement_balance' => :'Object',
        :'last_statement_date' => :'Object',
        :'minimum_due_amount' => :'Object',
        :'credit_limit' => :'Object',
        :'available_credit' => :'Object',
        :'cash_advance_limit' => :'Object',
        :'cash_advance_available_amount' => :'Object',
        :'last_payment_amount' => :'Object',
        :'last_payment_date' => :'Object',
        :'next_payment_amount' => :'Object',
        :'next_payment_date' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::ReadyCreditAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::ReadyCreditAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'product_name')
        self.product_name = attributes[:'product_name']
      end

      if attributes.key?(:'product_code')
        self.product_code = attributes[:'product_code']
      end

      if attributes.key?(:'display_account_number')
        self.display_account_number = attributes[:'display_account_number']
      end

      if attributes.key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.key?(:'outstanding_balance')
        self.outstanding_balance = attributes[:'outstanding_balance']
      end

      if attributes.key?(:'last_statement_balance')
        self.last_statement_balance = attributes[:'last_statement_balance']
      end

      if attributes.key?(:'last_statement_date')
        self.last_statement_date = attributes[:'last_statement_date']
      end

      if attributes.key?(:'minimum_due_amount')
        self.minimum_due_amount = attributes[:'minimum_due_amount']
      end

      if attributes.key?(:'credit_limit')
        self.credit_limit = attributes[:'credit_limit']
      end

      if attributes.key?(:'available_credit')
        self.available_credit = attributes[:'available_credit']
      end

      if attributes.key?(:'cash_advance_limit')
        self.cash_advance_limit = attributes[:'cash_advance_limit']
      end

      if attributes.key?(:'cash_advance_available_amount')
        self.cash_advance_available_amount = attributes[:'cash_advance_available_amount']
      end

      if attributes.key?(:'last_payment_amount')
        self.last_payment_amount = attributes[:'last_payment_amount']
      end

      if attributes.key?(:'last_payment_date')
        self.last_payment_date = attributes[:'last_payment_date']
      end

      if attributes.key?(:'next_payment_amount')
        self.next_payment_amount = attributes[:'next_payment_amount']
      end

      if attributes.key?(:'next_payment_date')
        self.next_payment_date = attributes[:'next_payment_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @display_account_number.nil?
        invalid_properties.push('invalid value for "display_account_number", display_account_number cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @display_account_number.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          product_name == o.product_name &&
          product_code == o.product_code &&
          display_account_number == o.display_account_number &&
          currency_code == o.currency_code &&
          outstanding_balance == o.outstanding_balance &&
          last_statement_balance == o.last_statement_balance &&
          last_statement_date == o.last_statement_date &&
          minimum_due_amount == o.minimum_due_amount &&
          credit_limit == o.credit_limit &&
          available_credit == o.available_credit &&
          cash_advance_limit == o.cash_advance_limit &&
          cash_advance_available_amount == o.cash_advance_available_amount &&
          last_payment_amount == o.last_payment_amount &&
          last_payment_date == o.last_payment_date &&
          next_payment_amount == o.next_payment_amount &&
          next_payment_date == o.next_payment_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [product_name, product_code, display_account_number, currency_code, outstanding_balance, last_statement_balance, last_statement_date, minimum_due_amount, credit_limit, available_credit, cash_advance_limit, cash_advance_available_amount, last_payment_amount, last_payment_date, next_payment_amount, next_payment_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
