=begin
#Accounts

#The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module SwaggerClient
  class PremiumDepositAccount
    # The name of the product
    attr_accessor :product_name

    # A unique code that identifies the product
    attr_accessor :product_code

    # A masked account number that can be displayed to the customer
    attr_accessor :display_account_number

    # The investment amount in base currency
    attr_accessor :base_currency_principal_amount

    # The base currency code in ISO 4217 format
    attr_accessor :base_currency_code

    # The investment amount in alternate currency
    attr_accessor :alternate_currency_principal_amount

    # Premium deposit open date in ISO 8601 date format YYYY-MM-DD
    attr_accessor :opening_date

    # The alternate currency code in ISO 4217 format
    attr_accessor :alternate_currency_code

    # The account number to deposit returns of base currency, upon maturity
    attr_accessor :base_currency_disposal_account

    # The account number to deposit returns of alternate currency, upon maturity
    attr_accessor :alternate_currency_disposal_account

    # The accrued interest amount in base currency
    attr_accessor :base_currency_interest_amount

    # The accrued interest amount in alternate currency
    attr_accessor :alternate_currency_interest_amount

    # The investment amount and accrued interest in base currency
    attr_accessor :base_currency_maturity_amount

    # The investment amount and accrued interest in alternate currency
    attr_accessor :alternate_currency_maturity_amount

    # A part or all of the interest the customer earns on the Premium Account represents the premium that the bank pays the customer for the currency option
    attr_accessor :base_currency_premium_amount

    # The date when the premium deposit will mature, in ISO8601 date format YYYY-MM-DD
    attr_accessor :maturity_date

    # The Pre-agreed exchange rate
    attr_accessor :strike_price

    # The customer interest rate applicable for the premium deposit
    attr_accessor :customer_interest_rate

    # The accrued interest rate applicable for the premium deposit
    attr_accessor :accrued_interest_rate

    # The benchmark interest rate applicable for the premium deposit
    attr_accessor :benchmark_interest_rate

    # The deal status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{dealStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
    attr_accessor :deal_status

    # The date when the premium deposit deal will expire, in ISO8601 date format YYYY-MM-DD
    attr_accessor :expiry_date

    # The tenor term for deposit
    attr_accessor :tenor_term

    # This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
    attr_accessor :tenor_period

    attr_accessor :relationship

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'product_name' => :'productName',
        :'product_code' => :'productCode',
        :'display_account_number' => :'displayAccountNumber',
        :'base_currency_principal_amount' => :'baseCurrencyPrincipalAmount',
        :'base_currency_code' => :'baseCurrencyCode',
        :'alternate_currency_principal_amount' => :'alternateCurrencyPrincipalAmount',
        :'opening_date' => :'openingDate',
        :'alternate_currency_code' => :'alternateCurrencyCode',
        :'base_currency_disposal_account' => :'baseCurrencyDisposalAccount',
        :'alternate_currency_disposal_account' => :'alternateCurrencyDisposalAccount',
        :'base_currency_interest_amount' => :'baseCurrencyInterestAmount',
        :'alternate_currency_interest_amount' => :'alternateCurrencyInterestAmount',
        :'base_currency_maturity_amount' => :'baseCurrencyMaturityAmount',
        :'alternate_currency_maturity_amount' => :'alternateCurrencyMaturityAmount',
        :'base_currency_premium_amount' => :'baseCurrencyPremiumAmount',
        :'maturity_date' => :'maturityDate',
        :'strike_price' => :'strikePrice',
        :'customer_interest_rate' => :'customerInterestRate',
        :'accrued_interest_rate' => :'accruedInterestRate',
        :'benchmark_interest_rate' => :'benchmarkInterestRate',
        :'deal_status' => :'dealStatus',
        :'expiry_date' => :'expiryDate',
        :'tenor_term' => :'tenorTerm',
        :'tenor_period' => :'tenorPeriod',
        :'relationship' => :'relationship'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'product_name' => :'Object',
        :'product_code' => :'Object',
        :'display_account_number' => :'Object',
        :'base_currency_principal_amount' => :'Object',
        :'base_currency_code' => :'Object',
        :'alternate_currency_principal_amount' => :'Object',
        :'opening_date' => :'Object',
        :'alternate_currency_code' => :'Object',
        :'base_currency_disposal_account' => :'Object',
        :'alternate_currency_disposal_account' => :'Object',
        :'base_currency_interest_amount' => :'Object',
        :'alternate_currency_interest_amount' => :'Object',
        :'base_currency_maturity_amount' => :'Object',
        :'alternate_currency_maturity_amount' => :'Object',
        :'base_currency_premium_amount' => :'Object',
        :'maturity_date' => :'Object',
        :'strike_price' => :'Object',
        :'customer_interest_rate' => :'Object',
        :'accrued_interest_rate' => :'Object',
        :'benchmark_interest_rate' => :'Object',
        :'deal_status' => :'Object',
        :'expiry_date' => :'Object',
        :'tenor_term' => :'Object',
        :'tenor_period' => :'Object',
        :'relationship' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::PremiumDepositAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::PremiumDepositAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'product_name')
        self.product_name = attributes[:'product_name']
      end

      if attributes.key?(:'product_code')
        self.product_code = attributes[:'product_code']
      end

      if attributes.key?(:'display_account_number')
        self.display_account_number = attributes[:'display_account_number']
      end

      if attributes.key?(:'base_currency_principal_amount')
        self.base_currency_principal_amount = attributes[:'base_currency_principal_amount']
      end

      if attributes.key?(:'base_currency_code')
        self.base_currency_code = attributes[:'base_currency_code']
      end

      if attributes.key?(:'alternate_currency_principal_amount')
        self.alternate_currency_principal_amount = attributes[:'alternate_currency_principal_amount']
      end

      if attributes.key?(:'opening_date')
        self.opening_date = attributes[:'opening_date']
      end

      if attributes.key?(:'alternate_currency_code')
        self.alternate_currency_code = attributes[:'alternate_currency_code']
      end

      if attributes.key?(:'base_currency_disposal_account')
        self.base_currency_disposal_account = attributes[:'base_currency_disposal_account']
      end

      if attributes.key?(:'alternate_currency_disposal_account')
        self.alternate_currency_disposal_account = attributes[:'alternate_currency_disposal_account']
      end

      if attributes.key?(:'base_currency_interest_amount')
        self.base_currency_interest_amount = attributes[:'base_currency_interest_amount']
      end

      if attributes.key?(:'alternate_currency_interest_amount')
        self.alternate_currency_interest_amount = attributes[:'alternate_currency_interest_amount']
      end

      if attributes.key?(:'base_currency_maturity_amount')
        self.base_currency_maturity_amount = attributes[:'base_currency_maturity_amount']
      end

      if attributes.key?(:'alternate_currency_maturity_amount')
        self.alternate_currency_maturity_amount = attributes[:'alternate_currency_maturity_amount']
      end

      if attributes.key?(:'base_currency_premium_amount')
        self.base_currency_premium_amount = attributes[:'base_currency_premium_amount']
      end

      if attributes.key?(:'maturity_date')
        self.maturity_date = attributes[:'maturity_date']
      end

      if attributes.key?(:'strike_price')
        self.strike_price = attributes[:'strike_price']
      end

      if attributes.key?(:'customer_interest_rate')
        self.customer_interest_rate = attributes[:'customer_interest_rate']
      end

      if attributes.key?(:'accrued_interest_rate')
        self.accrued_interest_rate = attributes[:'accrued_interest_rate']
      end

      if attributes.key?(:'benchmark_interest_rate')
        self.benchmark_interest_rate = attributes[:'benchmark_interest_rate']
      end

      if attributes.key?(:'deal_status')
        self.deal_status = attributes[:'deal_status']
      end

      if attributes.key?(:'expiry_date')
        self.expiry_date = attributes[:'expiry_date']
      end

      if attributes.key?(:'tenor_term')
        self.tenor_term = attributes[:'tenor_term']
      end

      if attributes.key?(:'tenor_period')
        self.tenor_period = attributes[:'tenor_period']
      end

      if attributes.key?(:'relationship')
        self.relationship = attributes[:'relationship']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @display_account_number.nil?
        invalid_properties.push('invalid value for "display_account_number", display_account_number cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @display_account_number.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          product_name == o.product_name &&
          product_code == o.product_code &&
          display_account_number == o.display_account_number &&
          base_currency_principal_amount == o.base_currency_principal_amount &&
          base_currency_code == o.base_currency_code &&
          alternate_currency_principal_amount == o.alternate_currency_principal_amount &&
          opening_date == o.opening_date &&
          alternate_currency_code == o.alternate_currency_code &&
          base_currency_disposal_account == o.base_currency_disposal_account &&
          alternate_currency_disposal_account == o.alternate_currency_disposal_account &&
          base_currency_interest_amount == o.base_currency_interest_amount &&
          alternate_currency_interest_amount == o.alternate_currency_interest_amount &&
          base_currency_maturity_amount == o.base_currency_maturity_amount &&
          alternate_currency_maturity_amount == o.alternate_currency_maturity_amount &&
          base_currency_premium_amount == o.base_currency_premium_amount &&
          maturity_date == o.maturity_date &&
          strike_price == o.strike_price &&
          customer_interest_rate == o.customer_interest_rate &&
          accrued_interest_rate == o.accrued_interest_rate &&
          benchmark_interest_rate == o.benchmark_interest_rate &&
          deal_status == o.deal_status &&
          expiry_date == o.expiry_date &&
          tenor_term == o.tenor_term &&
          tenor_period == o.tenor_period &&
          relationship == o.relationship
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [product_name, product_code, display_account_number, base_currency_principal_amount, base_currency_code, alternate_currency_principal_amount, opening_date, alternate_currency_code, base_currency_disposal_account, alternate_currency_disposal_account, base_currency_interest_amount, alternate_currency_interest_amount, base_currency_maturity_amount, alternate_currency_maturity_amount, base_currency_premium_amount, maturity_date, strike_price, customer_interest_rate, accrued_interest_rate, benchmark_interest_rate, deal_status, expiry_date, tenor_term, tenor_period, relationship].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
