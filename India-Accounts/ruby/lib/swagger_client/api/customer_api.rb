=begin
#Accounts

#The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module SwaggerClient
  class CustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check Availability of Funds
    # This API returns a yes or no, based on the availability of requested funds in the customer’s account.
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param client_id Client ID generated during application registration.
    # @param sufficiency_check_amount Specifies amount to check account for sufficiency.
    # @param account_id IBAN number of the customer.
    # @param currency_code Currency Code in ISO 4217 format
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
    # @return [SufficiencyOfFundsResponse]
    def sufficiency_of_funds(authorization, uuid, accept, client_id, sufficiency_check_amount, account_id, currency_code, opts = {})
      data, _status_code, _headers = sufficiency_of_funds_with_http_info(authorization, uuid, accept, client_id, sufficiency_check_amount, account_id, currency_code, opts)
      data
    end

    # Check Availability of Funds
    # This API returns a yes or no, based on the availability of requested funds in the customer’s account.
    # @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.
    # @param uuid 128 bit random UUID generated uniquely for every request.
    # @param accept Content-Type that are acceptable for the response.
    # @param client_id Client ID generated during application registration.
    # @param sufficiency_check_amount Specifies amount to check account for sufficiency.
    # @param account_id IBAN number of the customer.
    # @param currency_code Currency Code in ISO 4217 format
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
    # @return [Array<(SufficiencyOfFundsResponse, Integer, Hash)>] SufficiencyOfFundsResponse data, response status code and response headers
    def sufficiency_of_funds_with_http_info(authorization, uuid, accept, client_id, sufficiency_check_amount, account_id, currency_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.sufficiency_of_funds ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CustomerApi.sufficiency_of_funds"
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling CustomerApi.sufficiency_of_funds"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling CustomerApi.sufficiency_of_funds"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling CustomerApi.sufficiency_of_funds"
      end
      # verify the required parameter 'sufficiency_check_amount' is set
      if @api_client.config.client_side_validation && sufficiency_check_amount.nil?
        fail ArgumentError, "Missing the required parameter 'sufficiency_check_amount' when calling CustomerApi.sufficiency_of_funds"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling CustomerApi.sufficiency_of_funds"
      end
      # verify the required parameter 'currency_code' is set
      if @api_client.config.client_side_validation && currency_code.nil?
        fail ArgumentError, "Missing the required parameter 'currency_code' when calling CustomerApi.sufficiency_of_funds"
      end
      # resource path
      local_var_path = '/v1/accounts/{accountId}/funds/sufficiencyCheck'.sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sufficiencyCheckAmount'] = sufficiency_check_amount
      query_params[:'currencyCode'] = currency_code

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization
      header_params[:'uuid'] = uuid
      header_params[:'Accept'] = accept
      header_params[:'client_id'] = client_id
      header_params[:'clientDetails'] = opts[:'client_details'] if !opts[:'client_details'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SufficiencyOfFundsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#sufficiency_of_funds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
