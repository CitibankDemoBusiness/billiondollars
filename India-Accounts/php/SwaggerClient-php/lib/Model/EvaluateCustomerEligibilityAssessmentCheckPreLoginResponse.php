<?php
/**
 * EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_name' => 'string',
'display_account_number' => 'string',
'account_group' => 'string',
'maximum_eligible_loan_amount' => 'double',
'minimum_eligible_loan_amount' => 'double',
'offer_indicator' => 'string',
'loan_booking_plan' => '\Swagger\Client\Model\LoanBookingPlan[]',
'lop_category' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_name' => null,
'display_account_number' => null,
'account_group' => null,
'maximum_eligible_loan_amount' => 'double',
'minimum_eligible_loan_amount' => 'double',
'offer_indicator' => null,
'loan_booking_plan' => null,
'lop_category' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_name' => 'customerName',
'display_account_number' => 'displayAccountNumber',
'account_group' => 'accountGroup',
'maximum_eligible_loan_amount' => 'maximumEligibleLoanAmount',
'minimum_eligible_loan_amount' => 'minimumEligibleLoanAmount',
'offer_indicator' => 'offerIndicator',
'loan_booking_plan' => 'loanBookingPlan',
'lop_category' => 'lopCategory'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_name' => 'setCustomerName',
'display_account_number' => 'setDisplayAccountNumber',
'account_group' => 'setAccountGroup',
'maximum_eligible_loan_amount' => 'setMaximumEligibleLoanAmount',
'minimum_eligible_loan_amount' => 'setMinimumEligibleLoanAmount',
'offer_indicator' => 'setOfferIndicator',
'loan_booking_plan' => 'setLoanBookingPlan',
'lop_category' => 'setLopCategory'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_name' => 'getCustomerName',
'display_account_number' => 'getDisplayAccountNumber',
'account_group' => 'getAccountGroup',
'maximum_eligible_loan_amount' => 'getMaximumEligibleLoanAmount',
'minimum_eligible_loan_amount' => 'getMinimumEligibleLoanAmount',
'offer_indicator' => 'getOfferIndicator',
'loan_booking_plan' => 'getLoanBookingPlan',
'lop_category' => 'getLopCategory'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['display_account_number'] = isset($data['display_account_number']) ? $data['display_account_number'] : null;
        $this->container['account_group'] = isset($data['account_group']) ? $data['account_group'] : null;
        $this->container['maximum_eligible_loan_amount'] = isset($data['maximum_eligible_loan_amount']) ? $data['maximum_eligible_loan_amount'] : null;
        $this->container['minimum_eligible_loan_amount'] = isset($data['minimum_eligible_loan_amount']) ? $data['minimum_eligible_loan_amount'] : null;
        $this->container['offer_indicator'] = isset($data['offer_indicator']) ? $data['offer_indicator'] : null;
        $this->container['loan_booking_plan'] = isset($data['loan_booking_plan']) ? $data['loan_booking_plan'] : null;
        $this->container['lop_category'] = isset($data['lop_category']) ? $data['lop_category'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_name'] === null) {
            $invalidProperties[] = "'customer_name' can't be null";
        }
        if ($this->container['maximum_eligible_loan_amount'] === null) {
            $invalidProperties[] = "'maximum_eligible_loan_amount' can't be null";
        }
        if ($this->container['minimum_eligible_loan_amount'] === null) {
            $invalidProperties[] = "'minimum_eligible_loan_amount' can't be null";
        }
        if ($this->container['offer_indicator'] === null) {
            $invalidProperties[] = "'offer_indicator' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name This refers to the name of the customer.
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets display_account_number
     *
     * @return string
     */
    public function getDisplayAccountNumber()
    {
        return $this->container['display_account_number'];
    }

    /**
     * Sets display_account_number
     *
     * @param string $display_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplayAccountNumber($display_account_number)
    {
        $this->container['display_account_number'] = $display_account_number;

        return $this;
    }

    /**
     * Gets account_group
     *
     * @return string
     */
    public function getAccountGroup()
    {
        return $this->container['account_group'];
    }

    /**
     * Sets account_group
     *
     * @param string $account_group Account Group associated with the source Account.This is a reference data field. Please use /v1/utilities/referenceData/{accountGroup} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setAccountGroup($account_group)
    {
        $this->container['account_group'] = $account_group;

        return $this;
    }

    /**
     * Gets maximum_eligible_loan_amount
     *
     * @return double
     */
    public function getMaximumEligibleLoanAmount()
    {
        return $this->container['maximum_eligible_loan_amount'];
    }

    /**
     * Sets maximum_eligible_loan_amount
     *
     * @param double $maximum_eligible_loan_amount The maximum amount of credit that extend to a customer
     *
     * @return $this
     */
    public function setMaximumEligibleLoanAmount($maximum_eligible_loan_amount)
    {
        $this->container['maximum_eligible_loan_amount'] = $maximum_eligible_loan_amount;

        return $this;
    }

    /**
     * Gets minimum_eligible_loan_amount
     *
     * @return double
     */
    public function getMinimumEligibleLoanAmount()
    {
        return $this->container['minimum_eligible_loan_amount'];
    }

    /**
     * Sets minimum_eligible_loan_amount
     *
     * @param double $minimum_eligible_loan_amount The minimum amount of credit that extend to a customer
     *
     * @return $this
     */
    public function setMinimumEligibleLoanAmount($minimum_eligible_loan_amount)
    {
        $this->container['minimum_eligible_loan_amount'] = $minimum_eligible_loan_amount;

        return $this;
    }

    /**
     * Gets offer_indicator
     *
     * @return string
     */
    public function getOfferIndicator()
    {
        return $this->container['offer_indicator'];
    }

    /**
     * Sets offer_indicator
     *
     * @param string $offer_indicator Indicator to determine if offer is rate or fee based. This is a reference data field. Please use /v1/apac/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setOfferIndicator($offer_indicator)
    {
        $this->container['offer_indicator'] = $offer_indicator;

        return $this;
    }

    /**
     * Gets loan_booking_plan
     *
     * @return \Swagger\Client\Model\LoanBookingPlan[]
     */
    public function getLoanBookingPlan()
    {
        return $this->container['loan_booking_plan'];
    }

    /**
     * Sets loan_booking_plan
     *
     * @param \Swagger\Client\Model\LoanBookingPlan[] $loan_booking_plan loan_booking_plan
     *
     * @return $this
     */
    public function setLoanBookingPlan($loan_booking_plan)
    {
        $this->container['loan_booking_plan'] = $loan_booking_plan;

        return $this;
    }

    /**
     * Gets lop_category
     *
     * @return string
     */
    public function getLopCategory()
    {
        return $this->container['lop_category'];
    }

    /**
     * Sets lop_category
     *
     * @param string $lop_category Indicator to determine the type of LOP Offer. This is a reference data field. Please use /v1/utilities/referenceData/{lopCategory} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setLopCategory($lop_category)
    {
        $this->container['lop_category'] = $lop_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
