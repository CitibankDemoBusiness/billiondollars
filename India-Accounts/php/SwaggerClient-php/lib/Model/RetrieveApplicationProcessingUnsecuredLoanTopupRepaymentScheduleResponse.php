<?php
/**
 * RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fixed_payment_amount' => 'double',
'total_interest_amount' => 'double',
'effective_interest_rate' => 'double',
'effective_interest_rate_with_fee' => 'double',
'annual_percentage_rate' => 'double',
'loan_schedule_details' => '\Swagger\Client\Model\LoanScheduleDetails[]',
'loan_topup' => '\Swagger\Client\Model\LoanTopup[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fixed_payment_amount' => 'double',
'total_interest_amount' => 'double',
'effective_interest_rate' => 'double',
'effective_interest_rate_with_fee' => 'double',
'annual_percentage_rate' => 'double',
'loan_schedule_details' => null,
'loan_topup' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fixed_payment_amount' => 'fixedPaymentAmount',
'total_interest_amount' => 'totalInterestAmount',
'effective_interest_rate' => 'effectiveInterestRate',
'effective_interest_rate_with_fee' => 'effectiveInterestRateWithFee',
'annual_percentage_rate' => 'annualPercentageRate',
'loan_schedule_details' => 'loanScheduleDetails',
'loan_topup' => 'loanTopup'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fixed_payment_amount' => 'setFixedPaymentAmount',
'total_interest_amount' => 'setTotalInterestAmount',
'effective_interest_rate' => 'setEffectiveInterestRate',
'effective_interest_rate_with_fee' => 'setEffectiveInterestRateWithFee',
'annual_percentage_rate' => 'setAnnualPercentageRate',
'loan_schedule_details' => 'setLoanScheduleDetails',
'loan_topup' => 'setLoanTopup'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fixed_payment_amount' => 'getFixedPaymentAmount',
'total_interest_amount' => 'getTotalInterestAmount',
'effective_interest_rate' => 'getEffectiveInterestRate',
'effective_interest_rate_with_fee' => 'getEffectiveInterestRateWithFee',
'annual_percentage_rate' => 'getAnnualPercentageRate',
'loan_schedule_details' => 'getLoanScheduleDetails',
'loan_topup' => 'getLoanTopup'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fixed_payment_amount'] = isset($data['fixed_payment_amount']) ? $data['fixed_payment_amount'] : null;
        $this->container['total_interest_amount'] = isset($data['total_interest_amount']) ? $data['total_interest_amount'] : null;
        $this->container['effective_interest_rate'] = isset($data['effective_interest_rate']) ? $data['effective_interest_rate'] : null;
        $this->container['effective_interest_rate_with_fee'] = isset($data['effective_interest_rate_with_fee']) ? $data['effective_interest_rate_with_fee'] : null;
        $this->container['annual_percentage_rate'] = isset($data['annual_percentage_rate']) ? $data['annual_percentage_rate'] : null;
        $this->container['loan_schedule_details'] = isset($data['loan_schedule_details']) ? $data['loan_schedule_details'] : null;
        $this->container['loan_topup'] = isset($data['loan_topup']) ? $data['loan_topup'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fixed_payment_amount'] === null) {
            $invalidProperties[] = "'fixed_payment_amount' can't be null";
        }
        if ($this->container['total_interest_amount'] === null) {
            $invalidProperties[] = "'total_interest_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fixed_payment_amount
     *
     * @return double
     */
    public function getFixedPaymentAmount()
    {
        return $this->container['fixed_payment_amount'];
    }

    /**
     * Sets fixed_payment_amount
     *
     * @param double $fixed_payment_amount Fixed payment amount
     *
     * @return $this
     */
    public function setFixedPaymentAmount($fixed_payment_amount)
    {
        $this->container['fixed_payment_amount'] = $fixed_payment_amount;

        return $this;
    }

    /**
     * Gets total_interest_amount
     *
     * @return double
     */
    public function getTotalInterestAmount()
    {
        return $this->container['total_interest_amount'];
    }

    /**
     * Sets total_interest_amount
     *
     * @param double $total_interest_amount Total interest amount
     *
     * @return $this
     */
    public function setTotalInterestAmount($total_interest_amount)
    {
        $this->container['total_interest_amount'] = $total_interest_amount;

        return $this;
    }

    /**
     * Gets effective_interest_rate
     *
     * @return double
     */
    public function getEffectiveInterestRate()
    {
        return $this->container['effective_interest_rate'];
    }

    /**
     * Sets effective_interest_rate
     *
     * @param double $effective_interest_rate Effective interest rate
     *
     * @return $this
     */
    public function setEffectiveInterestRate($effective_interest_rate)
    {
        $this->container['effective_interest_rate'] = $effective_interest_rate;

        return $this;
    }

    /**
     * Gets effective_interest_rate_with_fee
     *
     * @return double
     */
    public function getEffectiveInterestRateWithFee()
    {
        return $this->container['effective_interest_rate_with_fee'];
    }

    /**
     * Sets effective_interest_rate_with_fee
     *
     * @param double $effective_interest_rate_with_fee Effective interest rate with fee
     *
     * @return $this
     */
    public function setEffectiveInterestRateWithFee($effective_interest_rate_with_fee)
    {
        $this->container['effective_interest_rate_with_fee'] = $effective_interest_rate_with_fee;

        return $this;
    }

    /**
     * Gets annual_percentage_rate
     *
     * @return double
     */
    public function getAnnualPercentageRate()
    {
        return $this->container['annual_percentage_rate'];
    }

    /**
     * Sets annual_percentage_rate
     *
     * @param double $annual_percentage_rate Annual percentage rate
     *
     * @return $this
     */
    public function setAnnualPercentageRate($annual_percentage_rate)
    {
        $this->container['annual_percentage_rate'] = $annual_percentage_rate;

        return $this;
    }

    /**
     * Gets loan_schedule_details
     *
     * @return \Swagger\Client\Model\LoanScheduleDetails[]
     */
    public function getLoanScheduleDetails()
    {
        return $this->container['loan_schedule_details'];
    }

    /**
     * Sets loan_schedule_details
     *
     * @param \Swagger\Client\Model\LoanScheduleDetails[] $loan_schedule_details loan_schedule_details
     *
     * @return $this
     */
    public function setLoanScheduleDetails($loan_schedule_details)
    {
        $this->container['loan_schedule_details'] = $loan_schedule_details;

        return $this;
    }

    /**
     * Gets loan_topup
     *
     * @return \Swagger\Client\Model\LoanTopup[]
     */
    public function getLoanTopup()
    {
        return $this->container['loan_topup'];
    }

    /**
     * Sets loan_topup
     *
     * @param \Swagger\Client\Model\LoanTopup[] $loan_topup loan_topup
     *
     * @return $this
     */
    public function setLoanTopup($loan_topup)
    {
        $this->container['loan_topup'] = $loan_topup;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
