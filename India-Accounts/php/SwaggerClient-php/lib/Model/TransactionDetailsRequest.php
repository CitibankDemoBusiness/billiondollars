<?php
/**
 * TransactionDetailsRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactionDetailsRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionDetailsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionDetailsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
'currency_code' => 'string',
'transaction_from_date' => '\DateTime',
'transaction_to_date' => '\DateTime',
'amount_from' => 'double',
'amount_to' => 'double',
'transaction_status' => 'string',
'transaction_indicator' => 'string',
'next_start_index' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
'currency_code' => null,
'transaction_from_date' => 'date',
'transaction_to_date' => 'date',
'amount_from' => 'double',
'amount_to' => 'double',
'transaction_status' => null,
'transaction_indicator' => null,
'next_start_index' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
'currency_code' => 'currencyCode',
'transaction_from_date' => 'transactionFromDate',
'transaction_to_date' => 'transactionToDate',
'amount_from' => 'amountFrom',
'amount_to' => 'amountTo',
'transaction_status' => 'transactionStatus',
'transaction_indicator' => 'transactionIndicator',
'next_start_index' => 'nextStartIndex'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
'currency_code' => 'setCurrencyCode',
'transaction_from_date' => 'setTransactionFromDate',
'transaction_to_date' => 'setTransactionToDate',
'amount_from' => 'setAmountFrom',
'amount_to' => 'setAmountTo',
'transaction_status' => 'setTransactionStatus',
'transaction_indicator' => 'setTransactionIndicator',
'next_start_index' => 'setNextStartIndex'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
'currency_code' => 'getCurrencyCode',
'transaction_from_date' => 'getTransactionFromDate',
'transaction_to_date' => 'getTransactionToDate',
'amount_from' => 'getAmountFrom',
'amount_to' => 'getAmountTo',
'transaction_status' => 'getTransactionStatus',
'transaction_indicator' => 'getTransactionIndicator',
'next_start_index' => 'getNextStartIndex'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['transaction_from_date'] = isset($data['transaction_from_date']) ? $data['transaction_from_date'] : null;
        $this->container['transaction_to_date'] = isset($data['transaction_to_date']) ? $data['transaction_to_date'] : null;
        $this->container['amount_from'] = isset($data['amount_from']) ? $data['amount_from'] : null;
        $this->container['amount_to'] = isset($data['amount_to']) ? $data['amount_to'] : null;
        $this->container['transaction_status'] = isset($data['transaction_status']) ? $data['transaction_status'] : null;
        $this->container['transaction_indicator'] = isset($data['transaction_indicator']) ? $data['transaction_indicator'] : null;
        $this->container['next_start_index'] = isset($data['next_start_index']) ? $data['next_start_index'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id The account identifier in encrypted format.Typically, this is not displayed to the customer.
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code of the destination account in ISO 4217 format
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets transaction_from_date
     *
     * @return \DateTime
     */
    public function getTransactionFromDate()
    {
        return $this->container['transaction_from_date'];
    }

    /**
     * Sets transaction_from_date
     *
     * @param \DateTime $transaction_from_date Starting range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products
     *
     * @return $this
     */
    public function setTransactionFromDate($transaction_from_date)
    {
        $this->container['transaction_from_date'] = $transaction_from_date;

        return $this;
    }

    /**
     * Gets transaction_to_date
     *
     * @return \DateTime
     */
    public function getTransactionToDate()
    {
        return $this->container['transaction_to_date'];
    }

    /**
     * Sets transaction_to_date
     *
     * @param \DateTime $transaction_to_date End range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products.
     *
     * @return $this
     */
    public function setTransactionToDate($transaction_to_date)
    {
        $this->container['transaction_to_date'] = $transaction_to_date;

        return $this;
    }

    /**
     * Gets amount_from
     *
     * @return double
     */
    public function getAmountFrom()
    {
        return $this->container['amount_from'];
    }

    /**
     * Sets amount_from
     *
     * @param double $amount_from Starting range of transaction amount in the base currency. Note: Applicable for Investment accounts.
     *
     * @return $this
     */
    public function setAmountFrom($amount_from)
    {
        $this->container['amount_from'] = $amount_from;

        return $this;
    }

    /**
     * Gets amount_to
     *
     * @return double
     */
    public function getAmountTo()
    {
        return $this->container['amount_to'];
    }

    /**
     * Sets amount_to
     *
     * @param double $amount_to End range of transaction amount in the base currency. Note: Applicable for Investment accounts.
     *
     * @return $this
     */
    public function setAmountTo($amount_to)
    {
        $this->container['amount_to'] = $amount_to;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string $transaction_status Applicable for credit cards only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible value of this field with description.
     *
     * @return $this
     */
    public function setTransactionStatus($transaction_status)
    {
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets transaction_indicator
     *
     * @return string
     */
    public function getTransactionIndicator()
    {
        return $this->container['transaction_indicator'];
    }

    /**
     * Sets transaction_indicator
     *
     * @param string $transaction_indicator Indicates which card on an account was used for a transaction. Applicable only for credit cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionIndicator} resource to get possible value of this field with description.
     *
     * @return $this
     */
    public function setTransactionIndicator($transaction_indicator)
    {
        $this->container['transaction_indicator'] = $transaction_indicator;

        return $this;
    }

    /**
     * Gets next_start_index
     *
     * @return string
     */
    public function getNextStartIndex()
    {
        return $this->container['next_start_index'];
    }

    /**
     * Sets next_start_index
     *
     * @param string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
     *
     * @return $this
     */
    public function setNextStartIndex($next_start_index)
    {
        $this->container['next_start_index'] = $next_start_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
