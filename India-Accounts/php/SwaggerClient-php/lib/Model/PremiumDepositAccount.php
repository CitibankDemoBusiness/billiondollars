<?php
/**
 * PremiumDepositAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PremiumDepositAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PremiumDepositAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PremiumDepositAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_name' => 'string',
'product_code' => 'string',
'display_account_number' => 'string',
'base_currency_principal_amount' => 'double',
'base_currency_code' => 'string',
'alternate_currency_principal_amount' => 'double',
'opening_date' => '\DateTime',
'alternate_currency_code' => 'string',
'base_currency_disposal_account' => 'string',
'alternate_currency_disposal_account' => 'string',
'base_currency_interest_amount' => 'double',
'alternate_currency_interest_amount' => 'double',
'base_currency_maturity_amount' => 'double',
'alternate_currency_maturity_amount' => 'double',
'base_currency_premium_amount' => 'double',
'maturity_date' => '\DateTime',
'strike_price' => 'double',
'customer_interest_rate' => 'double',
'accrued_interest_rate' => 'double',
'benchmark_interest_rate' => 'double',
'deal_status' => 'string',
'expiry_date' => '\DateTime',
'tenor_term' => 'int',
'tenor_period' => 'string',
'relationship' => '\Swagger\Client\Model\Relationship'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_name' => null,
'product_code' => null,
'display_account_number' => null,
'base_currency_principal_amount' => 'double',
'base_currency_code' => null,
'alternate_currency_principal_amount' => 'double',
'opening_date' => 'date',
'alternate_currency_code' => null,
'base_currency_disposal_account' => null,
'alternate_currency_disposal_account' => null,
'base_currency_interest_amount' => 'double',
'alternate_currency_interest_amount' => 'double',
'base_currency_maturity_amount' => 'double',
'alternate_currency_maturity_amount' => 'double',
'base_currency_premium_amount' => 'double',
'maturity_date' => 'date',
'strike_price' => 'double',
'customer_interest_rate' => 'double',
'accrued_interest_rate' => 'double',
'benchmark_interest_rate' => 'double',
'deal_status' => null,
'expiry_date' => 'date',
'tenor_term' => null,
'tenor_period' => null,
'relationship' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_name' => 'productName',
'product_code' => 'productCode',
'display_account_number' => 'displayAccountNumber',
'base_currency_principal_amount' => 'baseCurrencyPrincipalAmount',
'base_currency_code' => 'baseCurrencyCode',
'alternate_currency_principal_amount' => 'alternateCurrencyPrincipalAmount',
'opening_date' => 'openingDate',
'alternate_currency_code' => 'alternateCurrencyCode',
'base_currency_disposal_account' => 'baseCurrencyDisposalAccount',
'alternate_currency_disposal_account' => 'alternateCurrencyDisposalAccount',
'base_currency_interest_amount' => 'baseCurrencyInterestAmount',
'alternate_currency_interest_amount' => 'alternateCurrencyInterestAmount',
'base_currency_maturity_amount' => 'baseCurrencyMaturityAmount',
'alternate_currency_maturity_amount' => 'alternateCurrencyMaturityAmount',
'base_currency_premium_amount' => 'baseCurrencyPremiumAmount',
'maturity_date' => 'maturityDate',
'strike_price' => 'strikePrice',
'customer_interest_rate' => 'customerInterestRate',
'accrued_interest_rate' => 'accruedInterestRate',
'benchmark_interest_rate' => 'benchmarkInterestRate',
'deal_status' => 'dealStatus',
'expiry_date' => 'expiryDate',
'tenor_term' => 'tenorTerm',
'tenor_period' => 'tenorPeriod',
'relationship' => 'relationship'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_name' => 'setProductName',
'product_code' => 'setProductCode',
'display_account_number' => 'setDisplayAccountNumber',
'base_currency_principal_amount' => 'setBaseCurrencyPrincipalAmount',
'base_currency_code' => 'setBaseCurrencyCode',
'alternate_currency_principal_amount' => 'setAlternateCurrencyPrincipalAmount',
'opening_date' => 'setOpeningDate',
'alternate_currency_code' => 'setAlternateCurrencyCode',
'base_currency_disposal_account' => 'setBaseCurrencyDisposalAccount',
'alternate_currency_disposal_account' => 'setAlternateCurrencyDisposalAccount',
'base_currency_interest_amount' => 'setBaseCurrencyInterestAmount',
'alternate_currency_interest_amount' => 'setAlternateCurrencyInterestAmount',
'base_currency_maturity_amount' => 'setBaseCurrencyMaturityAmount',
'alternate_currency_maturity_amount' => 'setAlternateCurrencyMaturityAmount',
'base_currency_premium_amount' => 'setBaseCurrencyPremiumAmount',
'maturity_date' => 'setMaturityDate',
'strike_price' => 'setStrikePrice',
'customer_interest_rate' => 'setCustomerInterestRate',
'accrued_interest_rate' => 'setAccruedInterestRate',
'benchmark_interest_rate' => 'setBenchmarkInterestRate',
'deal_status' => 'setDealStatus',
'expiry_date' => 'setExpiryDate',
'tenor_term' => 'setTenorTerm',
'tenor_period' => 'setTenorPeriod',
'relationship' => 'setRelationship'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_name' => 'getProductName',
'product_code' => 'getProductCode',
'display_account_number' => 'getDisplayAccountNumber',
'base_currency_principal_amount' => 'getBaseCurrencyPrincipalAmount',
'base_currency_code' => 'getBaseCurrencyCode',
'alternate_currency_principal_amount' => 'getAlternateCurrencyPrincipalAmount',
'opening_date' => 'getOpeningDate',
'alternate_currency_code' => 'getAlternateCurrencyCode',
'base_currency_disposal_account' => 'getBaseCurrencyDisposalAccount',
'alternate_currency_disposal_account' => 'getAlternateCurrencyDisposalAccount',
'base_currency_interest_amount' => 'getBaseCurrencyInterestAmount',
'alternate_currency_interest_amount' => 'getAlternateCurrencyInterestAmount',
'base_currency_maturity_amount' => 'getBaseCurrencyMaturityAmount',
'alternate_currency_maturity_amount' => 'getAlternateCurrencyMaturityAmount',
'base_currency_premium_amount' => 'getBaseCurrencyPremiumAmount',
'maturity_date' => 'getMaturityDate',
'strike_price' => 'getStrikePrice',
'customer_interest_rate' => 'getCustomerInterestRate',
'accrued_interest_rate' => 'getAccruedInterestRate',
'benchmark_interest_rate' => 'getBenchmarkInterestRate',
'deal_status' => 'getDealStatus',
'expiry_date' => 'getExpiryDate',
'tenor_term' => 'getTenorTerm',
'tenor_period' => 'getTenorPeriod',
'relationship' => 'getRelationship'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['display_account_number'] = isset($data['display_account_number']) ? $data['display_account_number'] : null;
        $this->container['base_currency_principal_amount'] = isset($data['base_currency_principal_amount']) ? $data['base_currency_principal_amount'] : null;
        $this->container['base_currency_code'] = isset($data['base_currency_code']) ? $data['base_currency_code'] : null;
        $this->container['alternate_currency_principal_amount'] = isset($data['alternate_currency_principal_amount']) ? $data['alternate_currency_principal_amount'] : null;
        $this->container['opening_date'] = isset($data['opening_date']) ? $data['opening_date'] : null;
        $this->container['alternate_currency_code'] = isset($data['alternate_currency_code']) ? $data['alternate_currency_code'] : null;
        $this->container['base_currency_disposal_account'] = isset($data['base_currency_disposal_account']) ? $data['base_currency_disposal_account'] : null;
        $this->container['alternate_currency_disposal_account'] = isset($data['alternate_currency_disposal_account']) ? $data['alternate_currency_disposal_account'] : null;
        $this->container['base_currency_interest_amount'] = isset($data['base_currency_interest_amount']) ? $data['base_currency_interest_amount'] : null;
        $this->container['alternate_currency_interest_amount'] = isset($data['alternate_currency_interest_amount']) ? $data['alternate_currency_interest_amount'] : null;
        $this->container['base_currency_maturity_amount'] = isset($data['base_currency_maturity_amount']) ? $data['base_currency_maturity_amount'] : null;
        $this->container['alternate_currency_maturity_amount'] = isset($data['alternate_currency_maturity_amount']) ? $data['alternate_currency_maturity_amount'] : null;
        $this->container['base_currency_premium_amount'] = isset($data['base_currency_premium_amount']) ? $data['base_currency_premium_amount'] : null;
        $this->container['maturity_date'] = isset($data['maturity_date']) ? $data['maturity_date'] : null;
        $this->container['strike_price'] = isset($data['strike_price']) ? $data['strike_price'] : null;
        $this->container['customer_interest_rate'] = isset($data['customer_interest_rate']) ? $data['customer_interest_rate'] : null;
        $this->container['accrued_interest_rate'] = isset($data['accrued_interest_rate']) ? $data['accrued_interest_rate'] : null;
        $this->container['benchmark_interest_rate'] = isset($data['benchmark_interest_rate']) ? $data['benchmark_interest_rate'] : null;
        $this->container['deal_status'] = isset($data['deal_status']) ? $data['deal_status'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['tenor_term'] = isset($data['tenor_term']) ? $data['tenor_term'] : null;
        $this->container['tenor_period'] = isset($data['tenor_period']) ? $data['tenor_period'] : null;
        $this->container['relationship'] = isset($data['relationship']) ? $data['relationship'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_account_number'] === null) {
            $invalidProperties[] = "'display_account_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name The name of the product
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code A unique code that identifies the product
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets display_account_number
     *
     * @return string
     */
    public function getDisplayAccountNumber()
    {
        return $this->container['display_account_number'];
    }

    /**
     * Sets display_account_number
     *
     * @param string $display_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplayAccountNumber($display_account_number)
    {
        $this->container['display_account_number'] = $display_account_number;

        return $this;
    }

    /**
     * Gets base_currency_principal_amount
     *
     * @return double
     */
    public function getBaseCurrencyPrincipalAmount()
    {
        return $this->container['base_currency_principal_amount'];
    }

    /**
     * Sets base_currency_principal_amount
     *
     * @param double $base_currency_principal_amount The investment amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyPrincipalAmount($base_currency_principal_amount)
    {
        $this->container['base_currency_principal_amount'] = $base_currency_principal_amount;

        return $this;
    }

    /**
     * Gets base_currency_code
     *
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['base_currency_code'];
    }

    /**
     * Sets base_currency_code
     *
     * @param string $base_currency_code The base currency code in ISO 4217 format
     *
     * @return $this
     */
    public function setBaseCurrencyCode($base_currency_code)
    {
        $this->container['base_currency_code'] = $base_currency_code;

        return $this;
    }

    /**
     * Gets alternate_currency_principal_amount
     *
     * @return double
     */
    public function getAlternateCurrencyPrincipalAmount()
    {
        return $this->container['alternate_currency_principal_amount'];
    }

    /**
     * Sets alternate_currency_principal_amount
     *
     * @param double $alternate_currency_principal_amount The investment amount in alternate currency
     *
     * @return $this
     */
    public function setAlternateCurrencyPrincipalAmount($alternate_currency_principal_amount)
    {
        $this->container['alternate_currency_principal_amount'] = $alternate_currency_principal_amount;

        return $this;
    }

    /**
     * Gets opening_date
     *
     * @return \DateTime
     */
    public function getOpeningDate()
    {
        return $this->container['opening_date'];
    }

    /**
     * Sets opening_date
     *
     * @param \DateTime $opening_date Premium deposit open date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setOpeningDate($opening_date)
    {
        $this->container['opening_date'] = $opening_date;

        return $this;
    }

    /**
     * Gets alternate_currency_code
     *
     * @return string
     */
    public function getAlternateCurrencyCode()
    {
        return $this->container['alternate_currency_code'];
    }

    /**
     * Sets alternate_currency_code
     *
     * @param string $alternate_currency_code The alternate currency code in ISO 4217 format
     *
     * @return $this
     */
    public function setAlternateCurrencyCode($alternate_currency_code)
    {
        $this->container['alternate_currency_code'] = $alternate_currency_code;

        return $this;
    }

    /**
     * Gets base_currency_disposal_account
     *
     * @return string
     */
    public function getBaseCurrencyDisposalAccount()
    {
        return $this->container['base_currency_disposal_account'];
    }

    /**
     * Sets base_currency_disposal_account
     *
     * @param string $base_currency_disposal_account The account number to deposit returns of base currency, upon maturity
     *
     * @return $this
     */
    public function setBaseCurrencyDisposalAccount($base_currency_disposal_account)
    {
        $this->container['base_currency_disposal_account'] = $base_currency_disposal_account;

        return $this;
    }

    /**
     * Gets alternate_currency_disposal_account
     *
     * @return string
     */
    public function getAlternateCurrencyDisposalAccount()
    {
        return $this->container['alternate_currency_disposal_account'];
    }

    /**
     * Sets alternate_currency_disposal_account
     *
     * @param string $alternate_currency_disposal_account The account number to deposit returns of alternate currency, upon maturity
     *
     * @return $this
     */
    public function setAlternateCurrencyDisposalAccount($alternate_currency_disposal_account)
    {
        $this->container['alternate_currency_disposal_account'] = $alternate_currency_disposal_account;

        return $this;
    }

    /**
     * Gets base_currency_interest_amount
     *
     * @return double
     */
    public function getBaseCurrencyInterestAmount()
    {
        return $this->container['base_currency_interest_amount'];
    }

    /**
     * Sets base_currency_interest_amount
     *
     * @param double $base_currency_interest_amount The accrued interest amount in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyInterestAmount($base_currency_interest_amount)
    {
        $this->container['base_currency_interest_amount'] = $base_currency_interest_amount;

        return $this;
    }

    /**
     * Gets alternate_currency_interest_amount
     *
     * @return double
     */
    public function getAlternateCurrencyInterestAmount()
    {
        return $this->container['alternate_currency_interest_amount'];
    }

    /**
     * Sets alternate_currency_interest_amount
     *
     * @param double $alternate_currency_interest_amount The accrued interest amount in alternate currency
     *
     * @return $this
     */
    public function setAlternateCurrencyInterestAmount($alternate_currency_interest_amount)
    {
        $this->container['alternate_currency_interest_amount'] = $alternate_currency_interest_amount;

        return $this;
    }

    /**
     * Gets base_currency_maturity_amount
     *
     * @return double
     */
    public function getBaseCurrencyMaturityAmount()
    {
        return $this->container['base_currency_maturity_amount'];
    }

    /**
     * Sets base_currency_maturity_amount
     *
     * @param double $base_currency_maturity_amount The investment amount and accrued interest in base currency
     *
     * @return $this
     */
    public function setBaseCurrencyMaturityAmount($base_currency_maturity_amount)
    {
        $this->container['base_currency_maturity_amount'] = $base_currency_maturity_amount;

        return $this;
    }

    /**
     * Gets alternate_currency_maturity_amount
     *
     * @return double
     */
    public function getAlternateCurrencyMaturityAmount()
    {
        return $this->container['alternate_currency_maturity_amount'];
    }

    /**
     * Sets alternate_currency_maturity_amount
     *
     * @param double $alternate_currency_maturity_amount The investment amount and accrued interest in alternate currency
     *
     * @return $this
     */
    public function setAlternateCurrencyMaturityAmount($alternate_currency_maturity_amount)
    {
        $this->container['alternate_currency_maturity_amount'] = $alternate_currency_maturity_amount;

        return $this;
    }

    /**
     * Gets base_currency_premium_amount
     *
     * @return double
     */
    public function getBaseCurrencyPremiumAmount()
    {
        return $this->container['base_currency_premium_amount'];
    }

    /**
     * Sets base_currency_premium_amount
     *
     * @param double $base_currency_premium_amount A part or all of the interest the customer earns on the Premium Account represents the premium that the bank pays the customer for the currency option
     *
     * @return $this
     */
    public function setBaseCurrencyPremiumAmount($base_currency_premium_amount)
    {
        $this->container['base_currency_premium_amount'] = $base_currency_premium_amount;

        return $this;
    }

    /**
     * Gets maturity_date
     *
     * @return \DateTime
     */
    public function getMaturityDate()
    {
        return $this->container['maturity_date'];
    }

    /**
     * Sets maturity_date
     *
     * @param \DateTime $maturity_date The date when the premium deposit will mature, in ISO8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setMaturityDate($maturity_date)
    {
        $this->container['maturity_date'] = $maturity_date;

        return $this;
    }

    /**
     * Gets strike_price
     *
     * @return double
     */
    public function getStrikePrice()
    {
        return $this->container['strike_price'];
    }

    /**
     * Sets strike_price
     *
     * @param double $strike_price The Pre-agreed exchange rate
     *
     * @return $this
     */
    public function setStrikePrice($strike_price)
    {
        $this->container['strike_price'] = $strike_price;

        return $this;
    }

    /**
     * Gets customer_interest_rate
     *
     * @return double
     */
    public function getCustomerInterestRate()
    {
        return $this->container['customer_interest_rate'];
    }

    /**
     * Sets customer_interest_rate
     *
     * @param double $customer_interest_rate The customer interest rate applicable for the premium deposit
     *
     * @return $this
     */
    public function setCustomerInterestRate($customer_interest_rate)
    {
        $this->container['customer_interest_rate'] = $customer_interest_rate;

        return $this;
    }

    /**
     * Gets accrued_interest_rate
     *
     * @return double
     */
    public function getAccruedInterestRate()
    {
        return $this->container['accrued_interest_rate'];
    }

    /**
     * Sets accrued_interest_rate
     *
     * @param double $accrued_interest_rate The accrued interest rate applicable for the premium deposit
     *
     * @return $this
     */
    public function setAccruedInterestRate($accrued_interest_rate)
    {
        $this->container['accrued_interest_rate'] = $accrued_interest_rate;

        return $this;
    }

    /**
     * Gets benchmark_interest_rate
     *
     * @return double
     */
    public function getBenchmarkInterestRate()
    {
        return $this->container['benchmark_interest_rate'];
    }

    /**
     * Sets benchmark_interest_rate
     *
     * @param double $benchmark_interest_rate The benchmark interest rate applicable for the premium deposit
     *
     * @return $this
     */
    public function setBenchmarkInterestRate($benchmark_interest_rate)
    {
        $this->container['benchmark_interest_rate'] = $benchmark_interest_rate;

        return $this;
    }

    /**
     * Gets deal_status
     *
     * @return string
     */
    public function getDealStatus()
    {
        return $this->container['deal_status'];
    }

    /**
     * Sets deal_status
     *
     * @param string $deal_status The deal status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{dealStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
     *
     * @return $this
     */
    public function setDealStatus($deal_status)
    {
        $this->container['deal_status'] = $deal_status;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date The date when the premium deposit deal will expire, in ISO8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets tenor_term
     *
     * @return int
     */
    public function getTenorTerm()
    {
        return $this->container['tenor_term'];
    }

    /**
     * Sets tenor_term
     *
     * @param int $tenor_term The tenor term for deposit
     *
     * @return $this
     */
    public function setTenorTerm($tenor_term)
    {
        $this->container['tenor_term'] = $tenor_term;

        return $this;
    }

    /**
     * Gets tenor_period
     *
     * @return string
     */
    public function getTenorPeriod()
    {
        return $this->container['tenor_period'];
    }

    /**
     * Sets tenor_period
     *
     * @param string $tenor_period This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
     *
     * @return $this
     */
    public function setTenorPeriod($tenor_period)
    {
        $this->container['tenor_period'] = $tenor_period;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return \Swagger\Client\Model\Relationship
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param \Swagger\Client\Model\Relationship $relationship relationship
     *
     * @return $this
     */
    public function setRelationship($relationship)
    {
        $this->container['relationship'] = $relationship;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
