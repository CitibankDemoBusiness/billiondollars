<?php
/**
 * EmploymentDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmploymentDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmploymentDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmploymentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'employer_name' => 'string',
'job_title' => 'string',
'industry_code' => 'string',
'business_nature' => 'string',
'employment_duration_in_years' => 'int',
'employment_duration_in_months' => 'int',
'employment_status' => 'string',
'years_in_industry' => 'int',
'months_in_industry' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'employer_name' => null,
'job_title' => null,
'industry_code' => null,
'business_nature' => null,
'employment_duration_in_years' => 'int32',
'employment_duration_in_months' => 'int32',
'employment_status' => null,
'years_in_industry' => 'int32',
'months_in_industry' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employer_name' => 'employerName',
'job_title' => 'jobTitle',
'industry_code' => 'industryCode',
'business_nature' => 'businessNature',
'employment_duration_in_years' => 'employmentDurationInYears',
'employment_duration_in_months' => 'employmentDurationInMonths',
'employment_status' => 'employmentStatus',
'years_in_industry' => 'yearsInIndustry',
'months_in_industry' => 'monthsInIndustry'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employer_name' => 'setEmployerName',
'job_title' => 'setJobTitle',
'industry_code' => 'setIndustryCode',
'business_nature' => 'setBusinessNature',
'employment_duration_in_years' => 'setEmploymentDurationInYears',
'employment_duration_in_months' => 'setEmploymentDurationInMonths',
'employment_status' => 'setEmploymentStatus',
'years_in_industry' => 'setYearsInIndustry',
'months_in_industry' => 'setMonthsInIndustry'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employer_name' => 'getEmployerName',
'job_title' => 'getJobTitle',
'industry_code' => 'getIndustryCode',
'business_nature' => 'getBusinessNature',
'employment_duration_in_years' => 'getEmploymentDurationInYears',
'employment_duration_in_months' => 'getEmploymentDurationInMonths',
'employment_status' => 'getEmploymentStatus',
'years_in_industry' => 'getYearsInIndustry',
'months_in_industry' => 'getMonthsInIndustry'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employer_name'] = isset($data['employer_name']) ? $data['employer_name'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['industry_code'] = isset($data['industry_code']) ? $data['industry_code'] : null;
        $this->container['business_nature'] = isset($data['business_nature']) ? $data['business_nature'] : null;
        $this->container['employment_duration_in_years'] = isset($data['employment_duration_in_years']) ? $data['employment_duration_in_years'] : null;
        $this->container['employment_duration_in_months'] = isset($data['employment_duration_in_months']) ? $data['employment_duration_in_months'] : null;
        $this->container['employment_status'] = isset($data['employment_status']) ? $data['employment_status'] : null;
        $this->container['years_in_industry'] = isset($data['years_in_industry']) ? $data['years_in_industry'] : null;
        $this->container['months_in_industry'] = isset($data['months_in_industry']) ? $data['months_in_industry'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employer_name
     *
     * @return string
     */
    public function getEmployerName()
    {
        return $this->container['employer_name'];
    }

    /**
     * Sets employer_name
     *
     * @param string $employer_name Name of the employer.
     *
     * @return $this
     */
    public function setEmployerName($employer_name)
    {
        $this->container['employer_name'] = $employer_name;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title Job Title. This is a reference data field. Please use /v1/utilities/referenceData/{jobTitle} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets industry_code
     *
     * @return string
     */
    public function getIndustryCode()
    {
        return $this->container['industry_code'];
    }

    /**
     * Sets industry_code
     *
     * @param string $industry_code Code of the industry of employment. This is a reference data field. Please use /v1/utilities/referenceData/{industryCode} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setIndustryCode($industry_code)
    {
        $this->container['industry_code'] = $industry_code;

        return $this;
    }

    /**
     * Gets business_nature
     *
     * @return string
     */
    public function getBusinessNature()
    {
        return $this->container['business_nature'];
    }

    /**
     * Sets business_nature
     *
     * @param string $business_nature Business nature of the applicant This is a reference data field. Please use /v1/utilities/referenceData/{businessNature} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setBusinessNature($business_nature)
    {
        $this->container['business_nature'] = $business_nature;

        return $this;
    }

    /**
     * Gets employment_duration_in_years
     *
     * @return int
     */
    public function getEmploymentDurationInYears()
    {
        return $this->container['employment_duration_in_years'];
    }

    /**
     * Sets employment_duration_in_years
     *
     * @param int $employment_duration_in_years Employment duration in years
     *
     * @return $this
     */
    public function setEmploymentDurationInYears($employment_duration_in_years)
    {
        $this->container['employment_duration_in_years'] = $employment_duration_in_years;

        return $this;
    }

    /**
     * Gets employment_duration_in_months
     *
     * @return int
     */
    public function getEmploymentDurationInMonths()
    {
        return $this->container['employment_duration_in_months'];
    }

    /**
     * Sets employment_duration_in_months
     *
     * @param int $employment_duration_in_months Employment duration in months
     *
     * @return $this
     */
    public function setEmploymentDurationInMonths($employment_duration_in_months)
    {
        $this->container['employment_duration_in_months'] = $employment_duration_in_months;

        return $this;
    }

    /**
     * Gets employment_status
     *
     * @return string
     */
    public function getEmploymentStatus()
    {
        return $this->container['employment_status'];
    }

    /**
     * Sets employment_status
     *
     * @param string $employment_status Status of the employment.This is a reference data field. Please use /v1/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setEmploymentStatus($employment_status)
    {
        $this->container['employment_status'] = $employment_status;

        return $this;
    }

    /**
     * Gets years_in_industry
     *
     * @return int
     */
    public function getYearsInIndustry()
    {
        return $this->container['years_in_industry'];
    }

    /**
     * Sets years_in_industry
     *
     * @param int $years_in_industry Years spent in industry
     *
     * @return $this
     */
    public function setYearsInIndustry($years_in_industry)
    {
        $this->container['years_in_industry'] = $years_in_industry;

        return $this;
    }

    /**
     * Gets months_in_industry
     *
     * @return int
     */
    public function getMonthsInIndustry()
    {
        return $this->container['months_in_industry'];
    }

    /**
     * Sets months_in_industry
     *
     * @param int $months_in_industry Months spent in industry
     *
     * @return $this
     */
    public function setMonthsInIndustry($months_in_industry)
    {
        $this->container['months_in_industry'] = $months_in_industry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
