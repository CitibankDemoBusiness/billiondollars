<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'display_account_number' => 'string',
'transaction_date' => '\DateTime',
'transaction_description' => 'string',
'transaction_reference_id' => 'string',
'check_serial_number' => 'string',
'transaction_amount' => 'double',
'currency_code' => 'string',
'foreign_transaction_amount' => 'float',
'foreign_currency_code' => 'string',
'foreign_exchange_rate' => 'float',
'transaction_type' => 'string',
'transaction_status' => 'string',
'running_balance' => 'double',
'transaction_posting_date' => '\DateTime',
'transaction_code' => 'string',
'merchant_name' => 'string',
'eligible_for_equal_payment_plan' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'display_account_number' => null,
'transaction_date' => 'date',
'transaction_description' => null,
'transaction_reference_id' => null,
'check_serial_number' => null,
'transaction_amount' => 'double',
'currency_code' => null,
'foreign_transaction_amount' => null,
'foreign_currency_code' => null,
'foreign_exchange_rate' => null,
'transaction_type' => null,
'transaction_status' => null,
'running_balance' => 'double',
'transaction_posting_date' => 'date',
'transaction_code' => null,
'merchant_name' => null,
'eligible_for_equal_payment_plan' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_account_number' => 'displayAccountNumber',
'transaction_date' => 'transactionDate',
'transaction_description' => 'transactionDescription',
'transaction_reference_id' => 'transactionReferenceId',
'check_serial_number' => 'checkSerialNumber',
'transaction_amount' => 'transactionAmount',
'currency_code' => 'currencyCode',
'foreign_transaction_amount' => 'foreignTransactionAmount',
'foreign_currency_code' => 'foreignCurrencyCode',
'foreign_exchange_rate' => 'foreignExchangeRate',
'transaction_type' => 'transactionType',
'transaction_status' => 'transactionStatus',
'running_balance' => 'runningBalance',
'transaction_posting_date' => 'transactionPostingDate',
'transaction_code' => 'transactionCode',
'merchant_name' => 'merchantName',
'eligible_for_equal_payment_plan' => 'eligibleForEqualPaymentPlan'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_account_number' => 'setDisplayAccountNumber',
'transaction_date' => 'setTransactionDate',
'transaction_description' => 'setTransactionDescription',
'transaction_reference_id' => 'setTransactionReferenceId',
'check_serial_number' => 'setCheckSerialNumber',
'transaction_amount' => 'setTransactionAmount',
'currency_code' => 'setCurrencyCode',
'foreign_transaction_amount' => 'setForeignTransactionAmount',
'foreign_currency_code' => 'setForeignCurrencyCode',
'foreign_exchange_rate' => 'setForeignExchangeRate',
'transaction_type' => 'setTransactionType',
'transaction_status' => 'setTransactionStatus',
'running_balance' => 'setRunningBalance',
'transaction_posting_date' => 'setTransactionPostingDate',
'transaction_code' => 'setTransactionCode',
'merchant_name' => 'setMerchantName',
'eligible_for_equal_payment_plan' => 'setEligibleForEqualPaymentPlan'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_account_number' => 'getDisplayAccountNumber',
'transaction_date' => 'getTransactionDate',
'transaction_description' => 'getTransactionDescription',
'transaction_reference_id' => 'getTransactionReferenceId',
'check_serial_number' => 'getCheckSerialNumber',
'transaction_amount' => 'getTransactionAmount',
'currency_code' => 'getCurrencyCode',
'foreign_transaction_amount' => 'getForeignTransactionAmount',
'foreign_currency_code' => 'getForeignCurrencyCode',
'foreign_exchange_rate' => 'getForeignExchangeRate',
'transaction_type' => 'getTransactionType',
'transaction_status' => 'getTransactionStatus',
'running_balance' => 'getRunningBalance',
'transaction_posting_date' => 'getTransactionPostingDate',
'transaction_code' => 'getTransactionCode',
'merchant_name' => 'getMerchantName',
'eligible_for_equal_payment_plan' => 'getEligibleForEqualPaymentPlan'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_account_number'] = isset($data['display_account_number']) ? $data['display_account_number'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['transaction_description'] = isset($data['transaction_description']) ? $data['transaction_description'] : null;
        $this->container['transaction_reference_id'] = isset($data['transaction_reference_id']) ? $data['transaction_reference_id'] : null;
        $this->container['check_serial_number'] = isset($data['check_serial_number']) ? $data['check_serial_number'] : null;
        $this->container['transaction_amount'] = isset($data['transaction_amount']) ? $data['transaction_amount'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['foreign_transaction_amount'] = isset($data['foreign_transaction_amount']) ? $data['foreign_transaction_amount'] : null;
        $this->container['foreign_currency_code'] = isset($data['foreign_currency_code']) ? $data['foreign_currency_code'] : null;
        $this->container['foreign_exchange_rate'] = isset($data['foreign_exchange_rate']) ? $data['foreign_exchange_rate'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['transaction_status'] = isset($data['transaction_status']) ? $data['transaction_status'] : null;
        $this->container['running_balance'] = isset($data['running_balance']) ? $data['running_balance'] : null;
        $this->container['transaction_posting_date'] = isset($data['transaction_posting_date']) ? $data['transaction_posting_date'] : null;
        $this->container['transaction_code'] = isset($data['transaction_code']) ? $data['transaction_code'] : null;
        $this->container['merchant_name'] = isset($data['merchant_name']) ? $data['merchant_name'] : null;
        $this->container['eligible_for_equal_payment_plan'] = isset($data['eligible_for_equal_payment_plan']) ? $data['eligible_for_equal_payment_plan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_account_number
     *
     * @return string
     */
    public function getDisplayAccountNumber()
    {
        return $this->container['display_account_number'];
    }

    /**
     * Sets display_account_number
     *
     * @param string $display_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplayAccountNumber($display_account_number)
    {
        $this->container['display_account_number'] = $display_account_number;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param \DateTime $transaction_date Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,
     *
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets transaction_description
     *
     * @return string
     */
    public function getTransactionDescription()
    {
        return $this->container['transaction_description'];
    }

    /**
     * Sets transaction_description
     *
     * @param string $transaction_description Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
     *
     * @return $this
     */
    public function setTransactionDescription($transaction_description)
    {
        $this->container['transaction_description'] = $transaction_description;

        return $this;
    }

    /**
     * Gets transaction_reference_id
     *
     * @return string
     */
    public function getTransactionReferenceId()
    {
        return $this->container['transaction_reference_id'];
    }

    /**
     * Sets transaction_reference_id
     *
     * @param string $transaction_reference_id Reference Id to uniquely identify the transaction
     *
     * @return $this
     */
    public function setTransactionReferenceId($transaction_reference_id)
    {
        $this->container['transaction_reference_id'] = $transaction_reference_id;

        return $this;
    }

    /**
     * Gets check_serial_number
     *
     * @return string
     */
    public function getCheckSerialNumber()
    {
        return $this->container['check_serial_number'];
    }

    /**
     * Sets check_serial_number
     *
     * @param string $check_serial_number The check serial number. Applicable for checking accounts only
     *
     * @return $this
     */
    public function setCheckSerialNumber($check_serial_number)
    {
        $this->container['check_serial_number'] = $check_serial_number;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return double
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param double $transaction_amount Transaction amount in local currency.
     *
     * @return $this
     */
    public function setTransactionAmount($transaction_amount)
    {
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code of the transaction in ISO 4217 format
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets foreign_transaction_amount
     *
     * @return float
     */
    public function getForeignTransactionAmount()
    {
        return $this->container['foreign_transaction_amount'];
    }

    /**
     * Sets foreign_transaction_amount
     *
     * @param float $foreign_transaction_amount The transaction amount in the foreign currency
     *
     * @return $this
     */
    public function setForeignTransactionAmount($foreign_transaction_amount)
    {
        $this->container['foreign_transaction_amount'] = $foreign_transaction_amount;

        return $this;
    }

    /**
     * Gets foreign_currency_code
     *
     * @return string
     */
    public function getForeignCurrencyCode()
    {
        return $this->container['foreign_currency_code'];
    }

    /**
     * Sets foreign_currency_code
     *
     * @param string $foreign_currency_code The foreign currency code of the transaction in ISO 4217 format
     *
     * @return $this
     */
    public function setForeignCurrencyCode($foreign_currency_code)
    {
        $this->container['foreign_currency_code'] = $foreign_currency_code;

        return $this;
    }

    /**
     * Gets foreign_exchange_rate
     *
     * @return float
     */
    public function getForeignExchangeRate()
    {
        return $this->container['foreign_exchange_rate'];
    }

    /**
     * Sets foreign_exchange_rate
     *
     * @param float $foreign_exchange_rate The exchange rate at the time the foreign transaction was done
     *
     * @return $this
     */
    public function setForeignExchangeRate($foreign_exchange_rate)
    {
        $this->container['foreign_exchange_rate'] = $foreign_exchange_rate;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type The type of transaction. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionType} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string $transaction_status The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values
     *
     * @return $this
     */
    public function setTransactionStatus($transaction_status)
    {
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets running_balance
     *
     * @return double
     */
    public function getRunningBalance()
    {
        return $this->container['running_balance'];
    }

    /**
     * Sets running_balance
     *
     * @param double $running_balance The amount available to transact immediately
     *
     * @return $this
     */
    public function setRunningBalance($running_balance)
    {
        $this->container['running_balance'] = $running_balance;

        return $this;
    }

    /**
     * Gets transaction_posting_date
     *
     * @return \DateTime
     */
    public function getTransactionPostingDate()
    {
        return $this->container['transaction_posting_date'];
    }

    /**
     * Sets transaction_posting_date
     *
     * @param \DateTime $transaction_posting_date Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting
     *
     * @return $this
     */
    public function setTransactionPostingDate($transaction_posting_date)
    {
        $this->container['transaction_posting_date'] = $transaction_posting_date;

        return $this;
    }

    /**
     * Gets transaction_code
     *
     * @return string
     */
    public function getTransactionCode()
    {
        return $this->container['transaction_code'];
    }

    /**
     * Sets transaction_code
     *
     * @param string $transaction_code The transaction code
     *
     * @return $this
     */
    public function setTransactionCode($transaction_code)
    {
        $this->container['transaction_code'] = $transaction_code;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string $merchant_name The merchant name with which this transaction was made with
     *
     * @return $this
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets eligible_for_equal_payment_plan
     *
     * @return string
     */
    public function getEligibleForEqualPaymentPlan()
    {
        return $this->container['eligible_for_equal_payment_plan'];
    }

    /**
     * Sets eligible_for_equal_payment_plan
     *
     * @param string $eligible_for_equal_payment_plan The EPP allowed indicator. This is applicable for credit cards transactions only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{eligibleForEqualPaymentPlan} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values
     *
     * @return $this
     */
    public function setEligibleForEqualPaymentPlan($eligible_for_equal_payment_plan)
    {
        $this->container['eligible_for_equal_payment_plan'] = $eligible_for_equal_payment_plan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
