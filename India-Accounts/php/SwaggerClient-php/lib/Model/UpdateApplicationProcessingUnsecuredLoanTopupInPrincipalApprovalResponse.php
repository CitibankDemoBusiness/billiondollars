<?php
/**
 * UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'application_stage' => 'string',
'ipa_expiry_date' => '\DateTime',
'requested_loan_topup_decision' => '\Swagger\Client\Model\RequestedLoanTopupDecision'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'application_stage' => null,
'ipa_expiry_date' => 'date',
'requested_loan_topup_decision' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'application_stage' => 'applicationStage',
'ipa_expiry_date' => 'ipaExpiryDate',
'requested_loan_topup_decision' => 'requestedLoanTopupDecision'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'application_stage' => 'setApplicationStage',
'ipa_expiry_date' => 'setIpaExpiryDate',
'requested_loan_topup_decision' => 'setRequestedLoanTopupDecision'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'application_stage' => 'getApplicationStage',
'ipa_expiry_date' => 'getIpaExpiryDate',
'requested_loan_topup_decision' => 'getRequestedLoanTopupDecision'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['application_stage'] = isset($data['application_stage']) ? $data['application_stage'] : null;
        $this->container['ipa_expiry_date'] = isset($data['ipa_expiry_date']) ? $data['ipa_expiry_date'] : null;
        $this->container['requested_loan_topup_decision'] = isset($data['requested_loan_topup_decision']) ? $data['requested_loan_topup_decision'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_stage
     *
     * @return string
     */
    public function getApplicationStage()
    {
        return $this->container['application_stage'];
    }

    /**
     * Sets application_stage
     *
     * @param string $application_stage Current stage of an application.This is a reference data field. Please use /v1/utilities/referenceData/{applicationStage} resource to get possible value of this field with description.
     *
     * @return $this
     */
    public function setApplicationStage($application_stage)
    {
        $this->container['application_stage'] = $application_stage;

        return $this;
    }

    /**
     * Gets ipa_expiry_date
     *
     * @return \DateTime
     */
    public function getIpaExpiryDate()
    {
        return $this->container['ipa_expiry_date'];
    }

    /**
     * Sets ipa_expiry_date
     *
     * @param \DateTime $ipa_expiry_date In principle approval expiration date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setIpaExpiryDate($ipa_expiry_date)
    {
        $this->container['ipa_expiry_date'] = $ipa_expiry_date;

        return $this;
    }

    /**
     * Gets requested_loan_topup_decision
     *
     * @return \Swagger\Client\Model\RequestedLoanTopupDecision
     */
    public function getRequestedLoanTopupDecision()
    {
        return $this->container['requested_loan_topup_decision'];
    }

    /**
     * Sets requested_loan_topup_decision
     *
     * @param \Swagger\Client\Model\RequestedLoanTopupDecision $requested_loan_topup_decision requested_loan_topup_decision
     *
     * @return $this
     */
    public function setRequestedLoanTopupDecision($requested_loan_topup_decision)
    {
        $this->container['requested_loan_topup_decision'] = $requested_loan_topup_decision;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
