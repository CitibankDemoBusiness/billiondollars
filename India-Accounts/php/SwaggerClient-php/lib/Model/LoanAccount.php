<?php
/**
 * LoanAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LoanAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoanAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoanAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_name' => 'string',
'product_code' => 'string',
'display_account_number' => 'string',
'original_principal_amount' => 'double',
'current_principal_amount' => 'double',
'outstanding_balance' => 'double',
'currency_code' => 'string',
'maturity_date' => '\DateTime',
'opening_date' => '\DateTime',
'last_payment_date' => '\DateTime',
'last_payment_amount' => 'double',
'interest_amount' => 'double',
'interest_accumulation_period' => 'string',
'next_payment_amount' => 'double',
'next_payment_date' => '\DateTime',
'payment_frequency' => 'string',
'interest_type' => 'string',
'interest_rate' => 'double',
'effective_interest_rate' => 'double',
'installment_amount' => 'double',
'remaining_term_number' => 'float',
'past_due_amount' => 'double',
'paid_principal_amount' => 'double',
'late_charge_amount' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_name' => null,
'product_code' => null,
'display_account_number' => null,
'original_principal_amount' => 'double',
'current_principal_amount' => 'double',
'outstanding_balance' => 'double',
'currency_code' => null,
'maturity_date' => 'date',
'opening_date' => 'date',
'last_payment_date' => 'date',
'last_payment_amount' => 'double',
'interest_amount' => 'double',
'interest_accumulation_period' => null,
'next_payment_amount' => 'double',
'next_payment_date' => 'date',
'payment_frequency' => null,
'interest_type' => null,
'interest_rate' => 'double',
'effective_interest_rate' => 'double',
'installment_amount' => 'double',
'remaining_term_number' => null,
'past_due_amount' => 'double',
'paid_principal_amount' => 'double',
'late_charge_amount' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_name' => 'productName',
'product_code' => 'productCode',
'display_account_number' => 'displayAccountNumber',
'original_principal_amount' => 'originalPrincipalAmount',
'current_principal_amount' => 'currentPrincipalAmount',
'outstanding_balance' => 'outstandingBalance',
'currency_code' => 'currencyCode',
'maturity_date' => 'maturityDate',
'opening_date' => 'openingDate',
'last_payment_date' => 'lastPaymentDate',
'last_payment_amount' => 'lastPaymentAmount',
'interest_amount' => 'interestAmount',
'interest_accumulation_period' => 'interestAccumulationPeriod',
'next_payment_amount' => 'nextPaymentAmount',
'next_payment_date' => 'nextPaymentDate',
'payment_frequency' => 'paymentFrequency',
'interest_type' => 'interestType',
'interest_rate' => 'interestRate',
'effective_interest_rate' => 'effectiveInterestRate',
'installment_amount' => 'installmentAmount',
'remaining_term_number' => 'remainingTermNumber',
'past_due_amount' => 'pastDueAmount',
'paid_principal_amount' => 'paidPrincipalAmount',
'late_charge_amount' => 'lateChargeAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_name' => 'setProductName',
'product_code' => 'setProductCode',
'display_account_number' => 'setDisplayAccountNumber',
'original_principal_amount' => 'setOriginalPrincipalAmount',
'current_principal_amount' => 'setCurrentPrincipalAmount',
'outstanding_balance' => 'setOutstandingBalance',
'currency_code' => 'setCurrencyCode',
'maturity_date' => 'setMaturityDate',
'opening_date' => 'setOpeningDate',
'last_payment_date' => 'setLastPaymentDate',
'last_payment_amount' => 'setLastPaymentAmount',
'interest_amount' => 'setInterestAmount',
'interest_accumulation_period' => 'setInterestAccumulationPeriod',
'next_payment_amount' => 'setNextPaymentAmount',
'next_payment_date' => 'setNextPaymentDate',
'payment_frequency' => 'setPaymentFrequency',
'interest_type' => 'setInterestType',
'interest_rate' => 'setInterestRate',
'effective_interest_rate' => 'setEffectiveInterestRate',
'installment_amount' => 'setInstallmentAmount',
'remaining_term_number' => 'setRemainingTermNumber',
'past_due_amount' => 'setPastDueAmount',
'paid_principal_amount' => 'setPaidPrincipalAmount',
'late_charge_amount' => 'setLateChargeAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_name' => 'getProductName',
'product_code' => 'getProductCode',
'display_account_number' => 'getDisplayAccountNumber',
'original_principal_amount' => 'getOriginalPrincipalAmount',
'current_principal_amount' => 'getCurrentPrincipalAmount',
'outstanding_balance' => 'getOutstandingBalance',
'currency_code' => 'getCurrencyCode',
'maturity_date' => 'getMaturityDate',
'opening_date' => 'getOpeningDate',
'last_payment_date' => 'getLastPaymentDate',
'last_payment_amount' => 'getLastPaymentAmount',
'interest_amount' => 'getInterestAmount',
'interest_accumulation_period' => 'getInterestAccumulationPeriod',
'next_payment_amount' => 'getNextPaymentAmount',
'next_payment_date' => 'getNextPaymentDate',
'payment_frequency' => 'getPaymentFrequency',
'interest_type' => 'getInterestType',
'interest_rate' => 'getInterestRate',
'effective_interest_rate' => 'getEffectiveInterestRate',
'installment_amount' => 'getInstallmentAmount',
'remaining_term_number' => 'getRemainingTermNumber',
'past_due_amount' => 'getPastDueAmount',
'paid_principal_amount' => 'getPaidPrincipalAmount',
'late_charge_amount' => 'getLateChargeAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['display_account_number'] = isset($data['display_account_number']) ? $data['display_account_number'] : null;
        $this->container['original_principal_amount'] = isset($data['original_principal_amount']) ? $data['original_principal_amount'] : null;
        $this->container['current_principal_amount'] = isset($data['current_principal_amount']) ? $data['current_principal_amount'] : null;
        $this->container['outstanding_balance'] = isset($data['outstanding_balance']) ? $data['outstanding_balance'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['maturity_date'] = isset($data['maturity_date']) ? $data['maturity_date'] : null;
        $this->container['opening_date'] = isset($data['opening_date']) ? $data['opening_date'] : null;
        $this->container['last_payment_date'] = isset($data['last_payment_date']) ? $data['last_payment_date'] : null;
        $this->container['last_payment_amount'] = isset($data['last_payment_amount']) ? $data['last_payment_amount'] : null;
        $this->container['interest_amount'] = isset($data['interest_amount']) ? $data['interest_amount'] : null;
        $this->container['interest_accumulation_period'] = isset($data['interest_accumulation_period']) ? $data['interest_accumulation_period'] : null;
        $this->container['next_payment_amount'] = isset($data['next_payment_amount']) ? $data['next_payment_amount'] : null;
        $this->container['next_payment_date'] = isset($data['next_payment_date']) ? $data['next_payment_date'] : null;
        $this->container['payment_frequency'] = isset($data['payment_frequency']) ? $data['payment_frequency'] : null;
        $this->container['interest_type'] = isset($data['interest_type']) ? $data['interest_type'] : null;
        $this->container['interest_rate'] = isset($data['interest_rate']) ? $data['interest_rate'] : null;
        $this->container['effective_interest_rate'] = isset($data['effective_interest_rate']) ? $data['effective_interest_rate'] : null;
        $this->container['installment_amount'] = isset($data['installment_amount']) ? $data['installment_amount'] : null;
        $this->container['remaining_term_number'] = isset($data['remaining_term_number']) ? $data['remaining_term_number'] : null;
        $this->container['past_due_amount'] = isset($data['past_due_amount']) ? $data['past_due_amount'] : null;
        $this->container['paid_principal_amount'] = isset($data['paid_principal_amount']) ? $data['paid_principal_amount'] : null;
        $this->container['late_charge_amount'] = isset($data['late_charge_amount']) ? $data['late_charge_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_account_number'] === null) {
            $invalidProperties[] = "'display_account_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name The name of the product
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code A unique code that identifies the product
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets display_account_number
     *
     * @return string
     */
    public function getDisplayAccountNumber()
    {
        return $this->container['display_account_number'];
    }

    /**
     * Sets display_account_number
     *
     * @param string $display_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplayAccountNumber($display_account_number)
    {
        $this->container['display_account_number'] = $display_account_number;

        return $this;
    }

    /**
     * Gets original_principal_amount
     *
     * @return double
     */
    public function getOriginalPrincipalAmount()
    {
        return $this->container['original_principal_amount'];
    }

    /**
     * Sets original_principal_amount
     *
     * @param double $original_principal_amount The amount borrowed
     *
     * @return $this
     */
    public function setOriginalPrincipalAmount($original_principal_amount)
    {
        $this->container['original_principal_amount'] = $original_principal_amount;

        return $this;
    }

    /**
     * Gets current_principal_amount
     *
     * @return double
     */
    public function getCurrentPrincipalAmount()
    {
        return $this->container['current_principal_amount'];
    }

    /**
     * Sets current_principal_amount
     *
     * @param double $current_principal_amount The remaining principal amount
     *
     * @return $this
     */
    public function setCurrentPrincipalAmount($current_principal_amount)
    {
        $this->container['current_principal_amount'] = $current_principal_amount;

        return $this;
    }

    /**
     * Gets outstanding_balance
     *
     * @return double
     */
    public function getOutstandingBalance()
    {
        return $this->container['outstanding_balance'];
    }

    /**
     * Sets outstanding_balance
     *
     * @param double $outstanding_balance The amount of money owed.
     *
     * @return $this
     */
    public function setOutstandingBalance($outstanding_balance)
    {
        $this->container['outstanding_balance'] = $outstanding_balance;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code in ISO 4217 format
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets maturity_date
     *
     * @return \DateTime
     */
    public function getMaturityDate()
    {
        return $this->container['maturity_date'];
    }

    /**
     * Sets maturity_date
     *
     * @param \DateTime $maturity_date Loan maturity date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setMaturityDate($maturity_date)
    {
        $this->container['maturity_date'] = $maturity_date;

        return $this;
    }

    /**
     * Gets opening_date
     *
     * @return \DateTime
     */
    public function getOpeningDate()
    {
        return $this->container['opening_date'];
    }

    /**
     * Sets opening_date
     *
     * @param \DateTime $opening_date Loan account opening date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setOpeningDate($opening_date)
    {
        $this->container['opening_date'] = $opening_date;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return \DateTime
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param \DateTime $last_payment_date The date of the last payment in ISO 8601 format YYYY-MM-DD
     *
     * @return $this
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return double
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param double $last_payment_amount The amount of the last payment made
     *
     * @return $this
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets interest_amount
     *
     * @return double
     */
    public function getInterestAmount()
    {
        return $this->container['interest_amount'];
    }

    /**
     * Sets interest_amount
     *
     * @param double $interest_amount Interest amount paid for the mentioned period
     *
     * @return $this
     */
    public function setInterestAmount($interest_amount)
    {
        $this->container['interest_amount'] = $interest_amount;

        return $this;
    }

    /**
     * Gets interest_accumulation_period
     *
     * @return string
     */
    public function getInterestAccumulationPeriod()
    {
        return $this->container['interest_accumulation_period'];
    }

    /**
     * Sets interest_accumulation_period
     *
     * @param string $interest_accumulation_period The period of interest accumulation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestAccumulationPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
     *
     * @return $this
     */
    public function setInterestAccumulationPeriod($interest_accumulation_period)
    {
        $this->container['interest_accumulation_period'] = $interest_accumulation_period;

        return $this;
    }

    /**
     * Gets next_payment_amount
     *
     * @return double
     */
    public function getNextPaymentAmount()
    {
        return $this->container['next_payment_amount'];
    }

    /**
     * Sets next_payment_amount
     *
     * @param double $next_payment_amount The next payment amount due
     *
     * @return $this
     */
    public function setNextPaymentAmount($next_payment_amount)
    {
        $this->container['next_payment_amount'] = $next_payment_amount;

        return $this;
    }

    /**
     * Gets next_payment_date
     *
     * @return \DateTime
     */
    public function getNextPaymentDate()
    {
        return $this->container['next_payment_date'];
    }

    /**
     * Sets next_payment_date
     *
     * @param \DateTime $next_payment_date The date of the next payment in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setNextPaymentDate($next_payment_date)
    {
        $this->container['next_payment_date'] = $next_payment_date;

        return $this;
    }

    /**
     * Gets payment_frequency
     *
     * @return string
     */
    public function getPaymentFrequency()
    {
        return $this->container['payment_frequency'];
    }

    /**
     * Sets payment_frequency
     *
     * @param string $payment_frequency The payment frequency
     *
     * @return $this
     */
    public function setPaymentFrequency($payment_frequency)
    {
        $this->container['payment_frequency'] = $payment_frequency;

        return $this;
    }

    /**
     * Gets interest_type
     *
     * @return string
     */
    public function getInterestType()
    {
        return $this->container['interest_type'];
    }

    /**
     * Sets interest_type
     *
     * @param string $interest_type The interest type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
     *
     * @return $this
     */
    public function setInterestType($interest_type)
    {
        $this->container['interest_type'] = $interest_type;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return double
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param double $interest_rate Loan interest rate.
     *
     * @return $this
     */
    public function setInterestRate($interest_rate)
    {
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets effective_interest_rate
     *
     * @return double
     */
    public function getEffectiveInterestRate()
    {
        return $this->container['effective_interest_rate'];
    }

    /**
     * Sets effective_interest_rate
     *
     * @param double $effective_interest_rate Loan effective interest rate
     *
     * @return $this
     */
    public function setEffectiveInterestRate($effective_interest_rate)
    {
        $this->container['effective_interest_rate'] = $effective_interest_rate;

        return $this;
    }

    /**
     * Gets installment_amount
     *
     * @return double
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param double $installment_amount Installment loan payment amount
     *
     * @return $this
     */
    public function setInstallmentAmount($installment_amount)
    {
        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }

    /**
     * Gets remaining_term_number
     *
     * @return float
     */
    public function getRemainingTermNumber()
    {
        return $this->container['remaining_term_number'];
    }

    /**
     * Sets remaining_term_number
     *
     * @param float $remaining_term_number Term remaining.
     *
     * @return $this
     */
    public function setRemainingTermNumber($remaining_term_number)
    {
        $this->container['remaining_term_number'] = $remaining_term_number;

        return $this;
    }

    /**
     * Gets past_due_amount
     *
     * @return double
     */
    public function getPastDueAmount()
    {
        return $this->container['past_due_amount'];
    }

    /**
     * Sets past_due_amount
     *
     * @param double $past_due_amount Past due is a loan payment that has not been made as of its due date
     *
     * @return $this
     */
    public function setPastDueAmount($past_due_amount)
    {
        $this->container['past_due_amount'] = $past_due_amount;

        return $this;
    }

    /**
     * Gets paid_principal_amount
     *
     * @return double
     */
    public function getPaidPrincipalAmount()
    {
        return $this->container['paid_principal_amount'];
    }

    /**
     * Sets paid_principal_amount
     *
     * @param double $paid_principal_amount The amount of principal returned to the bank
     *
     * @return $this
     */
    public function setPaidPrincipalAmount($paid_principal_amount)
    {
        $this->container['paid_principal_amount'] = $paid_principal_amount;

        return $this;
    }

    /**
     * Gets late_charge_amount
     *
     * @return double
     */
    public function getLateChargeAmount()
    {
        return $this->container['late_charge_amount'];
    }

    /**
     * Sets late_charge_amount
     *
     * @param double $late_charge_amount Late charge amount applicable when amount is not paid by the due date
     *
     * @return $this
     */
    public function setLateChargeAmount($late_charge_amount)
    {
        $this->container['late_charge_amount'] = $late_charge_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
