<?php
/**
 * CallDepositAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CallDepositAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallDepositAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallDepositAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_name' => 'string',
'product_code' => 'string',
'display_account_number' => 'string',
'currency_code' => 'string',
'available_balance' => 'double',
'current_balance' => 'double',
'interest_rate' => 'double',
'opening_date' => '\DateTime',
'base_currency_maturity_amount' => 'double',
'last_interest_payment_amount' => 'double',
'last_interest_payment_date' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_name' => null,
'product_code' => null,
'display_account_number' => null,
'currency_code' => null,
'available_balance' => 'double',
'current_balance' => 'double',
'interest_rate' => 'double',
'opening_date' => 'date',
'base_currency_maturity_amount' => 'double',
'last_interest_payment_amount' => 'double',
'last_interest_payment_date' => 'date'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_name' => 'productName',
'product_code' => 'productCode',
'display_account_number' => 'displayAccountNumber',
'currency_code' => 'currencyCode',
'available_balance' => 'availableBalance',
'current_balance' => 'currentBalance',
'interest_rate' => 'interestRate',
'opening_date' => 'openingDate',
'base_currency_maturity_amount' => 'baseCurrencyMaturityAmount',
'last_interest_payment_amount' => 'lastInterestPaymentAmount',
'last_interest_payment_date' => 'lastInterestPaymentDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_name' => 'setProductName',
'product_code' => 'setProductCode',
'display_account_number' => 'setDisplayAccountNumber',
'currency_code' => 'setCurrencyCode',
'available_balance' => 'setAvailableBalance',
'current_balance' => 'setCurrentBalance',
'interest_rate' => 'setInterestRate',
'opening_date' => 'setOpeningDate',
'base_currency_maturity_amount' => 'setBaseCurrencyMaturityAmount',
'last_interest_payment_amount' => 'setLastInterestPaymentAmount',
'last_interest_payment_date' => 'setLastInterestPaymentDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_name' => 'getProductName',
'product_code' => 'getProductCode',
'display_account_number' => 'getDisplayAccountNumber',
'currency_code' => 'getCurrencyCode',
'available_balance' => 'getAvailableBalance',
'current_balance' => 'getCurrentBalance',
'interest_rate' => 'getInterestRate',
'opening_date' => 'getOpeningDate',
'base_currency_maturity_amount' => 'getBaseCurrencyMaturityAmount',
'last_interest_payment_amount' => 'getLastInterestPaymentAmount',
'last_interest_payment_date' => 'getLastInterestPaymentDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['display_account_number'] = isset($data['display_account_number']) ? $data['display_account_number'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['available_balance'] = isset($data['available_balance']) ? $data['available_balance'] : null;
        $this->container['current_balance'] = isset($data['current_balance']) ? $data['current_balance'] : null;
        $this->container['interest_rate'] = isset($data['interest_rate']) ? $data['interest_rate'] : null;
        $this->container['opening_date'] = isset($data['opening_date']) ? $data['opening_date'] : null;
        $this->container['base_currency_maturity_amount'] = isset($data['base_currency_maturity_amount']) ? $data['base_currency_maturity_amount'] : null;
        $this->container['last_interest_payment_amount'] = isset($data['last_interest_payment_amount']) ? $data['last_interest_payment_amount'] : null;
        $this->container['last_interest_payment_date'] = isset($data['last_interest_payment_date']) ? $data['last_interest_payment_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_account_number'] === null) {
            $invalidProperties[] = "'display_account_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name The name of the product
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code A unique code that identifies the product
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets display_account_number
     *
     * @return string
     */
    public function getDisplayAccountNumber()
    {
        return $this->container['display_account_number'];
    }

    /**
     * Sets display_account_number
     *
     * @param string $display_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplayAccountNumber($display_account_number)
    {
        $this->container['display_account_number'] = $display_account_number;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code of the account in ISO 4217 format
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return double
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param double $available_balance The amount available  to withdraw or transfer immediately
     *
     * @return $this
     */
    public function setAvailableBalance($available_balance)
    {
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return double
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param double $current_balance The current balance including any pending or in progress deposits and withdrawals
     *
     * @return $this
     */
    public function setCurrentBalance($current_balance)
    {
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return double
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param double $interest_rate The rate of interest applicable for the call deposit account
     *
     * @return $this
     */
    public function setInterestRate($interest_rate)
    {
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets opening_date
     *
     * @return \DateTime
     */
    public function getOpeningDate()
    {
        return $this->container['opening_date'];
    }

    /**
     * Sets opening_date
     *
     * @param \DateTime $opening_date Call deposit account opening date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setOpeningDate($opening_date)
    {
        $this->container['opening_date'] = $opening_date;

        return $this;
    }

    /**
     * Gets base_currency_maturity_amount
     *
     * @return double
     */
    public function getBaseCurrencyMaturityAmount()
    {
        return $this->container['base_currency_maturity_amount'];
    }

    /**
     * Sets base_currency_maturity_amount
     *
     * @param double $base_currency_maturity_amount Maturity amount on the call deposit account.
     *
     * @return $this
     */
    public function setBaseCurrencyMaturityAmount($base_currency_maturity_amount)
    {
        $this->container['base_currency_maturity_amount'] = $base_currency_maturity_amount;

        return $this;
    }

    /**
     * Gets last_interest_payment_amount
     *
     * @return double
     */
    public function getLastInterestPaymentAmount()
    {
        return $this->container['last_interest_payment_amount'];
    }

    /**
     * Sets last_interest_payment_amount
     *
     * @param double $last_interest_payment_amount Last interest payment amount on the call deposit account.
     *
     * @return $this
     */
    public function setLastInterestPaymentAmount($last_interest_payment_amount)
    {
        $this->container['last_interest_payment_amount'] = $last_interest_payment_amount;

        return $this;
    }

    /**
     * Gets last_interest_payment_date
     *
     * @return \DateTime
     */
    public function getLastInterestPaymentDate()
    {
        return $this->container['last_interest_payment_date'];
    }

    /**
     * Sets last_interest_payment_date
     *
     * @param \DateTime $last_interest_payment_date Last interest payment date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setLastInterestPaymentDate($last_interest_payment_date)
    {
        $this->container['last_interest_payment_date'] = $last_interest_payment_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
