<?php
/**
 * TransactionDetailedViewResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactionDetailedViewResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionDetailedViewResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionDetailedViewResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'display_source_account_number' => 'string',
'payment_type' => 'string',
'transaction_description' => 'string',
'transaction_amount' => 'double',
'transaction_currency_code' => 'string',
'transaction_date' => '\DateTime',
'foreign_transaction_amount' => 'float',
'foreign_currency_code' => 'string',
'foreign_exchange_rate' => 'float',
'transaction_status' => 'string',
'transaction_posting_date' => '\DateTime',
'customer_name' => '\Swagger\Client\Model\CustomerName',
'customer_address' => '\Swagger\Client\Model\CustomerAddress',
'beneficiary_bank_details' => '\Swagger\Client\Model\BeneficiaryBankDetails',
'customer_merchant_reference_details' => '\Swagger\Client\Model\CustomerMerchantReferenceDetails[]',
'remarks' => 'string',
'payment_priority_code' => 'string',
'merchant_code' => 'string',
'merchant_name' => 'string',
'transaction_reversal_description' => 'string',
'original_transaction_details' => '\Swagger\Client\Model\OriginalTransactionDetails',
'end_to_end_identification' => 'string',
'creditor_details' => '\Swagger\Client\Model\CreditorDetails',
'debtor_details' => '\Swagger\Client\Model\DebtorDetails',
'source_bank_name' => 'string',
'source_bank_code' => 'string',
'clearing_time_stamp' => 'string',
'settlement_time_stamp' => 'string',
'central_bank_transaction_reference_id' => 'string',
'original_creditor_details' => '\Swagger\Client\Model\OriginalCreditorDetails',
'original_credit_account_details' => '\Swagger\Client\Model\OriginalCreditAccountDetails',
'original_debtor_name' => 'string',
'original_debit_account_details' => '\Swagger\Client\Model\OriginalDebitAccountDetails',
'transaction_debit_fee_amount' => 'double',
'bank_member_id' => 'string',
'beneficiary_legal_name' => 'string',
'beneficiary_address' => '\Swagger\Client\Model\BeneficiaryAddress[]',
'beneficiary_tax_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'display_source_account_number' => null,
'payment_type' => null,
'transaction_description' => null,
'transaction_amount' => 'double',
'transaction_currency_code' => null,
'transaction_date' => 'date',
'foreign_transaction_amount' => null,
'foreign_currency_code' => null,
'foreign_exchange_rate' => null,
'transaction_status' => null,
'transaction_posting_date' => 'date',
'customer_name' => null,
'customer_address' => null,
'beneficiary_bank_details' => null,
'customer_merchant_reference_details' => null,
'remarks' => null,
'payment_priority_code' => null,
'merchant_code' => null,
'merchant_name' => null,
'transaction_reversal_description' => null,
'original_transaction_details' => null,
'end_to_end_identification' => null,
'creditor_details' => null,
'debtor_details' => null,
'source_bank_name' => null,
'source_bank_code' => null,
'clearing_time_stamp' => 'dateTime',
'settlement_time_stamp' => 'dateTime',
'central_bank_transaction_reference_id' => null,
'original_creditor_details' => null,
'original_credit_account_details' => null,
'original_debtor_name' => null,
'original_debit_account_details' => null,
'transaction_debit_fee_amount' => 'double',
'bank_member_id' => null,
'beneficiary_legal_name' => null,
'beneficiary_address' => null,
'beneficiary_tax_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_source_account_number' => 'displaySourceAccountNumber',
'payment_type' => 'paymentType',
'transaction_description' => 'transactionDescription',
'transaction_amount' => 'transactionAmount',
'transaction_currency_code' => 'transactionCurrencyCode',
'transaction_date' => 'transactionDate',
'foreign_transaction_amount' => 'foreignTransactionAmount',
'foreign_currency_code' => 'foreignCurrencyCode',
'foreign_exchange_rate' => 'foreignExchangeRate',
'transaction_status' => 'transactionStatus',
'transaction_posting_date' => 'transactionPostingDate',
'customer_name' => 'customerName',
'customer_address' => 'customerAddress',
'beneficiary_bank_details' => 'beneficiaryBankDetails',
'customer_merchant_reference_details' => 'customerMerchantReferenceDetails',
'remarks' => 'remarks',
'payment_priority_code' => 'paymentPriorityCode',
'merchant_code' => 'merchantCode',
'merchant_name' => 'merchantName',
'transaction_reversal_description' => 'transactionReversalDescription',
'original_transaction_details' => 'originalTransactionDetails',
'end_to_end_identification' => 'endToEndIdentification',
'creditor_details' => 'creditorDetails',
'debtor_details' => 'debtorDetails',
'source_bank_name' => 'sourceBankName',
'source_bank_code' => 'sourceBankCode',
'clearing_time_stamp' => 'clearingTimeStamp',
'settlement_time_stamp' => 'settlementTimeStamp',
'central_bank_transaction_reference_id' => 'centralBankTransactionReferenceId',
'original_creditor_details' => 'originalCreditorDetails',
'original_credit_account_details' => 'originalCreditAccountDetails',
'original_debtor_name' => 'originalDebtorName',
'original_debit_account_details' => 'originalDebitAccountDetails',
'transaction_debit_fee_amount' => 'transactionDebitFeeAmount',
'bank_member_id' => 'bankMemberId',
'beneficiary_legal_name' => 'beneficiaryLegalName',
'beneficiary_address' => 'beneficiaryAddress',
'beneficiary_tax_id' => 'beneficiaryTaxId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_source_account_number' => 'setDisplaySourceAccountNumber',
'payment_type' => 'setPaymentType',
'transaction_description' => 'setTransactionDescription',
'transaction_amount' => 'setTransactionAmount',
'transaction_currency_code' => 'setTransactionCurrencyCode',
'transaction_date' => 'setTransactionDate',
'foreign_transaction_amount' => 'setForeignTransactionAmount',
'foreign_currency_code' => 'setForeignCurrencyCode',
'foreign_exchange_rate' => 'setForeignExchangeRate',
'transaction_status' => 'setTransactionStatus',
'transaction_posting_date' => 'setTransactionPostingDate',
'customer_name' => 'setCustomerName',
'customer_address' => 'setCustomerAddress',
'beneficiary_bank_details' => 'setBeneficiaryBankDetails',
'customer_merchant_reference_details' => 'setCustomerMerchantReferenceDetails',
'remarks' => 'setRemarks',
'payment_priority_code' => 'setPaymentPriorityCode',
'merchant_code' => 'setMerchantCode',
'merchant_name' => 'setMerchantName',
'transaction_reversal_description' => 'setTransactionReversalDescription',
'original_transaction_details' => 'setOriginalTransactionDetails',
'end_to_end_identification' => 'setEndToEndIdentification',
'creditor_details' => 'setCreditorDetails',
'debtor_details' => 'setDebtorDetails',
'source_bank_name' => 'setSourceBankName',
'source_bank_code' => 'setSourceBankCode',
'clearing_time_stamp' => 'setClearingTimeStamp',
'settlement_time_stamp' => 'setSettlementTimeStamp',
'central_bank_transaction_reference_id' => 'setCentralBankTransactionReferenceId',
'original_creditor_details' => 'setOriginalCreditorDetails',
'original_credit_account_details' => 'setOriginalCreditAccountDetails',
'original_debtor_name' => 'setOriginalDebtorName',
'original_debit_account_details' => 'setOriginalDebitAccountDetails',
'transaction_debit_fee_amount' => 'setTransactionDebitFeeAmount',
'bank_member_id' => 'setBankMemberId',
'beneficiary_legal_name' => 'setBeneficiaryLegalName',
'beneficiary_address' => 'setBeneficiaryAddress',
'beneficiary_tax_id' => 'setBeneficiaryTaxId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_source_account_number' => 'getDisplaySourceAccountNumber',
'payment_type' => 'getPaymentType',
'transaction_description' => 'getTransactionDescription',
'transaction_amount' => 'getTransactionAmount',
'transaction_currency_code' => 'getTransactionCurrencyCode',
'transaction_date' => 'getTransactionDate',
'foreign_transaction_amount' => 'getForeignTransactionAmount',
'foreign_currency_code' => 'getForeignCurrencyCode',
'foreign_exchange_rate' => 'getForeignExchangeRate',
'transaction_status' => 'getTransactionStatus',
'transaction_posting_date' => 'getTransactionPostingDate',
'customer_name' => 'getCustomerName',
'customer_address' => 'getCustomerAddress',
'beneficiary_bank_details' => 'getBeneficiaryBankDetails',
'customer_merchant_reference_details' => 'getCustomerMerchantReferenceDetails',
'remarks' => 'getRemarks',
'payment_priority_code' => 'getPaymentPriorityCode',
'merchant_code' => 'getMerchantCode',
'merchant_name' => 'getMerchantName',
'transaction_reversal_description' => 'getTransactionReversalDescription',
'original_transaction_details' => 'getOriginalTransactionDetails',
'end_to_end_identification' => 'getEndToEndIdentification',
'creditor_details' => 'getCreditorDetails',
'debtor_details' => 'getDebtorDetails',
'source_bank_name' => 'getSourceBankName',
'source_bank_code' => 'getSourceBankCode',
'clearing_time_stamp' => 'getClearingTimeStamp',
'settlement_time_stamp' => 'getSettlementTimeStamp',
'central_bank_transaction_reference_id' => 'getCentralBankTransactionReferenceId',
'original_creditor_details' => 'getOriginalCreditorDetails',
'original_credit_account_details' => 'getOriginalCreditAccountDetails',
'original_debtor_name' => 'getOriginalDebtorName',
'original_debit_account_details' => 'getOriginalDebitAccountDetails',
'transaction_debit_fee_amount' => 'getTransactionDebitFeeAmount',
'bank_member_id' => 'getBankMemberId',
'beneficiary_legal_name' => 'getBeneficiaryLegalName',
'beneficiary_address' => 'getBeneficiaryAddress',
'beneficiary_tax_id' => 'getBeneficiaryTaxId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_source_account_number'] = isset($data['display_source_account_number']) ? $data['display_source_account_number'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['transaction_description'] = isset($data['transaction_description']) ? $data['transaction_description'] : null;
        $this->container['transaction_amount'] = isset($data['transaction_amount']) ? $data['transaction_amount'] : null;
        $this->container['transaction_currency_code'] = isset($data['transaction_currency_code']) ? $data['transaction_currency_code'] : null;
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['foreign_transaction_amount'] = isset($data['foreign_transaction_amount']) ? $data['foreign_transaction_amount'] : null;
        $this->container['foreign_currency_code'] = isset($data['foreign_currency_code']) ? $data['foreign_currency_code'] : null;
        $this->container['foreign_exchange_rate'] = isset($data['foreign_exchange_rate']) ? $data['foreign_exchange_rate'] : null;
        $this->container['transaction_status'] = isset($data['transaction_status']) ? $data['transaction_status'] : null;
        $this->container['transaction_posting_date'] = isset($data['transaction_posting_date']) ? $data['transaction_posting_date'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['customer_address'] = isset($data['customer_address']) ? $data['customer_address'] : null;
        $this->container['beneficiary_bank_details'] = isset($data['beneficiary_bank_details']) ? $data['beneficiary_bank_details'] : null;
        $this->container['customer_merchant_reference_details'] = isset($data['customer_merchant_reference_details']) ? $data['customer_merchant_reference_details'] : null;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
        $this->container['payment_priority_code'] = isset($data['payment_priority_code']) ? $data['payment_priority_code'] : null;
        $this->container['merchant_code'] = isset($data['merchant_code']) ? $data['merchant_code'] : null;
        $this->container['merchant_name'] = isset($data['merchant_name']) ? $data['merchant_name'] : null;
        $this->container['transaction_reversal_description'] = isset($data['transaction_reversal_description']) ? $data['transaction_reversal_description'] : null;
        $this->container['original_transaction_details'] = isset($data['original_transaction_details']) ? $data['original_transaction_details'] : null;
        $this->container['end_to_end_identification'] = isset($data['end_to_end_identification']) ? $data['end_to_end_identification'] : null;
        $this->container['creditor_details'] = isset($data['creditor_details']) ? $data['creditor_details'] : null;
        $this->container['debtor_details'] = isset($data['debtor_details']) ? $data['debtor_details'] : null;
        $this->container['source_bank_name'] = isset($data['source_bank_name']) ? $data['source_bank_name'] : null;
        $this->container['source_bank_code'] = isset($data['source_bank_code']) ? $data['source_bank_code'] : null;
        $this->container['clearing_time_stamp'] = isset($data['clearing_time_stamp']) ? $data['clearing_time_stamp'] : null;
        $this->container['settlement_time_stamp'] = isset($data['settlement_time_stamp']) ? $data['settlement_time_stamp'] : null;
        $this->container['central_bank_transaction_reference_id'] = isset($data['central_bank_transaction_reference_id']) ? $data['central_bank_transaction_reference_id'] : null;
        $this->container['original_creditor_details'] = isset($data['original_creditor_details']) ? $data['original_creditor_details'] : null;
        $this->container['original_credit_account_details'] = isset($data['original_credit_account_details']) ? $data['original_credit_account_details'] : null;
        $this->container['original_debtor_name'] = isset($data['original_debtor_name']) ? $data['original_debtor_name'] : null;
        $this->container['original_debit_account_details'] = isset($data['original_debit_account_details']) ? $data['original_debit_account_details'] : null;
        $this->container['transaction_debit_fee_amount'] = isset($data['transaction_debit_fee_amount']) ? $data['transaction_debit_fee_amount'] : null;
        $this->container['bank_member_id'] = isset($data['bank_member_id']) ? $data['bank_member_id'] : null;
        $this->container['beneficiary_legal_name'] = isset($data['beneficiary_legal_name']) ? $data['beneficiary_legal_name'] : null;
        $this->container['beneficiary_address'] = isset($data['beneficiary_address']) ? $data['beneficiary_address'] : null;
        $this->container['beneficiary_tax_id'] = isset($data['beneficiary_tax_id']) ? $data['beneficiary_tax_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_type'] === null) {
            $invalidProperties[] = "'payment_type' can't be null";
        }
        if ($this->container['transaction_amount'] === null) {
            $invalidProperties[] = "'transaction_amount' can't be null";
        }
        if ($this->container['transaction_currency_code'] === null) {
            $invalidProperties[] = "'transaction_currency_code' can't be null";
        }
        if ($this->container['transaction_date'] === null) {
            $invalidProperties[] = "'transaction_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_source_account_number
     *
     * @return string
     */
    public function getDisplaySourceAccountNumber()
    {
        return $this->container['display_source_account_number'];
    }

    /**
     * Sets display_source_account_number
     *
     * @param string $display_source_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplaySourceAccountNumber($display_source_account_number)
    {
        $this->container['display_source_account_number'] = $display_source_account_number;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets transaction_description
     *
     * @return string
     */
    public function getTransactionDescription()
    {
        return $this->container['transaction_description'];
    }

    /**
     * Sets transaction_description
     *
     * @param string $transaction_description Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
     *
     * @return $this
     */
    public function setTransactionDescription($transaction_description)
    {
        $this->container['transaction_description'] = $transaction_description;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return double
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param double $transaction_amount Transaction amount in account currency.
     *
     * @return $this
     */
    public function setTransactionAmount($transaction_amount)
    {
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets transaction_currency_code
     *
     * @return string
     */
    public function getTransactionCurrencyCode()
    {
        return $this->container['transaction_currency_code'];
    }

    /**
     * Sets transaction_currency_code
     *
     * @param string $transaction_currency_code The currency code for the transaction amount in ISO 4217 format.
     *
     * @return $this
     */
    public function setTransactionCurrencyCode($transaction_currency_code)
    {
        $this->container['transaction_currency_code'] = $transaction_currency_code;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return \DateTime
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param \DateTime $transaction_date Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,
     *
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets foreign_transaction_amount
     *
     * @return float
     */
    public function getForeignTransactionAmount()
    {
        return $this->container['foreign_transaction_amount'];
    }

    /**
     * Sets foreign_transaction_amount
     *
     * @param float $foreign_transaction_amount The transaction amount in the foreign account current
     *
     * @return $this
     */
    public function setForeignTransactionAmount($foreign_transaction_amount)
    {
        $this->container['foreign_transaction_amount'] = $foreign_transaction_amount;

        return $this;
    }

    /**
     * Gets foreign_currency_code
     *
     * @return string
     */
    public function getForeignCurrencyCode()
    {
        return $this->container['foreign_currency_code'];
    }

    /**
     * Sets foreign_currency_code
     *
     * @param string $foreign_currency_code The currency code for the foreign transaction amount in ISO 4217 format.
     *
     * @return $this
     */
    public function setForeignCurrencyCode($foreign_currency_code)
    {
        $this->container['foreign_currency_code'] = $foreign_currency_code;

        return $this;
    }

    /**
     * Gets foreign_exchange_rate
     *
     * @return float
     */
    public function getForeignExchangeRate()
    {
        return $this->container['foreign_exchange_rate'];
    }

    /**
     * Sets foreign_exchange_rate
     *
     * @param float $foreign_exchange_rate The exchange rate at the time the foreign transaction was done
     *
     * @return $this
     */
    public function setForeignExchangeRate($foreign_exchange_rate)
    {
        $this->container['foreign_exchange_rate'] = $foreign_exchange_rate;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string $transaction_status The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.
     *
     * @return $this
     */
    public function setTransactionStatus($transaction_status)
    {
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets transaction_posting_date
     *
     * @return \DateTime
     */
    public function getTransactionPostingDate()
    {
        return $this->container['transaction_posting_date'];
    }

    /**
     * Sets transaction_posting_date
     *
     * @param \DateTime $transaction_posting_date Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601.
     *
     * @return $this
     */
    public function setTransactionPostingDate($transaction_posting_date)
    {
        $this->container['transaction_posting_date'] = $transaction_posting_date;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return \Swagger\Client\Model\CustomerName
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param \Swagger\Client\Model\CustomerName $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_address
     *
     * @return \Swagger\Client\Model\CustomerAddress
     */
    public function getCustomerAddress()
    {
        return $this->container['customer_address'];
    }

    /**
     * Sets customer_address
     *
     * @param \Swagger\Client\Model\CustomerAddress $customer_address customer_address
     *
     * @return $this
     */
    public function setCustomerAddress($customer_address)
    {
        $this->container['customer_address'] = $customer_address;

        return $this;
    }

    /**
     * Gets beneficiary_bank_details
     *
     * @return \Swagger\Client\Model\BeneficiaryBankDetails
     */
    public function getBeneficiaryBankDetails()
    {
        return $this->container['beneficiary_bank_details'];
    }

    /**
     * Sets beneficiary_bank_details
     *
     * @param \Swagger\Client\Model\BeneficiaryBankDetails $beneficiary_bank_details beneficiary_bank_details
     *
     * @return $this
     */
    public function setBeneficiaryBankDetails($beneficiary_bank_details)
    {
        $this->container['beneficiary_bank_details'] = $beneficiary_bank_details;

        return $this;
    }

    /**
     * Gets customer_merchant_reference_details
     *
     * @return \Swagger\Client\Model\CustomerMerchantReferenceDetails[]
     */
    public function getCustomerMerchantReferenceDetails()
    {
        return $this->container['customer_merchant_reference_details'];
    }

    /**
     * Sets customer_merchant_reference_details
     *
     * @param \Swagger\Client\Model\CustomerMerchantReferenceDetails[] $customer_merchant_reference_details customer_merchant_reference_details
     *
     * @return $this
     */
    public function setCustomerMerchantReferenceDetails($customer_merchant_reference_details)
    {
        $this->container['customer_merchant_reference_details'] = $customer_merchant_reference_details;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string $remarks Payment notes. Free text from screen
     *
     * @return $this
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets payment_priority_code
     *
     * @return string
     */
    public function getPaymentPriorityCode()
    {
        return $this->container['payment_priority_code'];
    }

    /**
     * Sets payment_priority_code
     *
     * @param string $payment_priority_code This code is used to indicate the priority payments
     *
     * @return $this
     */
    public function setPaymentPriorityCode($payment_priority_code)
    {
        $this->container['payment_priority_code'] = $payment_priority_code;

        return $this;
    }

    /**
     * Gets merchant_code
     *
     * @return string
     */
    public function getMerchantCode()
    {
        return $this->container['merchant_code'];
    }

    /**
     * Sets merchant_code
     *
     * @param string $merchant_code The code to identify merchant
     *
     * @return $this
     */
    public function setMerchantCode($merchant_code)
    {
        $this->container['merchant_code'] = $merchant_code;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string $merchant_name The name of the merchant
     *
     * @return $this
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets transaction_reversal_description
     *
     * @return string
     */
    public function getTransactionReversalDescription()
    {
        return $this->container['transaction_reversal_description'];
    }

    /**
     * Sets transaction_reversal_description
     *
     * @param string $transaction_reversal_description Transaction reversal description as provided by the returnee
     *
     * @return $this
     */
    public function setTransactionReversalDescription($transaction_reversal_description)
    {
        $this->container['transaction_reversal_description'] = $transaction_reversal_description;

        return $this;
    }

    /**
     * Gets original_transaction_details
     *
     * @return \Swagger\Client\Model\OriginalTransactionDetails
     */
    public function getOriginalTransactionDetails()
    {
        return $this->container['original_transaction_details'];
    }

    /**
     * Sets original_transaction_details
     *
     * @param \Swagger\Client\Model\OriginalTransactionDetails $original_transaction_details original_transaction_details
     *
     * @return $this
     */
    public function setOriginalTransactionDetails($original_transaction_details)
    {
        $this->container['original_transaction_details'] = $original_transaction_details;

        return $this;
    }

    /**
     * Gets end_to_end_identification
     *
     * @return string
     */
    public function getEndToEndIdentification()
    {
        return $this->container['end_to_end_identification'];
    }

    /**
     * Sets end_to_end_identification
     *
     * @param string $end_to_end_identification End to End Identification status
     *
     * @return $this
     */
    public function setEndToEndIdentification($end_to_end_identification)
    {
        $this->container['end_to_end_identification'] = $end_to_end_identification;

        return $this;
    }

    /**
     * Gets creditor_details
     *
     * @return \Swagger\Client\Model\CreditorDetails
     */
    public function getCreditorDetails()
    {
        return $this->container['creditor_details'];
    }

    /**
     * Sets creditor_details
     *
     * @param \Swagger\Client\Model\CreditorDetails $creditor_details creditor_details
     *
     * @return $this
     */
    public function setCreditorDetails($creditor_details)
    {
        $this->container['creditor_details'] = $creditor_details;

        return $this;
    }

    /**
     * Gets debtor_details
     *
     * @return \Swagger\Client\Model\DebtorDetails
     */
    public function getDebtorDetails()
    {
        return $this->container['debtor_details'];
    }

    /**
     * Sets debtor_details
     *
     * @param \Swagger\Client\Model\DebtorDetails $debtor_details debtor_details
     *
     * @return $this
     */
    public function setDebtorDetails($debtor_details)
    {
        $this->container['debtor_details'] = $debtor_details;

        return $this;
    }

    /**
     * Gets source_bank_name
     *
     * @return string
     */
    public function getSourceBankName()
    {
        return $this->container['source_bank_name'];
    }

    /**
     * Sets source_bank_name
     *
     * @param string $source_bank_name Name of the bank.
     *
     * @return $this
     */
    public function setSourceBankName($source_bank_name)
    {
        $this->container['source_bank_name'] = $source_bank_name;

        return $this;
    }

    /**
     * Gets source_bank_code
     *
     * @return string
     */
    public function getSourceBankCode()
    {
        return $this->container['source_bank_code'];
    }

    /**
     * Sets source_bank_code
     *
     * @param string $source_bank_code The bank code of the payer account
     *
     * @return $this
     */
    public function setSourceBankCode($source_bank_code)
    {
        $this->container['source_bank_code'] = $source_bank_code;

        return $this;
    }

    /**
     * Gets clearing_time_stamp
     *
     * @return string
     */
    public function getClearingTimeStamp()
    {
        return $this->container['clearing_time_stamp'];
    }

    /**
     * Sets clearing_time_stamp
     *
     * @param string $clearing_time_stamp Clearing Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS
     *
     * @return $this
     */
    public function setClearingTimeStamp($clearing_time_stamp)
    {
        $this->container['clearing_time_stamp'] = $clearing_time_stamp;

        return $this;
    }

    /**
     * Gets settlement_time_stamp
     *
     * @return string
     */
    public function getSettlementTimeStamp()
    {
        return $this->container['settlement_time_stamp'];
    }

    /**
     * Sets settlement_time_stamp
     *
     * @param string $settlement_time_stamp Settlement Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS
     *
     * @return $this
     */
    public function setSettlementTimeStamp($settlement_time_stamp)
    {
        $this->container['settlement_time_stamp'] = $settlement_time_stamp;

        return $this;
    }

    /**
     * Gets central_bank_transaction_reference_id
     *
     * @return string
     */
    public function getCentralBankTransactionReferenceId()
    {
        return $this->container['central_bank_transaction_reference_id'];
    }

    /**
     * Sets central_bank_transaction_reference_id
     *
     * @param string $central_bank_transaction_reference_id Transaction ID identifying the transaction across banks
     *
     * @return $this
     */
    public function setCentralBankTransactionReferenceId($central_bank_transaction_reference_id)
    {
        $this->container['central_bank_transaction_reference_id'] = $central_bank_transaction_reference_id;

        return $this;
    }

    /**
     * Gets original_creditor_details
     *
     * @return \Swagger\Client\Model\OriginalCreditorDetails
     */
    public function getOriginalCreditorDetails()
    {
        return $this->container['original_creditor_details'];
    }

    /**
     * Sets original_creditor_details
     *
     * @param \Swagger\Client\Model\OriginalCreditorDetails $original_creditor_details original_creditor_details
     *
     * @return $this
     */
    public function setOriginalCreditorDetails($original_creditor_details)
    {
        $this->container['original_creditor_details'] = $original_creditor_details;

        return $this;
    }

    /**
     * Gets original_credit_account_details
     *
     * @return \Swagger\Client\Model\OriginalCreditAccountDetails
     */
    public function getOriginalCreditAccountDetails()
    {
        return $this->container['original_credit_account_details'];
    }

    /**
     * Sets original_credit_account_details
     *
     * @param \Swagger\Client\Model\OriginalCreditAccountDetails $original_credit_account_details original_credit_account_details
     *
     * @return $this
     */
    public function setOriginalCreditAccountDetails($original_credit_account_details)
    {
        $this->container['original_credit_account_details'] = $original_credit_account_details;

        return $this;
    }

    /**
     * Gets original_debtor_name
     *
     * @return string
     */
    public function getOriginalDebtorName()
    {
        return $this->container['original_debtor_name'];
    }

    /**
     * Sets original_debtor_name
     *
     * @param string $original_debtor_name Original Debtor Name
     *
     * @return $this
     */
    public function setOriginalDebtorName($original_debtor_name)
    {
        $this->container['original_debtor_name'] = $original_debtor_name;

        return $this;
    }

    /**
     * Gets original_debit_account_details
     *
     * @return \Swagger\Client\Model\OriginalDebitAccountDetails
     */
    public function getOriginalDebitAccountDetails()
    {
        return $this->container['original_debit_account_details'];
    }

    /**
     * Sets original_debit_account_details
     *
     * @param \Swagger\Client\Model\OriginalDebitAccountDetails $original_debit_account_details original_debit_account_details
     *
     * @return $this
     */
    public function setOriginalDebitAccountDetails($original_debit_account_details)
    {
        $this->container['original_debit_account_details'] = $original_debit_account_details;

        return $this;
    }

    /**
     * Gets transaction_debit_fee_amount
     *
     * @return double
     */
    public function getTransactionDebitFeeAmount()
    {
        return $this->container['transaction_debit_fee_amount'];
    }

    /**
     * Sets transaction_debit_fee_amount
     *
     * @param double $transaction_debit_fee_amount Fees charged for the debit.
     *
     * @return $this
     */
    public function setTransactionDebitFeeAmount($transaction_debit_fee_amount)
    {
        $this->container['transaction_debit_fee_amount'] = $transaction_debit_fee_amount;

        return $this;
    }

    /**
     * Gets bank_member_id
     *
     * @return string
     */
    public function getBankMemberId()
    {
        return $this->container['bank_member_id'];
    }

    /**
     * Sets bank_member_id
     *
     * @param string $bank_member_id Bank Member ID
     *
     * @return $this
     */
    public function setBankMemberId($bank_member_id)
    {
        $this->container['bank_member_id'] = $bank_member_id;

        return $this;
    }

    /**
     * Gets beneficiary_legal_name
     *
     * @return string
     */
    public function getBeneficiaryLegalName()
    {
        return $this->container['beneficiary_legal_name'];
    }

    /**
     * Sets beneficiary_legal_name
     *
     * @param string $beneficiary_legal_name Legal Name of the Beneficiary
     *
     * @return $this
     */
    public function setBeneficiaryLegalName($beneficiary_legal_name)
    {
        $this->container['beneficiary_legal_name'] = $beneficiary_legal_name;

        return $this;
    }

    /**
     * Gets beneficiary_address
     *
     * @return \Swagger\Client\Model\BeneficiaryAddress[]
     */
    public function getBeneficiaryAddress()
    {
        return $this->container['beneficiary_address'];
    }

    /**
     * Sets beneficiary_address
     *
     * @param \Swagger\Client\Model\BeneficiaryAddress[] $beneficiary_address beneficiary_address
     *
     * @return $this
     */
    public function setBeneficiaryAddress($beneficiary_address)
    {
        $this->container['beneficiary_address'] = $beneficiary_address;

        return $this;
    }

    /**
     * Gets beneficiary_tax_id
     *
     * @return string
     */
    public function getBeneficiaryTaxId()
    {
        return $this->container['beneficiary_tax_id'];
    }

    /**
     * Sets beneficiary_tax_id
     *
     * @param string $beneficiary_tax_id Beneficiary Tax ID
     *
     * @return $this
     */
    public function setBeneficiaryTaxId($beneficiary_tax_id)
    {
        $this->container['beneficiary_tax_id'] = $beneficiary_tax_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
