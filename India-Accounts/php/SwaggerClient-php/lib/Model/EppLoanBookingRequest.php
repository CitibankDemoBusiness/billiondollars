<?php
/**
 * EppLoanBookingRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EppLoanBookingRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EppLoanBookingRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EppLoanBookingRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'epp_loan_booking_type' => 'string',
'tenor' => 'float',
'epp_loan_booking' => '\Swagger\Client\Model\EppLoanBooking[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'epp_loan_booking_type' => null,
'tenor' => 'integer',
'epp_loan_booking' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'epp_loan_booking_type' => 'eppLoanBookingType',
'tenor' => 'tenor',
'epp_loan_booking' => 'eppLoanBooking'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'epp_loan_booking_type' => 'setEppLoanBookingType',
'tenor' => 'setTenor',
'epp_loan_booking' => 'setEppLoanBooking'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'epp_loan_booking_type' => 'getEppLoanBookingType',
'tenor' => 'getTenor',
'epp_loan_booking' => 'getEppLoanBooking'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['epp_loan_booking_type'] = isset($data['epp_loan_booking_type']) ? $data['epp_loan_booking_type'] : null;
        $this->container['tenor'] = isset($data['tenor']) ? $data['tenor'] : null;
        $this->container['epp_loan_booking'] = isset($data['epp_loan_booking']) ? $data['epp_loan_booking'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['epp_loan_booking_type'] === null) {
            $invalidProperties[] = "'epp_loan_booking_type' can't be null";
        }
        if ($this->container['tenor'] === null) {
            $invalidProperties[] = "'tenor' can't be null";
        }
        if ($this->container['epp_loan_booking'] === null) {
            $invalidProperties[] = "'epp_loan_booking' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets epp_loan_booking_type
     *
     * @return string
     */
    public function getEppLoanBookingType()
    {
        return $this->container['epp_loan_booking_type'];
    }

    /**
     * Sets epp_loan_booking_type
     *
     * @param string $epp_loan_booking_type Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/apac/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description.
     *
     * @return $this
     */
    public function setEppLoanBookingType($epp_loan_booking_type)
    {
        $this->container['epp_loan_booking_type'] = $epp_loan_booking_type;

        return $this;
    }

    /**
     * Gets tenor
     *
     * @return float
     */
    public function getTenor()
    {
        return $this->container['tenor'];
    }

    /**
     * Sets tenor
     *
     * @param float $tenor Tenure of loan in months.
     *
     * @return $this
     */
    public function setTenor($tenor)
    {
        $this->container['tenor'] = $tenor;

        return $this;
    }

    /**
     * Gets epp_loan_booking
     *
     * @return \Swagger\Client\Model\EppLoanBooking[]
     */
    public function getEppLoanBooking()
    {
        return $this->container['epp_loan_booking'];
    }

    /**
     * Sets epp_loan_booking
     *
     * @param \Swagger\Client\Model\EppLoanBooking[] $epp_loan_booking EPP Loan Booking Pre-process
     *
     * @return $this
     */
    public function setEppLoanBooking($epp_loan_booking)
    {
        $this->container['epp_loan_booking'] = $epp_loan_booking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
