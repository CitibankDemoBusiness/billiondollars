<?php
/**
 * MutualFundAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MutualFundAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MutualFundAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MutualFundAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_name' => 'string',
'product_code' => 'string',
'display_account_number' => 'string',
'currency_code' => 'string',
'total_net_asset_value_amount' => 'double',
'total_transaction_amount' => 'double',
'total_unrealized_gains' => 'double',
'relationship' => '\Swagger\Client\Model\Relationship',
'mutual_fund' => '\Swagger\Client\Model\MutualFund[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_name' => null,
'product_code' => null,
'display_account_number' => null,
'currency_code' => null,
'total_net_asset_value_amount' => 'double',
'total_transaction_amount' => 'double',
'total_unrealized_gains' => 'double',
'relationship' => null,
'mutual_fund' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_name' => 'productName',
'product_code' => 'productCode',
'display_account_number' => 'displayAccountNumber',
'currency_code' => 'currencyCode',
'total_net_asset_value_amount' => 'totalNetAssetValueAmount',
'total_transaction_amount' => 'totalTransactionAmount',
'total_unrealized_gains' => 'totalUnrealizedGains',
'relationship' => 'relationship',
'mutual_fund' => 'mutualFund'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_name' => 'setProductName',
'product_code' => 'setProductCode',
'display_account_number' => 'setDisplayAccountNumber',
'currency_code' => 'setCurrencyCode',
'total_net_asset_value_amount' => 'setTotalNetAssetValueAmount',
'total_transaction_amount' => 'setTotalTransactionAmount',
'total_unrealized_gains' => 'setTotalUnrealizedGains',
'relationship' => 'setRelationship',
'mutual_fund' => 'setMutualFund'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_name' => 'getProductName',
'product_code' => 'getProductCode',
'display_account_number' => 'getDisplayAccountNumber',
'currency_code' => 'getCurrencyCode',
'total_net_asset_value_amount' => 'getTotalNetAssetValueAmount',
'total_transaction_amount' => 'getTotalTransactionAmount',
'total_unrealized_gains' => 'getTotalUnrealizedGains',
'relationship' => 'getRelationship',
'mutual_fund' => 'getMutualFund'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['display_account_number'] = isset($data['display_account_number']) ? $data['display_account_number'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['total_net_asset_value_amount'] = isset($data['total_net_asset_value_amount']) ? $data['total_net_asset_value_amount'] : null;
        $this->container['total_transaction_amount'] = isset($data['total_transaction_amount']) ? $data['total_transaction_amount'] : null;
        $this->container['total_unrealized_gains'] = isset($data['total_unrealized_gains']) ? $data['total_unrealized_gains'] : null;
        $this->container['relationship'] = isset($data['relationship']) ? $data['relationship'] : null;
        $this->container['mutual_fund'] = isset($data['mutual_fund']) ? $data['mutual_fund'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_account_number'] === null) {
            $invalidProperties[] = "'display_account_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name The name of the product
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code A unique code that identifies the product
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets display_account_number
     *
     * @return string
     */
    public function getDisplayAccountNumber()
    {
        return $this->container['display_account_number'];
    }

    /**
     * Sets display_account_number
     *
     * @param string $display_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplayAccountNumber($display_account_number)
    {
        $this->container['display_account_number'] = $display_account_number;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code of the account in ISO 4217 format
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets total_net_asset_value_amount
     *
     * @return double
     */
    public function getTotalNetAssetValueAmount()
    {
        return $this->container['total_net_asset_value_amount'];
    }

    /**
     * Sets total_net_asset_value_amount
     *
     * @param double $total_net_asset_value_amount Total of net asset value of mutual funds
     *
     * @return $this
     */
    public function setTotalNetAssetValueAmount($total_net_asset_value_amount)
    {
        $this->container['total_net_asset_value_amount'] = $total_net_asset_value_amount;

        return $this;
    }

    /**
     * Gets total_transaction_amount
     *
     * @return double
     */
    public function getTotalTransactionAmount()
    {
        return $this->container['total_transaction_amount'];
    }

    /**
     * Sets total_transaction_amount
     *
     * @param double $total_transaction_amount Total transaction amount in local currency
     *
     * @return $this
     */
    public function setTotalTransactionAmount($total_transaction_amount)
    {
        $this->container['total_transaction_amount'] = $total_transaction_amount;

        return $this;
    }

    /**
     * Gets total_unrealized_gains
     *
     * @return double
     */
    public function getTotalUnrealizedGains()
    {
        return $this->container['total_unrealized_gains'];
    }

    /**
     * Sets total_unrealized_gains
     *
     * @param double $total_unrealized_gains Total unrealized gains amount, profitable position that has yet to be cashed in
     *
     * @return $this
     */
    public function setTotalUnrealizedGains($total_unrealized_gains)
    {
        $this->container['total_unrealized_gains'] = $total_unrealized_gains;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return \Swagger\Client\Model\Relationship
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param \Swagger\Client\Model\Relationship $relationship relationship
     *
     * @return $this
     */
    public function setRelationship($relationship)
    {
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets mutual_fund
     *
     * @return \Swagger\Client\Model\MutualFund[]
     */
    public function getMutualFund()
    {
        return $this->container['mutual_fund'];
    }

    /**
     * Sets mutual_fund
     *
     * @param \Swagger\Client\Model\MutualFund[] $mutual_fund mutual_fund
     *
     * @return $this
     */
    public function setMutualFund($mutual_fund)
    {
        $this->container['mutual_fund'] = $mutual_fund;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
