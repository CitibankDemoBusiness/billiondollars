<?php
/**
 * CreditCardAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditCardAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditCardAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_name' => 'string',
'product_code' => 'string',
'display_account_number' => 'string',
'currency_code' => 'string',
'outstanding_balance' => 'double',
'last_statement_balance' => 'double',
'last_statement_date' => '\DateTime',
'credit_used' => 'double',
'credit_limit' => 'double',
'available_credit' => 'double',
'cash_advance_limit' => 'double',
'cash_advance_available_amount' => 'double',
'last_payment_amount' => 'double',
'last_payment_date' => '\DateTime',
'minimum_due_amount' => 'double',
'payment_due_date' => '\DateTime',
'available_point_balance' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_name' => null,
'product_code' => null,
'display_account_number' => null,
'currency_code' => null,
'outstanding_balance' => 'double',
'last_statement_balance' => 'double',
'last_statement_date' => 'date',
'credit_used' => 'double',
'credit_limit' => 'double',
'available_credit' => 'double',
'cash_advance_limit' => 'double',
'cash_advance_available_amount' => 'double',
'last_payment_amount' => 'double',
'last_payment_date' => 'date',
'minimum_due_amount' => 'double',
'payment_due_date' => 'date',
'available_point_balance' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_name' => 'productName',
'product_code' => 'productCode',
'display_account_number' => 'displayAccountNumber',
'currency_code' => 'currencyCode',
'outstanding_balance' => 'outstandingBalance',
'last_statement_balance' => 'lastStatementBalance',
'last_statement_date' => 'lastStatementDate',
'credit_used' => 'creditUsed',
'credit_limit' => 'creditLimit',
'available_credit' => 'availableCredit',
'cash_advance_limit' => 'cashAdvanceLimit',
'cash_advance_available_amount' => 'cashAdvanceAvailableAmount',
'last_payment_amount' => 'lastPaymentAmount',
'last_payment_date' => 'lastPaymentDate',
'minimum_due_amount' => 'minimumDueAmount',
'payment_due_date' => 'paymentDueDate',
'available_point_balance' => 'availablePointBalance'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_name' => 'setProductName',
'product_code' => 'setProductCode',
'display_account_number' => 'setDisplayAccountNumber',
'currency_code' => 'setCurrencyCode',
'outstanding_balance' => 'setOutstandingBalance',
'last_statement_balance' => 'setLastStatementBalance',
'last_statement_date' => 'setLastStatementDate',
'credit_used' => 'setCreditUsed',
'credit_limit' => 'setCreditLimit',
'available_credit' => 'setAvailableCredit',
'cash_advance_limit' => 'setCashAdvanceLimit',
'cash_advance_available_amount' => 'setCashAdvanceAvailableAmount',
'last_payment_amount' => 'setLastPaymentAmount',
'last_payment_date' => 'setLastPaymentDate',
'minimum_due_amount' => 'setMinimumDueAmount',
'payment_due_date' => 'setPaymentDueDate',
'available_point_balance' => 'setAvailablePointBalance'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_name' => 'getProductName',
'product_code' => 'getProductCode',
'display_account_number' => 'getDisplayAccountNumber',
'currency_code' => 'getCurrencyCode',
'outstanding_balance' => 'getOutstandingBalance',
'last_statement_balance' => 'getLastStatementBalance',
'last_statement_date' => 'getLastStatementDate',
'credit_used' => 'getCreditUsed',
'credit_limit' => 'getCreditLimit',
'available_credit' => 'getAvailableCredit',
'cash_advance_limit' => 'getCashAdvanceLimit',
'cash_advance_available_amount' => 'getCashAdvanceAvailableAmount',
'last_payment_amount' => 'getLastPaymentAmount',
'last_payment_date' => 'getLastPaymentDate',
'minimum_due_amount' => 'getMinimumDueAmount',
'payment_due_date' => 'getPaymentDueDate',
'available_point_balance' => 'getAvailablePointBalance'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
        $this->container['display_account_number'] = isset($data['display_account_number']) ? $data['display_account_number'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['outstanding_balance'] = isset($data['outstanding_balance']) ? $data['outstanding_balance'] : null;
        $this->container['last_statement_balance'] = isset($data['last_statement_balance']) ? $data['last_statement_balance'] : null;
        $this->container['last_statement_date'] = isset($data['last_statement_date']) ? $data['last_statement_date'] : null;
        $this->container['credit_used'] = isset($data['credit_used']) ? $data['credit_used'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['available_credit'] = isset($data['available_credit']) ? $data['available_credit'] : null;
        $this->container['cash_advance_limit'] = isset($data['cash_advance_limit']) ? $data['cash_advance_limit'] : null;
        $this->container['cash_advance_available_amount'] = isset($data['cash_advance_available_amount']) ? $data['cash_advance_available_amount'] : null;
        $this->container['last_payment_amount'] = isset($data['last_payment_amount']) ? $data['last_payment_amount'] : null;
        $this->container['last_payment_date'] = isset($data['last_payment_date']) ? $data['last_payment_date'] : null;
        $this->container['minimum_due_amount'] = isset($data['minimum_due_amount']) ? $data['minimum_due_amount'] : null;
        $this->container['payment_due_date'] = isset($data['payment_due_date']) ? $data['payment_due_date'] : null;
        $this->container['available_point_balance'] = isset($data['available_point_balance']) ? $data['available_point_balance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_account_number'] === null) {
            $invalidProperties[] = "'display_account_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name The name of the product
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code A unique code that identifies the product
     *
     * @return $this
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets display_account_number
     *
     * @return string
     */
    public function getDisplayAccountNumber()
    {
        return $this->container['display_account_number'];
    }

    /**
     * Sets display_account_number
     *
     * @param string $display_account_number A masked account number that can be displayed to the customer
     *
     * @return $this
     */
    public function setDisplayAccountNumber($display_account_number)
    {
        $this->container['display_account_number'] = $display_account_number;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code of the account in ISO 4217 format
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets outstanding_balance
     *
     * @return double
     */
    public function getOutstandingBalance()
    {
        return $this->container['outstanding_balance'];
    }

    /**
     * Sets outstanding_balance
     *
     * @param double $outstanding_balance The amount of money owed.
     *
     * @return $this
     */
    public function setOutstandingBalance($outstanding_balance)
    {
        $this->container['outstanding_balance'] = $outstanding_balance;

        return $this;
    }

    /**
     * Gets last_statement_balance
     *
     * @return double
     */
    public function getLastStatementBalance()
    {
        return $this->container['last_statement_balance'];
    }

    /**
     * Sets last_statement_balance
     *
     * @param double $last_statement_balance The balance on last statement date
     *
     * @return $this
     */
    public function setLastStatementBalance($last_statement_balance)
    {
        $this->container['last_statement_balance'] = $last_statement_balance;

        return $this;
    }

    /**
     * Gets last_statement_date
     *
     * @return \DateTime
     */
    public function getLastStatementDate()
    {
        return $this->container['last_statement_date'];
    }

    /**
     * Sets last_statement_date
     *
     * @param \DateTime $last_statement_date The date of the last statement in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setLastStatementDate($last_statement_date)
    {
        $this->container['last_statement_date'] = $last_statement_date;

        return $this;
    }

    /**
     * Gets credit_used
     *
     * @return double
     */
    public function getCreditUsed()
    {
        return $this->container['credit_used'];
    }

    /**
     * Sets credit_used
     *
     * @param double $credit_used The part of the credit limit already used
     *
     * @return $this
     */
    public function setCreditUsed($credit_used)
    {
        $this->container['credit_used'] = $credit_used;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit The maximum amount of credit that extend to a customer
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets available_credit
     *
     * @return double
     */
    public function getAvailableCredit()
    {
        return $this->container['available_credit'];
    }

    /**
     * Sets available_credit
     *
     * @param double $available_credit The available credit
     *
     * @return $this
     */
    public function setAvailableCredit($available_credit)
    {
        $this->container['available_credit'] = $available_credit;

        return $this;
    }

    /**
     * Gets cash_advance_limit
     *
     * @return double
     */
    public function getCashAdvanceLimit()
    {
        return $this->container['cash_advance_limit'];
    }

    /**
     * Sets cash_advance_limit
     *
     * @param double $cash_advance_limit Some percentage of credit limit to withdraw cash
     *
     * @return $this
     */
    public function setCashAdvanceLimit($cash_advance_limit)
    {
        $this->container['cash_advance_limit'] = $cash_advance_limit;

        return $this;
    }

    /**
     * Gets cash_advance_available_amount
     *
     * @return double
     */
    public function getCashAdvanceAvailableAmount()
    {
        return $this->container['cash_advance_available_amount'];
    }

    /**
     * Sets cash_advance_available_amount
     *
     * @param double $cash_advance_available_amount Cash advance amount available. This will be same as the cash limit if there is no cash advance done. Otherwise, this will be the amount from the cashLimit minus the cash advance amount already used
     *
     * @return $this
     */
    public function setCashAdvanceAvailableAmount($cash_advance_available_amount)
    {
        $this->container['cash_advance_available_amount'] = $cash_advance_available_amount;

        return $this;
    }

    /**
     * Gets last_payment_amount
     *
     * @return double
     */
    public function getLastPaymentAmount()
    {
        return $this->container['last_payment_amount'];
    }

    /**
     * Sets last_payment_amount
     *
     * @param double $last_payment_amount The amount of the last payment made
     *
     * @return $this
     */
    public function setLastPaymentAmount($last_payment_amount)
    {
        $this->container['last_payment_amount'] = $last_payment_amount;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return \DateTime
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param \DateTime $last_payment_date The date of the last payment in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets minimum_due_amount
     *
     * @return double
     */
    public function getMinimumDueAmount()
    {
        return $this->container['minimum_due_amount'];
    }

    /**
     * Sets minimum_due_amount
     *
     * @param double $minimum_due_amount Minimum due amount for a payment cycle
     *
     * @return $this
     */
    public function setMinimumDueAmount($minimum_due_amount)
    {
        $this->container['minimum_due_amount'] = $minimum_due_amount;

        return $this;
    }

    /**
     * Gets payment_due_date
     *
     * @return \DateTime
     */
    public function getPaymentDueDate()
    {
        return $this->container['payment_due_date'];
    }

    /**
     * Sets payment_due_date
     *
     * @param \DateTime $payment_due_date The date of the next payment/payment due date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setPaymentDueDate($payment_due_date)
    {
        $this->container['payment_due_date'] = $payment_due_date;

        return $this;
    }

    /**
     * Gets available_point_balance
     *
     * @return float
     */
    public function getAvailablePointBalance()
    {
        return $this->container['available_point_balance'];
    }

    /**
     * Sets available_point_balance
     *
     * @param float $available_point_balance Available reward points on the credit card
     *
     * @return $this
     */
    public function setAvailablePointBalance($available_point_balance)
    {
        $this->container['available_point_balance'] = $available_point_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
