<?php
/**
 * UnSecuredLoans
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UnSecuredLoans Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnSecuredLoans implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UnSecuredLoans';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'original_disclosed_amount' => 'double',
'original_term' => 'int',
'current_term' => 'int',
'remaining_term' => 'int',
'last_payment_date' => '\DateTime',
'installment_amount' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'original_disclosed_amount' => 'double',
'original_term' => 'int32',
'current_term' => 'int32',
'remaining_term' => 'int32',
'last_payment_date' => 'date',
'installment_amount' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'original_disclosed_amount' => 'originalDisclosedAmount',
'original_term' => 'originalTerm',
'current_term' => 'currentTerm',
'remaining_term' => 'remainingTerm',
'last_payment_date' => 'lastPaymentDate',
'installment_amount' => 'installmentAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'original_disclosed_amount' => 'setOriginalDisclosedAmount',
'original_term' => 'setOriginalTerm',
'current_term' => 'setCurrentTerm',
'remaining_term' => 'setRemainingTerm',
'last_payment_date' => 'setLastPaymentDate',
'installment_amount' => 'setInstallmentAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'original_disclosed_amount' => 'getOriginalDisclosedAmount',
'original_term' => 'getOriginalTerm',
'current_term' => 'getCurrentTerm',
'remaining_term' => 'getRemainingTerm',
'last_payment_date' => 'getLastPaymentDate',
'installment_amount' => 'getInstallmentAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['original_disclosed_amount'] = isset($data['original_disclosed_amount']) ? $data['original_disclosed_amount'] : null;
        $this->container['original_term'] = isset($data['original_term']) ? $data['original_term'] : null;
        $this->container['current_term'] = isset($data['current_term']) ? $data['current_term'] : null;
        $this->container['remaining_term'] = isset($data['remaining_term']) ? $data['remaining_term'] : null;
        $this->container['last_payment_date'] = isset($data['last_payment_date']) ? $data['last_payment_date'] : null;
        $this->container['installment_amount'] = isset($data['installment_amount']) ? $data['installment_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets original_disclosed_amount
     *
     * @return double
     */
    public function getOriginalDisclosedAmount()
    {
        return $this->container['original_disclosed_amount'];
    }

    /**
     * Sets original_disclosed_amount
     *
     * @param double $original_disclosed_amount Original loan amount applied for equal payment plan
     *
     * @return $this
     */
    public function setOriginalDisclosedAmount($original_disclosed_amount)
    {
        $this->container['original_disclosed_amount'] = $original_disclosed_amount;

        return $this;
    }

    /**
     * Gets original_term
     *
     * @return int
     */
    public function getOriginalTerm()
    {
        return $this->container['original_term'];
    }

    /**
     * Sets original_term
     *
     * @param int $original_term Instalment Loan Original Term
     *
     * @return $this
     */
    public function setOriginalTerm($original_term)
    {
        $this->container['original_term'] = $original_term;

        return $this;
    }

    /**
     * Gets current_term
     *
     * @return int
     */
    public function getCurrentTerm()
    {
        return $this->container['current_term'];
    }

    /**
     * Sets current_term
     *
     * @param int $current_term Instalment Loan Current Term
     *
     * @return $this
     */
    public function setCurrentTerm($current_term)
    {
        $this->container['current_term'] = $current_term;

        return $this;
    }

    /**
     * Gets remaining_term
     *
     * @return int
     */
    public function getRemainingTerm()
    {
        return $this->container['remaining_term'];
    }

    /**
     * Sets remaining_term
     *
     * @param int $remaining_term Instalment Loan remaining Term
     *
     * @return $this
     */
    public function setRemainingTerm($remaining_term)
    {
        $this->container['remaining_term'] = $remaining_term;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return \DateTime
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param \DateTime $last_payment_date Last Payment Date of Loans in ISO 8601 format YYYY-MM-DD
     *
     * @return $this
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets installment_amount
     *
     * @return double
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param double $installment_amount Instalment amount for loan
     *
     * @return $this
     */
    public function setInstallmentAmount($installment_amount)
    {
        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
