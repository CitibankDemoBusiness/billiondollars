<?php
/**
 * CreditCardAccountBalanceSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditCardAccountBalanceSummary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditCardAccountBalanceSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditCardAccountBalanceSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_disputed_transaction_amount' => 'double',
'current_outstanding_amount' => 'double',
'current_accrued_interest' => 'double',
'payment_due_amount' => 'double',
'available_point_balance' => 'double',
'partial_response_information' => '\Swagger\Client\Model\PartialResponseInformation[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_disputed_transaction_amount' => 'double',
'current_outstanding_amount' => 'double',
'current_accrued_interest' => 'double',
'payment_due_amount' => 'double',
'available_point_balance' => 'double',
'partial_response_information' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_disputed_transaction_amount' => 'totalDisputedTransactionAmount',
'current_outstanding_amount' => 'currentOutstandingAmount',
'current_accrued_interest' => 'currentAccruedInterest',
'payment_due_amount' => 'paymentDueAmount',
'available_point_balance' => 'availablePointBalance',
'partial_response_information' => 'partialResponseInformation'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_disputed_transaction_amount' => 'setTotalDisputedTransactionAmount',
'current_outstanding_amount' => 'setCurrentOutstandingAmount',
'current_accrued_interest' => 'setCurrentAccruedInterest',
'payment_due_amount' => 'setPaymentDueAmount',
'available_point_balance' => 'setAvailablePointBalance',
'partial_response_information' => 'setPartialResponseInformation'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_disputed_transaction_amount' => 'getTotalDisputedTransactionAmount',
'current_outstanding_amount' => 'getCurrentOutstandingAmount',
'current_accrued_interest' => 'getCurrentAccruedInterest',
'payment_due_amount' => 'getPaymentDueAmount',
'available_point_balance' => 'getAvailablePointBalance',
'partial_response_information' => 'getPartialResponseInformation'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_disputed_transaction_amount'] = isset($data['total_disputed_transaction_amount']) ? $data['total_disputed_transaction_amount'] : null;
        $this->container['current_outstanding_amount'] = isset($data['current_outstanding_amount']) ? $data['current_outstanding_amount'] : null;
        $this->container['current_accrued_interest'] = isset($data['current_accrued_interest']) ? $data['current_accrued_interest'] : null;
        $this->container['payment_due_amount'] = isset($data['payment_due_amount']) ? $data['payment_due_amount'] : null;
        $this->container['available_point_balance'] = isset($data['available_point_balance']) ? $data['available_point_balance'] : null;
        $this->container['partial_response_information'] = isset($data['partial_response_information']) ? $data['partial_response_information'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['current_outstanding_amount'] === null) {
            $invalidProperties[] = "'current_outstanding_amount' can't be null";
        }
        if ($this->container['current_accrued_interest'] === null) {
            $invalidProperties[] = "'current_accrued_interest' can't be null";
        }
        if ($this->container['payment_due_amount'] === null) {
            $invalidProperties[] = "'payment_due_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_disputed_transaction_amount
     *
     * @return double
     */
    public function getTotalDisputedTransactionAmount()
    {
        return $this->container['total_disputed_transaction_amount'];
    }

    /**
     * Sets total_disputed_transaction_amount
     *
     * @param double $total_disputed_transaction_amount This is the total disputed transaction amount.
     *
     * @return $this
     */
    public function setTotalDisputedTransactionAmount($total_disputed_transaction_amount)
    {
        $this->container['total_disputed_transaction_amount'] = $total_disputed_transaction_amount;

        return $this;
    }

    /**
     * Gets current_outstanding_amount
     *
     * @return double
     */
    public function getCurrentOutstandingAmount()
    {
        return $this->container['current_outstanding_amount'];
    }

    /**
     * Sets current_outstanding_amount
     *
     * @param double $current_outstanding_amount This includes the current intra-day transactions which yet to be posted on card.
     *
     * @return $this
     */
    public function setCurrentOutstandingAmount($current_outstanding_amount)
    {
        $this->container['current_outstanding_amount'] = $current_outstanding_amount;

        return $this;
    }

    /**
     * Gets current_accrued_interest
     *
     * @return double
     */
    public function getCurrentAccruedInterest()
    {
        return $this->container['current_accrued_interest'];
    }

    /**
     * Sets current_accrued_interest
     *
     * @param double $current_accrued_interest Interest which has been accrued till last accrual date.
     *
     * @return $this
     */
    public function setCurrentAccruedInterest($current_accrued_interest)
    {
        $this->container['current_accrued_interest'] = $current_accrued_interest;

        return $this;
    }

    /**
     * Gets payment_due_amount
     *
     * @return double
     */
    public function getPaymentDueAmount()
    {
        return $this->container['payment_due_amount'];
    }

    /**
     * Sets payment_due_amount
     *
     * @param double $payment_due_amount Total amount customer needs to pay in order to clear the balance.
     *
     * @return $this
     */
    public function setPaymentDueAmount($payment_due_amount)
    {
        $this->container['payment_due_amount'] = $payment_due_amount;

        return $this;
    }

    /**
     * Gets available_point_balance
     *
     * @return double
     */
    public function getAvailablePointBalance()
    {
        return $this->container['available_point_balance'];
    }

    /**
     * Sets available_point_balance
     *
     * @param double $available_point_balance Available reward points on the credit card
     *
     * @return $this
     */
    public function setAvailablePointBalance($available_point_balance)
    {
        $this->container['available_point_balance'] = $available_point_balance;

        return $this;
    }

    /**
     * Gets partial_response_information
     *
     * @return \Swagger\Client\Model\PartialResponseInformation[]
     */
    public function getPartialResponseInformation()
    {
        return $this->container['partial_response_information'];
    }

    /**
     * Sets partial_response_information
     *
     * @param \Swagger\Client\Model\PartialResponseInformation[] $partial_response_information Partial success response
     *
     * @return $this
     */
    public function setPartialResponseInformation($partial_response_information)
    {
        $this->container['partial_response_information'] = $partial_response_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
