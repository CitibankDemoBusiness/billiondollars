<?php
/**
 * BalanceTransferBookings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BalanceTransferBookings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BalanceTransferBookings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BalanceTransferBookings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'loan_amount' => 'double',
'bt_disbursement_option' => 'string',
'disbursement_account_id' => 'string',
'payee_type' => 'string',
'bank_details' => '\Swagger\Client\Model\BankDetails'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'loan_amount' => 'double',
'bt_disbursement_option' => null,
'disbursement_account_id' => null,
'payee_type' => null,
'bank_details' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loan_amount' => 'loanAmount',
'bt_disbursement_option' => 'btDisbursementOption',
'disbursement_account_id' => 'disbursementAccountId',
'payee_type' => 'payeeType',
'bank_details' => 'bankDetails'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loan_amount' => 'setLoanAmount',
'bt_disbursement_option' => 'setBtDisbursementOption',
'disbursement_account_id' => 'setDisbursementAccountId',
'payee_type' => 'setPayeeType',
'bank_details' => 'setBankDetails'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loan_amount' => 'getLoanAmount',
'bt_disbursement_option' => 'getBtDisbursementOption',
'disbursement_account_id' => 'getDisbursementAccountId',
'payee_type' => 'getPayeeType',
'bank_details' => 'getBankDetails'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['loan_amount'] = isset($data['loan_amount']) ? $data['loan_amount'] : null;
        $this->container['bt_disbursement_option'] = isset($data['bt_disbursement_option']) ? $data['bt_disbursement_option'] : null;
        $this->container['disbursement_account_id'] = isset($data['disbursement_account_id']) ? $data['disbursement_account_id'] : null;
        $this->container['payee_type'] = isset($data['payee_type']) ? $data['payee_type'] : null;
        $this->container['bank_details'] = isset($data['bank_details']) ? $data['bank_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['loan_amount'] === null) {
            $invalidProperties[] = "'loan_amount' can't be null";
        }
        if ($this->container['bt_disbursement_option'] === null) {
            $invalidProperties[] = "'bt_disbursement_option' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loan_amount
     *
     * @return double
     */
    public function getLoanAmount()
    {
        return $this->container['loan_amount'];
    }

    /**
     * Sets loan_amount
     *
     * @param double $loan_amount This field is to indicate the loan amount for booking.
     *
     * @return $this
     */
    public function setLoanAmount($loan_amount)
    {
        $this->container['loan_amount'] = $loan_amount;

        return $this;
    }

    /**
     * Gets bt_disbursement_option
     *
     * @return string
     */
    public function getBtDisbursementOption()
    {
        return $this->container['bt_disbursement_option'];
    }

    /**
     * Sets bt_disbursement_option
     *
     * @param string $bt_disbursement_option Provide the list of the options available to receive the disbursement of balance transfer. Please use /v1/utilities/referenceData/{btDisbursementOption} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setBtDisbursementOption($bt_disbursement_option)
    {
        $this->container['bt_disbursement_option'] = $bt_disbursement_option;

        return $this;
    }

    /**
     * Gets disbursement_account_id
     *
     * @return string
     */
    public function getDisbursementAccountId()
    {
        return $this->container['disbursement_account_id'];
    }

    /**
     * Sets disbursement_account_id
     *
     * @param string $disbursement_account_id The disbursement account identifier in encrypted format. Applicable only for HK.
     *
     * @return $this
     */
    public function setDisbursementAccountId($disbursement_account_id)
    {
        $this->container['disbursement_account_id'] = $disbursement_account_id;

        return $this;
    }

    /**
     * Gets payee_type
     *
     * @return string
     */
    public function getPayeeType()
    {
        return $this->container['payee_type'];
    }

    /**
     * Sets payee_type
     *
     * @param string $payee_type Identifies the type of payee based on the destination of the payee.This is a reference data field. Please use /v1/utilities/referenceData/{payeeType} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setPayeeType($payee_type)
    {
        $this->container['payee_type'] = $payee_type;

        return $this;
    }

    /**
     * Gets bank_details
     *
     * @return \Swagger\Client\Model\BankDetails
     */
    public function getBankDetails()
    {
        return $this->container['bank_details'];
    }

    /**
     * Sets bank_details
     *
     * @param \Swagger\Client\Model\BankDetails $bank_details bank_details
     *
     * @return $this
     */
    public function setBankDetails($bank_details)
    {
        $this->container['bank_details'] = $bank_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
