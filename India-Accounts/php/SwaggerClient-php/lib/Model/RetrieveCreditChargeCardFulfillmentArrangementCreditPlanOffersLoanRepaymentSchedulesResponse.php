<?php
/**
 * RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'next_start_index' => 'string',
'total_loan_cost' => 'double',
'amortization_schedule' => '\Swagger\Client\Model\AmortizationSchedule',
'binary_data' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'next_start_index' => null,
'total_loan_cost' => 'double',
'amortization_schedule' => null,
'binary_data' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'next_start_index' => 'nextStartIndex',
'total_loan_cost' => 'totalLoanCost',
'amortization_schedule' => 'amortizationSchedule',
'binary_data' => 'binaryData'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'next_start_index' => 'setNextStartIndex',
'total_loan_cost' => 'setTotalLoanCost',
'amortization_schedule' => 'setAmortizationSchedule',
'binary_data' => 'setBinaryData'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'next_start_index' => 'getNextStartIndex',
'total_loan_cost' => 'getTotalLoanCost',
'amortization_schedule' => 'getAmortizationSchedule',
'binary_data' => 'getBinaryData'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['next_start_index'] = isset($data['next_start_index']) ? $data['next_start_index'] : null;
        $this->container['total_loan_cost'] = isset($data['total_loan_cost']) ? $data['total_loan_cost'] : null;
        $this->container['amortization_schedule'] = isset($data['amortization_schedule']) ? $data['amortization_schedule'] : null;
        $this->container['binary_data'] = isset($data['binary_data']) ? $data['binary_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets next_start_index
     *
     * @return string
     */
    public function getNextStartIndex()
    {
        return $this->container['next_start_index'];
    }

    /**
     * Sets next_start_index
     *
     * @param string $next_start_index The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.
     *
     * @return $this
     */
    public function setNextStartIndex($next_start_index)
    {
        $this->container['next_start_index'] = $next_start_index;

        return $this;
    }

    /**
     * Gets total_loan_cost
     *
     * @return double
     */
    public function getTotalLoanCost()
    {
        return $this->container['total_loan_cost'];
    }

    /**
     * Sets total_loan_cost
     *
     * @param double $total_loan_cost This amount is the full cost of credit which includes the total principal and total interest.
     *
     * @return $this
     */
    public function setTotalLoanCost($total_loan_cost)
    {
        $this->container['total_loan_cost'] = $total_loan_cost;

        return $this;
    }

    /**
     * Gets amortization_schedule
     *
     * @return \Swagger\Client\Model\AmortizationSchedule
     */
    public function getAmortizationSchedule()
    {
        return $this->container['amortization_schedule'];
    }

    /**
     * Sets amortization_schedule
     *
     * @param \Swagger\Client\Model\AmortizationSchedule $amortization_schedule amortization_schedule
     *
     * @return $this
     */
    public function setAmortizationSchedule($amortization_schedule)
    {
        $this->container['amortization_schedule'] = $amortization_schedule;

        return $this;
    }

    /**
     * Gets binary_data
     *
     * @return string
     */
    public function getBinaryData()
    {
        return $this->container['binary_data'];
    }

    /**
     * Sets binary_data
     *
     * @param string $binary_data This field contains binary data of the Repayment Schedule.
     *
     * @return $this
     */
    public function setBinaryData($binary_data)
    {
        $this->container['binary_data'] = $binary_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
