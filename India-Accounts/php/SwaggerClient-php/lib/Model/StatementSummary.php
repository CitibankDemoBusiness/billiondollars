<?php
/**
 * StatementSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StatementSummary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StatementSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StatementSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'outstanding_balance' => 'double',
'credit_limit' => 'double',
'active_equal_payment_plan_count' => 'double',
'beginning_balance_amount' => 'double',
'total_debit_amount' => 'double',
'total_credit_amount' => 'double',
'net_interest_amount' => 'double',
'payment_due_date' => '\DateTime',
'past_due_amount' => 'double',
'cash_advance_limit' => 'double',
'cycle_to_date_fee_amount' => 'double',
'interest_paid_amount' => 'double',
'billing_currency_code' => 'string',
'cash_advance_available_amount' => 'double',
'retail_cycle_interest_rate' => 'double',
'cash_cycle_interest_rate' => 'double',
'private_label_credit_cards' => '\Swagger\Client\Model\PrivateLabelCreditCards'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'outstanding_balance' => 'double',
'credit_limit' => 'double',
'active_equal_payment_plan_count' => 'double',
'beginning_balance_amount' => 'double',
'total_debit_amount' => 'double',
'total_credit_amount' => 'double',
'net_interest_amount' => 'double',
'payment_due_date' => 'date',
'past_due_amount' => 'double',
'cash_advance_limit' => 'double',
'cycle_to_date_fee_amount' => 'double',
'interest_paid_amount' => 'double',
'billing_currency_code' => null,
'cash_advance_available_amount' => 'double',
'retail_cycle_interest_rate' => 'double',
'cash_cycle_interest_rate' => 'double',
'private_label_credit_cards' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outstanding_balance' => 'outstandingBalance',
'credit_limit' => 'creditLimit',
'active_equal_payment_plan_count' => 'activeEqualPaymentPlanCount',
'beginning_balance_amount' => 'beginningBalanceAmount',
'total_debit_amount' => 'totalDebitAmount',
'total_credit_amount' => 'totalCreditAmount',
'net_interest_amount' => 'netInterestAmount',
'payment_due_date' => 'paymentDueDate',
'past_due_amount' => 'pastDueAmount',
'cash_advance_limit' => 'cashAdvanceLimit',
'cycle_to_date_fee_amount' => 'cycleToDateFeeAmount',
'interest_paid_amount' => 'interestPaidAmount',
'billing_currency_code' => 'billingCurrencyCode',
'cash_advance_available_amount' => 'cashAdvanceAvailableAmount',
'retail_cycle_interest_rate' => 'retailCycleInterestRate',
'cash_cycle_interest_rate' => 'cashCycleInterestRate',
'private_label_credit_cards' => 'privateLabelCreditCards'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outstanding_balance' => 'setOutstandingBalance',
'credit_limit' => 'setCreditLimit',
'active_equal_payment_plan_count' => 'setActiveEqualPaymentPlanCount',
'beginning_balance_amount' => 'setBeginningBalanceAmount',
'total_debit_amount' => 'setTotalDebitAmount',
'total_credit_amount' => 'setTotalCreditAmount',
'net_interest_amount' => 'setNetInterestAmount',
'payment_due_date' => 'setPaymentDueDate',
'past_due_amount' => 'setPastDueAmount',
'cash_advance_limit' => 'setCashAdvanceLimit',
'cycle_to_date_fee_amount' => 'setCycleToDateFeeAmount',
'interest_paid_amount' => 'setInterestPaidAmount',
'billing_currency_code' => 'setBillingCurrencyCode',
'cash_advance_available_amount' => 'setCashAdvanceAvailableAmount',
'retail_cycle_interest_rate' => 'setRetailCycleInterestRate',
'cash_cycle_interest_rate' => 'setCashCycleInterestRate',
'private_label_credit_cards' => 'setPrivateLabelCreditCards'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outstanding_balance' => 'getOutstandingBalance',
'credit_limit' => 'getCreditLimit',
'active_equal_payment_plan_count' => 'getActiveEqualPaymentPlanCount',
'beginning_balance_amount' => 'getBeginningBalanceAmount',
'total_debit_amount' => 'getTotalDebitAmount',
'total_credit_amount' => 'getTotalCreditAmount',
'net_interest_amount' => 'getNetInterestAmount',
'payment_due_date' => 'getPaymentDueDate',
'past_due_amount' => 'getPastDueAmount',
'cash_advance_limit' => 'getCashAdvanceLimit',
'cycle_to_date_fee_amount' => 'getCycleToDateFeeAmount',
'interest_paid_amount' => 'getInterestPaidAmount',
'billing_currency_code' => 'getBillingCurrencyCode',
'cash_advance_available_amount' => 'getCashAdvanceAvailableAmount',
'retail_cycle_interest_rate' => 'getRetailCycleInterestRate',
'cash_cycle_interest_rate' => 'getCashCycleInterestRate',
'private_label_credit_cards' => 'getPrivateLabelCreditCards'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['outstanding_balance'] = isset($data['outstanding_balance']) ? $data['outstanding_balance'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['active_equal_payment_plan_count'] = isset($data['active_equal_payment_plan_count']) ? $data['active_equal_payment_plan_count'] : null;
        $this->container['beginning_balance_amount'] = isset($data['beginning_balance_amount']) ? $data['beginning_balance_amount'] : null;
        $this->container['total_debit_amount'] = isset($data['total_debit_amount']) ? $data['total_debit_amount'] : null;
        $this->container['total_credit_amount'] = isset($data['total_credit_amount']) ? $data['total_credit_amount'] : null;
        $this->container['net_interest_amount'] = isset($data['net_interest_amount']) ? $data['net_interest_amount'] : null;
        $this->container['payment_due_date'] = isset($data['payment_due_date']) ? $data['payment_due_date'] : null;
        $this->container['past_due_amount'] = isset($data['past_due_amount']) ? $data['past_due_amount'] : null;
        $this->container['cash_advance_limit'] = isset($data['cash_advance_limit']) ? $data['cash_advance_limit'] : null;
        $this->container['cycle_to_date_fee_amount'] = isset($data['cycle_to_date_fee_amount']) ? $data['cycle_to_date_fee_amount'] : null;
        $this->container['interest_paid_amount'] = isset($data['interest_paid_amount']) ? $data['interest_paid_amount'] : null;
        $this->container['billing_currency_code'] = isset($data['billing_currency_code']) ? $data['billing_currency_code'] : null;
        $this->container['cash_advance_available_amount'] = isset($data['cash_advance_available_amount']) ? $data['cash_advance_available_amount'] : null;
        $this->container['retail_cycle_interest_rate'] = isset($data['retail_cycle_interest_rate']) ? $data['retail_cycle_interest_rate'] : null;
        $this->container['cash_cycle_interest_rate'] = isset($data['cash_cycle_interest_rate']) ? $data['cash_cycle_interest_rate'] : null;
        $this->container['private_label_credit_cards'] = isset($data['private_label_credit_cards']) ? $data['private_label_credit_cards'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outstanding_balance
     *
     * @return double
     */
    public function getOutstandingBalance()
    {
        return $this->container['outstanding_balance'];
    }

    /**
     * Sets outstanding_balance
     *
     * @param double $outstanding_balance Outstanding balance amount on the statement date
     *
     * @return $this
     */
    public function setOutstandingBalance($outstanding_balance)
    {
        $this->container['outstanding_balance'] = $outstanding_balance;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit The maximum amount of credit that extend to a customer
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets active_equal_payment_plan_count
     *
     * @return double
     */
    public function getActiveEqualPaymentPlanCount()
    {
        return $this->container['active_equal_payment_plan_count'];
    }

    /**
     * Sets active_equal_payment_plan_count
     *
     * @param double $active_equal_payment_plan_count Number of active plans under equal payment plan
     *
     * @return $this
     */
    public function setActiveEqualPaymentPlanCount($active_equal_payment_plan_count)
    {
        $this->container['active_equal_payment_plan_count'] = $active_equal_payment_plan_count;

        return $this;
    }

    /**
     * Gets beginning_balance_amount
     *
     * @return double
     */
    public function getBeginningBalanceAmount()
    {
        return $this->container['beginning_balance_amount'];
    }

    /**
     * Sets beginning_balance_amount
     *
     * @param double $beginning_balance_amount Balance as on Last Statement Date
     *
     * @return $this
     */
    public function setBeginningBalanceAmount($beginning_balance_amount)
    {
        $this->container['beginning_balance_amount'] = $beginning_balance_amount;

        return $this;
    }

    /**
     * Gets total_debit_amount
     *
     * @return double
     */
    public function getTotalDebitAmount()
    {
        return $this->container['total_debit_amount'];
    }

    /**
     * Sets total_debit_amount
     *
     * @param double $total_debit_amount Total debits made during the statement period
     *
     * @return $this
     */
    public function setTotalDebitAmount($total_debit_amount)
    {
        $this->container['total_debit_amount'] = $total_debit_amount;

        return $this;
    }

    /**
     * Gets total_credit_amount
     *
     * @return double
     */
    public function getTotalCreditAmount()
    {
        return $this->container['total_credit_amount'];
    }

    /**
     * Sets total_credit_amount
     *
     * @param double $total_credit_amount Total payments made during the statement period.
     *
     * @return $this
     */
    public function setTotalCreditAmount($total_credit_amount)
    {
        $this->container['total_credit_amount'] = $total_credit_amount;

        return $this;
    }

    /**
     * Gets net_interest_amount
     *
     * @return double
     */
    public function getNetInterestAmount()
    {
        return $this->container['net_interest_amount'];
    }

    /**
     * Sets net_interest_amount
     *
     * @param double $net_interest_amount Total interest amount of monetary transactions posted to cardholder account
     *
     * @return $this
     */
    public function setNetInterestAmount($net_interest_amount)
    {
        $this->container['net_interest_amount'] = $net_interest_amount;

        return $this;
    }

    /**
     * Gets payment_due_date
     *
     * @return \DateTime
     */
    public function getPaymentDueDate()
    {
        return $this->container['payment_due_date'];
    }

    /**
     * Sets payment_due_date
     *
     * @param \DateTime $payment_due_date Next payment due date in ISO 8601 date format YYYY-MM-DD
     *
     * @return $this
     */
    public function setPaymentDueDate($payment_due_date)
    {
        $this->container['payment_due_date'] = $payment_due_date;

        return $this;
    }

    /**
     * Gets past_due_amount
     *
     * @return double
     */
    public function getPastDueAmount()
    {
        return $this->container['past_due_amount'];
    }

    /**
     * Sets past_due_amount
     *
     * @param double $past_due_amount Past due amount to be paid
     *
     * @return $this
     */
    public function setPastDueAmount($past_due_amount)
    {
        $this->container['past_due_amount'] = $past_due_amount;

        return $this;
    }

    /**
     * Gets cash_advance_limit
     *
     * @return double
     */
    public function getCashAdvanceLimit()
    {
        return $this->container['cash_advance_limit'];
    }

    /**
     * Sets cash_advance_limit
     *
     * @param double $cash_advance_limit Some percentage of credit limit to withdraw cash
     *
     * @return $this
     */
    public function setCashAdvanceLimit($cash_advance_limit)
    {
        $this->container['cash_advance_limit'] = $cash_advance_limit;

        return $this;
    }

    /**
     * Gets cycle_to_date_fee_amount
     *
     * @return double
     */
    public function getCycleToDateFeeAmount()
    {
        return $this->container['cycle_to_date_fee_amount'];
    }

    /**
     * Sets cycle_to_date_fee_amount
     *
     * @param double $cycle_to_date_fee_amount The total fee applied in the cycle
     *
     * @return $this
     */
    public function setCycleToDateFeeAmount($cycle_to_date_fee_amount)
    {
        $this->container['cycle_to_date_fee_amount'] = $cycle_to_date_fee_amount;

        return $this;
    }

    /**
     * Gets interest_paid_amount
     *
     * @return double
     */
    public function getInterestPaidAmount()
    {
        return $this->container['interest_paid_amount'];
    }

    /**
     * Sets interest_paid_amount
     *
     * @param double $interest_paid_amount Interest amount paid on the credit card from the last billing cycle.
     *
     * @return $this
     */
    public function setInterestPaidAmount($interest_paid_amount)
    {
        $this->container['interest_paid_amount'] = $interest_paid_amount;

        return $this;
    }

    /**
     * Gets billing_currency_code
     *
     * @return string
     */
    public function getBillingCurrencyCode()
    {
        return $this->container['billing_currency_code'];
    }

    /**
     * Sets billing_currency_code
     *
     * @param string $billing_currency_code Billing currency code in  in ISO 4217 format
     *
     * @return $this
     */
    public function setBillingCurrencyCode($billing_currency_code)
    {
        $this->container['billing_currency_code'] = $billing_currency_code;

        return $this;
    }

    /**
     * Gets cash_advance_available_amount
     *
     * @return double
     */
    public function getCashAdvanceAvailableAmount()
    {
        return $this->container['cash_advance_available_amount'];
    }

    /**
     * Sets cash_advance_available_amount
     *
     * @param double $cash_advance_available_amount Available Cash Amount for withdrawal
     *
     * @return $this
     */
    public function setCashAdvanceAvailableAmount($cash_advance_available_amount)
    {
        $this->container['cash_advance_available_amount'] = $cash_advance_available_amount;

        return $this;
    }

    /**
     * Gets retail_cycle_interest_rate
     *
     * @return double
     */
    public function getRetailCycleInterestRate()
    {
        return $this->container['retail_cycle_interest_rate'];
    }

    /**
     * Sets retail_cycle_interest_rate
     *
     * @param double $retail_cycle_interest_rate Retail Interest Rate for merchant transactions.
     *
     * @return $this
     */
    public function setRetailCycleInterestRate($retail_cycle_interest_rate)
    {
        $this->container['retail_cycle_interest_rate'] = $retail_cycle_interest_rate;

        return $this;
    }

    /**
     * Gets cash_cycle_interest_rate
     *
     * @return double
     */
    public function getCashCycleInterestRate()
    {
        return $this->container['cash_cycle_interest_rate'];
    }

    /**
     * Sets cash_cycle_interest_rate
     *
     * @param double $cash_cycle_interest_rate Cash Interest Rate for withdrawal
     *
     * @return $this
     */
    public function setCashCycleInterestRate($cash_cycle_interest_rate)
    {
        $this->container['cash_cycle_interest_rate'] = $cash_cycle_interest_rate;

        return $this;
    }

    /**
     * Gets private_label_credit_cards
     *
     * @return \Swagger\Client\Model\PrivateLabelCreditCards
     */
    public function getPrivateLabelCreditCards()
    {
        return $this->container['private_label_credit_cards'];
    }

    /**
     * Sets private_label_credit_cards
     *
     * @param \Swagger\Client\Model\PrivateLabelCreditCards $private_label_credit_cards private_label_credit_cards
     *
     * @return $this
     */
    public function setPrivateLabelCreditCards($private_label_credit_cards)
    {
        $this->container['private_label_credit_cards'] = $private_label_credit_cards;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
