<?php
/**
 * InitiateApplicationProcessingUnsecuredLoanTopupRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InitiateApplicationProcessingUnsecuredLoanTopupRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InitiateApplicationProcessingUnsecuredLoanTopupRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InitiateApplicationProcessingUnsecuredLoanTopupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'marketing_campaign_offer' => '\Swagger\Client\Model\MarketingCampaignOffer',
'account_id' => 'string',
'card_id' => 'string',
'product' => '\Swagger\Client\Model\Product',
'requested_loan_amount' => 'double',
'loan_topup_application_type' => 'string',
'spoken_language_code' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'marketing_campaign_offer' => null,
'account_id' => null,
'card_id' => null,
'product' => null,
'requested_loan_amount' => 'double',
'loan_topup_application_type' => null,
'spoken_language_code' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'marketing_campaign_offer' => 'marketingCampaignOffer',
'account_id' => 'accountId',
'card_id' => 'cardId',
'product' => 'product',
'requested_loan_amount' => 'requestedLoanAmount',
'loan_topup_application_type' => 'loanTopupApplicationType',
'spoken_language_code' => 'spokenLanguageCode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'marketing_campaign_offer' => 'setMarketingCampaignOffer',
'account_id' => 'setAccountId',
'card_id' => 'setCardId',
'product' => 'setProduct',
'requested_loan_amount' => 'setRequestedLoanAmount',
'loan_topup_application_type' => 'setLoanTopupApplicationType',
'spoken_language_code' => 'setSpokenLanguageCode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'marketing_campaign_offer' => 'getMarketingCampaignOffer',
'account_id' => 'getAccountId',
'card_id' => 'getCardId',
'product' => 'getProduct',
'requested_loan_amount' => 'getRequestedLoanAmount',
'loan_topup_application_type' => 'getLoanTopupApplicationType',
'spoken_language_code' => 'getSpokenLanguageCode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketing_campaign_offer'] = isset($data['marketing_campaign_offer']) ? $data['marketing_campaign_offer'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['requested_loan_amount'] = isset($data['requested_loan_amount']) ? $data['requested_loan_amount'] : null;
        $this->container['loan_topup_application_type'] = isset($data['loan_topup_application_type']) ? $data['loan_topup_application_type'] : null;
        $this->container['spoken_language_code'] = isset($data['spoken_language_code']) ? $data['spoken_language_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['loan_topup_application_type'] === null) {
            $invalidProperties[] = "'loan_topup_application_type' can't be null";
        }
        if ($this->container['spoken_language_code'] === null) {
            $invalidProperties[] = "'spoken_language_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets marketing_campaign_offer
     *
     * @return \Swagger\Client\Model\MarketingCampaignOffer
     */
    public function getMarketingCampaignOffer()
    {
        return $this->container['marketing_campaign_offer'];
    }

    /**
     * Sets marketing_campaign_offer
     *
     * @param \Swagger\Client\Model\MarketingCampaignOffer $marketing_campaign_offer marketing_campaign_offer
     *
     * @return $this
     */
    public function setMarketingCampaignOffer($marketing_campaign_offer)
    {
        $this->container['marketing_campaign_offer'] = $marketing_campaign_offer;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id Account number of customer in encrypted form.
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id Card number of customer in encrypted form.
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Swagger\Client\Model\Product
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Swagger\Client\Model\Product $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets requested_loan_amount
     *
     * @return double
     */
    public function getRequestedLoanAmount()
    {
        return $this->container['requested_loan_amount'];
    }

    /**
     * Sets requested_loan_amount
     *
     * @param double $requested_loan_amount Requested loan amount
     *
     * @return $this
     */
    public function setRequestedLoanAmount($requested_loan_amount)
    {
        $this->container['requested_loan_amount'] = $requested_loan_amount;

        return $this;
    }

    /**
     * Gets loan_topup_application_type
     *
     * @return string
     */
    public function getLoanTopupApplicationType()
    {
        return $this->container['loan_topup_application_type'];
    }

    /**
     * Sets loan_topup_application_type
     *
     * @param string $loan_topup_application_type Identifies if application is for cross-sell application for new personal loan (PIL) or loan top-up. This is a reference data data field. Please use /v1/utilities/referenceData/{loanTopupApplicationType} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setLoanTopupApplicationType($loan_topup_application_type)
    {
        $this->container['loan_topup_application_type'] = $loan_topup_application_type;

        return $this;
    }

    /**
     * Gets spoken_language_code
     *
     * @return string
     */
    public function getSpokenLanguageCode()
    {
        return $this->container['spoken_language_code'];
    }

    /**
     * Sets spoken_language_code
     *
     * @param string $spoken_language_code Code for spoken language of applicant. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description.
     *
     * @return $this
     */
    public function setSpokenLanguageCode($spoken_language_code)
    {
        $this->container['spoken_language_code'] = $spoken_language_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
