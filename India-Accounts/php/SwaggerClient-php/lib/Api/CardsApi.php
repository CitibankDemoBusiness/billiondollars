<?php
/**
 * CardsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CardsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation loanBookingConfirmationPreLogin
     *
     * This API  is triggered after CMAMT interdiction in Loan Booking process.
     *
     * @param  \Swagger\Client\Model\LoanBookingConfirmationPreLoginRequest $body LoanBookingConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LoanBookingConfirmationPreLoginResponse
     */
    public function loanBookingConfirmationPreLogin($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        list($response) = $this->loanBookingConfirmationPreLoginWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);
        return $response;
    }

    /**
     * Operation loanBookingConfirmationPreLoginWithHttpInfo
     *
     * This API  is triggered after CMAMT interdiction in Loan Booking process.
     *
     * @param  \Swagger\Client\Model\LoanBookingConfirmationPreLoginRequest $body LoanBookingConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LoanBookingConfirmationPreLoginResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loanBookingConfirmationPreLoginWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\LoanBookingConfirmationPreLoginResponse';
        $request = $this->loanBookingConfirmationPreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LoanBookingConfirmationPreLoginResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loanBookingConfirmationPreLoginAsync
     *
     * This API  is triggered after CMAMT interdiction in Loan Booking process.
     *
     * @param  \Swagger\Client\Model\LoanBookingConfirmationPreLoginRequest $body LoanBookingConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loanBookingConfirmationPreLoginAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        return $this->loanBookingConfirmationPreLoginAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loanBookingConfirmationPreLoginAsyncWithHttpInfo
     *
     * This API  is triggered after CMAMT interdiction in Loan Booking process.
     *
     * @param  \Swagger\Client\Model\LoanBookingConfirmationPreLoginRequest $body LoanBookingConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loanBookingConfirmationPreLoginAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\LoanBookingConfirmationPreLoginResponse';
        $request = $this->loanBookingConfirmationPreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loanBookingConfirmationPreLogin'
     *
     * @param  \Swagger\Client\Model\LoanBookingConfirmationPreLoginRequest $body LoanBookingConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function loanBookingConfirmationPreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling loanBookingConfirmationPreLogin'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loanBookingConfirmationPreLogin'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling loanBookingConfirmationPreLogin'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loanBookingConfirmationPreLogin'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling loanBookingConfirmationPreLogin'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loanBookingConfirmationPreLogin'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling loanBookingConfirmationPreLogin'
            );
        }

        $resourcePath = '/v1/prelogin/creditCardServices/offers/{offerId}/loans/bookings/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loanBookingPreLogin
     *
     * This API is triggered after the Loan Plan is selected and completes the Pre login Loan Booking. One of the responses to the execution of this API is the loan reference number.
     *
     * @param  \Swagger\Client\Model\LoanBookingPreLoginRequest $body LoanBookingPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LoanBookingPreLoginResponse
     */
    public function loanBookingPreLogin($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        list($response) = $this->loanBookingPreLoginWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);
        return $response;
    }

    /**
     * Operation loanBookingPreLoginWithHttpInfo
     *
     * This API is triggered after the Loan Plan is selected and completes the Pre login Loan Booking. One of the responses to the execution of this API is the loan reference number.
     *
     * @param  \Swagger\Client\Model\LoanBookingPreLoginRequest $body LoanBookingPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LoanBookingPreLoginResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loanBookingPreLoginWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\LoanBookingPreLoginResponse';
        $request = $this->loanBookingPreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LoanBookingPreLoginResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loanBookingPreLoginAsync
     *
     * This API is triggered after the Loan Plan is selected and completes the Pre login Loan Booking. One of the responses to the execution of this API is the loan reference number.
     *
     * @param  \Swagger\Client\Model\LoanBookingPreLoginRequest $body LoanBookingPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loanBookingPreLoginAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        return $this->loanBookingPreLoginAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loanBookingPreLoginAsyncWithHttpInfo
     *
     * This API is triggered after the Loan Plan is selected and completes the Pre login Loan Booking. One of the responses to the execution of this API is the loan reference number.
     *
     * @param  \Swagger\Client\Model\LoanBookingPreLoginRequest $body LoanBookingPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loanBookingPreLoginAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\LoanBookingPreLoginResponse';
        $request = $this->loanBookingPreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loanBookingPreLogin'
     *
     * @param  \Swagger\Client\Model\LoanBookingPreLoginRequest $body LoanBookingPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function loanBookingPreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling loanBookingPreLogin'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling loanBookingPreLogin'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling loanBookingPreLogin'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling loanBookingPreLogin'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling loanBookingPreLogin'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling loanBookingPreLogin'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling loanBookingPreLogin'
            );
        }

        $resourcePath = '/v1/prelogin/creditCardServices/offers/{offerId}/loans/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partnerV1AccountsAccountIdLoansGet
     *
     * This API is to retrieve the history details  of LOP/EPP -.If the transactions available exceeds the request size, you will be provided with a nextStartIndex. You may pass this nextStartIndex in your next request to get the next set of transactions. If nextStartIndex is blank, then there are no more transactions available.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.It is not applicable for the first iteration. (optional)
     * @param  string $loan_status This is a reference data field.  Please use /v1/utilities/referenceData/{loanStatus} resource to get valid value of this field with description (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\LoanSummaryResponse
     */
    public function partnerV1AccountsAccountIdLoansGet($authorization, $uuid, $accept, $client_id, $account_id, $client_details = null, $next_start_index = null, $loan_status = null, $offer_type = null, $offer_indicator = null)
    {
        list($response) = $this->partnerV1AccountsAccountIdLoansGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $account_id, $client_details, $next_start_index, $loan_status, $offer_type, $offer_indicator);
        return $response;
    }

    /**
     * Operation partnerV1AccountsAccountIdLoansGetWithHttpInfo
     *
     * This API is to retrieve the history details  of LOP/EPP -.If the transactions available exceeds the request size, you will be provided with a nextStartIndex. You may pass this nextStartIndex in your next request to get the next set of transactions. If nextStartIndex is blank, then there are no more transactions available.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.It is not applicable for the first iteration. (optional)
     * @param  string $loan_status This is a reference data field.  Please use /v1/utilities/referenceData/{loanStatus} resource to get valid value of this field with description (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\LoanSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function partnerV1AccountsAccountIdLoansGetWithHttpInfo($authorization, $uuid, $accept, $client_id, $account_id, $client_details = null, $next_start_index = null, $loan_status = null, $offer_type = null, $offer_indicator = null)
    {
        $returnType = '\Swagger\Client\Model\LoanSummaryResponse';
        $request = $this->partnerV1AccountsAccountIdLoansGetRequest($authorization, $uuid, $accept, $client_id, $account_id, $client_details, $next_start_index, $loan_status, $offer_type, $offer_indicator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\LoanSummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation partnerV1AccountsAccountIdLoansGetAsync
     *
     * This API is to retrieve the history details  of LOP/EPP -.If the transactions available exceeds the request size, you will be provided with a nextStartIndex. You may pass this nextStartIndex in your next request to get the next set of transactions. If nextStartIndex is blank, then there are no more transactions available.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.It is not applicable for the first iteration. (optional)
     * @param  string $loan_status This is a reference data field.  Please use /v1/utilities/referenceData/{loanStatus} resource to get valid value of this field with description (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partnerV1AccountsAccountIdLoansGetAsync($authorization, $uuid, $accept, $client_id, $account_id, $client_details = null, $next_start_index = null, $loan_status = null, $offer_type = null, $offer_indicator = null)
    {
        return $this->partnerV1AccountsAccountIdLoansGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $account_id, $client_details, $next_start_index, $loan_status, $offer_type, $offer_indicator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partnerV1AccountsAccountIdLoansGetAsyncWithHttpInfo
     *
     * This API is to retrieve the history details  of LOP/EPP -.If the transactions available exceeds the request size, you will be provided with a nextStartIndex. You may pass this nextStartIndex in your next request to get the next set of transactions. If nextStartIndex is blank, then there are no more transactions available.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.It is not applicable for the first iteration. (optional)
     * @param  string $loan_status This is a reference data field.  Please use /v1/utilities/referenceData/{loanStatus} resource to get valid value of this field with description (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partnerV1AccountsAccountIdLoansGetAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $account_id, $client_details = null, $next_start_index = null, $loan_status = null, $offer_type = null, $offer_indicator = null)
    {
        $returnType = '\Swagger\Client\Model\LoanSummaryResponse';
        $request = $this->partnerV1AccountsAccountIdLoansGetRequest($authorization, $uuid, $accept, $client_id, $account_id, $client_details, $next_start_index, $loan_status, $offer_type, $offer_indicator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partnerV1AccountsAccountIdLoansGet'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.It is not applicable for the first iteration. (optional)
     * @param  string $loan_status This is a reference data field.  Please use /v1/utilities/referenceData/{loanStatus} resource to get valid value of this field with description (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function partnerV1AccountsAccountIdLoansGetRequest($authorization, $uuid, $accept, $client_id, $account_id, $client_details = null, $next_start_index = null, $loan_status = null, $offer_type = null, $offer_indicator = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling partnerV1AccountsAccountIdLoansGet'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling partnerV1AccountsAccountIdLoansGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling partnerV1AccountsAccountIdLoansGet'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling partnerV1AccountsAccountIdLoansGet'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling partnerV1AccountsAccountIdLoansGet'
            );
        }

        $resourcePath = '/partner/v1/accounts/{accountId}/loans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($next_start_index !== null) {
            $queryParams['nextStartIndex'] = ObjectSerializer::toQueryValue($next_start_index, null);
        }
        // query params
        if ($loan_status !== null) {
            $queryParams['loanStatus'] = ObjectSerializer::toQueryValue($loan_status, null);
        }
        // query params
        if ($offer_type !== null) {
            $queryParams['offerType'] = ObjectSerializer::toQueryValue($offer_type, null);
        }
        // query params
        if ($offer_indicator !== null) {
            $queryParams['offerIndicator'] = ObjectSerializer::toQueryValue($offer_indicator, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateResponse
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        list($response) = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details);
        return $response;
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateWithHttpInfo
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateAsync
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        return $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateAsyncWithHttpInfo
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate'
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $card_id The card id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $card_id, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate'
            );
        }
        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidate'
            );
        }

        $resourcePath = '/v1/creditChargeCard/creditPlans/{cardId}/consolidation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmation
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationResponse
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmation($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        list($response) = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details);
        return $response;
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationWithHttpInfo
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationAsync
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        return $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationAsyncWithHttpInfo
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmation'
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmation'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmation'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmation'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmation'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmation'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmation'
            );
        }

        $resourcePath = '/v1/creditChargeCard/creditPlans/consolidation/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        list($response) = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);
        return $response;
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginWithHttpInfo
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginAsync
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        return $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginAsyncWithHttpInfo
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin'
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidateConfirmationPreLogin'
            );
        }

        $resourcePath = '/v1/preLogin/creditChargeCard/creditPlans/{offerId}/consolidation/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginResponse
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        list($response) = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);
        return $response;
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithHttpInfo
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginAsync
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        return $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginAsyncWithHttpInfo
     *
     * This API is used to merge the multiple LOPs in to single loan with top up amount added
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin'
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLogin'
            );
        }

        $resourcePath = '/v1/preLogin/creditChargeCard/creditPlans/{offerId}/consolidation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLogin
     *
     * This API is to fetch the list of booked loans on customer's  credit cards.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id his Refers to the unique id for the Pre login offer (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansResponse
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLogin($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $offer_type = null, $offer_indicator = null)
    {
        list($response) = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details, $offer_type, $offer_indicator);
        return $response;
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginWithHttpInfo
     *
     * This API is to fetch the list of booked loans on customer's  credit cards.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id his Refers to the unique id for the Pre login offer (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $offer_type = null, $offer_indicator = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginRequest($authorization, $uuid, $accept, $client_id, $offer_id, $client_details, $offer_type, $offer_indicator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginAsync
     *
     * This API is to fetch the list of booked loans on customer's  credit cards.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id his Refers to the unique id for the Pre login offer (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginAsync($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $offer_type = null, $offer_indicator = null)
    {
        return $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details, $offer_type, $offer_indicator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginAsyncWithHttpInfo
     *
     * This API is to fetch the list of booked loans on customer's  credit cards.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id his Refers to the unique id for the Pre login offer (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $offer_type = null, $offer_indicator = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginRequest($authorization, $uuid, $accept, $client_id, $offer_id, $client_details, $offer_type, $offer_indicator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLogin'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id his Refers to the unique id for the Pre login offer (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $offer_type This is a reference data field.  Please use /v1/utilities/referenceData/{offerType} resource to get valid value of this field with description (optional)
     * @param  string $offer_indicator This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLoginRequest($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $offer_type = null, $offer_indicator = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLogin'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLogin'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLogin'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLogin'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanLoansPreLogin'
            );
        }

        $resourcePath = '/v1/preLogin/creditChargeCard/creditPlans/{offerId}/loans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offer_type !== null) {
            $queryParams['offerType'] = ObjectSerializer::toQueryValue($offer_type, null);
        }
        // query params
        if ($offer_indicator !== null) {
            $queryParams['offerIndicator'] = ObjectSerializer::toQueryValue($offer_indicator, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp
     *
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $product_id Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $product_id = null, $loan_amount = null)
    {
        list($response) = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details, $product_id, $loan_amount);
        return $response;
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppWithHttpInfo
     *
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $product_id Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $product_id = null, $loan_amount = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRequest($authorization, $uuid, $accept, $client_id, $offer_id, $client_details, $product_id, $loan_amount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsync
     *
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $product_id Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsync($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $product_id = null, $loan_amount = null)
    {
        return $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details, $product_id, $loan_amount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsyncWithHttpInfo
     *
     * This API list the Options for Pre Login EPP offers that the customer can avail. It provides the applicable interest rate and tenors.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $product_id Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $product_id = null, $loan_amount = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRequest($authorization, $uuid, $accept, $client_id, $offer_id, $client_details, $product_id, $loan_amount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $product_id Product ID.This is a reference data field. Please use /v1/utilities/referenceData/{productId} resource to get valid value of this field with description. (optional)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRequest($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null, $product_id = null, $loan_amount = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEpp'
            );
        }

        $resourcePath = '/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_id !== null) {
            $queryParams['productId'] = ObjectSerializer::toQueryValue($product_id, null);
        }
        // query params
        if ($loan_amount !== null) {
            $queryParams['loanAmount'] = ObjectSerializer::toQueryValue($loan_amount, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings
     *
     * This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        list($response) = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);
        return $response;
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsWithHttpInfo
     *
     * This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsync
     *
     * This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsync($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        return $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsyncWithHttpInfo
     *
     * This API is triggered after the EPP plan is selected  and completes the EPP Booking. One of the responses to the execution of this API is the transaction reference/confirmation number.
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings'
     *
     * @param  \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest $body RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $content_type application/json (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsRequest($body, $authorization, $uuid, $accept, $client_id, $content_type, $offer_id, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookings'
            );
        }

        $resourcePath = '/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules
     *
     * To allow customers to view the payment breakdown details.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     * @param  bool $binary_data_flag This refer to the flag in case of binary file is require. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null, $binary_data_flag = null)
    {
        list($response) = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details, $next_start_index, $binary_data_flag);
        return $response;
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesWithHttpInfo
     *
     * To allow customers to view the payment breakdown details.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     * @param  bool $binary_data_flag This refer to the flag in case of binary file is require. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null, $binary_data_flag = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesRequest($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details, $next_start_index, $binary_data_flag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsync
     *
     * To allow customers to view the payment breakdown details.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     * @param  bool $binary_data_flag This refer to the flag in case of binary file is require. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsync($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null, $binary_data_flag = null)
    {
        return $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details, $next_start_index, $binary_data_flag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsyncWithHttpInfo
     *
     * To allow customers to view the payment breakdown details.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     * @param  bool $binary_data_flag This refer to the flag in case of binary file is require. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null, $binary_data_flag = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesRequest($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details, $next_start_index, $binary_data_flag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  float $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  float $tenor Tenure of loan in months (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     * @param  bool $binary_data_flag This refer to the flag in case of binary file is require. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedulesRequest($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null, $binary_data_flag = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules'
            );
        }
        // verify the required parameter 'loan_amount' is set
        if ($loan_amount === null || (is_array($loan_amount) && count($loan_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loan_amount when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules'
            );
        }
        // verify the required parameter 'tenor' is set
        if ($tenor === null || (is_array($tenor) && count($tenor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenor when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppRepaymentSchedules'
            );
        }

        $resourcePath = '/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/easyPaymentPlans/repaymentSchedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loan_amount !== null) {
            $queryParams['loanAmount'] = ObjectSerializer::toQueryValue($loan_amount, null);
        }
        // query params
        if ($tenor !== null) {
            $queryParams['tenor'] = ObjectSerializer::toQueryValue($tenor, null);
        }
        // query params
        if ($next_start_index !== null) {
            $queryParams['nextStartIndex'] = ObjectSerializer::toQueryValue($next_start_index, null);
        }
        // query params
        if ($binary_data_flag !== null) {
            $queryParams['binaryDataFlag'] = ObjectSerializer::toQueryValue($binary_data_flag, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules
     *
     * To allow customers to view the payment breakdown details.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  int $tenor Tenure of loan. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        list($response) = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details, $next_start_index);
        return $response;
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesWithHttpInfo
     *
     * To allow customers to view the payment breakdown details.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  int $tenor Tenure of loan. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesRequest($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details, $next_start_index);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesAsync
     *
     * To allow customers to view the payment breakdown details.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  int $tenor Tenure of loan. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesAsync($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        return $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details, $next_start_index)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesAsyncWithHttpInfo
     *
     * To allow customers to view the payment breakdown details.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  int $tenor Tenure of loan. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse';
        $request = $this->retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesRequest($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details, $next_start_index);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $loan_amount Loan amount for easy payment plan booking. (required)
     * @param  int $tenor Tenure of loan. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param  string $next_start_index In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesRequest($authorization, $uuid, $accept, $client_id, $offer_id, $loan_amount, $tenor, $client_details = null, $next_start_index = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules'
            );
        }
        // verify the required parameter 'loan_amount' is set
        if ($loan_amount === null || (is_array($loan_amount) && count($loan_amount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loan_amount when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules'
            );
        }
        // verify the required parameter 'tenor' is set
        if ($tenor === null || (is_array($tenor) && count($tenor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenor when calling retrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedules'
            );
        }

        $resourcePath = '/v1/prelogin/creditChargeCard/creditPlans/offers/{offerId}/loans/repaymentSchedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($loan_amount !== null) {
            $queryParams['loanAmount'] = ObjectSerializer::toQueryValue($loan_amount, null);
        }
        // query params
        if ($tenor !== null) {
            $queryParams['tenor'] = ObjectSerializer::toQueryValue($tenor, null);
        }
        // query params
        if ($next_start_index !== null) {
            $queryParams['nextStartIndex'] = ObjectSerializer::toQueryValue($next_start_index, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveDisbursementOptionsPreLogin
     *
     * Get the list of disbursement options and the details like bank details and billing address relevant to each option.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RetrieveDisbursementOptionsPreLoginResponse
     */
    public function retrieveDisbursementOptionsPreLogin($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null)
    {
        list($response) = $this->retrieveDisbursementOptionsPreLoginWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details);
        return $response;
    }

    /**
     * Operation retrieveDisbursementOptionsPreLoginWithHttpInfo
     *
     * Get the list of disbursement options and the details like bank details and billing address relevant to each option.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RetrieveDisbursementOptionsPreLoginResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveDisbursementOptionsPreLoginWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveDisbursementOptionsPreLoginResponse';
        $request = $this->retrieveDisbursementOptionsPreLoginRequest($authorization, $uuid, $accept, $client_id, $offer_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RetrieveDisbursementOptionsPreLoginResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveDisbursementOptionsPreLoginAsync
     *
     * Get the list of disbursement options and the details like bank details and billing address relevant to each option.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveDisbursementOptionsPreLoginAsync($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null)
    {
        return $this->retrieveDisbursementOptionsPreLoginAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveDisbursementOptionsPreLoginAsyncWithHttpInfo
     *
     * Get the list of disbursement options and the details like bank details and billing address relevant to each option.
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveDisbursementOptionsPreLoginAsyncWithHttpInfo($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\RetrieveDisbursementOptionsPreLoginResponse';
        $request = $this->retrieveDisbursementOptionsPreLoginRequest($authorization, $uuid, $accept, $client_id, $offer_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveDisbursementOptionsPreLogin'
     *
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id Client ID generated during application registration. (required)
     * @param  string $offer_id This Refers to the unique id for the Pre login offer. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveDisbursementOptionsPreLoginRequest($authorization, $uuid, $accept, $client_id, $offer_id, $client_details = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrieveDisbursementOptionsPreLogin'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling retrieveDisbursementOptionsPreLogin'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling retrieveDisbursementOptionsPreLogin'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling retrieveDisbursementOptionsPreLogin'
            );
        }
        // verify the required parameter 'offer_id' is set
        if ($offer_id === null || (is_array($offer_id) && count($offer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offer_id when calling retrieveDisbursementOptionsPreLogin'
            );
        }

        $resourcePath = '/v1/creditCardServices/offers/{offerId}/prelogin/loans/disbursementOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($offer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'offerId' . '}',
                ObjectSerializer::toPathValue($offer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AccountsAccountIdLoansCreditCheckSearchPost
     *
     * Credit Check based on Debt Service Ratio
     *
     * @param  \Swagger\Client\Model\CreditCheckRequest $body body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CreditCheckResponse
     */
    public function v1AccountsAccountIdLoansCreditCheckSearchPost($body, $authorization, $uuid, $accept, $client_id, $account_id, $client_details = null)
    {
        list($response) = $this->v1AccountsAccountIdLoansCreditCheckSearchPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $account_id, $client_details);
        return $response;
    }

    /**
     * Operation v1AccountsAccountIdLoansCreditCheckSearchPostWithHttpInfo
     *
     * Credit Check based on Debt Service Ratio
     *
     * @param  \Swagger\Client\Model\CreditCheckRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CreditCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AccountsAccountIdLoansCreditCheckSearchPostWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $account_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\CreditCheckResponse';
        $request = $this->v1AccountsAccountIdLoansCreditCheckSearchPostRequest($body, $authorization, $uuid, $accept, $client_id, $account_id, $client_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreditCheckResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AccountsAccountIdLoansCreditCheckSearchPostAsync
     *
     * Credit Check based on Debt Service Ratio
     *
     * @param  \Swagger\Client\Model\CreditCheckRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountsAccountIdLoansCreditCheckSearchPostAsync($body, $authorization, $uuid, $accept, $client_id, $account_id, $client_details = null)
    {
        return $this->v1AccountsAccountIdLoansCreditCheckSearchPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $account_id, $client_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AccountsAccountIdLoansCreditCheckSearchPostAsyncWithHttpInfo
     *
     * Credit Check based on Debt Service Ratio
     *
     * @param  \Swagger\Client\Model\CreditCheckRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AccountsAccountIdLoansCreditCheckSearchPostAsyncWithHttpInfo($body, $authorization, $uuid, $accept, $client_id, $account_id, $client_details = null)
    {
        $returnType = '\Swagger\Client\Model\CreditCheckResponse';
        $request = $this->v1AccountsAccountIdLoansCreditCheckSearchPostRequest($body, $authorization, $uuid, $accept, $client_id, $account_id, $client_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AccountsAccountIdLoansCreditCheckSearchPost'
     *
     * @param  \Swagger\Client\Model\CreditCheckRequest $body (required)
     * @param  string $authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param  string $uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param  string $accept Content-Type that are acceptable for the response. (required)
     * @param  string $client_id client id generated during consumer onboarding (required)
     * @param  string $account_id The account id  in encrypted format. (required)
     * @param  string $client_details This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v1AccountsAccountIdLoansCreditCheckSearchPostRequest($body, $authorization, $uuid, $accept, $client_id, $account_id, $client_details = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling v1AccountsAccountIdLoansCreditCheckSearchPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling v1AccountsAccountIdLoansCreditCheckSearchPost'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling v1AccountsAccountIdLoansCreditCheckSearchPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling v1AccountsAccountIdLoansCreditCheckSearchPost'
            );
        }
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling v1AccountsAccountIdLoansCreditCheckSearchPost'
            );
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling v1AccountsAccountIdLoansCreditCheckSearchPost'
            );
        }

        $resourcePath = '/v1/accounts/{accountId}/loans/creditCheck/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($uuid !== null) {
            $headerParams['uuid'] = ObjectSerializer::toHeaderValue($uuid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['client_id'] = ObjectSerializer::toHeaderValue($client_id);
        }
        // header params
        if ($client_details !== null) {
            $headerParams['clientDetails'] = ObjectSerializer::toHeaderValue($client_details);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
