# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OfferAndDecisionManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """This API is used to perform offer acceptance for Loan Top Up Application & final submit  # noqa: E501

        This API is used to perform offer acceptance for Loan Top Up Application & final submit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest body: ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """This API is used to perform offer acceptance for Loan Top Up Application & final submit  # noqa: E501

        This API is used to perform offer acceptance for Loan Top Up Application & final submit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest body: ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id', 'client_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `execute_application_processing_unsecured_loan_topup_offer_acceptance_and_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_details' in params:
            header_params['clientDetails'] = params['client_details']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/applicationProcessing/products/unsecuredLoans/topup/applications/{applicationId}/offerAcceptanceAndSubmission', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initiate_application_processing_unsecured_loan_topup(self, body, authorization, uuid, accept, client_id, content_type, **kwargs):  # noqa: E501
        """This API is used to create application for  loan top-up for existing credit card customer. This is for post login function  # noqa: E501

        This API is used to create application for  loan top-up for existing credit card customer. This is for post login function  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_application_processing_unsecured_loan_topup(body, authorization, uuid, accept, client_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InitiateApplicationProcessingUnsecuredLoanTopupRequest body: InitiateApplicationProcessingUnsecuredLoanTopupRequest (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: InitiateApplicationProcessingUnsecuredLoanTopupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initiate_application_processing_unsecured_loan_topup_with_http_info(body, authorization, uuid, accept, client_id, content_type, **kwargs)  # noqa: E501
        else:
            (data) = self.initiate_application_processing_unsecured_loan_topup_with_http_info(body, authorization, uuid, accept, client_id, content_type, **kwargs)  # noqa: E501
            return data

    def initiate_application_processing_unsecured_loan_topup_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, **kwargs):  # noqa: E501
        """This API is used to create application for  loan top-up for existing credit card customer. This is for post login function  # noqa: E501

        This API is used to create application for  loan top-up for existing credit card customer. This is for post login function  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_application_processing_unsecured_loan_topup_with_http_info(body, authorization, uuid, accept, client_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InitiateApplicationProcessingUnsecuredLoanTopupRequest body: InitiateApplicationProcessingUnsecuredLoanTopupRequest (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: InitiateApplicationProcessingUnsecuredLoanTopupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'client_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_application_processing_unsecured_loan_topup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `initiate_application_processing_unsecured_loan_topup`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `initiate_application_processing_unsecured_loan_topup`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `initiate_application_processing_unsecured_loan_topup`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `initiate_application_processing_unsecured_loan_topup`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `initiate_application_processing_unsecured_loan_topup`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `initiate_application_processing_unsecured_loan_topup`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_details' in params:
            header_params['clientDetails'] = params['client_details']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/applicationProcessing/products/unsecuredLoans/topup/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InitiateApplicationProcessingUnsecuredLoanTopupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_application_processing_unsecured_loan_topup_repayment_schedule(self, authorization, uuid, accept, client_id, content_type, loan_amount, insurance_premium_amount, fee_amount, loan_interest_rate, tenor, **kwargs):  # noqa: E501
        """This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit  # noqa: E501

        This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_application_processing_unsecured_loan_topup_repayment_schedule(authorization, uuid, accept, client_id, content_type, loan_amount, insurance_premium_amount, fee_amount, loan_interest_rate, tenor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param float loan_amount: Loan amount (required)
        :param float insurance_premium_amount: Insurance premium amount (required)
        :param float fee_amount: Fee amount (required)
        :param float loan_interest_rate: Loan interest rate (required)
        :param int tenor: Tenor (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_application_processing_unsecured_loan_topup_repayment_schedule_with_http_info(authorization, uuid, accept, client_id, content_type, loan_amount, insurance_premium_amount, fee_amount, loan_interest_rate, tenor, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_application_processing_unsecured_loan_topup_repayment_schedule_with_http_info(authorization, uuid, accept, client_id, content_type, loan_amount, insurance_premium_amount, fee_amount, loan_interest_rate, tenor, **kwargs)  # noqa: E501
            return data

    def retrieve_application_processing_unsecured_loan_topup_repayment_schedule_with_http_info(self, authorization, uuid, accept, client_id, content_type, loan_amount, insurance_premium_amount, fee_amount, loan_interest_rate, tenor, **kwargs):  # noqa: E501
        """This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit  # noqa: E501

        This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_application_processing_unsecured_loan_topup_repayment_schedule_with_http_info(authorization, uuid, accept, client_id, content_type, loan_amount, insurance_premium_amount, fee_amount, loan_interest_rate, tenor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param float loan_amount: Loan amount (required)
        :param float insurance_premium_amount: Insurance premium amount (required)
        :param float fee_amount: Fee amount (required)
        :param float loan_interest_rate: Loan interest rate (required)
        :param int tenor: Tenor (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'uuid', 'accept', 'client_id', 'content_type', 'loan_amount', 'insurance_premium_amount', 'fee_amount', 'loan_interest_rate', 'tenor', 'client_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_application_processing_unsecured_loan_topup_repayment_schedule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501
        # verify the required parameter 'loan_amount' is set
        if ('loan_amount' not in params or
                params['loan_amount'] is None):
            raise ValueError("Missing the required parameter `loan_amount` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501
        # verify the required parameter 'insurance_premium_amount' is set
        if ('insurance_premium_amount' not in params or
                params['insurance_premium_amount'] is None):
            raise ValueError("Missing the required parameter `insurance_premium_amount` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501
        # verify the required parameter 'fee_amount' is set
        if ('fee_amount' not in params or
                params['fee_amount'] is None):
            raise ValueError("Missing the required parameter `fee_amount` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501
        # verify the required parameter 'loan_interest_rate' is set
        if ('loan_interest_rate' not in params or
                params['loan_interest_rate'] is None):
            raise ValueError("Missing the required parameter `loan_interest_rate` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501
        # verify the required parameter 'tenor' is set
        if ('tenor' not in params or
                params['tenor'] is None):
            raise ValueError("Missing the required parameter `tenor` when calling `retrieve_application_processing_unsecured_loan_topup_repayment_schedule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_amount' in params:
            query_params.append(('loanAmount', params['loan_amount']))  # noqa: E501
        if 'insurance_premium_amount' in params:
            query_params.append(('insurancePremiumAmount', params['insurance_premium_amount']))  # noqa: E501
        if 'fee_amount' in params:
            query_params.append(('feeAmount', params['fee_amount']))  # noqa: E501
        if 'loan_interest_rate' in params:
            query_params.append(('loanInterestRate', params['loan_interest_rate']))  # noqa: E501
        if 'tenor' in params:
            query_params.append(('tenor', params['tenor']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_details' in params:
            header_params['clientDetails'] = params['client_details']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/applicationProcessing/products/unsecuredLoans/topup/repaymentSchedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_processing_unsecured_loan_topup_background_screening(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """This API is used to update a saved Loan top-up application & do background screening  # noqa: E501

        This API is used to update a saved Loan top-up application & do background screening  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_processing_unsecured_loan_topup_background_screening(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest body: UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_processing_unsecured_loan_topup_background_screening_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_processing_unsecured_loan_topup_background_screening_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def update_application_processing_unsecured_loan_topup_background_screening_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """This API is used to update a saved Loan top-up application & do background screening  # noqa: E501

        This API is used to update a saved Loan top-up application & do background screening  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_processing_unsecured_loan_topup_background_screening_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest body: UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id', 'client_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_processing_unsecured_loan_topup_background_screening" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application_processing_unsecured_loan_topup_background_screening`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_application_processing_unsecured_loan_topup_background_screening`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `update_application_processing_unsecured_loan_topup_background_screening`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `update_application_processing_unsecured_loan_topup_background_screening`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_application_processing_unsecured_loan_topup_background_screening`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `update_application_processing_unsecured_loan_topup_background_screening`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `update_application_processing_unsecured_loan_topup_background_screening`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_details' in params:
            header_params['clientDetails'] = params['client_details']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/applicationProcessing/products/unsecuredLoans/topup/applications/{applicationId}/backgroundScreening', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_processing_unsecured_loan_topup_in_principal_approval(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """This API is used to update a saved Loan top-up application and in principle approval  # noqa: E501

        This API is used to update a saved Loan top-up application and in principle approval  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_processing_unsecured_loan_topup_in_principal_approval(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestedLoanTopupDecision body: RequestedLoanTopupDecision (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_processing_unsecured_loan_topup_in_principal_approval_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_processing_unsecured_loan_topup_in_principal_approval_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs)  # noqa: E501
            return data

    def update_application_processing_unsecured_loan_topup_in_principal_approval_with_http_info(self, body, authorization, uuid, accept, client_id, content_type, application_id, **kwargs):  # noqa: E501
        """This API is used to update a saved Loan top-up application and in principle approval  # noqa: E501

        This API is used to update a saved Loan top-up application and in principle approval  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_processing_unsecured_loan_topup_in_principal_approval_with_http_info(body, authorization, uuid, accept, client_id, content_type, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestedLoanTopupDecision body: RequestedLoanTopupDecision (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param str content_type: application/json (required)
        :param str application_id: (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'uuid', 'accept', 'client_id', 'content_type', 'application_id', 'client_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_processing_unsecured_loan_topup_in_principal_approval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application_processing_unsecured_loan_topup_in_principal_approval`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_application_processing_unsecured_loan_topup_in_principal_approval`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `update_application_processing_unsecured_loan_topup_in_principal_approval`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `update_application_processing_unsecured_loan_topup_in_principal_approval`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `update_application_processing_unsecured_loan_topup_in_principal_approval`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `update_application_processing_unsecured_loan_topup_in_principal_approval`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `update_application_processing_unsecured_loan_topup_in_principal_approval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501
        if 'client_details' in params:
            header_params['clientDetails'] = params['client_details']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/applicationProcessing/products/unsecuredLoans/topup/applications/{applicationId}/inPrincipleApprovals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
