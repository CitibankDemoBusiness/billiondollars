# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_accounts_account_id_get(self, account_id, authorization, uuid, accept, client_id, **kwargs):  # noqa: E501
        """Retrieve Account Details  # noqa: E501

        This API returns additional account details than what is provided in the summary of all accounts. To retrieve the details, simply pass the account id returned to you from the account summary. Important! For PSD2, only Credit card, Checking and Saving account are returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_account_id_get(account_id, authorization, uuid, accept, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The account identifier in encrypted format.Typically, this is not displayed to the customer (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: client_id generated during consumer onboarding (required)
        :return: AccountDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_account_id_get_with_http_info(account_id, authorization, uuid, accept, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_account_id_get_with_http_info(account_id, authorization, uuid, accept, client_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_account_id_get_with_http_info(self, account_id, authorization, uuid, accept, client_id, **kwargs):  # noqa: E501
        """Retrieve Account Details  # noqa: E501

        This API returns additional account details than what is provided in the summary of all accounts. To retrieve the details, simply pass the account id returned to you from the account summary. Important! For PSD2, only Credit card, Checking and Saving account are returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_account_id_get_with_http_info(account_id, authorization, uuid, accept, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The account identifier in encrypted format.Typically, this is not displayed to the customer (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: client_id generated during consumer onboarding (required)
        :return: AccountDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'authorization', 'uuid', 'accept', 'client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_account_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `v1_accounts_account_id_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_accounts_account_id_get`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_accounts_account_id_get`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_accounts_account_id_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_accounts_account_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{accountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_account_id_transactions_get(self, account_id, authorization, uuid, accept, client_id, **kwargs):  # noqa: E501
        """Retrieve Transactions for Specific Account  # noqa: E501

        This API returns an array of transactions for the specified account. For investment transactions such as buying or selling a stock, they will be returned in the array investment Transaction. Important! For PSD2, only Credit card, Checking and Saving account are returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_account_id_transactions_get(account_id, authorization, uuid, accept, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The account identifier in encrypted format.Typically, this is not displayed to the customer. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: client_id generated during consumer onboarding (required)
        :param str transaction_status: Applicable for credit cards only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        :param str next_start_index: In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
        :param str request_size: Requested number of transactions.The maximum we can provide in one response is 50. If nothing is specified, we will return 20. Currently this field is not supported.
        :param str transaction_from_date: Starting range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products
        :param str transaction_to_date: End range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products
        :param str amount_from: Starting range of transaction amount. Note: Applicable for Investment accounts
        :param str amount_to: End range of transaction amount. Note: Applicable for Investment accounts
        :return: TransactionDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_account_id_transactions_get_with_http_info(account_id, authorization, uuid, accept, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_account_id_transactions_get_with_http_info(account_id, authorization, uuid, accept, client_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_account_id_transactions_get_with_http_info(self, account_id, authorization, uuid, accept, client_id, **kwargs):  # noqa: E501
        """Retrieve Transactions for Specific Account  # noqa: E501

        This API returns an array of transactions for the specified account. For investment transactions such as buying or selling a stock, they will be returned in the array investment Transaction. Important! For PSD2, only Credit card, Checking and Saving account are returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_account_id_transactions_get_with_http_info(account_id, authorization, uuid, accept, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The account identifier in encrypted format.Typically, this is not displayed to the customer. (required)
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: client_id generated during consumer onboarding (required)
        :param str transaction_status: Applicable for credit cards only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        :param str next_start_index: In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
        :param str request_size: Requested number of transactions.The maximum we can provide in one response is 50. If nothing is specified, we will return 20. Currently this field is not supported.
        :param str transaction_from_date: Starting range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products
        :param str transaction_to_date: End range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products
        :param str amount_from: Starting range of transaction amount. Note: Applicable for Investment accounts
        :param str amount_to: End range of transaction amount. Note: Applicable for Investment accounts
        :return: TransactionDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'authorization', 'uuid', 'accept', 'client_id', 'transaction_status', 'next_start_index', 'request_size', 'transaction_from_date', 'transaction_to_date', 'amount_from', 'amount_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_account_id_transactions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `v1_accounts_account_id_transactions_get`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_accounts_account_id_transactions_get`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_accounts_account_id_transactions_get`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_accounts_account_id_transactions_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_accounts_account_id_transactions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'transaction_status' in params:
            query_params.append(('transactionStatus', params['transaction_status']))  # noqa: E501
        if 'next_start_index' in params:
            query_params.append(('nextStartIndex', params['next_start_index']))  # noqa: E501
        if 'request_size' in params:
            query_params.append(('requestSize', params['request_size']))  # noqa: E501
        if 'transaction_from_date' in params:
            query_params.append(('transactionFromDate', params['transaction_from_date']))  # noqa: E501
        if 'transaction_to_date' in params:
            query_params.append(('transactionToDate', params['transaction_to_date']))  # noqa: E501
        if 'amount_from' in params:
            query_params.append(('amountFrom', params['amount_from']))  # noqa: E501
        if 'amount_to' in params:
            query_params.append(('amountTo', params['amount_to']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{accountId}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_accounts_get(self, authorization, uuid, accept, client_id, **kwargs):  # noqa: E501
        """Retrieve Summary of All Accounts  # noqa: E501

        This API returns a summary of all accounts held by a customer. If a customer has multiple but similar accounts, e.g. two savings accounts, the accounts will be returned in the array accountGroupSummary. Important! For PSD2, only Credit card, Checking and Saving account are returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_get(authorization, uuid, accept, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: client_id generated during consumer onboarding (required)
        :param str next_start_index: In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
        :return: AccountsGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_accounts_get_with_http_info(authorization, uuid, accept, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_accounts_get_with_http_info(authorization, uuid, accept, client_id, **kwargs)  # noqa: E501
            return data

    def v1_accounts_get_with_http_info(self, authorization, uuid, accept, client_id, **kwargs):  # noqa: E501
        """Retrieve Summary of All Accounts  # noqa: E501

        This API returns a summary of all accounts held by a customer. If a customer has multiple but similar accounts, e.g. two savings accounts, the accounts will be returned in the array accountGroupSummary. Important! For PSD2, only Credit card, Checking and Saving account are returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_accounts_get_with_http_info(authorization, uuid, accept, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: client_id generated during consumer onboarding (required)
        :param str next_start_index: In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
        :return: AccountsGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'uuid', 'accept', 'client_id', 'next_start_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_accounts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v1_accounts_get`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `v1_accounts_get`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `v1_accounts_get`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `v1_accounts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_start_index' in params:
            query_params.append(('nextStartIndex', params['next_start_index']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountsGroupList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
