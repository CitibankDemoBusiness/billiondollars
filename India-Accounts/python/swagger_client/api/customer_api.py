# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CustomerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sufficiency_of_funds(self, authorization, uuid, accept, client_id, sufficiency_check_amount, account_id, currency_code, **kwargs):  # noqa: E501
        """Check Availability of Funds  # noqa: E501

        This API returns a yes or no, based on the availability of requested funds in the customer’s account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sufficiency_of_funds(authorization, uuid, accept, client_id, sufficiency_check_amount, account_id, currency_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param float sufficiency_check_amount: Specifies amount to check account for sufficiency. (required)
        :param str account_id: IBAN number of the customer. (required)
        :param str currency_code: Currency Code in ISO 4217 format (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: SufficiencyOfFundsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sufficiency_of_funds_with_http_info(authorization, uuid, accept, client_id, sufficiency_check_amount, account_id, currency_code, **kwargs)  # noqa: E501
        else:
            (data) = self.sufficiency_of_funds_with_http_info(authorization, uuid, accept, client_id, sufficiency_check_amount, account_id, currency_code, **kwargs)  # noqa: E501
            return data

    def sufficiency_of_funds_with_http_info(self, authorization, uuid, accept, client_id, sufficiency_check_amount, account_id, currency_code, **kwargs):  # noqa: E501
        """Check Availability of Funds  # noqa: E501

        This API returns a yes or no, based on the availability of requested funds in the customer’s account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sufficiency_of_funds_with_http_info(authorization, uuid, accept, client_id, sufficiency_check_amount, account_id, currency_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ==. (required)
        :param str uuid: 128 bit random UUID generated uniquely for every request. (required)
        :param str accept: Content-Type that are acceptable for the response. (required)
        :param str client_id: Client ID generated during application registration. (required)
        :param float sufficiency_check_amount: Specifies amount to check account for sufficiency. (required)
        :param str account_id: IBAN number of the customer. (required)
        :param str currency_code: Currency Code in ISO 4217 format (required)
        :param str client_details: This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId
        :return: SufficiencyOfFundsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'uuid', 'accept', 'client_id', 'sufficiency_check_amount', 'account_id', 'currency_code', 'client_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sufficiency_of_funds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `sufficiency_of_funds`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `sufficiency_of_funds`")  # noqa: E501
        # verify the required parameter 'accept' is set
        if ('accept' not in params or
                params['accept'] is None):
            raise ValueError("Missing the required parameter `accept` when calling `sufficiency_of_funds`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `sufficiency_of_funds`")  # noqa: E501
        # verify the required parameter 'sufficiency_check_amount' is set
        if ('sufficiency_check_amount' not in params or
                params['sufficiency_check_amount'] is None):
            raise ValueError("Missing the required parameter `sufficiency_check_amount` when calling `sufficiency_of_funds`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `sufficiency_of_funds`")  # noqa: E501
        # verify the required parameter 'currency_code' is set
        if ('currency_code' not in params or
                params['currency_code'] is None):
            raise ValueError("Missing the required parameter `currency_code` when calling `sufficiency_of_funds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'sufficiency_check_amount' in params:
            query_params.append(('sufficiencyCheckAmount', params['sufficiency_check_amount']))  # noqa: E501
        if 'currency_code' in params:
            query_params.append(('currencyCode', params['currency_code']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'uuid' in params:
            header_params['uuid'] = params['uuid']  # noqa: E501
        if 'accept' in params:
            header_params['Accept'] = params['accept']  # noqa: E501
        if 'client_id' in params:
            header_params['client_id'] = params['client_id']  # noqa: E501
        if 'client_details' in params:
            header_params['clientDetails'] = params['client_details']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{accountId}/funds/sufficiencyCheck', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SufficiencyOfFundsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
