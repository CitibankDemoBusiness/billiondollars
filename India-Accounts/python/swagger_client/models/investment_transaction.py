# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvestmentTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_date': 'date',
        'order_reference_id': 'str',
        'order_type': 'str',
        'code': 'str',
        'name': 'str',
        'currency_code': 'str',
        'transaction_amount': 'float',
        'price': 'float',
        'order_status': 'str',
        'gross_amount': 'float',
        'order_quantity': 'float',
        'order_medium': 'str',
        'filled_quantity': 'float',
        'balance_quantity': 'float',
        'stock_market_code': 'str'
    }

    attribute_map = {
        'order_date': 'orderDate',
        'order_reference_id': 'orderReferenceId',
        'order_type': 'orderType',
        'code': 'code',
        'name': 'name',
        'currency_code': 'currencyCode',
        'transaction_amount': 'transactionAmount',
        'price': 'price',
        'order_status': 'orderStatus',
        'gross_amount': 'grossAmount',
        'order_quantity': 'orderQuantity',
        'order_medium': 'orderMedium',
        'filled_quantity': 'filledQuantity',
        'balance_quantity': 'balanceQuantity',
        'stock_market_code': 'stockMarketCode'
    }

    def __init__(self, order_date=None, order_reference_id=None, order_type=None, code=None, name=None, currency_code=None, transaction_amount=None, price=None, order_status=None, gross_amount=None, order_quantity=None, order_medium=None, filled_quantity=None, balance_quantity=None, stock_market_code=None):  # noqa: E501
        """InvestmentTransaction - a model defined in Swagger"""  # noqa: E501
        self._order_date = None
        self._order_reference_id = None
        self._order_type = None
        self._code = None
        self._name = None
        self._currency_code = None
        self._transaction_amount = None
        self._price = None
        self._order_status = None
        self._gross_amount = None
        self._order_quantity = None
        self._order_medium = None
        self._filled_quantity = None
        self._balance_quantity = None
        self._stock_market_code = None
        self.discriminator = None
        if order_date is not None:
            self.order_date = order_date
        if order_reference_id is not None:
            self.order_reference_id = order_reference_id
        if order_type is not None:
            self.order_type = order_type
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if currency_code is not None:
            self.currency_code = currency_code
        if transaction_amount is not None:
            self.transaction_amount = transaction_amount
        if price is not None:
            self.price = price
        if order_status is not None:
            self.order_status = order_status
        if gross_amount is not None:
            self.gross_amount = gross_amount
        if order_quantity is not None:
            self.order_quantity = order_quantity
        if order_medium is not None:
            self.order_medium = order_medium
        if filled_quantity is not None:
            self.filled_quantity = filled_quantity
        if balance_quantity is not None:
            self.balance_quantity = balance_quantity
        if stock_market_code is not None:
            self.stock_market_code = stock_market_code

    @property
    def order_date(self):
        """Gets the order_date of this InvestmentTransaction.  # noqa: E501

        Order date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting  # noqa: E501

        :return: The order_date of this InvestmentTransaction.  # noqa: E501
        :rtype: date
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this InvestmentTransaction.

        Order date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting  # noqa: E501

        :param order_date: The order_date of this InvestmentTransaction.  # noqa: E501
        :type: date
        """

        self._order_date = order_date

    @property
    def order_reference_id(self):
        """Gets the order_reference_id of this InvestmentTransaction.  # noqa: E501

        Reference Id to uniquely identify the investment transaction  # noqa: E501

        :return: The order_reference_id of this InvestmentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._order_reference_id

    @order_reference_id.setter
    def order_reference_id(self, order_reference_id):
        """Sets the order_reference_id of this InvestmentTransaction.

        Reference Id to uniquely identify the investment transaction  # noqa: E501

        :param order_reference_id: The order_reference_id of this InvestmentTransaction.  # noqa: E501
        :type: str
        """

        self._order_reference_id = order_reference_id

    @property
    def order_type(self):
        """Gets the order_type of this InvestmentTransaction.  # noqa: E501

        This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderType} resource to get possible value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The order_type of this InvestmentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this InvestmentTransaction.

        This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderType} resource to get possible value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param order_type: The order_type of this InvestmentTransaction.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def code(self):
        """Gets the code of this InvestmentTransaction.  # noqa: E501

        Order code to uniquely identify the transaction,  # noqa: E501

        :return: The code of this InvestmentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InvestmentTransaction.

        Order code to uniquely identify the transaction,  # noqa: E501

        :param code: The code of this InvestmentTransaction.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this InvestmentTransaction.  # noqa: E501

        Unique name  for fund/stock  # noqa: E501

        :return: The name of this InvestmentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvestmentTransaction.

        Unique name  for fund/stock  # noqa: E501

        :param name: The name of this InvestmentTransaction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def currency_code(self):
        """Gets the currency_code of this InvestmentTransaction.  # noqa: E501

        The currency code of the transaction in ISO 4217 format,  # noqa: E501

        :return: The currency_code of this InvestmentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this InvestmentTransaction.

        The currency code of the transaction in ISO 4217 format,  # noqa: E501

        :param currency_code: The currency_code of this InvestmentTransaction.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this InvestmentTransaction.  # noqa: E501

        Transaction amount in local currency.  # noqa: E501

        :return: The transaction_amount of this InvestmentTransaction.  # noqa: E501
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this InvestmentTransaction.

        Transaction amount in local currency.  # noqa: E501

        :param transaction_amount: The transaction_amount of this InvestmentTransaction.  # noqa: E501
        :type: float
        """

        self._transaction_amount = transaction_amount

    @property
    def price(self):
        """Gets the price of this InvestmentTransaction.  # noqa: E501

        Order price of  trade  # noqa: E501

        :return: The price of this InvestmentTransaction.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InvestmentTransaction.

        Order price of  trade  # noqa: E501

        :param price: The price of this InvestmentTransaction.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def order_status(self):
        """Gets the order_status of this InvestmentTransaction.  # noqa: E501

        This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderStatus} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The order_status of this InvestmentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this InvestmentTransaction.

        This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderStatus} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param order_status: The order_status of this InvestmentTransaction.  # noqa: E501
        :type: str
        """

        self._order_status = order_status

    @property
    def gross_amount(self):
        """Gets the gross_amount of this InvestmentTransaction.  # noqa: E501

        The total amount of the transaction  # noqa: E501

        :return: The gross_amount of this InvestmentTransaction.  # noqa: E501
        :rtype: float
        """
        return self._gross_amount

    @gross_amount.setter
    def gross_amount(self, gross_amount):
        """Sets the gross_amount of this InvestmentTransaction.

        The total amount of the transaction  # noqa: E501

        :param gross_amount: The gross_amount of this InvestmentTransaction.  # noqa: E501
        :type: float
        """

        self._gross_amount = gross_amount

    @property
    def order_quantity(self):
        """Gets the order_quantity of this InvestmentTransaction.  # noqa: E501

        Total number of units ordered  # noqa: E501

        :return: The order_quantity of this InvestmentTransaction.  # noqa: E501
        :rtype: float
        """
        return self._order_quantity

    @order_quantity.setter
    def order_quantity(self, order_quantity):
        """Sets the order_quantity of this InvestmentTransaction.

        Total number of units ordered  # noqa: E501

        :param order_quantity: The order_quantity of this InvestmentTransaction.  # noqa: E501
        :type: float
        """

        self._order_quantity = order_quantity

    @property
    def order_medium(self):
        """Gets the order_medium of this InvestmentTransaction.  # noqa: E501

        The medium used by customer to place order.This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderMedium} resource to get possible values of This field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The order_medium of this InvestmentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._order_medium

    @order_medium.setter
    def order_medium(self, order_medium):
        """Sets the order_medium of this InvestmentTransaction.

        The medium used by customer to place order.This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderMedium} resource to get possible values of This field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param order_medium: The order_medium of this InvestmentTransaction.  # noqa: E501
        :type: str
        """

        self._order_medium = order_medium

    @property
    def filled_quantity(self):
        """Gets the filled_quantity of this InvestmentTransaction.  # noqa: E501

        Number of units received  # noqa: E501

        :return: The filled_quantity of this InvestmentTransaction.  # noqa: E501
        :rtype: float
        """
        return self._filled_quantity

    @filled_quantity.setter
    def filled_quantity(self, filled_quantity):
        """Sets the filled_quantity of this InvestmentTransaction.

        Number of units received  # noqa: E501

        :param filled_quantity: The filled_quantity of this InvestmentTransaction.  # noqa: E501
        :type: float
        """

        self._filled_quantity = filled_quantity

    @property
    def balance_quantity(self):
        """Gets the balance_quantity of this InvestmentTransaction.  # noqa: E501

        Number of units not received  # noqa: E501

        :return: The balance_quantity of this InvestmentTransaction.  # noqa: E501
        :rtype: float
        """
        return self._balance_quantity

    @balance_quantity.setter
    def balance_quantity(self, balance_quantity):
        """Sets the balance_quantity of this InvestmentTransaction.

        Number of units not received  # noqa: E501

        :param balance_quantity: The balance_quantity of this InvestmentTransaction.  # noqa: E501
        :type: float
        """

        self._balance_quantity = balance_quantity

    @property
    def stock_market_code(self):
        """Gets the stock_market_code of this InvestmentTransaction.  # noqa: E501

        Trading market code for securities  # noqa: E501

        :return: The stock_market_code of this InvestmentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._stock_market_code

    @stock_market_code.setter
    def stock_market_code(self, stock_market_code):
        """Sets the stock_market_code of this InvestmentTransaction.

        Trading market code for securities  # noqa: E501

        :param stock_market_code: The stock_market_code of this InvestmentTransaction.  # noqa: E501
        :type: str
        """

        self._stock_market_code = stock_market_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvestmentTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvestmentTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
