# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BeneficiaryBankDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'full_name': 'str',
        'display_account_number': 'str',
        'bank_name': 'str',
        'bank_code': 'str',
        'account_number': 'str'
    }

    attribute_map = {
        'full_name': 'fullName',
        'display_account_number': 'displayAccountNumber',
        'bank_name': 'bankName',
        'bank_code': 'bankCode',
        'account_number': 'accountNumber'
    }

    def __init__(self, full_name=None, display_account_number=None, bank_name=None, bank_code=None, account_number=None):  # noqa: E501
        """BeneficiaryBankDetails - a model defined in Swagger"""  # noqa: E501
        self._full_name = None
        self._display_account_number = None
        self._bank_name = None
        self._bank_code = None
        self._account_number = None
        self.discriminator = None
        self.full_name = full_name
        self.display_account_number = display_account_number
        self.bank_name = bank_name
        self.bank_code = bank_code
        if account_number is not None:
            self.account_number = account_number

    @property
    def full_name(self):
        """Gets the full_name of this BeneficiaryBankDetails.  # noqa: E501

        Name of the Beneficiary.  # noqa: E501

        :return: The full_name of this BeneficiaryBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this BeneficiaryBankDetails.

        Name of the Beneficiary.  # noqa: E501

        :param full_name: The full_name of this BeneficiaryBankDetails.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def display_account_number(self):
        """Gets the display_account_number of this BeneficiaryBankDetails.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this BeneficiaryBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this BeneficiaryBankDetails.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this BeneficiaryBankDetails.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def bank_name(self):
        """Gets the bank_name of this BeneficiaryBankDetails.  # noqa: E501

        Name of the bank.  # noqa: E501

        :return: The bank_name of this BeneficiaryBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BeneficiaryBankDetails.

        Name of the bank.  # noqa: E501

        :param bank_name: The bank_name of this BeneficiaryBankDetails.  # noqa: E501
        :type: str
        """
        if bank_name is None:
            raise ValueError("Invalid value for `bank_name`, must not be `None`")  # noqa: E501

        self._bank_name = bank_name

    @property
    def bank_code(self):
        """Gets the bank_code of this BeneficiaryBankDetails.  # noqa: E501

        The bank code of the external payee account.  # noqa: E501

        :return: The bank_code of this BeneficiaryBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this BeneficiaryBankDetails.

        The bank code of the external payee account.  # noqa: E501

        :param bank_code: The bank_code of this BeneficiaryBankDetails.  # noqa: E501
        :type: str
        """
        if bank_code is None:
            raise ValueError("Invalid value for `bank_code`, must not be `None`")  # noqa: E501

        self._bank_code = bank_code

    @property
    def account_number(self):
        """Gets the account_number of this BeneficiaryBankDetails.  # noqa: E501

        Account number of the beneficiary.  # noqa: E501

        :return: The account_number of this BeneficiaryBankDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BeneficiaryBankDetails.

        Account number of the beneficiary.  # noqa: E501

        :param account_number: The account_number of this BeneficiaryBankDetails.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BeneficiaryBankDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeneficiaryBankDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
