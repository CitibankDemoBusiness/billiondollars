# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditCardAccountBalanceSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_disputed_transaction_amount': 'float',
        'current_outstanding_amount': 'float',
        'current_accrued_interest': 'float',
        'payment_due_amount': 'float',
        'available_point_balance': 'float',
        'partial_response_information': 'list[PartialResponseInformation]'
    }

    attribute_map = {
        'total_disputed_transaction_amount': 'totalDisputedTransactionAmount',
        'current_outstanding_amount': 'currentOutstandingAmount',
        'current_accrued_interest': 'currentAccruedInterest',
        'payment_due_amount': 'paymentDueAmount',
        'available_point_balance': 'availablePointBalance',
        'partial_response_information': 'partialResponseInformation'
    }

    def __init__(self, total_disputed_transaction_amount=None, current_outstanding_amount=None, current_accrued_interest=None, payment_due_amount=None, available_point_balance=None, partial_response_information=None):  # noqa: E501
        """CreditCardAccountBalanceSummary - a model defined in Swagger"""  # noqa: E501
        self._total_disputed_transaction_amount = None
        self._current_outstanding_amount = None
        self._current_accrued_interest = None
        self._payment_due_amount = None
        self._available_point_balance = None
        self._partial_response_information = None
        self.discriminator = None
        if total_disputed_transaction_amount is not None:
            self.total_disputed_transaction_amount = total_disputed_transaction_amount
        self.current_outstanding_amount = current_outstanding_amount
        self.current_accrued_interest = current_accrued_interest
        self.payment_due_amount = payment_due_amount
        if available_point_balance is not None:
            self.available_point_balance = available_point_balance
        if partial_response_information is not None:
            self.partial_response_information = partial_response_information

    @property
    def total_disputed_transaction_amount(self):
        """Gets the total_disputed_transaction_amount of this CreditCardAccountBalanceSummary.  # noqa: E501

        This is the total disputed transaction amount.  # noqa: E501

        :return: The total_disputed_transaction_amount of this CreditCardAccountBalanceSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_disputed_transaction_amount

    @total_disputed_transaction_amount.setter
    def total_disputed_transaction_amount(self, total_disputed_transaction_amount):
        """Sets the total_disputed_transaction_amount of this CreditCardAccountBalanceSummary.

        This is the total disputed transaction amount.  # noqa: E501

        :param total_disputed_transaction_amount: The total_disputed_transaction_amount of this CreditCardAccountBalanceSummary.  # noqa: E501
        :type: float
        """

        self._total_disputed_transaction_amount = total_disputed_transaction_amount

    @property
    def current_outstanding_amount(self):
        """Gets the current_outstanding_amount of this CreditCardAccountBalanceSummary.  # noqa: E501

        This includes the current intra-day transactions which yet to be posted on card.  # noqa: E501

        :return: The current_outstanding_amount of this CreditCardAccountBalanceSummary.  # noqa: E501
        :rtype: float
        """
        return self._current_outstanding_amount

    @current_outstanding_amount.setter
    def current_outstanding_amount(self, current_outstanding_amount):
        """Sets the current_outstanding_amount of this CreditCardAccountBalanceSummary.

        This includes the current intra-day transactions which yet to be posted on card.  # noqa: E501

        :param current_outstanding_amount: The current_outstanding_amount of this CreditCardAccountBalanceSummary.  # noqa: E501
        :type: float
        """
        if current_outstanding_amount is None:
            raise ValueError("Invalid value for `current_outstanding_amount`, must not be `None`")  # noqa: E501

        self._current_outstanding_amount = current_outstanding_amount

    @property
    def current_accrued_interest(self):
        """Gets the current_accrued_interest of this CreditCardAccountBalanceSummary.  # noqa: E501

        Interest which has been accrued till last accrual date.  # noqa: E501

        :return: The current_accrued_interest of this CreditCardAccountBalanceSummary.  # noqa: E501
        :rtype: float
        """
        return self._current_accrued_interest

    @current_accrued_interest.setter
    def current_accrued_interest(self, current_accrued_interest):
        """Sets the current_accrued_interest of this CreditCardAccountBalanceSummary.

        Interest which has been accrued till last accrual date.  # noqa: E501

        :param current_accrued_interest: The current_accrued_interest of this CreditCardAccountBalanceSummary.  # noqa: E501
        :type: float
        """
        if current_accrued_interest is None:
            raise ValueError("Invalid value for `current_accrued_interest`, must not be `None`")  # noqa: E501

        self._current_accrued_interest = current_accrued_interest

    @property
    def payment_due_amount(self):
        """Gets the payment_due_amount of this CreditCardAccountBalanceSummary.  # noqa: E501

        Total amount customer needs to pay in order to clear the balance.  # noqa: E501

        :return: The payment_due_amount of this CreditCardAccountBalanceSummary.  # noqa: E501
        :rtype: float
        """
        return self._payment_due_amount

    @payment_due_amount.setter
    def payment_due_amount(self, payment_due_amount):
        """Sets the payment_due_amount of this CreditCardAccountBalanceSummary.

        Total amount customer needs to pay in order to clear the balance.  # noqa: E501

        :param payment_due_amount: The payment_due_amount of this CreditCardAccountBalanceSummary.  # noqa: E501
        :type: float
        """
        if payment_due_amount is None:
            raise ValueError("Invalid value for `payment_due_amount`, must not be `None`")  # noqa: E501

        self._payment_due_amount = payment_due_amount

    @property
    def available_point_balance(self):
        """Gets the available_point_balance of this CreditCardAccountBalanceSummary.  # noqa: E501

        Available reward points on the credit card  # noqa: E501

        :return: The available_point_balance of this CreditCardAccountBalanceSummary.  # noqa: E501
        :rtype: float
        """
        return self._available_point_balance

    @available_point_balance.setter
    def available_point_balance(self, available_point_balance):
        """Sets the available_point_balance of this CreditCardAccountBalanceSummary.

        Available reward points on the credit card  # noqa: E501

        :param available_point_balance: The available_point_balance of this CreditCardAccountBalanceSummary.  # noqa: E501
        :type: float
        """

        self._available_point_balance = available_point_balance

    @property
    def partial_response_information(self):
        """Gets the partial_response_information of this CreditCardAccountBalanceSummary.  # noqa: E501

        Partial success response  # noqa: E501

        :return: The partial_response_information of this CreditCardAccountBalanceSummary.  # noqa: E501
        :rtype: list[PartialResponseInformation]
        """
        return self._partial_response_information

    @partial_response_information.setter
    def partial_response_information(self, partial_response_information):
        """Sets the partial_response_information of this CreditCardAccountBalanceSummary.

        Partial success response  # noqa: E501

        :param partial_response_information: The partial_response_information of this CreditCardAccountBalanceSummary.  # noqa: E501
        :type: list[PartialResponseInformation]
        """

        self._partial_response_information = partial_response_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardAccountBalanceSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardAccountBalanceSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
