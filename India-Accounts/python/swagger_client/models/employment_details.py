# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmploymentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employer_name': 'str',
        'job_title': 'str',
        'industry_code': 'str',
        'business_nature': 'str',
        'employment_duration_in_years': 'int',
        'employment_duration_in_months': 'int',
        'employment_status': 'str',
        'years_in_industry': 'int',
        'months_in_industry': 'int'
    }

    attribute_map = {
        'employer_name': 'employerName',
        'job_title': 'jobTitle',
        'industry_code': 'industryCode',
        'business_nature': 'businessNature',
        'employment_duration_in_years': 'employmentDurationInYears',
        'employment_duration_in_months': 'employmentDurationInMonths',
        'employment_status': 'employmentStatus',
        'years_in_industry': 'yearsInIndustry',
        'months_in_industry': 'monthsInIndustry'
    }

    def __init__(self, employer_name=None, job_title=None, industry_code=None, business_nature=None, employment_duration_in_years=None, employment_duration_in_months=None, employment_status=None, years_in_industry=None, months_in_industry=None):  # noqa: E501
        """EmploymentDetails - a model defined in Swagger"""  # noqa: E501
        self._employer_name = None
        self._job_title = None
        self._industry_code = None
        self._business_nature = None
        self._employment_duration_in_years = None
        self._employment_duration_in_months = None
        self._employment_status = None
        self._years_in_industry = None
        self._months_in_industry = None
        self.discriminator = None
        if employer_name is not None:
            self.employer_name = employer_name
        if job_title is not None:
            self.job_title = job_title
        if industry_code is not None:
            self.industry_code = industry_code
        if business_nature is not None:
            self.business_nature = business_nature
        if employment_duration_in_years is not None:
            self.employment_duration_in_years = employment_duration_in_years
        if employment_duration_in_months is not None:
            self.employment_duration_in_months = employment_duration_in_months
        if employment_status is not None:
            self.employment_status = employment_status
        if years_in_industry is not None:
            self.years_in_industry = years_in_industry
        if months_in_industry is not None:
            self.months_in_industry = months_in_industry

    @property
    def employer_name(self):
        """Gets the employer_name of this EmploymentDetails.  # noqa: E501

        Name of the employer.  # noqa: E501

        :return: The employer_name of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._employer_name

    @employer_name.setter
    def employer_name(self, employer_name):
        """Sets the employer_name of this EmploymentDetails.

        Name of the employer.  # noqa: E501

        :param employer_name: The employer_name of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._employer_name = employer_name

    @property
    def job_title(self):
        """Gets the job_title of this EmploymentDetails.  # noqa: E501

        Job Title. This is a reference data field. Please use /v1/utilities/referenceData/{jobTitle} resource to get valid value of this field with description.  # noqa: E501

        :return: The job_title of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this EmploymentDetails.

        Job Title. This is a reference data field. Please use /v1/utilities/referenceData/{jobTitle} resource to get valid value of this field with description.  # noqa: E501

        :param job_title: The job_title of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def industry_code(self):
        """Gets the industry_code of this EmploymentDetails.  # noqa: E501

        Code of the industry of employment. This is a reference data field. Please use /v1/utilities/referenceData/{industryCode} resource to get valid value of this field with description.  # noqa: E501

        :return: The industry_code of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._industry_code

    @industry_code.setter
    def industry_code(self, industry_code):
        """Sets the industry_code of this EmploymentDetails.

        Code of the industry of employment. This is a reference data field. Please use /v1/utilities/referenceData/{industryCode} resource to get valid value of this field with description.  # noqa: E501

        :param industry_code: The industry_code of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._industry_code = industry_code

    @property
    def business_nature(self):
        """Gets the business_nature of this EmploymentDetails.  # noqa: E501

        Business nature of the applicant This is a reference data field. Please use /v1/utilities/referenceData/{businessNature} resource to get valid value of this field with description.  # noqa: E501

        :return: The business_nature of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._business_nature

    @business_nature.setter
    def business_nature(self, business_nature):
        """Sets the business_nature of this EmploymentDetails.

        Business nature of the applicant This is a reference data field. Please use /v1/utilities/referenceData/{businessNature} resource to get valid value of this field with description.  # noqa: E501

        :param business_nature: The business_nature of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._business_nature = business_nature

    @property
    def employment_duration_in_years(self):
        """Gets the employment_duration_in_years of this EmploymentDetails.  # noqa: E501

        Employment duration in years  # noqa: E501

        :return: The employment_duration_in_years of this EmploymentDetails.  # noqa: E501
        :rtype: int
        """
        return self._employment_duration_in_years

    @employment_duration_in_years.setter
    def employment_duration_in_years(self, employment_duration_in_years):
        """Sets the employment_duration_in_years of this EmploymentDetails.

        Employment duration in years  # noqa: E501

        :param employment_duration_in_years: The employment_duration_in_years of this EmploymentDetails.  # noqa: E501
        :type: int
        """

        self._employment_duration_in_years = employment_duration_in_years

    @property
    def employment_duration_in_months(self):
        """Gets the employment_duration_in_months of this EmploymentDetails.  # noqa: E501

        Employment duration in months  # noqa: E501

        :return: The employment_duration_in_months of this EmploymentDetails.  # noqa: E501
        :rtype: int
        """
        return self._employment_duration_in_months

    @employment_duration_in_months.setter
    def employment_duration_in_months(self, employment_duration_in_months):
        """Sets the employment_duration_in_months of this EmploymentDetails.

        Employment duration in months  # noqa: E501

        :param employment_duration_in_months: The employment_duration_in_months of this EmploymentDetails.  # noqa: E501
        :type: int
        """

        self._employment_duration_in_months = employment_duration_in_months

    @property
    def employment_status(self):
        """Gets the employment_status of this EmploymentDetails.  # noqa: E501

        Status of the employment.This is a reference data field. Please use /v1/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description.  # noqa: E501

        :return: The employment_status of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this EmploymentDetails.

        Status of the employment.This is a reference data field. Please use /v1/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description.  # noqa: E501

        :param employment_status: The employment_status of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._employment_status = employment_status

    @property
    def years_in_industry(self):
        """Gets the years_in_industry of this EmploymentDetails.  # noqa: E501

        Years spent in industry  # noqa: E501

        :return: The years_in_industry of this EmploymentDetails.  # noqa: E501
        :rtype: int
        """
        return self._years_in_industry

    @years_in_industry.setter
    def years_in_industry(self, years_in_industry):
        """Sets the years_in_industry of this EmploymentDetails.

        Years spent in industry  # noqa: E501

        :param years_in_industry: The years_in_industry of this EmploymentDetails.  # noqa: E501
        :type: int
        """

        self._years_in_industry = years_in_industry

    @property
    def months_in_industry(self):
        """Gets the months_in_industry of this EmploymentDetails.  # noqa: E501

        Months spent in industry  # noqa: E501

        :return: The months_in_industry of this EmploymentDetails.  # noqa: E501
        :rtype: int
        """
        return self._months_in_industry

    @months_in_industry.setter
    def months_in_industry(self, months_in_industry):
        """Sets the months_in_industry of this EmploymentDetails.

        Months spent in industry  # noqa: E501

        :param months_in_industry: The months_in_industry of this EmploymentDetails.  # noqa: E501
        :type: int
        """

        self._months_in_industry = months_in_industry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmploymentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmploymentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
