# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'str',
        'product_code': 'str',
        'display_account_number': 'str',
        'original_principal_amount': 'float',
        'current_principal_amount': 'float',
        'outstanding_balance': 'float',
        'currency_code': 'str',
        'maturity_date': 'date',
        'opening_date': 'date',
        'last_payment_date': 'date',
        'last_payment_amount': 'float',
        'interest_amount': 'float',
        'interest_accumulation_period': 'str',
        'next_payment_amount': 'float',
        'next_payment_date': 'date',
        'payment_frequency': 'str',
        'interest_type': 'str',
        'interest_rate': 'float',
        'effective_interest_rate': 'float',
        'installment_amount': 'float',
        'remaining_term_number': 'float',
        'past_due_amount': 'float',
        'paid_principal_amount': 'float',
        'late_charge_amount': 'float'
    }

    attribute_map = {
        'product_name': 'productName',
        'product_code': 'productCode',
        'display_account_number': 'displayAccountNumber',
        'original_principal_amount': 'originalPrincipalAmount',
        'current_principal_amount': 'currentPrincipalAmount',
        'outstanding_balance': 'outstandingBalance',
        'currency_code': 'currencyCode',
        'maturity_date': 'maturityDate',
        'opening_date': 'openingDate',
        'last_payment_date': 'lastPaymentDate',
        'last_payment_amount': 'lastPaymentAmount',
        'interest_amount': 'interestAmount',
        'interest_accumulation_period': 'interestAccumulationPeriod',
        'next_payment_amount': 'nextPaymentAmount',
        'next_payment_date': 'nextPaymentDate',
        'payment_frequency': 'paymentFrequency',
        'interest_type': 'interestType',
        'interest_rate': 'interestRate',
        'effective_interest_rate': 'effectiveInterestRate',
        'installment_amount': 'installmentAmount',
        'remaining_term_number': 'remainingTermNumber',
        'past_due_amount': 'pastDueAmount',
        'paid_principal_amount': 'paidPrincipalAmount',
        'late_charge_amount': 'lateChargeAmount'
    }

    def __init__(self, product_name=None, product_code=None, display_account_number=None, original_principal_amount=None, current_principal_amount=None, outstanding_balance=None, currency_code=None, maturity_date=None, opening_date=None, last_payment_date=None, last_payment_amount=None, interest_amount=None, interest_accumulation_period=None, next_payment_amount=None, next_payment_date=None, payment_frequency=None, interest_type=None, interest_rate=None, effective_interest_rate=None, installment_amount=None, remaining_term_number=None, past_due_amount=None, paid_principal_amount=None, late_charge_amount=None):  # noqa: E501
        """LoanAccount - a model defined in Swagger"""  # noqa: E501
        self._product_name = None
        self._product_code = None
        self._display_account_number = None
        self._original_principal_amount = None
        self._current_principal_amount = None
        self._outstanding_balance = None
        self._currency_code = None
        self._maturity_date = None
        self._opening_date = None
        self._last_payment_date = None
        self._last_payment_amount = None
        self._interest_amount = None
        self._interest_accumulation_period = None
        self._next_payment_amount = None
        self._next_payment_date = None
        self._payment_frequency = None
        self._interest_type = None
        self._interest_rate = None
        self._effective_interest_rate = None
        self._installment_amount = None
        self._remaining_term_number = None
        self._past_due_amount = None
        self._paid_principal_amount = None
        self._late_charge_amount = None
        self.discriminator = None
        if product_name is not None:
            self.product_name = product_name
        if product_code is not None:
            self.product_code = product_code
        self.display_account_number = display_account_number
        if original_principal_amount is not None:
            self.original_principal_amount = original_principal_amount
        if current_principal_amount is not None:
            self.current_principal_amount = current_principal_amount
        if outstanding_balance is not None:
            self.outstanding_balance = outstanding_balance
        if currency_code is not None:
            self.currency_code = currency_code
        if maturity_date is not None:
            self.maturity_date = maturity_date
        if opening_date is not None:
            self.opening_date = opening_date
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if last_payment_amount is not None:
            self.last_payment_amount = last_payment_amount
        if interest_amount is not None:
            self.interest_amount = interest_amount
        if interest_accumulation_period is not None:
            self.interest_accumulation_period = interest_accumulation_period
        if next_payment_amount is not None:
            self.next_payment_amount = next_payment_amount
        if next_payment_date is not None:
            self.next_payment_date = next_payment_date
        if payment_frequency is not None:
            self.payment_frequency = payment_frequency
        if interest_type is not None:
            self.interest_type = interest_type
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if effective_interest_rate is not None:
            self.effective_interest_rate = effective_interest_rate
        if installment_amount is not None:
            self.installment_amount = installment_amount
        if remaining_term_number is not None:
            self.remaining_term_number = remaining_term_number
        if past_due_amount is not None:
            self.past_due_amount = past_due_amount
        if paid_principal_amount is not None:
            self.paid_principal_amount = paid_principal_amount
        if late_charge_amount is not None:
            self.late_charge_amount = late_charge_amount

    @property
    def product_name(self):
        """Gets the product_name of this LoanAccount.  # noqa: E501

        The name of the product  # noqa: E501

        :return: The product_name of this LoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this LoanAccount.

        The name of the product  # noqa: E501

        :param product_name: The product_name of this LoanAccount.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_code(self):
        """Gets the product_code of this LoanAccount.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this LoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this LoanAccount.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this LoanAccount.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def display_account_number(self):
        """Gets the display_account_number of this LoanAccount.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this LoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this LoanAccount.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this LoanAccount.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def original_principal_amount(self):
        """Gets the original_principal_amount of this LoanAccount.  # noqa: E501

        The amount borrowed  # noqa: E501

        :return: The original_principal_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._original_principal_amount

    @original_principal_amount.setter
    def original_principal_amount(self, original_principal_amount):
        """Sets the original_principal_amount of this LoanAccount.

        The amount borrowed  # noqa: E501

        :param original_principal_amount: The original_principal_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._original_principal_amount = original_principal_amount

    @property
    def current_principal_amount(self):
        """Gets the current_principal_amount of this LoanAccount.  # noqa: E501

        The remaining principal amount  # noqa: E501

        :return: The current_principal_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._current_principal_amount

    @current_principal_amount.setter
    def current_principal_amount(self, current_principal_amount):
        """Sets the current_principal_amount of this LoanAccount.

        The remaining principal amount  # noqa: E501

        :param current_principal_amount: The current_principal_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._current_principal_amount = current_principal_amount

    @property
    def outstanding_balance(self):
        """Gets the outstanding_balance of this LoanAccount.  # noqa: E501

        The amount of money owed.  # noqa: E501

        :return: The outstanding_balance of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_balance

    @outstanding_balance.setter
    def outstanding_balance(self, outstanding_balance):
        """Sets the outstanding_balance of this LoanAccount.

        The amount of money owed.  # noqa: E501

        :param outstanding_balance: The outstanding_balance of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._outstanding_balance = outstanding_balance

    @property
    def currency_code(self):
        """Gets the currency_code of this LoanAccount.  # noqa: E501

        The currency code in ISO 4217 format  # noqa: E501

        :return: The currency_code of this LoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this LoanAccount.

        The currency code in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this LoanAccount.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def maturity_date(self):
        """Gets the maturity_date of this LoanAccount.  # noqa: E501

        Loan maturity date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The maturity_date of this LoanAccount.  # noqa: E501
        :rtype: date
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this LoanAccount.

        Loan maturity date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param maturity_date: The maturity_date of this LoanAccount.  # noqa: E501
        :type: date
        """

        self._maturity_date = maturity_date

    @property
    def opening_date(self):
        """Gets the opening_date of this LoanAccount.  # noqa: E501

        Loan account opening date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The opening_date of this LoanAccount.  # noqa: E501
        :rtype: date
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this LoanAccount.

        Loan account opening date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param opening_date: The opening_date of this LoanAccount.  # noqa: E501
        :type: date
        """

        self._opening_date = opening_date

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this LoanAccount.  # noqa: E501

        The date of the last payment in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :return: The last_payment_date of this LoanAccount.  # noqa: E501
        :rtype: date
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this LoanAccount.

        The date of the last payment in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :param last_payment_date: The last_payment_date of this LoanAccount.  # noqa: E501
        :type: date
        """

        self._last_payment_date = last_payment_date

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this LoanAccount.  # noqa: E501

        The amount of the last payment made  # noqa: E501

        :return: The last_payment_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this LoanAccount.

        The amount of the last payment made  # noqa: E501

        :param last_payment_amount: The last_payment_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._last_payment_amount = last_payment_amount

    @property
    def interest_amount(self):
        """Gets the interest_amount of this LoanAccount.  # noqa: E501

        Interest amount paid for the mentioned period  # noqa: E501

        :return: The interest_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._interest_amount

    @interest_amount.setter
    def interest_amount(self, interest_amount):
        """Sets the interest_amount of this LoanAccount.

        Interest amount paid for the mentioned period  # noqa: E501

        :param interest_amount: The interest_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._interest_amount = interest_amount

    @property
    def interest_accumulation_period(self):
        """Gets the interest_accumulation_period of this LoanAccount.  # noqa: E501

        The period of interest accumulation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestAccumulationPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The interest_accumulation_period of this LoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._interest_accumulation_period

    @interest_accumulation_period.setter
    def interest_accumulation_period(self, interest_accumulation_period):
        """Sets the interest_accumulation_period of this LoanAccount.

        The period of interest accumulation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestAccumulationPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param interest_accumulation_period: The interest_accumulation_period of this LoanAccount.  # noqa: E501
        :type: str
        """

        self._interest_accumulation_period = interest_accumulation_period

    @property
    def next_payment_amount(self):
        """Gets the next_payment_amount of this LoanAccount.  # noqa: E501

        The next payment amount due  # noqa: E501

        :return: The next_payment_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._next_payment_amount

    @next_payment_amount.setter
    def next_payment_amount(self, next_payment_amount):
        """Sets the next_payment_amount of this LoanAccount.

        The next payment amount due  # noqa: E501

        :param next_payment_amount: The next_payment_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._next_payment_amount = next_payment_amount

    @property
    def next_payment_date(self):
        """Gets the next_payment_date of this LoanAccount.  # noqa: E501

        The date of the next payment in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The next_payment_date of this LoanAccount.  # noqa: E501
        :rtype: date
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """Sets the next_payment_date of this LoanAccount.

        The date of the next payment in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param next_payment_date: The next_payment_date of this LoanAccount.  # noqa: E501
        :type: date
        """

        self._next_payment_date = next_payment_date

    @property
    def payment_frequency(self):
        """Gets the payment_frequency of this LoanAccount.  # noqa: E501

        The payment frequency  # noqa: E501

        :return: The payment_frequency of this LoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_frequency

    @payment_frequency.setter
    def payment_frequency(self, payment_frequency):
        """Sets the payment_frequency of this LoanAccount.

        The payment frequency  # noqa: E501

        :param payment_frequency: The payment_frequency of this LoanAccount.  # noqa: E501
        :type: str
        """

        self._payment_frequency = payment_frequency

    @property
    def interest_type(self):
        """Gets the interest_type of this LoanAccount.  # noqa: E501

        The interest type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The interest_type of this LoanAccount.  # noqa: E501
        :rtype: str
        """
        return self._interest_type

    @interest_type.setter
    def interest_type(self, interest_type):
        """Sets the interest_type of this LoanAccount.

        The interest type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param interest_type: The interest_type of this LoanAccount.  # noqa: E501
        :type: str
        """

        self._interest_type = interest_type

    @property
    def interest_rate(self):
        """Gets the interest_rate of this LoanAccount.  # noqa: E501

        Loan interest rate.  # noqa: E501

        :return: The interest_rate of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this LoanAccount.

        Loan interest rate.  # noqa: E501

        :param interest_rate: The interest_rate of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def effective_interest_rate(self):
        """Gets the effective_interest_rate of this LoanAccount.  # noqa: E501

        Loan effective interest rate  # noqa: E501

        :return: The effective_interest_rate of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._effective_interest_rate

    @effective_interest_rate.setter
    def effective_interest_rate(self, effective_interest_rate):
        """Sets the effective_interest_rate of this LoanAccount.

        Loan effective interest rate  # noqa: E501

        :param effective_interest_rate: The effective_interest_rate of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._effective_interest_rate = effective_interest_rate

    @property
    def installment_amount(self):
        """Gets the installment_amount of this LoanAccount.  # noqa: E501

        Installment loan payment amount  # noqa: E501

        :return: The installment_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._installment_amount

    @installment_amount.setter
    def installment_amount(self, installment_amount):
        """Sets the installment_amount of this LoanAccount.

        Installment loan payment amount  # noqa: E501

        :param installment_amount: The installment_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._installment_amount = installment_amount

    @property
    def remaining_term_number(self):
        """Gets the remaining_term_number of this LoanAccount.  # noqa: E501

        Term remaining.  # noqa: E501

        :return: The remaining_term_number of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._remaining_term_number

    @remaining_term_number.setter
    def remaining_term_number(self, remaining_term_number):
        """Sets the remaining_term_number of this LoanAccount.

        Term remaining.  # noqa: E501

        :param remaining_term_number: The remaining_term_number of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._remaining_term_number = remaining_term_number

    @property
    def past_due_amount(self):
        """Gets the past_due_amount of this LoanAccount.  # noqa: E501

        Past due is a loan payment that has not been made as of its due date  # noqa: E501

        :return: The past_due_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._past_due_amount

    @past_due_amount.setter
    def past_due_amount(self, past_due_amount):
        """Sets the past_due_amount of this LoanAccount.

        Past due is a loan payment that has not been made as of its due date  # noqa: E501

        :param past_due_amount: The past_due_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._past_due_amount = past_due_amount

    @property
    def paid_principal_amount(self):
        """Gets the paid_principal_amount of this LoanAccount.  # noqa: E501

        The amount of principal returned to the bank  # noqa: E501

        :return: The paid_principal_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._paid_principal_amount

    @paid_principal_amount.setter
    def paid_principal_amount(self, paid_principal_amount):
        """Sets the paid_principal_amount of this LoanAccount.

        The amount of principal returned to the bank  # noqa: E501

        :param paid_principal_amount: The paid_principal_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._paid_principal_amount = paid_principal_amount

    @property
    def late_charge_amount(self):
        """Gets the late_charge_amount of this LoanAccount.  # noqa: E501

        Late charge amount applicable when amount is not paid by the due date  # noqa: E501

        :return: The late_charge_amount of this LoanAccount.  # noqa: E501
        :rtype: float
        """
        return self._late_charge_amount

    @late_charge_amount.setter
    def late_charge_amount(self, late_charge_amount):
        """Sets the late_charge_amount of this LoanAccount.

        Late charge amount applicable when amount is not paid by the due date  # noqa: E501

        :param late_charge_amount: The late_charge_amount of this LoanAccount.  # noqa: E501
        :type: float
        """

        self._late_charge_amount = late_charge_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
