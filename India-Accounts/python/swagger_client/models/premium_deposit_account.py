# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PremiumDepositAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'str',
        'product_code': 'str',
        'display_account_number': 'str',
        'base_currency_principal_amount': 'float',
        'base_currency_code': 'str',
        'alternate_currency_principal_amount': 'float',
        'opening_date': 'date',
        'alternate_currency_code': 'str',
        'base_currency_disposal_account': 'str',
        'alternate_currency_disposal_account': 'str',
        'base_currency_interest_amount': 'float',
        'alternate_currency_interest_amount': 'float',
        'base_currency_maturity_amount': 'float',
        'alternate_currency_maturity_amount': 'float',
        'base_currency_premium_amount': 'float',
        'maturity_date': 'date',
        'strike_price': 'float',
        'customer_interest_rate': 'float',
        'accrued_interest_rate': 'float',
        'benchmark_interest_rate': 'float',
        'deal_status': 'str',
        'expiry_date': 'date',
        'tenor_term': 'int',
        'tenor_period': 'str',
        'relationship': 'Relationship'
    }

    attribute_map = {
        'product_name': 'productName',
        'product_code': 'productCode',
        'display_account_number': 'displayAccountNumber',
        'base_currency_principal_amount': 'baseCurrencyPrincipalAmount',
        'base_currency_code': 'baseCurrencyCode',
        'alternate_currency_principal_amount': 'alternateCurrencyPrincipalAmount',
        'opening_date': 'openingDate',
        'alternate_currency_code': 'alternateCurrencyCode',
        'base_currency_disposal_account': 'baseCurrencyDisposalAccount',
        'alternate_currency_disposal_account': 'alternateCurrencyDisposalAccount',
        'base_currency_interest_amount': 'baseCurrencyInterestAmount',
        'alternate_currency_interest_amount': 'alternateCurrencyInterestAmount',
        'base_currency_maturity_amount': 'baseCurrencyMaturityAmount',
        'alternate_currency_maturity_amount': 'alternateCurrencyMaturityAmount',
        'base_currency_premium_amount': 'baseCurrencyPremiumAmount',
        'maturity_date': 'maturityDate',
        'strike_price': 'strikePrice',
        'customer_interest_rate': 'customerInterestRate',
        'accrued_interest_rate': 'accruedInterestRate',
        'benchmark_interest_rate': 'benchmarkInterestRate',
        'deal_status': 'dealStatus',
        'expiry_date': 'expiryDate',
        'tenor_term': 'tenorTerm',
        'tenor_period': 'tenorPeriod',
        'relationship': 'relationship'
    }

    def __init__(self, product_name=None, product_code=None, display_account_number=None, base_currency_principal_amount=None, base_currency_code=None, alternate_currency_principal_amount=None, opening_date=None, alternate_currency_code=None, base_currency_disposal_account=None, alternate_currency_disposal_account=None, base_currency_interest_amount=None, alternate_currency_interest_amount=None, base_currency_maturity_amount=None, alternate_currency_maturity_amount=None, base_currency_premium_amount=None, maturity_date=None, strike_price=None, customer_interest_rate=None, accrued_interest_rate=None, benchmark_interest_rate=None, deal_status=None, expiry_date=None, tenor_term=None, tenor_period=None, relationship=None):  # noqa: E501
        """PremiumDepositAccount - a model defined in Swagger"""  # noqa: E501
        self._product_name = None
        self._product_code = None
        self._display_account_number = None
        self._base_currency_principal_amount = None
        self._base_currency_code = None
        self._alternate_currency_principal_amount = None
        self._opening_date = None
        self._alternate_currency_code = None
        self._base_currency_disposal_account = None
        self._alternate_currency_disposal_account = None
        self._base_currency_interest_amount = None
        self._alternate_currency_interest_amount = None
        self._base_currency_maturity_amount = None
        self._alternate_currency_maturity_amount = None
        self._base_currency_premium_amount = None
        self._maturity_date = None
        self._strike_price = None
        self._customer_interest_rate = None
        self._accrued_interest_rate = None
        self._benchmark_interest_rate = None
        self._deal_status = None
        self._expiry_date = None
        self._tenor_term = None
        self._tenor_period = None
        self._relationship = None
        self.discriminator = None
        if product_name is not None:
            self.product_name = product_name
        if product_code is not None:
            self.product_code = product_code
        self.display_account_number = display_account_number
        if base_currency_principal_amount is not None:
            self.base_currency_principal_amount = base_currency_principal_amount
        if base_currency_code is not None:
            self.base_currency_code = base_currency_code
        if alternate_currency_principal_amount is not None:
            self.alternate_currency_principal_amount = alternate_currency_principal_amount
        if opening_date is not None:
            self.opening_date = opening_date
        if alternate_currency_code is not None:
            self.alternate_currency_code = alternate_currency_code
        if base_currency_disposal_account is not None:
            self.base_currency_disposal_account = base_currency_disposal_account
        if alternate_currency_disposal_account is not None:
            self.alternate_currency_disposal_account = alternate_currency_disposal_account
        if base_currency_interest_amount is not None:
            self.base_currency_interest_amount = base_currency_interest_amount
        if alternate_currency_interest_amount is not None:
            self.alternate_currency_interest_amount = alternate_currency_interest_amount
        if base_currency_maturity_amount is not None:
            self.base_currency_maturity_amount = base_currency_maturity_amount
        if alternate_currency_maturity_amount is not None:
            self.alternate_currency_maturity_amount = alternate_currency_maturity_amount
        if base_currency_premium_amount is not None:
            self.base_currency_premium_amount = base_currency_premium_amount
        if maturity_date is not None:
            self.maturity_date = maturity_date
        if strike_price is not None:
            self.strike_price = strike_price
        if customer_interest_rate is not None:
            self.customer_interest_rate = customer_interest_rate
        if accrued_interest_rate is not None:
            self.accrued_interest_rate = accrued_interest_rate
        if benchmark_interest_rate is not None:
            self.benchmark_interest_rate = benchmark_interest_rate
        if deal_status is not None:
            self.deal_status = deal_status
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if tenor_term is not None:
            self.tenor_term = tenor_term
        if tenor_period is not None:
            self.tenor_period = tenor_period
        if relationship is not None:
            self.relationship = relationship

    @property
    def product_name(self):
        """Gets the product_name of this PremiumDepositAccount.  # noqa: E501

        The name of the product  # noqa: E501

        :return: The product_name of this PremiumDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this PremiumDepositAccount.

        The name of the product  # noqa: E501

        :param product_name: The product_name of this PremiumDepositAccount.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_code(self):
        """Gets the product_code of this PremiumDepositAccount.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this PremiumDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this PremiumDepositAccount.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this PremiumDepositAccount.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def display_account_number(self):
        """Gets the display_account_number of this PremiumDepositAccount.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this PremiumDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this PremiumDepositAccount.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this PremiumDepositAccount.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def base_currency_principal_amount(self):
        """Gets the base_currency_principal_amount of this PremiumDepositAccount.  # noqa: E501

        The investment amount in base currency  # noqa: E501

        :return: The base_currency_principal_amount of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_principal_amount

    @base_currency_principal_amount.setter
    def base_currency_principal_amount(self, base_currency_principal_amount):
        """Sets the base_currency_principal_amount of this PremiumDepositAccount.

        The investment amount in base currency  # noqa: E501

        :param base_currency_principal_amount: The base_currency_principal_amount of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._base_currency_principal_amount = base_currency_principal_amount

    @property
    def base_currency_code(self):
        """Gets the base_currency_code of this PremiumDepositAccount.  # noqa: E501

        The base currency code in ISO 4217 format  # noqa: E501

        :return: The base_currency_code of this PremiumDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """Sets the base_currency_code of this PremiumDepositAccount.

        The base currency code in ISO 4217 format  # noqa: E501

        :param base_currency_code: The base_currency_code of this PremiumDepositAccount.  # noqa: E501
        :type: str
        """

        self._base_currency_code = base_currency_code

    @property
    def alternate_currency_principal_amount(self):
        """Gets the alternate_currency_principal_amount of this PremiumDepositAccount.  # noqa: E501

        The investment amount in alternate currency  # noqa: E501

        :return: The alternate_currency_principal_amount of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._alternate_currency_principal_amount

    @alternate_currency_principal_amount.setter
    def alternate_currency_principal_amount(self, alternate_currency_principal_amount):
        """Sets the alternate_currency_principal_amount of this PremiumDepositAccount.

        The investment amount in alternate currency  # noqa: E501

        :param alternate_currency_principal_amount: The alternate_currency_principal_amount of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._alternate_currency_principal_amount = alternate_currency_principal_amount

    @property
    def opening_date(self):
        """Gets the opening_date of this PremiumDepositAccount.  # noqa: E501

        Premium deposit open date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The opening_date of this PremiumDepositAccount.  # noqa: E501
        :rtype: date
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this PremiumDepositAccount.

        Premium deposit open date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param opening_date: The opening_date of this PremiumDepositAccount.  # noqa: E501
        :type: date
        """

        self._opening_date = opening_date

    @property
    def alternate_currency_code(self):
        """Gets the alternate_currency_code of this PremiumDepositAccount.  # noqa: E501

        The alternate currency code in ISO 4217 format  # noqa: E501

        :return: The alternate_currency_code of this PremiumDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._alternate_currency_code

    @alternate_currency_code.setter
    def alternate_currency_code(self, alternate_currency_code):
        """Sets the alternate_currency_code of this PremiumDepositAccount.

        The alternate currency code in ISO 4217 format  # noqa: E501

        :param alternate_currency_code: The alternate_currency_code of this PremiumDepositAccount.  # noqa: E501
        :type: str
        """

        self._alternate_currency_code = alternate_currency_code

    @property
    def base_currency_disposal_account(self):
        """Gets the base_currency_disposal_account of this PremiumDepositAccount.  # noqa: E501

        The account number to deposit returns of base currency, upon maturity  # noqa: E501

        :return: The base_currency_disposal_account of this PremiumDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._base_currency_disposal_account

    @base_currency_disposal_account.setter
    def base_currency_disposal_account(self, base_currency_disposal_account):
        """Sets the base_currency_disposal_account of this PremiumDepositAccount.

        The account number to deposit returns of base currency, upon maturity  # noqa: E501

        :param base_currency_disposal_account: The base_currency_disposal_account of this PremiumDepositAccount.  # noqa: E501
        :type: str
        """

        self._base_currency_disposal_account = base_currency_disposal_account

    @property
    def alternate_currency_disposal_account(self):
        """Gets the alternate_currency_disposal_account of this PremiumDepositAccount.  # noqa: E501

        The account number to deposit returns of alternate currency, upon maturity  # noqa: E501

        :return: The alternate_currency_disposal_account of this PremiumDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._alternate_currency_disposal_account

    @alternate_currency_disposal_account.setter
    def alternate_currency_disposal_account(self, alternate_currency_disposal_account):
        """Sets the alternate_currency_disposal_account of this PremiumDepositAccount.

        The account number to deposit returns of alternate currency, upon maturity  # noqa: E501

        :param alternate_currency_disposal_account: The alternate_currency_disposal_account of this PremiumDepositAccount.  # noqa: E501
        :type: str
        """

        self._alternate_currency_disposal_account = alternate_currency_disposal_account

    @property
    def base_currency_interest_amount(self):
        """Gets the base_currency_interest_amount of this PremiumDepositAccount.  # noqa: E501

        The accrued interest amount in base currency  # noqa: E501

        :return: The base_currency_interest_amount of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_interest_amount

    @base_currency_interest_amount.setter
    def base_currency_interest_amount(self, base_currency_interest_amount):
        """Sets the base_currency_interest_amount of this PremiumDepositAccount.

        The accrued interest amount in base currency  # noqa: E501

        :param base_currency_interest_amount: The base_currency_interest_amount of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._base_currency_interest_amount = base_currency_interest_amount

    @property
    def alternate_currency_interest_amount(self):
        """Gets the alternate_currency_interest_amount of this PremiumDepositAccount.  # noqa: E501

        The accrued interest amount in alternate currency  # noqa: E501

        :return: The alternate_currency_interest_amount of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._alternate_currency_interest_amount

    @alternate_currency_interest_amount.setter
    def alternate_currency_interest_amount(self, alternate_currency_interest_amount):
        """Sets the alternate_currency_interest_amount of this PremiumDepositAccount.

        The accrued interest amount in alternate currency  # noqa: E501

        :param alternate_currency_interest_amount: The alternate_currency_interest_amount of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._alternate_currency_interest_amount = alternate_currency_interest_amount

    @property
    def base_currency_maturity_amount(self):
        """Gets the base_currency_maturity_amount of this PremiumDepositAccount.  # noqa: E501

        The investment amount and accrued interest in base currency  # noqa: E501

        :return: The base_currency_maturity_amount of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_maturity_amount

    @base_currency_maturity_amount.setter
    def base_currency_maturity_amount(self, base_currency_maturity_amount):
        """Sets the base_currency_maturity_amount of this PremiumDepositAccount.

        The investment amount and accrued interest in base currency  # noqa: E501

        :param base_currency_maturity_amount: The base_currency_maturity_amount of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._base_currency_maturity_amount = base_currency_maturity_amount

    @property
    def alternate_currency_maturity_amount(self):
        """Gets the alternate_currency_maturity_amount of this PremiumDepositAccount.  # noqa: E501

        The investment amount and accrued interest in alternate currency  # noqa: E501

        :return: The alternate_currency_maturity_amount of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._alternate_currency_maturity_amount

    @alternate_currency_maturity_amount.setter
    def alternate_currency_maturity_amount(self, alternate_currency_maturity_amount):
        """Sets the alternate_currency_maturity_amount of this PremiumDepositAccount.

        The investment amount and accrued interest in alternate currency  # noqa: E501

        :param alternate_currency_maturity_amount: The alternate_currency_maturity_amount of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._alternate_currency_maturity_amount = alternate_currency_maturity_amount

    @property
    def base_currency_premium_amount(self):
        """Gets the base_currency_premium_amount of this PremiumDepositAccount.  # noqa: E501

        A part or all of the interest the customer earns on the Premium Account represents the premium that the bank pays the customer for the currency option  # noqa: E501

        :return: The base_currency_premium_amount of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_premium_amount

    @base_currency_premium_amount.setter
    def base_currency_premium_amount(self, base_currency_premium_amount):
        """Sets the base_currency_premium_amount of this PremiumDepositAccount.

        A part or all of the interest the customer earns on the Premium Account represents the premium that the bank pays the customer for the currency option  # noqa: E501

        :param base_currency_premium_amount: The base_currency_premium_amount of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._base_currency_premium_amount = base_currency_premium_amount

    @property
    def maturity_date(self):
        """Gets the maturity_date of this PremiumDepositAccount.  # noqa: E501

        The date when the premium deposit will mature, in ISO8601 date format YYYY-MM-DD  # noqa: E501

        :return: The maturity_date of this PremiumDepositAccount.  # noqa: E501
        :rtype: date
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this PremiumDepositAccount.

        The date when the premium deposit will mature, in ISO8601 date format YYYY-MM-DD  # noqa: E501

        :param maturity_date: The maturity_date of this PremiumDepositAccount.  # noqa: E501
        :type: date
        """

        self._maturity_date = maturity_date

    @property
    def strike_price(self):
        """Gets the strike_price of this PremiumDepositAccount.  # noqa: E501

        The Pre-agreed exchange rate  # noqa: E501

        :return: The strike_price of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._strike_price

    @strike_price.setter
    def strike_price(self, strike_price):
        """Sets the strike_price of this PremiumDepositAccount.

        The Pre-agreed exchange rate  # noqa: E501

        :param strike_price: The strike_price of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._strike_price = strike_price

    @property
    def customer_interest_rate(self):
        """Gets the customer_interest_rate of this PremiumDepositAccount.  # noqa: E501

        The customer interest rate applicable for the premium deposit  # noqa: E501

        :return: The customer_interest_rate of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._customer_interest_rate

    @customer_interest_rate.setter
    def customer_interest_rate(self, customer_interest_rate):
        """Sets the customer_interest_rate of this PremiumDepositAccount.

        The customer interest rate applicable for the premium deposit  # noqa: E501

        :param customer_interest_rate: The customer_interest_rate of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._customer_interest_rate = customer_interest_rate

    @property
    def accrued_interest_rate(self):
        """Gets the accrued_interest_rate of this PremiumDepositAccount.  # noqa: E501

        The accrued interest rate applicable for the premium deposit  # noqa: E501

        :return: The accrued_interest_rate of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._accrued_interest_rate

    @accrued_interest_rate.setter
    def accrued_interest_rate(self, accrued_interest_rate):
        """Sets the accrued_interest_rate of this PremiumDepositAccount.

        The accrued interest rate applicable for the premium deposit  # noqa: E501

        :param accrued_interest_rate: The accrued_interest_rate of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._accrued_interest_rate = accrued_interest_rate

    @property
    def benchmark_interest_rate(self):
        """Gets the benchmark_interest_rate of this PremiumDepositAccount.  # noqa: E501

        The benchmark interest rate applicable for the premium deposit  # noqa: E501

        :return: The benchmark_interest_rate of this PremiumDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._benchmark_interest_rate

    @benchmark_interest_rate.setter
    def benchmark_interest_rate(self, benchmark_interest_rate):
        """Sets the benchmark_interest_rate of this PremiumDepositAccount.

        The benchmark interest rate applicable for the premium deposit  # noqa: E501

        :param benchmark_interest_rate: The benchmark_interest_rate of this PremiumDepositAccount.  # noqa: E501
        :type: float
        """

        self._benchmark_interest_rate = benchmark_interest_rate

    @property
    def deal_status(self):
        """Gets the deal_status of this PremiumDepositAccount.  # noqa: E501

        The deal status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{dealStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The deal_status of this PremiumDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._deal_status

    @deal_status.setter
    def deal_status(self, deal_status):
        """Sets the deal_status of this PremiumDepositAccount.

        The deal status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{dealStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param deal_status: The deal_status of this PremiumDepositAccount.  # noqa: E501
        :type: str
        """

        self._deal_status = deal_status

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PremiumDepositAccount.  # noqa: E501

        The date when the premium deposit deal will expire, in ISO8601 date format YYYY-MM-DD  # noqa: E501

        :return: The expiry_date of this PremiumDepositAccount.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PremiumDepositAccount.

        The date when the premium deposit deal will expire, in ISO8601 date format YYYY-MM-DD  # noqa: E501

        :param expiry_date: The expiry_date of this PremiumDepositAccount.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def tenor_term(self):
        """Gets the tenor_term of this PremiumDepositAccount.  # noqa: E501

        The tenor term for deposit  # noqa: E501

        :return: The tenor_term of this PremiumDepositAccount.  # noqa: E501
        :rtype: int
        """
        return self._tenor_term

    @tenor_term.setter
    def tenor_term(self, tenor_term):
        """Sets the tenor_term of this PremiumDepositAccount.

        The tenor term for deposit  # noqa: E501

        :param tenor_term: The tenor_term of this PremiumDepositAccount.  # noqa: E501
        :type: int
        """

        self._tenor_term = tenor_term

    @property
    def tenor_period(self):
        """Gets the tenor_period of this PremiumDepositAccount.  # noqa: E501

        This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The tenor_period of this PremiumDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._tenor_period

    @tenor_period.setter
    def tenor_period(self, tenor_period):
        """Sets the tenor_period of this PremiumDepositAccount.

        This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param tenor_period: The tenor_period of this PremiumDepositAccount.  # noqa: E501
        :type: str
        """

        self._tenor_period = tenor_period

    @property
    def relationship(self):
        """Gets the relationship of this PremiumDepositAccount.  # noqa: E501


        :return: The relationship of this PremiumDepositAccount.  # noqa: E501
        :rtype: Relationship
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this PremiumDepositAccount.


        :param relationship: The relationship of this PremiumDepositAccount.  # noqa: E501
        :type: Relationship
        """

        self._relationship = relationship

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PremiumDepositAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PremiumDepositAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
