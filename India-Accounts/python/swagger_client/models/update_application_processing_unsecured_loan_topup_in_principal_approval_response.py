# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_stage': 'str',
        'ipa_expiry_date': 'date',
        'requested_loan_topup_decision': 'RequestedLoanTopupDecision'
    }

    attribute_map = {
        'application_stage': 'applicationStage',
        'ipa_expiry_date': 'ipaExpiryDate',
        'requested_loan_topup_decision': 'requestedLoanTopupDecision'
    }

    def __init__(self, application_stage=None, ipa_expiry_date=None, requested_loan_topup_decision=None):  # noqa: E501
        """UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse - a model defined in Swagger"""  # noqa: E501
        self._application_stage = None
        self._ipa_expiry_date = None
        self._requested_loan_topup_decision = None
        self.discriminator = None
        if application_stage is not None:
            self.application_stage = application_stage
        if ipa_expiry_date is not None:
            self.ipa_expiry_date = ipa_expiry_date
        if requested_loan_topup_decision is not None:
            self.requested_loan_topup_decision = requested_loan_topup_decision

    @property
    def application_stage(self):
        """Gets the application_stage of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.  # noqa: E501

        Current stage of an application.This is a reference data field. Please use /v1/utilities/referenceData/{applicationStage} resource to get possible value of this field with description.  # noqa: E501

        :return: The application_stage of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.  # noqa: E501
        :rtype: str
        """
        return self._application_stage

    @application_stage.setter
    def application_stage(self, application_stage):
        """Sets the application_stage of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.

        Current stage of an application.This is a reference data field. Please use /v1/utilities/referenceData/{applicationStage} resource to get possible value of this field with description.  # noqa: E501

        :param application_stage: The application_stage of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.  # noqa: E501
        :type: str
        """

        self._application_stage = application_stage

    @property
    def ipa_expiry_date(self):
        """Gets the ipa_expiry_date of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.  # noqa: E501

        In principle approval expiration date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The ipa_expiry_date of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.  # noqa: E501
        :rtype: date
        """
        return self._ipa_expiry_date

    @ipa_expiry_date.setter
    def ipa_expiry_date(self, ipa_expiry_date):
        """Sets the ipa_expiry_date of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.

        In principle approval expiration date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param ipa_expiry_date: The ipa_expiry_date of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.  # noqa: E501
        :type: date
        """

        self._ipa_expiry_date = ipa_expiry_date

    @property
    def requested_loan_topup_decision(self):
        """Gets the requested_loan_topup_decision of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.  # noqa: E501


        :return: The requested_loan_topup_decision of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.  # noqa: E501
        :rtype: RequestedLoanTopupDecision
        """
        return self._requested_loan_topup_decision

    @requested_loan_topup_decision.setter
    def requested_loan_topup_decision(self, requested_loan_topup_decision):
        """Sets the requested_loan_topup_decision of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.


        :param requested_loan_topup_decision: The requested_loan_topup_decision of this UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse.  # noqa: E501
        :type: RequestedLoanTopupDecision
        """

        self._requested_loan_topup_decision = requested_loan_topup_decision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
