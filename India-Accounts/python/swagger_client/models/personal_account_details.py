# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonalAccountDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_nick_name': 'str',
        'account_id': 'str',
        'display_account_number': 'str',
        'iban': 'str',
        'currency_code': 'str'
    }

    attribute_map = {
        'account_nick_name': 'accountNickName',
        'account_id': 'accountId',
        'display_account_number': 'displayAccountNumber',
        'iban': 'iban',
        'currency_code': 'currencyCode'
    }

    def __init__(self, account_nick_name=None, account_id=None, display_account_number=None, iban=None, currency_code=None):  # noqa: E501
        """PersonalAccountDetails - a model defined in Swagger"""  # noqa: E501
        self._account_nick_name = None
        self._account_id = None
        self._display_account_number = None
        self._iban = None
        self._currency_code = None
        self.discriminator = None
        self.account_nick_name = account_nick_name
        self.account_id = account_id
        self.display_account_number = display_account_number
        if iban is not None:
            self.iban = iban
        if currency_code is not None:
            self.currency_code = currency_code

    @property
    def account_nick_name(self):
        """Gets the account_nick_name of this PersonalAccountDetails.  # noqa: E501

        The nickname of the account assigned by the customer  # noqa: E501

        :return: The account_nick_name of this PersonalAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_nick_name

    @account_nick_name.setter
    def account_nick_name(self, account_nick_name):
        """Sets the account_nick_name of this PersonalAccountDetails.

        The nickname of the account assigned by the customer  # noqa: E501

        :param account_nick_name: The account_nick_name of this PersonalAccountDetails.  # noqa: E501
        :type: str
        """
        if account_nick_name is None:
            raise ValueError("Invalid value for `account_nick_name`, must not be `None`")  # noqa: E501

        self._account_nick_name = account_nick_name

    @property
    def account_id(self):
        """Gets the account_id of this PersonalAccountDetails.  # noqa: E501

        The account number in encrypted format.  # noqa: E501

        :return: The account_id of this PersonalAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PersonalAccountDetails.

        The account number in encrypted format.  # noqa: E501

        :param account_id: The account_id of this PersonalAccountDetails.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def display_account_number(self):
        """Gets the display_account_number of this PersonalAccountDetails.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this PersonalAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this PersonalAccountDetails.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this PersonalAccountDetails.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def iban(self):
        """Gets the iban of this PersonalAccountDetails.  # noqa: E501

        IBAN stands for International Bank Account Number and is a number attached to all accounts in the EU countries plus Norway, Switzerland, Liechtenstein and Hungary. The IBAN is made up of a code that identifies the country the account belongs to, the account holders bank and the account number itself  # noqa: E501

        :return: The iban of this PersonalAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this PersonalAccountDetails.

        IBAN stands for International Bank Account Number and is a number attached to all accounts in the EU countries plus Norway, Switzerland, Liechtenstein and Hungary. The IBAN is made up of a code that identifies the country the account belongs to, the account holders bank and the account number itself  # noqa: E501

        :param iban: The iban of this PersonalAccountDetails.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def currency_code(self):
        """Gets the currency_code of this PersonalAccountDetails.  # noqa: E501

        The currency code of the account in ISO 4217 format  # noqa: E501

        :return: The currency_code of this PersonalAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PersonalAccountDetails.

        The currency code of the account in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this PersonalAccountDetails.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonalAccountDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalAccountDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
