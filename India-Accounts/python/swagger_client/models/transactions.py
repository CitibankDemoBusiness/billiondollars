# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Transactions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_card_number': 'str',
        'card_holder_type': 'str',
        'transaction_date': 'date',
        'transaction_posting_date': 'date',
        'merchant_name': 'str',
        'transaction_code': 'str',
        'transaction_description': 'str',
        'transaction_type': 'str',
        'foreign_transaction_amount': 'float',
        'foreign_currency_code': 'str',
        'transaction_amount': 'float',
        'currency_code': 'str',
        'eligible_for_equal_payment_plan': 'str',
        'transaction_reference_id': 'str'
    }

    attribute_map = {
        'display_card_number': 'displayCardNumber',
        'card_holder_type': 'cardHolderType',
        'transaction_date': 'transactionDate',
        'transaction_posting_date': 'transactionPostingDate',
        'merchant_name': 'merchantName',
        'transaction_code': 'transactionCode',
        'transaction_description': 'transactionDescription',
        'transaction_type': 'transactionType',
        'foreign_transaction_amount': 'foreignTransactionAmount',
        'foreign_currency_code': 'foreignCurrencyCode',
        'transaction_amount': 'transactionAmount',
        'currency_code': 'currencyCode',
        'eligible_for_equal_payment_plan': 'eligibleForEqualPaymentPlan',
        'transaction_reference_id': 'transactionReferenceId'
    }

    def __init__(self, display_card_number=None, card_holder_type=None, transaction_date=None, transaction_posting_date=None, merchant_name=None, transaction_code=None, transaction_description=None, transaction_type=None, foreign_transaction_amount=None, foreign_currency_code=None, transaction_amount=None, currency_code=None, eligible_for_equal_payment_plan=None, transaction_reference_id=None):  # noqa: E501
        """Transactions - a model defined in Swagger"""  # noqa: E501
        self._display_card_number = None
        self._card_holder_type = None
        self._transaction_date = None
        self._transaction_posting_date = None
        self._merchant_name = None
        self._transaction_code = None
        self._transaction_description = None
        self._transaction_type = None
        self._foreign_transaction_amount = None
        self._foreign_currency_code = None
        self._transaction_amount = None
        self._currency_code = None
        self._eligible_for_equal_payment_plan = None
        self._transaction_reference_id = None
        self.discriminator = None
        self.display_card_number = display_card_number
        if card_holder_type is not None:
            self.card_holder_type = card_holder_type
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if transaction_posting_date is not None:
            self.transaction_posting_date = transaction_posting_date
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if transaction_code is not None:
            self.transaction_code = transaction_code
        if transaction_description is not None:
            self.transaction_description = transaction_description
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if foreign_transaction_amount is not None:
            self.foreign_transaction_amount = foreign_transaction_amount
        if foreign_currency_code is not None:
            self.foreign_currency_code = foreign_currency_code
        if transaction_amount is not None:
            self.transaction_amount = transaction_amount
        if currency_code is not None:
            self.currency_code = currency_code
        if eligible_for_equal_payment_plan is not None:
            self.eligible_for_equal_payment_plan = eligible_for_equal_payment_plan
        if transaction_reference_id is not None:
            self.transaction_reference_id = transaction_reference_id

    @property
    def display_card_number(self):
        """Gets the display_card_number of this Transactions.  # noqa: E501

        A masked card number that can be displayed to the customer  # noqa: E501

        :return: The display_card_number of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._display_card_number

    @display_card_number.setter
    def display_card_number(self, display_card_number):
        """Sets the display_card_number of this Transactions.

        A masked card number that can be displayed to the customer  # noqa: E501

        :param display_card_number: The display_card_number of this Transactions.  # noqa: E501
        :type: str
        """
        if display_card_number is None:
            raise ValueError("Invalid value for `display_card_number`, must not be `None`")  # noqa: E501

        self._display_card_number = display_card_number

    @property
    def card_holder_type(self):
        """Gets the card_holder_type of this Transactions.  # noqa: E501

        Indicator to specify whether the card is primary or supplementary.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The card_holder_type of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_type

    @card_holder_type.setter
    def card_holder_type(self, card_holder_type):
        """Sets the card_holder_type of this Transactions.

        Indicator to specify whether the card is primary or supplementary.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param card_holder_type: The card_holder_type of this Transactions.  # noqa: E501
        :type: str
        """

        self._card_holder_type = card_holder_type

    @property
    def transaction_date(self):
        """Gets the transaction_date of this Transactions.  # noqa: E501

        The transaction date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :return: The transaction_date of this Transactions.  # noqa: E501
        :rtype: date
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this Transactions.

        The transaction date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :param transaction_date: The transaction_date of this Transactions.  # noqa: E501
        :type: date
        """

        self._transaction_date = transaction_date

    @property
    def transaction_posting_date(self):
        """Gets the transaction_posting_date of this Transactions.  # noqa: E501

        The transaction posting date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :return: The transaction_posting_date of this Transactions.  # noqa: E501
        :rtype: date
        """
        return self._transaction_posting_date

    @transaction_posting_date.setter
    def transaction_posting_date(self, transaction_posting_date):
        """Sets the transaction_posting_date of this Transactions.

        The transaction posting date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :param transaction_posting_date: The transaction_posting_date of this Transactions.  # noqa: E501
        :type: date
        """

        self._transaction_posting_date = transaction_posting_date

    @property
    def merchant_name(self):
        """Gets the merchant_name of this Transactions.  # noqa: E501

        The merchant name with which this transaction was made.  # noqa: E501

        :return: The merchant_name of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this Transactions.

        The merchant name with which this transaction was made.  # noqa: E501

        :param merchant_name: The merchant_name of this Transactions.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def transaction_code(self):
        """Gets the transaction_code of this Transactions.  # noqa: E501

        The transaction code  # noqa: E501

        :return: The transaction_code of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code

    @transaction_code.setter
    def transaction_code(self, transaction_code):
        """Sets the transaction_code of this Transactions.

        The transaction code  # noqa: E501

        :param transaction_code: The transaction_code of this Transactions.  # noqa: E501
        :type: str
        """

        self._transaction_code = transaction_code

    @property
    def transaction_description(self):
        """Gets the transaction_description of this Transactions.  # noqa: E501

        Transaction description from the merchant, POS or bank.  # noqa: E501

        :return: The transaction_description of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._transaction_description

    @transaction_description.setter
    def transaction_description(self, transaction_description):
        """Sets the transaction_description of this Transactions.

        Transaction description from the merchant, POS or bank.  # noqa: E501

        :param transaction_description: The transaction_description of this Transactions.  # noqa: E501
        :type: str
        """

        self._transaction_description = transaction_description

    @property
    def transaction_type(self):
        """Gets the transaction_type of this Transactions.  # noqa: E501

        The type of transaction. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The transaction_type of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this Transactions.

        The type of transaction. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param transaction_type: The transaction_type of this Transactions.  # noqa: E501
        :type: str
        """

        self._transaction_type = transaction_type

    @property
    def foreign_transaction_amount(self):
        """Gets the foreign_transaction_amount of this Transactions.  # noqa: E501

        The transaction amount in the foreign currency  # noqa: E501

        :return: The foreign_transaction_amount of this Transactions.  # noqa: E501
        :rtype: float
        """
        return self._foreign_transaction_amount

    @foreign_transaction_amount.setter
    def foreign_transaction_amount(self, foreign_transaction_amount):
        """Sets the foreign_transaction_amount of this Transactions.

        The transaction amount in the foreign currency  # noqa: E501

        :param foreign_transaction_amount: The foreign_transaction_amount of this Transactions.  # noqa: E501
        :type: float
        """

        self._foreign_transaction_amount = foreign_transaction_amount

    @property
    def foreign_currency_code(self):
        """Gets the foreign_currency_code of this Transactions.  # noqa: E501

        The foreign currency code of the transaction in ISO 4217 format  # noqa: E501

        :return: The foreign_currency_code of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._foreign_currency_code

    @foreign_currency_code.setter
    def foreign_currency_code(self, foreign_currency_code):
        """Sets the foreign_currency_code of this Transactions.

        The foreign currency code of the transaction in ISO 4217 format  # noqa: E501

        :param foreign_currency_code: The foreign_currency_code of this Transactions.  # noqa: E501
        :type: str
        """

        self._foreign_currency_code = foreign_currency_code

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this Transactions.  # noqa: E501

        Transaction amount in local currency  # noqa: E501

        :return: The transaction_amount of this Transactions.  # noqa: E501
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this Transactions.

        Transaction amount in local currency  # noqa: E501

        :param transaction_amount: The transaction_amount of this Transactions.  # noqa: E501
        :type: float
        """

        self._transaction_amount = transaction_amount

    @property
    def currency_code(self):
        """Gets the currency_code of this Transactions.  # noqa: E501

        The currency code of the transaction in ISO 4217 format  # noqa: E501

        :return: The currency_code of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Transactions.

        The currency code of the transaction in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this Transactions.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def eligible_for_equal_payment_plan(self):
        """Gets the eligible_for_equal_payment_plan of this Transactions.  # noqa: E501

        The EPP allowed indicator. This is a reference data field. Please use /v1/apac/utilities/referenceData/{eligibleForEqualPaymentPlan} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The eligible_for_equal_payment_plan of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._eligible_for_equal_payment_plan

    @eligible_for_equal_payment_plan.setter
    def eligible_for_equal_payment_plan(self, eligible_for_equal_payment_plan):
        """Sets the eligible_for_equal_payment_plan of this Transactions.

        The EPP allowed indicator. This is a reference data field. Please use /v1/apac/utilities/referenceData/{eligibleForEqualPaymentPlan} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param eligible_for_equal_payment_plan: The eligible_for_equal_payment_plan of this Transactions.  # noqa: E501
        :type: str
        """

        self._eligible_for_equal_payment_plan = eligible_for_equal_payment_plan

    @property
    def transaction_reference_id(self):
        """Gets the transaction_reference_id of this Transactions.  # noqa: E501

        The unique transaction reference Id used to identify this transaction from all the other transactions,  # noqa: E501

        :return: The transaction_reference_id of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._transaction_reference_id

    @transaction_reference_id.setter
    def transaction_reference_id(self, transaction_reference_id):
        """Sets the transaction_reference_id of this Transactions.

        The unique transaction reference Id used to identify this transaction from all the other transactions,  # noqa: E501

        :param transaction_reference_id: The transaction_reference_id of this Transactions.  # noqa: E501
        :type: str
        """

        self._transaction_reference_id = transaction_reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transactions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transactions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
