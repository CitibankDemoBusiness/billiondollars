# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanPaymentPlans(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_tenure': 'str',
        'base_interest_rate': 'float',
        'annual_percentage_rate': 'float',
        'installment_amount': 'float',
        'interest_rate': 'float',
        'installment_interest_amount': 'float',
        'first_total_installment_amount': 'float',
        'loan_cet_percentage': 'float',
        'fixed_interest_rate': 'float',
        'loan_booking_fee_indicator': 'str',
        'loan_booking_fee': 'float',
        'loan_booking_fee_percentage': 'float',
        'initial_interest_amount': 'float',
        'initial_fee_amount': 'float'
    }

    attribute_map = {
        'loan_tenure': 'loanTenure',
        'base_interest_rate': 'baseInterestRate',
        'annual_percentage_rate': 'annualPercentageRate',
        'installment_amount': 'installmentAmount',
        'interest_rate': 'interestRate',
        'installment_interest_amount': 'installmentInterestAmount',
        'first_total_installment_amount': 'firstTotalInstallmentAmount',
        'loan_cet_percentage': 'loanCetPercentage',
        'fixed_interest_rate': 'fixedInterestRate',
        'loan_booking_fee_indicator': 'loanBookingFeeIndicator',
        'loan_booking_fee': 'loanBookingFee',
        'loan_booking_fee_percentage': 'loanBookingFeePercentage',
        'initial_interest_amount': 'initialInterestAmount',
        'initial_fee_amount': 'initialFeeAmount'
    }

    def __init__(self, loan_tenure=None, base_interest_rate=None, annual_percentage_rate=None, installment_amount=None, interest_rate=None, installment_interest_amount=None, first_total_installment_amount=None, loan_cet_percentage=None, fixed_interest_rate=None, loan_booking_fee_indicator=None, loan_booking_fee=None, loan_booking_fee_percentage=None, initial_interest_amount=None, initial_fee_amount=None):  # noqa: E501
        """LoanPaymentPlans - a model defined in Swagger"""  # noqa: E501
        self._loan_tenure = None
        self._base_interest_rate = None
        self._annual_percentage_rate = None
        self._installment_amount = None
        self._interest_rate = None
        self._installment_interest_amount = None
        self._first_total_installment_amount = None
        self._loan_cet_percentage = None
        self._fixed_interest_rate = None
        self._loan_booking_fee_indicator = None
        self._loan_booking_fee = None
        self._loan_booking_fee_percentage = None
        self._initial_interest_amount = None
        self._initial_fee_amount = None
        self.discriminator = None
        self.loan_tenure = loan_tenure
        if base_interest_rate is not None:
            self.base_interest_rate = base_interest_rate
        if annual_percentage_rate is not None:
            self.annual_percentage_rate = annual_percentage_rate
        if installment_amount is not None:
            self.installment_amount = installment_amount
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if installment_interest_amount is not None:
            self.installment_interest_amount = installment_interest_amount
        if first_total_installment_amount is not None:
            self.first_total_installment_amount = first_total_installment_amount
        if loan_cet_percentage is not None:
            self.loan_cet_percentage = loan_cet_percentage
        if fixed_interest_rate is not None:
            self.fixed_interest_rate = fixed_interest_rate
        if loan_booking_fee_indicator is not None:
            self.loan_booking_fee_indicator = loan_booking_fee_indicator
        if loan_booking_fee is not None:
            self.loan_booking_fee = loan_booking_fee
        if loan_booking_fee_percentage is not None:
            self.loan_booking_fee_percentage = loan_booking_fee_percentage
        if initial_interest_amount is not None:
            self.initial_interest_amount = initial_interest_amount
        if initial_fee_amount is not None:
            self.initial_fee_amount = initial_fee_amount

    @property
    def loan_tenure(self):
        """Gets the loan_tenure of this LoanPaymentPlans.  # noqa: E501

        Tenure of loan against card  # noqa: E501

        :return: The loan_tenure of this LoanPaymentPlans.  # noqa: E501
        :rtype: str
        """
        return self._loan_tenure

    @loan_tenure.setter
    def loan_tenure(self, loan_tenure):
        """Sets the loan_tenure of this LoanPaymentPlans.

        Tenure of loan against card  # noqa: E501

        :param loan_tenure: The loan_tenure of this LoanPaymentPlans.  # noqa: E501
        :type: str
        """
        if loan_tenure is None:
            raise ValueError("Invalid value for `loan_tenure`, must not be `None`")  # noqa: E501

        self._loan_tenure = loan_tenure

    @property
    def base_interest_rate(self):
        """Gets the base_interest_rate of this LoanPaymentPlans.  # noqa: E501

        Base Interest rate  # noqa: E501

        :return: The base_interest_rate of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._base_interest_rate

    @base_interest_rate.setter
    def base_interest_rate(self, base_interest_rate):
        """Sets the base_interest_rate of this LoanPaymentPlans.

        Base Interest rate  # noqa: E501

        :param base_interest_rate: The base_interest_rate of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._base_interest_rate = base_interest_rate

    @property
    def annual_percentage_rate(self):
        """Gets the annual_percentage_rate of this LoanPaymentPlans.  # noqa: E501

        Annual percentage rate of the loan  # noqa: E501

        :return: The annual_percentage_rate of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._annual_percentage_rate

    @annual_percentage_rate.setter
    def annual_percentage_rate(self, annual_percentage_rate):
        """Sets the annual_percentage_rate of this LoanPaymentPlans.

        Annual percentage rate of the loan  # noqa: E501

        :param annual_percentage_rate: The annual_percentage_rate of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._annual_percentage_rate = annual_percentage_rate

    @property
    def installment_amount(self):
        """Gets the installment_amount of this LoanPaymentPlans.  # noqa: E501

        Installment amount to be payed by customer in order to repay the loan.  # noqa: E501

        :return: The installment_amount of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._installment_amount

    @installment_amount.setter
    def installment_amount(self, installment_amount):
        """Sets the installment_amount of this LoanPaymentPlans.

        Installment amount to be payed by customer in order to repay the loan.  # noqa: E501

        :param installment_amount: The installment_amount of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._installment_amount = installment_amount

    @property
    def interest_rate(self):
        """Gets the interest_rate of this LoanPaymentPlans.  # noqa: E501

        Interest rate for the loan  # noqa: E501

        :return: The interest_rate of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this LoanPaymentPlans.

        Interest rate for the loan  # noqa: E501

        :param interest_rate: The interest_rate of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def installment_interest_amount(self):
        """Gets the installment_interest_amount of this LoanPaymentPlans.  # noqa: E501

        The interest amount to be paid as installment  # noqa: E501

        :return: The installment_interest_amount of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._installment_interest_amount

    @installment_interest_amount.setter
    def installment_interest_amount(self, installment_interest_amount):
        """Sets the installment_interest_amount of this LoanPaymentPlans.

        The interest amount to be paid as installment  # noqa: E501

        :param installment_interest_amount: The installment_interest_amount of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._installment_interest_amount = installment_interest_amount

    @property
    def first_total_installment_amount(self):
        """Gets the first_total_installment_amount of this LoanPaymentPlans.  # noqa: E501

        Monthly total (Interest + Amount)  # noqa: E501

        :return: The first_total_installment_amount of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._first_total_installment_amount

    @first_total_installment_amount.setter
    def first_total_installment_amount(self, first_total_installment_amount):
        """Sets the first_total_installment_amount of this LoanPaymentPlans.

        Monthly total (Interest + Amount)  # noqa: E501

        :param first_total_installment_amount: The first_total_installment_amount of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._first_total_installment_amount = first_total_installment_amount

    @property
    def loan_cet_percentage(self):
        """Gets the loan_cet_percentage of this LoanPaymentPlans.  # noqa: E501

        Loan CET Percentage  # noqa: E501

        :return: The loan_cet_percentage of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._loan_cet_percentage

    @loan_cet_percentage.setter
    def loan_cet_percentage(self, loan_cet_percentage):
        """Sets the loan_cet_percentage of this LoanPaymentPlans.

        Loan CET Percentage  # noqa: E501

        :param loan_cet_percentage: The loan_cet_percentage of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._loan_cet_percentage = loan_cet_percentage

    @property
    def fixed_interest_rate(self):
        """Gets the fixed_interest_rate of this LoanPaymentPlans.  # noqa: E501

        Fixed interest rate  # noqa: E501

        :return: The fixed_interest_rate of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._fixed_interest_rate

    @fixed_interest_rate.setter
    def fixed_interest_rate(self, fixed_interest_rate):
        """Sets the fixed_interest_rate of this LoanPaymentPlans.

        Fixed interest rate  # noqa: E501

        :param fixed_interest_rate: The fixed_interest_rate of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._fixed_interest_rate = fixed_interest_rate

    @property
    def loan_booking_fee_indicator(self):
        """Gets the loan_booking_fee_indicator of this LoanPaymentPlans.  # noqa: E501

        Loan booking fee indicator  # noqa: E501

        :return: The loan_booking_fee_indicator of this LoanPaymentPlans.  # noqa: E501
        :rtype: str
        """
        return self._loan_booking_fee_indicator

    @loan_booking_fee_indicator.setter
    def loan_booking_fee_indicator(self, loan_booking_fee_indicator):
        """Sets the loan_booking_fee_indicator of this LoanPaymentPlans.

        Loan booking fee indicator  # noqa: E501

        :param loan_booking_fee_indicator: The loan_booking_fee_indicator of this LoanPaymentPlans.  # noqa: E501
        :type: str
        """

        self._loan_booking_fee_indicator = loan_booking_fee_indicator

    @property
    def loan_booking_fee(self):
        """Gets the loan_booking_fee of this LoanPaymentPlans.  # noqa: E501

        Loan booking fee  # noqa: E501

        :return: The loan_booking_fee of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._loan_booking_fee

    @loan_booking_fee.setter
    def loan_booking_fee(self, loan_booking_fee):
        """Sets the loan_booking_fee of this LoanPaymentPlans.

        Loan booking fee  # noqa: E501

        :param loan_booking_fee: The loan_booking_fee of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._loan_booking_fee = loan_booking_fee

    @property
    def loan_booking_fee_percentage(self):
        """Gets the loan_booking_fee_percentage of this LoanPaymentPlans.  # noqa: E501

        Loan booking fee percentage  # noqa: E501

        :return: The loan_booking_fee_percentage of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._loan_booking_fee_percentage

    @loan_booking_fee_percentage.setter
    def loan_booking_fee_percentage(self, loan_booking_fee_percentage):
        """Sets the loan_booking_fee_percentage of this LoanPaymentPlans.

        Loan booking fee percentage  # noqa: E501

        :param loan_booking_fee_percentage: The loan_booking_fee_percentage of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._loan_booking_fee_percentage = loan_booking_fee_percentage

    @property
    def initial_interest_amount(self):
        """Gets the initial_interest_amount of this LoanPaymentPlans.  # noqa: E501

        Initial interest(0th interest)  # noqa: E501

        :return: The initial_interest_amount of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._initial_interest_amount

    @initial_interest_amount.setter
    def initial_interest_amount(self, initial_interest_amount):
        """Sets the initial_interest_amount of this LoanPaymentPlans.

        Initial interest(0th interest)  # noqa: E501

        :param initial_interest_amount: The initial_interest_amount of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._initial_interest_amount = initial_interest_amount

    @property
    def initial_fee_amount(self):
        """Gets the initial_fee_amount of this LoanPaymentPlans.  # noqa: E501

        Initial fee amount charged to customer  # noqa: E501

        :return: The initial_fee_amount of this LoanPaymentPlans.  # noqa: E501
        :rtype: float
        """
        return self._initial_fee_amount

    @initial_fee_amount.setter
    def initial_fee_amount(self, initial_fee_amount):
        """Sets the initial_fee_amount of this LoanPaymentPlans.

        Initial fee amount charged to customer  # noqa: E501

        :param initial_fee_amount: The initial_fee_amount of this LoanPaymentPlans.  # noqa: E501
        :type: float
        """

        self._initial_fee_amount = initial_fee_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanPaymentPlans, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanPaymentPlans):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
