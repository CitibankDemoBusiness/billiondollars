# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'transactions': 'list[Transaction]',
        'statements': 'list[Statements]',
        'investment_transaction': 'list[InvestmentTransaction]',
        'transaction_error_details': 'ErrorResponse',
        'next_start_index': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'transactions': 'transactions',
        'statements': 'statements',
        'investment_transaction': 'investmentTransaction',
        'transaction_error_details': 'transactionErrorDetails',
        'next_start_index': 'nextStartIndex'
    }

    def __init__(self, account_id=None, transactions=None, statements=None, investment_transaction=None, transaction_error_details=None, next_start_index=None):  # noqa: E501
        """TransactionDetails - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._transactions = None
        self._statements = None
        self._investment_transaction = None
        self._transaction_error_details = None
        self._next_start_index = None
        self.discriminator = None
        self.account_id = account_id
        if transactions is not None:
            self.transactions = transactions
        if statements is not None:
            self.statements = statements
        if investment_transaction is not None:
            self.investment_transaction = investment_transaction
        if transaction_error_details is not None:
            self.transaction_error_details = transaction_error_details
        if next_start_index is not None:
            self.next_start_index = next_start_index

    @property
    def account_id(self):
        """Gets the account_id of this TransactionDetails.  # noqa: E501

        The account identifier in encrypted format.Typically, this is not displayed to the customer.  # noqa: E501

        :return: The account_id of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TransactionDetails.

        The account identifier in encrypted format.Typically, this is not displayed to the customer.  # noqa: E501

        :param account_id: The account_id of this TransactionDetails.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def transactions(self):
        """Gets the transactions of this TransactionDetails.  # noqa: E501

        Transactions list  # noqa: E501

        :return: The transactions of this TransactionDetails.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this TransactionDetails.

        Transactions list  # noqa: E501

        :param transactions: The transactions of this TransactionDetails.  # noqa: E501
        :type: list[Transaction]
        """

        self._transactions = transactions

    @property
    def statements(self):
        """Gets the statements of this TransactionDetails.  # noqa: E501

        Applicable only for credit cards and will be returned only in the first request. If there is additional data available then in subsequent request this will not be returned.  # noqa: E501

        :return: The statements of this TransactionDetails.  # noqa: E501
        :rtype: list[Statements]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this TransactionDetails.

        Applicable only for credit cards and will be returned only in the first request. If there is additional data available then in subsequent request this will not be returned.  # noqa: E501

        :param statements: The statements of this TransactionDetails.  # noqa: E501
        :type: list[Statements]
        """

        self._statements = statements

    @property
    def investment_transaction(self):
        """Gets the investment_transaction of this TransactionDetails.  # noqa: E501

        Investment Transactions list  # noqa: E501

        :return: The investment_transaction of this TransactionDetails.  # noqa: E501
        :rtype: list[InvestmentTransaction]
        """
        return self._investment_transaction

    @investment_transaction.setter
    def investment_transaction(self, investment_transaction):
        """Sets the investment_transaction of this TransactionDetails.

        Investment Transactions list  # noqa: E501

        :param investment_transaction: The investment_transaction of this TransactionDetails.  # noqa: E501
        :type: list[InvestmentTransaction]
        """

        self._investment_transaction = investment_transaction

    @property
    def transaction_error_details(self):
        """Gets the transaction_error_details of this TransactionDetails.  # noqa: E501


        :return: The transaction_error_details of this TransactionDetails.  # noqa: E501
        :rtype: ErrorResponse
        """
        return self._transaction_error_details

    @transaction_error_details.setter
    def transaction_error_details(self, transaction_error_details):
        """Sets the transaction_error_details of this TransactionDetails.


        :param transaction_error_details: The transaction_error_details of this TransactionDetails.  # noqa: E501
        :type: ErrorResponse
        """

        self._transaction_error_details = transaction_error_details

    @property
    def next_start_index(self):
        """Gets the next_start_index of this TransactionDetails.  # noqa: E501

        In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.  # noqa: E501

        :return: The next_start_index of this TransactionDetails.  # noqa: E501
        :rtype: str
        """
        return self._next_start_index

    @next_start_index.setter
    def next_start_index(self, next_start_index):
        """Sets the next_start_index of this TransactionDetails.

        In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.  # noqa: E501

        :param next_start_index: The next_start_index of this TransactionDetails.  # noqa: E501
        :type: str
        """

        self._next_start_index = next_start_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
