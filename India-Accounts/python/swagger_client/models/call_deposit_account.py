# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CallDepositAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'str',
        'product_code': 'str',
        'display_account_number': 'str',
        'currency_code': 'str',
        'available_balance': 'float',
        'current_balance': 'float',
        'interest_rate': 'float',
        'opening_date': 'date',
        'base_currency_maturity_amount': 'float',
        'last_interest_payment_amount': 'float',
        'last_interest_payment_date': 'date'
    }

    attribute_map = {
        'product_name': 'productName',
        'product_code': 'productCode',
        'display_account_number': 'displayAccountNumber',
        'currency_code': 'currencyCode',
        'available_balance': 'availableBalance',
        'current_balance': 'currentBalance',
        'interest_rate': 'interestRate',
        'opening_date': 'openingDate',
        'base_currency_maturity_amount': 'baseCurrencyMaturityAmount',
        'last_interest_payment_amount': 'lastInterestPaymentAmount',
        'last_interest_payment_date': 'lastInterestPaymentDate'
    }

    def __init__(self, product_name=None, product_code=None, display_account_number=None, currency_code=None, available_balance=None, current_balance=None, interest_rate=None, opening_date=None, base_currency_maturity_amount=None, last_interest_payment_amount=None, last_interest_payment_date=None):  # noqa: E501
        """CallDepositAccount - a model defined in Swagger"""  # noqa: E501
        self._product_name = None
        self._product_code = None
        self._display_account_number = None
        self._currency_code = None
        self._available_balance = None
        self._current_balance = None
        self._interest_rate = None
        self._opening_date = None
        self._base_currency_maturity_amount = None
        self._last_interest_payment_amount = None
        self._last_interest_payment_date = None
        self.discriminator = None
        if product_name is not None:
            self.product_name = product_name
        if product_code is not None:
            self.product_code = product_code
        self.display_account_number = display_account_number
        if currency_code is not None:
            self.currency_code = currency_code
        if available_balance is not None:
            self.available_balance = available_balance
        if current_balance is not None:
            self.current_balance = current_balance
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if opening_date is not None:
            self.opening_date = opening_date
        if base_currency_maturity_amount is not None:
            self.base_currency_maturity_amount = base_currency_maturity_amount
        if last_interest_payment_amount is not None:
            self.last_interest_payment_amount = last_interest_payment_amount
        if last_interest_payment_date is not None:
            self.last_interest_payment_date = last_interest_payment_date

    @property
    def product_name(self):
        """Gets the product_name of this CallDepositAccount.  # noqa: E501

        The name of the product  # noqa: E501

        :return: The product_name of this CallDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this CallDepositAccount.

        The name of the product  # noqa: E501

        :param product_name: The product_name of this CallDepositAccount.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_code(self):
        """Gets the product_code of this CallDepositAccount.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this CallDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this CallDepositAccount.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this CallDepositAccount.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def display_account_number(self):
        """Gets the display_account_number of this CallDepositAccount.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this CallDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this CallDepositAccount.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this CallDepositAccount.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def currency_code(self):
        """Gets the currency_code of this CallDepositAccount.  # noqa: E501

        The currency code of the account in ISO 4217 format  # noqa: E501

        :return: The currency_code of this CallDepositAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CallDepositAccount.

        The currency code of the account in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this CallDepositAccount.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def available_balance(self):
        """Gets the available_balance of this CallDepositAccount.  # noqa: E501

        The amount available  to withdraw or transfer immediately  # noqa: E501

        :return: The available_balance of this CallDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this CallDepositAccount.

        The amount available  to withdraw or transfer immediately  # noqa: E501

        :param available_balance: The available_balance of this CallDepositAccount.  # noqa: E501
        :type: float
        """

        self._available_balance = available_balance

    @property
    def current_balance(self):
        """Gets the current_balance of this CallDepositAccount.  # noqa: E501

        The current balance including any pending or in progress deposits and withdrawals  # noqa: E501

        :return: The current_balance of this CallDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this CallDepositAccount.

        The current balance including any pending or in progress deposits and withdrawals  # noqa: E501

        :param current_balance: The current_balance of this CallDepositAccount.  # noqa: E501
        :type: float
        """

        self._current_balance = current_balance

    @property
    def interest_rate(self):
        """Gets the interest_rate of this CallDepositAccount.  # noqa: E501

        The rate of interest applicable for the call deposit account  # noqa: E501

        :return: The interest_rate of this CallDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this CallDepositAccount.

        The rate of interest applicable for the call deposit account  # noqa: E501

        :param interest_rate: The interest_rate of this CallDepositAccount.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def opening_date(self):
        """Gets the opening_date of this CallDepositAccount.  # noqa: E501

        Call deposit account opening date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The opening_date of this CallDepositAccount.  # noqa: E501
        :rtype: date
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this CallDepositAccount.

        Call deposit account opening date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param opening_date: The opening_date of this CallDepositAccount.  # noqa: E501
        :type: date
        """

        self._opening_date = opening_date

    @property
    def base_currency_maturity_amount(self):
        """Gets the base_currency_maturity_amount of this CallDepositAccount.  # noqa: E501

        Maturity amount on the call deposit account.  # noqa: E501

        :return: The base_currency_maturity_amount of this CallDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._base_currency_maturity_amount

    @base_currency_maturity_amount.setter
    def base_currency_maturity_amount(self, base_currency_maturity_amount):
        """Sets the base_currency_maturity_amount of this CallDepositAccount.

        Maturity amount on the call deposit account.  # noqa: E501

        :param base_currency_maturity_amount: The base_currency_maturity_amount of this CallDepositAccount.  # noqa: E501
        :type: float
        """

        self._base_currency_maturity_amount = base_currency_maturity_amount

    @property
    def last_interest_payment_amount(self):
        """Gets the last_interest_payment_amount of this CallDepositAccount.  # noqa: E501

        Last interest payment amount on the call deposit account.  # noqa: E501

        :return: The last_interest_payment_amount of this CallDepositAccount.  # noqa: E501
        :rtype: float
        """
        return self._last_interest_payment_amount

    @last_interest_payment_amount.setter
    def last_interest_payment_amount(self, last_interest_payment_amount):
        """Sets the last_interest_payment_amount of this CallDepositAccount.

        Last interest payment amount on the call deposit account.  # noqa: E501

        :param last_interest_payment_amount: The last_interest_payment_amount of this CallDepositAccount.  # noqa: E501
        :type: float
        """

        self._last_interest_payment_amount = last_interest_payment_amount

    @property
    def last_interest_payment_date(self):
        """Gets the last_interest_payment_date of this CallDepositAccount.  # noqa: E501

        Last interest payment date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The last_interest_payment_date of this CallDepositAccount.  # noqa: E501
        :rtype: date
        """
        return self._last_interest_payment_date

    @last_interest_payment_date.setter
    def last_interest_payment_date(self, last_interest_payment_date):
        """Sets the last_interest_payment_date of this CallDepositAccount.

        Last interest payment date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param last_interest_payment_date: The last_interest_payment_date of this CallDepositAccount.  # noqa: E501
        :type: date
        """

        self._last_interest_payment_date = last_interest_payment_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CallDepositAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallDepositAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
