# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatementList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'statement_id': 'str',
        'statement_date': 'date'
    }

    attribute_map = {
        'statement_id': 'statementId',
        'statement_date': 'statementDate'
    }

    def __init__(self, statement_id=None, statement_date=None):  # noqa: E501
        """StatementList - a model defined in Swagger"""  # noqa: E501
        self._statement_id = None
        self._statement_date = None
        self.discriminator = None
        if statement_id is not None:
            self.statement_id = statement_id
        if statement_date is not None:
            self.statement_date = statement_date

    @property
    def statement_id(self):
        """Gets the statement_id of this StatementList.  # noqa: E501

        Unique identifier for the statement  # noqa: E501

        :return: The statement_id of this StatementList.  # noqa: E501
        :rtype: str
        """
        return self._statement_id

    @statement_id.setter
    def statement_id(self, statement_id):
        """Sets the statement_id of this StatementList.

        Unique identifier for the statement  # noqa: E501

        :param statement_id: The statement_id of this StatementList.  # noqa: E501
        :type: str
        """

        self._statement_id = statement_id

    @property
    def statement_date(self):
        """Gets the statement_date of this StatementList.  # noqa: E501

        Date on which the account statement has been generated in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The statement_date of this StatementList.  # noqa: E501
        :rtype: date
        """
        return self._statement_date

    @statement_date.setter
    def statement_date(self, statement_date):
        """Sets the statement_date of this StatementList.

        Date on which the account statement has been generated in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param statement_date: The statement_date of this StatementList.  # noqa: E501
        :type: date
        """

        self._statement_date = statement_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
