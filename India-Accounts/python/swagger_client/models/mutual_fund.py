# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MutualFund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'net_asset_value_amount': 'float',
        'fund_code': 'str',
        'fund_name': 'str',
        'investment_amount': 'float',
        'currency_code': 'str',
        'maturity_date': 'date',
        'available_units': 'float',
        'settled_units': 'float',
        'assigned_units': 'float',
        'confirmed_units': 'float',
        'pending_units': 'float',
        'block_units': 'float',
        'unrealized_gains': 'float',
        'unrealized_percentage_gain': 'float',
        'latest_price': 'float'
    }

    attribute_map = {
        'net_asset_value_amount': 'netAssetValueAmount',
        'fund_code': 'fundCode',
        'fund_name': 'fundName',
        'investment_amount': 'investmentAmount',
        'currency_code': 'currencyCode',
        'maturity_date': 'maturityDate',
        'available_units': 'availableUnits',
        'settled_units': 'settledUnits',
        'assigned_units': 'assignedUnits',
        'confirmed_units': 'confirmedUnits',
        'pending_units': 'pendingUnits',
        'block_units': 'blockUnits',
        'unrealized_gains': 'unrealizedGains',
        'unrealized_percentage_gain': 'unrealizedPercentageGain',
        'latest_price': 'latestPrice'
    }

    def __init__(self, net_asset_value_amount=None, fund_code=None, fund_name=None, investment_amount=None, currency_code=None, maturity_date=None, available_units=None, settled_units=None, assigned_units=None, confirmed_units=None, pending_units=None, block_units=None, unrealized_gains=None, unrealized_percentage_gain=None, latest_price=None):  # noqa: E501
        """MutualFund - a model defined in Swagger"""  # noqa: E501
        self._net_asset_value_amount = None
        self._fund_code = None
        self._fund_name = None
        self._investment_amount = None
        self._currency_code = None
        self._maturity_date = None
        self._available_units = None
        self._settled_units = None
        self._assigned_units = None
        self._confirmed_units = None
        self._pending_units = None
        self._block_units = None
        self._unrealized_gains = None
        self._unrealized_percentage_gain = None
        self._latest_price = None
        self.discriminator = None
        if net_asset_value_amount is not None:
            self.net_asset_value_amount = net_asset_value_amount
        if fund_code is not None:
            self.fund_code = fund_code
        if fund_name is not None:
            self.fund_name = fund_name
        if investment_amount is not None:
            self.investment_amount = investment_amount
        if currency_code is not None:
            self.currency_code = currency_code
        if maturity_date is not None:
            self.maturity_date = maturity_date
        if available_units is not None:
            self.available_units = available_units
        if settled_units is not None:
            self.settled_units = settled_units
        if assigned_units is not None:
            self.assigned_units = assigned_units
        if confirmed_units is not None:
            self.confirmed_units = confirmed_units
        if pending_units is not None:
            self.pending_units = pending_units
        if block_units is not None:
            self.block_units = block_units
        if unrealized_gains is not None:
            self.unrealized_gains = unrealized_gains
        if unrealized_percentage_gain is not None:
            self.unrealized_percentage_gain = unrealized_percentage_gain
        if latest_price is not None:
            self.latest_price = latest_price

    @property
    def net_asset_value_amount(self):
        """Gets the net_asset_value_amount of this MutualFund.  # noqa: E501

        The current market worth of investment  # noqa: E501

        :return: The net_asset_value_amount of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._net_asset_value_amount

    @net_asset_value_amount.setter
    def net_asset_value_amount(self, net_asset_value_amount):
        """Sets the net_asset_value_amount of this MutualFund.

        The current market worth of investment  # noqa: E501

        :param net_asset_value_amount: The net_asset_value_amount of this MutualFund.  # noqa: E501
        :type: float
        """

        self._net_asset_value_amount = net_asset_value_amount

    @property
    def fund_code(self):
        """Gets the fund_code of this MutualFund.  # noqa: E501

        The code of the fund  # noqa: E501

        :return: The fund_code of this MutualFund.  # noqa: E501
        :rtype: str
        """
        return self._fund_code

    @fund_code.setter
    def fund_code(self, fund_code):
        """Sets the fund_code of this MutualFund.

        The code of the fund  # noqa: E501

        :param fund_code: The fund_code of this MutualFund.  # noqa: E501
        :type: str
        """

        self._fund_code = fund_code

    @property
    def fund_name(self):
        """Gets the fund_name of this MutualFund.  # noqa: E501

        The name of the fund  # noqa: E501

        :return: The fund_name of this MutualFund.  # noqa: E501
        :rtype: str
        """
        return self._fund_name

    @fund_name.setter
    def fund_name(self, fund_name):
        """Sets the fund_name of this MutualFund.

        The name of the fund  # noqa: E501

        :param fund_name: The fund_name of this MutualFund.  # noqa: E501
        :type: str
        """

        self._fund_name = fund_name

    @property
    def investment_amount(self):
        """Gets the investment_amount of this MutualFund.  # noqa: E501

        The investment amount  # noqa: E501

        :return: The investment_amount of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._investment_amount

    @investment_amount.setter
    def investment_amount(self, investment_amount):
        """Sets the investment_amount of this MutualFund.

        The investment amount  # noqa: E501

        :param investment_amount: The investment_amount of this MutualFund.  # noqa: E501
        :type: float
        """

        self._investment_amount = investment_amount

    @property
    def currency_code(self):
        """Gets the currency_code of this MutualFund.  # noqa: E501

        The currency code of the account in ISO 4217 format  # noqa: E501

        :return: The currency_code of this MutualFund.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MutualFund.

        The currency code of the account in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this MutualFund.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def maturity_date(self):
        """Gets the maturity_date of this MutualFund.  # noqa: E501

        The maturity date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :return: The maturity_date of this MutualFund.  # noqa: E501
        :rtype: date
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this MutualFund.

        The maturity date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :param maturity_date: The maturity_date of this MutualFund.  # noqa: E501
        :type: date
        """

        self._maturity_date = maturity_date

    @property
    def available_units(self):
        """Gets the available_units of this MutualFund.  # noqa: E501

        The available units  # noqa: E501

        :return: The available_units of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._available_units

    @available_units.setter
    def available_units(self, available_units):
        """Sets the available_units of this MutualFund.

        The available units  # noqa: E501

        :param available_units: The available_units of this MutualFund.  # noqa: E501
        :type: float
        """

        self._available_units = available_units

    @property
    def settled_units(self):
        """Gets the settled_units of this MutualFund.  # noqa: E501

        The settled units  # noqa: E501

        :return: The settled_units of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._settled_units

    @settled_units.setter
    def settled_units(self, settled_units):
        """Sets the settled_units of this MutualFund.

        The settled units  # noqa: E501

        :param settled_units: The settled_units of this MutualFund.  # noqa: E501
        :type: float
        """

        self._settled_units = settled_units

    @property
    def assigned_units(self):
        """Gets the assigned_units of this MutualFund.  # noqa: E501

        The assigned units  # noqa: E501

        :return: The assigned_units of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._assigned_units

    @assigned_units.setter
    def assigned_units(self, assigned_units):
        """Sets the assigned_units of this MutualFund.

        The assigned units  # noqa: E501

        :param assigned_units: The assigned_units of this MutualFund.  # noqa: E501
        :type: float
        """

        self._assigned_units = assigned_units

    @property
    def confirmed_units(self):
        """Gets the confirmed_units of this MutualFund.  # noqa: E501

        The confirmed units  # noqa: E501

        :return: The confirmed_units of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._confirmed_units

    @confirmed_units.setter
    def confirmed_units(self, confirmed_units):
        """Sets the confirmed_units of this MutualFund.

        The confirmed units  # noqa: E501

        :param confirmed_units: The confirmed_units of this MutualFund.  # noqa: E501
        :type: float
        """

        self._confirmed_units = confirmed_units

    @property
    def pending_units(self):
        """Gets the pending_units of this MutualFund.  # noqa: E501

        The pending units  # noqa: E501

        :return: The pending_units of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._pending_units

    @pending_units.setter
    def pending_units(self, pending_units):
        """Sets the pending_units of this MutualFund.

        The pending units  # noqa: E501

        :param pending_units: The pending_units of this MutualFund.  # noqa: E501
        :type: float
        """

        self._pending_units = pending_units

    @property
    def block_units(self):
        """Gets the block_units of this MutualFund.  # noqa: E501

        The blocked units  # noqa: E501

        :return: The block_units of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._block_units

    @block_units.setter
    def block_units(self, block_units):
        """Sets the block_units of this MutualFund.

        The blocked units  # noqa: E501

        :param block_units: The block_units of this MutualFund.  # noqa: E501
        :type: float
        """

        self._block_units = block_units

    @property
    def unrealized_gains(self):
        """Gets the unrealized_gains of this MutualFund.  # noqa: E501

        The unrealized gain  # noqa: E501

        :return: The unrealized_gains of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._unrealized_gains

    @unrealized_gains.setter
    def unrealized_gains(self, unrealized_gains):
        """Sets the unrealized_gains of this MutualFund.

        The unrealized gain  # noqa: E501

        :param unrealized_gains: The unrealized_gains of this MutualFund.  # noqa: E501
        :type: float
        """

        self._unrealized_gains = unrealized_gains

    @property
    def unrealized_percentage_gain(self):
        """Gets the unrealized_percentage_gain of this MutualFund.  # noqa: E501

        The unrealized gain in percentage  # noqa: E501

        :return: The unrealized_percentage_gain of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._unrealized_percentage_gain

    @unrealized_percentage_gain.setter
    def unrealized_percentage_gain(self, unrealized_percentage_gain):
        """Sets the unrealized_percentage_gain of this MutualFund.

        The unrealized gain in percentage  # noqa: E501

        :param unrealized_percentage_gain: The unrealized_percentage_gain of this MutualFund.  # noqa: E501
        :type: float
        """

        self._unrealized_percentage_gain = unrealized_percentage_gain

    @property
    def latest_price(self):
        """Gets the latest_price of this MutualFund.  # noqa: E501

        The latest price  # noqa: E501

        :return: The latest_price of this MutualFund.  # noqa: E501
        :rtype: float
        """
        return self._latest_price

    @latest_price.setter
    def latest_price(self, latest_price):
        """Sets the latest_price of this MutualFund.

        The latest price  # noqa: E501

        :param latest_price: The latest_price of this MutualFund.  # noqa: E501
        :type: float
        """

        self._latest_price = latest_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MutualFund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MutualFund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
