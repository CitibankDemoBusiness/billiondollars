# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalanceTransferEligibilityDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'display_account_number': 'str',
        'bt_supported_account_group': 'str',
        'maximum_eligible_loan_amount': 'float',
        'minimum_eligible_loan_amount': 'float',
        'bt_disbursement_options': 'list[BtDisbursementOptions]',
        'payment_pans': 'list[PaymentPans]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'display_account_number': 'displayAccountNumber',
        'bt_supported_account_group': 'btSupportedAccountGroup',
        'maximum_eligible_loan_amount': 'maximumEligibleLoanAmount',
        'minimum_eligible_loan_amount': 'minimumEligibleLoanAmount',
        'bt_disbursement_options': 'btDisbursementOptions',
        'payment_pans': 'paymentPans'
    }

    def __init__(self, account_id=None, display_account_number=None, bt_supported_account_group=None, maximum_eligible_loan_amount=None, minimum_eligible_loan_amount=None, bt_disbursement_options=None, payment_pans=None):  # noqa: E501
        """BalanceTransferEligibilityDetails - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._display_account_number = None
        self._bt_supported_account_group = None
        self._maximum_eligible_loan_amount = None
        self._minimum_eligible_loan_amount = None
        self._bt_disbursement_options = None
        self._payment_pans = None
        self.discriminator = None
        self.account_id = account_id
        self.display_account_number = display_account_number
        if bt_supported_account_group is not None:
            self.bt_supported_account_group = bt_supported_account_group
        self.maximum_eligible_loan_amount = maximum_eligible_loan_amount
        if minimum_eligible_loan_amount is not None:
            self.minimum_eligible_loan_amount = minimum_eligible_loan_amount
        self.bt_disbursement_options = bt_disbursement_options
        if payment_pans is not None:
            self.payment_pans = payment_pans

    @property
    def account_id(self):
        """Gets the account_id of this BalanceTransferEligibilityDetails.  # noqa: E501

        The account id  in encrypted format.  # noqa: E501

        :return: The account_id of this BalanceTransferEligibilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BalanceTransferEligibilityDetails.

        The account id  in encrypted format.  # noqa: E501

        :param account_id: The account_id of this BalanceTransferEligibilityDetails.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def display_account_number(self):
        """Gets the display_account_number of this BalanceTransferEligibilityDetails.  # noqa: E501

        A masked account number that can be displayed to the customer.  # noqa: E501

        :return: The display_account_number of this BalanceTransferEligibilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this BalanceTransferEligibilityDetails.

        A masked account number that can be displayed to the customer.  # noqa: E501

        :param display_account_number: The display_account_number of this BalanceTransferEligibilityDetails.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def bt_supported_account_group(self):
        """Gets the bt_supported_account_group of this BalanceTransferEligibilityDetails.  # noqa: E501

        This field refers the account group supported by Balance Transfer. This is a reference data field. Please use /v1/utilities/referenceData/{btSupportedAccountGroup} resource to get valid value of this field with description.  # noqa: E501

        :return: The bt_supported_account_group of this BalanceTransferEligibilityDetails.  # noqa: E501
        :rtype: str
        """
        return self._bt_supported_account_group

    @bt_supported_account_group.setter
    def bt_supported_account_group(self, bt_supported_account_group):
        """Sets the bt_supported_account_group of this BalanceTransferEligibilityDetails.

        This field refers the account group supported by Balance Transfer. This is a reference data field. Please use /v1/utilities/referenceData/{btSupportedAccountGroup} resource to get valid value of this field with description.  # noqa: E501

        :param bt_supported_account_group: The bt_supported_account_group of this BalanceTransferEligibilityDetails.  # noqa: E501
        :type: str
        """

        self._bt_supported_account_group = bt_supported_account_group

    @property
    def maximum_eligible_loan_amount(self):
        """Gets the maximum_eligible_loan_amount of this BalanceTransferEligibilityDetails.  # noqa: E501

        This field indicates the maximum eligible amount for loan.  # noqa: E501

        :return: The maximum_eligible_loan_amount of this BalanceTransferEligibilityDetails.  # noqa: E501
        :rtype: float
        """
        return self._maximum_eligible_loan_amount

    @maximum_eligible_loan_amount.setter
    def maximum_eligible_loan_amount(self, maximum_eligible_loan_amount):
        """Sets the maximum_eligible_loan_amount of this BalanceTransferEligibilityDetails.

        This field indicates the maximum eligible amount for loan.  # noqa: E501

        :param maximum_eligible_loan_amount: The maximum_eligible_loan_amount of this BalanceTransferEligibilityDetails.  # noqa: E501
        :type: float
        """
        if maximum_eligible_loan_amount is None:
            raise ValueError("Invalid value for `maximum_eligible_loan_amount`, must not be `None`")  # noqa: E501

        self._maximum_eligible_loan_amount = maximum_eligible_loan_amount

    @property
    def minimum_eligible_loan_amount(self):
        """Gets the minimum_eligible_loan_amount of this BalanceTransferEligibilityDetails.  # noqa: E501

        This field indicates the minimum eligible amount for loan.  # noqa: E501

        :return: The minimum_eligible_loan_amount of this BalanceTransferEligibilityDetails.  # noqa: E501
        :rtype: float
        """
        return self._minimum_eligible_loan_amount

    @minimum_eligible_loan_amount.setter
    def minimum_eligible_loan_amount(self, minimum_eligible_loan_amount):
        """Sets the minimum_eligible_loan_amount of this BalanceTransferEligibilityDetails.

        This field indicates the minimum eligible amount for loan.  # noqa: E501

        :param minimum_eligible_loan_amount: The minimum_eligible_loan_amount of this BalanceTransferEligibilityDetails.  # noqa: E501
        :type: float
        """

        self._minimum_eligible_loan_amount = minimum_eligible_loan_amount

    @property
    def bt_disbursement_options(self):
        """Gets the bt_disbursement_options of this BalanceTransferEligibilityDetails.  # noqa: E501


        :return: The bt_disbursement_options of this BalanceTransferEligibilityDetails.  # noqa: E501
        :rtype: list[BtDisbursementOptions]
        """
        return self._bt_disbursement_options

    @bt_disbursement_options.setter
    def bt_disbursement_options(self, bt_disbursement_options):
        """Sets the bt_disbursement_options of this BalanceTransferEligibilityDetails.


        :param bt_disbursement_options: The bt_disbursement_options of this BalanceTransferEligibilityDetails.  # noqa: E501
        :type: list[BtDisbursementOptions]
        """
        if bt_disbursement_options is None:
            raise ValueError("Invalid value for `bt_disbursement_options`, must not be `None`")  # noqa: E501

        self._bt_disbursement_options = bt_disbursement_options

    @property
    def payment_pans(self):
        """Gets the payment_pans of this BalanceTransferEligibilityDetails.  # noqa: E501


        :return: The payment_pans of this BalanceTransferEligibilityDetails.  # noqa: E501
        :rtype: list[PaymentPans]
        """
        return self._payment_pans

    @payment_pans.setter
    def payment_pans(self, payment_pans):
        """Sets the payment_pans of this BalanceTransferEligibilityDetails.


        :param payment_pans: The payment_pans of this BalanceTransferEligibilityDetails.  # noqa: E501
        :type: list[PaymentPans]
        """

        self._payment_pans = payment_pans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceTransferEligibilityDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceTransferEligibilityDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
