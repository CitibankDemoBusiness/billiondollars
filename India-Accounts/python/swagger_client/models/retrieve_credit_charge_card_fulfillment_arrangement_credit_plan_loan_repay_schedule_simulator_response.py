# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'effective_interest_rate': 'float',
        'annual_percentage_rate': 'float',
        'total_interest_amount': 'float',
        'amortization_schedule': 'RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule'
    }

    attribute_map = {
        'effective_interest_rate': 'effectiveInterestRate',
        'annual_percentage_rate': 'annualPercentageRate',
        'total_interest_amount': 'totalInterestAmount',
        'amortization_schedule': 'amortizationSchedule'
    }

    def __init__(self, effective_interest_rate=None, annual_percentage_rate=None, total_interest_amount=None, amortization_schedule=None):  # noqa: E501
        """RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse - a model defined in Swagger"""  # noqa: E501
        self._effective_interest_rate = None
        self._annual_percentage_rate = None
        self._total_interest_amount = None
        self._amortization_schedule = None
        self.discriminator = None
        if effective_interest_rate is not None:
            self.effective_interest_rate = effective_interest_rate
        if annual_percentage_rate is not None:
            self.annual_percentage_rate = annual_percentage_rate
        if total_interest_amount is not None:
            self.total_interest_amount = total_interest_amount
        if amortization_schedule is not None:
            self.amortization_schedule = amortization_schedule

    @property
    def effective_interest_rate(self):
        """Gets the effective_interest_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501

        Effective interest rate.  # noqa: E501

        :return: The effective_interest_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501
        :rtype: float
        """
        return self._effective_interest_rate

    @effective_interest_rate.setter
    def effective_interest_rate(self, effective_interest_rate):
        """Sets the effective_interest_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.

        Effective interest rate.  # noqa: E501

        :param effective_interest_rate: The effective_interest_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501
        :type: float
        """

        self._effective_interest_rate = effective_interest_rate

    @property
    def annual_percentage_rate(self):
        """Gets the annual_percentage_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501

        Applicable Annual Percentage Rate  # noqa: E501

        :return: The annual_percentage_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501
        :rtype: float
        """
        return self._annual_percentage_rate

    @annual_percentage_rate.setter
    def annual_percentage_rate(self, annual_percentage_rate):
        """Sets the annual_percentage_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.

        Applicable Annual Percentage Rate  # noqa: E501

        :param annual_percentage_rate: The annual_percentage_rate of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501
        :type: float
        """

        self._annual_percentage_rate = annual_percentage_rate

    @property
    def total_interest_amount(self):
        """Gets the total_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501

        Total interest amount on checking account  # noqa: E501

        :return: The total_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_amount

    @total_interest_amount.setter
    def total_interest_amount(self, total_interest_amount):
        """Sets the total_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.

        Total interest amount on checking account  # noqa: E501

        :param total_interest_amount: The total_interest_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501
        :type: float
        """

        self._total_interest_amount = total_interest_amount

    @property
    def amortization_schedule(self):
        """Gets the amortization_schedule of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501


        :return: The amortization_schedule of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501
        :rtype: RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule
        """
        return self._amortization_schedule

    @amortization_schedule.setter
    def amortization_schedule(self, amortization_schedule):
        """Sets the amortization_schedule of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.


        :param amortization_schedule: The amortization_schedule of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse.  # noqa: E501
        :type: RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule
        """

        self._amortization_schedule = amortization_schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
