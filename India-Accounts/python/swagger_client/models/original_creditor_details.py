# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OriginalCreditorDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_creditor_name': 'str',
        'original_creditor_proxy_id_type': 'str',
        'original_creditor_proxy_id_value': 'str'
    }

    attribute_map = {
        'original_creditor_name': 'originalCreditorName',
        'original_creditor_proxy_id_type': 'originalCreditorProxyIdType',
        'original_creditor_proxy_id_value': 'originalCreditorProxyIdValue'
    }

    def __init__(self, original_creditor_name=None, original_creditor_proxy_id_type=None, original_creditor_proxy_id_value=None):  # noqa: E501
        """OriginalCreditorDetails - a model defined in Swagger"""  # noqa: E501
        self._original_creditor_name = None
        self._original_creditor_proxy_id_type = None
        self._original_creditor_proxy_id_value = None
        self.discriminator = None
        if original_creditor_name is not None:
            self.original_creditor_name = original_creditor_name
        if original_creditor_proxy_id_type is not None:
            self.original_creditor_proxy_id_type = original_creditor_proxy_id_type
        if original_creditor_proxy_id_value is not None:
            self.original_creditor_proxy_id_value = original_creditor_proxy_id_value

    @property
    def original_creditor_name(self):
        """Gets the original_creditor_name of this OriginalCreditorDetails.  # noqa: E501

        Original Creditor Name  # noqa: E501

        :return: The original_creditor_name of this OriginalCreditorDetails.  # noqa: E501
        :rtype: str
        """
        return self._original_creditor_name

    @original_creditor_name.setter
    def original_creditor_name(self, original_creditor_name):
        """Sets the original_creditor_name of this OriginalCreditorDetails.

        Original Creditor Name  # noqa: E501

        :param original_creditor_name: The original_creditor_name of this OriginalCreditorDetails.  # noqa: E501
        :type: str
        """

        self._original_creditor_name = original_creditor_name

    @property
    def original_creditor_proxy_id_type(self):
        """Gets the original_creditor_proxy_id_type of this OriginalCreditorDetails.  # noqa: E501

        Proxy ID Type used for the payee account identification  # noqa: E501

        :return: The original_creditor_proxy_id_type of this OriginalCreditorDetails.  # noqa: E501
        :rtype: str
        """
        return self._original_creditor_proxy_id_type

    @original_creditor_proxy_id_type.setter
    def original_creditor_proxy_id_type(self, original_creditor_proxy_id_type):
        """Sets the original_creditor_proxy_id_type of this OriginalCreditorDetails.

        Proxy ID Type used for the payee account identification  # noqa: E501

        :param original_creditor_proxy_id_type: The original_creditor_proxy_id_type of this OriginalCreditorDetails.  # noqa: E501
        :type: str
        """

        self._original_creditor_proxy_id_type = original_creditor_proxy_id_type

    @property
    def original_creditor_proxy_id_value(self):
        """Gets the original_creditor_proxy_id_value of this OriginalCreditorDetails.  # noqa: E501

        Proxy ID value used for the payee account identification  # noqa: E501

        :return: The original_creditor_proxy_id_value of this OriginalCreditorDetails.  # noqa: E501
        :rtype: str
        """
        return self._original_creditor_proxy_id_value

    @original_creditor_proxy_id_value.setter
    def original_creditor_proxy_id_value(self, original_creditor_proxy_id_value):
        """Sets the original_creditor_proxy_id_value of this OriginalCreditorDetails.

        Proxy ID value used for the payee account identification  # noqa: E501

        :param original_creditor_proxy_id_value: The original_creditor_proxy_id_value of this OriginalCreditorDetails.  # noqa: E501
        :type: str
        """

        self._original_creditor_proxy_id_value = original_creditor_proxy_id_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OriginalCreditorDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OriginalCreditorDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
