# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan': 'list[Loan]',
        'total_loan_amount': 'float',
        'loan_tenure_inmonths': 'int',
        'top_up_amount': 'float',
        'loan_description': 'str',
        'disbursement_option': 'str',
        'disbursement_account_id': 'str',
        'payee_id': 'str',
        'beneficiary_bank_detail': 'BeneficiaryBankDetail',
        'loan_purpose': 'str'
    }

    attribute_map = {
        'loan': 'loan',
        'total_loan_amount': 'totalLoanAmount',
        'loan_tenure_inmonths': 'loanTenureInmonths',
        'top_up_amount': 'topUpAmount',
        'loan_description': 'loanDescription',
        'disbursement_option': 'disbursementOption',
        'disbursement_account_id': 'disbursementAccountId',
        'payee_id': 'payeeId',
        'beneficiary_bank_detail': 'beneficiaryBankDetail',
        'loan_purpose': 'loanPurpose'
    }

    def __init__(self, loan=None, total_loan_amount=None, loan_tenure_inmonths=None, top_up_amount=None, loan_description=None, disbursement_option=None, disbursement_account_id=None, payee_id=None, beneficiary_bank_detail=None, loan_purpose=None):  # noqa: E501
        """RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest - a model defined in Swagger"""  # noqa: E501
        self._loan = None
        self._total_loan_amount = None
        self._loan_tenure_inmonths = None
        self._top_up_amount = None
        self._loan_description = None
        self._disbursement_option = None
        self._disbursement_account_id = None
        self._payee_id = None
        self._beneficiary_bank_detail = None
        self._loan_purpose = None
        self.discriminator = None
        if loan is not None:
            self.loan = loan
        self.total_loan_amount = total_loan_amount
        self.loan_tenure_inmonths = loan_tenure_inmonths
        self.top_up_amount = top_up_amount
        self.loan_description = loan_description
        self.disbursement_option = disbursement_option
        if disbursement_account_id is not None:
            self.disbursement_account_id = disbursement_account_id
        if payee_id is not None:
            self.payee_id = payee_id
        if beneficiary_bank_detail is not None:
            self.beneficiary_bank_detail = beneficiary_bank_detail
        if loan_purpose is not None:
            self.loan_purpose = loan_purpose

    @property
    def loan(self):
        """Gets the loan of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501


        :return: The loan of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: list[Loan]
        """
        return self._loan

    @loan.setter
    def loan(self, loan):
        """Sets the loan of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.


        :param loan: The loan of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: list[Loan]
        """

        self._loan = loan

    @property
    def total_loan_amount(self):
        """Gets the total_loan_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501

        Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount.  # noqa: E501

        :return: The total_loan_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: float
        """
        return self._total_loan_amount

    @total_loan_amount.setter
    def total_loan_amount(self, total_loan_amount):
        """Sets the total_loan_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.

        Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount.  # noqa: E501

        :param total_loan_amount: The total_loan_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: float
        """
        if total_loan_amount is None:
            raise ValueError("Invalid value for `total_loan_amount`, must not be `None`")  # noqa: E501

        self._total_loan_amount = total_loan_amount

    @property
    def loan_tenure_inmonths(self):
        """Gets the loan_tenure_inmonths of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501

        Tenure of loan against credit card. It is considered in terms of number of months.  # noqa: E501

        :return: The loan_tenure_inmonths of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_tenure_inmonths

    @loan_tenure_inmonths.setter
    def loan_tenure_inmonths(self, loan_tenure_inmonths):
        """Sets the loan_tenure_inmonths of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.

        Tenure of loan against credit card. It is considered in terms of number of months.  # noqa: E501

        :param loan_tenure_inmonths: The loan_tenure_inmonths of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: int
        """
        if loan_tenure_inmonths is None:
            raise ValueError("Invalid value for `loan_tenure_inmonths`, must not be `None`")  # noqa: E501

        self._loan_tenure_inmonths = loan_tenure_inmonths

    @property
    def top_up_amount(self):
        """Gets the top_up_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501

        Additonal Topup Amount  # noqa: E501

        :return: The top_up_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: float
        """
        return self._top_up_amount

    @top_up_amount.setter
    def top_up_amount(self, top_up_amount):
        """Sets the top_up_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.

        Additonal Topup Amount  # noqa: E501

        :param top_up_amount: The top_up_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: float
        """
        if top_up_amount is None:
            raise ValueError("Invalid value for `top_up_amount`, must not be `None`")  # noqa: E501

        self._top_up_amount = top_up_amount

    @property
    def loan_description(self):
        """Gets the loan_description of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501

        New Loan Description  # noqa: E501

        :return: The loan_description of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: str
        """
        return self._loan_description

    @loan_description.setter
    def loan_description(self, loan_description):
        """Sets the loan_description of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.

        New Loan Description  # noqa: E501

        :param loan_description: The loan_description of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: str
        """
        if loan_description is None:
            raise ValueError("Invalid value for `loan_description`, must not be `None`")  # noqa: E501

        self._loan_description = loan_description

    @property
    def disbursement_option(self):
        """Gets the disbursement_option of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501

        This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description  # noqa: E501

        :return: The disbursement_option of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: str
        """
        return self._disbursement_option

    @disbursement_option.setter
    def disbursement_option(self, disbursement_option):
        """Sets the disbursement_option of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.

        This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description  # noqa: E501

        :param disbursement_option: The disbursement_option of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: str
        """
        if disbursement_option is None:
            raise ValueError("Invalid value for `disbursement_option`, must not be `None`")  # noqa: E501

        self._disbursement_option = disbursement_option

    @property
    def disbursement_account_id(self):
        """Gets the disbursement_account_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501

        Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account.  # noqa: E501

        :return: The disbursement_account_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: str
        """
        return self._disbursement_account_id

    @disbursement_account_id.setter
    def disbursement_account_id(self, disbursement_account_id):
        """Sets the disbursement_account_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.

        Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account.  # noqa: E501

        :param disbursement_account_id: The disbursement_account_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: str
        """

        self._disbursement_account_id = disbursement_account_id

    @property
    def payee_id(self):
        """Gets the payee_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501

        Payee Indicator to be mapped against Payee Detail Key  # noqa: E501

        :return: The payee_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.

        Payee Indicator to be mapped against Payee Detail Key  # noqa: E501

        :param payee_id: The payee_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: str
        """

        self._payee_id = payee_id

    @property
    def beneficiary_bank_detail(self):
        """Gets the beneficiary_bank_detail of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501


        :return: The beneficiary_bank_detail of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: BeneficiaryBankDetail
        """
        return self._beneficiary_bank_detail

    @beneficiary_bank_detail.setter
    def beneficiary_bank_detail(self, beneficiary_bank_detail):
        """Sets the beneficiary_bank_detail of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.


        :param beneficiary_bank_detail: The beneficiary_bank_detail of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: BeneficiaryBankDetail
        """

        self._beneficiary_bank_detail = beneficiary_bank_detail

    @property
    def loan_purpose(self):
        """Gets the loan_purpose of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501

        This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.  # noqa: E501

        :return: The loan_purpose of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :rtype: str
        """
        return self._loan_purpose

    @loan_purpose.setter
    def loan_purpose(self, loan_purpose):
        """Sets the loan_purpose of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.

        This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.  # noqa: E501

        :param loan_purpose: The loan_purpose of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest.  # noqa: E501
        :type: str
        """

        self._loan_purpose = loan_purpose

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreprocessRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
