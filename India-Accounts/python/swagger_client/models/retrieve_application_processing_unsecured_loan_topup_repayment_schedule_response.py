# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fixed_payment_amount': 'float',
        'total_interest_amount': 'float',
        'effective_interest_rate': 'float',
        'effective_interest_rate_with_fee': 'float',
        'annual_percentage_rate': 'float',
        'loan_schedule_details': 'list[LoanScheduleDetails]',
        'loan_topup': 'list[LoanTopup]'
    }

    attribute_map = {
        'fixed_payment_amount': 'fixedPaymentAmount',
        'total_interest_amount': 'totalInterestAmount',
        'effective_interest_rate': 'effectiveInterestRate',
        'effective_interest_rate_with_fee': 'effectiveInterestRateWithFee',
        'annual_percentage_rate': 'annualPercentageRate',
        'loan_schedule_details': 'loanScheduleDetails',
        'loan_topup': 'loanTopup'
    }

    def __init__(self, fixed_payment_amount=None, total_interest_amount=None, effective_interest_rate=None, effective_interest_rate_with_fee=None, annual_percentage_rate=None, loan_schedule_details=None, loan_topup=None):  # noqa: E501
        """RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse - a model defined in Swagger"""  # noqa: E501
        self._fixed_payment_amount = None
        self._total_interest_amount = None
        self._effective_interest_rate = None
        self._effective_interest_rate_with_fee = None
        self._annual_percentage_rate = None
        self._loan_schedule_details = None
        self._loan_topup = None
        self.discriminator = None
        self.fixed_payment_amount = fixed_payment_amount
        self.total_interest_amount = total_interest_amount
        if effective_interest_rate is not None:
            self.effective_interest_rate = effective_interest_rate
        if effective_interest_rate_with_fee is not None:
            self.effective_interest_rate_with_fee = effective_interest_rate_with_fee
        if annual_percentage_rate is not None:
            self.annual_percentage_rate = annual_percentage_rate
        if loan_schedule_details is not None:
            self.loan_schedule_details = loan_schedule_details
        if loan_topup is not None:
            self.loan_topup = loan_topup

    @property
    def fixed_payment_amount(self):
        """Gets the fixed_payment_amount of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501

        Fixed payment amount  # noqa: E501

        :return: The fixed_payment_amount of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :rtype: float
        """
        return self._fixed_payment_amount

    @fixed_payment_amount.setter
    def fixed_payment_amount(self, fixed_payment_amount):
        """Sets the fixed_payment_amount of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.

        Fixed payment amount  # noqa: E501

        :param fixed_payment_amount: The fixed_payment_amount of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :type: float
        """
        if fixed_payment_amount is None:
            raise ValueError("Invalid value for `fixed_payment_amount`, must not be `None`")  # noqa: E501

        self._fixed_payment_amount = fixed_payment_amount

    @property
    def total_interest_amount(self):
        """Gets the total_interest_amount of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501

        Total interest amount  # noqa: E501

        :return: The total_interest_amount of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_amount

    @total_interest_amount.setter
    def total_interest_amount(self, total_interest_amount):
        """Sets the total_interest_amount of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.

        Total interest amount  # noqa: E501

        :param total_interest_amount: The total_interest_amount of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :type: float
        """
        if total_interest_amount is None:
            raise ValueError("Invalid value for `total_interest_amount`, must not be `None`")  # noqa: E501

        self._total_interest_amount = total_interest_amount

    @property
    def effective_interest_rate(self):
        """Gets the effective_interest_rate of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501

        Effective interest rate  # noqa: E501

        :return: The effective_interest_rate of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :rtype: float
        """
        return self._effective_interest_rate

    @effective_interest_rate.setter
    def effective_interest_rate(self, effective_interest_rate):
        """Sets the effective_interest_rate of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.

        Effective interest rate  # noqa: E501

        :param effective_interest_rate: The effective_interest_rate of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :type: float
        """

        self._effective_interest_rate = effective_interest_rate

    @property
    def effective_interest_rate_with_fee(self):
        """Gets the effective_interest_rate_with_fee of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501

        Effective interest rate with fee  # noqa: E501

        :return: The effective_interest_rate_with_fee of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :rtype: float
        """
        return self._effective_interest_rate_with_fee

    @effective_interest_rate_with_fee.setter
    def effective_interest_rate_with_fee(self, effective_interest_rate_with_fee):
        """Sets the effective_interest_rate_with_fee of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.

        Effective interest rate with fee  # noqa: E501

        :param effective_interest_rate_with_fee: The effective_interest_rate_with_fee of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :type: float
        """

        self._effective_interest_rate_with_fee = effective_interest_rate_with_fee

    @property
    def annual_percentage_rate(self):
        """Gets the annual_percentage_rate of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501

        Annual percentage rate  # noqa: E501

        :return: The annual_percentage_rate of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :rtype: float
        """
        return self._annual_percentage_rate

    @annual_percentage_rate.setter
    def annual_percentage_rate(self, annual_percentage_rate):
        """Sets the annual_percentage_rate of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.

        Annual percentage rate  # noqa: E501

        :param annual_percentage_rate: The annual_percentage_rate of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :type: float
        """

        self._annual_percentage_rate = annual_percentage_rate

    @property
    def loan_schedule_details(self):
        """Gets the loan_schedule_details of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501


        :return: The loan_schedule_details of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :rtype: list[LoanScheduleDetails]
        """
        return self._loan_schedule_details

    @loan_schedule_details.setter
    def loan_schedule_details(self, loan_schedule_details):
        """Sets the loan_schedule_details of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.


        :param loan_schedule_details: The loan_schedule_details of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :type: list[LoanScheduleDetails]
        """

        self._loan_schedule_details = loan_schedule_details

    @property
    def loan_topup(self):
        """Gets the loan_topup of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501


        :return: The loan_topup of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :rtype: list[LoanTopup]
        """
        return self._loan_topup

    @loan_topup.setter
    def loan_topup(self, loan_topup):
        """Sets the loan_topup of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.


        :param loan_topup: The loan_topup of this RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.  # noqa: E501
        :type: list[LoanTopup]
        """

        self._loan_topup = loan_topup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
