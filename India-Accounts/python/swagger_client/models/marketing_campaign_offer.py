# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarketingCampaignOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'campaign_id': 'str',
        'wave_id': 'str',
        'channel_id': 'str',
        'offer_expiry_date': 'date',
        'offer_status': 'str'
    }

    attribute_map = {
        'campaign_id': 'campaignId',
        'wave_id': 'waveId',
        'channel_id': 'channelId',
        'offer_expiry_date': 'offerExpiryDate',
        'offer_status': 'offerStatus'
    }

    def __init__(self, campaign_id=None, wave_id=None, channel_id=None, offer_expiry_date=None, offer_status=None):  # noqa: E501
        """MarketingCampaignOffer - a model defined in Swagger"""  # noqa: E501
        self._campaign_id = None
        self._wave_id = None
        self._channel_id = None
        self._offer_expiry_date = None
        self._offer_status = None
        self.discriminator = None
        self.campaign_id = campaign_id
        self.wave_id = wave_id
        self.channel_id = channel_id
        self.offer_expiry_date = offer_expiry_date
        self.offer_status = offer_status

    @property
    def campaign_id(self):
        """Gets the campaign_id of this MarketingCampaignOffer.  # noqa: E501

        Unique identifier for a specific campaign being offered to the channel  # noqa: E501

        :return: The campaign_id of this MarketingCampaignOffer.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this MarketingCampaignOffer.

        Unique identifier for a specific campaign being offered to the channel  # noqa: E501

        :param campaign_id: The campaign_id of this MarketingCampaignOffer.  # noqa: E501
        :type: str
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def wave_id(self):
        """Gets the wave_id of this MarketingCampaignOffer.  # noqa: E501

        Unique identifier for the wave under specific campaign being offered to the channel  # noqa: E501

        :return: The wave_id of this MarketingCampaignOffer.  # noqa: E501
        :rtype: str
        """
        return self._wave_id

    @wave_id.setter
    def wave_id(self, wave_id):
        """Sets the wave_id of this MarketingCampaignOffer.

        Unique identifier for the wave under specific campaign being offered to the channel  # noqa: E501

        :param wave_id: The wave_id of this MarketingCampaignOffer.  # noqa: E501
        :type: str
        """
        if wave_id is None:
            raise ValueError("Invalid value for `wave_id`, must not be `None`")  # noqa: E501

        self._wave_id = wave_id

    @property
    def channel_id(self):
        """Gets the channel_id of this MarketingCampaignOffer.  # noqa: E501

        This field is used to store the channel through which the particular offer has been created  # noqa: E501

        :return: The channel_id of this MarketingCampaignOffer.  # noqa: E501
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this MarketingCampaignOffer.

        This field is used to store the channel through which the particular offer has been created  # noqa: E501

        :param channel_id: The channel_id of this MarketingCampaignOffer.  # noqa: E501
        :type: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")  # noqa: E501

        self._channel_id = channel_id

    @property
    def offer_expiry_date(self):
        """Gets the offer_expiry_date of this MarketingCampaignOffer.  # noqa: E501

        Offer expiry date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The offer_expiry_date of this MarketingCampaignOffer.  # noqa: E501
        :rtype: date
        """
        return self._offer_expiry_date

    @offer_expiry_date.setter
    def offer_expiry_date(self, offer_expiry_date):
        """Sets the offer_expiry_date of this MarketingCampaignOffer.

        Offer expiry date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param offer_expiry_date: The offer_expiry_date of this MarketingCampaignOffer.  # noqa: E501
        :type: date
        """
        if offer_expiry_date is None:
            raise ValueError("Invalid value for `offer_expiry_date`, must not be `None`")  # noqa: E501

        self._offer_expiry_date = offer_expiry_date

    @property
    def offer_status(self):
        """Gets the offer_status of this MarketingCampaignOffer.  # noqa: E501

        Offer status to indicate the status of the offer.  # noqa: E501

        :return: The offer_status of this MarketingCampaignOffer.  # noqa: E501
        :rtype: str
        """
        return self._offer_status

    @offer_status.setter
    def offer_status(self, offer_status):
        """Sets the offer_status of this MarketingCampaignOffer.

        Offer status to indicate the status of the offer.  # noqa: E501

        :param offer_status: The offer_status of this MarketingCampaignOffer.  # noqa: E501
        :type: str
        """
        if offer_status is None:
            raise ValueError("Invalid value for `offer_status`, must not be `None`")  # noqa: E501

        self._offer_status = offer_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketingCampaignOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketingCampaignOffer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
