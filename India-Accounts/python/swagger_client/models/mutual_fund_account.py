# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MutualFundAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'str',
        'product_code': 'str',
        'display_account_number': 'str',
        'currency_code': 'str',
        'total_net_asset_value_amount': 'float',
        'total_transaction_amount': 'float',
        'total_unrealized_gains': 'float',
        'relationship': 'Relationship',
        'mutual_fund': 'list[MutualFund]'
    }

    attribute_map = {
        'product_name': 'productName',
        'product_code': 'productCode',
        'display_account_number': 'displayAccountNumber',
        'currency_code': 'currencyCode',
        'total_net_asset_value_amount': 'totalNetAssetValueAmount',
        'total_transaction_amount': 'totalTransactionAmount',
        'total_unrealized_gains': 'totalUnrealizedGains',
        'relationship': 'relationship',
        'mutual_fund': 'mutualFund'
    }

    def __init__(self, product_name=None, product_code=None, display_account_number=None, currency_code=None, total_net_asset_value_amount=None, total_transaction_amount=None, total_unrealized_gains=None, relationship=None, mutual_fund=None):  # noqa: E501
        """MutualFundAccount - a model defined in Swagger"""  # noqa: E501
        self._product_name = None
        self._product_code = None
        self._display_account_number = None
        self._currency_code = None
        self._total_net_asset_value_amount = None
        self._total_transaction_amount = None
        self._total_unrealized_gains = None
        self._relationship = None
        self._mutual_fund = None
        self.discriminator = None
        if product_name is not None:
            self.product_name = product_name
        if product_code is not None:
            self.product_code = product_code
        self.display_account_number = display_account_number
        if currency_code is not None:
            self.currency_code = currency_code
        if total_net_asset_value_amount is not None:
            self.total_net_asset_value_amount = total_net_asset_value_amount
        if total_transaction_amount is not None:
            self.total_transaction_amount = total_transaction_amount
        if total_unrealized_gains is not None:
            self.total_unrealized_gains = total_unrealized_gains
        if relationship is not None:
            self.relationship = relationship
        if mutual_fund is not None:
            self.mutual_fund = mutual_fund

    @property
    def product_name(self):
        """Gets the product_name of this MutualFundAccount.  # noqa: E501

        The name of the product  # noqa: E501

        :return: The product_name of this MutualFundAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this MutualFundAccount.

        The name of the product  # noqa: E501

        :param product_name: The product_name of this MutualFundAccount.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_code(self):
        """Gets the product_code of this MutualFundAccount.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this MutualFundAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this MutualFundAccount.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this MutualFundAccount.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def display_account_number(self):
        """Gets the display_account_number of this MutualFundAccount.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this MutualFundAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this MutualFundAccount.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this MutualFundAccount.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def currency_code(self):
        """Gets the currency_code of this MutualFundAccount.  # noqa: E501

        The currency code of the account in ISO 4217 format  # noqa: E501

        :return: The currency_code of this MutualFundAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MutualFundAccount.

        The currency code of the account in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this MutualFundAccount.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def total_net_asset_value_amount(self):
        """Gets the total_net_asset_value_amount of this MutualFundAccount.  # noqa: E501

        Total of net asset value of mutual funds  # noqa: E501

        :return: The total_net_asset_value_amount of this MutualFundAccount.  # noqa: E501
        :rtype: float
        """
        return self._total_net_asset_value_amount

    @total_net_asset_value_amount.setter
    def total_net_asset_value_amount(self, total_net_asset_value_amount):
        """Sets the total_net_asset_value_amount of this MutualFundAccount.

        Total of net asset value of mutual funds  # noqa: E501

        :param total_net_asset_value_amount: The total_net_asset_value_amount of this MutualFundAccount.  # noqa: E501
        :type: float
        """

        self._total_net_asset_value_amount = total_net_asset_value_amount

    @property
    def total_transaction_amount(self):
        """Gets the total_transaction_amount of this MutualFundAccount.  # noqa: E501

        Total transaction amount in local currency  # noqa: E501

        :return: The total_transaction_amount of this MutualFundAccount.  # noqa: E501
        :rtype: float
        """
        return self._total_transaction_amount

    @total_transaction_amount.setter
    def total_transaction_amount(self, total_transaction_amount):
        """Sets the total_transaction_amount of this MutualFundAccount.

        Total transaction amount in local currency  # noqa: E501

        :param total_transaction_amount: The total_transaction_amount of this MutualFundAccount.  # noqa: E501
        :type: float
        """

        self._total_transaction_amount = total_transaction_amount

    @property
    def total_unrealized_gains(self):
        """Gets the total_unrealized_gains of this MutualFundAccount.  # noqa: E501

        Total unrealized gains amount, profitable position that has yet to be cashed in  # noqa: E501

        :return: The total_unrealized_gains of this MutualFundAccount.  # noqa: E501
        :rtype: float
        """
        return self._total_unrealized_gains

    @total_unrealized_gains.setter
    def total_unrealized_gains(self, total_unrealized_gains):
        """Sets the total_unrealized_gains of this MutualFundAccount.

        Total unrealized gains amount, profitable position that has yet to be cashed in  # noqa: E501

        :param total_unrealized_gains: The total_unrealized_gains of this MutualFundAccount.  # noqa: E501
        :type: float
        """

        self._total_unrealized_gains = total_unrealized_gains

    @property
    def relationship(self):
        """Gets the relationship of this MutualFundAccount.  # noqa: E501


        :return: The relationship of this MutualFundAccount.  # noqa: E501
        :rtype: Relationship
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this MutualFundAccount.


        :param relationship: The relationship of this MutualFundAccount.  # noqa: E501
        :type: Relationship
        """

        self._relationship = relationship

    @property
    def mutual_fund(self):
        """Gets the mutual_fund of this MutualFundAccount.  # noqa: E501


        :return: The mutual_fund of this MutualFundAccount.  # noqa: E501
        :rtype: list[MutualFund]
        """
        return self._mutual_fund

    @mutual_fund.setter
    def mutual_fund(self, mutual_fund):
        """Sets the mutual_fund of this MutualFundAccount.


        :param mutual_fund: The mutual_fund of this MutualFundAccount.  # noqa: E501
        :type: list[MutualFund]
        """

        self._mutual_fund = mutual_fund

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MutualFundAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MutualFundAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
