# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CheckingAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'str',
        'product_code': 'str',
        'display_account_number': 'str',
        'current_balance': 'float',
        'available_balance': 'float',
        'overdraft_limit': 'float',
        'available_overdraft_limit': 'float',
        'currency_code': 'str',
        'last_statement_date': 'date',
        'hold_amount': 'float',
        'float_amount': 'float',
        'total_interest_amount': 'float',
        'opening_date': 'date'
    }

    attribute_map = {
        'product_name': 'productName',
        'product_code': 'productCode',
        'display_account_number': 'displayAccountNumber',
        'current_balance': 'currentBalance',
        'available_balance': 'availableBalance',
        'overdraft_limit': 'overdraftLimit',
        'available_overdraft_limit': 'availableOverdraftLimit',
        'currency_code': 'currencyCode',
        'last_statement_date': 'lastStatementDate',
        'hold_amount': 'holdAmount',
        'float_amount': 'floatAmount',
        'total_interest_amount': 'totalInterestAmount',
        'opening_date': 'openingDate'
    }

    def __init__(self, product_name=None, product_code=None, display_account_number=None, current_balance=None, available_balance=None, overdraft_limit=None, available_overdraft_limit=None, currency_code=None, last_statement_date=None, hold_amount=None, float_amount=None, total_interest_amount=None, opening_date=None):  # noqa: E501
        """CheckingAccount - a model defined in Swagger"""  # noqa: E501
        self._product_name = None
        self._product_code = None
        self._display_account_number = None
        self._current_balance = None
        self._available_balance = None
        self._overdraft_limit = None
        self._available_overdraft_limit = None
        self._currency_code = None
        self._last_statement_date = None
        self._hold_amount = None
        self._float_amount = None
        self._total_interest_amount = None
        self._opening_date = None
        self.discriminator = None
        if product_name is not None:
            self.product_name = product_name
        if product_code is not None:
            self.product_code = product_code
        self.display_account_number = display_account_number
        if current_balance is not None:
            self.current_balance = current_balance
        if available_balance is not None:
            self.available_balance = available_balance
        if overdraft_limit is not None:
            self.overdraft_limit = overdraft_limit
        if available_overdraft_limit is not None:
            self.available_overdraft_limit = available_overdraft_limit
        if currency_code is not None:
            self.currency_code = currency_code
        if last_statement_date is not None:
            self.last_statement_date = last_statement_date
        if hold_amount is not None:
            self.hold_amount = hold_amount
        if float_amount is not None:
            self.float_amount = float_amount
        if total_interest_amount is not None:
            self.total_interest_amount = total_interest_amount
        if opening_date is not None:
            self.opening_date = opening_date

    @property
    def product_name(self):
        """Gets the product_name of this CheckingAccount.  # noqa: E501

        The name of the product  # noqa: E501

        :return: The product_name of this CheckingAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this CheckingAccount.

        The name of the product  # noqa: E501

        :param product_name: The product_name of this CheckingAccount.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_code(self):
        """Gets the product_code of this CheckingAccount.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this CheckingAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this CheckingAccount.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this CheckingAccount.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def display_account_number(self):
        """Gets the display_account_number of this CheckingAccount.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this CheckingAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this CheckingAccount.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this CheckingAccount.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def current_balance(self):
        """Gets the current_balance of this CheckingAccount.  # noqa: E501

        The current balance including any pending or in progress deposits and withdrawals  # noqa: E501

        :return: The current_balance of this CheckingAccount.  # noqa: E501
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this CheckingAccount.

        The current balance including any pending or in progress deposits and withdrawals  # noqa: E501

        :param current_balance: The current_balance of this CheckingAccount.  # noqa: E501
        :type: float
        """

        self._current_balance = current_balance

    @property
    def available_balance(self):
        """Gets the available_balance of this CheckingAccount.  # noqa: E501

        The amount available  to withdraw or transfer immediately  # noqa: E501

        :return: The available_balance of this CheckingAccount.  # noqa: E501
        :rtype: float
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this CheckingAccount.

        The amount available  to withdraw or transfer immediately  # noqa: E501

        :param available_balance: The available_balance of this CheckingAccount.  # noqa: E501
        :type: float
        """

        self._available_balance = available_balance

    @property
    def overdraft_limit(self):
        """Gets the overdraft_limit of this CheckingAccount.  # noqa: E501

        This allows a customer to overdraw their account up to a specific amount  # noqa: E501

        :return: The overdraft_limit of this CheckingAccount.  # noqa: E501
        :rtype: float
        """
        return self._overdraft_limit

    @overdraft_limit.setter
    def overdraft_limit(self, overdraft_limit):
        """Sets the overdraft_limit of this CheckingAccount.

        This allows a customer to overdraw their account up to a specific amount  # noqa: E501

        :param overdraft_limit: The overdraft_limit of this CheckingAccount.  # noqa: E501
        :type: float
        """

        self._overdraft_limit = overdraft_limit

    @property
    def available_overdraft_limit(self):
        """Gets the available_overdraft_limit of this CheckingAccount.  # noqa: E501

        The amount available under over draft Limit amount  # noqa: E501

        :return: The available_overdraft_limit of this CheckingAccount.  # noqa: E501
        :rtype: float
        """
        return self._available_overdraft_limit

    @available_overdraft_limit.setter
    def available_overdraft_limit(self, available_overdraft_limit):
        """Sets the available_overdraft_limit of this CheckingAccount.

        The amount available under over draft Limit amount  # noqa: E501

        :param available_overdraft_limit: The available_overdraft_limit of this CheckingAccount.  # noqa: E501
        :type: float
        """

        self._available_overdraft_limit = available_overdraft_limit

    @property
    def currency_code(self):
        """Gets the currency_code of this CheckingAccount.  # noqa: E501

        The currency code of the account in ISO 4217 format  # noqa: E501

        :return: The currency_code of this CheckingAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CheckingAccount.

        The currency code of the account in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this CheckingAccount.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def last_statement_date(self):
        """Gets the last_statement_date of this CheckingAccount.  # noqa: E501

        The date of the last statement in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The last_statement_date of this CheckingAccount.  # noqa: E501
        :rtype: date
        """
        return self._last_statement_date

    @last_statement_date.setter
    def last_statement_date(self, last_statement_date):
        """Sets the last_statement_date of this CheckingAccount.

        The date of the last statement in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param last_statement_date: The last_statement_date of this CheckingAccount.  # noqa: E501
        :type: date
        """

        self._last_statement_date = last_statement_date

    @property
    def hold_amount(self):
        """Gets the hold_amount of this CheckingAccount.  # noqa: E501

        The amount of funds that were previously available but are now blocked. It represents funds authorized for withdrawal but not yet withdrawn. The hold amount is included in the ledger/book balance but not in the available balance. It is included in interest  # noqa: E501

        :return: The hold_amount of this CheckingAccount.  # noqa: E501
        :rtype: float
        """
        return self._hold_amount

    @hold_amount.setter
    def hold_amount(self, hold_amount):
        """Sets the hold_amount of this CheckingAccount.

        The amount of funds that were previously available but are now blocked. It represents funds authorized for withdrawal but not yet withdrawn. The hold amount is included in the ledger/book balance but not in the available balance. It is included in interest  # noqa: E501

        :param hold_amount: The hold_amount of this CheckingAccount.  # noqa: E501
        :type: float
        """

        self._hold_amount = hold_amount

    @property
    def float_amount(self):
        """Gets the float_amount of this CheckingAccount.  # noqa: E501

        The total amount of funds that have not yet been cleared through the collection process for cheque and other instruments deposited to a checking account. These funds are unavailable for withdrawal until they are paid by the drawee bank.  # noqa: E501

        :return: The float_amount of this CheckingAccount.  # noqa: E501
        :rtype: float
        """
        return self._float_amount

    @float_amount.setter
    def float_amount(self, float_amount):
        """Sets the float_amount of this CheckingAccount.

        The total amount of funds that have not yet been cleared through the collection process for cheque and other instruments deposited to a checking account. These funds are unavailable for withdrawal until they are paid by the drawee bank.  # noqa: E501

        :param float_amount: The float_amount of this CheckingAccount.  # noqa: E501
        :type: float
        """

        self._float_amount = float_amount

    @property
    def total_interest_amount(self):
        """Gets the total_interest_amount of this CheckingAccount.  # noqa: E501

        Total interest amount on checking account.  # noqa: E501

        :return: The total_interest_amount of this CheckingAccount.  # noqa: E501
        :rtype: float
        """
        return self._total_interest_amount

    @total_interest_amount.setter
    def total_interest_amount(self, total_interest_amount):
        """Sets the total_interest_amount of this CheckingAccount.

        Total interest amount on checking account.  # noqa: E501

        :param total_interest_amount: The total_interest_amount of this CheckingAccount.  # noqa: E501
        :type: float
        """

        self._total_interest_amount = total_interest_amount

    @property
    def opening_date(self):
        """Gets the opening_date of this CheckingAccount.  # noqa: E501

        Checking account opening date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The opening_date of this CheckingAccount.  # noqa: E501
        :rtype: date
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this CheckingAccount.

        Checking account opening date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param opening_date: The opening_date of this CheckingAccount.  # noqa: E501
        :type: date
        """

        self._opening_date = opening_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckingAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckingAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
