# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_payment_plans': 'list[LoanPaymentPlans]',
        'service_charge': 'float',
        'additional_service_charge': 'float',
        'internal_rate_of_return': 'float',
        'list_response': 'ListResponse'
    }

    attribute_map = {
        'loan_payment_plans': 'loanPaymentPlans',
        'service_charge': 'serviceCharge',
        'additional_service_charge': 'additionalServiceCharge',
        'internal_rate_of_return': 'internalRateOfReturn',
        'list_response': 'listResponse'
    }

    def __init__(self, loan_payment_plans=None, service_charge=None, additional_service_charge=None, internal_rate_of_return=None, list_response=None):  # noqa: E501
        """RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse - a model defined in Swagger"""  # noqa: E501
        self._loan_payment_plans = None
        self._service_charge = None
        self._additional_service_charge = None
        self._internal_rate_of_return = None
        self._list_response = None
        self.discriminator = None
        if loan_payment_plans is not None:
            self.loan_payment_plans = loan_payment_plans
        if service_charge is not None:
            self.service_charge = service_charge
        if additional_service_charge is not None:
            self.additional_service_charge = additional_service_charge
        if internal_rate_of_return is not None:
            self.internal_rate_of_return = internal_rate_of_return
        if list_response is not None:
            self.list_response = list_response

    @property
    def loan_payment_plans(self):
        """Gets the loan_payment_plans of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501


        :return: The loan_payment_plans of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :rtype: list[LoanPaymentPlans]
        """
        return self._loan_payment_plans

    @loan_payment_plans.setter
    def loan_payment_plans(self, loan_payment_plans):
        """Sets the loan_payment_plans of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.


        :param loan_payment_plans: The loan_payment_plans of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :type: list[LoanPaymentPlans]
        """

        self._loan_payment_plans = loan_payment_plans

    @property
    def service_charge(self):
        """Gets the service_charge of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501

        Booking fee  # noqa: E501

        :return: The service_charge of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :rtype: float
        """
        return self._service_charge

    @service_charge.setter
    def service_charge(self, service_charge):
        """Sets the service_charge of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.

        Booking fee  # noqa: E501

        :param service_charge: The service_charge of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :type: float
        """

        self._service_charge = service_charge

    @property
    def additional_service_charge(self):
        """Gets the additional_service_charge of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501

        Additional service charge  # noqa: E501

        :return: The additional_service_charge of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :rtype: float
        """
        return self._additional_service_charge

    @additional_service_charge.setter
    def additional_service_charge(self, additional_service_charge):
        """Sets the additional_service_charge of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.

        Additional service charge  # noqa: E501

        :param additional_service_charge: The additional_service_charge of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :type: float
        """

        self._additional_service_charge = additional_service_charge

    @property
    def internal_rate_of_return(self):
        """Gets the internal_rate_of_return of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501

        Internal rate of return  # noqa: E501

        :return: The internal_rate_of_return of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :rtype: float
        """
        return self._internal_rate_of_return

    @internal_rate_of_return.setter
    def internal_rate_of_return(self, internal_rate_of_return):
        """Sets the internal_rate_of_return of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.

        Internal rate of return  # noqa: E501

        :param internal_rate_of_return: The internal_rate_of_return of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :type: float
        """

        self._internal_rate_of_return = internal_rate_of_return

    @property
    def list_response(self):
        """Gets the list_response of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501


        :return: The list_response of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :rtype: ListResponse
        """
        return self._list_response

    @list_response.setter
    def list_response(self, list_response):
        """Sets the list_response of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.


        :param list_response: The list_response of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse.  # noqa: E501
        :type: ListResponse
        """

        self._list_response = list_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
