# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'control_flow_id': 'str',
        'org_code': 'str',
        'loan_amount': 'float',
        'promotion_id': 'str',
        'loan_tenure': 'str',
        'start_index': 'str',
        'request_size': 'int'
    }

    attribute_map = {
        'control_flow_id': 'controlFlowId',
        'org_code': 'orgCode',
        'loan_amount': 'loanAmount',
        'promotion_id': 'promotionId',
        'loan_tenure': 'loanTenure',
        'start_index': 'startIndex',
        'request_size': 'requestSize'
    }

    def __init__(self, control_flow_id=None, org_code=None, loan_amount=None, promotion_id=None, loan_tenure=None, start_index=None, request_size=None):  # noqa: E501
        """RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest - a model defined in Swagger"""  # noqa: E501
        self._control_flow_id = None
        self._org_code = None
        self._loan_amount = None
        self._promotion_id = None
        self._loan_tenure = None
        self._start_index = None
        self._request_size = None
        self.discriminator = None
        self.control_flow_id = control_flow_id
        self.org_code = org_code
        self.loan_amount = loan_amount
        self.promotion_id = promotion_id
        if loan_tenure is not None:
            self.loan_tenure = loan_tenure
        if start_index is not None:
            self.start_index = start_index
        if request_size is not None:
            self.request_size = request_size

    @property
    def control_flow_id(self):
        """Gets the control_flow_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501

        Control flow id is used to control the flow for subsequent requests in the session  # noqa: E501

        :return: The control_flow_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :rtype: str
        """
        return self._control_flow_id

    @control_flow_id.setter
    def control_flow_id(self, control_flow_id):
        """Sets the control_flow_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.

        Control flow id is used to control the flow for subsequent requests in the session  # noqa: E501

        :param control_flow_id: The control_flow_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :type: str
        """
        if control_flow_id is None:
            raise ValueError("Invalid value for `control_flow_id`, must not be `None`")  # noqa: E501

        self._control_flow_id = control_flow_id

    @property
    def org_code(self):
        """Gets the org_code of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501

        Organization of the card  # noqa: E501

        :return: The org_code of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :rtype: str
        """
        return self._org_code

    @org_code.setter
    def org_code(self, org_code):
        """Sets the org_code of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.

        Organization of the card  # noqa: E501

        :param org_code: The org_code of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :type: str
        """
        if org_code is None:
            raise ValueError("Invalid value for `org_code`, must not be `None`")  # noqa: E501

        self._org_code = org_code

    @property
    def loan_amount(self):
        """Gets the loan_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501

        Loan amount availed by customer  # noqa: E501

        :return: The loan_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :rtype: float
        """
        return self._loan_amount

    @loan_amount.setter
    def loan_amount(self, loan_amount):
        """Sets the loan_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.

        Loan amount availed by customer  # noqa: E501

        :param loan_amount: The loan_amount of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :type: float
        """
        if loan_amount is None:
            raise ValueError("Invalid value for `loan_amount`, must not be `None`")  # noqa: E501

        self._loan_amount = loan_amount

    @property
    def promotion_id(self):
        """Gets the promotion_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501

        Promotion ID for the loan offered  # noqa: E501

        :return: The promotion_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :rtype: str
        """
        return self._promotion_id

    @promotion_id.setter
    def promotion_id(self, promotion_id):
        """Sets the promotion_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.

        Promotion ID for the loan offered  # noqa: E501

        :param promotion_id: The promotion_id of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :type: str
        """
        if promotion_id is None:
            raise ValueError("Invalid value for `promotion_id`, must not be `None`")  # noqa: E501

        self._promotion_id = promotion_id

    @property
    def loan_tenure(self):
        """Gets the loan_tenure of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501

        Tenure of loan against card  # noqa: E501

        :return: The loan_tenure of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :rtype: str
        """
        return self._loan_tenure

    @loan_tenure.setter
    def loan_tenure(self, loan_tenure):
        """Sets the loan_tenure of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.

        Tenure of loan against card  # noqa: E501

        :param loan_tenure: The loan_tenure of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :type: str
        """

        self._loan_tenure = loan_tenure

    @property
    def start_index(self):
        """Gets the start_index of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501

        Start index of next fetch of records  # noqa: E501

        :return: The start_index of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.

        Start index of next fetch of records  # noqa: E501

        :param start_index: The start_index of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :type: str
        """

        self._start_index = start_index

    @property
    def request_size(self):
        """Gets the request_size of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501

        Number of records required (Max = 60)  # noqa: E501

        :return: The request_size of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :rtype: int
        """
        return self._request_size

    @request_size.setter
    def request_size(self, request_size):
        """Sets the request_size of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.

        Number of records required (Max = 60)  # noqa: E501

        :param request_size: The request_size of this RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest.  # noqa: E501
        :type: int
        """

        self._request_size = request_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
