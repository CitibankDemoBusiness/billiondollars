# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditCardStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_account_number': 'str',
        'statement_date': 'date',
        'statement_summary': 'StatementSummary',
        'un_secured_loans': 'list[UnSecuredLoans]',
        'transactions': 'list[Transactions]',
        'next_start_index': 'str'
    }

    attribute_map = {
        'display_account_number': 'displayAccountNumber',
        'statement_date': 'statementDate',
        'statement_summary': 'statementSummary',
        'un_secured_loans': 'unSecuredLoans',
        'transactions': 'transactions',
        'next_start_index': 'nextStartIndex'
    }

    def __init__(self, display_account_number=None, statement_date=None, statement_summary=None, un_secured_loans=None, transactions=None, next_start_index=None):  # noqa: E501
        """CreditCardStatement - a model defined in Swagger"""  # noqa: E501
        self._display_account_number = None
        self._statement_date = None
        self._statement_summary = None
        self._un_secured_loans = None
        self._transactions = None
        self._next_start_index = None
        self.discriminator = None
        self.display_account_number = display_account_number
        self.statement_date = statement_date
        if statement_summary is not None:
            self.statement_summary = statement_summary
        if un_secured_loans is not None:
            self.un_secured_loans = un_secured_loans
        if transactions is not None:
            self.transactions = transactions
        if next_start_index is not None:
            self.next_start_index = next_start_index

    @property
    def display_account_number(self):
        """Gets the display_account_number of this CreditCardStatement.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this CreditCardStatement.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this CreditCardStatement.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this CreditCardStatement.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def statement_date(self):
        """Gets the statement_date of this CreditCardStatement.  # noqa: E501

        The statement date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :return: The statement_date of this CreditCardStatement.  # noqa: E501
        :rtype: date
        """
        return self._statement_date

    @statement_date.setter
    def statement_date(self, statement_date):
        """Sets the statement_date of this CreditCardStatement.

        The statement date in ISO 8601 format YYYY-MM-DD  # noqa: E501

        :param statement_date: The statement_date of this CreditCardStatement.  # noqa: E501
        :type: date
        """
        if statement_date is None:
            raise ValueError("Invalid value for `statement_date`, must not be `None`")  # noqa: E501

        self._statement_date = statement_date

    @property
    def statement_summary(self):
        """Gets the statement_summary of this CreditCardStatement.  # noqa: E501


        :return: The statement_summary of this CreditCardStatement.  # noqa: E501
        :rtype: StatementSummary
        """
        return self._statement_summary

    @statement_summary.setter
    def statement_summary(self, statement_summary):
        """Sets the statement_summary of this CreditCardStatement.


        :param statement_summary: The statement_summary of this CreditCardStatement.  # noqa: E501
        :type: StatementSummary
        """

        self._statement_summary = statement_summary

    @property
    def un_secured_loans(self):
        """Gets the un_secured_loans of this CreditCardStatement.  # noqa: E501


        :return: The un_secured_loans of this CreditCardStatement.  # noqa: E501
        :rtype: list[UnSecuredLoans]
        """
        return self._un_secured_loans

    @un_secured_loans.setter
    def un_secured_loans(self, un_secured_loans):
        """Sets the un_secured_loans of this CreditCardStatement.


        :param un_secured_loans: The un_secured_loans of this CreditCardStatement.  # noqa: E501
        :type: list[UnSecuredLoans]
        """

        self._un_secured_loans = un_secured_loans

    @property
    def transactions(self):
        """Gets the transactions of this CreditCardStatement.  # noqa: E501


        :return: The transactions of this CreditCardStatement.  # noqa: E501
        :rtype: list[Transactions]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this CreditCardStatement.


        :param transactions: The transactions of this CreditCardStatement.  # noqa: E501
        :type: list[Transactions]
        """

        self._transactions = transactions

    @property
    def next_start_index(self):
        """Gets the next_start_index of this CreditCardStatement.  # noqa: E501

        In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.  # noqa: E501

        :return: The next_start_index of this CreditCardStatement.  # noqa: E501
        :rtype: str
        """
        return self._next_start_index

    @next_start_index.setter
    def next_start_index(self, next_start_index):
        """Sets the next_start_index of this CreditCardStatement.

        In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.  # noqa: E501

        :param next_start_index: The next_start_index of this CreditCardStatement.  # noqa: E501
        :type: str
        """

        self._next_start_index = next_start_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
