# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartialResponseInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_name': 'str',
        'reason_code': 'str',
        'additional_information': 'str'
    }

    attribute_map = {
        'field_name': 'fieldName',
        'reason_code': 'reasonCode',
        'additional_information': 'additionalInformation'
    }

    def __init__(self, field_name=None, reason_code=None, additional_information=None):  # noqa: E501
        """PartialResponseInformation - a model defined in Swagger"""  # noqa: E501
        self._field_name = None
        self._reason_code = None
        self._additional_information = None
        self.discriminator = None
        if field_name is not None:
            self.field_name = field_name
        if reason_code is not None:
            self.reason_code = reason_code
        if additional_information is not None:
            self.additional_information = additional_information

    @property
    def field_name(self):
        """Gets the field_name of this PartialResponseInformation.  # noqa: E501

        This refer to the field for which partial failure happened  # noqa: E501

        :return: The field_name of this PartialResponseInformation.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this PartialResponseInformation.

        This refer to the field for which partial failure happened  # noqa: E501

        :param field_name: The field_name of this PartialResponseInformation.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def reason_code(self):
        """Gets the reason_code of this PartialResponseInformation.  # noqa: E501

        This refer to reason info of partial failure.  # noqa: E501

        :return: The reason_code of this PartialResponseInformation.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this PartialResponseInformation.

        This refer to reason info of partial failure.  # noqa: E501

        :param reason_code: The reason_code of this PartialResponseInformation.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def additional_information(self):
        """Gets the additional_information of this PartialResponseInformation.  # noqa: E501

        This refer to additional details of partial failure.  # noqa: E501

        :return: The additional_information of this PartialResponseInformation.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this PartialResponseInformation.

        This refer to additional details of partial failure.  # noqa: E501

        :param additional_information: The additional_information of this PartialResponseInformation.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartialResponseInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartialResponseInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
