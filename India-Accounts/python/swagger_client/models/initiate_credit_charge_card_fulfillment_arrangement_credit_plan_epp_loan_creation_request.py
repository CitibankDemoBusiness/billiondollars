# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'str',
        'loan_amount': 'float',
        'loan_tenor': 'int'
    }

    attribute_map = {
        'transaction_id': 'transactionId',
        'loan_amount': 'loanAmount',
        'loan_tenor': 'loanTenor'
    }

    def __init__(self, transaction_id=None, loan_amount=None, loan_tenor=None):  # noqa: E501
        """InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest - a model defined in Swagger"""  # noqa: E501
        self._transaction_id = None
        self._loan_amount = None
        self._loan_tenor = None
        self.discriminator = None
        if transaction_id is not None:
            self.transaction_id = transaction_id
        self.loan_amount = loan_amount
        self.loan_tenor = loan_tenor

    @property
    def transaction_id(self):
        """Gets the transaction_id of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.  # noqa: E501

        Transaction ID of the debit card transaction for which LOP booking will be done on the credit card  # noqa: E501

        :return: The transaction_id of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.

        Transaction ID of the debit card transaction for which LOP booking will be done on the credit card  # noqa: E501

        :param transaction_id: The transaction_id of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def loan_amount(self):
        """Gets the loan_amount of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.  # noqa: E501

        Eligible Loan amount  # noqa: E501

        :return: The loan_amount of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.  # noqa: E501
        :rtype: float
        """
        return self._loan_amount

    @loan_amount.setter
    def loan_amount(self, loan_amount):
        """Sets the loan_amount of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.

        Eligible Loan amount  # noqa: E501

        :param loan_amount: The loan_amount of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.  # noqa: E501
        :type: float
        """
        if loan_amount is None:
            raise ValueError("Invalid value for `loan_amount`, must not be `None`")  # noqa: E501

        self._loan_amount = loan_amount

    @property
    def loan_tenor(self):
        """Gets the loan_tenor of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.  # noqa: E501

        Tenure for the Loan  # noqa: E501

        :return: The loan_tenor of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.  # noqa: E501
        :rtype: int
        """
        return self._loan_tenor

    @loan_tenor.setter
    def loan_tenor(self, loan_tenor):
        """Sets the loan_tenor of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.

        Tenure for the Loan  # noqa: E501

        :param loan_tenor: The loan_tenor of this InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest.  # noqa: E501
        :type: int
        """
        if loan_tenor is None:
            raise ValueError("Invalid value for `loan_tenor`, must not be `None`")  # noqa: E501

        self._loan_tenor = loan_tenor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitiateCreditChargeCardFulfillmentArrangementCreditPlanEppLoanCreationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
