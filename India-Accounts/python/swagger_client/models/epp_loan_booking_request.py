# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EppLoanBookingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'epp_loan_booking_type': 'str',
        'tenor': 'float',
        'epp_loan_booking': 'list[EppLoanBooking]'
    }

    attribute_map = {
        'epp_loan_booking_type': 'eppLoanBookingType',
        'tenor': 'tenor',
        'epp_loan_booking': 'eppLoanBooking'
    }

    def __init__(self, epp_loan_booking_type=None, tenor=None, epp_loan_booking=None):  # noqa: E501
        """EppLoanBookingRequest - a model defined in Swagger"""  # noqa: E501
        self._epp_loan_booking_type = None
        self._tenor = None
        self._epp_loan_booking = None
        self.discriminator = None
        self.epp_loan_booking_type = epp_loan_booking_type
        self.tenor = tenor
        self.epp_loan_booking = epp_loan_booking

    @property
    def epp_loan_booking_type(self):
        """Gets the epp_loan_booking_type of this EppLoanBookingRequest.  # noqa: E501

        Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/apac/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description.  # noqa: E501

        :return: The epp_loan_booking_type of this EppLoanBookingRequest.  # noqa: E501
        :rtype: str
        """
        return self._epp_loan_booking_type

    @epp_loan_booking_type.setter
    def epp_loan_booking_type(self, epp_loan_booking_type):
        """Sets the epp_loan_booking_type of this EppLoanBookingRequest.

        Type of the easy payment plan loan booking.This is a reference data field. Please use /v1/apac/utilities/referenceData/{eppLoanBookingType} resource to get possible value of this field with description.  # noqa: E501

        :param epp_loan_booking_type: The epp_loan_booking_type of this EppLoanBookingRequest.  # noqa: E501
        :type: str
        """
        if epp_loan_booking_type is None:
            raise ValueError("Invalid value for `epp_loan_booking_type`, must not be `None`")  # noqa: E501

        self._epp_loan_booking_type = epp_loan_booking_type

    @property
    def tenor(self):
        """Gets the tenor of this EppLoanBookingRequest.  # noqa: E501

        Tenure of loan in months.  # noqa: E501

        :return: The tenor of this EppLoanBookingRequest.  # noqa: E501
        :rtype: float
        """
        return self._tenor

    @tenor.setter
    def tenor(self, tenor):
        """Sets the tenor of this EppLoanBookingRequest.

        Tenure of loan in months.  # noqa: E501

        :param tenor: The tenor of this EppLoanBookingRequest.  # noqa: E501
        :type: float
        """
        if tenor is None:
            raise ValueError("Invalid value for `tenor`, must not be `None`")  # noqa: E501

        self._tenor = tenor

    @property
    def epp_loan_booking(self):
        """Gets the epp_loan_booking of this EppLoanBookingRequest.  # noqa: E501

        EPP Loan Booking Pre-process  # noqa: E501

        :return: The epp_loan_booking of this EppLoanBookingRequest.  # noqa: E501
        :rtype: list[EppLoanBooking]
        """
        return self._epp_loan_booking

    @epp_loan_booking.setter
    def epp_loan_booking(self, epp_loan_booking):
        """Sets the epp_loan_booking of this EppLoanBookingRequest.

        EPP Loan Booking Pre-process  # noqa: E501

        :param epp_loan_booking: The epp_loan_booking of this EppLoanBookingRequest.  # noqa: E501
        :type: list[EppLoanBooking]
        """
        if epp_loan_booking is None:
            raise ValueError("Invalid value for `epp_loan_booking`, must not be `None`")  # noqa: E501

        self._epp_loan_booking = epp_loan_booking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EppLoanBookingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EppLoanBookingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
