# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsurancePolicySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'str',
        'product_code': 'str',
        'display_account_number': 'str',
        'currency_code': 'str',
        'account_classification': 'str',
        'account_status': 'str',
        'display_policy_number': 'str',
        'insurance_application_id': 'str',
        'insurance_sum_assured_amount': 'float',
        'total_premium_paid_amount': 'float'
    }

    attribute_map = {
        'product_name': 'productName',
        'product_code': 'productCode',
        'display_account_number': 'displayAccountNumber',
        'currency_code': 'currencyCode',
        'account_classification': 'accountClassification',
        'account_status': 'accountStatus',
        'display_policy_number': 'displayPolicyNumber',
        'insurance_application_id': 'insuranceApplicationId',
        'insurance_sum_assured_amount': 'insuranceSumAssuredAmount',
        'total_premium_paid_amount': 'totalPremiumPaidAmount'
    }

    def __init__(self, product_name=None, product_code=None, display_account_number=None, currency_code=None, account_classification=None, account_status=None, display_policy_number=None, insurance_application_id=None, insurance_sum_assured_amount=None, total_premium_paid_amount=None):  # noqa: E501
        """InsurancePolicySummary - a model defined in Swagger"""  # noqa: E501
        self._product_name = None
        self._product_code = None
        self._display_account_number = None
        self._currency_code = None
        self._account_classification = None
        self._account_status = None
        self._display_policy_number = None
        self._insurance_application_id = None
        self._insurance_sum_assured_amount = None
        self._total_premium_paid_amount = None
        self.discriminator = None
        if product_name is not None:
            self.product_name = product_name
        if product_code is not None:
            self.product_code = product_code
        if display_account_number is not None:
            self.display_account_number = display_account_number
        if currency_code is not None:
            self.currency_code = currency_code
        if account_classification is not None:
            self.account_classification = account_classification
        if account_status is not None:
            self.account_status = account_status
        self.display_policy_number = display_policy_number
        self.insurance_application_id = insurance_application_id
        if insurance_sum_assured_amount is not None:
            self.insurance_sum_assured_amount = insurance_sum_assured_amount
        if total_premium_paid_amount is not None:
            self.total_premium_paid_amount = total_premium_paid_amount

    @property
    def product_name(self):
        """Gets the product_name of this InsurancePolicySummary.  # noqa: E501

        The name of the product  # noqa: E501

        :return: The product_name of this InsurancePolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this InsurancePolicySummary.

        The name of the product  # noqa: E501

        :param product_name: The product_name of this InsurancePolicySummary.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_code(self):
        """Gets the product_code of this InsurancePolicySummary.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this InsurancePolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this InsurancePolicySummary.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this InsurancePolicySummary.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def display_account_number(self):
        """Gets the display_account_number of this InsurancePolicySummary.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this InsurancePolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this InsurancePolicySummary.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this InsurancePolicySummary.  # noqa: E501
        :type: str
        """

        self._display_account_number = display_account_number

    @property
    def currency_code(self):
        """Gets the currency_code of this InsurancePolicySummary.  # noqa: E501

        The currency code in ISO 4217 format  # noqa: E501

        :return: The currency_code of this InsurancePolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this InsurancePolicySummary.

        The currency code in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this InsurancePolicySummary.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def account_classification(self):
        """Gets the account_classification of this InsurancePolicySummary.  # noqa: E501

        Classification of account either as ASSET or LIABILITY. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClassification} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The account_classification of this InsurancePolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._account_classification

    @account_classification.setter
    def account_classification(self, account_classification):
        """Sets the account_classification of this InsurancePolicySummary.

        Classification of account either as ASSET or LIABILITY. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClassification} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param account_classification: The account_classification of this InsurancePolicySummary.  # noqa: E501
        :type: str
        """

        self._account_classification = account_classification

    @property
    def account_status(self):
        """Gets the account_status of this InsurancePolicySummary.  # noqa: E501

        Status of the account. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The account_status of this InsurancePolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this InsurancePolicySummary.

        Status of the account. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param account_status: The account_status of this InsurancePolicySummary.  # noqa: E501
        :type: str
        """

        self._account_status = account_status

    @property
    def display_policy_number(self):
        """Gets the display_policy_number of this InsurancePolicySummary.  # noqa: E501

        A masked policy number that can be displayed to the customer.  # noqa: E501

        :return: The display_policy_number of this InsurancePolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._display_policy_number

    @display_policy_number.setter
    def display_policy_number(self, display_policy_number):
        """Sets the display_policy_number of this InsurancePolicySummary.

        A masked policy number that can be displayed to the customer.  # noqa: E501

        :param display_policy_number: The display_policy_number of this InsurancePolicySummary.  # noqa: E501
        :type: str
        """
        if display_policy_number is None:
            raise ValueError("Invalid value for `display_policy_number`, must not be `None`")  # noqa: E501

        self._display_policy_number = display_policy_number

    @property
    def insurance_application_id(self):
        """Gets the insurance_application_id of this InsurancePolicySummary.  # noqa: E501

        Insurance Application Number. This field is used to retrieve insurance policy details  # noqa: E501

        :return: The insurance_application_id of this InsurancePolicySummary.  # noqa: E501
        :rtype: str
        """
        return self._insurance_application_id

    @insurance_application_id.setter
    def insurance_application_id(self, insurance_application_id):
        """Sets the insurance_application_id of this InsurancePolicySummary.

        Insurance Application Number. This field is used to retrieve insurance policy details  # noqa: E501

        :param insurance_application_id: The insurance_application_id of this InsurancePolicySummary.  # noqa: E501
        :type: str
        """
        if insurance_application_id is None:
            raise ValueError("Invalid value for `insurance_application_id`, must not be `None`")  # noqa: E501

        self._insurance_application_id = insurance_application_id

    @property
    def insurance_sum_assured_amount(self):
        """Gets the insurance_sum_assured_amount of this InsurancePolicySummary.  # noqa: E501

        Sum assured amount of the insurance  # noqa: E501

        :return: The insurance_sum_assured_amount of this InsurancePolicySummary.  # noqa: E501
        :rtype: float
        """
        return self._insurance_sum_assured_amount

    @insurance_sum_assured_amount.setter
    def insurance_sum_assured_amount(self, insurance_sum_assured_amount):
        """Sets the insurance_sum_assured_amount of this InsurancePolicySummary.

        Sum assured amount of the insurance  # noqa: E501

        :param insurance_sum_assured_amount: The insurance_sum_assured_amount of this InsurancePolicySummary.  # noqa: E501
        :type: float
        """

        self._insurance_sum_assured_amount = insurance_sum_assured_amount

    @property
    def total_premium_paid_amount(self):
        """Gets the total_premium_paid_amount of this InsurancePolicySummary.  # noqa: E501

        Total premium paid for the insurance policy  # noqa: E501

        :return: The total_premium_paid_amount of this InsurancePolicySummary.  # noqa: E501
        :rtype: float
        """
        return self._total_premium_paid_amount

    @total_premium_paid_amount.setter
    def total_premium_paid_amount(self, total_premium_paid_amount):
        """Sets the total_premium_paid_amount of this InsurancePolicySummary.

        Total premium paid for the insurance policy  # noqa: E501

        :param total_premium_paid_amount: The total_premium_paid_amount of this InsurancePolicySummary.  # noqa: E501
        :type: float
        """

        self._total_premium_paid_amount = total_premium_paid_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InsurancePolicySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsurancePolicySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
