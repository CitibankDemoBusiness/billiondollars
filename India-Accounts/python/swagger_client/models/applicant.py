# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Applicant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consent_details': 'list[ConsentDetails]',
        'employment_details': 'list[EmploymentDetails]',
        'financial_information': 'FinancialInformation',
        'address': 'list[Address]',
        'phone': 'list[Phone]'
    }

    attribute_map = {
        'consent_details': 'consentDetails',
        'employment_details': 'employmentDetails',
        'financial_information': 'financialInformation',
        'address': 'address',
        'phone': 'phone'
    }

    def __init__(self, consent_details=None, employment_details=None, financial_information=None, address=None, phone=None):  # noqa: E501
        """Applicant - a model defined in Swagger"""  # noqa: E501
        self._consent_details = None
        self._employment_details = None
        self._financial_information = None
        self._address = None
        self._phone = None
        self.discriminator = None
        if consent_details is not None:
            self.consent_details = consent_details
        if employment_details is not None:
            self.employment_details = employment_details
        if financial_information is not None:
            self.financial_information = financial_information
        if address is not None:
            self.address = address
        if phone is not None:
            self.phone = phone

    @property
    def consent_details(self):
        """Gets the consent_details of this Applicant.  # noqa: E501


        :return: The consent_details of this Applicant.  # noqa: E501
        :rtype: list[ConsentDetails]
        """
        return self._consent_details

    @consent_details.setter
    def consent_details(self, consent_details):
        """Sets the consent_details of this Applicant.


        :param consent_details: The consent_details of this Applicant.  # noqa: E501
        :type: list[ConsentDetails]
        """

        self._consent_details = consent_details

    @property
    def employment_details(self):
        """Gets the employment_details of this Applicant.  # noqa: E501


        :return: The employment_details of this Applicant.  # noqa: E501
        :rtype: list[EmploymentDetails]
        """
        return self._employment_details

    @employment_details.setter
    def employment_details(self, employment_details):
        """Sets the employment_details of this Applicant.


        :param employment_details: The employment_details of this Applicant.  # noqa: E501
        :type: list[EmploymentDetails]
        """

        self._employment_details = employment_details

    @property
    def financial_information(self):
        """Gets the financial_information of this Applicant.  # noqa: E501


        :return: The financial_information of this Applicant.  # noqa: E501
        :rtype: FinancialInformation
        """
        return self._financial_information

    @financial_information.setter
    def financial_information(self, financial_information):
        """Sets the financial_information of this Applicant.


        :param financial_information: The financial_information of this Applicant.  # noqa: E501
        :type: FinancialInformation
        """

        self._financial_information = financial_information

    @property
    def address(self):
        """Gets the address of this Applicant.  # noqa: E501


        :return: The address of this Applicant.  # noqa: E501
        :rtype: list[Address]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Applicant.


        :param address: The address of this Applicant.  # noqa: E501
        :type: list[Address]
        """

        self._address = address

    @property
    def phone(self):
        """Gets the phone of this Applicant.  # noqa: E501


        :return: The phone of this Applicant.  # noqa: E501
        :rtype: list[Phone]
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Applicant.


        :param phone: The phone of this Applicant.  # noqa: E501
        :type: list[Phone]
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Applicant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Applicant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
