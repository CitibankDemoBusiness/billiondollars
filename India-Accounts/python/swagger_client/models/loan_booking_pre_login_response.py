# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanBookingPreLoginResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_reference_id': 'str',
        'payment_method': 'str'
    }

    attribute_map = {
        'loan_reference_id': 'loanReferenceId',
        'payment_method': 'paymentMethod'
    }

    def __init__(self, loan_reference_id=None, payment_method=None):  # noqa: E501
        """LoanBookingPreLoginResponse - a model defined in Swagger"""  # noqa: E501
        self._loan_reference_id = None
        self._payment_method = None
        self.discriminator = None
        self.loan_reference_id = loan_reference_id
        if payment_method is not None:
            self.payment_method = payment_method

    @property
    def loan_reference_id(self):
        """Gets the loan_reference_id of this LoanBookingPreLoginResponse.  # noqa: E501

        The unique  reference Id used to identify this Loan from all the other Loans  # noqa: E501

        :return: The loan_reference_id of this LoanBookingPreLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._loan_reference_id

    @loan_reference_id.setter
    def loan_reference_id(self, loan_reference_id):
        """Sets the loan_reference_id of this LoanBookingPreLoginResponse.

        The unique  reference Id used to identify this Loan from all the other Loans  # noqa: E501

        :param loan_reference_id: The loan_reference_id of this LoanBookingPreLoginResponse.  # noqa: E501
        :type: str
        """
        if loan_reference_id is None:
            raise ValueError("Invalid value for `loan_reference_id`, must not be `None`")  # noqa: E501

        self._loan_reference_id = loan_reference_id

    @property
    def payment_method(self):
        """Gets the payment_method of this LoanBookingPreLoginResponse.  # noqa: E501

        The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{paymentMethod} resource to get valid value of this field with description.  # noqa: E501

        :return: The payment_method of this LoanBookingPreLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this LoanBookingPreLoginResponse.

        The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{paymentMethod} resource to get valid value of this field with description.  # noqa: E501

        :param payment_method: The payment_method of this LoanBookingPreLoginResponse.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanBookingPreLoginResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanBookingPreLoginResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
