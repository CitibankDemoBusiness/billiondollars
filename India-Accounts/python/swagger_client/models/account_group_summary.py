# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountGroupSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_group': 'str',
        'accounts': 'list[AccountSummary]',
        'insurance_policies': 'list[InsurancePolicySummary]',
        'total_current_balance': 'GroupBalance',
        'total_available_balance': 'GroupBalance',
        'total_outstanding_balance': 'GroupBalance'
    }

    attribute_map = {
        'account_group': 'accountGroup',
        'accounts': 'accounts',
        'insurance_policies': 'insurancePolicies',
        'total_current_balance': 'totalCurrentBalance',
        'total_available_balance': 'totalAvailableBalance',
        'total_outstanding_balance': 'totalOutstandingBalance'
    }

    def __init__(self, account_group=None, accounts=None, insurance_policies=None, total_current_balance=None, total_available_balance=None, total_outstanding_balance=None):  # noqa: E501
        """AccountGroupSummary - a model defined in Swagger"""  # noqa: E501
        self._account_group = None
        self._accounts = None
        self._insurance_policies = None
        self._total_current_balance = None
        self._total_available_balance = None
        self._total_outstanding_balance = None
        self.discriminator = None
        self.account_group = account_group
        self.accounts = accounts
        if insurance_policies is not None:
            self.insurance_policies = insurance_policies
        if total_current_balance is not None:
            self.total_current_balance = total_current_balance
        if total_available_balance is not None:
            self.total_available_balance = total_available_balance
        if total_outstanding_balance is not None:
            self.total_outstanding_balance = total_outstanding_balance

    @property
    def account_group(self):
        """Gets the account_group of this AccountGroupSummary.  # noqa: E501

        Account group is a classification of accounts according to their common characteristics. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountGroup} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The account_group of this AccountGroupSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_group

    @account_group.setter
    def account_group(self, account_group):
        """Sets the account_group of this AccountGroupSummary.

        Account group is a classification of accounts according to their common characteristics. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountGroup} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param account_group: The account_group of this AccountGroupSummary.  # noqa: E501
        :type: str
        """
        if account_group is None:
            raise ValueError("Invalid value for `account_group`, must not be `None`")  # noqa: E501

        self._account_group = account_group

    @property
    def accounts(self):
        """Gets the accounts of this AccountGroupSummary.  # noqa: E501

        Summarized list of each account type under a specific product group, held by customer  # noqa: E501

        :return: The accounts of this AccountGroupSummary.  # noqa: E501
        :rtype: list[AccountSummary]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this AccountGroupSummary.

        Summarized list of each account type under a specific product group, held by customer  # noqa: E501

        :param accounts: The accounts of this AccountGroupSummary.  # noqa: E501
        :type: list[AccountSummary]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")  # noqa: E501

        self._accounts = accounts

    @property
    def insurance_policies(self):
        """Gets the insurance_policies of this AccountGroupSummary.  # noqa: E501

        Summarized list of every insurance policy held by the customer.  # noqa: E501

        :return: The insurance_policies of this AccountGroupSummary.  # noqa: E501
        :rtype: list[InsurancePolicySummary]
        """
        return self._insurance_policies

    @insurance_policies.setter
    def insurance_policies(self, insurance_policies):
        """Sets the insurance_policies of this AccountGroupSummary.

        Summarized list of every insurance policy held by the customer.  # noqa: E501

        :param insurance_policies: The insurance_policies of this AccountGroupSummary.  # noqa: E501
        :type: list[InsurancePolicySummary]
        """

        self._insurance_policies = insurance_policies

    @property
    def total_current_balance(self):
        """Gets the total_current_balance of this AccountGroupSummary.  # noqa: E501


        :return: The total_current_balance of this AccountGroupSummary.  # noqa: E501
        :rtype: GroupBalance
        """
        return self._total_current_balance

    @total_current_balance.setter
    def total_current_balance(self, total_current_balance):
        """Sets the total_current_balance of this AccountGroupSummary.


        :param total_current_balance: The total_current_balance of this AccountGroupSummary.  # noqa: E501
        :type: GroupBalance
        """

        self._total_current_balance = total_current_balance

    @property
    def total_available_balance(self):
        """Gets the total_available_balance of this AccountGroupSummary.  # noqa: E501


        :return: The total_available_balance of this AccountGroupSummary.  # noqa: E501
        :rtype: GroupBalance
        """
        return self._total_available_balance

    @total_available_balance.setter
    def total_available_balance(self, total_available_balance):
        """Sets the total_available_balance of this AccountGroupSummary.


        :param total_available_balance: The total_available_balance of this AccountGroupSummary.  # noqa: E501
        :type: GroupBalance
        """

        self._total_available_balance = total_available_balance

    @property
    def total_outstanding_balance(self):
        """Gets the total_outstanding_balance of this AccountGroupSummary.  # noqa: E501


        :return: The total_outstanding_balance of this AccountGroupSummary.  # noqa: E501
        :rtype: GroupBalance
        """
        return self._total_outstanding_balance

    @total_outstanding_balance.setter
    def total_outstanding_balance(self, total_outstanding_balance):
        """Sets the total_outstanding_balance of this AccountGroupSummary.


        :param total_outstanding_balance: The total_outstanding_balance of this AccountGroupSummary.  # noqa: E501
        :type: GroupBalance
        """

        self._total_outstanding_balance = total_outstanding_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountGroupSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountGroupSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
