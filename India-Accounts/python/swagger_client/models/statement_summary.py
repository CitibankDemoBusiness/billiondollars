# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatementSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outstanding_balance': 'float',
        'credit_limit': 'float',
        'active_equal_payment_plan_count': 'float',
        'beginning_balance_amount': 'float',
        'total_debit_amount': 'float',
        'total_credit_amount': 'float',
        'net_interest_amount': 'float',
        'payment_due_date': 'date',
        'past_due_amount': 'float',
        'cash_advance_limit': 'float',
        'cycle_to_date_fee_amount': 'float',
        'interest_paid_amount': 'float',
        'billing_currency_code': 'str',
        'cash_advance_available_amount': 'float',
        'retail_cycle_interest_rate': 'float',
        'cash_cycle_interest_rate': 'float',
        'private_label_credit_cards': 'PrivateLabelCreditCards'
    }

    attribute_map = {
        'outstanding_balance': 'outstandingBalance',
        'credit_limit': 'creditLimit',
        'active_equal_payment_plan_count': 'activeEqualPaymentPlanCount',
        'beginning_balance_amount': 'beginningBalanceAmount',
        'total_debit_amount': 'totalDebitAmount',
        'total_credit_amount': 'totalCreditAmount',
        'net_interest_amount': 'netInterestAmount',
        'payment_due_date': 'paymentDueDate',
        'past_due_amount': 'pastDueAmount',
        'cash_advance_limit': 'cashAdvanceLimit',
        'cycle_to_date_fee_amount': 'cycleToDateFeeAmount',
        'interest_paid_amount': 'interestPaidAmount',
        'billing_currency_code': 'billingCurrencyCode',
        'cash_advance_available_amount': 'cashAdvanceAvailableAmount',
        'retail_cycle_interest_rate': 'retailCycleInterestRate',
        'cash_cycle_interest_rate': 'cashCycleInterestRate',
        'private_label_credit_cards': 'privateLabelCreditCards'
    }

    def __init__(self, outstanding_balance=None, credit_limit=None, active_equal_payment_plan_count=None, beginning_balance_amount=None, total_debit_amount=None, total_credit_amount=None, net_interest_amount=None, payment_due_date=None, past_due_amount=None, cash_advance_limit=None, cycle_to_date_fee_amount=None, interest_paid_amount=None, billing_currency_code=None, cash_advance_available_amount=None, retail_cycle_interest_rate=None, cash_cycle_interest_rate=None, private_label_credit_cards=None):  # noqa: E501
        """StatementSummary - a model defined in Swagger"""  # noqa: E501
        self._outstanding_balance = None
        self._credit_limit = None
        self._active_equal_payment_plan_count = None
        self._beginning_balance_amount = None
        self._total_debit_amount = None
        self._total_credit_amount = None
        self._net_interest_amount = None
        self._payment_due_date = None
        self._past_due_amount = None
        self._cash_advance_limit = None
        self._cycle_to_date_fee_amount = None
        self._interest_paid_amount = None
        self._billing_currency_code = None
        self._cash_advance_available_amount = None
        self._retail_cycle_interest_rate = None
        self._cash_cycle_interest_rate = None
        self._private_label_credit_cards = None
        self.discriminator = None
        if outstanding_balance is not None:
            self.outstanding_balance = outstanding_balance
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if active_equal_payment_plan_count is not None:
            self.active_equal_payment_plan_count = active_equal_payment_plan_count
        if beginning_balance_amount is not None:
            self.beginning_balance_amount = beginning_balance_amount
        if total_debit_amount is not None:
            self.total_debit_amount = total_debit_amount
        if total_credit_amount is not None:
            self.total_credit_amount = total_credit_amount
        if net_interest_amount is not None:
            self.net_interest_amount = net_interest_amount
        if payment_due_date is not None:
            self.payment_due_date = payment_due_date
        if past_due_amount is not None:
            self.past_due_amount = past_due_amount
        if cash_advance_limit is not None:
            self.cash_advance_limit = cash_advance_limit
        if cycle_to_date_fee_amount is not None:
            self.cycle_to_date_fee_amount = cycle_to_date_fee_amount
        if interest_paid_amount is not None:
            self.interest_paid_amount = interest_paid_amount
        if billing_currency_code is not None:
            self.billing_currency_code = billing_currency_code
        if cash_advance_available_amount is not None:
            self.cash_advance_available_amount = cash_advance_available_amount
        if retail_cycle_interest_rate is not None:
            self.retail_cycle_interest_rate = retail_cycle_interest_rate
        if cash_cycle_interest_rate is not None:
            self.cash_cycle_interest_rate = cash_cycle_interest_rate
        if private_label_credit_cards is not None:
            self.private_label_credit_cards = private_label_credit_cards

    @property
    def outstanding_balance(self):
        """Gets the outstanding_balance of this StatementSummary.  # noqa: E501

        Outstanding balance amount on the statement date  # noqa: E501

        :return: The outstanding_balance of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_balance

    @outstanding_balance.setter
    def outstanding_balance(self, outstanding_balance):
        """Sets the outstanding_balance of this StatementSummary.

        Outstanding balance amount on the statement date  # noqa: E501

        :param outstanding_balance: The outstanding_balance of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._outstanding_balance = outstanding_balance

    @property
    def credit_limit(self):
        """Gets the credit_limit of this StatementSummary.  # noqa: E501

        The maximum amount of credit that extend to a customer  # noqa: E501

        :return: The credit_limit of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this StatementSummary.

        The maximum amount of credit that extend to a customer  # noqa: E501

        :param credit_limit: The credit_limit of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._credit_limit = credit_limit

    @property
    def active_equal_payment_plan_count(self):
        """Gets the active_equal_payment_plan_count of this StatementSummary.  # noqa: E501

        Number of active plans under equal payment plan  # noqa: E501

        :return: The active_equal_payment_plan_count of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._active_equal_payment_plan_count

    @active_equal_payment_plan_count.setter
    def active_equal_payment_plan_count(self, active_equal_payment_plan_count):
        """Sets the active_equal_payment_plan_count of this StatementSummary.

        Number of active plans under equal payment plan  # noqa: E501

        :param active_equal_payment_plan_count: The active_equal_payment_plan_count of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._active_equal_payment_plan_count = active_equal_payment_plan_count

    @property
    def beginning_balance_amount(self):
        """Gets the beginning_balance_amount of this StatementSummary.  # noqa: E501

        Balance as on Last Statement Date  # noqa: E501

        :return: The beginning_balance_amount of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._beginning_balance_amount

    @beginning_balance_amount.setter
    def beginning_balance_amount(self, beginning_balance_amount):
        """Sets the beginning_balance_amount of this StatementSummary.

        Balance as on Last Statement Date  # noqa: E501

        :param beginning_balance_amount: The beginning_balance_amount of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._beginning_balance_amount = beginning_balance_amount

    @property
    def total_debit_amount(self):
        """Gets the total_debit_amount of this StatementSummary.  # noqa: E501

        Total debits made during the statement period  # noqa: E501

        :return: The total_debit_amount of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_debit_amount

    @total_debit_amount.setter
    def total_debit_amount(self, total_debit_amount):
        """Sets the total_debit_amount of this StatementSummary.

        Total debits made during the statement period  # noqa: E501

        :param total_debit_amount: The total_debit_amount of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._total_debit_amount = total_debit_amount

    @property
    def total_credit_amount(self):
        """Gets the total_credit_amount of this StatementSummary.  # noqa: E501

        Total payments made during the statement period.  # noqa: E501

        :return: The total_credit_amount of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_credit_amount

    @total_credit_amount.setter
    def total_credit_amount(self, total_credit_amount):
        """Sets the total_credit_amount of this StatementSummary.

        Total payments made during the statement period.  # noqa: E501

        :param total_credit_amount: The total_credit_amount of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._total_credit_amount = total_credit_amount

    @property
    def net_interest_amount(self):
        """Gets the net_interest_amount of this StatementSummary.  # noqa: E501

        Total interest amount of monetary transactions posted to cardholder account  # noqa: E501

        :return: The net_interest_amount of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._net_interest_amount

    @net_interest_amount.setter
    def net_interest_amount(self, net_interest_amount):
        """Sets the net_interest_amount of this StatementSummary.

        Total interest amount of monetary transactions posted to cardholder account  # noqa: E501

        :param net_interest_amount: The net_interest_amount of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._net_interest_amount = net_interest_amount

    @property
    def payment_due_date(self):
        """Gets the payment_due_date of this StatementSummary.  # noqa: E501

        Next payment due date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The payment_due_date of this StatementSummary.  # noqa: E501
        :rtype: date
        """
        return self._payment_due_date

    @payment_due_date.setter
    def payment_due_date(self, payment_due_date):
        """Sets the payment_due_date of this StatementSummary.

        Next payment due date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param payment_due_date: The payment_due_date of this StatementSummary.  # noqa: E501
        :type: date
        """

        self._payment_due_date = payment_due_date

    @property
    def past_due_amount(self):
        """Gets the past_due_amount of this StatementSummary.  # noqa: E501

        Past due amount to be paid  # noqa: E501

        :return: The past_due_amount of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._past_due_amount

    @past_due_amount.setter
    def past_due_amount(self, past_due_amount):
        """Sets the past_due_amount of this StatementSummary.

        Past due amount to be paid  # noqa: E501

        :param past_due_amount: The past_due_amount of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._past_due_amount = past_due_amount

    @property
    def cash_advance_limit(self):
        """Gets the cash_advance_limit of this StatementSummary.  # noqa: E501

        Some percentage of credit limit to withdraw cash  # noqa: E501

        :return: The cash_advance_limit of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._cash_advance_limit

    @cash_advance_limit.setter
    def cash_advance_limit(self, cash_advance_limit):
        """Sets the cash_advance_limit of this StatementSummary.

        Some percentage of credit limit to withdraw cash  # noqa: E501

        :param cash_advance_limit: The cash_advance_limit of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._cash_advance_limit = cash_advance_limit

    @property
    def cycle_to_date_fee_amount(self):
        """Gets the cycle_to_date_fee_amount of this StatementSummary.  # noqa: E501

        The total fee applied in the cycle  # noqa: E501

        :return: The cycle_to_date_fee_amount of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._cycle_to_date_fee_amount

    @cycle_to_date_fee_amount.setter
    def cycle_to_date_fee_amount(self, cycle_to_date_fee_amount):
        """Sets the cycle_to_date_fee_amount of this StatementSummary.

        The total fee applied in the cycle  # noqa: E501

        :param cycle_to_date_fee_amount: The cycle_to_date_fee_amount of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._cycle_to_date_fee_amount = cycle_to_date_fee_amount

    @property
    def interest_paid_amount(self):
        """Gets the interest_paid_amount of this StatementSummary.  # noqa: E501

        Interest amount paid on the credit card from the last billing cycle.  # noqa: E501

        :return: The interest_paid_amount of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._interest_paid_amount

    @interest_paid_amount.setter
    def interest_paid_amount(self, interest_paid_amount):
        """Sets the interest_paid_amount of this StatementSummary.

        Interest amount paid on the credit card from the last billing cycle.  # noqa: E501

        :param interest_paid_amount: The interest_paid_amount of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._interest_paid_amount = interest_paid_amount

    @property
    def billing_currency_code(self):
        """Gets the billing_currency_code of this StatementSummary.  # noqa: E501

        Billing currency code in  in ISO 4217 format  # noqa: E501

        :return: The billing_currency_code of this StatementSummary.  # noqa: E501
        :rtype: str
        """
        return self._billing_currency_code

    @billing_currency_code.setter
    def billing_currency_code(self, billing_currency_code):
        """Sets the billing_currency_code of this StatementSummary.

        Billing currency code in  in ISO 4217 format  # noqa: E501

        :param billing_currency_code: The billing_currency_code of this StatementSummary.  # noqa: E501
        :type: str
        """

        self._billing_currency_code = billing_currency_code

    @property
    def cash_advance_available_amount(self):
        """Gets the cash_advance_available_amount of this StatementSummary.  # noqa: E501

        Available Cash Amount for withdrawal  # noqa: E501

        :return: The cash_advance_available_amount of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._cash_advance_available_amount

    @cash_advance_available_amount.setter
    def cash_advance_available_amount(self, cash_advance_available_amount):
        """Sets the cash_advance_available_amount of this StatementSummary.

        Available Cash Amount for withdrawal  # noqa: E501

        :param cash_advance_available_amount: The cash_advance_available_amount of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._cash_advance_available_amount = cash_advance_available_amount

    @property
    def retail_cycle_interest_rate(self):
        """Gets the retail_cycle_interest_rate of this StatementSummary.  # noqa: E501

        Retail Interest Rate for merchant transactions.  # noqa: E501

        :return: The retail_cycle_interest_rate of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._retail_cycle_interest_rate

    @retail_cycle_interest_rate.setter
    def retail_cycle_interest_rate(self, retail_cycle_interest_rate):
        """Sets the retail_cycle_interest_rate of this StatementSummary.

        Retail Interest Rate for merchant transactions.  # noqa: E501

        :param retail_cycle_interest_rate: The retail_cycle_interest_rate of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._retail_cycle_interest_rate = retail_cycle_interest_rate

    @property
    def cash_cycle_interest_rate(self):
        """Gets the cash_cycle_interest_rate of this StatementSummary.  # noqa: E501

        Cash Interest Rate for withdrawal  # noqa: E501

        :return: The cash_cycle_interest_rate of this StatementSummary.  # noqa: E501
        :rtype: float
        """
        return self._cash_cycle_interest_rate

    @cash_cycle_interest_rate.setter
    def cash_cycle_interest_rate(self, cash_cycle_interest_rate):
        """Sets the cash_cycle_interest_rate of this StatementSummary.

        Cash Interest Rate for withdrawal  # noqa: E501

        :param cash_cycle_interest_rate: The cash_cycle_interest_rate of this StatementSummary.  # noqa: E501
        :type: float
        """

        self._cash_cycle_interest_rate = cash_cycle_interest_rate

    @property
    def private_label_credit_cards(self):
        """Gets the private_label_credit_cards of this StatementSummary.  # noqa: E501


        :return: The private_label_credit_cards of this StatementSummary.  # noqa: E501
        :rtype: PrivateLabelCreditCards
        """
        return self._private_label_credit_cards

    @private_label_credit_cards.setter
    def private_label_credit_cards(self, private_label_credit_cards):
        """Sets the private_label_credit_cards of this StatementSummary.


        :param private_label_credit_cards: The private_label_credit_cards of this StatementSummary.  # noqa: E501
        :type: PrivateLabelCreditCards
        """

        self._private_label_credit_cards = private_label_credit_cards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatementSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatementSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
