# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanAmortizationSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'installment_number': 'int',
        'installment_amount': 'float',
        'principal_amount': 'float',
        'installment_interest_amount': 'float',
        'outstanding_principal_amount': 'float',
        'installment_date': 'str'
    }

    attribute_map = {
        'installment_number': 'installmentNumber',
        'installment_amount': 'installmentAmount',
        'principal_amount': 'principalAmount',
        'installment_interest_amount': 'installmentInterestAmount',
        'outstanding_principal_amount': 'outstandingPrincipalAmount',
        'installment_date': 'installmentDate'
    }

    def __init__(self, installment_number=None, installment_amount=None, principal_amount=None, installment_interest_amount=None, outstanding_principal_amount=None, installment_date=None):  # noqa: E501
        """LoanAmortizationSchedule - a model defined in Swagger"""  # noqa: E501
        self._installment_number = None
        self._installment_amount = None
        self._principal_amount = None
        self._installment_interest_amount = None
        self._outstanding_principal_amount = None
        self._installment_date = None
        self.discriminator = None
        self.installment_number = installment_number
        self.installment_amount = installment_amount
        self.principal_amount = principal_amount
        self.installment_interest_amount = installment_interest_amount
        if outstanding_principal_amount is not None:
            self.outstanding_principal_amount = outstanding_principal_amount
        if installment_date is not None:
            self.installment_date = installment_date

    @property
    def installment_number(self):
        """Gets the installment_number of this LoanAmortizationSchedule.  # noqa: E501

        Installment number  # noqa: E501

        :return: The installment_number of this LoanAmortizationSchedule.  # noqa: E501
        :rtype: int
        """
        return self._installment_number

    @installment_number.setter
    def installment_number(self, installment_number):
        """Sets the installment_number of this LoanAmortizationSchedule.

        Installment number  # noqa: E501

        :param installment_number: The installment_number of this LoanAmortizationSchedule.  # noqa: E501
        :type: int
        """
        if installment_number is None:
            raise ValueError("Invalid value for `installment_number`, must not be `None`")  # noqa: E501

        self._installment_number = installment_number

    @property
    def installment_amount(self):
        """Gets the installment_amount of this LoanAmortizationSchedule.  # noqa: E501

        Installment amount to be payed by customer in order to repay the loan.  # noqa: E501

        :return: The installment_amount of this LoanAmortizationSchedule.  # noqa: E501
        :rtype: float
        """
        return self._installment_amount

    @installment_amount.setter
    def installment_amount(self, installment_amount):
        """Sets the installment_amount of this LoanAmortizationSchedule.

        Installment amount to be payed by customer in order to repay the loan.  # noqa: E501

        :param installment_amount: The installment_amount of this LoanAmortizationSchedule.  # noqa: E501
        :type: float
        """
        if installment_amount is None:
            raise ValueError("Invalid value for `installment_amount`, must not be `None`")  # noqa: E501

        self._installment_amount = installment_amount

    @property
    def principal_amount(self):
        """Gets the principal_amount of this LoanAmortizationSchedule.  # noqa: E501

        The portion of the Principal Amount Paid for the loan.  # noqa: E501

        :return: The principal_amount of this LoanAmortizationSchedule.  # noqa: E501
        :rtype: float
        """
        return self._principal_amount

    @principal_amount.setter
    def principal_amount(self, principal_amount):
        """Sets the principal_amount of this LoanAmortizationSchedule.

        The portion of the Principal Amount Paid for the loan.  # noqa: E501

        :param principal_amount: The principal_amount of this LoanAmortizationSchedule.  # noqa: E501
        :type: float
        """
        if principal_amount is None:
            raise ValueError("Invalid value for `principal_amount`, must not be `None`")  # noqa: E501

        self._principal_amount = principal_amount

    @property
    def installment_interest_amount(self):
        """Gets the installment_interest_amount of this LoanAmortizationSchedule.  # noqa: E501

        The interest  amount to be paid as installment.  # noqa: E501

        :return: The installment_interest_amount of this LoanAmortizationSchedule.  # noqa: E501
        :rtype: float
        """
        return self._installment_interest_amount

    @installment_interest_amount.setter
    def installment_interest_amount(self, installment_interest_amount):
        """Sets the installment_interest_amount of this LoanAmortizationSchedule.

        The interest  amount to be paid as installment.  # noqa: E501

        :param installment_interest_amount: The installment_interest_amount of this LoanAmortizationSchedule.  # noqa: E501
        :type: float
        """
        if installment_interest_amount is None:
            raise ValueError("Invalid value for `installment_interest_amount`, must not be `None`")  # noqa: E501

        self._installment_interest_amount = installment_interest_amount

    @property
    def outstanding_principal_amount(self):
        """Gets the outstanding_principal_amount of this LoanAmortizationSchedule.  # noqa: E501

        The portion of the Principal Amount not Paid for the loan.  # noqa: E501

        :return: The outstanding_principal_amount of this LoanAmortizationSchedule.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_principal_amount

    @outstanding_principal_amount.setter
    def outstanding_principal_amount(self, outstanding_principal_amount):
        """Sets the outstanding_principal_amount of this LoanAmortizationSchedule.

        The portion of the Principal Amount not Paid for the loan.  # noqa: E501

        :param outstanding_principal_amount: The outstanding_principal_amount of this LoanAmortizationSchedule.  # noqa: E501
        :type: float
        """

        self._outstanding_principal_amount = outstanding_principal_amount

    @property
    def installment_date(self):
        """Gets the installment_date of this LoanAmortizationSchedule.  # noqa: E501

        Installment date in MM/YYYY format  # noqa: E501

        :return: The installment_date of this LoanAmortizationSchedule.  # noqa: E501
        :rtype: str
        """
        return self._installment_date

    @installment_date.setter
    def installment_date(self, installment_date):
        """Sets the installment_date of this LoanAmortizationSchedule.

        Installment date in MM/YYYY format  # noqa: E501

        :param installment_date: The installment_date of this LoanAmortizationSchedule.  # noqa: E501
        :type: str
        """

        self._installment_date = installment_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanAmortizationSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanAmortizationSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
