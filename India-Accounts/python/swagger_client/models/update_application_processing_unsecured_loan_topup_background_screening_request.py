# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applicant_detail': 'ApplicantDetail',
        'loan_purpose': 'str'
    }

    attribute_map = {
        'applicant_detail': 'applicantDetail',
        'loan_purpose': 'loanPurpose'
    }

    def __init__(self, applicant_detail=None, loan_purpose=None):  # noqa: E501
        """UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest - a model defined in Swagger"""  # noqa: E501
        self._applicant_detail = None
        self._loan_purpose = None
        self.discriminator = None
        if applicant_detail is not None:
            self.applicant_detail = applicant_detail
        if loan_purpose is not None:
            self.loan_purpose = loan_purpose

    @property
    def applicant_detail(self):
        """Gets the applicant_detail of this UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest.  # noqa: E501


        :return: The applicant_detail of this UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest.  # noqa: E501
        :rtype: ApplicantDetail
        """
        return self._applicant_detail

    @applicant_detail.setter
    def applicant_detail(self, applicant_detail):
        """Sets the applicant_detail of this UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest.


        :param applicant_detail: The applicant_detail of this UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest.  # noqa: E501
        :type: ApplicantDetail
        """

        self._applicant_detail = applicant_detail

    @property
    def loan_purpose(self):
        """Gets the loan_purpose of this UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest.  # noqa: E501

        This field is to indicate the purpose of loan. This is a reference data field.This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.  # noqa: E501

        :return: The loan_purpose of this UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest.  # noqa: E501
        :rtype: str
        """
        return self._loan_purpose

    @loan_purpose.setter
    def loan_purpose(self, loan_purpose):
        """Sets the loan_purpose of this UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest.

        This field is to indicate the purpose of loan. This is a reference data field.This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.  # noqa: E501

        :param loan_purpose: The loan_purpose of this UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest.  # noqa: E501
        :type: str
        """

        self._loan_purpose = loan_purpose

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
