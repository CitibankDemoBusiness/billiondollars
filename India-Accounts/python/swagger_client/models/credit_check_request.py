# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditCheckRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monthly_income': 'float',
        'total_monthly_secured_loan_repayment_amount': 'float',
        'total_monthly_unsecured_loan_repayment_amount': 'float'
    }

    attribute_map = {
        'monthly_income': 'monthlyIncome',
        'total_monthly_secured_loan_repayment_amount': 'totalMonthlySecuredLoanRepaymentAmount',
        'total_monthly_unsecured_loan_repayment_amount': 'totalMonthlyUnsecuredLoanRepaymentAmount'
    }

    def __init__(self, monthly_income=None, total_monthly_secured_loan_repayment_amount=None, total_monthly_unsecured_loan_repayment_amount=None):  # noqa: E501
        """CreditCheckRequest - a model defined in Swagger"""  # noqa: E501
        self._monthly_income = None
        self._total_monthly_secured_loan_repayment_amount = None
        self._total_monthly_unsecured_loan_repayment_amount = None
        self.discriminator = None
        self.monthly_income = monthly_income
        if total_monthly_secured_loan_repayment_amount is not None:
            self.total_monthly_secured_loan_repayment_amount = total_monthly_secured_loan_repayment_amount
        if total_monthly_unsecured_loan_repayment_amount is not None:
            self.total_monthly_unsecured_loan_repayment_amount = total_monthly_unsecured_loan_repayment_amount

    @property
    def monthly_income(self):
        """Gets the monthly_income of this CreditCheckRequest.  # noqa: E501

        This field is to indicate the monthly income of the customer.  # noqa: E501

        :return: The monthly_income of this CreditCheckRequest.  # noqa: E501
        :rtype: float
        """
        return self._monthly_income

    @monthly_income.setter
    def monthly_income(self, monthly_income):
        """Sets the monthly_income of this CreditCheckRequest.

        This field is to indicate the monthly income of the customer.  # noqa: E501

        :param monthly_income: The monthly_income of this CreditCheckRequest.  # noqa: E501
        :type: float
        """
        if monthly_income is None:
            raise ValueError("Invalid value for `monthly_income`, must not be `None`")  # noqa: E501

        self._monthly_income = monthly_income

    @property
    def total_monthly_secured_loan_repayment_amount(self):
        """Gets the total_monthly_secured_loan_repayment_amount of this CreditCheckRequest.  # noqa: E501

        Total monthly repayment amount outside of Citibank for mortgage installment, secured loans and all in-progress loan applications.  # noqa: E501

        :return: The total_monthly_secured_loan_repayment_amount of this CreditCheckRequest.  # noqa: E501
        :rtype: float
        """
        return self._total_monthly_secured_loan_repayment_amount

    @total_monthly_secured_loan_repayment_amount.setter
    def total_monthly_secured_loan_repayment_amount(self, total_monthly_secured_loan_repayment_amount):
        """Sets the total_monthly_secured_loan_repayment_amount of this CreditCheckRequest.

        Total monthly repayment amount outside of Citibank for mortgage installment, secured loans and all in-progress loan applications.  # noqa: E501

        :param total_monthly_secured_loan_repayment_amount: The total_monthly_secured_loan_repayment_amount of this CreditCheckRequest.  # noqa: E501
        :type: float
        """

        self._total_monthly_secured_loan_repayment_amount = total_monthly_secured_loan_repayment_amount

    @property
    def total_monthly_unsecured_loan_repayment_amount(self):
        """Gets the total_monthly_unsecured_loan_repayment_amount of this CreditCheckRequest.  # noqa: E501

        Total monthly repayment amount of unsecured loans in non-bank money lenders.  # noqa: E501

        :return: The total_monthly_unsecured_loan_repayment_amount of this CreditCheckRequest.  # noqa: E501
        :rtype: float
        """
        return self._total_monthly_unsecured_loan_repayment_amount

    @total_monthly_unsecured_loan_repayment_amount.setter
    def total_monthly_unsecured_loan_repayment_amount(self, total_monthly_unsecured_loan_repayment_amount):
        """Sets the total_monthly_unsecured_loan_repayment_amount of this CreditCheckRequest.

        Total monthly repayment amount of unsecured loans in non-bank money lenders.  # noqa: E501

        :param total_monthly_unsecured_loan_repayment_amount: The total_monthly_unsecured_loan_repayment_amount of this CreditCheckRequest.  # noqa: E501
        :type: float
        """

        self._total_monthly_unsecured_loan_repayment_amount = total_monthly_unsecured_loan_repayment_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCheckRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCheckRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
