# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_name': 'str',
        'display_account_number': 'str',
        'account_group': 'str',
        'maximum_eligible_loan_amount': 'float',
        'minimum_eligible_loan_amount': 'float',
        'offer_indicator': 'str',
        'loan_booking_plan': 'list[LoanBookingPlan]',
        'lop_category': 'str'
    }

    attribute_map = {
        'customer_name': 'customerName',
        'display_account_number': 'displayAccountNumber',
        'account_group': 'accountGroup',
        'maximum_eligible_loan_amount': 'maximumEligibleLoanAmount',
        'minimum_eligible_loan_amount': 'minimumEligibleLoanAmount',
        'offer_indicator': 'offerIndicator',
        'loan_booking_plan': 'loanBookingPlan',
        'lop_category': 'lopCategory'
    }

    def __init__(self, customer_name=None, display_account_number=None, account_group=None, maximum_eligible_loan_amount=None, minimum_eligible_loan_amount=None, offer_indicator=None, loan_booking_plan=None, lop_category=None):  # noqa: E501
        """EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse - a model defined in Swagger"""  # noqa: E501
        self._customer_name = None
        self._display_account_number = None
        self._account_group = None
        self._maximum_eligible_loan_amount = None
        self._minimum_eligible_loan_amount = None
        self._offer_indicator = None
        self._loan_booking_plan = None
        self._lop_category = None
        self.discriminator = None
        self.customer_name = customer_name
        if display_account_number is not None:
            self.display_account_number = display_account_number
        if account_group is not None:
            self.account_group = account_group
        self.maximum_eligible_loan_amount = maximum_eligible_loan_amount
        self.minimum_eligible_loan_amount = minimum_eligible_loan_amount
        self.offer_indicator = offer_indicator
        if loan_booking_plan is not None:
            self.loan_booking_plan = loan_booking_plan
        if lop_category is not None:
            self.lop_category = lop_category

    @property
    def customer_name(self):
        """Gets the customer_name of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501

        This refers to the name of the customer.  # noqa: E501

        :return: The customer_name of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.

        This refers to the name of the customer.  # noqa: E501

        :param customer_name: The customer_name of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :type: str
        """
        if customer_name is None:
            raise ValueError("Invalid value for `customer_name`, must not be `None`")  # noqa: E501

        self._customer_name = customer_name

    @property
    def display_account_number(self):
        """Gets the display_account_number of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :type: str
        """

        self._display_account_number = display_account_number

    @property
    def account_group(self):
        """Gets the account_group of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501

        Account Group associated with the source Account.This is a reference data field. Please use /v1/utilities/referenceData/{accountGroup} resource to get valid value of this field with description.  # noqa: E501

        :return: The account_group of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_group

    @account_group.setter
    def account_group(self, account_group):
        """Sets the account_group of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.

        Account Group associated with the source Account.This is a reference data field. Please use /v1/utilities/referenceData/{accountGroup} resource to get valid value of this field with description.  # noqa: E501

        :param account_group: The account_group of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :type: str
        """

        self._account_group = account_group

    @property
    def maximum_eligible_loan_amount(self):
        """Gets the maximum_eligible_loan_amount of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501

        The maximum amount of credit that extend to a customer  # noqa: E501

        :return: The maximum_eligible_loan_amount of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :rtype: float
        """
        return self._maximum_eligible_loan_amount

    @maximum_eligible_loan_amount.setter
    def maximum_eligible_loan_amount(self, maximum_eligible_loan_amount):
        """Sets the maximum_eligible_loan_amount of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.

        The maximum amount of credit that extend to a customer  # noqa: E501

        :param maximum_eligible_loan_amount: The maximum_eligible_loan_amount of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :type: float
        """
        if maximum_eligible_loan_amount is None:
            raise ValueError("Invalid value for `maximum_eligible_loan_amount`, must not be `None`")  # noqa: E501

        self._maximum_eligible_loan_amount = maximum_eligible_loan_amount

    @property
    def minimum_eligible_loan_amount(self):
        """Gets the minimum_eligible_loan_amount of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501

        The minimum amount of credit that extend to a customer  # noqa: E501

        :return: The minimum_eligible_loan_amount of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :rtype: float
        """
        return self._minimum_eligible_loan_amount

    @minimum_eligible_loan_amount.setter
    def minimum_eligible_loan_amount(self, minimum_eligible_loan_amount):
        """Sets the minimum_eligible_loan_amount of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.

        The minimum amount of credit that extend to a customer  # noqa: E501

        :param minimum_eligible_loan_amount: The minimum_eligible_loan_amount of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :type: float
        """
        if minimum_eligible_loan_amount is None:
            raise ValueError("Invalid value for `minimum_eligible_loan_amount`, must not be `None`")  # noqa: E501

        self._minimum_eligible_loan_amount = minimum_eligible_loan_amount

    @property
    def offer_indicator(self):
        """Gets the offer_indicator of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501

        Indicator to determine if offer is rate or fee based. This is a reference data field. Please use /v1/apac/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description.  # noqa: E501

        :return: The offer_indicator of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._offer_indicator

    @offer_indicator.setter
    def offer_indicator(self, offer_indicator):
        """Sets the offer_indicator of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.

        Indicator to determine if offer is rate or fee based. This is a reference data field. Please use /v1/apac/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description.  # noqa: E501

        :param offer_indicator: The offer_indicator of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :type: str
        """
        if offer_indicator is None:
            raise ValueError("Invalid value for `offer_indicator`, must not be `None`")  # noqa: E501

        self._offer_indicator = offer_indicator

    @property
    def loan_booking_plan(self):
        """Gets the loan_booking_plan of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501


        :return: The loan_booking_plan of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :rtype: list[LoanBookingPlan]
        """
        return self._loan_booking_plan

    @loan_booking_plan.setter
    def loan_booking_plan(self, loan_booking_plan):
        """Sets the loan_booking_plan of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.


        :param loan_booking_plan: The loan_booking_plan of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :type: list[LoanBookingPlan]
        """

        self._loan_booking_plan = loan_booking_plan

    @property
    def lop_category(self):
        """Gets the lop_category of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501

        Indicator to determine the type of LOP Offer. This is a reference data field. Please use /v1/utilities/referenceData/{lopCategory} resource to get valid value of this field with description.  # noqa: E501

        :return: The lop_category of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :rtype: str
        """
        return self._lop_category

    @lop_category.setter
    def lop_category(self, lop_category):
        """Sets the lop_category of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.

        Indicator to determine the type of LOP Offer. This is a reference data field. Please use /v1/utilities/referenceData/{lopCategory} resource to get valid value of this field with description.  # noqa: E501

        :param lop_category: The lop_category of this EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse.  # noqa: E501
        :type: str
        """

        self._lop_category = lop_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
