# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditCardAccountSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'str',
        'product_code': 'str',
        'account_nickname': 'str',
        'display_account_number': 'str',
        'account_id': 'str',
        'currency_code': 'str',
        'account_classification': 'str',
        'account_status': 'str',
        'outstanding_balance': 'float',
        'available_credit': 'float',
        'credit_limit': 'float',
        'minimum_due_amount': 'float',
        'payment_due_date': 'date',
        'alternate_currency': 'str',
        'alternate_currency_current_balance': 'float',
        'card_holder_type': 'str'
    }

    attribute_map = {
        'product_name': 'productName',
        'product_code': 'productCode',
        'account_nickname': 'accountNickname',
        'display_account_number': 'displayAccountNumber',
        'account_id': 'accountId',
        'currency_code': 'currencyCode',
        'account_classification': 'accountClassification',
        'account_status': 'accountStatus',
        'outstanding_balance': 'outstandingBalance',
        'available_credit': 'availableCredit',
        'credit_limit': 'creditLimit',
        'minimum_due_amount': 'minimumDueAmount',
        'payment_due_date': 'paymentDueDate',
        'alternate_currency': 'alternateCurrency',
        'alternate_currency_current_balance': 'alternateCurrencyCurrentBalance',
        'card_holder_type': 'cardHolderType'
    }

    def __init__(self, product_name=None, product_code=None, account_nickname=None, display_account_number=None, account_id=None, currency_code=None, account_classification=None, account_status=None, outstanding_balance=None, available_credit=None, credit_limit=None, minimum_due_amount=None, payment_due_date=None, alternate_currency=None, alternate_currency_current_balance=None, card_holder_type=None):  # noqa: E501
        """CreditCardAccountSummary - a model defined in Swagger"""  # noqa: E501
        self._product_name = None
        self._product_code = None
        self._account_nickname = None
        self._display_account_number = None
        self._account_id = None
        self._currency_code = None
        self._account_classification = None
        self._account_status = None
        self._outstanding_balance = None
        self._available_credit = None
        self._credit_limit = None
        self._minimum_due_amount = None
        self._payment_due_date = None
        self._alternate_currency = None
        self._alternate_currency_current_balance = None
        self._card_holder_type = None
        self.discriminator = None
        if product_name is not None:
            self.product_name = product_name
        if product_code is not None:
            self.product_code = product_code
        if account_nickname is not None:
            self.account_nickname = account_nickname
        if display_account_number is not None:
            self.display_account_number = display_account_number
        if account_id is not None:
            self.account_id = account_id
        if currency_code is not None:
            self.currency_code = currency_code
        if account_classification is not None:
            self.account_classification = account_classification
        if account_status is not None:
            self.account_status = account_status
        if outstanding_balance is not None:
            self.outstanding_balance = outstanding_balance
        if available_credit is not None:
            self.available_credit = available_credit
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if minimum_due_amount is not None:
            self.minimum_due_amount = minimum_due_amount
        if payment_due_date is not None:
            self.payment_due_date = payment_due_date
        if alternate_currency is not None:
            self.alternate_currency = alternate_currency
        if alternate_currency_current_balance is not None:
            self.alternate_currency_current_balance = alternate_currency_current_balance
        if card_holder_type is not None:
            self.card_holder_type = card_holder_type

    @property
    def product_name(self):
        """Gets the product_name of this CreditCardAccountSummary.  # noqa: E501

        The name of the product  # noqa: E501

        :return: The product_name of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this CreditCardAccountSummary.

        The name of the product  # noqa: E501

        :param product_name: The product_name of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_code(self):
        """Gets the product_code of this CreditCardAccountSummary.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this CreditCardAccountSummary.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def account_nickname(self):
        """Gets the account_nickname of this CreditCardAccountSummary.  # noqa: E501

        The nickname of the account assigned by the customer  # noqa: E501

        :return: The account_nickname of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_nickname

    @account_nickname.setter
    def account_nickname(self, account_nickname):
        """Sets the account_nickname of this CreditCardAccountSummary.

        The nickname of the account assigned by the customer  # noqa: E501

        :param account_nickname: The account_nickname of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._account_nickname = account_nickname

    @property
    def display_account_number(self):
        """Gets the display_account_number of this CreditCardAccountSummary.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this CreditCardAccountSummary.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._display_account_number = display_account_number

    @property
    def account_id(self):
        """Gets the account_id of this CreditCardAccountSummary.  # noqa: E501

        The customer account identifier in encrypted format.  # noqa: E501

        :return: The account_id of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreditCardAccountSummary.

        The customer account identifier in encrypted format.  # noqa: E501

        :param account_id: The account_id of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def currency_code(self):
        """Gets the currency_code of this CreditCardAccountSummary.  # noqa: E501

        The currency code in ISO 4217 format  # noqa: E501

        :return: The currency_code of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CreditCardAccountSummary.

        The currency code in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def account_classification(self):
        """Gets the account_classification of this CreditCardAccountSummary.  # noqa: E501

        Classification of account either as ASSET or LIABILITY. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClassification} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The account_classification of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_classification

    @account_classification.setter
    def account_classification(self, account_classification):
        """Sets the account_classification of this CreditCardAccountSummary.

        Classification of account either as ASSET or LIABILITY. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClassification} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param account_classification: The account_classification of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._account_classification = account_classification

    @property
    def account_status(self):
        """Gets the account_status of this CreditCardAccountSummary.  # noqa: E501

        Status of the account. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :return: The account_status of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this CreditCardAccountSummary.

        Status of the account. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.  # noqa: E501

        :param account_status: The account_status of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._account_status = account_status

    @property
    def outstanding_balance(self):
        """Gets the outstanding_balance of this CreditCardAccountSummary.  # noqa: E501

        The amount of money owed on the credit account. It is the outstanding balance in applicable level (either card, account or relationship levels)  # noqa: E501

        :return: The outstanding_balance of this CreditCardAccountSummary.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_balance

    @outstanding_balance.setter
    def outstanding_balance(self, outstanding_balance):
        """Sets the outstanding_balance of this CreditCardAccountSummary.

        The amount of money owed on the credit account. It is the outstanding balance in applicable level (either card, account or relationship levels)  # noqa: E501

        :param outstanding_balance: The outstanding_balance of this CreditCardAccountSummary.  # noqa: E501
        :type: float
        """

        self._outstanding_balance = outstanding_balance

    @property
    def available_credit(self):
        """Gets the available_credit of this CreditCardAccountSummary.  # noqa: E501

        Available Credit limit on the credit card  # noqa: E501

        :return: The available_credit of this CreditCardAccountSummary.  # noqa: E501
        :rtype: float
        """
        return self._available_credit

    @available_credit.setter
    def available_credit(self, available_credit):
        """Sets the available_credit of this CreditCardAccountSummary.

        Available Credit limit on the credit card  # noqa: E501

        :param available_credit: The available_credit of this CreditCardAccountSummary.  # noqa: E501
        :type: float
        """

        self._available_credit = available_credit

    @property
    def credit_limit(self):
        """Gets the credit_limit of this CreditCardAccountSummary.  # noqa: E501

        The maximum amount of credit that extend to a customer  # noqa: E501

        :return: The credit_limit of this CreditCardAccountSummary.  # noqa: E501
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this CreditCardAccountSummary.

        The maximum amount of credit that extend to a customer  # noqa: E501

        :param credit_limit: The credit_limit of this CreditCardAccountSummary.  # noqa: E501
        :type: float
        """

        self._credit_limit = credit_limit

    @property
    def minimum_due_amount(self):
        """Gets the minimum_due_amount of this CreditCardAccountSummary.  # noqa: E501

        Minimum due amount for a payment cycle  # noqa: E501

        :return: The minimum_due_amount of this CreditCardAccountSummary.  # noqa: E501
        :rtype: float
        """
        return self._minimum_due_amount

    @minimum_due_amount.setter
    def minimum_due_amount(self, minimum_due_amount):
        """Sets the minimum_due_amount of this CreditCardAccountSummary.

        Minimum due amount for a payment cycle  # noqa: E501

        :param minimum_due_amount: The minimum_due_amount of this CreditCardAccountSummary.  # noqa: E501
        :type: float
        """

        self._minimum_due_amount = minimum_due_amount

    @property
    def payment_due_date(self):
        """Gets the payment_due_date of this CreditCardAccountSummary.  # noqa: E501

        The payment due date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The payment_due_date of this CreditCardAccountSummary.  # noqa: E501
        :rtype: date
        """
        return self._payment_due_date

    @payment_due_date.setter
    def payment_due_date(self, payment_due_date):
        """Sets the payment_due_date of this CreditCardAccountSummary.

        The payment due date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param payment_due_date: The payment_due_date of this CreditCardAccountSummary.  # noqa: E501
        :type: date
        """

        self._payment_due_date = payment_due_date

    @property
    def alternate_currency(self):
        """Gets the alternate_currency of this CreditCardAccountSummary.  # noqa: E501

        The alternate currency  # noqa: E501

        :return: The alternate_currency of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._alternate_currency

    @alternate_currency.setter
    def alternate_currency(self, alternate_currency):
        """Sets the alternate_currency of this CreditCardAccountSummary.

        The alternate currency  # noqa: E501

        :param alternate_currency: The alternate_currency of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._alternate_currency = alternate_currency

    @property
    def alternate_currency_current_balance(self):
        """Gets the alternate_currency_current_balance of this CreditCardAccountSummary.  # noqa: E501

        The current balance in alternate currency  # noqa: E501

        :return: The alternate_currency_current_balance of this CreditCardAccountSummary.  # noqa: E501
        :rtype: float
        """
        return self._alternate_currency_current_balance

    @alternate_currency_current_balance.setter
    def alternate_currency_current_balance(self, alternate_currency_current_balance):
        """Sets the alternate_currency_current_balance of this CreditCardAccountSummary.

        The current balance in alternate currency  # noqa: E501

        :param alternate_currency_current_balance: The alternate_currency_current_balance of this CreditCardAccountSummary.  # noqa: E501
        :type: float
        """

        self._alternate_currency_current_balance = alternate_currency_current_balance

    @property
    def card_holder_type(self):
        """Gets the card_holder_type of this CreditCardAccountSummary.  # noqa: E501

        Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description.  # noqa: E501

        :return: The card_holder_type of this CreditCardAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_type

    @card_holder_type.setter
    def card_holder_type(self, card_holder_type):
        """Sets the card_holder_type of this CreditCardAccountSummary.

        Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description.  # noqa: E501

        :param card_holder_type: The card_holder_type of this CreditCardAccountSummary.  # noqa: E501
        :type: str
        """

        self._card_holder_type = card_holder_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardAccountSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardAccountSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
