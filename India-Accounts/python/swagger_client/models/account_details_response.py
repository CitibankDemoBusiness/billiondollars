# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_card_account': 'CreditCardAccount',
        'ready_credit_account': 'ReadyCreditAccount',
        'checking_account': 'CheckingAccount',
        'savings_account': 'SavingsAccount',
        'time_deposit_account': 'TimeDepositAccount',
        'loan_account': 'LoanAccount',
        'mutual_fund_account': 'MutualFundAccount',
        'securities_brokerage_account': 'SecuritiesBrokerageAccount',
        'call_deposit_account': 'CallDepositAccount',
        'premium_deposit_account': 'PremiumDepositAccount'
    }

    attribute_map = {
        'credit_card_account': 'creditCardAccount',
        'ready_credit_account': 'readyCreditAccount',
        'checking_account': 'checkingAccount',
        'savings_account': 'savingsAccount',
        'time_deposit_account': 'timeDepositAccount',
        'loan_account': 'loanAccount',
        'mutual_fund_account': 'mutualFundAccount',
        'securities_brokerage_account': 'securitiesBrokerageAccount',
        'call_deposit_account': 'callDepositAccount',
        'premium_deposit_account': 'premiumDepositAccount'
    }

    def __init__(self, credit_card_account=None, ready_credit_account=None, checking_account=None, savings_account=None, time_deposit_account=None, loan_account=None, mutual_fund_account=None, securities_brokerage_account=None, call_deposit_account=None, premium_deposit_account=None):  # noqa: E501
        """AccountDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._credit_card_account = None
        self._ready_credit_account = None
        self._checking_account = None
        self._savings_account = None
        self._time_deposit_account = None
        self._loan_account = None
        self._mutual_fund_account = None
        self._securities_brokerage_account = None
        self._call_deposit_account = None
        self._premium_deposit_account = None
        self.discriminator = None
        if credit_card_account is not None:
            self.credit_card_account = credit_card_account
        if ready_credit_account is not None:
            self.ready_credit_account = ready_credit_account
        if checking_account is not None:
            self.checking_account = checking_account
        if savings_account is not None:
            self.savings_account = savings_account
        if time_deposit_account is not None:
            self.time_deposit_account = time_deposit_account
        if loan_account is not None:
            self.loan_account = loan_account
        if mutual_fund_account is not None:
            self.mutual_fund_account = mutual_fund_account
        if securities_brokerage_account is not None:
            self.securities_brokerage_account = securities_brokerage_account
        if call_deposit_account is not None:
            self.call_deposit_account = call_deposit_account
        if premium_deposit_account is not None:
            self.premium_deposit_account = premium_deposit_account

    @property
    def credit_card_account(self):
        """Gets the credit_card_account of this AccountDetailsResponse.  # noqa: E501


        :return: The credit_card_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: CreditCardAccount
        """
        return self._credit_card_account

    @credit_card_account.setter
    def credit_card_account(self, credit_card_account):
        """Sets the credit_card_account of this AccountDetailsResponse.


        :param credit_card_account: The credit_card_account of this AccountDetailsResponse.  # noqa: E501
        :type: CreditCardAccount
        """

        self._credit_card_account = credit_card_account

    @property
    def ready_credit_account(self):
        """Gets the ready_credit_account of this AccountDetailsResponse.  # noqa: E501


        :return: The ready_credit_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: ReadyCreditAccount
        """
        return self._ready_credit_account

    @ready_credit_account.setter
    def ready_credit_account(self, ready_credit_account):
        """Sets the ready_credit_account of this AccountDetailsResponse.


        :param ready_credit_account: The ready_credit_account of this AccountDetailsResponse.  # noqa: E501
        :type: ReadyCreditAccount
        """

        self._ready_credit_account = ready_credit_account

    @property
    def checking_account(self):
        """Gets the checking_account of this AccountDetailsResponse.  # noqa: E501


        :return: The checking_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: CheckingAccount
        """
        return self._checking_account

    @checking_account.setter
    def checking_account(self, checking_account):
        """Sets the checking_account of this AccountDetailsResponse.


        :param checking_account: The checking_account of this AccountDetailsResponse.  # noqa: E501
        :type: CheckingAccount
        """

        self._checking_account = checking_account

    @property
    def savings_account(self):
        """Gets the savings_account of this AccountDetailsResponse.  # noqa: E501


        :return: The savings_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: SavingsAccount
        """
        return self._savings_account

    @savings_account.setter
    def savings_account(self, savings_account):
        """Sets the savings_account of this AccountDetailsResponse.


        :param savings_account: The savings_account of this AccountDetailsResponse.  # noqa: E501
        :type: SavingsAccount
        """

        self._savings_account = savings_account

    @property
    def time_deposit_account(self):
        """Gets the time_deposit_account of this AccountDetailsResponse.  # noqa: E501


        :return: The time_deposit_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: TimeDepositAccount
        """
        return self._time_deposit_account

    @time_deposit_account.setter
    def time_deposit_account(self, time_deposit_account):
        """Sets the time_deposit_account of this AccountDetailsResponse.


        :param time_deposit_account: The time_deposit_account of this AccountDetailsResponse.  # noqa: E501
        :type: TimeDepositAccount
        """

        self._time_deposit_account = time_deposit_account

    @property
    def loan_account(self):
        """Gets the loan_account of this AccountDetailsResponse.  # noqa: E501


        :return: The loan_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: LoanAccount
        """
        return self._loan_account

    @loan_account.setter
    def loan_account(self, loan_account):
        """Sets the loan_account of this AccountDetailsResponse.


        :param loan_account: The loan_account of this AccountDetailsResponse.  # noqa: E501
        :type: LoanAccount
        """

        self._loan_account = loan_account

    @property
    def mutual_fund_account(self):
        """Gets the mutual_fund_account of this AccountDetailsResponse.  # noqa: E501


        :return: The mutual_fund_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: MutualFundAccount
        """
        return self._mutual_fund_account

    @mutual_fund_account.setter
    def mutual_fund_account(self, mutual_fund_account):
        """Sets the mutual_fund_account of this AccountDetailsResponse.


        :param mutual_fund_account: The mutual_fund_account of this AccountDetailsResponse.  # noqa: E501
        :type: MutualFundAccount
        """

        self._mutual_fund_account = mutual_fund_account

    @property
    def securities_brokerage_account(self):
        """Gets the securities_brokerage_account of this AccountDetailsResponse.  # noqa: E501


        :return: The securities_brokerage_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: SecuritiesBrokerageAccount
        """
        return self._securities_brokerage_account

    @securities_brokerage_account.setter
    def securities_brokerage_account(self, securities_brokerage_account):
        """Sets the securities_brokerage_account of this AccountDetailsResponse.


        :param securities_brokerage_account: The securities_brokerage_account of this AccountDetailsResponse.  # noqa: E501
        :type: SecuritiesBrokerageAccount
        """

        self._securities_brokerage_account = securities_brokerage_account

    @property
    def call_deposit_account(self):
        """Gets the call_deposit_account of this AccountDetailsResponse.  # noqa: E501


        :return: The call_deposit_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: CallDepositAccount
        """
        return self._call_deposit_account

    @call_deposit_account.setter
    def call_deposit_account(self, call_deposit_account):
        """Sets the call_deposit_account of this AccountDetailsResponse.


        :param call_deposit_account: The call_deposit_account of this AccountDetailsResponse.  # noqa: E501
        :type: CallDepositAccount
        """

        self._call_deposit_account = call_deposit_account

    @property
    def premium_deposit_account(self):
        """Gets the premium_deposit_account of this AccountDetailsResponse.  # noqa: E501


        :return: The premium_deposit_account of this AccountDetailsResponse.  # noqa: E501
        :rtype: PremiumDepositAccount
        """
        return self._premium_deposit_account

    @premium_deposit_account.setter
    def premium_deposit_account(self, premium_deposit_account):
        """Sets the premium_deposit_account of this AccountDetailsResponse.


        :param premium_deposit_account: The premium_deposit_account of this AccountDetailsResponse.  # noqa: E501
        :type: PremiumDepositAccount
        """

        self._premium_deposit_account = premium_deposit_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
