# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayeeAccountDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payee_nick_name': 'str',
        'payee_name': 'str',
        'display_payee_account_number': 'str',
        'iban': 'str',
        'payee_id': 'str',
        'payee_bank_name': 'str',
        'payment_type': 'str',
        'bank_code': 'str'
    }

    attribute_map = {
        'payee_nick_name': 'payeeNickName',
        'payee_name': 'payeeName',
        'display_payee_account_number': 'displayPayeeAccountNumber',
        'iban': 'iban',
        'payee_id': 'payeeId',
        'payee_bank_name': 'payeeBankName',
        'payment_type': 'paymentType',
        'bank_code': 'bankCode'
    }

    def __init__(self, payee_nick_name=None, payee_name=None, display_payee_account_number=None, iban=None, payee_id=None, payee_bank_name=None, payment_type=None, bank_code=None):  # noqa: E501
        """PayeeAccountDetails - a model defined in Swagger"""  # noqa: E501
        self._payee_nick_name = None
        self._payee_name = None
        self._display_payee_account_number = None
        self._iban = None
        self._payee_id = None
        self._payee_bank_name = None
        self._payment_type = None
        self._bank_code = None
        self.discriminator = None
        if payee_nick_name is not None:
            self.payee_nick_name = payee_nick_name
        if payee_name is not None:
            self.payee_name = payee_name
        if display_payee_account_number is not None:
            self.display_payee_account_number = display_payee_account_number
        if iban is not None:
            self.iban = iban
        if payee_id is not None:
            self.payee_id = payee_id
        if payee_bank_name is not None:
            self.payee_bank_name = payee_bank_name
        if payment_type is not None:
            self.payment_type = payment_type
        if bank_code is not None:
            self.bank_code = bank_code

    @property
    def payee_nick_name(self):
        """Gets the payee_nick_name of this PayeeAccountDetails.  # noqa: E501

        The nick name of the payee assigned by the customer.  # noqa: E501

        :return: The payee_nick_name of this PayeeAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._payee_nick_name

    @payee_nick_name.setter
    def payee_nick_name(self, payee_nick_name):
        """Sets the payee_nick_name of this PayeeAccountDetails.

        The nick name of the payee assigned by the customer.  # noqa: E501

        :param payee_nick_name: The payee_nick_name of this PayeeAccountDetails.  # noqa: E501
        :type: str
        """

        self._payee_nick_name = payee_nick_name

    @property
    def payee_name(self):
        """Gets the payee_name of this PayeeAccountDetails.  # noqa: E501

        Name of the payee.  # noqa: E501

        :return: The payee_name of this PayeeAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._payee_name

    @payee_name.setter
    def payee_name(self, payee_name):
        """Sets the payee_name of this PayeeAccountDetails.

        Name of the payee.  # noqa: E501

        :param payee_name: The payee_name of this PayeeAccountDetails.  # noqa: E501
        :type: str
        """

        self._payee_name = payee_name

    @property
    def display_payee_account_number(self):
        """Gets the display_payee_account_number of this PayeeAccountDetails.  # noqa: E501

        The display account number of the destination account  # noqa: E501

        :return: The display_payee_account_number of this PayeeAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._display_payee_account_number

    @display_payee_account_number.setter
    def display_payee_account_number(self, display_payee_account_number):
        """Sets the display_payee_account_number of this PayeeAccountDetails.

        The display account number of the destination account  # noqa: E501

        :param display_payee_account_number: The display_payee_account_number of this PayeeAccountDetails.  # noqa: E501
        :type: str
        """

        self._display_payee_account_number = display_payee_account_number

    @property
    def iban(self):
        """Gets the iban of this PayeeAccountDetails.  # noqa: E501

        IBAN stands for International Bank Account Number and is a number attached to all accounts in the EU countries plus Norway, Switzerland, Liechtenstein and Hungary. The IBAN is made up of a code that identifies the country the account belongs to, the account holders bank and the account number itself  # noqa: E501

        :return: The iban of this PayeeAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this PayeeAccountDetails.

        IBAN stands for International Bank Account Number and is a number attached to all accounts in the EU countries plus Norway, Switzerland, Liechtenstein and Hungary. The IBAN is made up of a code that identifies the country the account belongs to, the account holders bank and the account number itself  # noqa: E501

        :param iban: The iban of this PayeeAccountDetails.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def payee_id(self):
        """Gets the payee_id of this PayeeAccountDetails.  # noqa: E501

        Unique identifier associated with the payee.Typically, this is not displayed to the customer.  # noqa: E501

        :return: The payee_id of this PayeeAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this PayeeAccountDetails.

        Unique identifier associated with the payee.Typically, this is not displayed to the customer.  # noqa: E501

        :param payee_id: The payee_id of this PayeeAccountDetails.  # noqa: E501
        :type: str
        """

        self._payee_id = payee_id

    @property
    def payee_bank_name(self):
        """Gets the payee_bank_name of this PayeeAccountDetails.  # noqa: E501

        Name of the bank.  # noqa: E501

        :return: The payee_bank_name of this PayeeAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._payee_bank_name

    @payee_bank_name.setter
    def payee_bank_name(self, payee_bank_name):
        """Sets the payee_bank_name of this PayeeAccountDetails.

        Name of the bank.  # noqa: E501

        :param payee_bank_name: The payee_bank_name of this PayeeAccountDetails.  # noqa: E501
        :type: str
        """

        self._payee_bank_name = payee_bank_name

    @property
    def payment_type(self):
        """Gets the payment_type of this PayeeAccountDetails.  # noqa: E501

        The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.  # noqa: E501

        :return: The payment_type of this PayeeAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PayeeAccountDetails.

        The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.  # noqa: E501

        :param payment_type: The payment_type of this PayeeAccountDetails.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def bank_code(self):
        """Gets the bank_code of this PayeeAccountDetails.  # noqa: E501

        Bank Code of the Payee  # noqa: E501

        :return: The bank_code of this PayeeAccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this PayeeAccountDetails.

        Bank Code of the Payee  # noqa: E501

        :param bank_code: The bank_code of this PayeeAccountDetails.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayeeAccountDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayeeAccountDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
