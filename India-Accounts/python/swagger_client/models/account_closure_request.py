# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountClosureRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_closure_reason_code': 'str',
        'consent_given_flag': 'bool'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_closure_reason_code': 'accountClosureReasonCode',
        'consent_given_flag': 'consentGivenFlag'
    }

    def __init__(self, account_id=None, account_closure_reason_code=None, consent_given_flag=None):  # noqa: E501
        """AccountClosureRequest - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_closure_reason_code = None
        self._consent_given_flag = None
        self.discriminator = None
        self.account_id = account_id
        if account_closure_reason_code is not None:
            self.account_closure_reason_code = account_closure_reason_code
        self.consent_given_flag = consent_given_flag

    @property
    def account_id(self):
        """Gets the account_id of this AccountClosureRequest.  # noqa: E501

        The account identifier in encrypted format.Typically, this is not displayed to the customer  # noqa: E501

        :return: The account_id of this AccountClosureRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountClosureRequest.

        The account identifier in encrypted format.Typically, this is not displayed to the customer  # noqa: E501

        :param account_id: The account_id of this AccountClosureRequest.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def account_closure_reason_code(self):
        """Gets the account_closure_reason_code of this AccountClosureRequest.  # noqa: E501

        Account closure reason code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClosureReasonCode} resource to get valid value of this field with description.  # noqa: E501

        :return: The account_closure_reason_code of this AccountClosureRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_closure_reason_code

    @account_closure_reason_code.setter
    def account_closure_reason_code(self, account_closure_reason_code):
        """Sets the account_closure_reason_code of this AccountClosureRequest.

        Account closure reason code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClosureReasonCode} resource to get valid value of this field with description.  # noqa: E501

        :param account_closure_reason_code: The account_closure_reason_code of this AccountClosureRequest.  # noqa: E501
        :type: str
        """

        self._account_closure_reason_code = account_closure_reason_code

    @property
    def consent_given_flag(self):
        """Gets the consent_given_flag of this AccountClosureRequest.  # noqa: E501

        This is consent flag from the customer to pay back if any outstanding on that account while closure  # noqa: E501

        :return: The consent_given_flag of this AccountClosureRequest.  # noqa: E501
        :rtype: bool
        """
        return self._consent_given_flag

    @consent_given_flag.setter
    def consent_given_flag(self, consent_given_flag):
        """Sets the consent_given_flag of this AccountClosureRequest.

        This is consent flag from the customer to pay back if any outstanding on that account while closure  # noqa: E501

        :param consent_given_flag: The consent_given_flag of this AccountClosureRequest.  # noqa: E501
        :type: bool
        """
        if consent_given_flag is None:
            raise ValueError("Invalid value for `consent_given_flag`, must not be `None`")  # noqa: E501

        self._consent_given_flag = consent_given_flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountClosureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountClosureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
