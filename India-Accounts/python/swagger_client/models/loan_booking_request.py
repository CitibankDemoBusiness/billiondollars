# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoanBookingRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payee_id': 'str',
        'loan_amount': 'float',
        'disbursement_option': 'str',
        'disbursement_account_id': 'str',
        'tenor': 'float',
        'bank_details': 'BankDetails',
        'loan_purpose': 'str',
        'remarks': 'str',
        'tax_id': 'str',
        'payment_reference_id': 'str'
    }

    attribute_map = {
        'payee_id': 'payeeId',
        'loan_amount': 'loanAmount',
        'disbursement_option': 'disbursementOption',
        'disbursement_account_id': 'disbursementAccountId',
        'tenor': 'tenor',
        'bank_details': 'bankDetails',
        'loan_purpose': 'loanPurpose',
        'remarks': 'remarks',
        'tax_id': 'taxId',
        'payment_reference_id': 'paymentReferenceId'
    }

    def __init__(self, payee_id=None, loan_amount=None, disbursement_option=None, disbursement_account_id=None, tenor=None, bank_details=None, loan_purpose=None, remarks=None, tax_id=None, payment_reference_id=None):  # noqa: E501
        """LoanBookingRequest - a model defined in Swagger"""  # noqa: E501
        self._payee_id = None
        self._loan_amount = None
        self._disbursement_option = None
        self._disbursement_account_id = None
        self._tenor = None
        self._bank_details = None
        self._loan_purpose = None
        self._remarks = None
        self._tax_id = None
        self._payment_reference_id = None
        self.discriminator = None
        if payee_id is not None:
            self.payee_id = payee_id
        self.loan_amount = loan_amount
        self.disbursement_option = disbursement_option
        if disbursement_account_id is not None:
            self.disbursement_account_id = disbursement_account_id
        self.tenor = tenor
        if bank_details is not None:
            self.bank_details = bank_details
        if loan_purpose is not None:
            self.loan_purpose = loan_purpose
        if remarks is not None:
            self.remarks = remarks
        if tax_id is not None:
            self.tax_id = tax_id
        if payment_reference_id is not None:
            self.payment_reference_id = payment_reference_id

    @property
    def payee_id(self):
        """Gets the payee_id of this LoanBookingRequest.  # noqa: E501

        Unique identifier associated with the payee.Typically, this is not displayed to the customer.  # noqa: E501

        :return: The payee_id of this LoanBookingRequest.  # noqa: E501
        :rtype: str
        """
        return self._payee_id

    @payee_id.setter
    def payee_id(self, payee_id):
        """Sets the payee_id of this LoanBookingRequest.

        Unique identifier associated with the payee.Typically, this is not displayed to the customer.  # noqa: E501

        :param payee_id: The payee_id of this LoanBookingRequest.  # noqa: E501
        :type: str
        """

        self._payee_id = payee_id

    @property
    def loan_amount(self):
        """Gets the loan_amount of this LoanBookingRequest.  # noqa: E501

        This field is to indicate the loan amount for booking.  # noqa: E501

        :return: The loan_amount of this LoanBookingRequest.  # noqa: E501
        :rtype: float
        """
        return self._loan_amount

    @loan_amount.setter
    def loan_amount(self, loan_amount):
        """Sets the loan_amount of this LoanBookingRequest.

        This field is to indicate the loan amount for booking.  # noqa: E501

        :param loan_amount: The loan_amount of this LoanBookingRequest.  # noqa: E501
        :type: float
        """
        if loan_amount is None:
            raise ValueError("Invalid value for `loan_amount`, must not be `None`")  # noqa: E501

        self._loan_amount = loan_amount

    @property
    def disbursement_option(self):
        """Gets the disbursement_option of this LoanBookingRequest.  # noqa: E501

        This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.  # noqa: E501

        :return: The disbursement_option of this LoanBookingRequest.  # noqa: E501
        :rtype: str
        """
        return self._disbursement_option

    @disbursement_option.setter
    def disbursement_option(self, disbursement_option):
        """Sets the disbursement_option of this LoanBookingRequest.

        This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.  # noqa: E501

        :param disbursement_option: The disbursement_option of this LoanBookingRequest.  # noqa: E501
        :type: str
        """
        if disbursement_option is None:
            raise ValueError("Invalid value for `disbursement_option`, must not be `None`")  # noqa: E501

        self._disbursement_option = disbursement_option

    @property
    def disbursement_account_id(self):
        """Gets the disbursement_account_id of this LoanBookingRequest.  # noqa: E501

        The disbursement account identifier in encrypted format. Applicable only for HK.  # noqa: E501

        :return: The disbursement_account_id of this LoanBookingRequest.  # noqa: E501
        :rtype: str
        """
        return self._disbursement_account_id

    @disbursement_account_id.setter
    def disbursement_account_id(self, disbursement_account_id):
        """Sets the disbursement_account_id of this LoanBookingRequest.

        The disbursement account identifier in encrypted format. Applicable only for HK.  # noqa: E501

        :param disbursement_account_id: The disbursement_account_id of this LoanBookingRequest.  # noqa: E501
        :type: str
        """

        self._disbursement_account_id = disbursement_account_id

    @property
    def tenor(self):
        """Gets the tenor of this LoanBookingRequest.  # noqa: E501

        Tenure of loan in months.  # noqa: E501

        :return: The tenor of this LoanBookingRequest.  # noqa: E501
        :rtype: float
        """
        return self._tenor

    @tenor.setter
    def tenor(self, tenor):
        """Sets the tenor of this LoanBookingRequest.

        Tenure of loan in months.  # noqa: E501

        :param tenor: The tenor of this LoanBookingRequest.  # noqa: E501
        :type: float
        """
        if tenor is None:
            raise ValueError("Invalid value for `tenor`, must not be `None`")  # noqa: E501

        self._tenor = tenor

    @property
    def bank_details(self):
        """Gets the bank_details of this LoanBookingRequest.  # noqa: E501


        :return: The bank_details of this LoanBookingRequest.  # noqa: E501
        :rtype: BankDetails
        """
        return self._bank_details

    @bank_details.setter
    def bank_details(self, bank_details):
        """Sets the bank_details of this LoanBookingRequest.


        :param bank_details: The bank_details of this LoanBookingRequest.  # noqa: E501
        :type: BankDetails
        """

        self._bank_details = bank_details

    @property
    def loan_purpose(self):
        """Gets the loan_purpose of this LoanBookingRequest.  # noqa: E501

        This field is to indicate the purpose of loan. This is a reference data field.This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.  # noqa: E501

        :return: The loan_purpose of this LoanBookingRequest.  # noqa: E501
        :rtype: str
        """
        return self._loan_purpose

    @loan_purpose.setter
    def loan_purpose(self, loan_purpose):
        """Sets the loan_purpose of this LoanBookingRequest.

        This field is to indicate the purpose of loan. This is a reference data field.This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.  # noqa: E501

        :param loan_purpose: The loan_purpose of this LoanBookingRequest.  # noqa: E501
        :type: str
        """

        self._loan_purpose = loan_purpose

    @property
    def remarks(self):
        """Gets the remarks of this LoanBookingRequest.  # noqa: E501

        Payment notes. Free text from screen  # noqa: E501

        :return: The remarks of this LoanBookingRequest.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this LoanBookingRequest.

        Payment notes. Free text from screen  # noqa: E501

        :param remarks: The remarks of this LoanBookingRequest.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def tax_id(self):
        """Gets the tax_id of this LoanBookingRequest.  # noqa: E501

        Unique Tax ID of the Customer,INN Taxpayer's identification code applicable for Russia  # noqa: E501

        :return: The tax_id of this LoanBookingRequest.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this LoanBookingRequest.

        Unique Tax ID of the Customer,INN Taxpayer's identification code applicable for Russia  # noqa: E501

        :param tax_id: The tax_id of this LoanBookingRequest.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    @property
    def payment_reference_id(self):
        """Gets the payment_reference_id of this LoanBookingRequest.  # noqa: E501

        Reference number to uniquely identify the payment, applicable for Russia  # noqa: E501

        :return: The payment_reference_id of this LoanBookingRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_reference_id

    @payment_reference_id.setter
    def payment_reference_id(self, payment_reference_id):
        """Sets the payment_reference_id of this LoanBookingRequest.

        Reference number to uniquely identify the payment, applicable for Russia  # noqa: E501

        :param payment_reference_id: The payment_reference_id of this LoanBookingRequest.  # noqa: E501
        :type: str
        """

        self._payment_reference_id = payment_reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanBookingRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanBookingRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
