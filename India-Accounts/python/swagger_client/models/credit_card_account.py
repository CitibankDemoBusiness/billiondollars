# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditCardAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'str',
        'product_code': 'str',
        'display_account_number': 'str',
        'currency_code': 'str',
        'outstanding_balance': 'float',
        'last_statement_balance': 'float',
        'last_statement_date': 'date',
        'credit_used': 'float',
        'credit_limit': 'float',
        'available_credit': 'float',
        'cash_advance_limit': 'float',
        'cash_advance_available_amount': 'float',
        'last_payment_amount': 'float',
        'last_payment_date': 'date',
        'minimum_due_amount': 'float',
        'payment_due_date': 'date',
        'available_point_balance': 'float'
    }

    attribute_map = {
        'product_name': 'productName',
        'product_code': 'productCode',
        'display_account_number': 'displayAccountNumber',
        'currency_code': 'currencyCode',
        'outstanding_balance': 'outstandingBalance',
        'last_statement_balance': 'lastStatementBalance',
        'last_statement_date': 'lastStatementDate',
        'credit_used': 'creditUsed',
        'credit_limit': 'creditLimit',
        'available_credit': 'availableCredit',
        'cash_advance_limit': 'cashAdvanceLimit',
        'cash_advance_available_amount': 'cashAdvanceAvailableAmount',
        'last_payment_amount': 'lastPaymentAmount',
        'last_payment_date': 'lastPaymentDate',
        'minimum_due_amount': 'minimumDueAmount',
        'payment_due_date': 'paymentDueDate',
        'available_point_balance': 'availablePointBalance'
    }

    def __init__(self, product_name=None, product_code=None, display_account_number=None, currency_code=None, outstanding_balance=None, last_statement_balance=None, last_statement_date=None, credit_used=None, credit_limit=None, available_credit=None, cash_advance_limit=None, cash_advance_available_amount=None, last_payment_amount=None, last_payment_date=None, minimum_due_amount=None, payment_due_date=None, available_point_balance=None):  # noqa: E501
        """CreditCardAccount - a model defined in Swagger"""  # noqa: E501
        self._product_name = None
        self._product_code = None
        self._display_account_number = None
        self._currency_code = None
        self._outstanding_balance = None
        self._last_statement_balance = None
        self._last_statement_date = None
        self._credit_used = None
        self._credit_limit = None
        self._available_credit = None
        self._cash_advance_limit = None
        self._cash_advance_available_amount = None
        self._last_payment_amount = None
        self._last_payment_date = None
        self._minimum_due_amount = None
        self._payment_due_date = None
        self._available_point_balance = None
        self.discriminator = None
        if product_name is not None:
            self.product_name = product_name
        if product_code is not None:
            self.product_code = product_code
        self.display_account_number = display_account_number
        if currency_code is not None:
            self.currency_code = currency_code
        if outstanding_balance is not None:
            self.outstanding_balance = outstanding_balance
        if last_statement_balance is not None:
            self.last_statement_balance = last_statement_balance
        if last_statement_date is not None:
            self.last_statement_date = last_statement_date
        if credit_used is not None:
            self.credit_used = credit_used
        if credit_limit is not None:
            self.credit_limit = credit_limit
        if available_credit is not None:
            self.available_credit = available_credit
        if cash_advance_limit is not None:
            self.cash_advance_limit = cash_advance_limit
        if cash_advance_available_amount is not None:
            self.cash_advance_available_amount = cash_advance_available_amount
        if last_payment_amount is not None:
            self.last_payment_amount = last_payment_amount
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if minimum_due_amount is not None:
            self.minimum_due_amount = minimum_due_amount
        if payment_due_date is not None:
            self.payment_due_date = payment_due_date
        if available_point_balance is not None:
            self.available_point_balance = available_point_balance

    @property
    def product_name(self):
        """Gets the product_name of this CreditCardAccount.  # noqa: E501

        The name of the product  # noqa: E501

        :return: The product_name of this CreditCardAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this CreditCardAccount.

        The name of the product  # noqa: E501

        :param product_name: The product_name of this CreditCardAccount.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_code(self):
        """Gets the product_code of this CreditCardAccount.  # noqa: E501

        A unique code that identifies the product  # noqa: E501

        :return: The product_code of this CreditCardAccount.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this CreditCardAccount.

        A unique code that identifies the product  # noqa: E501

        :param product_code: The product_code of this CreditCardAccount.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def display_account_number(self):
        """Gets the display_account_number of this CreditCardAccount.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_account_number of this CreditCardAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_account_number

    @display_account_number.setter
    def display_account_number(self, display_account_number):
        """Sets the display_account_number of this CreditCardAccount.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_account_number: The display_account_number of this CreditCardAccount.  # noqa: E501
        :type: str
        """
        if display_account_number is None:
            raise ValueError("Invalid value for `display_account_number`, must not be `None`")  # noqa: E501

        self._display_account_number = display_account_number

    @property
    def currency_code(self):
        """Gets the currency_code of this CreditCardAccount.  # noqa: E501

        The currency code of the account in ISO 4217 format  # noqa: E501

        :return: The currency_code of this CreditCardAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CreditCardAccount.

        The currency code of the account in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this CreditCardAccount.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def outstanding_balance(self):
        """Gets the outstanding_balance of this CreditCardAccount.  # noqa: E501

        The amount of money owed.  # noqa: E501

        :return: The outstanding_balance of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._outstanding_balance

    @outstanding_balance.setter
    def outstanding_balance(self, outstanding_balance):
        """Sets the outstanding_balance of this CreditCardAccount.

        The amount of money owed.  # noqa: E501

        :param outstanding_balance: The outstanding_balance of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._outstanding_balance = outstanding_balance

    @property
    def last_statement_balance(self):
        """Gets the last_statement_balance of this CreditCardAccount.  # noqa: E501

        The balance on last statement date  # noqa: E501

        :return: The last_statement_balance of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._last_statement_balance

    @last_statement_balance.setter
    def last_statement_balance(self, last_statement_balance):
        """Sets the last_statement_balance of this CreditCardAccount.

        The balance on last statement date  # noqa: E501

        :param last_statement_balance: The last_statement_balance of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._last_statement_balance = last_statement_balance

    @property
    def last_statement_date(self):
        """Gets the last_statement_date of this CreditCardAccount.  # noqa: E501

        The date of the last statement in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The last_statement_date of this CreditCardAccount.  # noqa: E501
        :rtype: date
        """
        return self._last_statement_date

    @last_statement_date.setter
    def last_statement_date(self, last_statement_date):
        """Sets the last_statement_date of this CreditCardAccount.

        The date of the last statement in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param last_statement_date: The last_statement_date of this CreditCardAccount.  # noqa: E501
        :type: date
        """

        self._last_statement_date = last_statement_date

    @property
    def credit_used(self):
        """Gets the credit_used of this CreditCardAccount.  # noqa: E501

        The part of the credit limit already used  # noqa: E501

        :return: The credit_used of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._credit_used

    @credit_used.setter
    def credit_used(self, credit_used):
        """Sets the credit_used of this CreditCardAccount.

        The part of the credit limit already used  # noqa: E501

        :param credit_used: The credit_used of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._credit_used = credit_used

    @property
    def credit_limit(self):
        """Gets the credit_limit of this CreditCardAccount.  # noqa: E501

        The maximum amount of credit that extend to a customer  # noqa: E501

        :return: The credit_limit of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this CreditCardAccount.

        The maximum amount of credit that extend to a customer  # noqa: E501

        :param credit_limit: The credit_limit of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._credit_limit = credit_limit

    @property
    def available_credit(self):
        """Gets the available_credit of this CreditCardAccount.  # noqa: E501

        The available credit  # noqa: E501

        :return: The available_credit of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._available_credit

    @available_credit.setter
    def available_credit(self, available_credit):
        """Sets the available_credit of this CreditCardAccount.

        The available credit  # noqa: E501

        :param available_credit: The available_credit of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._available_credit = available_credit

    @property
    def cash_advance_limit(self):
        """Gets the cash_advance_limit of this CreditCardAccount.  # noqa: E501

        Some percentage of credit limit to withdraw cash  # noqa: E501

        :return: The cash_advance_limit of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._cash_advance_limit

    @cash_advance_limit.setter
    def cash_advance_limit(self, cash_advance_limit):
        """Sets the cash_advance_limit of this CreditCardAccount.

        Some percentage of credit limit to withdraw cash  # noqa: E501

        :param cash_advance_limit: The cash_advance_limit of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._cash_advance_limit = cash_advance_limit

    @property
    def cash_advance_available_amount(self):
        """Gets the cash_advance_available_amount of this CreditCardAccount.  # noqa: E501

        Cash advance amount available. This will be same as the cash limit if there is no cash advance done. Otherwise, this will be the amount from the cashLimit minus the cash advance amount already used  # noqa: E501

        :return: The cash_advance_available_amount of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._cash_advance_available_amount

    @cash_advance_available_amount.setter
    def cash_advance_available_amount(self, cash_advance_available_amount):
        """Sets the cash_advance_available_amount of this CreditCardAccount.

        Cash advance amount available. This will be same as the cash limit if there is no cash advance done. Otherwise, this will be the amount from the cashLimit minus the cash advance amount already used  # noqa: E501

        :param cash_advance_available_amount: The cash_advance_available_amount of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._cash_advance_available_amount = cash_advance_available_amount

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this CreditCardAccount.  # noqa: E501

        The amount of the last payment made  # noqa: E501

        :return: The last_payment_amount of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this CreditCardAccount.

        The amount of the last payment made  # noqa: E501

        :param last_payment_amount: The last_payment_amount of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this CreditCardAccount.  # noqa: E501

        The date of the last payment in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The last_payment_date of this CreditCardAccount.  # noqa: E501
        :rtype: date
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this CreditCardAccount.

        The date of the last payment in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param last_payment_date: The last_payment_date of this CreditCardAccount.  # noqa: E501
        :type: date
        """

        self._last_payment_date = last_payment_date

    @property
    def minimum_due_amount(self):
        """Gets the minimum_due_amount of this CreditCardAccount.  # noqa: E501

        Minimum due amount for a payment cycle  # noqa: E501

        :return: The minimum_due_amount of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._minimum_due_amount

    @minimum_due_amount.setter
    def minimum_due_amount(self, minimum_due_amount):
        """Sets the minimum_due_amount of this CreditCardAccount.

        Minimum due amount for a payment cycle  # noqa: E501

        :param minimum_due_amount: The minimum_due_amount of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._minimum_due_amount = minimum_due_amount

    @property
    def payment_due_date(self):
        """Gets the payment_due_date of this CreditCardAccount.  # noqa: E501

        The date of the next payment/payment due date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :return: The payment_due_date of this CreditCardAccount.  # noqa: E501
        :rtype: date
        """
        return self._payment_due_date

    @payment_due_date.setter
    def payment_due_date(self, payment_due_date):
        """Sets the payment_due_date of this CreditCardAccount.

        The date of the next payment/payment due date in ISO 8601 date format YYYY-MM-DD  # noqa: E501

        :param payment_due_date: The payment_due_date of this CreditCardAccount.  # noqa: E501
        :type: date
        """

        self._payment_due_date = payment_due_date

    @property
    def available_point_balance(self):
        """Gets the available_point_balance of this CreditCardAccount.  # noqa: E501

        Available reward points on the credit card  # noqa: E501

        :return: The available_point_balance of this CreditCardAccount.  # noqa: E501
        :rtype: float
        """
        return self._available_point_balance

    @available_point_balance.setter
    def available_point_balance(self, available_point_balance):
        """Sets the available_point_balance of this CreditCardAccount.

        Available reward points on the credit card  # noqa: E501

        :param available_point_balance: The available_point_balance of this CreditCardAccount.  # noqa: E501
        :type: float
        """

        self._available_point_balance = available_point_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
