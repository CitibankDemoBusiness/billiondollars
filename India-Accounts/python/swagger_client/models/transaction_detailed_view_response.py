# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionDetailedViewResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_source_account_number': 'str',
        'payment_type': 'str',
        'transaction_description': 'str',
        'transaction_amount': 'float',
        'transaction_currency_code': 'str',
        'transaction_date': 'date',
        'foreign_transaction_amount': 'float',
        'foreign_currency_code': 'str',
        'foreign_exchange_rate': 'float',
        'transaction_status': 'str',
        'transaction_posting_date': 'date',
        'customer_name': 'CustomerName',
        'customer_address': 'CustomerAddress',
        'beneficiary_bank_details': 'BeneficiaryBankDetails',
        'customer_merchant_reference_details': 'list[CustomerMerchantReferenceDetails]',
        'remarks': 'str',
        'payment_priority_code': 'str',
        'merchant_code': 'str',
        'merchant_name': 'str',
        'transaction_reversal_description': 'str',
        'original_transaction_details': 'OriginalTransactionDetails',
        'end_to_end_identification': 'str',
        'creditor_details': 'CreditorDetails',
        'debtor_details': 'DebtorDetails',
        'source_bank_name': 'str',
        'source_bank_code': 'str',
        'clearing_time_stamp': 'str',
        'settlement_time_stamp': 'str',
        'central_bank_transaction_reference_id': 'str',
        'original_creditor_details': 'OriginalCreditorDetails',
        'original_credit_account_details': 'OriginalCreditAccountDetails',
        'original_debtor_name': 'str',
        'original_debit_account_details': 'OriginalDebitAccountDetails',
        'transaction_debit_fee_amount': 'float',
        'bank_member_id': 'str',
        'beneficiary_legal_name': 'str',
        'beneficiary_address': 'list[BeneficiaryAddress]',
        'beneficiary_tax_id': 'str'
    }

    attribute_map = {
        'display_source_account_number': 'displaySourceAccountNumber',
        'payment_type': 'paymentType',
        'transaction_description': 'transactionDescription',
        'transaction_amount': 'transactionAmount',
        'transaction_currency_code': 'transactionCurrencyCode',
        'transaction_date': 'transactionDate',
        'foreign_transaction_amount': 'foreignTransactionAmount',
        'foreign_currency_code': 'foreignCurrencyCode',
        'foreign_exchange_rate': 'foreignExchangeRate',
        'transaction_status': 'transactionStatus',
        'transaction_posting_date': 'transactionPostingDate',
        'customer_name': 'customerName',
        'customer_address': 'customerAddress',
        'beneficiary_bank_details': 'beneficiaryBankDetails',
        'customer_merchant_reference_details': 'customerMerchantReferenceDetails',
        'remarks': 'remarks',
        'payment_priority_code': 'paymentPriorityCode',
        'merchant_code': 'merchantCode',
        'merchant_name': 'merchantName',
        'transaction_reversal_description': 'transactionReversalDescription',
        'original_transaction_details': 'originalTransactionDetails',
        'end_to_end_identification': 'endToEndIdentification',
        'creditor_details': 'creditorDetails',
        'debtor_details': 'debtorDetails',
        'source_bank_name': 'sourceBankName',
        'source_bank_code': 'sourceBankCode',
        'clearing_time_stamp': 'clearingTimeStamp',
        'settlement_time_stamp': 'settlementTimeStamp',
        'central_bank_transaction_reference_id': 'centralBankTransactionReferenceId',
        'original_creditor_details': 'originalCreditorDetails',
        'original_credit_account_details': 'originalCreditAccountDetails',
        'original_debtor_name': 'originalDebtorName',
        'original_debit_account_details': 'originalDebitAccountDetails',
        'transaction_debit_fee_amount': 'transactionDebitFeeAmount',
        'bank_member_id': 'bankMemberId',
        'beneficiary_legal_name': 'beneficiaryLegalName',
        'beneficiary_address': 'beneficiaryAddress',
        'beneficiary_tax_id': 'beneficiaryTaxId'
    }

    def __init__(self, display_source_account_number=None, payment_type=None, transaction_description=None, transaction_amount=None, transaction_currency_code=None, transaction_date=None, foreign_transaction_amount=None, foreign_currency_code=None, foreign_exchange_rate=None, transaction_status=None, transaction_posting_date=None, customer_name=None, customer_address=None, beneficiary_bank_details=None, customer_merchant_reference_details=None, remarks=None, payment_priority_code=None, merchant_code=None, merchant_name=None, transaction_reversal_description=None, original_transaction_details=None, end_to_end_identification=None, creditor_details=None, debtor_details=None, source_bank_name=None, source_bank_code=None, clearing_time_stamp=None, settlement_time_stamp=None, central_bank_transaction_reference_id=None, original_creditor_details=None, original_credit_account_details=None, original_debtor_name=None, original_debit_account_details=None, transaction_debit_fee_amount=None, bank_member_id=None, beneficiary_legal_name=None, beneficiary_address=None, beneficiary_tax_id=None):  # noqa: E501
        """TransactionDetailedViewResponse - a model defined in Swagger"""  # noqa: E501
        self._display_source_account_number = None
        self._payment_type = None
        self._transaction_description = None
        self._transaction_amount = None
        self._transaction_currency_code = None
        self._transaction_date = None
        self._foreign_transaction_amount = None
        self._foreign_currency_code = None
        self._foreign_exchange_rate = None
        self._transaction_status = None
        self._transaction_posting_date = None
        self._customer_name = None
        self._customer_address = None
        self._beneficiary_bank_details = None
        self._customer_merchant_reference_details = None
        self._remarks = None
        self._payment_priority_code = None
        self._merchant_code = None
        self._merchant_name = None
        self._transaction_reversal_description = None
        self._original_transaction_details = None
        self._end_to_end_identification = None
        self._creditor_details = None
        self._debtor_details = None
        self._source_bank_name = None
        self._source_bank_code = None
        self._clearing_time_stamp = None
        self._settlement_time_stamp = None
        self._central_bank_transaction_reference_id = None
        self._original_creditor_details = None
        self._original_credit_account_details = None
        self._original_debtor_name = None
        self._original_debit_account_details = None
        self._transaction_debit_fee_amount = None
        self._bank_member_id = None
        self._beneficiary_legal_name = None
        self._beneficiary_address = None
        self._beneficiary_tax_id = None
        self.discriminator = None
        if display_source_account_number is not None:
            self.display_source_account_number = display_source_account_number
        self.payment_type = payment_type
        if transaction_description is not None:
            self.transaction_description = transaction_description
        self.transaction_amount = transaction_amount
        self.transaction_currency_code = transaction_currency_code
        self.transaction_date = transaction_date
        if foreign_transaction_amount is not None:
            self.foreign_transaction_amount = foreign_transaction_amount
        if foreign_currency_code is not None:
            self.foreign_currency_code = foreign_currency_code
        if foreign_exchange_rate is not None:
            self.foreign_exchange_rate = foreign_exchange_rate
        if transaction_status is not None:
            self.transaction_status = transaction_status
        if transaction_posting_date is not None:
            self.transaction_posting_date = transaction_posting_date
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_address is not None:
            self.customer_address = customer_address
        if beneficiary_bank_details is not None:
            self.beneficiary_bank_details = beneficiary_bank_details
        if customer_merchant_reference_details is not None:
            self.customer_merchant_reference_details = customer_merchant_reference_details
        if remarks is not None:
            self.remarks = remarks
        if payment_priority_code is not None:
            self.payment_priority_code = payment_priority_code
        if merchant_code is not None:
            self.merchant_code = merchant_code
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if transaction_reversal_description is not None:
            self.transaction_reversal_description = transaction_reversal_description
        if original_transaction_details is not None:
            self.original_transaction_details = original_transaction_details
        if end_to_end_identification is not None:
            self.end_to_end_identification = end_to_end_identification
        if creditor_details is not None:
            self.creditor_details = creditor_details
        if debtor_details is not None:
            self.debtor_details = debtor_details
        if source_bank_name is not None:
            self.source_bank_name = source_bank_name
        if source_bank_code is not None:
            self.source_bank_code = source_bank_code
        if clearing_time_stamp is not None:
            self.clearing_time_stamp = clearing_time_stamp
        if settlement_time_stamp is not None:
            self.settlement_time_stamp = settlement_time_stamp
        if central_bank_transaction_reference_id is not None:
            self.central_bank_transaction_reference_id = central_bank_transaction_reference_id
        if original_creditor_details is not None:
            self.original_creditor_details = original_creditor_details
        if original_credit_account_details is not None:
            self.original_credit_account_details = original_credit_account_details
        if original_debtor_name is not None:
            self.original_debtor_name = original_debtor_name
        if original_debit_account_details is not None:
            self.original_debit_account_details = original_debit_account_details
        if transaction_debit_fee_amount is not None:
            self.transaction_debit_fee_amount = transaction_debit_fee_amount
        if bank_member_id is not None:
            self.bank_member_id = bank_member_id
        if beneficiary_legal_name is not None:
            self.beneficiary_legal_name = beneficiary_legal_name
        if beneficiary_address is not None:
            self.beneficiary_address = beneficiary_address
        if beneficiary_tax_id is not None:
            self.beneficiary_tax_id = beneficiary_tax_id

    @property
    def display_source_account_number(self):
        """Gets the display_source_account_number of this TransactionDetailedViewResponse.  # noqa: E501

        A masked account number that can be displayed to the customer  # noqa: E501

        :return: The display_source_account_number of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_source_account_number

    @display_source_account_number.setter
    def display_source_account_number(self, display_source_account_number):
        """Sets the display_source_account_number of this TransactionDetailedViewResponse.

        A masked account number that can be displayed to the customer  # noqa: E501

        :param display_source_account_number: The display_source_account_number of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._display_source_account_number = display_source_account_number

    @property
    def payment_type(self):
        """Gets the payment_type of this TransactionDetailedViewResponse.  # noqa: E501

        The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.  # noqa: E501

        :return: The payment_type of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this TransactionDetailedViewResponse.

        The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.  # noqa: E501

        :param payment_type: The payment_type of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """
        if payment_type is None:
            raise ValueError("Invalid value for `payment_type`, must not be `None`")  # noqa: E501

        self._payment_type = payment_type

    @property
    def transaction_description(self):
        """Gets the transaction_description of this TransactionDetailedViewResponse.  # noqa: E501

        Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.  # noqa: E501

        :return: The transaction_description of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_description

    @transaction_description.setter
    def transaction_description(self, transaction_description):
        """Sets the transaction_description of this TransactionDetailedViewResponse.

        Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.  # noqa: E501

        :param transaction_description: The transaction_description of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._transaction_description = transaction_description

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this TransactionDetailedViewResponse.  # noqa: E501

        Transaction amount in account currency.  # noqa: E501

        :return: The transaction_amount of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this TransactionDetailedViewResponse.

        Transaction amount in account currency.  # noqa: E501

        :param transaction_amount: The transaction_amount of this TransactionDetailedViewResponse.  # noqa: E501
        :type: float
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")  # noqa: E501

        self._transaction_amount = transaction_amount

    @property
    def transaction_currency_code(self):
        """Gets the transaction_currency_code of this TransactionDetailedViewResponse.  # noqa: E501

        The currency code for the transaction amount in ISO 4217 format.  # noqa: E501

        :return: The transaction_currency_code of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_currency_code

    @transaction_currency_code.setter
    def transaction_currency_code(self, transaction_currency_code):
        """Sets the transaction_currency_code of this TransactionDetailedViewResponse.

        The currency code for the transaction amount in ISO 4217 format.  # noqa: E501

        :param transaction_currency_code: The transaction_currency_code of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """
        if transaction_currency_code is None:
            raise ValueError("Invalid value for `transaction_currency_code`, must not be `None`")  # noqa: E501

        self._transaction_currency_code = transaction_currency_code

    @property
    def transaction_date(self):
        """Gets the transaction_date of this TransactionDetailedViewResponse.  # noqa: E501

        Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,  # noqa: E501

        :return: The transaction_date of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: date
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this TransactionDetailedViewResponse.

        Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,  # noqa: E501

        :param transaction_date: The transaction_date of this TransactionDetailedViewResponse.  # noqa: E501
        :type: date
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")  # noqa: E501

        self._transaction_date = transaction_date

    @property
    def foreign_transaction_amount(self):
        """Gets the foreign_transaction_amount of this TransactionDetailedViewResponse.  # noqa: E501

        The transaction amount in the foreign account current  # noqa: E501

        :return: The foreign_transaction_amount of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: float
        """
        return self._foreign_transaction_amount

    @foreign_transaction_amount.setter
    def foreign_transaction_amount(self, foreign_transaction_amount):
        """Sets the foreign_transaction_amount of this TransactionDetailedViewResponse.

        The transaction amount in the foreign account current  # noqa: E501

        :param foreign_transaction_amount: The foreign_transaction_amount of this TransactionDetailedViewResponse.  # noqa: E501
        :type: float
        """

        self._foreign_transaction_amount = foreign_transaction_amount

    @property
    def foreign_currency_code(self):
        """Gets the foreign_currency_code of this TransactionDetailedViewResponse.  # noqa: E501

        The currency code for the foreign transaction amount in ISO 4217 format.  # noqa: E501

        :return: The foreign_currency_code of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._foreign_currency_code

    @foreign_currency_code.setter
    def foreign_currency_code(self, foreign_currency_code):
        """Sets the foreign_currency_code of this TransactionDetailedViewResponse.

        The currency code for the foreign transaction amount in ISO 4217 format.  # noqa: E501

        :param foreign_currency_code: The foreign_currency_code of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._foreign_currency_code = foreign_currency_code

    @property
    def foreign_exchange_rate(self):
        """Gets the foreign_exchange_rate of this TransactionDetailedViewResponse.  # noqa: E501

        The exchange rate at the time the foreign transaction was done  # noqa: E501

        :return: The foreign_exchange_rate of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: float
        """
        return self._foreign_exchange_rate

    @foreign_exchange_rate.setter
    def foreign_exchange_rate(self, foreign_exchange_rate):
        """Sets the foreign_exchange_rate of this TransactionDetailedViewResponse.

        The exchange rate at the time the foreign transaction was done  # noqa: E501

        :param foreign_exchange_rate: The foreign_exchange_rate of this TransactionDetailedViewResponse.  # noqa: E501
        :type: float
        """

        self._foreign_exchange_rate = foreign_exchange_rate

    @property
    def transaction_status(self):
        """Gets the transaction_status of this TransactionDetailedViewResponse.  # noqa: E501

        The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.  # noqa: E501

        :return: The transaction_status of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this TransactionDetailedViewResponse.

        The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.  # noqa: E501

        :param transaction_status: The transaction_status of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._transaction_status = transaction_status

    @property
    def transaction_posting_date(self):
        """Gets the transaction_posting_date of this TransactionDetailedViewResponse.  # noqa: E501

        Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601.  # noqa: E501

        :return: The transaction_posting_date of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: date
        """
        return self._transaction_posting_date

    @transaction_posting_date.setter
    def transaction_posting_date(self, transaction_posting_date):
        """Sets the transaction_posting_date of this TransactionDetailedViewResponse.

        Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601.  # noqa: E501

        :param transaction_posting_date: The transaction_posting_date of this TransactionDetailedViewResponse.  # noqa: E501
        :type: date
        """

        self._transaction_posting_date = transaction_posting_date

    @property
    def customer_name(self):
        """Gets the customer_name of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The customer_name of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: CustomerName
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this TransactionDetailedViewResponse.


        :param customer_name: The customer_name of this TransactionDetailedViewResponse.  # noqa: E501
        :type: CustomerName
        """

        self._customer_name = customer_name

    @property
    def customer_address(self):
        """Gets the customer_address of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The customer_address of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: CustomerAddress
        """
        return self._customer_address

    @customer_address.setter
    def customer_address(self, customer_address):
        """Sets the customer_address of this TransactionDetailedViewResponse.


        :param customer_address: The customer_address of this TransactionDetailedViewResponse.  # noqa: E501
        :type: CustomerAddress
        """

        self._customer_address = customer_address

    @property
    def beneficiary_bank_details(self):
        """Gets the beneficiary_bank_details of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The beneficiary_bank_details of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: BeneficiaryBankDetails
        """
        return self._beneficiary_bank_details

    @beneficiary_bank_details.setter
    def beneficiary_bank_details(self, beneficiary_bank_details):
        """Sets the beneficiary_bank_details of this TransactionDetailedViewResponse.


        :param beneficiary_bank_details: The beneficiary_bank_details of this TransactionDetailedViewResponse.  # noqa: E501
        :type: BeneficiaryBankDetails
        """

        self._beneficiary_bank_details = beneficiary_bank_details

    @property
    def customer_merchant_reference_details(self):
        """Gets the customer_merchant_reference_details of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The customer_merchant_reference_details of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: list[CustomerMerchantReferenceDetails]
        """
        return self._customer_merchant_reference_details

    @customer_merchant_reference_details.setter
    def customer_merchant_reference_details(self, customer_merchant_reference_details):
        """Sets the customer_merchant_reference_details of this TransactionDetailedViewResponse.


        :param customer_merchant_reference_details: The customer_merchant_reference_details of this TransactionDetailedViewResponse.  # noqa: E501
        :type: list[CustomerMerchantReferenceDetails]
        """

        self._customer_merchant_reference_details = customer_merchant_reference_details

    @property
    def remarks(self):
        """Gets the remarks of this TransactionDetailedViewResponse.  # noqa: E501

        Payment notes. Free text from screen  # noqa: E501

        :return: The remarks of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this TransactionDetailedViewResponse.

        Payment notes. Free text from screen  # noqa: E501

        :param remarks: The remarks of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def payment_priority_code(self):
        """Gets the payment_priority_code of this TransactionDetailedViewResponse.  # noqa: E501

        This code is used to indicate the priority payments  # noqa: E501

        :return: The payment_priority_code of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_priority_code

    @payment_priority_code.setter
    def payment_priority_code(self, payment_priority_code):
        """Sets the payment_priority_code of this TransactionDetailedViewResponse.

        This code is used to indicate the priority payments  # noqa: E501

        :param payment_priority_code: The payment_priority_code of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._payment_priority_code = payment_priority_code

    @property
    def merchant_code(self):
        """Gets the merchant_code of this TransactionDetailedViewResponse.  # noqa: E501

        The code to identify merchant  # noqa: E501

        :return: The merchant_code of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_code

    @merchant_code.setter
    def merchant_code(self, merchant_code):
        """Sets the merchant_code of this TransactionDetailedViewResponse.

        The code to identify merchant  # noqa: E501

        :param merchant_code: The merchant_code of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._merchant_code = merchant_code

    @property
    def merchant_name(self):
        """Gets the merchant_name of this TransactionDetailedViewResponse.  # noqa: E501

        The name of the merchant  # noqa: E501

        :return: The merchant_name of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this TransactionDetailedViewResponse.

        The name of the merchant  # noqa: E501

        :param merchant_name: The merchant_name of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def transaction_reversal_description(self):
        """Gets the transaction_reversal_description of this TransactionDetailedViewResponse.  # noqa: E501

        Transaction reversal description as provided by the returnee  # noqa: E501

        :return: The transaction_reversal_description of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_reversal_description

    @transaction_reversal_description.setter
    def transaction_reversal_description(self, transaction_reversal_description):
        """Sets the transaction_reversal_description of this TransactionDetailedViewResponse.

        Transaction reversal description as provided by the returnee  # noqa: E501

        :param transaction_reversal_description: The transaction_reversal_description of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._transaction_reversal_description = transaction_reversal_description

    @property
    def original_transaction_details(self):
        """Gets the original_transaction_details of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The original_transaction_details of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: OriginalTransactionDetails
        """
        return self._original_transaction_details

    @original_transaction_details.setter
    def original_transaction_details(self, original_transaction_details):
        """Sets the original_transaction_details of this TransactionDetailedViewResponse.


        :param original_transaction_details: The original_transaction_details of this TransactionDetailedViewResponse.  # noqa: E501
        :type: OriginalTransactionDetails
        """

        self._original_transaction_details = original_transaction_details

    @property
    def end_to_end_identification(self):
        """Gets the end_to_end_identification of this TransactionDetailedViewResponse.  # noqa: E501

        End to End Identification status  # noqa: E501

        :return: The end_to_end_identification of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_identification

    @end_to_end_identification.setter
    def end_to_end_identification(self, end_to_end_identification):
        """Sets the end_to_end_identification of this TransactionDetailedViewResponse.

        End to End Identification status  # noqa: E501

        :param end_to_end_identification: The end_to_end_identification of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._end_to_end_identification = end_to_end_identification

    @property
    def creditor_details(self):
        """Gets the creditor_details of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The creditor_details of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: CreditorDetails
        """
        return self._creditor_details

    @creditor_details.setter
    def creditor_details(self, creditor_details):
        """Sets the creditor_details of this TransactionDetailedViewResponse.


        :param creditor_details: The creditor_details of this TransactionDetailedViewResponse.  # noqa: E501
        :type: CreditorDetails
        """

        self._creditor_details = creditor_details

    @property
    def debtor_details(self):
        """Gets the debtor_details of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The debtor_details of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: DebtorDetails
        """
        return self._debtor_details

    @debtor_details.setter
    def debtor_details(self, debtor_details):
        """Sets the debtor_details of this TransactionDetailedViewResponse.


        :param debtor_details: The debtor_details of this TransactionDetailedViewResponse.  # noqa: E501
        :type: DebtorDetails
        """

        self._debtor_details = debtor_details

    @property
    def source_bank_name(self):
        """Gets the source_bank_name of this TransactionDetailedViewResponse.  # noqa: E501

        Name of the bank.  # noqa: E501

        :return: The source_bank_name of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_bank_name

    @source_bank_name.setter
    def source_bank_name(self, source_bank_name):
        """Sets the source_bank_name of this TransactionDetailedViewResponse.

        Name of the bank.  # noqa: E501

        :param source_bank_name: The source_bank_name of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._source_bank_name = source_bank_name

    @property
    def source_bank_code(self):
        """Gets the source_bank_code of this TransactionDetailedViewResponse.  # noqa: E501

        The bank code of the payer account  # noqa: E501

        :return: The source_bank_code of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_bank_code

    @source_bank_code.setter
    def source_bank_code(self, source_bank_code):
        """Sets the source_bank_code of this TransactionDetailedViewResponse.

        The bank code of the payer account  # noqa: E501

        :param source_bank_code: The source_bank_code of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._source_bank_code = source_bank_code

    @property
    def clearing_time_stamp(self):
        """Gets the clearing_time_stamp of this TransactionDetailedViewResponse.  # noqa: E501

        Clearing Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS  # noqa: E501

        :return: The clearing_time_stamp of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._clearing_time_stamp

    @clearing_time_stamp.setter
    def clearing_time_stamp(self, clearing_time_stamp):
        """Sets the clearing_time_stamp of this TransactionDetailedViewResponse.

        Clearing Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS  # noqa: E501

        :param clearing_time_stamp: The clearing_time_stamp of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._clearing_time_stamp = clearing_time_stamp

    @property
    def settlement_time_stamp(self):
        """Gets the settlement_time_stamp of this TransactionDetailedViewResponse.  # noqa: E501

        Settlement Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS  # noqa: E501

        :return: The settlement_time_stamp of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._settlement_time_stamp

    @settlement_time_stamp.setter
    def settlement_time_stamp(self, settlement_time_stamp):
        """Sets the settlement_time_stamp of this TransactionDetailedViewResponse.

        Settlement Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS  # noqa: E501

        :param settlement_time_stamp: The settlement_time_stamp of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._settlement_time_stamp = settlement_time_stamp

    @property
    def central_bank_transaction_reference_id(self):
        """Gets the central_bank_transaction_reference_id of this TransactionDetailedViewResponse.  # noqa: E501

        Transaction ID identifying the transaction across banks  # noqa: E501

        :return: The central_bank_transaction_reference_id of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._central_bank_transaction_reference_id

    @central_bank_transaction_reference_id.setter
    def central_bank_transaction_reference_id(self, central_bank_transaction_reference_id):
        """Sets the central_bank_transaction_reference_id of this TransactionDetailedViewResponse.

        Transaction ID identifying the transaction across banks  # noqa: E501

        :param central_bank_transaction_reference_id: The central_bank_transaction_reference_id of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._central_bank_transaction_reference_id = central_bank_transaction_reference_id

    @property
    def original_creditor_details(self):
        """Gets the original_creditor_details of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The original_creditor_details of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: OriginalCreditorDetails
        """
        return self._original_creditor_details

    @original_creditor_details.setter
    def original_creditor_details(self, original_creditor_details):
        """Sets the original_creditor_details of this TransactionDetailedViewResponse.


        :param original_creditor_details: The original_creditor_details of this TransactionDetailedViewResponse.  # noqa: E501
        :type: OriginalCreditorDetails
        """

        self._original_creditor_details = original_creditor_details

    @property
    def original_credit_account_details(self):
        """Gets the original_credit_account_details of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The original_credit_account_details of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: OriginalCreditAccountDetails
        """
        return self._original_credit_account_details

    @original_credit_account_details.setter
    def original_credit_account_details(self, original_credit_account_details):
        """Sets the original_credit_account_details of this TransactionDetailedViewResponse.


        :param original_credit_account_details: The original_credit_account_details of this TransactionDetailedViewResponse.  # noqa: E501
        :type: OriginalCreditAccountDetails
        """

        self._original_credit_account_details = original_credit_account_details

    @property
    def original_debtor_name(self):
        """Gets the original_debtor_name of this TransactionDetailedViewResponse.  # noqa: E501

        Original Debtor Name  # noqa: E501

        :return: The original_debtor_name of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._original_debtor_name

    @original_debtor_name.setter
    def original_debtor_name(self, original_debtor_name):
        """Sets the original_debtor_name of this TransactionDetailedViewResponse.

        Original Debtor Name  # noqa: E501

        :param original_debtor_name: The original_debtor_name of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._original_debtor_name = original_debtor_name

    @property
    def original_debit_account_details(self):
        """Gets the original_debit_account_details of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The original_debit_account_details of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: OriginalDebitAccountDetails
        """
        return self._original_debit_account_details

    @original_debit_account_details.setter
    def original_debit_account_details(self, original_debit_account_details):
        """Sets the original_debit_account_details of this TransactionDetailedViewResponse.


        :param original_debit_account_details: The original_debit_account_details of this TransactionDetailedViewResponse.  # noqa: E501
        :type: OriginalDebitAccountDetails
        """

        self._original_debit_account_details = original_debit_account_details

    @property
    def transaction_debit_fee_amount(self):
        """Gets the transaction_debit_fee_amount of this TransactionDetailedViewResponse.  # noqa: E501

        Fees charged for the debit.  # noqa: E501

        :return: The transaction_debit_fee_amount of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: float
        """
        return self._transaction_debit_fee_amount

    @transaction_debit_fee_amount.setter
    def transaction_debit_fee_amount(self, transaction_debit_fee_amount):
        """Sets the transaction_debit_fee_amount of this TransactionDetailedViewResponse.

        Fees charged for the debit.  # noqa: E501

        :param transaction_debit_fee_amount: The transaction_debit_fee_amount of this TransactionDetailedViewResponse.  # noqa: E501
        :type: float
        """

        self._transaction_debit_fee_amount = transaction_debit_fee_amount

    @property
    def bank_member_id(self):
        """Gets the bank_member_id of this TransactionDetailedViewResponse.  # noqa: E501

        Bank Member ID  # noqa: E501

        :return: The bank_member_id of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_member_id

    @bank_member_id.setter
    def bank_member_id(self, bank_member_id):
        """Sets the bank_member_id of this TransactionDetailedViewResponse.

        Bank Member ID  # noqa: E501

        :param bank_member_id: The bank_member_id of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._bank_member_id = bank_member_id

    @property
    def beneficiary_legal_name(self):
        """Gets the beneficiary_legal_name of this TransactionDetailedViewResponse.  # noqa: E501

        Legal Name of the Beneficiary  # noqa: E501

        :return: The beneficiary_legal_name of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_legal_name

    @beneficiary_legal_name.setter
    def beneficiary_legal_name(self, beneficiary_legal_name):
        """Sets the beneficiary_legal_name of this TransactionDetailedViewResponse.

        Legal Name of the Beneficiary  # noqa: E501

        :param beneficiary_legal_name: The beneficiary_legal_name of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._beneficiary_legal_name = beneficiary_legal_name

    @property
    def beneficiary_address(self):
        """Gets the beneficiary_address of this TransactionDetailedViewResponse.  # noqa: E501


        :return: The beneficiary_address of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: list[BeneficiaryAddress]
        """
        return self._beneficiary_address

    @beneficiary_address.setter
    def beneficiary_address(self, beneficiary_address):
        """Sets the beneficiary_address of this TransactionDetailedViewResponse.


        :param beneficiary_address: The beneficiary_address of this TransactionDetailedViewResponse.  # noqa: E501
        :type: list[BeneficiaryAddress]
        """

        self._beneficiary_address = beneficiary_address

    @property
    def beneficiary_tax_id(self):
        """Gets the beneficiary_tax_id of this TransactionDetailedViewResponse.  # noqa: E501

        Beneficiary Tax ID  # noqa: E501

        :return: The beneficiary_tax_id of this TransactionDetailedViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_tax_id

    @beneficiary_tax_id.setter
    def beneficiary_tax_id(self, beneficiary_tax_id):
        """Sets the beneficiary_tax_id of this TransactionDetailedViewResponse.

        Beneficiary Tax ID  # noqa: E501

        :param beneficiary_tax_id: The beneficiary_tax_id of this TransactionDetailedViewResponse.  # noqa: E501
        :type: str
        """

        self._beneficiary_tax_id = beneficiary_tax_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionDetailedViewResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionDetailedViewResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
