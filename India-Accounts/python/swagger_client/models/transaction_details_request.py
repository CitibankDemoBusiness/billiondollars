# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionDetailsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'currency_code': 'str',
        'transaction_from_date': 'date',
        'transaction_to_date': 'date',
        'amount_from': 'float',
        'amount_to': 'float',
        'transaction_status': 'str',
        'transaction_indicator': 'str',
        'next_start_index': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'currency_code': 'currencyCode',
        'transaction_from_date': 'transactionFromDate',
        'transaction_to_date': 'transactionToDate',
        'amount_from': 'amountFrom',
        'amount_to': 'amountTo',
        'transaction_status': 'transactionStatus',
        'transaction_indicator': 'transactionIndicator',
        'next_start_index': 'nextStartIndex'
    }

    def __init__(self, account_id=None, currency_code=None, transaction_from_date=None, transaction_to_date=None, amount_from=None, amount_to=None, transaction_status=None, transaction_indicator=None, next_start_index=None):  # noqa: E501
        """TransactionDetailsRequest - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._currency_code = None
        self._transaction_from_date = None
        self._transaction_to_date = None
        self._amount_from = None
        self._amount_to = None
        self._transaction_status = None
        self._transaction_indicator = None
        self._next_start_index = None
        self.discriminator = None
        self.account_id = account_id
        if currency_code is not None:
            self.currency_code = currency_code
        if transaction_from_date is not None:
            self.transaction_from_date = transaction_from_date
        if transaction_to_date is not None:
            self.transaction_to_date = transaction_to_date
        if amount_from is not None:
            self.amount_from = amount_from
        if amount_to is not None:
            self.amount_to = amount_to
        if transaction_status is not None:
            self.transaction_status = transaction_status
        if transaction_indicator is not None:
            self.transaction_indicator = transaction_indicator
        if next_start_index is not None:
            self.next_start_index = next_start_index

    @property
    def account_id(self):
        """Gets the account_id of this TransactionDetailsRequest.  # noqa: E501

        The account identifier in encrypted format.Typically, this is not displayed to the customer.  # noqa: E501

        :return: The account_id of this TransactionDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TransactionDetailsRequest.

        The account identifier in encrypted format.Typically, this is not displayed to the customer.  # noqa: E501

        :param account_id: The account_id of this TransactionDetailsRequest.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def currency_code(self):
        """Gets the currency_code of this TransactionDetailsRequest.  # noqa: E501

        The currency code of the destination account in ISO 4217 format  # noqa: E501

        :return: The currency_code of this TransactionDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this TransactionDetailsRequest.

        The currency code of the destination account in ISO 4217 format  # noqa: E501

        :param currency_code: The currency_code of this TransactionDetailsRequest.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def transaction_from_date(self):
        """Gets the transaction_from_date of this TransactionDetailsRequest.  # noqa: E501

        Starting range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products  # noqa: E501

        :return: The transaction_from_date of this TransactionDetailsRequest.  # noqa: E501
        :rtype: date
        """
        return self._transaction_from_date

    @transaction_from_date.setter
    def transaction_from_date(self, transaction_from_date):
        """Sets the transaction_from_date of this TransactionDetailsRequest.

        Starting range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products  # noqa: E501

        :param transaction_from_date: The transaction_from_date of this TransactionDetailsRequest.  # noqa: E501
        :type: date
        """

        self._transaction_from_date = transaction_from_date

    @property
    def transaction_to_date(self):
        """Gets the transaction_to_date of this TransactionDetailsRequest.  # noqa: E501

        End range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products.  # noqa: E501

        :return: The transaction_to_date of this TransactionDetailsRequest.  # noqa: E501
        :rtype: date
        """
        return self._transaction_to_date

    @transaction_to_date.setter
    def transaction_to_date(self, transaction_to_date):
        """Sets the transaction_to_date of this TransactionDetailsRequest.

        End range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products.  # noqa: E501

        :param transaction_to_date: The transaction_to_date of this TransactionDetailsRequest.  # noqa: E501
        :type: date
        """

        self._transaction_to_date = transaction_to_date

    @property
    def amount_from(self):
        """Gets the amount_from of this TransactionDetailsRequest.  # noqa: E501

        Starting range of transaction amount in the base currency. Note: Applicable for Investment accounts.  # noqa: E501

        :return: The amount_from of this TransactionDetailsRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount_from

    @amount_from.setter
    def amount_from(self, amount_from):
        """Sets the amount_from of this TransactionDetailsRequest.

        Starting range of transaction amount in the base currency. Note: Applicable for Investment accounts.  # noqa: E501

        :param amount_from: The amount_from of this TransactionDetailsRequest.  # noqa: E501
        :type: float
        """

        self._amount_from = amount_from

    @property
    def amount_to(self):
        """Gets the amount_to of this TransactionDetailsRequest.  # noqa: E501

        End range of transaction amount in the base currency. Note: Applicable for Investment accounts.  # noqa: E501

        :return: The amount_to of this TransactionDetailsRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount_to

    @amount_to.setter
    def amount_to(self, amount_to):
        """Sets the amount_to of this TransactionDetailsRequest.

        End range of transaction amount in the base currency. Note: Applicable for Investment accounts.  # noqa: E501

        :param amount_to: The amount_to of this TransactionDetailsRequest.  # noqa: E501
        :type: float
        """

        self._amount_to = amount_to

    @property
    def transaction_status(self):
        """Gets the transaction_status of this TransactionDetailsRequest.  # noqa: E501

        Applicable for credit cards only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible value of this field with description.  # noqa: E501

        :return: The transaction_status of this TransactionDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this TransactionDetailsRequest.

        Applicable for credit cards only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible value of this field with description.  # noqa: E501

        :param transaction_status: The transaction_status of this TransactionDetailsRequest.  # noqa: E501
        :type: str
        """

        self._transaction_status = transaction_status

    @property
    def transaction_indicator(self):
        """Gets the transaction_indicator of this TransactionDetailsRequest.  # noqa: E501

        Indicates which card on an account was used for a transaction. Applicable only for credit cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionIndicator} resource to get possible value of this field with description.  # noqa: E501

        :return: The transaction_indicator of this TransactionDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_indicator

    @transaction_indicator.setter
    def transaction_indicator(self, transaction_indicator):
        """Sets the transaction_indicator of this TransactionDetailsRequest.

        Indicates which card on an account was used for a transaction. Applicable only for credit cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionIndicator} resource to get possible value of this field with description.  # noqa: E501

        :param transaction_indicator: The transaction_indicator of this TransactionDetailsRequest.  # noqa: E501
        :type: str
        """

        self._transaction_indicator = transaction_indicator

    @property
    def next_start_index(self):
        """Gets the next_start_index of this TransactionDetailsRequest.  # noqa: E501

        In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.  # noqa: E501

        :return: The next_start_index of this TransactionDetailsRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_start_index

    @next_start_index.setter
    def next_start_index(self, next_start_index):
        """Sets the next_start_index of this TransactionDetailsRequest.

        In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.  # noqa: E501

        :param next_start_index: The next_start_index of this TransactionDetailsRequest.  # noqa: E501
        :type: str
        """

        self._next_start_index = next_start_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionDetailsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionDetailsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
