# coding: utf-8

"""
    Accounts

    The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InitiateApplicationProcessingUnsecuredLoanTopupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marketing_campaign_offer': 'MarketingCampaignOffer',
        'account_id': 'str',
        'card_id': 'str',
        'product': 'Product',
        'requested_loan_amount': 'float',
        'loan_topup_application_type': 'str',
        'spoken_language_code': 'str'
    }

    attribute_map = {
        'marketing_campaign_offer': 'marketingCampaignOffer',
        'account_id': 'accountId',
        'card_id': 'cardId',
        'product': 'product',
        'requested_loan_amount': 'requestedLoanAmount',
        'loan_topup_application_type': 'loanTopupApplicationType',
        'spoken_language_code': 'spokenLanguageCode'
    }

    def __init__(self, marketing_campaign_offer=None, account_id=None, card_id=None, product=None, requested_loan_amount=None, loan_topup_application_type=None, spoken_language_code=None):  # noqa: E501
        """InitiateApplicationProcessingUnsecuredLoanTopupRequest - a model defined in Swagger"""  # noqa: E501
        self._marketing_campaign_offer = None
        self._account_id = None
        self._card_id = None
        self._product = None
        self._requested_loan_amount = None
        self._loan_topup_application_type = None
        self._spoken_language_code = None
        self.discriminator = None
        if marketing_campaign_offer is not None:
            self.marketing_campaign_offer = marketing_campaign_offer
        if account_id is not None:
            self.account_id = account_id
        if card_id is not None:
            self.card_id = card_id
        if product is not None:
            self.product = product
        if requested_loan_amount is not None:
            self.requested_loan_amount = requested_loan_amount
        self.loan_topup_application_type = loan_topup_application_type
        self.spoken_language_code = spoken_language_code

    @property
    def marketing_campaign_offer(self):
        """Gets the marketing_campaign_offer of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501


        :return: The marketing_campaign_offer of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :rtype: MarketingCampaignOffer
        """
        return self._marketing_campaign_offer

    @marketing_campaign_offer.setter
    def marketing_campaign_offer(self, marketing_campaign_offer):
        """Sets the marketing_campaign_offer of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.


        :param marketing_campaign_offer: The marketing_campaign_offer of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :type: MarketingCampaignOffer
        """

        self._marketing_campaign_offer = marketing_campaign_offer

    @property
    def account_id(self):
        """Gets the account_id of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501

        Account number of customer in encrypted form.  # noqa: E501

        :return: The account_id of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.

        Account number of customer in encrypted form.  # noqa: E501

        :param account_id: The account_id of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def card_id(self):
        """Gets the card_id of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501

        Card number of customer in encrypted form.  # noqa: E501

        :return: The card_id of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.

        Card number of customer in encrypted form.  # noqa: E501

        :param card_id: The card_id of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :type: str
        """

        self._card_id = card_id

    @property
    def product(self):
        """Gets the product of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501


        :return: The product of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.


        :param product: The product of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def requested_loan_amount(self):
        """Gets the requested_loan_amount of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501

        Requested loan amount  # noqa: E501

        :return: The requested_loan_amount of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :rtype: float
        """
        return self._requested_loan_amount

    @requested_loan_amount.setter
    def requested_loan_amount(self, requested_loan_amount):
        """Sets the requested_loan_amount of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.

        Requested loan amount  # noqa: E501

        :param requested_loan_amount: The requested_loan_amount of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :type: float
        """

        self._requested_loan_amount = requested_loan_amount

    @property
    def loan_topup_application_type(self):
        """Gets the loan_topup_application_type of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501

        Identifies if application is for cross-sell application for new personal loan (PIL) or loan top-up. This is a reference data data field. Please use /v1/utilities/referenceData/{loanTopupApplicationType} resource to get valid value of this field with description.  # noqa: E501

        :return: The loan_topup_application_type of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :rtype: str
        """
        return self._loan_topup_application_type

    @loan_topup_application_type.setter
    def loan_topup_application_type(self, loan_topup_application_type):
        """Sets the loan_topup_application_type of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.

        Identifies if application is for cross-sell application for new personal loan (PIL) or loan top-up. This is a reference data data field. Please use /v1/utilities/referenceData/{loanTopupApplicationType} resource to get valid value of this field with description.  # noqa: E501

        :param loan_topup_application_type: The loan_topup_application_type of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :type: str
        """
        if loan_topup_application_type is None:
            raise ValueError("Invalid value for `loan_topup_application_type`, must not be `None`")  # noqa: E501

        self._loan_topup_application_type = loan_topup_application_type

    @property
    def spoken_language_code(self):
        """Gets the spoken_language_code of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501

        Code for spoken language of applicant. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description.  # noqa: E501

        :return: The spoken_language_code of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :rtype: str
        """
        return self._spoken_language_code

    @spoken_language_code.setter
    def spoken_language_code(self, spoken_language_code):
        """Sets the spoken_language_code of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.

        Code for spoken language of applicant. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description.  # noqa: E501

        :param spoken_language_code: The spoken_language_code of this InitiateApplicationProcessingUnsecuredLoanTopupRequest.  # noqa: E501
        :type: str
        """
        if spoken_language_code is None:
            raise ValueError("Invalid value for `spoken_language_code`, must not be `None`")  # noqa: E501

        self._spoken_language_code = spoken_language_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitiateApplicationProcessingUnsecuredLoanTopupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitiateApplicationProcessingUnsecuredLoanTopupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
