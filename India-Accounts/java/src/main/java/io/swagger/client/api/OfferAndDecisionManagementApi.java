/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest;
import io.swagger.client.model.InitiateApplicationProcessingUnsecuredLoanTopupRequest;
import io.swagger.client.model.InitiateApplicationProcessingUnsecuredLoanTopupResponse;
import io.swagger.client.model.RequestedLoanTopupDecision;
import io.swagger.client.model.RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse;
import io.swagger.client.model.UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest;
import io.swagger.client.model.UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse;
import io.swagger.client.model.UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OfferAndDecisionManagementApi {
    private ApiClient apiClient;

    public OfferAndDecisionManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OfferAndDecisionManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmission
     * @param body ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionCall(ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/applicationProcessing/products/unsecuredLoans/topup/applications/{applicationId}/offerAcceptanceAndSubmission"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionValidateBeforeCall(ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmission(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmission(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmission(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmission(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmission(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmission(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmission(Async)");
        }
        
        com.squareup.okhttp.Call call = executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionCall(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to perform offer acceptance for Loan Top Up Application &amp; final submit
     * This API is used to perform offer acceptance for Loan Top Up Application &amp; final submit
     * @param body ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmission(ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails) throws ApiException {
        executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails);
    }

    /**
     * This API is used to perform offer acceptance for Loan Top Up Application &amp; final submit
     * This API is used to perform offer acceptance for Loan Top Up Application &amp; final submit
     * @param body ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionWithHttpInfo(ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails, null, null);
        return apiClient.execute(call);
    }

    /**
     * This API is used to perform offer acceptance for Loan Top Up Application &amp; final submit (asynchronously)
     * This API is used to perform offer acceptance for Loan Top Up Application &amp; final submit
     * @param body ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionAsync(ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for initiateApplicationProcessingUnsecuredLoanTopup
     * @param body InitiateApplicationProcessingUnsecuredLoanTopupRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call initiateApplicationProcessingUnsecuredLoanTopupCall(InitiateApplicationProcessingUnsecuredLoanTopupRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/applicationProcessing/products/unsecuredLoans/topup/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call initiateApplicationProcessingUnsecuredLoanTopupValidateBeforeCall(InitiateApplicationProcessingUnsecuredLoanTopupRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling initiateApplicationProcessingUnsecuredLoanTopup(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling initiateApplicationProcessingUnsecuredLoanTopup(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling initiateApplicationProcessingUnsecuredLoanTopup(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling initiateApplicationProcessingUnsecuredLoanTopup(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling initiateApplicationProcessingUnsecuredLoanTopup(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling initiateApplicationProcessingUnsecuredLoanTopup(Async)");
        }
        
        com.squareup.okhttp.Call call = initiateApplicationProcessingUnsecuredLoanTopupCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to create application for  loan top-up for existing credit card customer. This is for post login function
     * This API is used to create application for  loan top-up for existing credit card customer. This is for post login function
     * @param body InitiateApplicationProcessingUnsecuredLoanTopupRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return InitiateApplicationProcessingUnsecuredLoanTopupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InitiateApplicationProcessingUnsecuredLoanTopupResponse initiateApplicationProcessingUnsecuredLoanTopup(InitiateApplicationProcessingUnsecuredLoanTopupRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        ApiResponse<InitiateApplicationProcessingUnsecuredLoanTopupResponse> resp = initiateApplicationProcessingUnsecuredLoanTopupWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
        return resp.getData();
    }

    /**
     * This API is used to create application for  loan top-up for existing credit card customer. This is for post login function
     * This API is used to create application for  loan top-up for existing credit card customer. This is for post login function
     * @param body InitiateApplicationProcessingUnsecuredLoanTopupRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;InitiateApplicationProcessingUnsecuredLoanTopupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InitiateApplicationProcessingUnsecuredLoanTopupResponse> initiateApplicationProcessingUnsecuredLoanTopupWithHttpInfo(InitiateApplicationProcessingUnsecuredLoanTopupRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = initiateApplicationProcessingUnsecuredLoanTopupValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<InitiateApplicationProcessingUnsecuredLoanTopupResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is used to create application for  loan top-up for existing credit card customer. This is for post login function (asynchronously)
     * This API is used to create application for  loan top-up for existing credit card customer. This is for post login function
     * @param body InitiateApplicationProcessingUnsecuredLoanTopupRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call initiateApplicationProcessingUnsecuredLoanTopupAsync(InitiateApplicationProcessingUnsecuredLoanTopupRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String clientDetails, final ApiCallback<InitiateApplicationProcessingUnsecuredLoanTopupResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = initiateApplicationProcessingUnsecuredLoanTopupValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InitiateApplicationProcessingUnsecuredLoanTopupResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param loanAmount Loan amount (required)
     * @param insurancePremiumAmount Insurance premium amount (required)
     * @param feeAmount Fee amount (required)
     * @param loanInterestRate Loan interest rate (required)
     * @param tenor Tenor (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleCall(String authorization, String uuid, String accept, String clientId, String contentType, Double loanAmount, Double insurancePremiumAmount, Double feeAmount, Double loanInterestRate, Integer tenor, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/applicationProcessing/products/unsecuredLoans/topup/repaymentSchedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (loanAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("loanAmount", loanAmount));
        if (insurancePremiumAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insurancePremiumAmount", insurancePremiumAmount));
        if (feeAmount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("feeAmount", feeAmount));
        if (loanInterestRate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("loanInterestRate", loanInterestRate));
        if (tenor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tenor", tenor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleValidateBeforeCall(String authorization, String uuid, String accept, String clientId, String contentType, Double loanAmount, Double insurancePremiumAmount, Double feeAmount, Double loanInterestRate, Integer tenor, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        // verify the required parameter 'loanAmount' is set
        if (loanAmount == null) {
            throw new ApiException("Missing the required parameter 'loanAmount' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        // verify the required parameter 'insurancePremiumAmount' is set
        if (insurancePremiumAmount == null) {
            throw new ApiException("Missing the required parameter 'insurancePremiumAmount' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        // verify the required parameter 'feeAmount' is set
        if (feeAmount == null) {
            throw new ApiException("Missing the required parameter 'feeAmount' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        // verify the required parameter 'loanInterestRate' is set
        if (loanInterestRate == null) {
            throw new ApiException("Missing the required parameter 'loanInterestRate' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        // verify the required parameter 'tenor' is set
        if (tenor == null) {
            throw new ApiException("Missing the required parameter 'tenor' when calling retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(Async)");
        }
        
        com.squareup.okhttp.Call call = retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleCall(authorization, uuid, accept, clientId, contentType, loanAmount, insurancePremiumAmount, feeAmount, loanInterestRate, tenor, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit
     * This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param loanAmount Loan amount (required)
     * @param insurancePremiumAmount Insurance premium amount (required)
     * @param feeAmount Fee amount (required)
     * @param loanInterestRate Loan interest rate (required)
     * @param tenor Tenor (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse retrieveApplicationProcessingUnsecuredLoanTopupRepaymentSchedule(String authorization, String uuid, String accept, String clientId, String contentType, Double loanAmount, Double insurancePremiumAmount, Double feeAmount, Double loanInterestRate, Integer tenor, String clientDetails) throws ApiException {
        ApiResponse<RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse> resp = retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleWithHttpInfo(authorization, uuid, accept, clientId, contentType, loanAmount, insurancePremiumAmount, feeAmount, loanInterestRate, tenor, clientDetails);
        return resp.getData();
    }

    /**
     * This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit
     * This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param loanAmount Loan amount (required)
     * @param insurancePremiumAmount Insurance premium amount (required)
     * @param feeAmount Fee amount (required)
     * @param loanInterestRate Loan interest rate (required)
     * @param tenor Tenor (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse> retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleWithHttpInfo(String authorization, String uuid, String accept, String clientId, String contentType, Double loanAmount, Double insurancePremiumAmount, Double feeAmount, Double loanInterestRate, Integer tenor, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleValidateBeforeCall(authorization, uuid, accept, clientId, contentType, loanAmount, insurancePremiumAmount, feeAmount, loanInterestRate, tenor, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit (asynchronously)
     * This API fetches repayment schedule details for a loan including loan amount, tenor, rates, fees, etc for unsecured loans on ready credit
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param loanAmount Loan amount (required)
     * @param insurancePremiumAmount Insurance premium amount (required)
     * @param feeAmount Fee amount (required)
     * @param loanInterestRate Loan interest rate (required)
     * @param tenor Tenor (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleAsync(String authorization, String uuid, String accept, String clientId, String contentType, Double loanAmount, Double insurancePremiumAmount, Double feeAmount, Double loanInterestRate, Integer tenor, String clientDetails, final ApiCallback<RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleValidateBeforeCall(authorization, uuid, accept, clientId, contentType, loanAmount, insurancePremiumAmount, feeAmount, loanInterestRate, tenor, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateApplicationProcessingUnsecuredLoanTopupBackgroundScreening
     * @param body UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningCall(UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/applicationProcessing/products/unsecuredLoans/topup/applications/{applicationId}/backgroundScreening"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningValidateBeforeCall(UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateApplicationProcessingUnsecuredLoanTopupBackgroundScreening(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateApplicationProcessingUnsecuredLoanTopupBackgroundScreening(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateApplicationProcessingUnsecuredLoanTopupBackgroundScreening(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateApplicationProcessingUnsecuredLoanTopupBackgroundScreening(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateApplicationProcessingUnsecuredLoanTopupBackgroundScreening(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateApplicationProcessingUnsecuredLoanTopupBackgroundScreening(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling updateApplicationProcessingUnsecuredLoanTopupBackgroundScreening(Async)");
        }
        
        com.squareup.okhttp.Call call = updateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningCall(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to update a saved Loan top-up application &amp; do background screening
     * This API is used to update a saved Loan top-up application &amp; do background screening
     * @param body UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse updateApplicationProcessingUnsecuredLoanTopupBackgroundScreening(UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails) throws ApiException {
        ApiResponse<UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse> resp = updateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails);
        return resp.getData();
    }

    /**
     * This API is used to update a saved Loan top-up application &amp; do background screening
     * This API is used to update a saved Loan top-up application &amp; do background screening
     * @param body UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse> updateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningWithHttpInfo(UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = updateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is used to update a saved Loan top-up application &amp; do background screening (asynchronously)
     * This API is used to update a saved Loan top-up application &amp; do background screening
     * @param body UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningAsync(UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningRequest body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails, final ApiCallback<UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateApplicationProcessingUnsecuredLoanTopupBackgroundScreeningResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateApplicationProcessingUnsecuredLoanTopupInPrincipalApproval
     * @param body RequestedLoanTopupDecision (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalCall(RequestedLoanTopupDecision body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/applicationProcessing/products/unsecuredLoans/topup/applications/{applicationId}/inPrincipleApprovals"
            .replaceAll("\\{" + "applicationId" + "\\}", apiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (uuid != null)
        localVarHeaderParams.put("uuid", apiClient.parameterToString(uuid));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (clientId != null)
        localVarHeaderParams.put("client_id", apiClient.parameterToString(clientId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (clientDetails != null)
        localVarHeaderParams.put("clientDetails", apiClient.parameterToString(clientDetails));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalValidateBeforeCall(RequestedLoanTopupDecision body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateApplicationProcessingUnsecuredLoanTopupInPrincipalApproval(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateApplicationProcessingUnsecuredLoanTopupInPrincipalApproval(Async)");
        }
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling updateApplicationProcessingUnsecuredLoanTopupInPrincipalApproval(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateApplicationProcessingUnsecuredLoanTopupInPrincipalApproval(Async)");
        }
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateApplicationProcessingUnsecuredLoanTopupInPrincipalApproval(Async)");
        }
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateApplicationProcessingUnsecuredLoanTopupInPrincipalApproval(Async)");
        }
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling updateApplicationProcessingUnsecuredLoanTopupInPrincipalApproval(Async)");
        }
        
        com.squareup.okhttp.Call call = updateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalCall(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * This API is used to update a saved Loan top-up application and in principle approval
     * This API is used to update a saved Loan top-up application and in principle approval
     * @param body RequestedLoanTopupDecision (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse updateApplicationProcessingUnsecuredLoanTopupInPrincipalApproval(RequestedLoanTopupDecision body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails) throws ApiException {
        ApiResponse<UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse> resp = updateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails);
        return resp.getData();
    }

    /**
     * This API is used to update a saved Loan top-up application and in principle approval
     * This API is used to update a saved Loan top-up application and in principle approval
     * @param body RequestedLoanTopupDecision (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @return ApiResponse&lt;UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse> updateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalWithHttpInfo(RequestedLoanTopupDecision body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails) throws ApiException {
        com.squareup.okhttp.Call call = updateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails, null, null);
        Type localVarReturnType = new TypeToken<UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This API is used to update a saved Loan top-up application and in principle approval (asynchronously)
     * This API is used to update a saved Loan top-up application and in principle approval
     * @param body RequestedLoanTopupDecision (required)
     * @param authorization The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;. (required)
     * @param uuid 128 bit random UUID generated uniquely for every request. (required)
     * @param accept Content-Type that are acceptable for the response. (required)
     * @param clientId Client ID generated during application registration. (required)
     * @param contentType application/json (required)
     * @param applicationId  (required)
     * @param clientDetails This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalAsync(RequestedLoanTopupDecision body, String authorization, String uuid, String accept, String clientId, String contentType, String applicationId, String clientDetails, final ApiCallback<UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalValidateBeforeCall(body, authorization, uuid, accept, clientId, contentType, applicationId, clientDetails, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateApplicationProcessingUnsecuredLoanTopupInPrincipalApprovalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
