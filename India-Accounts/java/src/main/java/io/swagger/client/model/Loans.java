/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.LocalDate;
/**
 * Loans
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class Loans {
  @SerializedName("loanReferenceId")
  private String loanReferenceId = null;

  @SerializedName("displayAccountNumber")
  private String displayAccountNumber = null;

  @SerializedName("transactionDate")
  private LocalDate transactionDate = null;

  @SerializedName("transactionDescription")
  private String transactionDescription = null;

  @SerializedName("installmentAmount")
  private Double installmentAmount = null;

  @SerializedName("nextInstallmentAmount")
  private Double nextInstallmentAmount = null;

  @SerializedName("outstandingBalanceAmount")
  private Double outstandingBalanceAmount = null;

  @SerializedName("tenor")
  private BigDecimal tenor = null;

  @SerializedName("outstandingTenor")
  private BigDecimal outstandingTenor = null;

  @SerializedName("originalLoanAmount")
  private Double originalLoanAmount = null;

  @SerializedName("annualPercentageRate")
  private Double annualPercentageRate = null;

  @SerializedName("effectiveInterestRate")
  private Double effectiveInterestRate = null;

  @SerializedName("processingChargeAmount")
  private Double processingChargeAmount = null;

  @SerializedName("outstandingInterestAmount")
  private Double outstandingInterestAmount = null;

  @SerializedName("selfEarlyLoanClosureAllowedFlag")
  private Boolean selfEarlyLoanClosureAllowedFlag = null;

  @SerializedName("installmentCycle")
  private Integer installmentCycle = null;

  public Loans loanReferenceId(String loanReferenceId) {
    this.loanReferenceId = loanReferenceId;
    return this;
  }

   /**
   * Reference Id to uniquely identify the loan. 
   * @return loanReferenceId
  **/
  @Schema(example = "50120182023488270", required = true, description = "Reference Id to uniquely identify the loan. ")
  public String getLoanReferenceId() {
    return loanReferenceId;
  }

  public void setLoanReferenceId(String loanReferenceId) {
    this.loanReferenceId = loanReferenceId;
  }

  public Loans displayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
    return this;
  }

   /**
   * Last 4 digits of account number. 
   * @return displayAccountNumber
  **/
  @Schema(example = "5678", description = "Last 4 digits of account number. ")
  public String getDisplayAccountNumber() {
    return displayAccountNumber;
  }

  public void setDisplayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
  }

  public Loans transactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * Transaction date in YYYY-MM-DD format value conforming to ISO 8601.
   * @return transactionDate
  **/
  @Schema(example = "Mon May 21 00:00:00 UTC 2018", required = true, description = "Transaction date in YYYY-MM-DD format value conforming to ISO 8601.")
  public LocalDate getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
  }

  public Loans transactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
    return this;
  }

   /**
   * Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
   * @return transactionDescription
  **/
  @Schema(example = "TRANSIT 30000659022734 SINGAPORE SG", required = true, description = "Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.")
  public String getTransactionDescription() {
    return transactionDescription;
  }

  public void setTransactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
  }

  public Loans installmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
    return this;
  }

   /**
   * Installment loan payment amount
   * @return installmentAmount
  **/
  @Schema(example = "1200.25", required = true, description = "Installment loan payment amount")
  public Double getInstallmentAmount() {
    return installmentAmount;
  }

  public void setInstallmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
  }

  public Loans nextInstallmentAmount(Double nextInstallmentAmount) {
    this.nextInstallmentAmount = nextInstallmentAmount;
    return this;
  }

   /**
   * Next installment amount in local currency.
   * @return nextInstallmentAmount
  **/
  @Schema(example = "44.66", description = "Next installment amount in local currency.")
  public Double getNextInstallmentAmount() {
    return nextInstallmentAmount;
  }

  public void setNextInstallmentAmount(Double nextInstallmentAmount) {
    this.nextInstallmentAmount = nextInstallmentAmount;
  }

  public Loans outstandingBalanceAmount(Double outstandingBalanceAmount) {
    this.outstandingBalanceAmount = outstandingBalanceAmount;
    return this;
  }

   /**
   * The amount of money owed.
   * @return outstandingBalanceAmount
  **/
  @Schema(example = "20000.25", required = true, description = "The amount of money owed.")
  public Double getOutstandingBalanceAmount() {
    return outstandingBalanceAmount;
  }

  public void setOutstandingBalanceAmount(Double outstandingBalanceAmount) {
    this.outstandingBalanceAmount = outstandingBalanceAmount;
  }

  public Loans tenor(BigDecimal tenor) {
    this.tenor = tenor;
    return this;
  }

   /**
   * Tenure of loan in months.
   * @return tenor
  **/
  @Schema(example = "60.0", required = true, description = "Tenure of loan in months.")
  public BigDecimal getTenor() {
    return tenor;
  }

  public void setTenor(BigDecimal tenor) {
    this.tenor = tenor;
  }

  public Loans outstandingTenor(BigDecimal outstandingTenor) {
    this.outstandingTenor = outstandingTenor;
    return this;
  }

   /**
   * Number of months remaining for completion of loan.
   * @return outstandingTenor
  **/
  @Schema(example = "45.0", description = "Number of months remaining for completion of loan.")
  public BigDecimal getOutstandingTenor() {
    return outstandingTenor;
  }

  public void setOutstandingTenor(BigDecimal outstandingTenor) {
    this.outstandingTenor = outstandingTenor;
  }

  public Loans originalLoanAmount(Double originalLoanAmount) {
    this.originalLoanAmount = originalLoanAmount;
    return this;
  }

   /**
   * Original loan amount borrowed by customer.
   * @return originalLoanAmount
  **/
  @Schema(example = "5000.25", required = true, description = "Original loan amount borrowed by customer.")
  public Double getOriginalLoanAmount() {
    return originalLoanAmount;
  }

  public void setOriginalLoanAmount(Double originalLoanAmount) {
    this.originalLoanAmount = originalLoanAmount;
  }

  public Loans annualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
    return this;
  }

   /**
   * Interest rate for a whole year. This includes any fees or additional cost associated.
   * @return annualPercentageRate
  **/
  @Schema(example = "13.67", required = true, description = "Interest rate for a whole year. This includes any fees or additional cost associated.")
  public Double getAnnualPercentageRate() {
    return annualPercentageRate;
  }

  public void setAnnualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
  }

  public Loans effectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
    return this;
  }

   /**
   * Effective Percentage Rate
   * @return effectiveInterestRate
  **/
  @Schema(example = "9.2", description = "Effective Percentage Rate")
  public Double getEffectiveInterestRate() {
    return effectiveInterestRate;
  }

  public void setEffectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
  }

  public Loans processingChargeAmount(Double processingChargeAmount) {
    this.processingChargeAmount = processingChargeAmount;
    return this;
  }

   /**
   * Charges levied on applicant by the bank to process the loan.
   * @return processingChargeAmount
  **/
  @Schema(example = "50.0", description = "Charges levied on applicant by the bank to process the loan.")
  public Double getProcessingChargeAmount() {
    return processingChargeAmount;
  }

  public void setProcessingChargeAmount(Double processingChargeAmount) {
    this.processingChargeAmount = processingChargeAmount;
  }

  public Loans outstandingInterestAmount(Double outstandingInterestAmount) {
    this.outstandingInterestAmount = outstandingInterestAmount;
    return this;
  }

   /**
   * Total Outstanding Interest Amount.
   * @return outstandingInterestAmount
  **/
  @Schema(example = "2000.0", description = "Total Outstanding Interest Amount.")
  public Double getOutstandingInterestAmount() {
    return outstandingInterestAmount;
  }

  public void setOutstandingInterestAmount(Double outstandingInterestAmount) {
    this.outstandingInterestAmount = outstandingInterestAmount;
  }

  public Loans selfEarlyLoanClosureAllowedFlag(Boolean selfEarlyLoanClosureAllowedFlag) {
    this.selfEarlyLoanClosureAllowedFlag = selfEarlyLoanClosureAllowedFlag;
    return this;
  }

   /**
   * Flag to identify if the loan is allowed to be early self closed by customer or not..
   * @return selfEarlyLoanClosureAllowedFlag
  **/
  @Schema(example = "true", description = "Flag to identify if the loan is allowed to be early self closed by customer or not..")
  public Boolean isSelfEarlyLoanClosureAllowedFlag() {
    return selfEarlyLoanClosureAllowedFlag;
  }

  public void setSelfEarlyLoanClosureAllowedFlag(Boolean selfEarlyLoanClosureAllowedFlag) {
    this.selfEarlyLoanClosureAllowedFlag = selfEarlyLoanClosureAllowedFlag;
  }

  public Loans installmentCycle(Integer installmentCycle) {
    this.installmentCycle = installmentCycle;
    return this;
  }

   /**
   * Intallment Cycle
   * @return installmentCycle
  **/
  @Schema(example = "4", description = "Intallment Cycle")
  public Integer getInstallmentCycle() {
    return installmentCycle;
  }

  public void setInstallmentCycle(Integer installmentCycle) {
    this.installmentCycle = installmentCycle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loans loans = (Loans) o;
    return Objects.equals(this.loanReferenceId, loans.loanReferenceId) &&
        Objects.equals(this.displayAccountNumber, loans.displayAccountNumber) &&
        Objects.equals(this.transactionDate, loans.transactionDate) &&
        Objects.equals(this.transactionDescription, loans.transactionDescription) &&
        Objects.equals(this.installmentAmount, loans.installmentAmount) &&
        Objects.equals(this.nextInstallmentAmount, loans.nextInstallmentAmount) &&
        Objects.equals(this.outstandingBalanceAmount, loans.outstandingBalanceAmount) &&
        Objects.equals(this.tenor, loans.tenor) &&
        Objects.equals(this.outstandingTenor, loans.outstandingTenor) &&
        Objects.equals(this.originalLoanAmount, loans.originalLoanAmount) &&
        Objects.equals(this.annualPercentageRate, loans.annualPercentageRate) &&
        Objects.equals(this.effectiveInterestRate, loans.effectiveInterestRate) &&
        Objects.equals(this.processingChargeAmount, loans.processingChargeAmount) &&
        Objects.equals(this.outstandingInterestAmount, loans.outstandingInterestAmount) &&
        Objects.equals(this.selfEarlyLoanClosureAllowedFlag, loans.selfEarlyLoanClosureAllowedFlag) &&
        Objects.equals(this.installmentCycle, loans.installmentCycle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loanReferenceId, displayAccountNumber, transactionDate, transactionDescription, installmentAmount, nextInstallmentAmount, outstandingBalanceAmount, tenor, outstandingTenor, originalLoanAmount, annualPercentageRate, effectiveInterestRate, processingChargeAmount, outstandingInterestAmount, selfEarlyLoanClosureAllowedFlag, installmentCycle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loans {\n");
    
    sb.append("    loanReferenceId: ").append(toIndentedString(loanReferenceId)).append("\n");
    sb.append("    displayAccountNumber: ").append(toIndentedString(displayAccountNumber)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    transactionDescription: ").append(toIndentedString(transactionDescription)).append("\n");
    sb.append("    installmentAmount: ").append(toIndentedString(installmentAmount)).append("\n");
    sb.append("    nextInstallmentAmount: ").append(toIndentedString(nextInstallmentAmount)).append("\n");
    sb.append("    outstandingBalanceAmount: ").append(toIndentedString(outstandingBalanceAmount)).append("\n");
    sb.append("    tenor: ").append(toIndentedString(tenor)).append("\n");
    sb.append("    outstandingTenor: ").append(toIndentedString(outstandingTenor)).append("\n");
    sb.append("    originalLoanAmount: ").append(toIndentedString(originalLoanAmount)).append("\n");
    sb.append("    annualPercentageRate: ").append(toIndentedString(annualPercentageRate)).append("\n");
    sb.append("    effectiveInterestRate: ").append(toIndentedString(effectiveInterestRate)).append("\n");
    sb.append("    processingChargeAmount: ").append(toIndentedString(processingChargeAmount)).append("\n");
    sb.append("    outstandingInterestAmount: ").append(toIndentedString(outstandingInterestAmount)).append("\n");
    sb.append("    selfEarlyLoanClosureAllowedFlag: ").append(toIndentedString(selfEarlyLoanClosureAllowedFlag)).append("\n");
    sb.append("    installmentCycle: ").append(toIndentedString(installmentCycle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
