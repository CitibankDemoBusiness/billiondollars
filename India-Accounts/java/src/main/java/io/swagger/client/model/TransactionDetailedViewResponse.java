/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BeneficiaryAddress;
import io.swagger.client.model.BeneficiaryBankDetails;
import io.swagger.client.model.CreditorDetails;
import io.swagger.client.model.CustomerAddress;
import io.swagger.client.model.CustomerMerchantReferenceDetails;
import io.swagger.client.model.CustomerName;
import io.swagger.client.model.DebtorDetails;
import io.swagger.client.model.OriginalCreditAccountDetails;
import io.swagger.client.model.OriginalCreditorDetails;
import io.swagger.client.model.OriginalDebitAccountDetails;
import io.swagger.client.model.OriginalTransactionDetails;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
/**
 * TransactionDetailedViewResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class TransactionDetailedViewResponse {
  @SerializedName("displaySourceAccountNumber")
  private String displaySourceAccountNumber = null;

  @SerializedName("paymentType")
  private String paymentType = null;

  @SerializedName("transactionDescription")
  private String transactionDescription = null;

  @SerializedName("transactionAmount")
  private Double transactionAmount = null;

  @SerializedName("transactionCurrencyCode")
  private String transactionCurrencyCode = null;

  @SerializedName("transactionDate")
  private LocalDate transactionDate = null;

  @SerializedName("foreignTransactionAmount")
  private BigDecimal foreignTransactionAmount = null;

  @SerializedName("foreignCurrencyCode")
  private String foreignCurrencyCode = null;

  @SerializedName("foreignExchangeRate")
  private BigDecimal foreignExchangeRate = null;

  @SerializedName("transactionStatus")
  private String transactionStatus = null;

  @SerializedName("transactionPostingDate")
  private LocalDate transactionPostingDate = null;

  @SerializedName("customerName")
  private CustomerName customerName = null;

  @SerializedName("customerAddress")
  private CustomerAddress customerAddress = null;

  @SerializedName("beneficiaryBankDetails")
  private BeneficiaryBankDetails beneficiaryBankDetails = null;

  @SerializedName("customerMerchantReferenceDetails")
  private List<CustomerMerchantReferenceDetails> customerMerchantReferenceDetails = null;

  @SerializedName("remarks")
  private String remarks = null;

  @SerializedName("paymentPriorityCode")
  private String paymentPriorityCode = null;

  @SerializedName("merchantCode")
  private String merchantCode = null;

  @SerializedName("merchantName")
  private String merchantName = null;

  @SerializedName("transactionReversalDescription")
  private String transactionReversalDescription = null;

  @SerializedName("originalTransactionDetails")
  private OriginalTransactionDetails originalTransactionDetails = null;

  @SerializedName("endToEndIdentification")
  private String endToEndIdentification = null;

  @SerializedName("creditorDetails")
  private CreditorDetails creditorDetails = null;

  @SerializedName("debtorDetails")
  private DebtorDetails debtorDetails = null;

  @SerializedName("sourceBankName")
  private String sourceBankName = null;

  @SerializedName("sourceBankCode")
  private String sourceBankCode = null;

  @SerializedName("clearingTimeStamp")
  private String clearingTimeStamp = null;

  @SerializedName("settlementTimeStamp")
  private String settlementTimeStamp = null;

  @SerializedName("centralBankTransactionReferenceId")
  private String centralBankTransactionReferenceId = null;

  @SerializedName("originalCreditorDetails")
  private OriginalCreditorDetails originalCreditorDetails = null;

  @SerializedName("originalCreditAccountDetails")
  private OriginalCreditAccountDetails originalCreditAccountDetails = null;

  @SerializedName("originalDebtorName")
  private String originalDebtorName = null;

  @SerializedName("originalDebitAccountDetails")
  private OriginalDebitAccountDetails originalDebitAccountDetails = null;

  @SerializedName("transactionDebitFeeAmount")
  private Double transactionDebitFeeAmount = null;

  @SerializedName("bankMemberId")
  private String bankMemberId = null;

  @SerializedName("beneficiaryLegalName")
  private String beneficiaryLegalName = null;

  @SerializedName("beneficiaryAddress")
  private List<BeneficiaryAddress> beneficiaryAddress = null;

  @SerializedName("beneficiaryTaxId")
  private String beneficiaryTaxId = null;

  public TransactionDetailedViewResponse displaySourceAccountNumber(String displaySourceAccountNumber) {
    this.displaySourceAccountNumber = displaySourceAccountNumber;
    return this;
  }

   /**
   * A masked account number that can be displayed to the customer
   * @return displaySourceAccountNumber
  **/
  @Schema(example = "XXXXXX2364", description = "A masked account number that can be displayed to the customer")
  public String getDisplaySourceAccountNumber() {
    return displaySourceAccountNumber;
  }

  public void setDisplaySourceAccountNumber(String displaySourceAccountNumber) {
    this.displaySourceAccountNumber = displaySourceAccountNumber;
  }

  public TransactionDetailedViewResponse paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.
   * @return paymentType
  **/
  @Schema(example = "SWIFT_TRANSFER", required = true, description = "The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.")
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }

  public TransactionDetailedViewResponse transactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
    return this;
  }

   /**
   * Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
   * @return transactionDescription
  **/
  @Schema(example = "INTEREST PAYMENT", description = "Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.")
  public String getTransactionDescription() {
    return transactionDescription;
  }

  public void setTransactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
  }

  public TransactionDetailedViewResponse transactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Transaction amount in account currency.
   * @return transactionAmount
  **/
  @Schema(example = "50.55", required = true, description = "Transaction amount in account currency.")
  public Double getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
  }

  public TransactionDetailedViewResponse transactionCurrencyCode(String transactionCurrencyCode) {
    this.transactionCurrencyCode = transactionCurrencyCode;
    return this;
  }

   /**
   * The currency code for the transaction amount in ISO 4217 format.
   * @return transactionCurrencyCode
  **/
  @Schema(example = "PLN", required = true, description = "The currency code for the transaction amount in ISO 4217 format.")
  public String getTransactionCurrencyCode() {
    return transactionCurrencyCode;
  }

  public void setTransactionCurrencyCode(String transactionCurrencyCode) {
    this.transactionCurrencyCode = transactionCurrencyCode;
  }

  public TransactionDetailedViewResponse transactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,
   * @return transactionDate
  **/
  @Schema(example = "Thu Dec 21 00:00:00 UTC 2017", required = true, description = "Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,")
  public LocalDate getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
  }

  public TransactionDetailedViewResponse foreignTransactionAmount(BigDecimal foreignTransactionAmount) {
    this.foreignTransactionAmount = foreignTransactionAmount;
    return this;
  }

   /**
   * The transaction amount in the foreign account current
   * @return foreignTransactionAmount
  **/
  @Schema(example = "50.55", description = "The transaction amount in the foreign account current")
  public BigDecimal getForeignTransactionAmount() {
    return foreignTransactionAmount;
  }

  public void setForeignTransactionAmount(BigDecimal foreignTransactionAmount) {
    this.foreignTransactionAmount = foreignTransactionAmount;
  }

  public TransactionDetailedViewResponse foreignCurrencyCode(String foreignCurrencyCode) {
    this.foreignCurrencyCode = foreignCurrencyCode;
    return this;
  }

   /**
   * The currency code for the foreign transaction amount in ISO 4217 format.
   * @return foreignCurrencyCode
  **/
  @Schema(example = "GBP", description = "The currency code for the foreign transaction amount in ISO 4217 format.")
  public String getForeignCurrencyCode() {
    return foreignCurrencyCode;
  }

  public void setForeignCurrencyCode(String foreignCurrencyCode) {
    this.foreignCurrencyCode = foreignCurrencyCode;
  }

  public TransactionDetailedViewResponse foreignExchangeRate(BigDecimal foreignExchangeRate) {
    this.foreignExchangeRate = foreignExchangeRate;
    return this;
  }

   /**
   * The exchange rate at the time the foreign transaction was done
   * @return foreignExchangeRate
  **/
  @Schema(example = "0.2011", description = "The exchange rate at the time the foreign transaction was done")
  public BigDecimal getForeignExchangeRate() {
    return foreignExchangeRate;
  }

  public void setForeignExchangeRate(BigDecimal foreignExchangeRate) {
    this.foreignExchangeRate = foreignExchangeRate;
  }

  public TransactionDetailedViewResponse transactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.
   * @return transactionStatus
  **/
  @Schema(example = "NEW", description = "The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.")
  public String getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }

  public TransactionDetailedViewResponse transactionPostingDate(LocalDate transactionPostingDate) {
    this.transactionPostingDate = transactionPostingDate;
    return this;
  }

   /**
   * Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601.
   * @return transactionPostingDate
  **/
  @Schema(example = "Tue Feb 12 00:00:00 UTC 2019", description = "Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601.")
  public LocalDate getTransactionPostingDate() {
    return transactionPostingDate;
  }

  public void setTransactionPostingDate(LocalDate transactionPostingDate) {
    this.transactionPostingDate = transactionPostingDate;
  }

  public TransactionDetailedViewResponse customerName(CustomerName customerName) {
    this.customerName = customerName;
    return this;
  }

   /**
   * Get customerName
   * @return customerName
  **/
  @Schema(description = "")
  public CustomerName getCustomerName() {
    return customerName;
  }

  public void setCustomerName(CustomerName customerName) {
    this.customerName = customerName;
  }

  public TransactionDetailedViewResponse customerAddress(CustomerAddress customerAddress) {
    this.customerAddress = customerAddress;
    return this;
  }

   /**
   * Get customerAddress
   * @return customerAddress
  **/
  @Schema(description = "")
  public CustomerAddress getCustomerAddress() {
    return customerAddress;
  }

  public void setCustomerAddress(CustomerAddress customerAddress) {
    this.customerAddress = customerAddress;
  }

  public TransactionDetailedViewResponse beneficiaryBankDetails(BeneficiaryBankDetails beneficiaryBankDetails) {
    this.beneficiaryBankDetails = beneficiaryBankDetails;
    return this;
  }

   /**
   * Get beneficiaryBankDetails
   * @return beneficiaryBankDetails
  **/
  @Schema(description = "")
  public BeneficiaryBankDetails getBeneficiaryBankDetails() {
    return beneficiaryBankDetails;
  }

  public void setBeneficiaryBankDetails(BeneficiaryBankDetails beneficiaryBankDetails) {
    this.beneficiaryBankDetails = beneficiaryBankDetails;
  }

  public TransactionDetailedViewResponse customerMerchantReferenceDetails(List<CustomerMerchantReferenceDetails> customerMerchantReferenceDetails) {
    this.customerMerchantReferenceDetails = customerMerchantReferenceDetails;
    return this;
  }

  public TransactionDetailedViewResponse addCustomerMerchantReferenceDetailsItem(CustomerMerchantReferenceDetails customerMerchantReferenceDetailsItem) {
    if (this.customerMerchantReferenceDetails == null) {
      this.customerMerchantReferenceDetails = new ArrayList<CustomerMerchantReferenceDetails>();
    }
    this.customerMerchantReferenceDetails.add(customerMerchantReferenceDetailsItem);
    return this;
  }

   /**
   * Get customerMerchantReferenceDetails
   * @return customerMerchantReferenceDetails
  **/
  @Schema(description = "")
  public List<CustomerMerchantReferenceDetails> getCustomerMerchantReferenceDetails() {
    return customerMerchantReferenceDetails;
  }

  public void setCustomerMerchantReferenceDetails(List<CustomerMerchantReferenceDetails> customerMerchantReferenceDetails) {
    this.customerMerchantReferenceDetails = customerMerchantReferenceDetails;
  }

  public TransactionDetailedViewResponse remarks(String remarks) {
    this.remarks = remarks;
    return this;
  }

   /**
   * Payment notes. Free text from screen
   * @return remarks
  **/
  @Schema(example = "Family expenses", description = "Payment notes. Free text from screen")
  public String getRemarks() {
    return remarks;
  }

  public void setRemarks(String remarks) {
    this.remarks = remarks;
  }

  public TransactionDetailedViewResponse paymentPriorityCode(String paymentPriorityCode) {
    this.paymentPriorityCode = paymentPriorityCode;
    return this;
  }

   /**
   * This code is used to indicate the priority payments
   * @return paymentPriorityCode
  **/
  @Schema(example = "5", description = "This code is used to indicate the priority payments")
  public String getPaymentPriorityCode() {
    return paymentPriorityCode;
  }

  public void setPaymentPriorityCode(String paymentPriorityCode) {
    this.paymentPriorityCode = paymentPriorityCode;
  }

  public TransactionDetailedViewResponse merchantCode(String merchantCode) {
    this.merchantCode = merchantCode;
    return this;
  }

   /**
   * The code to identify merchant
   * @return merchantCode
  **/
  @Schema(example = "300021", description = "The code to identify merchant")
  public String getMerchantCode() {
    return merchantCode;
  }

  public void setMerchantCode(String merchantCode) {
    this.merchantCode = merchantCode;
  }

  public TransactionDetailedViewResponse merchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

   /**
   * The name of the merchant
   * @return merchantName
  **/
  @Schema(example = "?????????? ??????", description = "The name of the merchant")
  public String getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }

  public TransactionDetailedViewResponse transactionReversalDescription(String transactionReversalDescription) {
    this.transactionReversalDescription = transactionReversalDescription;
    return this;
  }

   /**
   * Transaction reversal description as provided by the returnee
   * @return transactionReversalDescription
  **/
  @Schema(example = "Transaction Reversed with wrong Payee", description = "Transaction reversal description as provided by the returnee")
  public String getTransactionReversalDescription() {
    return transactionReversalDescription;
  }

  public void setTransactionReversalDescription(String transactionReversalDescription) {
    this.transactionReversalDescription = transactionReversalDescription;
  }

  public TransactionDetailedViewResponse originalTransactionDetails(OriginalTransactionDetails originalTransactionDetails) {
    this.originalTransactionDetails = originalTransactionDetails;
    return this;
  }

   /**
   * Get originalTransactionDetails
   * @return originalTransactionDetails
  **/
  @Schema(description = "")
  public OriginalTransactionDetails getOriginalTransactionDetails() {
    return originalTransactionDetails;
  }

  public void setOriginalTransactionDetails(OriginalTransactionDetails originalTransactionDetails) {
    this.originalTransactionDetails = originalTransactionDetails;
  }

  public TransactionDetailedViewResponse endToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
    return this;
  }

   /**
   * End to End Identification status
   * @return endToEndIdentification
  **/
  @Schema(example = "Pending", description = "End to End Identification status")
  public String getEndToEndIdentification() {
    return endToEndIdentification;
  }

  public void setEndToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
  }

  public TransactionDetailedViewResponse creditorDetails(CreditorDetails creditorDetails) {
    this.creditorDetails = creditorDetails;
    return this;
  }

   /**
   * Get creditorDetails
   * @return creditorDetails
  **/
  @Schema(description = "")
  public CreditorDetails getCreditorDetails() {
    return creditorDetails;
  }

  public void setCreditorDetails(CreditorDetails creditorDetails) {
    this.creditorDetails = creditorDetails;
  }

  public TransactionDetailedViewResponse debtorDetails(DebtorDetails debtorDetails) {
    this.debtorDetails = debtorDetails;
    return this;
  }

   /**
   * Get debtorDetails
   * @return debtorDetails
  **/
  @Schema(description = "")
  public DebtorDetails getDebtorDetails() {
    return debtorDetails;
  }

  public void setDebtorDetails(DebtorDetails debtorDetails) {
    this.debtorDetails = debtorDetails;
  }

  public TransactionDetailedViewResponse sourceBankName(String sourceBankName) {
    this.sourceBankName = sourceBankName;
    return this;
  }

   /**
   * Name of the bank.
   * @return sourceBankName
  **/
  @Schema(example = "HSBC Bank", description = "Name of the bank.")
  public String getSourceBankName() {
    return sourceBankName;
  }

  public void setSourceBankName(String sourceBankName) {
    this.sourceBankName = sourceBankName;
  }

  public TransactionDetailedViewResponse sourceBankCode(String sourceBankCode) {
    this.sourceBankCode = sourceBankCode;
    return this;
  }

   /**
   * The bank code of the payer account
   * @return sourceBankCode
  **/
  @Schema(example = "44525101", description = "The bank code of the payer account")
  public String getSourceBankCode() {
    return sourceBankCode;
  }

  public void setSourceBankCode(String sourceBankCode) {
    this.sourceBankCode = sourceBankCode;
  }

  public TransactionDetailedViewResponse clearingTimeStamp(String clearingTimeStamp) {
    this.clearingTimeStamp = clearingTimeStamp;
    return this;
  }

   /**
   * Clearing Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS
   * @return clearingTimeStamp
  **/
  @Schema(example = "2020-10-14T12:45:11", description = "Clearing Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS")
  public String getClearingTimeStamp() {
    return clearingTimeStamp;
  }

  public void setClearingTimeStamp(String clearingTimeStamp) {
    this.clearingTimeStamp = clearingTimeStamp;
  }

  public TransactionDetailedViewResponse settlementTimeStamp(String settlementTimeStamp) {
    this.settlementTimeStamp = settlementTimeStamp;
    return this;
  }

   /**
   * Settlement Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS
   * @return settlementTimeStamp
  **/
  @Schema(example = "2020-10-15T13:45:30", description = "Settlement Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS")
  public String getSettlementTimeStamp() {
    return settlementTimeStamp;
  }

  public void setSettlementTimeStamp(String settlementTimeStamp) {
    this.settlementTimeStamp = settlementTimeStamp;
  }

  public TransactionDetailedViewResponse centralBankTransactionReferenceId(String centralBankTransactionReferenceId) {
    this.centralBankTransactionReferenceId = centralBankTransactionReferenceId;
    return this;
  }

   /**
   * Transaction ID identifying the transaction across banks
   * @return centralBankTransactionReferenceId
  **/
  @Schema(example = "A908808150725100F9wfDh4CFADBC375", description = "Transaction ID identifying the transaction across banks")
  public String getCentralBankTransactionReferenceId() {
    return centralBankTransactionReferenceId;
  }

  public void setCentralBankTransactionReferenceId(String centralBankTransactionReferenceId) {
    this.centralBankTransactionReferenceId = centralBankTransactionReferenceId;
  }

  public TransactionDetailedViewResponse originalCreditorDetails(OriginalCreditorDetails originalCreditorDetails) {
    this.originalCreditorDetails = originalCreditorDetails;
    return this;
  }

   /**
   * Get originalCreditorDetails
   * @return originalCreditorDetails
  **/
  @Schema(description = "")
  public OriginalCreditorDetails getOriginalCreditorDetails() {
    return originalCreditorDetails;
  }

  public void setOriginalCreditorDetails(OriginalCreditorDetails originalCreditorDetails) {
    this.originalCreditorDetails = originalCreditorDetails;
  }

  public TransactionDetailedViewResponse originalCreditAccountDetails(OriginalCreditAccountDetails originalCreditAccountDetails) {
    this.originalCreditAccountDetails = originalCreditAccountDetails;
    return this;
  }

   /**
   * Get originalCreditAccountDetails
   * @return originalCreditAccountDetails
  **/
  @Schema(description = "")
  public OriginalCreditAccountDetails getOriginalCreditAccountDetails() {
    return originalCreditAccountDetails;
  }

  public void setOriginalCreditAccountDetails(OriginalCreditAccountDetails originalCreditAccountDetails) {
    this.originalCreditAccountDetails = originalCreditAccountDetails;
  }

  public TransactionDetailedViewResponse originalDebtorName(String originalDebtorName) {
    this.originalDebtorName = originalDebtorName;
    return this;
  }

   /**
   * Original Debtor Name
   * @return originalDebtorName
  **/
  @Schema(example = "John Smith", description = "Original Debtor Name")
  public String getOriginalDebtorName() {
    return originalDebtorName;
  }

  public void setOriginalDebtorName(String originalDebtorName) {
    this.originalDebtorName = originalDebtorName;
  }

  public TransactionDetailedViewResponse originalDebitAccountDetails(OriginalDebitAccountDetails originalDebitAccountDetails) {
    this.originalDebitAccountDetails = originalDebitAccountDetails;
    return this;
  }

   /**
   * Get originalDebitAccountDetails
   * @return originalDebitAccountDetails
  **/
  @Schema(description = "")
  public OriginalDebitAccountDetails getOriginalDebitAccountDetails() {
    return originalDebitAccountDetails;
  }

  public void setOriginalDebitAccountDetails(OriginalDebitAccountDetails originalDebitAccountDetails) {
    this.originalDebitAccountDetails = originalDebitAccountDetails;
  }

  public TransactionDetailedViewResponse transactionDebitFeeAmount(Double transactionDebitFeeAmount) {
    this.transactionDebitFeeAmount = transactionDebitFeeAmount;
    return this;
  }

   /**
   * Fees charged for the debit.
   * @return transactionDebitFeeAmount
  **/
  @Schema(example = "15.15", description = "Fees charged for the debit.")
  public Double getTransactionDebitFeeAmount() {
    return transactionDebitFeeAmount;
  }

  public void setTransactionDebitFeeAmount(Double transactionDebitFeeAmount) {
    this.transactionDebitFeeAmount = transactionDebitFeeAmount;
  }

  public TransactionDetailedViewResponse bankMemberId(String bankMemberId) {
    this.bankMemberId = bankMemberId;
    return this;
  }

   /**
   * Bank Member ID
   * @return bankMemberId
  **/
  @Schema(example = "78346", description = "Bank Member ID")
  public String getBankMemberId() {
    return bankMemberId;
  }

  public void setBankMemberId(String bankMemberId) {
    this.bankMemberId = bankMemberId;
  }

  public TransactionDetailedViewResponse beneficiaryLegalName(String beneficiaryLegalName) {
    this.beneficiaryLegalName = beneficiaryLegalName;
    return this;
  }

   /**
   * Legal Name of the Beneficiary
   * @return beneficiaryLegalName
  **/
  @Schema(example = "John Adam Smith", description = "Legal Name of the Beneficiary")
  public String getBeneficiaryLegalName() {
    return beneficiaryLegalName;
  }

  public void setBeneficiaryLegalName(String beneficiaryLegalName) {
    this.beneficiaryLegalName = beneficiaryLegalName;
  }

  public TransactionDetailedViewResponse beneficiaryAddress(List<BeneficiaryAddress> beneficiaryAddress) {
    this.beneficiaryAddress = beneficiaryAddress;
    return this;
  }

  public TransactionDetailedViewResponse addBeneficiaryAddressItem(BeneficiaryAddress beneficiaryAddressItem) {
    if (this.beneficiaryAddress == null) {
      this.beneficiaryAddress = new ArrayList<BeneficiaryAddress>();
    }
    this.beneficiaryAddress.add(beneficiaryAddressItem);
    return this;
  }

   /**
   * Get beneficiaryAddress
   * @return beneficiaryAddress
  **/
  @Schema(description = "")
  public List<BeneficiaryAddress> getBeneficiaryAddress() {
    return beneficiaryAddress;
  }

  public void setBeneficiaryAddress(List<BeneficiaryAddress> beneficiaryAddress) {
    this.beneficiaryAddress = beneficiaryAddress;
  }

  public TransactionDetailedViewResponse beneficiaryTaxId(String beneficiaryTaxId) {
    this.beneficiaryTaxId = beneficiaryTaxId;
    return this;
  }

   /**
   * Beneficiary Tax ID
   * @return beneficiaryTaxId
  **/
  @Schema(example = "2302sda", description = "Beneficiary Tax ID")
  public String getBeneficiaryTaxId() {
    return beneficiaryTaxId;
  }

  public void setBeneficiaryTaxId(String beneficiaryTaxId) {
    this.beneficiaryTaxId = beneficiaryTaxId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionDetailedViewResponse transactionDetailedViewResponse = (TransactionDetailedViewResponse) o;
    return Objects.equals(this.displaySourceAccountNumber, transactionDetailedViewResponse.displaySourceAccountNumber) &&
        Objects.equals(this.paymentType, transactionDetailedViewResponse.paymentType) &&
        Objects.equals(this.transactionDescription, transactionDetailedViewResponse.transactionDescription) &&
        Objects.equals(this.transactionAmount, transactionDetailedViewResponse.transactionAmount) &&
        Objects.equals(this.transactionCurrencyCode, transactionDetailedViewResponse.transactionCurrencyCode) &&
        Objects.equals(this.transactionDate, transactionDetailedViewResponse.transactionDate) &&
        Objects.equals(this.foreignTransactionAmount, transactionDetailedViewResponse.foreignTransactionAmount) &&
        Objects.equals(this.foreignCurrencyCode, transactionDetailedViewResponse.foreignCurrencyCode) &&
        Objects.equals(this.foreignExchangeRate, transactionDetailedViewResponse.foreignExchangeRate) &&
        Objects.equals(this.transactionStatus, transactionDetailedViewResponse.transactionStatus) &&
        Objects.equals(this.transactionPostingDate, transactionDetailedViewResponse.transactionPostingDate) &&
        Objects.equals(this.customerName, transactionDetailedViewResponse.customerName) &&
        Objects.equals(this.customerAddress, transactionDetailedViewResponse.customerAddress) &&
        Objects.equals(this.beneficiaryBankDetails, transactionDetailedViewResponse.beneficiaryBankDetails) &&
        Objects.equals(this.customerMerchantReferenceDetails, transactionDetailedViewResponse.customerMerchantReferenceDetails) &&
        Objects.equals(this.remarks, transactionDetailedViewResponse.remarks) &&
        Objects.equals(this.paymentPriorityCode, transactionDetailedViewResponse.paymentPriorityCode) &&
        Objects.equals(this.merchantCode, transactionDetailedViewResponse.merchantCode) &&
        Objects.equals(this.merchantName, transactionDetailedViewResponse.merchantName) &&
        Objects.equals(this.transactionReversalDescription, transactionDetailedViewResponse.transactionReversalDescription) &&
        Objects.equals(this.originalTransactionDetails, transactionDetailedViewResponse.originalTransactionDetails) &&
        Objects.equals(this.endToEndIdentification, transactionDetailedViewResponse.endToEndIdentification) &&
        Objects.equals(this.creditorDetails, transactionDetailedViewResponse.creditorDetails) &&
        Objects.equals(this.debtorDetails, transactionDetailedViewResponse.debtorDetails) &&
        Objects.equals(this.sourceBankName, transactionDetailedViewResponse.sourceBankName) &&
        Objects.equals(this.sourceBankCode, transactionDetailedViewResponse.sourceBankCode) &&
        Objects.equals(this.clearingTimeStamp, transactionDetailedViewResponse.clearingTimeStamp) &&
        Objects.equals(this.settlementTimeStamp, transactionDetailedViewResponse.settlementTimeStamp) &&
        Objects.equals(this.centralBankTransactionReferenceId, transactionDetailedViewResponse.centralBankTransactionReferenceId) &&
        Objects.equals(this.originalCreditorDetails, transactionDetailedViewResponse.originalCreditorDetails) &&
        Objects.equals(this.originalCreditAccountDetails, transactionDetailedViewResponse.originalCreditAccountDetails) &&
        Objects.equals(this.originalDebtorName, transactionDetailedViewResponse.originalDebtorName) &&
        Objects.equals(this.originalDebitAccountDetails, transactionDetailedViewResponse.originalDebitAccountDetails) &&
        Objects.equals(this.transactionDebitFeeAmount, transactionDetailedViewResponse.transactionDebitFeeAmount) &&
        Objects.equals(this.bankMemberId, transactionDetailedViewResponse.bankMemberId) &&
        Objects.equals(this.beneficiaryLegalName, transactionDetailedViewResponse.beneficiaryLegalName) &&
        Objects.equals(this.beneficiaryAddress, transactionDetailedViewResponse.beneficiaryAddress) &&
        Objects.equals(this.beneficiaryTaxId, transactionDetailedViewResponse.beneficiaryTaxId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displaySourceAccountNumber, paymentType, transactionDescription, transactionAmount, transactionCurrencyCode, transactionDate, foreignTransactionAmount, foreignCurrencyCode, foreignExchangeRate, transactionStatus, transactionPostingDate, customerName, customerAddress, beneficiaryBankDetails, customerMerchantReferenceDetails, remarks, paymentPriorityCode, merchantCode, merchantName, transactionReversalDescription, originalTransactionDetails, endToEndIdentification, creditorDetails, debtorDetails, sourceBankName, sourceBankCode, clearingTimeStamp, settlementTimeStamp, centralBankTransactionReferenceId, originalCreditorDetails, originalCreditAccountDetails, originalDebtorName, originalDebitAccountDetails, transactionDebitFeeAmount, bankMemberId, beneficiaryLegalName, beneficiaryAddress, beneficiaryTaxId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionDetailedViewResponse {\n");
    
    sb.append("    displaySourceAccountNumber: ").append(toIndentedString(displaySourceAccountNumber)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    transactionDescription: ").append(toIndentedString(transactionDescription)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionCurrencyCode: ").append(toIndentedString(transactionCurrencyCode)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    foreignTransactionAmount: ").append(toIndentedString(foreignTransactionAmount)).append("\n");
    sb.append("    foreignCurrencyCode: ").append(toIndentedString(foreignCurrencyCode)).append("\n");
    sb.append("    foreignExchangeRate: ").append(toIndentedString(foreignExchangeRate)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    transactionPostingDate: ").append(toIndentedString(transactionPostingDate)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    customerAddress: ").append(toIndentedString(customerAddress)).append("\n");
    sb.append("    beneficiaryBankDetails: ").append(toIndentedString(beneficiaryBankDetails)).append("\n");
    sb.append("    customerMerchantReferenceDetails: ").append(toIndentedString(customerMerchantReferenceDetails)).append("\n");
    sb.append("    remarks: ").append(toIndentedString(remarks)).append("\n");
    sb.append("    paymentPriorityCode: ").append(toIndentedString(paymentPriorityCode)).append("\n");
    sb.append("    merchantCode: ").append(toIndentedString(merchantCode)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    transactionReversalDescription: ").append(toIndentedString(transactionReversalDescription)).append("\n");
    sb.append("    originalTransactionDetails: ").append(toIndentedString(originalTransactionDetails)).append("\n");
    sb.append("    endToEndIdentification: ").append(toIndentedString(endToEndIdentification)).append("\n");
    sb.append("    creditorDetails: ").append(toIndentedString(creditorDetails)).append("\n");
    sb.append("    debtorDetails: ").append(toIndentedString(debtorDetails)).append("\n");
    sb.append("    sourceBankName: ").append(toIndentedString(sourceBankName)).append("\n");
    sb.append("    sourceBankCode: ").append(toIndentedString(sourceBankCode)).append("\n");
    sb.append("    clearingTimeStamp: ").append(toIndentedString(clearingTimeStamp)).append("\n");
    sb.append("    settlementTimeStamp: ").append(toIndentedString(settlementTimeStamp)).append("\n");
    sb.append("    centralBankTransactionReferenceId: ").append(toIndentedString(centralBankTransactionReferenceId)).append("\n");
    sb.append("    originalCreditorDetails: ").append(toIndentedString(originalCreditorDetails)).append("\n");
    sb.append("    originalCreditAccountDetails: ").append(toIndentedString(originalCreditAccountDetails)).append("\n");
    sb.append("    originalDebtorName: ").append(toIndentedString(originalDebtorName)).append("\n");
    sb.append("    originalDebitAccountDetails: ").append(toIndentedString(originalDebitAccountDetails)).append("\n");
    sb.append("    transactionDebitFeeAmount: ").append(toIndentedString(transactionDebitFeeAmount)).append("\n");
    sb.append("    bankMemberId: ").append(toIndentedString(bankMemberId)).append("\n");
    sb.append("    beneficiaryLegalName: ").append(toIndentedString(beneficiaryLegalName)).append("\n");
    sb.append("    beneficiaryAddress: ").append(toIndentedString(beneficiaryAddress)).append("\n");
    sb.append("    beneficiaryTaxId: ").append(toIndentedString(beneficiaryTaxId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
