/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LoanTopupRecommendations;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * RequestedLoanTopupDecision
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class RequestedLoanTopupDecision {
  @SerializedName("loanOutstandingBalance")
  private Double loanOutstandingBalance = null;

  @SerializedName("loanTopupRecommendations")
  private List<LoanTopupRecommendations> loanTopupRecommendations = null;

  public RequestedLoanTopupDecision loanOutstandingBalance(Double loanOutstandingBalance) {
    this.loanOutstandingBalance = loanOutstandingBalance;
    return this;
  }

   /**
   * Existing loan outstanding balance amount
   * @return loanOutstandingBalance
  **/
  @Schema(example = "23000.25", description = "Existing loan outstanding balance amount")
  public Double getLoanOutstandingBalance() {
    return loanOutstandingBalance;
  }

  public void setLoanOutstandingBalance(Double loanOutstandingBalance) {
    this.loanOutstandingBalance = loanOutstandingBalance;
  }

  public RequestedLoanTopupDecision loanTopupRecommendations(List<LoanTopupRecommendations> loanTopupRecommendations) {
    this.loanTopupRecommendations = loanTopupRecommendations;
    return this;
  }

  public RequestedLoanTopupDecision addLoanTopupRecommendationsItem(LoanTopupRecommendations loanTopupRecommendationsItem) {
    if (this.loanTopupRecommendations == null) {
      this.loanTopupRecommendations = new ArrayList<LoanTopupRecommendations>();
    }
    this.loanTopupRecommendations.add(loanTopupRecommendationsItem);
    return this;
  }

   /**
   * Get loanTopupRecommendations
   * @return loanTopupRecommendations
  **/
  @Schema(description = "")
  public List<LoanTopupRecommendations> getLoanTopupRecommendations() {
    return loanTopupRecommendations;
  }

  public void setLoanTopupRecommendations(List<LoanTopupRecommendations> loanTopupRecommendations) {
    this.loanTopupRecommendations = loanTopupRecommendations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestedLoanTopupDecision requestedLoanTopupDecision = (RequestedLoanTopupDecision) o;
    return Objects.equals(this.loanOutstandingBalance, requestedLoanTopupDecision.loanOutstandingBalance) &&
        Objects.equals(this.loanTopupRecommendations, requestedLoanTopupDecision.loanTopupRecommendations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loanOutstandingBalance, loanTopupRecommendations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestedLoanTopupDecision {\n");
    
    sb.append("    loanOutstandingBalance: ").append(toIndentedString(loanOutstandingBalance)).append("\n");
    sb.append("    loanTopupRecommendations: ").append(toIndentedString(loanTopupRecommendations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
