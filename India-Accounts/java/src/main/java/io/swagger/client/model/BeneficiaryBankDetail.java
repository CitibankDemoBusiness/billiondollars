/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BeneficiaryBankDetail
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class BeneficiaryBankDetail {
  @SerializedName("beneficiaryBankCode")
  private String beneficiaryBankCode = null;

  @SerializedName("accountNumber")
  private String accountNumber = null;

  @SerializedName("beneficiaryBranchCode")
  private String beneficiaryBranchCode = null;

  @SerializedName("bankName")
  private String bankName = null;

  @SerializedName("beneficiaryName")
  private String beneficiaryName = null;

  public BeneficiaryBankDetail beneficiaryBankCode(String beneficiaryBankCode) {
    this.beneficiaryBankCode = beneficiaryBankCode;
    return this;
  }

   /**
   * Bank Code of the Beneficiary Account Number
   * @return beneficiaryBankCode
  **/
  @Schema(description = "Bank Code of the Beneficiary Account Number")
  public String getBeneficiaryBankCode() {
    return beneficiaryBankCode;
  }

  public void setBeneficiaryBankCode(String beneficiaryBankCode) {
    this.beneficiaryBankCode = beneficiaryBankCode;
  }

  public BeneficiaryBankDetail accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account.
   * @return accountNumber
  **/
  @Schema(example = "123456789", description = "Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account.")
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public BeneficiaryBankDetail beneficiaryBranchCode(String beneficiaryBranchCode) {
    this.beneficiaryBranchCode = beneficiaryBranchCode;
    return this;
  }

   /**
   * Branch Code of the Beneficiary Account Number
   * @return beneficiaryBranchCode
  **/
  @Schema(description = "Branch Code of the Beneficiary Account Number")
  public String getBeneficiaryBranchCode() {
    return beneficiaryBranchCode;
  }

  public void setBeneficiaryBranchCode(String beneficiaryBranchCode) {
    this.beneficiaryBranchCode = beneficiaryBranchCode;
  }

  public BeneficiaryBankDetail bankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

   /**
   * Name of the bank where the branch is associated
   * @return bankName
  **/
  @Schema(example = "ANZ BANK", description = "Name of the bank where the branch is associated")
  public String getBankName() {
    return bankName;
  }

  public void setBankName(String bankName) {
    this.bankName = bankName;
  }

  public BeneficiaryBankDetail beneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
    return this;
  }

   /**
   * Beneficiary Name
   * @return beneficiaryName
  **/
  @Schema(example = "TAN SHAN SHAN", description = "Beneficiary Name")
  public String getBeneficiaryName() {
    return beneficiaryName;
  }

  public void setBeneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BeneficiaryBankDetail beneficiaryBankDetail = (BeneficiaryBankDetail) o;
    return Objects.equals(this.beneficiaryBankCode, beneficiaryBankDetail.beneficiaryBankCode) &&
        Objects.equals(this.accountNumber, beneficiaryBankDetail.accountNumber) &&
        Objects.equals(this.beneficiaryBranchCode, beneficiaryBankDetail.beneficiaryBranchCode) &&
        Objects.equals(this.bankName, beneficiaryBankDetail.bankName) &&
        Objects.equals(this.beneficiaryName, beneficiaryBankDetail.beneficiaryName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beneficiaryBankCode, accountNumber, beneficiaryBranchCode, bankName, beneficiaryName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BeneficiaryBankDetail {\n");
    
    sb.append("    beneficiaryBankCode: ").append(toIndentedString(beneficiaryBankCode)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    beneficiaryBranchCode: ").append(toIndentedString(beneficiaryBranchCode)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    beneficiaryName: ").append(toIndentedString(beneficiaryName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
