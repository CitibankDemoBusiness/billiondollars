/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * EasyPaymentPlan
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class EasyPaymentPlan {
  @SerializedName("tenor")
  private String tenor = null;

  @SerializedName("effectiveInterestRate")
  private Double effectiveInterestRate = null;

  @SerializedName("annualPercentageRate")
  private Double annualPercentageRate = null;

  @SerializedName("installmentAmount")
  private Double installmentAmount = null;

  @SerializedName("oneTimeProcessingFeeIndicator")
  private String oneTimeProcessingFeeIndicator = null;

  @SerializedName("oneTimeProcessingFeeAmount")
  private Double oneTimeProcessingFeeAmount = null;

  @SerializedName("oneTimeProcessingFeePercentage")
  private Double oneTimeProcessingFeePercentage = null;

  @SerializedName("offerIndicator")
  private String offerIndicator = null;

  public EasyPaymentPlan tenor(String tenor) {
    this.tenor = tenor;
    return this;
  }

   /**
   * Tenure of loan in months.
   * @return tenor
  **/
  @Schema(example = "6", required = true, description = "Tenure of loan in months.")
  public String getTenor() {
    return tenor;
  }

  public void setTenor(String tenor) {
    this.tenor = tenor;
  }

  public EasyPaymentPlan effectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
    return this;
  }

   /**
   * The interest rate applicable on loan amount.
   * @return effectiveInterestRate
  **/
  @Schema(example = "12.99", description = "The interest rate applicable on loan amount.")
  public Double getEffectiveInterestRate() {
    return effectiveInterestRate;
  }

  public void setEffectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
  }

  public EasyPaymentPlan annualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
    return this;
  }

   /**
   * Interest rate for a whole year. This includes any fees or additional cost associated.
   * @return annualPercentageRate
  **/
  @Schema(example = "13.67", description = "Interest rate for a whole year. This includes any fees or additional cost associated.")
  public Double getAnnualPercentageRate() {
    return annualPercentageRate;
  }

  public void setAnnualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
  }

  public EasyPaymentPlan installmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
    return this;
  }

   /**
   * Installment amount to be paid by customer in order to repay the loan.
   * @return installmentAmount
  **/
  @Schema(example = "44.66", description = "Installment amount to be paid by customer in order to repay the loan.")
  public Double getInstallmentAmount() {
    return installmentAmount;
  }

  public void setInstallmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
  }

  public EasyPaymentPlan oneTimeProcessingFeeIndicator(String oneTimeProcessingFeeIndicator) {
    this.oneTimeProcessingFeeIndicator = oneTimeProcessingFeeIndicator;
    return this;
  }

   /**
   * One time processing fee indicator. Valid values : PERCENTAGE, FIXED_AMOUNT. This is a reference data field. Please use /v1/apac/utilities/referenceData/{oneTimeProcessingFeeIndicator} resource to get valid value of this field with description.
   * @return oneTimeProcessingFeeIndicator
  **/
  @Schema(example = "FIXED_AMOUNT", description = "One time processing fee indicator. Valid values : PERCENTAGE, FIXED_AMOUNT. This is a reference data field. Please use /v1/apac/utilities/referenceData/{oneTimeProcessingFeeIndicator} resource to get valid value of this field with description.")
  public String getOneTimeProcessingFeeIndicator() {
    return oneTimeProcessingFeeIndicator;
  }

  public void setOneTimeProcessingFeeIndicator(String oneTimeProcessingFeeIndicator) {
    this.oneTimeProcessingFeeIndicator = oneTimeProcessingFeeIndicator;
  }

  public EasyPaymentPlan oneTimeProcessingFeeAmount(Double oneTimeProcessingFeeAmount) {
    this.oneTimeProcessingFeeAmount = oneTimeProcessingFeeAmount;
    return this;
  }

   /**
   * Fee charged as part of one time processing.
   * @return oneTimeProcessingFeeAmount
  **/
  @Schema(example = "15.15", description = "Fee charged as part of one time processing.")
  public Double getOneTimeProcessingFeeAmount() {
    return oneTimeProcessingFeeAmount;
  }

  public void setOneTimeProcessingFeeAmount(Double oneTimeProcessingFeeAmount) {
    this.oneTimeProcessingFeeAmount = oneTimeProcessingFeeAmount;
  }

  public EasyPaymentPlan oneTimeProcessingFeePercentage(Double oneTimeProcessingFeePercentage) {
    this.oneTimeProcessingFeePercentage = oneTimeProcessingFeePercentage;
    return this;
  }

   /**
   * Percentage of one time processing fee charged.
   * @return oneTimeProcessingFeePercentage
  **/
  @Schema(example = "0.75", description = "Percentage of one time processing fee charged.")
  public Double getOneTimeProcessingFeePercentage() {
    return oneTimeProcessingFeePercentage;
  }

  public void setOneTimeProcessingFeePercentage(Double oneTimeProcessingFeePercentage) {
    this.oneTimeProcessingFeePercentage = oneTimeProcessingFeePercentage;
  }

  public EasyPaymentPlan offerIndicator(String offerIndicator) {
    this.offerIndicator = offerIndicator;
    return this;
  }

   /**
   * This is to indicate if the offer is rate/fee/hybrid based. This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description.
   * @return offerIndicator
  **/
  @Schema(example = "RATE_BASED", required = true, description = "This is to indicate if the offer is rate/fee/hybrid based. This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description.")
  public String getOfferIndicator() {
    return offerIndicator;
  }

  public void setOfferIndicator(String offerIndicator) {
    this.offerIndicator = offerIndicator;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EasyPaymentPlan easyPaymentPlan = (EasyPaymentPlan) o;
    return Objects.equals(this.tenor, easyPaymentPlan.tenor) &&
        Objects.equals(this.effectiveInterestRate, easyPaymentPlan.effectiveInterestRate) &&
        Objects.equals(this.annualPercentageRate, easyPaymentPlan.annualPercentageRate) &&
        Objects.equals(this.installmentAmount, easyPaymentPlan.installmentAmount) &&
        Objects.equals(this.oneTimeProcessingFeeIndicator, easyPaymentPlan.oneTimeProcessingFeeIndicator) &&
        Objects.equals(this.oneTimeProcessingFeeAmount, easyPaymentPlan.oneTimeProcessingFeeAmount) &&
        Objects.equals(this.oneTimeProcessingFeePercentage, easyPaymentPlan.oneTimeProcessingFeePercentage) &&
        Objects.equals(this.offerIndicator, easyPaymentPlan.offerIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenor, effectiveInterestRate, annualPercentageRate, installmentAmount, oneTimeProcessingFeeIndicator, oneTimeProcessingFeeAmount, oneTimeProcessingFeePercentage, offerIndicator);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EasyPaymentPlan {\n");
    
    sb.append("    tenor: ").append(toIndentedString(tenor)).append("\n");
    sb.append("    effectiveInterestRate: ").append(toIndentedString(effectiveInterestRate)).append("\n");
    sb.append("    annualPercentageRate: ").append(toIndentedString(annualPercentageRate)).append("\n");
    sb.append("    installmentAmount: ").append(toIndentedString(installmentAmount)).append("\n");
    sb.append("    oneTimeProcessingFeeIndicator: ").append(toIndentedString(oneTimeProcessingFeeIndicator)).append("\n");
    sb.append("    oneTimeProcessingFeeAmount: ").append(toIndentedString(oneTimeProcessingFeeAmount)).append("\n");
    sb.append("    oneTimeProcessingFeePercentage: ").append(toIndentedString(oneTimeProcessingFeePercentage)).append("\n");
    sb.append("    offerIndicator: ").append(toIndentedString(offerIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
