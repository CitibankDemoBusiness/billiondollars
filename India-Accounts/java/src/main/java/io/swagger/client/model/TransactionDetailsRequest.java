/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * TransactionDetailsRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class TransactionDetailsRequest {
  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("transactionFromDate")
  private LocalDate transactionFromDate = null;

  @SerializedName("transactionToDate")
  private LocalDate transactionToDate = null;

  @SerializedName("amountFrom")
  private Double amountFrom = null;

  @SerializedName("amountTo")
  private Double amountTo = null;

  @SerializedName("transactionStatus")
  private String transactionStatus = null;

  @SerializedName("transactionIndicator")
  private String transactionIndicator = null;

  @SerializedName("nextStartIndex")
  private String nextStartIndex = null;

  public TransactionDetailsRequest accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * The account identifier in encrypted format.Typically, this is not displayed to the customer.
   * @return accountId
  **/
  @Schema(example = "3255613852316f2b4d4d796c344e38756339654972776f663745446e6d4c32486f455a4165374a476858343d", required = true, description = "The account identifier in encrypted format.Typically, this is not displayed to the customer.")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public TransactionDetailsRequest currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code of the destination account in ISO 4217 format
   * @return currencyCode
  **/
  @Schema(example = "SGD", description = "The currency code of the destination account in ISO 4217 format")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public TransactionDetailsRequest transactionFromDate(LocalDate transactionFromDate) {
    this.transactionFromDate = transactionFromDate;
    return this;
  }

   /**
   * Starting range for transaction date in ISO 8601 date format &#x27;YYYY-MM-DD&#x27;. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products
   * @return transactionFromDate
  **/
  @Schema(example = "Sun Jan 01 00:00:00 UTC 2017", description = "Starting range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products")
  public LocalDate getTransactionFromDate() {
    return transactionFromDate;
  }

  public void setTransactionFromDate(LocalDate transactionFromDate) {
    this.transactionFromDate = transactionFromDate;
  }

  public TransactionDetailsRequest transactionToDate(LocalDate transactionToDate) {
    this.transactionToDate = transactionToDate;
    return this;
  }

   /**
   * End range for transaction date in ISO 8601 date format &#x27;YYYY-MM-DD&#x27;. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products.
   * @return transactionToDate
  **/
  @Schema(example = "Thu Jun 01 00:00:00 UTC 2017", description = "End range for transaction date in ISO 8601 date format 'YYYY-MM-DD'. Date Range: Upto last 12 months for CASA and last 3 Billing Cycle for credit card and ready credit accounts. Note :Applicable for advance search for  CASA / Ready Credt / Credit Card account products.")
  public LocalDate getTransactionToDate() {
    return transactionToDate;
  }

  public void setTransactionToDate(LocalDate transactionToDate) {
    this.transactionToDate = transactionToDate;
  }

  public TransactionDetailsRequest amountFrom(Double amountFrom) {
    this.amountFrom = amountFrom;
    return this;
  }

   /**
   * Starting range of transaction amount in the base currency. Note: Applicable for Investment accounts.
   * @return amountFrom
  **/
  @Schema(example = "2000.25", description = "Starting range of transaction amount in the base currency. Note: Applicable for Investment accounts.")
  public Double getAmountFrom() {
    return amountFrom;
  }

  public void setAmountFrom(Double amountFrom) {
    this.amountFrom = amountFrom;
  }

  public TransactionDetailsRequest amountTo(Double amountTo) {
    this.amountTo = amountTo;
    return this;
  }

   /**
   * End range of transaction amount in the base currency. Note: Applicable for Investment accounts.
   * @return amountTo
  **/
  @Schema(example = "1000.25", description = "End range of transaction amount in the base currency. Note: Applicable for Investment accounts.")
  public Double getAmountTo() {
    return amountTo;
  }

  public void setAmountTo(Double amountTo) {
    this.amountTo = amountTo;
  }

  public TransactionDetailsRequest transactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * Applicable for credit cards only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible value of this field with description.
   * @return transactionStatus
  **/
  @Schema(example = "ALL", description = "Applicable for credit cards only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible value of this field with description.")
  public String getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }

  public TransactionDetailsRequest transactionIndicator(String transactionIndicator) {
    this.transactionIndicator = transactionIndicator;
    return this;
  }

   /**
   * Indicates which card on an account was used for a transaction. Applicable only for credit cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionIndicator} resource to get possible value of this field with description.
   * @return transactionIndicator
  **/
  @Schema(example = "A", description = "Indicates which card on an account was used for a transaction. Applicable only for credit cards. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionIndicator} resource to get possible value of this field with description.")
  public String getTransactionIndicator() {
    return transactionIndicator;
  }

  public void setTransactionIndicator(String transactionIndicator) {
    this.transactionIndicator = transactionIndicator;
  }

  public TransactionDetailsRequest nextStartIndex(String nextStartIndex) {
    this.nextStartIndex = nextStartIndex;
    return this;
  }

   /**
   * In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
   * @return nextStartIndex
  **/
  @Schema(example = "11", description = "In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.")
  public String getNextStartIndex() {
    return nextStartIndex;
  }

  public void setNextStartIndex(String nextStartIndex) {
    this.nextStartIndex = nextStartIndex;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionDetailsRequest transactionDetailsRequest = (TransactionDetailsRequest) o;
    return Objects.equals(this.accountId, transactionDetailsRequest.accountId) &&
        Objects.equals(this.currencyCode, transactionDetailsRequest.currencyCode) &&
        Objects.equals(this.transactionFromDate, transactionDetailsRequest.transactionFromDate) &&
        Objects.equals(this.transactionToDate, transactionDetailsRequest.transactionToDate) &&
        Objects.equals(this.amountFrom, transactionDetailsRequest.amountFrom) &&
        Objects.equals(this.amountTo, transactionDetailsRequest.amountTo) &&
        Objects.equals(this.transactionStatus, transactionDetailsRequest.transactionStatus) &&
        Objects.equals(this.transactionIndicator, transactionDetailsRequest.transactionIndicator) &&
        Objects.equals(this.nextStartIndex, transactionDetailsRequest.nextStartIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, currencyCode, transactionFromDate, transactionToDate, amountFrom, amountTo, transactionStatus, transactionIndicator, nextStartIndex);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionDetailsRequest {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    transactionFromDate: ").append(toIndentedString(transactionFromDate)).append("\n");
    sb.append("    transactionToDate: ").append(toIndentedString(transactionToDate)).append("\n");
    sb.append("    amountFrom: ").append(toIndentedString(amountFrom)).append("\n");
    sb.append("    amountTo: ").append(toIndentedString(amountTo)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    transactionIndicator: ").append(toIndentedString(transactionIndicator)).append("\n");
    sb.append("    nextStartIndex: ").append(toIndentedString(nextStartIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
