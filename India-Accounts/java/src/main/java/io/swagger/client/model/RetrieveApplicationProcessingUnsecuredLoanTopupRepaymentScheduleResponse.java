/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.LoanScheduleDetails;
import io.swagger.client.model.LoanTopup;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse {
  @SerializedName("fixedPaymentAmount")
  private Double fixedPaymentAmount = null;

  @SerializedName("totalInterestAmount")
  private Double totalInterestAmount = null;

  @SerializedName("effectiveInterestRate")
  private Double effectiveInterestRate = null;

  @SerializedName("effectiveInterestRateWithFee")
  private Double effectiveInterestRateWithFee = null;

  @SerializedName("annualPercentageRate")
  private Double annualPercentageRate = null;

  @SerializedName("loanScheduleDetails")
  private List<LoanScheduleDetails> loanScheduleDetails = null;

  @SerializedName("loanTopup")
  private List<LoanTopup> loanTopup = null;

  public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse fixedPaymentAmount(Double fixedPaymentAmount) {
    this.fixedPaymentAmount = fixedPaymentAmount;
    return this;
  }

   /**
   * Fixed payment amount
   * @return fixedPaymentAmount
  **/
  @Schema(example = "12000.0", required = true, description = "Fixed payment amount")
  public Double getFixedPaymentAmount() {
    return fixedPaymentAmount;
  }

  public void setFixedPaymentAmount(Double fixedPaymentAmount) {
    this.fixedPaymentAmount = fixedPaymentAmount;
  }

  public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse totalInterestAmount(Double totalInterestAmount) {
    this.totalInterestAmount = totalInterestAmount;
    return this;
  }

   /**
   * Total interest amount
   * @return totalInterestAmount
  **/
  @Schema(example = "10000.0", required = true, description = "Total interest amount")
  public Double getTotalInterestAmount() {
    return totalInterestAmount;
  }

  public void setTotalInterestAmount(Double totalInterestAmount) {
    this.totalInterestAmount = totalInterestAmount;
  }

  public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse effectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
    return this;
  }

   /**
   * Effective interest rate
   * @return effectiveInterestRate
  **/
  @Schema(example = "6.8", description = "Effective interest rate")
  public Double getEffectiveInterestRate() {
    return effectiveInterestRate;
  }

  public void setEffectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
  }

  public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse effectiveInterestRateWithFee(Double effectiveInterestRateWithFee) {
    this.effectiveInterestRateWithFee = effectiveInterestRateWithFee;
    return this;
  }

   /**
   * Effective interest rate with fee
   * @return effectiveInterestRateWithFee
  **/
  @Schema(example = "16000.0", description = "Effective interest rate with fee")
  public Double getEffectiveInterestRateWithFee() {
    return effectiveInterestRateWithFee;
  }

  public void setEffectiveInterestRateWithFee(Double effectiveInterestRateWithFee) {
    this.effectiveInterestRateWithFee = effectiveInterestRateWithFee;
  }

  public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse annualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
    return this;
  }

   /**
   * Annual percentage rate
   * @return annualPercentageRate
  **/
  @Schema(example = "15000.0", description = "Annual percentage rate")
  public Double getAnnualPercentageRate() {
    return annualPercentageRate;
  }

  public void setAnnualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
  }

  public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse loanScheduleDetails(List<LoanScheduleDetails> loanScheduleDetails) {
    this.loanScheduleDetails = loanScheduleDetails;
    return this;
  }

  public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse addLoanScheduleDetailsItem(LoanScheduleDetails loanScheduleDetailsItem) {
    if (this.loanScheduleDetails == null) {
      this.loanScheduleDetails = new ArrayList<LoanScheduleDetails>();
    }
    this.loanScheduleDetails.add(loanScheduleDetailsItem);
    return this;
  }

   /**
   * Get loanScheduleDetails
   * @return loanScheduleDetails
  **/
  @Schema(description = "")
  public List<LoanScheduleDetails> getLoanScheduleDetails() {
    return loanScheduleDetails;
  }

  public void setLoanScheduleDetails(List<LoanScheduleDetails> loanScheduleDetails) {
    this.loanScheduleDetails = loanScheduleDetails;
  }

  public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse loanTopup(List<LoanTopup> loanTopup) {
    this.loanTopup = loanTopup;
    return this;
  }

  public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse addLoanTopupItem(LoanTopup loanTopupItem) {
    if (this.loanTopup == null) {
      this.loanTopup = new ArrayList<LoanTopup>();
    }
    this.loanTopup.add(loanTopupItem);
    return this;
  }

   /**
   * Get loanTopup
   * @return loanTopup
  **/
  @Schema(description = "")
  public List<LoanTopup> getLoanTopup() {
    return loanTopup;
  }

  public void setLoanTopup(List<LoanTopup> loanTopup) {
    this.loanTopup = loanTopup;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse = (RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse) o;
    return Objects.equals(this.fixedPaymentAmount, retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.fixedPaymentAmount) &&
        Objects.equals(this.totalInterestAmount, retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.totalInterestAmount) &&
        Objects.equals(this.effectiveInterestRate, retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.effectiveInterestRate) &&
        Objects.equals(this.effectiveInterestRateWithFee, retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.effectiveInterestRateWithFee) &&
        Objects.equals(this.annualPercentageRate, retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.annualPercentageRate) &&
        Objects.equals(this.loanScheduleDetails, retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.loanScheduleDetails) &&
        Objects.equals(this.loanTopup, retrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse.loanTopup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedPaymentAmount, totalInterestAmount, effectiveInterestRate, effectiveInterestRateWithFee, annualPercentageRate, loanScheduleDetails, loanTopup);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse {\n");
    
    sb.append("    fixedPaymentAmount: ").append(toIndentedString(fixedPaymentAmount)).append("\n");
    sb.append("    totalInterestAmount: ").append(toIndentedString(totalInterestAmount)).append("\n");
    sb.append("    effectiveInterestRate: ").append(toIndentedString(effectiveInterestRate)).append("\n");
    sb.append("    effectiveInterestRateWithFee: ").append(toIndentedString(effectiveInterestRateWithFee)).append("\n");
    sb.append("    annualPercentageRate: ").append(toIndentedString(annualPercentageRate)).append("\n");
    sb.append("    loanScheduleDetails: ").append(toIndentedString(loanScheduleDetails)).append("\n");
    sb.append("    loanTopup: ").append(toIndentedString(loanTopup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
