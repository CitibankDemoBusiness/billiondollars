/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Relationship;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * PremiumDepositAccount
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class PremiumDepositAccount {
  @SerializedName("productName")
  private String productName = null;

  @SerializedName("productCode")
  private String productCode = null;

  @SerializedName("displayAccountNumber")
  private String displayAccountNumber = null;

  @SerializedName("baseCurrencyPrincipalAmount")
  private Double baseCurrencyPrincipalAmount = null;

  @SerializedName("baseCurrencyCode")
  private String baseCurrencyCode = null;

  @SerializedName("alternateCurrencyPrincipalAmount")
  private Double alternateCurrencyPrincipalAmount = null;

  @SerializedName("openingDate")
  private LocalDate openingDate = null;

  @SerializedName("alternateCurrencyCode")
  private String alternateCurrencyCode = null;

  @SerializedName("baseCurrencyDisposalAccount")
  private String baseCurrencyDisposalAccount = null;

  @SerializedName("alternateCurrencyDisposalAccount")
  private String alternateCurrencyDisposalAccount = null;

  @SerializedName("baseCurrencyInterestAmount")
  private Double baseCurrencyInterestAmount = null;

  @SerializedName("alternateCurrencyInterestAmount")
  private Double alternateCurrencyInterestAmount = null;

  @SerializedName("baseCurrencyMaturityAmount")
  private Double baseCurrencyMaturityAmount = null;

  @SerializedName("alternateCurrencyMaturityAmount")
  private Double alternateCurrencyMaturityAmount = null;

  @SerializedName("baseCurrencyPremiumAmount")
  private Double baseCurrencyPremiumAmount = null;

  @SerializedName("maturityDate")
  private LocalDate maturityDate = null;

  @SerializedName("strikePrice")
  private Double strikePrice = null;

  @SerializedName("customerInterestRate")
  private Double customerInterestRate = null;

  @SerializedName("accruedInterestRate")
  private Double accruedInterestRate = null;

  @SerializedName("benchmarkInterestRate")
  private Double benchmarkInterestRate = null;

  @SerializedName("dealStatus")
  private String dealStatus = null;

  @SerializedName("expiryDate")
  private LocalDate expiryDate = null;

  @SerializedName("tenorTerm")
  private Integer tenorTerm = null;

  @SerializedName("tenorPeriod")
  private String tenorPeriod = null;

  @SerializedName("relationship")
  private Relationship relationship = null;

  public PremiumDepositAccount productName(String productName) {
    this.productName = productName;
    return this;
  }

   /**
   * The name of the product
   * @return productName
  **/
  @Schema(example = "Premium Deposit Account", description = "The name of the product")
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }

  public PremiumDepositAccount productCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

   /**
   * A unique code that identifies the product
   * @return productCode
  **/
  @Schema(example = "0061_VC401", description = "A unique code that identifies the product")
  public String getProductCode() {
    return productCode;
  }

  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }

  public PremiumDepositAccount displayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
    return this;
  }

   /**
   * A masked account number that can be displayed to the customer
   * @return displayAccountNumber
  **/
  @Schema(example = "XXXXXX2391", required = true, description = "A masked account number that can be displayed to the customer")
  public String getDisplayAccountNumber() {
    return displayAccountNumber;
  }

  public void setDisplayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
  }

  public PremiumDepositAccount baseCurrencyPrincipalAmount(Double baseCurrencyPrincipalAmount) {
    this.baseCurrencyPrincipalAmount = baseCurrencyPrincipalAmount;
    return this;
  }

   /**
   * The investment amount in base currency
   * @return baseCurrencyPrincipalAmount
  **/
  @Schema(example = "100000.25", description = "The investment amount in base currency")
  public Double getBaseCurrencyPrincipalAmount() {
    return baseCurrencyPrincipalAmount;
  }

  public void setBaseCurrencyPrincipalAmount(Double baseCurrencyPrincipalAmount) {
    this.baseCurrencyPrincipalAmount = baseCurrencyPrincipalAmount;
  }

  public PremiumDepositAccount baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

   /**
   * The base currency code in ISO 4217 format
   * @return baseCurrencyCode
  **/
  @Schema(example = "AUD", description = "The base currency code in ISO 4217 format")
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }

  public PremiumDepositAccount alternateCurrencyPrincipalAmount(Double alternateCurrencyPrincipalAmount) {
    this.alternateCurrencyPrincipalAmount = alternateCurrencyPrincipalAmount;
    return this;
  }

   /**
   * The investment amount in alternate currency
   * @return alternateCurrencyPrincipalAmount
  **/
  @Schema(example = "145000.25", description = "The investment amount in alternate currency")
  public Double getAlternateCurrencyPrincipalAmount() {
    return alternateCurrencyPrincipalAmount;
  }

  public void setAlternateCurrencyPrincipalAmount(Double alternateCurrencyPrincipalAmount) {
    this.alternateCurrencyPrincipalAmount = alternateCurrencyPrincipalAmount;
  }

  public PremiumDepositAccount openingDate(LocalDate openingDate) {
    this.openingDate = openingDate;
    return this;
  }

   /**
   * Premium deposit open date in ISO 8601 date format YYYY-MM-DD
   * @return openingDate
  **/
  @Schema(example = "Fri Dec 02 00:00:00 UTC 2016", description = "Premium deposit open date in ISO 8601 date format YYYY-MM-DD")
  public LocalDate getOpeningDate() {
    return openingDate;
  }

  public void setOpeningDate(LocalDate openingDate) {
    this.openingDate = openingDate;
  }

  public PremiumDepositAccount alternateCurrencyCode(String alternateCurrencyCode) {
    this.alternateCurrencyCode = alternateCurrencyCode;
    return this;
  }

   /**
   * The alternate currency code in ISO 4217 format
   * @return alternateCurrencyCode
  **/
  @Schema(example = "EUR", description = "The alternate currency code in ISO 4217 format")
  public String getAlternateCurrencyCode() {
    return alternateCurrencyCode;
  }

  public void setAlternateCurrencyCode(String alternateCurrencyCode) {
    this.alternateCurrencyCode = alternateCurrencyCode;
  }

  public PremiumDepositAccount baseCurrencyDisposalAccount(String baseCurrencyDisposalAccount) {
    this.baseCurrencyDisposalAccount = baseCurrencyDisposalAccount;
    return this;
  }

   /**
   * The account number to deposit returns of base currency, upon maturity
   * @return baseCurrencyDisposalAccount
  **/
  @Schema(example = "C036", description = "The account number to deposit returns of base currency, upon maturity")
  public String getBaseCurrencyDisposalAccount() {
    return baseCurrencyDisposalAccount;
  }

  public void setBaseCurrencyDisposalAccount(String baseCurrencyDisposalAccount) {
    this.baseCurrencyDisposalAccount = baseCurrencyDisposalAccount;
  }

  public PremiumDepositAccount alternateCurrencyDisposalAccount(String alternateCurrencyDisposalAccount) {
    this.alternateCurrencyDisposalAccount = alternateCurrencyDisposalAccount;
    return this;
  }

   /**
   * The account number to deposit returns of alternate currency, upon maturity
   * @return alternateCurrencyDisposalAccount
  **/
  @Schema(example = "C978", description = "The account number to deposit returns of alternate currency, upon maturity")
  public String getAlternateCurrencyDisposalAccount() {
    return alternateCurrencyDisposalAccount;
  }

  public void setAlternateCurrencyDisposalAccount(String alternateCurrencyDisposalAccount) {
    this.alternateCurrencyDisposalAccount = alternateCurrencyDisposalAccount;
  }

  public PremiumDepositAccount baseCurrencyInterestAmount(Double baseCurrencyInterestAmount) {
    this.baseCurrencyInterestAmount = baseCurrencyInterestAmount;
    return this;
  }

   /**
   * The accrued interest amount in base currency
   * @return baseCurrencyInterestAmount
  **/
  @Schema(example = "1000.25", description = "The accrued interest amount in base currency")
  public Double getBaseCurrencyInterestAmount() {
    return baseCurrencyInterestAmount;
  }

  public void setBaseCurrencyInterestAmount(Double baseCurrencyInterestAmount) {
    this.baseCurrencyInterestAmount = baseCurrencyInterestAmount;
  }

  public PremiumDepositAccount alternateCurrencyInterestAmount(Double alternateCurrencyInterestAmount) {
    this.alternateCurrencyInterestAmount = alternateCurrencyInterestAmount;
    return this;
  }

   /**
   * The accrued interest amount in alternate currency
   * @return alternateCurrencyInterestAmount
  **/
  @Schema(example = "1050.25", description = "The accrued interest amount in alternate currency")
  public Double getAlternateCurrencyInterestAmount() {
    return alternateCurrencyInterestAmount;
  }

  public void setAlternateCurrencyInterestAmount(Double alternateCurrencyInterestAmount) {
    this.alternateCurrencyInterestAmount = alternateCurrencyInterestAmount;
  }

  public PremiumDepositAccount baseCurrencyMaturityAmount(Double baseCurrencyMaturityAmount) {
    this.baseCurrencyMaturityAmount = baseCurrencyMaturityAmount;
    return this;
  }

   /**
   * The investment amount and accrued interest in base currency
   * @return baseCurrencyMaturityAmount
  **/
  @Schema(example = "145071.25", description = "The investment amount and accrued interest in base currency")
  public Double getBaseCurrencyMaturityAmount() {
    return baseCurrencyMaturityAmount;
  }

  public void setBaseCurrencyMaturityAmount(Double baseCurrencyMaturityAmount) {
    this.baseCurrencyMaturityAmount = baseCurrencyMaturityAmount;
  }

  public PremiumDepositAccount alternateCurrencyMaturityAmount(Double alternateCurrencyMaturityAmount) {
    this.alternateCurrencyMaturityAmount = alternateCurrencyMaturityAmount;
    return this;
  }

   /**
   * The investment amount and accrued interest in alternate currency
   * @return alternateCurrencyMaturityAmount
  **/
  @Schema(example = "90867.25", description = "The investment amount and accrued interest in alternate currency")
  public Double getAlternateCurrencyMaturityAmount() {
    return alternateCurrencyMaturityAmount;
  }

  public void setAlternateCurrencyMaturityAmount(Double alternateCurrencyMaturityAmount) {
    this.alternateCurrencyMaturityAmount = alternateCurrencyMaturityAmount;
  }

  public PremiumDepositAccount baseCurrencyPremiumAmount(Double baseCurrencyPremiumAmount) {
    this.baseCurrencyPremiumAmount = baseCurrencyPremiumAmount;
    return this;
  }

   /**
   * A part or all of the interest the customer earns on the Premium Account represents the premium that the bank pays the customer for the currency option
   * @return baseCurrencyPremiumAmount
  **/
  @Schema(example = "145000.25", description = "A part or all of the interest the customer earns on the Premium Account represents the premium that the bank pays the customer for the currency option")
  public Double getBaseCurrencyPremiumAmount() {
    return baseCurrencyPremiumAmount;
  }

  public void setBaseCurrencyPremiumAmount(Double baseCurrencyPremiumAmount) {
    this.baseCurrencyPremiumAmount = baseCurrencyPremiumAmount;
  }

  public PremiumDepositAccount maturityDate(LocalDate maturityDate) {
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * The date when the premium deposit will mature, in ISO8601 date format YYYY-MM-DD
   * @return maturityDate
  **/
  @Schema(example = "Mon Dec 31 00:00:00 UTC 2018", description = "The date when the premium deposit will mature, in ISO8601 date format YYYY-MM-DD")
  public LocalDate getMaturityDate() {
    return maturityDate;
  }

  public void setMaturityDate(LocalDate maturityDate) {
    this.maturityDate = maturityDate;
  }

  public PremiumDepositAccount strikePrice(Double strikePrice) {
    this.strikePrice = strikePrice;
    return this;
  }

   /**
   * The Pre-agreed exchange rate
   * @return strikePrice
  **/
  @Schema(example = "145.25", description = "The Pre-agreed exchange rate")
  public Double getStrikePrice() {
    return strikePrice;
  }

  public void setStrikePrice(Double strikePrice) {
    this.strikePrice = strikePrice;
  }

  public PremiumDepositAccount customerInterestRate(Double customerInterestRate) {
    this.customerInterestRate = customerInterestRate;
    return this;
  }

   /**
   * The customer interest rate applicable for the premium deposit
   * @return customerInterestRate
  **/
  @Schema(example = "4.01", description = "The customer interest rate applicable for the premium deposit")
  public Double getCustomerInterestRate() {
    return customerInterestRate;
  }

  public void setCustomerInterestRate(Double customerInterestRate) {
    this.customerInterestRate = customerInterestRate;
  }

  public PremiumDepositAccount accruedInterestRate(Double accruedInterestRate) {
    this.accruedInterestRate = accruedInterestRate;
    return this;
  }

   /**
   * The accrued interest rate applicable for the premium deposit
   * @return accruedInterestRate
  **/
  @Schema(example = "5.01", description = "The accrued interest rate applicable for the premium deposit")
  public Double getAccruedInterestRate() {
    return accruedInterestRate;
  }

  public void setAccruedInterestRate(Double accruedInterestRate) {
    this.accruedInterestRate = accruedInterestRate;
  }

  public PremiumDepositAccount benchmarkInterestRate(Double benchmarkInterestRate) {
    this.benchmarkInterestRate = benchmarkInterestRate;
    return this;
  }

   /**
   * The benchmark interest rate applicable for the premium deposit
   * @return benchmarkInterestRate
  **/
  @Schema(example = "4.01", description = "The benchmark interest rate applicable for the premium deposit")
  public Double getBenchmarkInterestRate() {
    return benchmarkInterestRate;
  }

  public void setBenchmarkInterestRate(Double benchmarkInterestRate) {
    this.benchmarkInterestRate = benchmarkInterestRate;
  }

  public PremiumDepositAccount dealStatus(String dealStatus) {
    this.dealStatus = dealStatus;
    return this;
  }

   /**
   * The deal status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{dealStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return dealStatus
  **/
  @Schema(example = "ACTIVE", description = "The deal status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{dealStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getDealStatus() {
    return dealStatus;
  }

  public void setDealStatus(String dealStatus) {
    this.dealStatus = dealStatus;
  }

  public PremiumDepositAccount expiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * The date when the premium deposit deal will expire, in ISO8601 date format YYYY-MM-DD
   * @return expiryDate
  **/
  @Schema(example = "Mon Dec 31 00:00:00 UTC 2018", description = "The date when the premium deposit deal will expire, in ISO8601 date format YYYY-MM-DD")
  public LocalDate getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
  }

  public PremiumDepositAccount tenorTerm(Integer tenorTerm) {
    this.tenorTerm = tenorTerm;
    return this;
  }

   /**
   * The tenor term for deposit
   * @return tenorTerm
  **/
  @Schema(example = "12", description = "The tenor term for deposit")
  public Integer getTenorTerm() {
    return tenorTerm;
  }

  public void setTenorTerm(Integer tenorTerm) {
    this.tenorTerm = tenorTerm;
  }

  public PremiumDepositAccount tenorPeriod(String tenorPeriod) {
    this.tenorPeriod = tenorPeriod;
    return this;
  }

   /**
   * This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return tenorPeriod
  **/
  @Schema(example = "MONTHS", description = "This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getTenorPeriod() {
    return tenorPeriod;
  }

  public void setTenorPeriod(String tenorPeriod) {
    this.tenorPeriod = tenorPeriod;
  }

  public PremiumDepositAccount relationship(Relationship relationship) {
    this.relationship = relationship;
    return this;
  }

   /**
   * Get relationship
   * @return relationship
  **/
  @Schema(description = "")
  public Relationship getRelationship() {
    return relationship;
  }

  public void setRelationship(Relationship relationship) {
    this.relationship = relationship;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PremiumDepositAccount premiumDepositAccount = (PremiumDepositAccount) o;
    return Objects.equals(this.productName, premiumDepositAccount.productName) &&
        Objects.equals(this.productCode, premiumDepositAccount.productCode) &&
        Objects.equals(this.displayAccountNumber, premiumDepositAccount.displayAccountNumber) &&
        Objects.equals(this.baseCurrencyPrincipalAmount, premiumDepositAccount.baseCurrencyPrincipalAmount) &&
        Objects.equals(this.baseCurrencyCode, premiumDepositAccount.baseCurrencyCode) &&
        Objects.equals(this.alternateCurrencyPrincipalAmount, premiumDepositAccount.alternateCurrencyPrincipalAmount) &&
        Objects.equals(this.openingDate, premiumDepositAccount.openingDate) &&
        Objects.equals(this.alternateCurrencyCode, premiumDepositAccount.alternateCurrencyCode) &&
        Objects.equals(this.baseCurrencyDisposalAccount, premiumDepositAccount.baseCurrencyDisposalAccount) &&
        Objects.equals(this.alternateCurrencyDisposalAccount, premiumDepositAccount.alternateCurrencyDisposalAccount) &&
        Objects.equals(this.baseCurrencyInterestAmount, premiumDepositAccount.baseCurrencyInterestAmount) &&
        Objects.equals(this.alternateCurrencyInterestAmount, premiumDepositAccount.alternateCurrencyInterestAmount) &&
        Objects.equals(this.baseCurrencyMaturityAmount, premiumDepositAccount.baseCurrencyMaturityAmount) &&
        Objects.equals(this.alternateCurrencyMaturityAmount, premiumDepositAccount.alternateCurrencyMaturityAmount) &&
        Objects.equals(this.baseCurrencyPremiumAmount, premiumDepositAccount.baseCurrencyPremiumAmount) &&
        Objects.equals(this.maturityDate, premiumDepositAccount.maturityDate) &&
        Objects.equals(this.strikePrice, premiumDepositAccount.strikePrice) &&
        Objects.equals(this.customerInterestRate, premiumDepositAccount.customerInterestRate) &&
        Objects.equals(this.accruedInterestRate, premiumDepositAccount.accruedInterestRate) &&
        Objects.equals(this.benchmarkInterestRate, premiumDepositAccount.benchmarkInterestRate) &&
        Objects.equals(this.dealStatus, premiumDepositAccount.dealStatus) &&
        Objects.equals(this.expiryDate, premiumDepositAccount.expiryDate) &&
        Objects.equals(this.tenorTerm, premiumDepositAccount.tenorTerm) &&
        Objects.equals(this.tenorPeriod, premiumDepositAccount.tenorPeriod) &&
        Objects.equals(this.relationship, premiumDepositAccount.relationship);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productName, productCode, displayAccountNumber, baseCurrencyPrincipalAmount, baseCurrencyCode, alternateCurrencyPrincipalAmount, openingDate, alternateCurrencyCode, baseCurrencyDisposalAccount, alternateCurrencyDisposalAccount, baseCurrencyInterestAmount, alternateCurrencyInterestAmount, baseCurrencyMaturityAmount, alternateCurrencyMaturityAmount, baseCurrencyPremiumAmount, maturityDate, strikePrice, customerInterestRate, accruedInterestRate, benchmarkInterestRate, dealStatus, expiryDate, tenorTerm, tenorPeriod, relationship);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PremiumDepositAccount {\n");
    
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    displayAccountNumber: ").append(toIndentedString(displayAccountNumber)).append("\n");
    sb.append("    baseCurrencyPrincipalAmount: ").append(toIndentedString(baseCurrencyPrincipalAmount)).append("\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    alternateCurrencyPrincipalAmount: ").append(toIndentedString(alternateCurrencyPrincipalAmount)).append("\n");
    sb.append("    openingDate: ").append(toIndentedString(openingDate)).append("\n");
    sb.append("    alternateCurrencyCode: ").append(toIndentedString(alternateCurrencyCode)).append("\n");
    sb.append("    baseCurrencyDisposalAccount: ").append(toIndentedString(baseCurrencyDisposalAccount)).append("\n");
    sb.append("    alternateCurrencyDisposalAccount: ").append(toIndentedString(alternateCurrencyDisposalAccount)).append("\n");
    sb.append("    baseCurrencyInterestAmount: ").append(toIndentedString(baseCurrencyInterestAmount)).append("\n");
    sb.append("    alternateCurrencyInterestAmount: ").append(toIndentedString(alternateCurrencyInterestAmount)).append("\n");
    sb.append("    baseCurrencyMaturityAmount: ").append(toIndentedString(baseCurrencyMaturityAmount)).append("\n");
    sb.append("    alternateCurrencyMaturityAmount: ").append(toIndentedString(alternateCurrencyMaturityAmount)).append("\n");
    sb.append("    baseCurrencyPremiumAmount: ").append(toIndentedString(baseCurrencyPremiumAmount)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
    sb.append("    customerInterestRate: ").append(toIndentedString(customerInterestRate)).append("\n");
    sb.append("    accruedInterestRate: ").append(toIndentedString(accruedInterestRate)).append("\n");
    sb.append("    benchmarkInterestRate: ").append(toIndentedString(benchmarkInterestRate)).append("\n");
    sb.append("    dealStatus: ").append(toIndentedString(dealStatus)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    tenorTerm: ").append(toIndentedString(tenorTerm)).append("\n");
    sb.append("    tenorPeriod: ").append(toIndentedString(tenorPeriod)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
