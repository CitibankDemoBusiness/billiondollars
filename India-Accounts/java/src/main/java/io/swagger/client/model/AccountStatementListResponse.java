/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.StatementList;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AccountStatementListResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class AccountStatementListResponse {
  @SerializedName("statementList")
  private List<StatementList> statementList = null;

  @SerializedName("nextStartIndex")
  private String nextStartIndex = null;

  public AccountStatementListResponse statementList(List<StatementList> statementList) {
    this.statementList = statementList;
    return this;
  }

  public AccountStatementListResponse addStatementListItem(StatementList statementListItem) {
    if (this.statementList == null) {
      this.statementList = new ArrayList<StatementList>();
    }
    this.statementList.add(statementListItem);
    return this;
  }

   /**
   * Get statementList
   * @return statementList
  **/
  @Schema(description = "")
  public List<StatementList> getStatementList() {
    return statementList;
  }

  public void setStatementList(List<StatementList> statementList) {
    this.statementList = statementList;
  }

  public AccountStatementListResponse nextStartIndex(String nextStartIndex) {
    this.nextStartIndex = nextStartIndex;
    return this;
  }

   /**
   * The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.
   * @return nextStartIndex
  **/
  @Schema(example = "11", description = "The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.")
  public String getNextStartIndex() {
    return nextStartIndex;
  }

  public void setNextStartIndex(String nextStartIndex) {
    this.nextStartIndex = nextStartIndex;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountStatementListResponse accountStatementListResponse = (AccountStatementListResponse) o;
    return Objects.equals(this.statementList, accountStatementListResponse.statementList) &&
        Objects.equals(this.nextStartIndex, accountStatementListResponse.nextStartIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statementList, nextStartIndex);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountStatementListResponse {\n");
    
    sb.append("    statementList: ").append(toIndentedString(statementList)).append("\n");
    sb.append("    nextStartIndex: ").append(toIndentedString(nextStartIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
