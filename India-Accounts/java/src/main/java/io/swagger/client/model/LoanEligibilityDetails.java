/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LoanEligibilityDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class LoanEligibilityDetails {
  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("displayAccountNumber")
  private String displayAccountNumber = null;

  @SerializedName("lopSupportedAccountGroup")
  private String lopSupportedAccountGroup = null;

  @SerializedName("maximumEligibleLoanAmount")
  private Double maximumEligibleLoanAmount = null;

  @SerializedName("minimumEligibleLoanAmount")
  private Double minimumEligibleLoanAmount = null;

  @SerializedName("offerIndicator")
  private String offerIndicator = null;

  @SerializedName("interestCalculationMethod")
  private String interestCalculationMethod = null;

  public LoanEligibilityDetails accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * The account id  in encrypted format.
   * @return accountId
  **/
  @Schema(example = "3255613852316f2b4d4d796c344e38756339654972776f663745446e6d4c32486f455a4165374a476858343d", required = true, description = "The account id  in encrypted format.")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public LoanEligibilityDetails displayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
    return this;
  }

   /**
   * A masked account number that can be displayed to the customer.
   * @return displayAccountNumber
  **/
  @Schema(example = "XXXXXXXXXXXX4521", required = true, description = "A masked account number that can be displayed to the customer.")
  public String getDisplayAccountNumber() {
    return displayAccountNumber;
  }

  public void setDisplayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
  }

  public LoanEligibilityDetails lopSupportedAccountGroup(String lopSupportedAccountGroup) {
    this.lopSupportedAccountGroup = lopSupportedAccountGroup;
    return this;
  }

   /**
   * This field refers the account group supported by Loan over phone. This is a reference data field. Please use /v1/utilities/referenceData/{lopSupportedAccountGroup} resource to get valid value of this field with description.
   * @return lopSupportedAccountGroup
  **/
  @Schema(example = "READY_CREDIT", description = "This field refers the account group supported by Loan over phone. This is a reference data field. Please use /v1/utilities/referenceData/{lopSupportedAccountGroup} resource to get valid value of this field with description.")
  public String getLopSupportedAccountGroup() {
    return lopSupportedAccountGroup;
  }

  public void setLopSupportedAccountGroup(String lopSupportedAccountGroup) {
    this.lopSupportedAccountGroup = lopSupportedAccountGroup;
  }

  public LoanEligibilityDetails maximumEligibleLoanAmount(Double maximumEligibleLoanAmount) {
    this.maximumEligibleLoanAmount = maximumEligibleLoanAmount;
    return this;
  }

   /**
   * This field indicates the maximum eligible amount for loan.
   * @return maximumEligibleLoanAmount
  **/
  @Schema(example = "25000.25", required = true, description = "This field indicates the maximum eligible amount for loan.")
  public Double getMaximumEligibleLoanAmount() {
    return maximumEligibleLoanAmount;
  }

  public void setMaximumEligibleLoanAmount(Double maximumEligibleLoanAmount) {
    this.maximumEligibleLoanAmount = maximumEligibleLoanAmount;
  }

  public LoanEligibilityDetails minimumEligibleLoanAmount(Double minimumEligibleLoanAmount) {
    this.minimumEligibleLoanAmount = minimumEligibleLoanAmount;
    return this;
  }

   /**
   * This field indicates the minimum eligible amount for loan.
   * @return minimumEligibleLoanAmount
  **/
  @Schema(example = "5000.25", description = "This field indicates the minimum eligible amount for loan.")
  public Double getMinimumEligibleLoanAmount() {
    return minimumEligibleLoanAmount;
  }

  public void setMinimumEligibleLoanAmount(Double minimumEligibleLoanAmount) {
    this.minimumEligibleLoanAmount = minimumEligibleLoanAmount;
  }

  public LoanEligibilityDetails offerIndicator(String offerIndicator) {
    this.offerIndicator = offerIndicator;
    return this;
  }

   /**
   * This is to indicate if the offer is rate/fee/hybrid based. This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description.
   * @return offerIndicator
  **/
  @Schema(example = "RATE_BASED", required = true, description = "This is to indicate if the offer is rate/fee/hybrid based. This is a reference data field. Please use /v1/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description.")
  public String getOfferIndicator() {
    return offerIndicator;
  }

  public void setOfferIndicator(String offerIndicator) {
    this.offerIndicator = offerIndicator;
  }

  public LoanEligibilityDetails interestCalculationMethod(String interestCalculationMethod) {
    this.interestCalculationMethod = interestCalculationMethod;
    return this;
  }

   /**
   * Interest calculation method. This is a reference data field. Please use /v1/utilities/referenceData/{interestCalculationMethod} resource to get valid value of this field with description.
   * @return interestCalculationMethod
  **/
  @Schema(example = "REDUCING_BALANCE_METHOD", description = "Interest calculation method. This is a reference data field. Please use /v1/utilities/referenceData/{interestCalculationMethod} resource to get valid value of this field with description.")
  public String getInterestCalculationMethod() {
    return interestCalculationMethod;
  }

  public void setInterestCalculationMethod(String interestCalculationMethod) {
    this.interestCalculationMethod = interestCalculationMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanEligibilityDetails loanEligibilityDetails = (LoanEligibilityDetails) o;
    return Objects.equals(this.accountId, loanEligibilityDetails.accountId) &&
        Objects.equals(this.displayAccountNumber, loanEligibilityDetails.displayAccountNumber) &&
        Objects.equals(this.lopSupportedAccountGroup, loanEligibilityDetails.lopSupportedAccountGroup) &&
        Objects.equals(this.maximumEligibleLoanAmount, loanEligibilityDetails.maximumEligibleLoanAmount) &&
        Objects.equals(this.minimumEligibleLoanAmount, loanEligibilityDetails.minimumEligibleLoanAmount) &&
        Objects.equals(this.offerIndicator, loanEligibilityDetails.offerIndicator) &&
        Objects.equals(this.interestCalculationMethod, loanEligibilityDetails.interestCalculationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, displayAccountNumber, lopSupportedAccountGroup, maximumEligibleLoanAmount, minimumEligibleLoanAmount, offerIndicator, interestCalculationMethod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanEligibilityDetails {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    displayAccountNumber: ").append(toIndentedString(displayAccountNumber)).append("\n");
    sb.append("    lopSupportedAccountGroup: ").append(toIndentedString(lopSupportedAccountGroup)).append("\n");
    sb.append("    maximumEligibleLoanAmount: ").append(toIndentedString(maximumEligibleLoanAmount)).append("\n");
    sb.append("    minimumEligibleLoanAmount: ").append(toIndentedString(minimumEligibleLoanAmount)).append("\n");
    sb.append("    offerIndicator: ").append(toIndentedString(offerIndicator)).append("\n");
    sb.append("    interestCalculationMethod: ").append(toIndentedString(interestCalculationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
