/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * LoanTopup
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class LoanTopup {
  @SerializedName("tenor")
  private String tenor = null;

  @SerializedName("interestRate")
  private Double interestRate = null;

  @SerializedName("installmentAmount")
  private Double installmentAmount = null;

  public LoanTopup tenor(String tenor) {
    this.tenor = tenor;
    return this;
  }

   /**
   * Tenor for the loan repayment.This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid values of this field with descriptions.
   * @return tenor
  **/
  @Schema(example = "36", description = "Tenor for the loan repayment.This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid values of this field with descriptions.")
  public String getTenor() {
    return tenor;
  }

  public void setTenor(String tenor) {
    this.tenor = tenor;
  }

  public LoanTopup interestRate(Double interestRate) {
    this.interestRate = interestRate;
    return this;
  }

   /**
   * annualPercentageRate -APR
   * @return interestRate
  **/
  @Schema(example = "23000.25", description = "annualPercentageRate -APR")
  public Double getInterestRate() {
    return interestRate;
  }

  public void setInterestRate(Double interestRate) {
    this.interestRate = interestRate;
  }

  public LoanTopup installmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
    return this;
  }

   /**
   * Instalment amount to be paid.
   * @return installmentAmount
  **/
  @Schema(example = "500.25", description = "Instalment amount to be paid.")
  public Double getInstallmentAmount() {
    return installmentAmount;
  }

  public void setInstallmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanTopup loanTopup = (LoanTopup) o;
    return Objects.equals(this.tenor, loanTopup.tenor) &&
        Objects.equals(this.interestRate, loanTopup.interestRate) &&
        Objects.equals(this.installmentAmount, loanTopup.installmentAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenor, interestRate, installmentAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanTopup {\n");
    
    sb.append("    tenor: ").append(toIndentedString(tenor)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    installmentAmount: ").append(toIndentedString(installmentAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
