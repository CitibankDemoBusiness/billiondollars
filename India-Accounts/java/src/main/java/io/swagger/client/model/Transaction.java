/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.LocalDate;
/**
 * Transaction
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class Transaction {
  @SerializedName("displayAccountNumber")
  private String displayAccountNumber = null;

  @SerializedName("transactionDate")
  private LocalDate transactionDate = null;

  @SerializedName("transactionDescription")
  private String transactionDescription = null;

  @SerializedName("transactionReferenceId")
  private String transactionReferenceId = null;

  @SerializedName("checkSerialNumber")
  private String checkSerialNumber = null;

  @SerializedName("transactionAmount")
  private Double transactionAmount = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("foreignTransactionAmount")
  private BigDecimal foreignTransactionAmount = null;

  @SerializedName("foreignCurrencyCode")
  private String foreignCurrencyCode = null;

  @SerializedName("foreignExchangeRate")
  private BigDecimal foreignExchangeRate = null;

  @SerializedName("transactionType")
  private String transactionType = null;

  @SerializedName("transactionStatus")
  private String transactionStatus = null;

  @SerializedName("runningBalance")
  private Double runningBalance = null;

  @SerializedName("transactionPostingDate")
  private LocalDate transactionPostingDate = null;

  @SerializedName("transactionCode")
  private String transactionCode = null;

  @SerializedName("merchantName")
  private String merchantName = null;

  @SerializedName("eligibleForEqualPaymentPlan")
  private String eligibleForEqualPaymentPlan = null;

  public Transaction displayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
    return this;
  }

   /**
   * A masked account number that can be displayed to the customer
   * @return displayAccountNumber
  **/
  @Schema(example = "XXXXXX2391", description = "A masked account number that can be displayed to the customer")
  public String getDisplayAccountNumber() {
    return displayAccountNumber;
  }

  public void setDisplayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
  }

  public Transaction transactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,
   * @return transactionDate
  **/
  @Schema(example = "Sun Jun 21 00:00:00 UTC 2015", description = "Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,")
  public LocalDate getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
  }

  public Transaction transactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
    return this;
  }

   /**
   * Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
   * @return transactionDescription
  **/
  @Schema(example = "INTEREST PAYMENT", description = "Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.")
  public String getTransactionDescription() {
    return transactionDescription;
  }

  public void setTransactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
  }

  public Transaction transactionReferenceId(String transactionReferenceId) {
    this.transactionReferenceId = transactionReferenceId;
    return this;
  }

   /**
   * Reference Id to uniquely identify the transaction
   * @return transactionReferenceId
  **/
  @Schema(example = "BIMI51807310002051", description = "Reference Id to uniquely identify the transaction")
  public String getTransactionReferenceId() {
    return transactionReferenceId;
  }

  public void setTransactionReferenceId(String transactionReferenceId) {
    this.transactionReferenceId = transactionReferenceId;
  }

  public Transaction checkSerialNumber(String checkSerialNumber) {
    this.checkSerialNumber = checkSerialNumber;
    return this;
  }

   /**
   * The check serial number. Applicable for checking accounts only
   * @return checkSerialNumber
  **/
  @Schema(example = "89000125", description = "The check serial number. Applicable for checking accounts only")
  public String getCheckSerialNumber() {
    return checkSerialNumber;
  }

  public void setCheckSerialNumber(String checkSerialNumber) {
    this.checkSerialNumber = checkSerialNumber;
  }

  public Transaction transactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Transaction amount in local currency.
   * @return transactionAmount
  **/
  @Schema(example = "50.55", description = "Transaction amount in local currency.")
  public Double getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
  }

  public Transaction currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code of the transaction in ISO 4217 format
   * @return currencyCode
  **/
  @Schema(example = "EUR", description = "The currency code of the transaction in ISO 4217 format")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public Transaction foreignTransactionAmount(BigDecimal foreignTransactionAmount) {
    this.foreignTransactionAmount = foreignTransactionAmount;
    return this;
  }

   /**
   * The transaction amount in the foreign currency
   * @return foreignTransactionAmount
  **/
  @Schema(example = "50.55", description = "The transaction amount in the foreign currency")
  public BigDecimal getForeignTransactionAmount() {
    return foreignTransactionAmount;
  }

  public void setForeignTransactionAmount(BigDecimal foreignTransactionAmount) {
    this.foreignTransactionAmount = foreignTransactionAmount;
  }

  public Transaction foreignCurrencyCode(String foreignCurrencyCode) {
    this.foreignCurrencyCode = foreignCurrencyCode;
    return this;
  }

   /**
   * The foreign currency code of the transaction in ISO 4217 format
   * @return foreignCurrencyCode
  **/
  @Schema(example = "USD", description = "The foreign currency code of the transaction in ISO 4217 format")
  public String getForeignCurrencyCode() {
    return foreignCurrencyCode;
  }

  public void setForeignCurrencyCode(String foreignCurrencyCode) {
    this.foreignCurrencyCode = foreignCurrencyCode;
  }

  public Transaction foreignExchangeRate(BigDecimal foreignExchangeRate) {
    this.foreignExchangeRate = foreignExchangeRate;
    return this;
  }

   /**
   * The exchange rate at the time the foreign transaction was done
   * @return foreignExchangeRate
  **/
  @Schema(example = "1.55", description = "The exchange rate at the time the foreign transaction was done")
  public BigDecimal getForeignExchangeRate() {
    return foreignExchangeRate;
  }

  public void setForeignExchangeRate(BigDecimal foreignExchangeRate) {
    this.foreignExchangeRate = foreignExchangeRate;
  }

  public Transaction transactionType(String transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * The type of transaction. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionType} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values
   * @return transactionType
  **/
  @Schema(example = "DEBIT", description = "The type of transaction. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionType} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values")
  public String getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }

  public Transaction transactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values
   * @return transactionStatus
  **/
  @Schema(example = "BILLED", description = "The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values")
  public String getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }

  public Transaction runningBalance(Double runningBalance) {
    this.runningBalance = runningBalance;
    return this;
  }

   /**
   * The amount available to transact immediately
   * @return runningBalance
  **/
  @Schema(example = "1485.8", description = "The amount available to transact immediately")
  public Double getRunningBalance() {
    return runningBalance;
  }

  public void setRunningBalance(Double runningBalance) {
    this.runningBalance = runningBalance;
  }

  public Transaction transactionPostingDate(LocalDate transactionPostingDate) {
    this.transactionPostingDate = transactionPostingDate;
    return this;
  }

   /**
   * Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting
   * @return transactionPostingDate
  **/
  @Schema(example = "Fri Dec 02 00:00:00 UTC 2016", description = "Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting")
  public LocalDate getTransactionPostingDate() {
    return transactionPostingDate;
  }

  public void setTransactionPostingDate(LocalDate transactionPostingDate) {
    this.transactionPostingDate = transactionPostingDate;
  }

  public Transaction transactionCode(String transactionCode) {
    this.transactionCode = transactionCode;
    return this;
  }

   /**
   * The transaction code
   * @return transactionCode
  **/
  @Schema(example = "260", description = "The transaction code")
  public String getTransactionCode() {
    return transactionCode;
  }

  public void setTransactionCode(String transactionCode) {
    this.transactionCode = transactionCode;
  }

  public Transaction merchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

   /**
   * The merchant name with which this transaction was made with
   * @return merchantName
  **/
  @Schema(example = "Alcott EU, Via Alberto Lionello, Roma", description = "The merchant name with which this transaction was made with")
  public String getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }

  public Transaction eligibleForEqualPaymentPlan(String eligibleForEqualPaymentPlan) {
    this.eligibleForEqualPaymentPlan = eligibleForEqualPaymentPlan;
    return this;
  }

   /**
   * The EPP allowed indicator. This is applicable for credit cards transactions only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{eligibleForEqualPaymentPlan} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values
   * @return eligibleForEqualPaymentPlan
  **/
  @Schema(example = "ELIGIBLE", description = "The EPP allowed indicator. This is applicable for credit cards transactions only. This is a reference data field. Please use /v1/apac/utilities/referenceData/{eligibleForEqualPaymentPlan} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values")
  public String getEligibleForEqualPaymentPlan() {
    return eligibleForEqualPaymentPlan;
  }

  public void setEligibleForEqualPaymentPlan(String eligibleForEqualPaymentPlan) {
    this.eligibleForEqualPaymentPlan = eligibleForEqualPaymentPlan;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.displayAccountNumber, transaction.displayAccountNumber) &&
        Objects.equals(this.transactionDate, transaction.transactionDate) &&
        Objects.equals(this.transactionDescription, transaction.transactionDescription) &&
        Objects.equals(this.transactionReferenceId, transaction.transactionReferenceId) &&
        Objects.equals(this.checkSerialNumber, transaction.checkSerialNumber) &&
        Objects.equals(this.transactionAmount, transaction.transactionAmount) &&
        Objects.equals(this.currencyCode, transaction.currencyCode) &&
        Objects.equals(this.foreignTransactionAmount, transaction.foreignTransactionAmount) &&
        Objects.equals(this.foreignCurrencyCode, transaction.foreignCurrencyCode) &&
        Objects.equals(this.foreignExchangeRate, transaction.foreignExchangeRate) &&
        Objects.equals(this.transactionType, transaction.transactionType) &&
        Objects.equals(this.transactionStatus, transaction.transactionStatus) &&
        Objects.equals(this.runningBalance, transaction.runningBalance) &&
        Objects.equals(this.transactionPostingDate, transaction.transactionPostingDate) &&
        Objects.equals(this.transactionCode, transaction.transactionCode) &&
        Objects.equals(this.merchantName, transaction.merchantName) &&
        Objects.equals(this.eligibleForEqualPaymentPlan, transaction.eligibleForEqualPaymentPlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayAccountNumber, transactionDate, transactionDescription, transactionReferenceId, checkSerialNumber, transactionAmount, currencyCode, foreignTransactionAmount, foreignCurrencyCode, foreignExchangeRate, transactionType, transactionStatus, runningBalance, transactionPostingDate, transactionCode, merchantName, eligibleForEqualPaymentPlan);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    
    sb.append("    displayAccountNumber: ").append(toIndentedString(displayAccountNumber)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    transactionDescription: ").append(toIndentedString(transactionDescription)).append("\n");
    sb.append("    transactionReferenceId: ").append(toIndentedString(transactionReferenceId)).append("\n");
    sb.append("    checkSerialNumber: ").append(toIndentedString(checkSerialNumber)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    foreignTransactionAmount: ").append(toIndentedString(foreignTransactionAmount)).append("\n");
    sb.append("    foreignCurrencyCode: ").append(toIndentedString(foreignCurrencyCode)).append("\n");
    sb.append("    foreignExchangeRate: ").append(toIndentedString(foreignExchangeRate)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    runningBalance: ").append(toIndentedString(runningBalance)).append("\n");
    sb.append("    transactionPostingDate: ").append(toIndentedString(transactionPostingDate)).append("\n");
    sb.append("    transactionCode: ").append(toIndentedString(transactionCode)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    eligibleForEqualPaymentPlan: ").append(toIndentedString(eligibleForEqualPaymentPlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
