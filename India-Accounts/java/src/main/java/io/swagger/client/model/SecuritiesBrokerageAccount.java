/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Relationship;
import io.swagger.client.model.Security;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * SecuritiesBrokerageAccount
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class SecuritiesBrokerageAccount {
  @SerializedName("productName")
  private String productName = null;

  @SerializedName("productCode")
  private String productCode = null;

  @SerializedName("displayAccountNumber")
  private String displayAccountNumber = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("totalSecuritiesValueAmount")
  private Double totalSecuritiesValueAmount = null;

  @SerializedName("totalTransactionAmount")
  private Double totalTransactionAmount = null;

  @SerializedName("totalUnrealizedGains")
  private Double totalUnrealizedGains = null;

  @SerializedName("relationship")
  private Relationship relationship = null;

  @SerializedName("security")
  private List<Security> security = null;

  public SecuritiesBrokerageAccount productName(String productName) {
    this.productName = productName;
    return this;
  }

   /**
   * The name of the product
   * @return productName
  **/
  @Schema(example = "Securities Brokerage Account", description = "The name of the product")
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }

  public SecuritiesBrokerageAccount productCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

   /**
   * A unique code that identifies the product
   * @return productCode
  **/
  @Schema(example = "0101_VC801", description = "A unique code that identifies the product")
  public String getProductCode() {
    return productCode;
  }

  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }

  public SecuritiesBrokerageAccount displayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
    return this;
  }

   /**
   * A masked account number that can be displayed to the customer
   * @return displayAccountNumber
  **/
  @Schema(example = "XXXXXX2391", required = true, description = "A masked account number that can be displayed to the customer")
  public String getDisplayAccountNumber() {
    return displayAccountNumber;
  }

  public void setDisplayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
  }

  public SecuritiesBrokerageAccount currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code of the account in ISO 4217 format
   * @return currencyCode
  **/
  @Schema(example = "EUR", description = "The currency code of the account in ISO 4217 format")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public SecuritiesBrokerageAccount totalSecuritiesValueAmount(Double totalSecuritiesValueAmount) {
    this.totalSecuritiesValueAmount = totalSecuritiesValueAmount;
    return this;
  }

   /**
   * The total market worth of securities
   * @return totalSecuritiesValueAmount
  **/
  @Schema(example = "5000.25", description = "The total market worth of securities")
  public Double getTotalSecuritiesValueAmount() {
    return totalSecuritiesValueAmount;
  }

  public void setTotalSecuritiesValueAmount(Double totalSecuritiesValueAmount) {
    this.totalSecuritiesValueAmount = totalSecuritiesValueAmount;
  }

  public SecuritiesBrokerageAccount totalTransactionAmount(Double totalTransactionAmount) {
    this.totalTransactionAmount = totalTransactionAmount;
    return this;
  }

   /**
   * Total transaction amount in local currency
   * @return totalTransactionAmount
  **/
  @Schema(example = "4500.25", description = "Total transaction amount in local currency")
  public Double getTotalTransactionAmount() {
    return totalTransactionAmount;
  }

  public void setTotalTransactionAmount(Double totalTransactionAmount) {
    this.totalTransactionAmount = totalTransactionAmount;
  }

  public SecuritiesBrokerageAccount totalUnrealizedGains(Double totalUnrealizedGains) {
    this.totalUnrealizedGains = totalUnrealizedGains;
    return this;
  }

   /**
   * Total unrealized gains amount, profitable position that has yet to be cashed in
   * @return totalUnrealizedGains
  **/
  @Schema(example = "500.25", description = "Total unrealized gains amount, profitable position that has yet to be cashed in")
  public Double getTotalUnrealizedGains() {
    return totalUnrealizedGains;
  }

  public void setTotalUnrealizedGains(Double totalUnrealizedGains) {
    this.totalUnrealizedGains = totalUnrealizedGains;
  }

  public SecuritiesBrokerageAccount relationship(Relationship relationship) {
    this.relationship = relationship;
    return this;
  }

   /**
   * Get relationship
   * @return relationship
  **/
  @Schema(description = "")
  public Relationship getRelationship() {
    return relationship;
  }

  public void setRelationship(Relationship relationship) {
    this.relationship = relationship;
  }

  public SecuritiesBrokerageAccount security(List<Security> security) {
    this.security = security;
    return this;
  }

  public SecuritiesBrokerageAccount addSecurityItem(Security securityItem) {
    if (this.security == null) {
      this.security = new ArrayList<Security>();
    }
    this.security.add(securityItem);
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @Schema(description = "")
  public List<Security> getSecurity() {
    return security;
  }

  public void setSecurity(List<Security> security) {
    this.security = security;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecuritiesBrokerageAccount securitiesBrokerageAccount = (SecuritiesBrokerageAccount) o;
    return Objects.equals(this.productName, securitiesBrokerageAccount.productName) &&
        Objects.equals(this.productCode, securitiesBrokerageAccount.productCode) &&
        Objects.equals(this.displayAccountNumber, securitiesBrokerageAccount.displayAccountNumber) &&
        Objects.equals(this.currencyCode, securitiesBrokerageAccount.currencyCode) &&
        Objects.equals(this.totalSecuritiesValueAmount, securitiesBrokerageAccount.totalSecuritiesValueAmount) &&
        Objects.equals(this.totalTransactionAmount, securitiesBrokerageAccount.totalTransactionAmount) &&
        Objects.equals(this.totalUnrealizedGains, securitiesBrokerageAccount.totalUnrealizedGains) &&
        Objects.equals(this.relationship, securitiesBrokerageAccount.relationship) &&
        Objects.equals(this.security, securitiesBrokerageAccount.security);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productName, productCode, displayAccountNumber, currencyCode, totalSecuritiesValueAmount, totalTransactionAmount, totalUnrealizedGains, relationship, security);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecuritiesBrokerageAccount {\n");
    
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    displayAccountNumber: ").append(toIndentedString(displayAccountNumber)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    totalSecuritiesValueAmount: ").append(toIndentedString(totalSecuritiesValueAmount)).append("\n");
    sb.append("    totalTransactionAmount: ").append(toIndentedString(totalTransactionAmount)).append("\n");
    sb.append("    totalUnrealizedGains: ").append(toIndentedString(totalUnrealizedGains)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
