/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.InvestmentTransaction;
import io.swagger.client.model.Statements;
import io.swagger.client.model.Transaction;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * TransactionDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class TransactionDetails {
  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("transactions")
  private List<Transaction> transactions = null;

  @SerializedName("statements")
  private List<Statements> statements = null;

  @SerializedName("investmentTransaction")
  private List<InvestmentTransaction> investmentTransaction = null;

  @SerializedName("transactionErrorDetails")
  private ErrorResponse transactionErrorDetails = null;

  @SerializedName("nextStartIndex")
  private String nextStartIndex = null;

  public TransactionDetails accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * The account identifier in encrypted format.Typically, this is not displayed to the customer.
   * @return accountId
  **/
  @Schema(example = "3255613852316f2b4d4d796c344e38756339654972776f663745446e6d4c32486f455a4165374a476858343d", required = true, description = "The account identifier in encrypted format.Typically, this is not displayed to the customer.")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public TransactionDetails transactions(List<Transaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public TransactionDetails addTransactionsItem(Transaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<Transaction>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions list
   * @return transactions
  **/
  @Schema(description = "Transactions list")
  public List<Transaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<Transaction> transactions) {
    this.transactions = transactions;
  }

  public TransactionDetails statements(List<Statements> statements) {
    this.statements = statements;
    return this;
  }

  public TransactionDetails addStatementsItem(Statements statementsItem) {
    if (this.statements == null) {
      this.statements = new ArrayList<Statements>();
    }
    this.statements.add(statementsItem);
    return this;
  }

   /**
   * Applicable only for credit cards and will be returned only in the first request. If there is additional data available then in subsequent request this will not be returned.
   * @return statements
  **/
  @Schema(description = "Applicable only for credit cards and will be returned only in the first request. If there is additional data available then in subsequent request this will not be returned.")
  public List<Statements> getStatements() {
    return statements;
  }

  public void setStatements(List<Statements> statements) {
    this.statements = statements;
  }

  public TransactionDetails investmentTransaction(List<InvestmentTransaction> investmentTransaction) {
    this.investmentTransaction = investmentTransaction;
    return this;
  }

  public TransactionDetails addInvestmentTransactionItem(InvestmentTransaction investmentTransactionItem) {
    if (this.investmentTransaction == null) {
      this.investmentTransaction = new ArrayList<InvestmentTransaction>();
    }
    this.investmentTransaction.add(investmentTransactionItem);
    return this;
  }

   /**
   * Investment Transactions list
   * @return investmentTransaction
  **/
  @Schema(description = "Investment Transactions list")
  public List<InvestmentTransaction> getInvestmentTransaction() {
    return investmentTransaction;
  }

  public void setInvestmentTransaction(List<InvestmentTransaction> investmentTransaction) {
    this.investmentTransaction = investmentTransaction;
  }

  public TransactionDetails transactionErrorDetails(ErrorResponse transactionErrorDetails) {
    this.transactionErrorDetails = transactionErrorDetails;
    return this;
  }

   /**
   * Get transactionErrorDetails
   * @return transactionErrorDetails
  **/
  @Schema(description = "")
  public ErrorResponse getTransactionErrorDetails() {
    return transactionErrorDetails;
  }

  public void setTransactionErrorDetails(ErrorResponse transactionErrorDetails) {
    this.transactionErrorDetails = transactionErrorDetails;
  }

  public TransactionDetails nextStartIndex(String nextStartIndex) {
    this.nextStartIndex = nextStartIndex;
    return this;
  }

   /**
   * In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
   * @return nextStartIndex
  **/
  @Schema(example = "11", description = "In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.")
  public String getNextStartIndex() {
    return nextStartIndex;
  }

  public void setNextStartIndex(String nextStartIndex) {
    this.nextStartIndex = nextStartIndex;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionDetails transactionDetails = (TransactionDetails) o;
    return Objects.equals(this.accountId, transactionDetails.accountId) &&
        Objects.equals(this.transactions, transactionDetails.transactions) &&
        Objects.equals(this.statements, transactionDetails.statements) &&
        Objects.equals(this.investmentTransaction, transactionDetails.investmentTransaction) &&
        Objects.equals(this.transactionErrorDetails, transactionDetails.transactionErrorDetails) &&
        Objects.equals(this.nextStartIndex, transactionDetails.nextStartIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, transactions, statements, investmentTransaction, transactionErrorDetails, nextStartIndex);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionDetails {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    statements: ").append(toIndentedString(statements)).append("\n");
    sb.append("    investmentTransaction: ").append(toIndentedString(investmentTransaction)).append("\n");
    sb.append("    transactionErrorDetails: ").append(toIndentedString(transactionErrorDetails)).append("\n");
    sb.append("    nextStartIndex: ").append(toIndentedString(nextStartIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
