/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.LocalDate;
/**
 * LoanAccount
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class LoanAccount {
  @SerializedName("productName")
  private String productName = null;

  @SerializedName("productCode")
  private String productCode = null;

  @SerializedName("displayAccountNumber")
  private String displayAccountNumber = null;

  @SerializedName("originalPrincipalAmount")
  private Double originalPrincipalAmount = null;

  @SerializedName("currentPrincipalAmount")
  private Double currentPrincipalAmount = null;

  @SerializedName("outstandingBalance")
  private Double outstandingBalance = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("maturityDate")
  private LocalDate maturityDate = null;

  @SerializedName("openingDate")
  private LocalDate openingDate = null;

  @SerializedName("lastPaymentDate")
  private LocalDate lastPaymentDate = null;

  @SerializedName("lastPaymentAmount")
  private Double lastPaymentAmount = null;

  @SerializedName("interestAmount")
  private Double interestAmount = null;

  @SerializedName("interestAccumulationPeriod")
  private String interestAccumulationPeriod = null;

  @SerializedName("nextPaymentAmount")
  private Double nextPaymentAmount = null;

  @SerializedName("nextPaymentDate")
  private LocalDate nextPaymentDate = null;

  @SerializedName("paymentFrequency")
  private String paymentFrequency = null;

  @SerializedName("interestType")
  private String interestType = null;

  @SerializedName("interestRate")
  private Double interestRate = null;

  @SerializedName("effectiveInterestRate")
  private Double effectiveInterestRate = null;

  @SerializedName("installmentAmount")
  private Double installmentAmount = null;

  @SerializedName("remainingTermNumber")
  private BigDecimal remainingTermNumber = null;

  @SerializedName("pastDueAmount")
  private Double pastDueAmount = null;

  @SerializedName("paidPrincipalAmount")
  private Double paidPrincipalAmount = null;

  @SerializedName("lateChargeAmount")
  private Double lateChargeAmount = null;

  public LoanAccount productName(String productName) {
    this.productName = productName;
    return this;
  }

   /**
   * The name of the product
   * @return productName
  **/
  @Schema(example = "Loan Account", description = "The name of the product")
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }

  public LoanAccount productCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

   /**
   * A unique code that identifies the product
   * @return productCode
  **/
  @Schema(example = "0800_VC601", description = "A unique code that identifies the product")
  public String getProductCode() {
    return productCode;
  }

  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }

  public LoanAccount displayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
    return this;
  }

   /**
   * A masked account number that can be displayed to the customer
   * @return displayAccountNumber
  **/
  @Schema(example = "XXXXXX2391", required = true, description = "A masked account number that can be displayed to the customer")
  public String getDisplayAccountNumber() {
    return displayAccountNumber;
  }

  public void setDisplayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
  }

  public LoanAccount originalPrincipalAmount(Double originalPrincipalAmount) {
    this.originalPrincipalAmount = originalPrincipalAmount;
    return this;
  }

   /**
   * The amount borrowed
   * @return originalPrincipalAmount
  **/
  @Schema(example = "200000.25", description = "The amount borrowed")
  public Double getOriginalPrincipalAmount() {
    return originalPrincipalAmount;
  }

  public void setOriginalPrincipalAmount(Double originalPrincipalAmount) {
    this.originalPrincipalAmount = originalPrincipalAmount;
  }

  public LoanAccount currentPrincipalAmount(Double currentPrincipalAmount) {
    this.currentPrincipalAmount = currentPrincipalAmount;
    return this;
  }

   /**
   * The remaining principal amount
   * @return currentPrincipalAmount
  **/
  @Schema(example = "18000.25", description = "The remaining principal amount")
  public Double getCurrentPrincipalAmount() {
    return currentPrincipalAmount;
  }

  public void setCurrentPrincipalAmount(Double currentPrincipalAmount) {
    this.currentPrincipalAmount = currentPrincipalAmount;
  }

  public LoanAccount outstandingBalance(Double outstandingBalance) {
    this.outstandingBalance = outstandingBalance;
    return this;
  }

   /**
   * The amount of money owed.
   * @return outstandingBalance
  **/
  @Schema(example = "20000.25", description = "The amount of money owed.")
  public Double getOutstandingBalance() {
    return outstandingBalance;
  }

  public void setOutstandingBalance(Double outstandingBalance) {
    this.outstandingBalance = outstandingBalance;
  }

  public LoanAccount currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code in ISO 4217 format
   * @return currencyCode
  **/
  @Schema(example = "EUR", description = "The currency code in ISO 4217 format")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public LoanAccount maturityDate(LocalDate maturityDate) {
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * Loan maturity date in ISO 8601 date format YYYY-MM-DD
   * @return maturityDate
  **/
  @Schema(example = "Thu Dec 31 00:00:00 UTC 2037", description = "Loan maturity date in ISO 8601 date format YYYY-MM-DD")
  public LocalDate getMaturityDate() {
    return maturityDate;
  }

  public void setMaturityDate(LocalDate maturityDate) {
    this.maturityDate = maturityDate;
  }

  public LoanAccount openingDate(LocalDate openingDate) {
    this.openingDate = openingDate;
    return this;
  }

   /**
   * Loan account opening date in ISO 8601 date format YYYY-MM-DD
   * @return openingDate
  **/
  @Schema(example = "Sat Dec 01 00:00:00 UTC 2007", description = "Loan account opening date in ISO 8601 date format YYYY-MM-DD")
  public LocalDate getOpeningDate() {
    return openingDate;
  }

  public void setOpeningDate(LocalDate openingDate) {
    this.openingDate = openingDate;
  }

  public LoanAccount lastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
    return this;
  }

   /**
   * The date of the last payment in ISO 8601 format YYYY-MM-DD
   * @return lastPaymentDate
  **/
  @Schema(example = "Tue Jan 14 00:00:00 UTC 2014", description = "The date of the last payment in ISO 8601 format YYYY-MM-DD")
  public LocalDate getLastPaymentDate() {
    return lastPaymentDate;
  }

  public void setLastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
  }

  public LoanAccount lastPaymentAmount(Double lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
    return this;
  }

   /**
   * The amount of the last payment made
   * @return lastPaymentAmount
  **/
  @Schema(example = "8463.25", description = "The amount of the last payment made")
  public Double getLastPaymentAmount() {
    return lastPaymentAmount;
  }

  public void setLastPaymentAmount(Double lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
  }

  public LoanAccount interestAmount(Double interestAmount) {
    this.interestAmount = interestAmount;
    return this;
  }

   /**
   * Interest amount paid for the mentioned period
   * @return interestAmount
  **/
  @Schema(example = "91504.81", description = "Interest amount paid for the mentioned period")
  public Double getInterestAmount() {
    return interestAmount;
  }

  public void setInterestAmount(Double interestAmount) {
    this.interestAmount = interestAmount;
  }

  public LoanAccount interestAccumulationPeriod(String interestAccumulationPeriod) {
    this.interestAccumulationPeriod = interestAccumulationPeriod;
    return this;
  }

   /**
   * The period of interest accumulation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestAccumulationPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return interestAccumulationPeriod
  **/
  @Schema(example = "YEAR_TO_DATE", description = "The period of interest accumulation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestAccumulationPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getInterestAccumulationPeriod() {
    return interestAccumulationPeriod;
  }

  public void setInterestAccumulationPeriod(String interestAccumulationPeriod) {
    this.interestAccumulationPeriod = interestAccumulationPeriod;
  }

  public LoanAccount nextPaymentAmount(Double nextPaymentAmount) {
    this.nextPaymentAmount = nextPaymentAmount;
    return this;
  }

   /**
   * The next payment amount due
   * @return nextPaymentAmount
  **/
  @Schema(example = "9230.67", description = "The next payment amount due")
  public Double getNextPaymentAmount() {
    return nextPaymentAmount;
  }

  public void setNextPaymentAmount(Double nextPaymentAmount) {
    this.nextPaymentAmount = nextPaymentAmount;
  }

  public LoanAccount nextPaymentDate(LocalDate nextPaymentDate) {
    this.nextPaymentDate = nextPaymentDate;
    return this;
  }

   /**
   * The date of the next payment in ISO 8601 date format YYYY-MM-DD
   * @return nextPaymentDate
  **/
  @Schema(example = "Wed Jun 13 00:00:00 UTC 2018", description = "The date of the next payment in ISO 8601 date format YYYY-MM-DD")
  public LocalDate getNextPaymentDate() {
    return nextPaymentDate;
  }

  public void setNextPaymentDate(LocalDate nextPaymentDate) {
    this.nextPaymentDate = nextPaymentDate;
  }

  public LoanAccount paymentFrequency(String paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
    return this;
  }

   /**
   * The payment frequency
   * @return paymentFrequency
  **/
  @Schema(example = "MONTHLY", description = "The payment frequency")
  public String getPaymentFrequency() {
    return paymentFrequency;
  }

  public void setPaymentFrequency(String paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
  }

  public LoanAccount interestType(String interestType) {
    this.interestType = interestType;
    return this;
  }

   /**
   * The interest type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return interestType
  **/
  @Schema(example = "VARIABLE", description = "The interest type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getInterestType() {
    return interestType;
  }

  public void setInterestType(String interestType) {
    this.interestType = interestType;
  }

  public LoanAccount interestRate(Double interestRate) {
    this.interestRate = interestRate;
    return this;
  }

   /**
   * Loan interest rate.
   * @return interestRate
  **/
  @Schema(example = "10.08", description = "Loan interest rate.")
  public Double getInterestRate() {
    return interestRate;
  }

  public void setInterestRate(Double interestRate) {
    this.interestRate = interestRate;
  }

  public LoanAccount effectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
    return this;
  }

   /**
   * Loan effective interest rate
   * @return effectiveInterestRate
  **/
  @Schema(example = "10.1", description = "Loan effective interest rate")
  public Double getEffectiveInterestRate() {
    return effectiveInterestRate;
  }

  public void setEffectiveInterestRate(Double effectiveInterestRate) {
    this.effectiveInterestRate = effectiveInterestRate;
  }

  public LoanAccount installmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
    return this;
  }

   /**
   * Installment loan payment amount
   * @return installmentAmount
  **/
  @Schema(example = "1200.25", description = "Installment loan payment amount")
  public Double getInstallmentAmount() {
    return installmentAmount;
  }

  public void setInstallmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
  }

  public LoanAccount remainingTermNumber(BigDecimal remainingTermNumber) {
    this.remainingTermNumber = remainingTermNumber;
    return this;
  }

   /**
   * Term remaining.
   * @return remainingTermNumber
  **/
  @Schema(example = "1200.25", description = "Term remaining.")
  public BigDecimal getRemainingTermNumber() {
    return remainingTermNumber;
  }

  public void setRemainingTermNumber(BigDecimal remainingTermNumber) {
    this.remainingTermNumber = remainingTermNumber;
  }

  public LoanAccount pastDueAmount(Double pastDueAmount) {
    this.pastDueAmount = pastDueAmount;
    return this;
  }

   /**
   * Past due is a loan payment that has not been made as of its due date
   * @return pastDueAmount
  **/
  @Schema(example = "20000.25", description = "Past due is a loan payment that has not been made as of its due date")
  public Double getPastDueAmount() {
    return pastDueAmount;
  }

  public void setPastDueAmount(Double pastDueAmount) {
    this.pastDueAmount = pastDueAmount;
  }

  public LoanAccount paidPrincipalAmount(Double paidPrincipalAmount) {
    this.paidPrincipalAmount = paidPrincipalAmount;
    return this;
  }

   /**
   * The amount of principal returned to the bank
   * @return paidPrincipalAmount
  **/
  @Schema(example = "200000.25", description = "The amount of principal returned to the bank")
  public Double getPaidPrincipalAmount() {
    return paidPrincipalAmount;
  }

  public void setPaidPrincipalAmount(Double paidPrincipalAmount) {
    this.paidPrincipalAmount = paidPrincipalAmount;
  }

  public LoanAccount lateChargeAmount(Double lateChargeAmount) {
    this.lateChargeAmount = lateChargeAmount;
    return this;
  }

   /**
   * Late charge amount applicable when amount is not paid by the due date
   * @return lateChargeAmount
  **/
  @Schema(example = "20000.25", description = "Late charge amount applicable when amount is not paid by the due date")
  public Double getLateChargeAmount() {
    return lateChargeAmount;
  }

  public void setLateChargeAmount(Double lateChargeAmount) {
    this.lateChargeAmount = lateChargeAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanAccount loanAccount = (LoanAccount) o;
    return Objects.equals(this.productName, loanAccount.productName) &&
        Objects.equals(this.productCode, loanAccount.productCode) &&
        Objects.equals(this.displayAccountNumber, loanAccount.displayAccountNumber) &&
        Objects.equals(this.originalPrincipalAmount, loanAccount.originalPrincipalAmount) &&
        Objects.equals(this.currentPrincipalAmount, loanAccount.currentPrincipalAmount) &&
        Objects.equals(this.outstandingBalance, loanAccount.outstandingBalance) &&
        Objects.equals(this.currencyCode, loanAccount.currencyCode) &&
        Objects.equals(this.maturityDate, loanAccount.maturityDate) &&
        Objects.equals(this.openingDate, loanAccount.openingDate) &&
        Objects.equals(this.lastPaymentDate, loanAccount.lastPaymentDate) &&
        Objects.equals(this.lastPaymentAmount, loanAccount.lastPaymentAmount) &&
        Objects.equals(this.interestAmount, loanAccount.interestAmount) &&
        Objects.equals(this.interestAccumulationPeriod, loanAccount.interestAccumulationPeriod) &&
        Objects.equals(this.nextPaymentAmount, loanAccount.nextPaymentAmount) &&
        Objects.equals(this.nextPaymentDate, loanAccount.nextPaymentDate) &&
        Objects.equals(this.paymentFrequency, loanAccount.paymentFrequency) &&
        Objects.equals(this.interestType, loanAccount.interestType) &&
        Objects.equals(this.interestRate, loanAccount.interestRate) &&
        Objects.equals(this.effectiveInterestRate, loanAccount.effectiveInterestRate) &&
        Objects.equals(this.installmentAmount, loanAccount.installmentAmount) &&
        Objects.equals(this.remainingTermNumber, loanAccount.remainingTermNumber) &&
        Objects.equals(this.pastDueAmount, loanAccount.pastDueAmount) &&
        Objects.equals(this.paidPrincipalAmount, loanAccount.paidPrincipalAmount) &&
        Objects.equals(this.lateChargeAmount, loanAccount.lateChargeAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productName, productCode, displayAccountNumber, originalPrincipalAmount, currentPrincipalAmount, outstandingBalance, currencyCode, maturityDate, openingDate, lastPaymentDate, lastPaymentAmount, interestAmount, interestAccumulationPeriod, nextPaymentAmount, nextPaymentDate, paymentFrequency, interestType, interestRate, effectiveInterestRate, installmentAmount, remainingTermNumber, pastDueAmount, paidPrincipalAmount, lateChargeAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanAccount {\n");
    
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    displayAccountNumber: ").append(toIndentedString(displayAccountNumber)).append("\n");
    sb.append("    originalPrincipalAmount: ").append(toIndentedString(originalPrincipalAmount)).append("\n");
    sb.append("    currentPrincipalAmount: ").append(toIndentedString(currentPrincipalAmount)).append("\n");
    sb.append("    outstandingBalance: ").append(toIndentedString(outstandingBalance)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    openingDate: ").append(toIndentedString(openingDate)).append("\n");
    sb.append("    lastPaymentDate: ").append(toIndentedString(lastPaymentDate)).append("\n");
    sb.append("    lastPaymentAmount: ").append(toIndentedString(lastPaymentAmount)).append("\n");
    sb.append("    interestAmount: ").append(toIndentedString(interestAmount)).append("\n");
    sb.append("    interestAccumulationPeriod: ").append(toIndentedString(interestAccumulationPeriod)).append("\n");
    sb.append("    nextPaymentAmount: ").append(toIndentedString(nextPaymentAmount)).append("\n");
    sb.append("    nextPaymentDate: ").append(toIndentedString(nextPaymentDate)).append("\n");
    sb.append("    paymentFrequency: ").append(toIndentedString(paymentFrequency)).append("\n");
    sb.append("    interestType: ").append(toIndentedString(interestType)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    effectiveInterestRate: ").append(toIndentedString(effectiveInterestRate)).append("\n");
    sb.append("    installmentAmount: ").append(toIndentedString(installmentAmount)).append("\n");
    sb.append("    remainingTermNumber: ").append(toIndentedString(remainingTermNumber)).append("\n");
    sb.append("    pastDueAmount: ").append(toIndentedString(pastDueAmount)).append("\n");
    sb.append("    paidPrincipalAmount: ").append(toIndentedString(paidPrincipalAmount)).append("\n");
    sb.append("    lateChargeAmount: ").append(toIndentedString(lateChargeAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
