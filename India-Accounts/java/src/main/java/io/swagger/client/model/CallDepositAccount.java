/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * CallDepositAccount
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class CallDepositAccount {
  @SerializedName("productName")
  private String productName = null;

  @SerializedName("productCode")
  private String productCode = null;

  @SerializedName("displayAccountNumber")
  private String displayAccountNumber = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("availableBalance")
  private Double availableBalance = null;

  @SerializedName("currentBalance")
  private Double currentBalance = null;

  @SerializedName("interestRate")
  private Double interestRate = null;

  @SerializedName("openingDate")
  private LocalDate openingDate = null;

  @SerializedName("baseCurrencyMaturityAmount")
  private Double baseCurrencyMaturityAmount = null;

  @SerializedName("lastInterestPaymentAmount")
  private Double lastInterestPaymentAmount = null;

  @SerializedName("lastInterestPaymentDate")
  private LocalDate lastInterestPaymentDate = null;

  public CallDepositAccount productName(String productName) {
    this.productName = productName;
    return this;
  }

   /**
   * The name of the product
   * @return productName
  **/
  @Schema(example = "Call Deposit Account", description = "The name of the product")
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }

  public CallDepositAccount productCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

   /**
   * A unique code that identifies the product
   * @return productCode
  **/
  @Schema(example = "0051_VC201", description = "A unique code that identifies the product")
  public String getProductCode() {
    return productCode;
  }

  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }

  public CallDepositAccount displayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
    return this;
  }

   /**
   * A masked account number that can be displayed to the customer
   * @return displayAccountNumber
  **/
  @Schema(example = "XXXXXX2391", required = true, description = "A masked account number that can be displayed to the customer")
  public String getDisplayAccountNumber() {
    return displayAccountNumber;
  }

  public void setDisplayAccountNumber(String displayAccountNumber) {
    this.displayAccountNumber = displayAccountNumber;
  }

  public CallDepositAccount currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code of the account in ISO 4217 format
   * @return currencyCode
  **/
  @Schema(example = "EUR", description = "The currency code of the account in ISO 4217 format")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public CallDepositAccount availableBalance(Double availableBalance) {
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * The amount available  to withdraw or transfer immediately
   * @return availableBalance
  **/
  @Schema(example = "15000.25", description = "The amount available  to withdraw or transfer immediately")
  public Double getAvailableBalance() {
    return availableBalance;
  }

  public void setAvailableBalance(Double availableBalance) {
    this.availableBalance = availableBalance;
  }

  public CallDepositAccount currentBalance(Double currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

   /**
   * The current balance including any pending or in progress deposits and withdrawals
   * @return currentBalance
  **/
  @Schema(example = "15000.25", description = "The current balance including any pending or in progress deposits and withdrawals")
  public Double getCurrentBalance() {
    return currentBalance;
  }

  public void setCurrentBalance(Double currentBalance) {
    this.currentBalance = currentBalance;
  }

  public CallDepositAccount interestRate(Double interestRate) {
    this.interestRate = interestRate;
    return this;
  }

   /**
   * The rate of interest applicable for the call deposit account
   * @return interestRate
  **/
  @Schema(example = "0.0125", description = "The rate of interest applicable for the call deposit account")
  public Double getInterestRate() {
    return interestRate;
  }

  public void setInterestRate(Double interestRate) {
    this.interestRate = interestRate;
  }

  public CallDepositAccount openingDate(LocalDate openingDate) {
    this.openingDate = openingDate;
    return this;
  }

   /**
   * Call deposit account opening date in ISO 8601 date format YYYY-MM-DD
   * @return openingDate
  **/
  @Schema(example = "Sat Dec 01 00:00:00 UTC 2007", description = "Call deposit account opening date in ISO 8601 date format YYYY-MM-DD")
  public LocalDate getOpeningDate() {
    return openingDate;
  }

  public void setOpeningDate(LocalDate openingDate) {
    this.openingDate = openingDate;
  }

  public CallDepositAccount baseCurrencyMaturityAmount(Double baseCurrencyMaturityAmount) {
    this.baseCurrencyMaturityAmount = baseCurrencyMaturityAmount;
    return this;
  }

   /**
   * Maturity amount on the call deposit account.
   * @return baseCurrencyMaturityAmount
  **/
  @Schema(example = "15000.25", description = "Maturity amount on the call deposit account.")
  public Double getBaseCurrencyMaturityAmount() {
    return baseCurrencyMaturityAmount;
  }

  public void setBaseCurrencyMaturityAmount(Double baseCurrencyMaturityAmount) {
    this.baseCurrencyMaturityAmount = baseCurrencyMaturityAmount;
  }

  public CallDepositAccount lastInterestPaymentAmount(Double lastInterestPaymentAmount) {
    this.lastInterestPaymentAmount = lastInterestPaymentAmount;
    return this;
  }

   /**
   * Last interest payment amount on the call deposit account.
   * @return lastInterestPaymentAmount
  **/
  @Schema(example = "500.25", description = "Last interest payment amount on the call deposit account.")
  public Double getLastInterestPaymentAmount() {
    return lastInterestPaymentAmount;
  }

  public void setLastInterestPaymentAmount(Double lastInterestPaymentAmount) {
    this.lastInterestPaymentAmount = lastInterestPaymentAmount;
  }

  public CallDepositAccount lastInterestPaymentDate(LocalDate lastInterestPaymentDate) {
    this.lastInterestPaymentDate = lastInterestPaymentDate;
    return this;
  }

   /**
   * Last interest payment date in ISO 8601 date format YYYY-MM-DD
   * @return lastInterestPaymentDate
  **/
  @Schema(example = "Fri Dec 02 00:00:00 UTC 2016", description = "Last interest payment date in ISO 8601 date format YYYY-MM-DD")
  public LocalDate getLastInterestPaymentDate() {
    return lastInterestPaymentDate;
  }

  public void setLastInterestPaymentDate(LocalDate lastInterestPaymentDate) {
    this.lastInterestPaymentDate = lastInterestPaymentDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallDepositAccount callDepositAccount = (CallDepositAccount) o;
    return Objects.equals(this.productName, callDepositAccount.productName) &&
        Objects.equals(this.productCode, callDepositAccount.productCode) &&
        Objects.equals(this.displayAccountNumber, callDepositAccount.displayAccountNumber) &&
        Objects.equals(this.currencyCode, callDepositAccount.currencyCode) &&
        Objects.equals(this.availableBalance, callDepositAccount.availableBalance) &&
        Objects.equals(this.currentBalance, callDepositAccount.currentBalance) &&
        Objects.equals(this.interestRate, callDepositAccount.interestRate) &&
        Objects.equals(this.openingDate, callDepositAccount.openingDate) &&
        Objects.equals(this.baseCurrencyMaturityAmount, callDepositAccount.baseCurrencyMaturityAmount) &&
        Objects.equals(this.lastInterestPaymentAmount, callDepositAccount.lastInterestPaymentAmount) &&
        Objects.equals(this.lastInterestPaymentDate, callDepositAccount.lastInterestPaymentDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productName, productCode, displayAccountNumber, currencyCode, availableBalance, currentBalance, interestRate, openingDate, baseCurrencyMaturityAmount, lastInterestPaymentAmount, lastInterestPaymentDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallDepositAccount {\n");
    
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    displayAccountNumber: ").append(toIndentedString(displayAccountNumber)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    openingDate: ").append(toIndentedString(openingDate)).append("\n");
    sb.append("    baseCurrencyMaturityAmount: ").append(toIndentedString(baseCurrencyMaturityAmount)).append("\n");
    sb.append("    lastInterestPaymentAmount: ").append(toIndentedString(lastInterestPaymentAmount)).append("\n");
    sb.append("    lastInterestPaymentDate: ").append(toIndentedString(lastInterestPaymentDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
