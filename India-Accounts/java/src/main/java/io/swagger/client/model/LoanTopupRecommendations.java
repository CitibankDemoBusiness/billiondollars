/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * LoanTopupRecommendations
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class LoanTopupRecommendations {
  @SerializedName("tenor")
  private String tenor = null;

  @SerializedName("loanTopupMiniumAmount")
  private Double loanTopupMiniumAmount = null;

  @SerializedName("loanTopupMaxiumAmount")
  private Double loanTopupMaxiumAmount = null;

  @SerializedName("annualPercentageRate")
  private Double annualPercentageRate = null;

  @SerializedName("loanAmount")
  private Double loanAmount = null;

  @SerializedName("interestRate")
  private Double interestRate = null;

  @SerializedName("handlingFee")
  private Double handlingFee = null;

  @SerializedName("installmentAmount")
  private Double installmentAmount = null;

  @SerializedName("totalPrincipalAmount")
  private Double totalPrincipalAmount = null;

  @SerializedName("totalInterestAmount")
  private Double totalInterestAmount = null;

  @SerializedName("totalInstallmentAmount")
  private Double totalInstallmentAmount = null;

  @SerializedName("repaymentScheduleIssueDate")
  private LocalDate repaymentScheduleIssueDate = null;

  public LoanTopupRecommendations tenor(String tenor) {
    this.tenor = tenor;
    return this;
  }

   /**
   * Tenor for the loan repayment.This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid values of this field with descriptions.
   * @return tenor
  **/
  @Schema(example = "36_MONTHS", description = "Tenor for the loan repayment.This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid values of this field with descriptions.")
  public String getTenor() {
    return tenor;
  }

  public void setTenor(String tenor) {
    this.tenor = tenor;
  }

  public LoanTopupRecommendations loanTopupMiniumAmount(Double loanTopupMiniumAmount) {
    this.loanTopupMiniumAmount = loanTopupMiniumAmount;
    return this;
  }

   /**
   * Recommended loan top-up Minim amount
   * @return loanTopupMiniumAmount
  **/
  @Schema(example = "23000.25", description = "Recommended loan top-up Minim amount")
  public Double getLoanTopupMiniumAmount() {
    return loanTopupMiniumAmount;
  }

  public void setLoanTopupMiniumAmount(Double loanTopupMiniumAmount) {
    this.loanTopupMiniumAmount = loanTopupMiniumAmount;
  }

  public LoanTopupRecommendations loanTopupMaxiumAmount(Double loanTopupMaxiumAmount) {
    this.loanTopupMaxiumAmount = loanTopupMaxiumAmount;
    return this;
  }

   /**
   * Recommended loan Topup Maxium amount
   * @return loanTopupMaxiumAmount
  **/
  @Schema(example = "23000.25", description = "Recommended loan Topup Maxium amount")
  public Double getLoanTopupMaxiumAmount() {
    return loanTopupMaxiumAmount;
  }

  public void setLoanTopupMaxiumAmount(Double loanTopupMaxiumAmount) {
    this.loanTopupMaxiumAmount = loanTopupMaxiumAmount;
  }

  public LoanTopupRecommendations annualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
    return this;
  }

   /**
   * annualPercentageRate -APR
   * @return annualPercentageRate
  **/
  @Schema(example = "23000.25", description = "annualPercentageRate -APR")
  public Double getAnnualPercentageRate() {
    return annualPercentageRate;
  }

  public void setAnnualPercentageRate(Double annualPercentageRate) {
    this.annualPercentageRate = annualPercentageRate;
  }

  public LoanTopupRecommendations loanAmount(Double loanAmount) {
    this.loanAmount = loanAmount;
    return this;
  }

   /**
   * Recommended loan amount.
   * @return loanAmount
  **/
  @Schema(example = "25000.25", description = "Recommended loan amount.")
  public Double getLoanAmount() {
    return loanAmount;
  }

  public void setLoanAmount(Double loanAmount) {
    this.loanAmount = loanAmount;
  }

  public LoanTopupRecommendations interestRate(Double interestRate) {
    this.interestRate = interestRate;
    return this;
  }

   /**
   * The rate of interest applicable for the product
   * @return interestRate
  **/
  @Schema(example = "5.25", description = "The rate of interest applicable for the product")
  public Double getInterestRate() {
    return interestRate;
  }

  public void setInterestRate(Double interestRate) {
    this.interestRate = interestRate;
  }

  public LoanTopupRecommendations handlingFee(Double handlingFee) {
    this.handlingFee = handlingFee;
    return this;
  }

   /**
   * One-time processing fee.
   * @return handlingFee
  **/
  @Schema(example = "5.25", description = "One-time processing fee.")
  public Double getHandlingFee() {
    return handlingFee;
  }

  public void setHandlingFee(Double handlingFee) {
    this.handlingFee = handlingFee;
  }

  public LoanTopupRecommendations installmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
    return this;
  }

   /**
   * Instalment amount to be paid.
   * @return installmentAmount
  **/
  @Schema(example = "500.25", description = "Instalment amount to be paid.")
  public Double getInstallmentAmount() {
    return installmentAmount;
  }

  public void setInstallmentAmount(Double installmentAmount) {
    this.installmentAmount = installmentAmount;
  }

  public LoanTopupRecommendations totalPrincipalAmount(Double totalPrincipalAmount) {
    this.totalPrincipalAmount = totalPrincipalAmount;
    return this;
  }

   /**
   * Total principal to be paid by customer
   * @return totalPrincipalAmount
  **/
  @Schema(example = "5000.25", description = "Total principal to be paid by customer")
  public Double getTotalPrincipalAmount() {
    return totalPrincipalAmount;
  }

  public void setTotalPrincipalAmount(Double totalPrincipalAmount) {
    this.totalPrincipalAmount = totalPrincipalAmount;
  }

  public LoanTopupRecommendations totalInterestAmount(Double totalInterestAmount) {
    this.totalInterestAmount = totalInterestAmount;
    return this;
  }

   /**
   * Total interest amount to be paid by applicant.
   * @return totalInterestAmount
  **/
  @Schema(example = "500.25", description = "Total interest amount to be paid by applicant.")
  public Double getTotalInterestAmount() {
    return totalInterestAmount;
  }

  public void setTotalInterestAmount(Double totalInterestAmount) {
    this.totalInterestAmount = totalInterestAmount;
  }

  public LoanTopupRecommendations totalInstallmentAmount(Double totalInstallmentAmount) {
    this.totalInstallmentAmount = totalInstallmentAmount;
    return this;
  }

   /**
   * Total instalment amount to be paid by customer
   * @return totalInstallmentAmount
  **/
  @Schema(example = "500.25", description = "Total instalment amount to be paid by customer")
  public Double getTotalInstallmentAmount() {
    return totalInstallmentAmount;
  }

  public void setTotalInstallmentAmount(Double totalInstallmentAmount) {
    this.totalInstallmentAmount = totalInstallmentAmount;
  }

  public LoanTopupRecommendations repaymentScheduleIssueDate(LocalDate repaymentScheduleIssueDate) {
    this.repaymentScheduleIssueDate = repaymentScheduleIssueDate;
    return this;
  }

   /**
   * Repayment schedule start date in ISO 8601 date format YYYY-MM-DD
   * @return repaymentScheduleIssueDate
  **/
  @Schema(description = "Repayment schedule start date in ISO 8601 date format YYYY-MM-DD")
  public LocalDate getRepaymentScheduleIssueDate() {
    return repaymentScheduleIssueDate;
  }

  public void setRepaymentScheduleIssueDate(LocalDate repaymentScheduleIssueDate) {
    this.repaymentScheduleIssueDate = repaymentScheduleIssueDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanTopupRecommendations loanTopupRecommendations = (LoanTopupRecommendations) o;
    return Objects.equals(this.tenor, loanTopupRecommendations.tenor) &&
        Objects.equals(this.loanTopupMiniumAmount, loanTopupRecommendations.loanTopupMiniumAmount) &&
        Objects.equals(this.loanTopupMaxiumAmount, loanTopupRecommendations.loanTopupMaxiumAmount) &&
        Objects.equals(this.annualPercentageRate, loanTopupRecommendations.annualPercentageRate) &&
        Objects.equals(this.loanAmount, loanTopupRecommendations.loanAmount) &&
        Objects.equals(this.interestRate, loanTopupRecommendations.interestRate) &&
        Objects.equals(this.handlingFee, loanTopupRecommendations.handlingFee) &&
        Objects.equals(this.installmentAmount, loanTopupRecommendations.installmentAmount) &&
        Objects.equals(this.totalPrincipalAmount, loanTopupRecommendations.totalPrincipalAmount) &&
        Objects.equals(this.totalInterestAmount, loanTopupRecommendations.totalInterestAmount) &&
        Objects.equals(this.totalInstallmentAmount, loanTopupRecommendations.totalInstallmentAmount) &&
        Objects.equals(this.repaymentScheduleIssueDate, loanTopupRecommendations.repaymentScheduleIssueDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenor, loanTopupMiniumAmount, loanTopupMaxiumAmount, annualPercentageRate, loanAmount, interestRate, handlingFee, installmentAmount, totalPrincipalAmount, totalInterestAmount, totalInstallmentAmount, repaymentScheduleIssueDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanTopupRecommendations {\n");
    
    sb.append("    tenor: ").append(toIndentedString(tenor)).append("\n");
    sb.append("    loanTopupMiniumAmount: ").append(toIndentedString(loanTopupMiniumAmount)).append("\n");
    sb.append("    loanTopupMaxiumAmount: ").append(toIndentedString(loanTopupMaxiumAmount)).append("\n");
    sb.append("    annualPercentageRate: ").append(toIndentedString(annualPercentageRate)).append("\n");
    sb.append("    loanAmount: ").append(toIndentedString(loanAmount)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    handlingFee: ").append(toIndentedString(handlingFee)).append("\n");
    sb.append("    installmentAmount: ").append(toIndentedString(installmentAmount)).append("\n");
    sb.append("    totalPrincipalAmount: ").append(toIndentedString(totalPrincipalAmount)).append("\n");
    sb.append("    totalInterestAmount: ").append(toIndentedString(totalInterestAmount)).append("\n");
    sb.append("    totalInstallmentAmount: ").append(toIndentedString(totalInstallmentAmount)).append("\n");
    sb.append("    repaymentScheduleIssueDate: ").append(toIndentedString(repaymentScheduleIssueDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
