/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AccountSummary;
import io.swagger.client.model.GroupBalance;
import io.swagger.client.model.InsurancePolicySummary;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AccountGroupSummary
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class AccountGroupSummary {
  @SerializedName("accountGroup")
  private String accountGroup = null;

  @SerializedName("accounts")
  private List<AccountSummary> accounts = new ArrayList<AccountSummary>();

  @SerializedName("insurancePolicies")
  private List<InsurancePolicySummary> insurancePolicies = null;

  @SerializedName("totalCurrentBalance")
  private GroupBalance totalCurrentBalance = null;

  @SerializedName("totalAvailableBalance")
  private GroupBalance totalAvailableBalance = null;

  @SerializedName("totalOutstandingBalance")
  private GroupBalance totalOutstandingBalance = null;

  public AccountGroupSummary accountGroup(String accountGroup) {
    this.accountGroup = accountGroup;
    return this;
  }

   /**
   * Account group is a classification of accounts according to their common characteristics. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountGroup} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return accountGroup
  **/
  @Schema(example = "SAVINGS", required = true, description = "Account group is a classification of accounts according to their common characteristics. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountGroup} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getAccountGroup() {
    return accountGroup;
  }

  public void setAccountGroup(String accountGroup) {
    this.accountGroup = accountGroup;
  }

  public AccountGroupSummary accounts(List<AccountSummary> accounts) {
    this.accounts = accounts;
    return this;
  }

  public AccountGroupSummary addAccountsItem(AccountSummary accountsItem) {
    this.accounts.add(accountsItem);
    return this;
  }

   /**
   * Summarized list of each account type under a specific product group, held by customer
   * @return accounts
  **/
  @Schema(required = true, description = "Summarized list of each account type under a specific product group, held by customer")
  public List<AccountSummary> getAccounts() {
    return accounts;
  }

  public void setAccounts(List<AccountSummary> accounts) {
    this.accounts = accounts;
  }

  public AccountGroupSummary insurancePolicies(List<InsurancePolicySummary> insurancePolicies) {
    this.insurancePolicies = insurancePolicies;
    return this;
  }

  public AccountGroupSummary addInsurancePoliciesItem(InsurancePolicySummary insurancePoliciesItem) {
    if (this.insurancePolicies == null) {
      this.insurancePolicies = new ArrayList<InsurancePolicySummary>();
    }
    this.insurancePolicies.add(insurancePoliciesItem);
    return this;
  }

   /**
   * Summarized list of every insurance policy held by the customer.
   * @return insurancePolicies
  **/
  @Schema(description = "Summarized list of every insurance policy held by the customer.")
  public List<InsurancePolicySummary> getInsurancePolicies() {
    return insurancePolicies;
  }

  public void setInsurancePolicies(List<InsurancePolicySummary> insurancePolicies) {
    this.insurancePolicies = insurancePolicies;
  }

  public AccountGroupSummary totalCurrentBalance(GroupBalance totalCurrentBalance) {
    this.totalCurrentBalance = totalCurrentBalance;
    return this;
  }

   /**
   * Get totalCurrentBalance
   * @return totalCurrentBalance
  **/
  @Schema(description = "")
  public GroupBalance getTotalCurrentBalance() {
    return totalCurrentBalance;
  }

  public void setTotalCurrentBalance(GroupBalance totalCurrentBalance) {
    this.totalCurrentBalance = totalCurrentBalance;
  }

  public AccountGroupSummary totalAvailableBalance(GroupBalance totalAvailableBalance) {
    this.totalAvailableBalance = totalAvailableBalance;
    return this;
  }

   /**
   * Get totalAvailableBalance
   * @return totalAvailableBalance
  **/
  @Schema(description = "")
  public GroupBalance getTotalAvailableBalance() {
    return totalAvailableBalance;
  }

  public void setTotalAvailableBalance(GroupBalance totalAvailableBalance) {
    this.totalAvailableBalance = totalAvailableBalance;
  }

  public AccountGroupSummary totalOutstandingBalance(GroupBalance totalOutstandingBalance) {
    this.totalOutstandingBalance = totalOutstandingBalance;
    return this;
  }

   /**
   * Get totalOutstandingBalance
   * @return totalOutstandingBalance
  **/
  @Schema(description = "")
  public GroupBalance getTotalOutstandingBalance() {
    return totalOutstandingBalance;
  }

  public void setTotalOutstandingBalance(GroupBalance totalOutstandingBalance) {
    this.totalOutstandingBalance = totalOutstandingBalance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountGroupSummary accountGroupSummary = (AccountGroupSummary) o;
    return Objects.equals(this.accountGroup, accountGroupSummary.accountGroup) &&
        Objects.equals(this.accounts, accountGroupSummary.accounts) &&
        Objects.equals(this.insurancePolicies, accountGroupSummary.insurancePolicies) &&
        Objects.equals(this.totalCurrentBalance, accountGroupSummary.totalCurrentBalance) &&
        Objects.equals(this.totalAvailableBalance, accountGroupSummary.totalAvailableBalance) &&
        Objects.equals(this.totalOutstandingBalance, accountGroupSummary.totalOutstandingBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountGroup, accounts, insurancePolicies, totalCurrentBalance, totalAvailableBalance, totalOutstandingBalance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountGroupSummary {\n");
    
    sb.append("    accountGroup: ").append(toIndentedString(accountGroup)).append("\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    insurancePolicies: ").append(toIndentedString(insurancePolicies)).append("\n");
    sb.append("    totalCurrentBalance: ").append(toIndentedString(totalCurrentBalance)).append("\n");
    sb.append("    totalAvailableBalance: ").append(toIndentedString(totalAvailableBalance)).append("\n");
    sb.append("    totalOutstandingBalance: ").append(toIndentedString(totalOutstandingBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
