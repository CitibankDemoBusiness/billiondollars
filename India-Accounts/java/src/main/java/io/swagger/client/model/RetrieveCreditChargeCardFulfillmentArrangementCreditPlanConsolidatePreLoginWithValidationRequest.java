/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BeneficiaryDetail;
import io.swagger.client.model.Loan;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest {
  @SerializedName("oldLoanList")
  private List<Loan> oldLoanList = null;

  @SerializedName("totalLoanAmount")
  private Double totalLoanAmount = null;

  @SerializedName("loanTenureInMonths")
  private Integer loanTenureInMonths = null;

  @SerializedName("topUpAmount")
  private Double topUpAmount = null;

  @SerializedName("disbursementOption")
  private String disbursementOption = null;

  @SerializedName("beneficiaryDetail")
  private BeneficiaryDetail beneficiaryDetail = null;

  @SerializedName("payeeId")
  private String payeeId = null;

  @SerializedName("loanPurpose")
  private String loanPurpose = null;

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest oldLoanList(List<Loan> oldLoanList) {
    this.oldLoanList = oldLoanList;
    return this;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest addOldLoanListItem(Loan oldLoanListItem) {
    if (this.oldLoanList == null) {
      this.oldLoanList = new ArrayList<Loan>();
    }
    this.oldLoanList.add(oldLoanListItem);
    return this;
  }

   /**
   * Get oldLoanList
   * @return oldLoanList
  **/
  @Schema(description = "")
  public List<Loan> getOldLoanList() {
    return oldLoanList;
  }

  public void setOldLoanList(List<Loan> oldLoanList) {
    this.oldLoanList = oldLoanList;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest totalLoanAmount(Double totalLoanAmount) {
    this.totalLoanAmount = totalLoanAmount;
    return this;
  }

   /**
   * Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount
   * @return totalLoanAmount
  **/
  @Schema(example = "10000.25", description = "Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount")
  public Double getTotalLoanAmount() {
    return totalLoanAmount;
  }

  public void setTotalLoanAmount(Double totalLoanAmount) {
    this.totalLoanAmount = totalLoanAmount;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest loanTenureInMonths(Integer loanTenureInMonths) {
    this.loanTenureInMonths = loanTenureInMonths;
    return this;
  }

   /**
   * Tenure of loan against credit card. It is considered in terms of number of months
   * @return loanTenureInMonths
  **/
  @Schema(example = "12", description = "Tenure of loan against credit card. It is considered in terms of number of months")
  public Integer getLoanTenureInMonths() {
    return loanTenureInMonths;
  }

  public void setLoanTenureInMonths(Integer loanTenureInMonths) {
    this.loanTenureInMonths = loanTenureInMonths;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest topUpAmount(Double topUpAmount) {
    this.topUpAmount = topUpAmount;
    return this;
  }

   /**
   * Additonal Topup Amount
   * @return topUpAmount
  **/
  @Schema(example = "200.5", description = "Additonal Topup Amount")
  public Double getTopUpAmount() {
    return topUpAmount;
  }

  public void setTopUpAmount(Double topUpAmount) {
    this.topUpAmount = topUpAmount;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest disbursementOption(String disbursementOption) {
    this.disbursementOption = disbursementOption;
    return this;
  }

   /**
   * This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.
   * @return disbursementOption
  **/
  @Schema(example = "PAYEE_ACCOUNT", description = "This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description.")
  public String getDisbursementOption() {
    return disbursementOption;
  }

  public void setDisbursementOption(String disbursementOption) {
    this.disbursementOption = disbursementOption;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest beneficiaryDetail(BeneficiaryDetail beneficiaryDetail) {
    this.beneficiaryDetail = beneficiaryDetail;
    return this;
  }

   /**
   * Get beneficiaryDetail
   * @return beneficiaryDetail
  **/
  @Schema(description = "")
  public BeneficiaryDetail getBeneficiaryDetail() {
    return beneficiaryDetail;
  }

  public void setBeneficiaryDetail(BeneficiaryDetail beneficiaryDetail) {
    this.beneficiaryDetail = beneficiaryDetail;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest payeeId(String payeeId) {
    this.payeeId = payeeId;
    return this;
  }

   /**
   * Payee Indicator to be mapped against Payee Detail Key
   * @return payeeId
  **/
  @Schema(example = "ABC1234", description = "Payee Indicator to be mapped against Payee Detail Key")
  public String getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(String payeeId) {
    this.payeeId = payeeId;
  }

  public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest loanPurpose(String loanPurpose) {
    this.loanPurpose = loanPurpose;
    return this;
  }

   /**
   * This field indicates the options/mode in which the loan amount will be disbursed
   * @return loanPurpose
  **/
  @Schema(example = "MEDICAL", description = "This field indicates the options/mode in which the loan amount will be disbursed")
  public String getLoanPurpose() {
    return loanPurpose;
  }

  public void setLoanPurpose(String loanPurpose) {
    this.loanPurpose = loanPurpose;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest = (RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest) o;
    return Objects.equals(this.oldLoanList, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest.oldLoanList) &&
        Objects.equals(this.totalLoanAmount, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest.totalLoanAmount) &&
        Objects.equals(this.loanTenureInMonths, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest.loanTenureInMonths) &&
        Objects.equals(this.topUpAmount, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest.topUpAmount) &&
        Objects.equals(this.disbursementOption, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest.disbursementOption) &&
        Objects.equals(this.beneficiaryDetail, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest.beneficiaryDetail) &&
        Objects.equals(this.payeeId, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest.payeeId) &&
        Objects.equals(this.loanPurpose, retrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest.loanPurpose);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oldLoanList, totalLoanAmount, loanTenureInMonths, topUpAmount, disbursementOption, beneficiaryDetail, payeeId, loanPurpose);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginWithValidationRequest {\n");
    
    sb.append("    oldLoanList: ").append(toIndentedString(oldLoanList)).append("\n");
    sb.append("    totalLoanAmount: ").append(toIndentedString(totalLoanAmount)).append("\n");
    sb.append("    loanTenureInMonths: ").append(toIndentedString(loanTenureInMonths)).append("\n");
    sb.append("    topUpAmount: ").append(toIndentedString(topUpAmount)).append("\n");
    sb.append("    disbursementOption: ").append(toIndentedString(disbursementOption)).append("\n");
    sb.append("    beneficiaryDetail: ").append(toIndentedString(beneficiaryDetail)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    loanPurpose: ").append(toIndentedString(loanPurpose)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
