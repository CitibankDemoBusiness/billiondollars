/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * Transactions
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class Transactions {
  @SerializedName("displayCardNumber")
  private String displayCardNumber = null;

  @SerializedName("cardHolderType")
  private String cardHolderType = null;

  @SerializedName("transactionDate")
  private LocalDate transactionDate = null;

  @SerializedName("transactionPostingDate")
  private LocalDate transactionPostingDate = null;

  @SerializedName("merchantName")
  private String merchantName = null;

  @SerializedName("transactionCode")
  private String transactionCode = null;

  @SerializedName("transactionDescription")
  private String transactionDescription = null;

  @SerializedName("transactionType")
  private String transactionType = null;

  @SerializedName("foreignTransactionAmount")
  private Double foreignTransactionAmount = null;

  @SerializedName("foreignCurrencyCode")
  private String foreignCurrencyCode = null;

  @SerializedName("transactionAmount")
  private Double transactionAmount = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("eligibleForEqualPaymentPlan")
  private String eligibleForEqualPaymentPlan = null;

  @SerializedName("transactionReferenceId")
  private String transactionReferenceId = null;

  public Transactions displayCardNumber(String displayCardNumber) {
    this.displayCardNumber = displayCardNumber;
    return this;
  }

   /**
   * A masked card number that can be displayed to the customer
   * @return displayCardNumber
  **/
  @Schema(example = "XXXXXXXXXXXX0368", required = true, description = "A masked card number that can be displayed to the customer")
  public String getDisplayCardNumber() {
    return displayCardNumber;
  }

  public void setDisplayCardNumber(String displayCardNumber) {
    this.displayCardNumber = displayCardNumber;
  }

  public Transactions cardHolderType(String cardHolderType) {
    this.cardHolderType = cardHolderType;
    return this;
  }

   /**
   * Indicator to specify whether the card is primary or supplementary.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return cardHolderType
  **/
  @Schema(example = "PRIMARY", description = "Indicator to specify whether the card is primary or supplementary.This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getCardHolderType() {
    return cardHolderType;
  }

  public void setCardHolderType(String cardHolderType) {
    this.cardHolderType = cardHolderType;
  }

  public Transactions transactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * The transaction date in ISO 8601 format YYYY-MM-DD
   * @return transactionDate
  **/
  @Schema(example = "Tue Jul 05 00:00:00 UTC 2016", description = "The transaction date in ISO 8601 format YYYY-MM-DD")
  public LocalDate getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
  }

  public Transactions transactionPostingDate(LocalDate transactionPostingDate) {
    this.transactionPostingDate = transactionPostingDate;
    return this;
  }

   /**
   * The transaction posting date in ISO 8601 format YYYY-MM-DD
   * @return transactionPostingDate
  **/
  @Schema(example = "Wed Jul 06 00:00:00 UTC 2016", description = "The transaction posting date in ISO 8601 format YYYY-MM-DD")
  public LocalDate getTransactionPostingDate() {
    return transactionPostingDate;
  }

  public void setTransactionPostingDate(LocalDate transactionPostingDate) {
    this.transactionPostingDate = transactionPostingDate;
  }

  public Transactions merchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

   /**
   * The merchant name with which this transaction was made.
   * @return merchantName
  **/
  @Schema(example = "LAZADA", description = "The merchant name with which this transaction was made.")
  public String getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }

  public Transactions transactionCode(String transactionCode) {
    this.transactionCode = transactionCode;
    return this;
  }

   /**
   * The transaction code
   * @return transactionCode
  **/
  @Schema(example = "260", description = "The transaction code")
  public String getTransactionCode() {
    return transactionCode;
  }

  public void setTransactionCode(String transactionCode) {
    this.transactionCode = transactionCode;
  }

  public Transactions transactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
    return this;
  }

   /**
   * Transaction description from the merchant, POS or bank.
   * @return transactionDescription
  **/
  @Schema(example = "INTEREST PAYMENT", description = "Transaction description from the merchant, POS or bank.")
  public String getTransactionDescription() {
    return transactionDescription;
  }

  public void setTransactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
  }

  public Transactions transactionType(String transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * The type of transaction. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return transactionType
  **/
  @Schema(example = "CREDIT", description = "The type of transaction. This is a reference data field. Please use /v1/apac/utilities/referenceData/{transactionType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(String transactionType) {
    this.transactionType = transactionType;
  }

  public Transactions foreignTransactionAmount(Double foreignTransactionAmount) {
    this.foreignTransactionAmount = foreignTransactionAmount;
    return this;
  }

   /**
   * The transaction amount in the foreign currency
   * @return foreignTransactionAmount
  **/
  @Schema(example = "6000.25", description = "The transaction amount in the foreign currency")
  public Double getForeignTransactionAmount() {
    return foreignTransactionAmount;
  }

  public void setForeignTransactionAmount(Double foreignTransactionAmount) {
    this.foreignTransactionAmount = foreignTransactionAmount;
  }

  public Transactions foreignCurrencyCode(String foreignCurrencyCode) {
    this.foreignCurrencyCode = foreignCurrencyCode;
    return this;
  }

   /**
   * The foreign currency code of the transaction in ISO 4217 format
   * @return foreignCurrencyCode
  **/
  @Schema(example = "SGD", description = "The foreign currency code of the transaction in ISO 4217 format")
  public String getForeignCurrencyCode() {
    return foreignCurrencyCode;
  }

  public void setForeignCurrencyCode(String foreignCurrencyCode) {
    this.foreignCurrencyCode = foreignCurrencyCode;
  }

  public Transactions transactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Transaction amount in local currency
   * @return transactionAmount
  **/
  @Schema(example = "6000.25", description = "Transaction amount in local currency")
  public Double getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
  }

  public Transactions currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code of the transaction in ISO 4217 format
   * @return currencyCode
  **/
  @Schema(example = "USD", description = "The currency code of the transaction in ISO 4217 format")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public Transactions eligibleForEqualPaymentPlan(String eligibleForEqualPaymentPlan) {
    this.eligibleForEqualPaymentPlan = eligibleForEqualPaymentPlan;
    return this;
  }

   /**
   * The EPP allowed indicator. This is a reference data field. Please use /v1/apac/utilities/referenceData/{eligibleForEqualPaymentPlan} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return eligibleForEqualPaymentPlan
  **/
  @Schema(example = "NOT_ELIGIBLE", description = "The EPP allowed indicator. This is a reference data field. Please use /v1/apac/utilities/referenceData/{eligibleForEqualPaymentPlan} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getEligibleForEqualPaymentPlan() {
    return eligibleForEqualPaymentPlan;
  }

  public void setEligibleForEqualPaymentPlan(String eligibleForEqualPaymentPlan) {
    this.eligibleForEqualPaymentPlan = eligibleForEqualPaymentPlan;
  }

  public Transactions transactionReferenceId(String transactionReferenceId) {
    this.transactionReferenceId = transactionReferenceId;
    return this;
  }

   /**
   * The unique transaction reference Id used to identify this transaction from all the other transactions,
   * @return transactionReferenceId
  **/
  @Schema(example = "BIMI51807310002051", description = "The unique transaction reference Id used to identify this transaction from all the other transactions,")
  public String getTransactionReferenceId() {
    return transactionReferenceId;
  }

  public void setTransactionReferenceId(String transactionReferenceId) {
    this.transactionReferenceId = transactionReferenceId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transactions transactions = (Transactions) o;
    return Objects.equals(this.displayCardNumber, transactions.displayCardNumber) &&
        Objects.equals(this.cardHolderType, transactions.cardHolderType) &&
        Objects.equals(this.transactionDate, transactions.transactionDate) &&
        Objects.equals(this.transactionPostingDate, transactions.transactionPostingDate) &&
        Objects.equals(this.merchantName, transactions.merchantName) &&
        Objects.equals(this.transactionCode, transactions.transactionCode) &&
        Objects.equals(this.transactionDescription, transactions.transactionDescription) &&
        Objects.equals(this.transactionType, transactions.transactionType) &&
        Objects.equals(this.foreignTransactionAmount, transactions.foreignTransactionAmount) &&
        Objects.equals(this.foreignCurrencyCode, transactions.foreignCurrencyCode) &&
        Objects.equals(this.transactionAmount, transactions.transactionAmount) &&
        Objects.equals(this.currencyCode, transactions.currencyCode) &&
        Objects.equals(this.eligibleForEqualPaymentPlan, transactions.eligibleForEqualPaymentPlan) &&
        Objects.equals(this.transactionReferenceId, transactions.transactionReferenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayCardNumber, cardHolderType, transactionDate, transactionPostingDate, merchantName, transactionCode, transactionDescription, transactionType, foreignTransactionAmount, foreignCurrencyCode, transactionAmount, currencyCode, eligibleForEqualPaymentPlan, transactionReferenceId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transactions {\n");
    
    sb.append("    displayCardNumber: ").append(toIndentedString(displayCardNumber)).append("\n");
    sb.append("    cardHolderType: ").append(toIndentedString(cardHolderType)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    transactionPostingDate: ").append(toIndentedString(transactionPostingDate)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    transactionCode: ").append(toIndentedString(transactionCode)).append("\n");
    sb.append("    transactionDescription: ").append(toIndentedString(transactionDescription)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    foreignTransactionAmount: ").append(toIndentedString(foreignTransactionAmount)).append("\n");
    sb.append("    foreignCurrencyCode: ").append(toIndentedString(foreignCurrencyCode)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    eligibleForEqualPaymentPlan: ").append(toIndentedString(eligibleForEqualPaymentPlan)).append("\n");
    sb.append("    transactionReferenceId: ").append(toIndentedString(transactionReferenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
