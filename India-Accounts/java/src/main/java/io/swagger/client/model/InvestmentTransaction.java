/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * InvestmentTransaction
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class InvestmentTransaction {
  @SerializedName("orderDate")
  private LocalDate orderDate = null;

  @SerializedName("orderReferenceId")
  private String orderReferenceId = null;

  @SerializedName("orderType")
  private String orderType = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("currencyCode")
  private String currencyCode = null;

  @SerializedName("transactionAmount")
  private Double transactionAmount = null;

  @SerializedName("price")
  private Double price = null;

  @SerializedName("orderStatus")
  private String orderStatus = null;

  @SerializedName("grossAmount")
  private Double grossAmount = null;

  @SerializedName("orderQuantity")
  private Double orderQuantity = null;

  @SerializedName("orderMedium")
  private String orderMedium = null;

  @SerializedName("filledQuantity")
  private Double filledQuantity = null;

  @SerializedName("balanceQuantity")
  private Double balanceQuantity = null;

  @SerializedName("stockMarketCode")
  private String stockMarketCode = null;

  public InvestmentTransaction orderDate(LocalDate orderDate) {
    this.orderDate = orderDate;
    return this;
  }

   /**
   * Order date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting
   * @return orderDate
  **/
  @Schema(example = "Mon Sep 05 00:00:00 UTC 2016", description = "Order date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting")
  public LocalDate getOrderDate() {
    return orderDate;
  }

  public void setOrderDate(LocalDate orderDate) {
    this.orderDate = orderDate;
  }

  public InvestmentTransaction orderReferenceId(String orderReferenceId) {
    this.orderReferenceId = orderReferenceId;
    return this;
  }

   /**
   * Reference Id to uniquely identify the investment transaction
   * @return orderReferenceId
  **/
  @Schema(example = "100234568743532", description = "Reference Id to uniquely identify the investment transaction")
  public String getOrderReferenceId() {
    return orderReferenceId;
  }

  public void setOrderReferenceId(String orderReferenceId) {
    this.orderReferenceId = orderReferenceId;
  }

  public InvestmentTransaction orderType(String orderType) {
    this.orderType = orderType;
    return this;
  }

   /**
   * This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderType} resource to get possible value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return orderType
  **/
  @Schema(example = "BUY", description = "This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderType} resource to get possible value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getOrderType() {
    return orderType;
  }

  public void setOrderType(String orderType) {
    this.orderType = orderType;
  }

  public InvestmentTransaction code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Order code to uniquely identify the transaction,
   * @return code
  **/
  @Schema(example = "BCF0001BB", description = "Order code to uniquely identify the transaction,")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public InvestmentTransaction name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Unique name  for fund/stock
   * @return name
  **/
  @Schema(example = "BIMI51807310002051", description = "Unique name  for fund/stock")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InvestmentTransaction currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code of the transaction in ISO 4217 format,
   * @return currencyCode
  **/
  @Schema(example = "EUR", description = "The currency code of the transaction in ISO 4217 format,")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public InvestmentTransaction transactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Transaction amount in local currency.
   * @return transactionAmount
  **/
  @Schema(example = "12500.12", description = "Transaction amount in local currency.")
  public Double getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
  }

  public InvestmentTransaction price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Order price of  trade
   * @return price
  **/
  @Schema(example = "21.32", description = "Order price of  trade")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public InvestmentTransaction orderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

   /**
   * This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderStatus} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return orderStatus
  **/
  @Schema(example = "SETTLED", description = "This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderStatus} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getOrderStatus() {
    return orderStatus;
  }

  public void setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
  }

  public InvestmentTransaction grossAmount(Double grossAmount) {
    this.grossAmount = grossAmount;
    return this;
  }

   /**
   * The total amount of the transaction
   * @return grossAmount
  **/
  @Schema(example = "5000.25", description = "The total amount of the transaction")
  public Double getGrossAmount() {
    return grossAmount;
  }

  public void setGrossAmount(Double grossAmount) {
    this.grossAmount = grossAmount;
  }

  public InvestmentTransaction orderQuantity(Double orderQuantity) {
    this.orderQuantity = orderQuantity;
    return this;
  }

   /**
   * Total number of units ordered
   * @return orderQuantity
  **/
  @Schema(example = "1100.0", description = "Total number of units ordered")
  public Double getOrderQuantity() {
    return orderQuantity;
  }

  public void setOrderQuantity(Double orderQuantity) {
    this.orderQuantity = orderQuantity;
  }

  public InvestmentTransaction orderMedium(String orderMedium) {
    this.orderMedium = orderMedium;
    return this;
  }

   /**
   * The medium used by customer to place order.This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderMedium} resource to get possible values of This field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values.
   * @return orderMedium
  **/
  @Schema(example = "INTERNET", description = "The medium used by customer to place order.This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderMedium} resource to get possible values of This field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values.")
  public String getOrderMedium() {
    return orderMedium;
  }

  public void setOrderMedium(String orderMedium) {
    this.orderMedium = orderMedium;
  }

  public InvestmentTransaction filledQuantity(Double filledQuantity) {
    this.filledQuantity = filledQuantity;
    return this;
  }

   /**
   * Number of units received
   * @return filledQuantity
  **/
  @Schema(example = "1100.0", description = "Number of units received")
  public Double getFilledQuantity() {
    return filledQuantity;
  }

  public void setFilledQuantity(Double filledQuantity) {
    this.filledQuantity = filledQuantity;
  }

  public InvestmentTransaction balanceQuantity(Double balanceQuantity) {
    this.balanceQuantity = balanceQuantity;
    return this;
  }

   /**
   * Number of units not received
   * @return balanceQuantity
  **/
  @Schema(example = "1255.0", description = "Number of units not received")
  public Double getBalanceQuantity() {
    return balanceQuantity;
  }

  public void setBalanceQuantity(Double balanceQuantity) {
    this.balanceQuantity = balanceQuantity;
  }

  public InvestmentTransaction stockMarketCode(String stockMarketCode) {
    this.stockMarketCode = stockMarketCode;
    return this;
  }

   /**
   * Trading market code for securities
   * @return stockMarketCode
  **/
  @Schema(example = "NYSE", description = "Trading market code for securities")
  public String getStockMarketCode() {
    return stockMarketCode;
  }

  public void setStockMarketCode(String stockMarketCode) {
    this.stockMarketCode = stockMarketCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvestmentTransaction investmentTransaction = (InvestmentTransaction) o;
    return Objects.equals(this.orderDate, investmentTransaction.orderDate) &&
        Objects.equals(this.orderReferenceId, investmentTransaction.orderReferenceId) &&
        Objects.equals(this.orderType, investmentTransaction.orderType) &&
        Objects.equals(this.code, investmentTransaction.code) &&
        Objects.equals(this.name, investmentTransaction.name) &&
        Objects.equals(this.currencyCode, investmentTransaction.currencyCode) &&
        Objects.equals(this.transactionAmount, investmentTransaction.transactionAmount) &&
        Objects.equals(this.price, investmentTransaction.price) &&
        Objects.equals(this.orderStatus, investmentTransaction.orderStatus) &&
        Objects.equals(this.grossAmount, investmentTransaction.grossAmount) &&
        Objects.equals(this.orderQuantity, investmentTransaction.orderQuantity) &&
        Objects.equals(this.orderMedium, investmentTransaction.orderMedium) &&
        Objects.equals(this.filledQuantity, investmentTransaction.filledQuantity) &&
        Objects.equals(this.balanceQuantity, investmentTransaction.balanceQuantity) &&
        Objects.equals(this.stockMarketCode, investmentTransaction.stockMarketCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderDate, orderReferenceId, orderType, code, name, currencyCode, transactionAmount, price, orderStatus, grossAmount, orderQuantity, orderMedium, filledQuantity, balanceQuantity, stockMarketCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvestmentTransaction {\n");
    
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    orderReferenceId: ").append(toIndentedString(orderReferenceId)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    orderStatus: ").append(toIndentedString(orderStatus)).append("\n");
    sb.append("    grossAmount: ").append(toIndentedString(grossAmount)).append("\n");
    sb.append("    orderQuantity: ").append(toIndentedString(orderQuantity)).append("\n");
    sb.append("    orderMedium: ").append(toIndentedString(orderMedium)).append("\n");
    sb.append("    filledQuantity: ").append(toIndentedString(filledQuantity)).append("\n");
    sb.append("    balanceQuantity: ").append(toIndentedString(balanceQuantity)).append("\n");
    sb.append("    stockMarketCode: ").append(toIndentedString(stockMarketCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
