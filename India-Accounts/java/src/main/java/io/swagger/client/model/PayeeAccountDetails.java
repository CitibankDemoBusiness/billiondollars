/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * PayeeAccountDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class PayeeAccountDetails {
  @SerializedName("payeeNickName")
  private String payeeNickName = null;

  @SerializedName("payeeName")
  private String payeeName = null;

  @SerializedName("displayPayeeAccountNumber")
  private String displayPayeeAccountNumber = null;

  @SerializedName("iban")
  private String iban = null;

  @SerializedName("payeeId")
  private String payeeId = null;

  @SerializedName("payeeBankName")
  private String payeeBankName = null;

  @SerializedName("paymentType")
  private String paymentType = null;

  @SerializedName("bankCode")
  private String bankCode = null;

  public PayeeAccountDetails payeeNickName(String payeeNickName) {
    this.payeeNickName = payeeNickName;
    return this;
  }

   /**
   * The nick name of the payee assigned by the customer.
   * @return payeeNickName
  **/
  @Schema(example = "MarkJ", description = "The nick name of the payee assigned by the customer.")
  public String getPayeeNickName() {
    return payeeNickName;
  }

  public void setPayeeNickName(String payeeNickName) {
    this.payeeNickName = payeeNickName;
  }

  public PayeeAccountDetails payeeName(String payeeName) {
    this.payeeName = payeeName;
    return this;
  }

   /**
   * Name of the payee.
   * @return payeeName
  **/
  @Schema(example = "Mark Jacobs", description = "Name of the payee.")
  public String getPayeeName() {
    return payeeName;
  }

  public void setPayeeName(String payeeName) {
    this.payeeName = payeeName;
  }

  public PayeeAccountDetails displayPayeeAccountNumber(String displayPayeeAccountNumber) {
    this.displayPayeeAccountNumber = displayPayeeAccountNumber;
    return this;
  }

   /**
   * The display account number of the destination account
   * @return displayPayeeAccountNumber
  **/
  @Schema(example = "XXXXXX4085", description = "The display account number of the destination account")
  public String getDisplayPayeeAccountNumber() {
    return displayPayeeAccountNumber;
  }

  public void setDisplayPayeeAccountNumber(String displayPayeeAccountNumber) {
    this.displayPayeeAccountNumber = displayPayeeAccountNumber;
  }

  public PayeeAccountDetails iban(String iban) {
    this.iban = iban;
    return this;
  }

   /**
   * IBAN stands for International Bank Account Number and is a number attached to all accounts in the EU countries plus Norway, Switzerland, Liechtenstein and Hungary. The IBAN is made up of a code that identifies the country the account belongs to, the account holders bank and the account number itself
   * @return iban
  **/
  @Schema(example = "CZ6508000000192000145399", description = "IBAN stands for International Bank Account Number and is a number attached to all accounts in the EU countries plus Norway, Switzerland, Liechtenstein and Hungary. The IBAN is made up of a code that identifies the country the account belongs to, the account holders bank and the account number itself")
  public String getIban() {
    return iban;
  }

  public void setIban(String iban) {
    this.iban = iban;
  }

  public PayeeAccountDetails payeeId(String payeeId) {
    this.payeeId = payeeId;
    return this;
  }

   /**
   * Unique identifier associated with the payee.Typically, this is not displayed to the customer.
   * @return payeeId
  **/
  @Schema(example = "C$0003019202$AU$XX$01000540000001", description = "Unique identifier associated with the payee.Typically, this is not displayed to the customer.")
  public String getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(String payeeId) {
    this.payeeId = payeeId;
  }

  public PayeeAccountDetails payeeBankName(String payeeBankName) {
    this.payeeBankName = payeeBankName;
    return this;
  }

   /**
   * Name of the bank.
   * @return payeeBankName
  **/
  @Schema(example = "HSBC Bank", description = "Name of the bank.")
  public String getPayeeBankName() {
    return payeeBankName;
  }

  public void setPayeeBankName(String payeeBankName) {
    this.payeeBankName = payeeBankName;
  }

  public PayeeAccountDetails paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.
   * @return paymentType
  **/
  @Schema(example = "GIRO", description = "The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.")
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }

  public PayeeAccountDetails bankCode(String bankCode) {
    this.bankCode = bankCode;
    return this;
  }

   /**
   * Bank Code of the Payee
   * @return bankCode
  **/
  @Schema(example = "44525101", description = "Bank Code of the Payee")
  public String getBankCode() {
    return bankCode;
  }

  public void setBankCode(String bankCode) {
    this.bankCode = bankCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayeeAccountDetails payeeAccountDetails = (PayeeAccountDetails) o;
    return Objects.equals(this.payeeNickName, payeeAccountDetails.payeeNickName) &&
        Objects.equals(this.payeeName, payeeAccountDetails.payeeName) &&
        Objects.equals(this.displayPayeeAccountNumber, payeeAccountDetails.displayPayeeAccountNumber) &&
        Objects.equals(this.iban, payeeAccountDetails.iban) &&
        Objects.equals(this.payeeId, payeeAccountDetails.payeeId) &&
        Objects.equals(this.payeeBankName, payeeAccountDetails.payeeBankName) &&
        Objects.equals(this.paymentType, payeeAccountDetails.paymentType) &&
        Objects.equals(this.bankCode, payeeAccountDetails.bankCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payeeNickName, payeeName, displayPayeeAccountNumber, iban, payeeId, payeeBankName, paymentType, bankCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayeeAccountDetails {\n");
    
    sb.append("    payeeNickName: ").append(toIndentedString(payeeNickName)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    displayPayeeAccountNumber: ").append(toIndentedString(displayPayeeAccountNumber)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    payeeBankName: ").append(toIndentedString(payeeBankName)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
