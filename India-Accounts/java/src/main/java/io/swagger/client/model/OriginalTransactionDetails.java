/*
 * Accounts
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * OriginalTransactionDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-14T16:57:33.628989Z[Etc/UTC]")
public class OriginalTransactionDetails {
  @SerializedName("paymentType")
  private String paymentType = null;

  @SerializedName("transactionDate")
  private LocalDate transactionDate = null;

  @SerializedName("transactionAmount")
  private Double transactionAmount = null;

  @SerializedName("transactionCurrencyCode")
  private String transactionCurrencyCode = null;

  @SerializedName("transactionStatus")
  private String transactionStatus = null;

  @SerializedName("transactionReferenceNumber")
  private String transactionReferenceNumber = null;

  @SerializedName("transactionRemarks")
  private String transactionRemarks = null;

  @SerializedName("endToEndIdentification")
  private String endToEndIdentification = null;

  public OriginalTransactionDetails paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.
   * @return paymentType
  **/
  @Schema(example = "SWIFT_TRANSFER", description = "The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.")
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }

  public OriginalTransactionDetails transactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,
   * @return transactionDate
  **/
  @Schema(description = "Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,")
  public LocalDate getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(LocalDate transactionDate) {
    this.transactionDate = transactionDate;
  }

  public OriginalTransactionDetails transactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Transaction amount in account currency.
   * @return transactionAmount
  **/
  @Schema(example = "50.55", description = "Transaction amount in account currency.")
  public Double getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
  }

  public OriginalTransactionDetails transactionCurrencyCode(String transactionCurrencyCode) {
    this.transactionCurrencyCode = transactionCurrencyCode;
    return this;
  }

   /**
   * The currency code for the foreign transaction amount in ISO 4217 format.
   * @return transactionCurrencyCode
  **/
  @Schema(example = "HKD", description = "The currency code for the foreign transaction amount in ISO 4217 format.")
  public String getTransactionCurrencyCode() {
    return transactionCurrencyCode;
  }

  public void setTransactionCurrencyCode(String transactionCurrencyCode) {
    this.transactionCurrencyCode = transactionCurrencyCode;
  }

  public OriginalTransactionDetails transactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

   /**
   * Transaction Status of the original transaction
   * @return transactionStatus
  **/
  @Schema(example = "Authorized", description = "Transaction Status of the original transaction")
  public String getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(String transactionStatus) {
    this.transactionStatus = transactionStatus;
  }

  public OriginalTransactionDetails transactionReferenceNumber(String transactionReferenceNumber) {
    this.transactionReferenceNumber = transactionReferenceNumber;
    return this;
  }

   /**
   * Transaction reference number of the original transaction
   * @return transactionReferenceNumber
  **/
  @Schema(example = "Pending", description = "Transaction reference number of the original transaction")
  public String getTransactionReferenceNumber() {
    return transactionReferenceNumber;
  }

  public void setTransactionReferenceNumber(String transactionReferenceNumber) {
    this.transactionReferenceNumber = transactionReferenceNumber;
  }

  public OriginalTransactionDetails transactionRemarks(String transactionRemarks) {
    this.transactionRemarks = transactionRemarks;
    return this;
  }

   /**
   * Transaction Remarks of the original transaction
   * @return transactionRemarks
  **/
  @Schema(example = "Money gone is gone", description = "Transaction Remarks of the original transaction")
  public String getTransactionRemarks() {
    return transactionRemarks;
  }

  public void setTransactionRemarks(String transactionRemarks) {
    this.transactionRemarks = transactionRemarks;
  }

  public OriginalTransactionDetails endToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
    return this;
  }

   /**
   * End to End Identification reference of the original transaction
   * @return endToEndIdentification
  **/
  @Schema(description = "End to End Identification reference of the original transaction")
  public String getEndToEndIdentification() {
    return endToEndIdentification;
  }

  public void setEndToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginalTransactionDetails originalTransactionDetails = (OriginalTransactionDetails) o;
    return Objects.equals(this.paymentType, originalTransactionDetails.paymentType) &&
        Objects.equals(this.transactionDate, originalTransactionDetails.transactionDate) &&
        Objects.equals(this.transactionAmount, originalTransactionDetails.transactionAmount) &&
        Objects.equals(this.transactionCurrencyCode, originalTransactionDetails.transactionCurrencyCode) &&
        Objects.equals(this.transactionStatus, originalTransactionDetails.transactionStatus) &&
        Objects.equals(this.transactionReferenceNumber, originalTransactionDetails.transactionReferenceNumber) &&
        Objects.equals(this.transactionRemarks, originalTransactionDetails.transactionRemarks) &&
        Objects.equals(this.endToEndIdentification, originalTransactionDetails.endToEndIdentification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentType, transactionDate, transactionAmount, transactionCurrencyCode, transactionStatus, transactionReferenceNumber, transactionRemarks, endToEndIdentification);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginalTransactionDetails {\n");
    
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionCurrencyCode: ").append(toIndentedString(transactionCurrencyCode)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    transactionReferenceNumber: ").append(toIndentedString(transactionReferenceNumber)).append("\n");
    sb.append("    transactionRemarks: ").append(toIndentedString(transactionRemarks)).append("\n");
    sb.append("    endToEndIdentification: ").append(toIndentedString(endToEndIdentification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
