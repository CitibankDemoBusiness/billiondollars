/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountsApiTests
    {
        private AccountsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountsApi
            //Assert.IsInstanceOfType(typeof(AccountsApi), instance, "instance is a AccountsApi");
        }

        /// <summary>
        /// Test AccountBalancesSummaryInquiry
        /// </summary>
        [Test]
        public void AccountBalancesSummaryInquiryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string clientDetails = null;
            //var response = instance.AccountBalancesSummaryInquiry(authorization, uuid, accept, clientId, accountId, clientDetails);
            //Assert.IsInstanceOf<AccountBalancesSummaryInquiryResponse> (response, "response is AccountBalancesSummaryInquiryResponse");
        }
        /// <summary>
        /// Test BalanceTransferBooking
        /// </summary>
        [Test]
        public void BalanceTransferBookingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BalanceTransferBookingRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string accountId = null;
            //string clientDetails = null;
            //var response = instance.BalanceTransferBooking(body, authorization, uuid, accept, clientId, contentType, accountId, clientDetails);
            //Assert.IsInstanceOf<BalanceTransferBookingResponse> (response, "response is BalanceTransferBookingResponse");
        }
        /// <summary>
        /// Test BalanceTransferEligibility
        /// </summary>
        [Test]
        public void BalanceTransferEligibilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string clientDetails = null;
            //string btSupportedAccountGroup = null;
            //var response = instance.BalanceTransferEligibility(authorization, uuid, accept, clientId, clientDetails, btSupportedAccountGroup);
            //Assert.IsInstanceOf<BalanceTransferEligibilityResponse> (response, "response is BalanceTransferEligibilityResponse");
        }
        /// <summary>
        /// Test ConsentsDetailsInquiry
        /// </summary>
        [Test]
        public void ConsentsDetailsInquiryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string consentType = null;
            //string clientDetails = null;
            //var response = instance.ConsentsDetailsInquiry(authorization, uuid, accept, clientId, accountId, consentType, clientDetails);
            //Assert.IsInstanceOf<ConsentsDetailsInquiryResponse> (response, "response is ConsentsDetailsInquiryResponse");
        }
        /// <summary>
        /// Test ConsentsDetailsUpdate
        /// </summary>
        [Test]
        public void ConsentsDetailsUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConsentsDetailsUpdateRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string accountId = null;
            //string clientDetails = null;
            //instance.ConsentsDetailsUpdate(body, authorization, uuid, accept, clientId, contentType, accountId, clientDetails);
            
        }
        /// <summary>
        /// Test PartnerV1AccountsAccountIdAccessCodesGet
        /// </summary>
        [Test]
        public void PartnerV1AccountsAccountIdAccessCodesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string clientDetails = null;
            //var response = instance.PartnerV1AccountsAccountIdAccessCodesGet(authorization, uuid, accept, clientId, accountId, clientDetails);
            //Assert.IsInstanceOf<AccountAccessCodeGenerationResponse> (response, "response is AccountAccessCodeGenerationResponse");
        }
        /// <summary>
        /// Test PartnerV1PartnerAccountsGet
        /// </summary>
        [Test]
        public void PartnerV1PartnerAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string clientDetails = null;
            //string nextStartIndex = null;
            //var response = instance.PartnerV1PartnerAccountsGet(authorization, uuid, accept, clientId, clientDetails, nextStartIndex);
            //Assert.IsInstanceOf<AccountsGroupList> (response, "response is AccountsGroupList");
        }
        /// <summary>
        /// Test RetrieveUnmaskedAccountData
        /// </summary>
        [Test]
        public void RetrieveUnmaskedAccountDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RetrieveUnmaskedAccountDataRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //var response = instance.RetrieveUnmaskedAccountData(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            //Assert.IsInstanceOf<RetrieveUnmaskedAccountDataResponse> (response, "response is RetrieveUnmaskedAccountDataResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdLoansBookingsPost
        /// </summary>
        [Test]
        public void V1AccountsAccountIdLoansBookingsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoanBookingRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string accountId = null;
            //string clientDetails = null;
            //var response = instance.V1AccountsAccountIdLoansBookingsPost(body, authorization, uuid, accept, clientId, contentType, accountId, clientDetails);
            //Assert.IsInstanceOf<LoanBookingResponse> (response, "response is LoanBookingResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdLoansDisbursementOptionsGet
        /// </summary>
        [Test]
        public void V1AccountsAccountIdLoansDisbursementOptionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string clientDetails = null;
            //var response = instance.V1AccountsAccountIdLoansDisbursementOptionsGet(authorization, uuid, accept, clientId, accountId, clientDetails);
            //Assert.IsInstanceOf<DisbursementOptionsResponse> (response, "response is DisbursementOptionsResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdLoansGet
        /// </summary>
        [Test]
        public void V1AccountsAccountIdLoansGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string clientDetails = null;
            //string nextStartIndex = null;
            //var response = instance.V1AccountsAccountIdLoansGet(authorization, uuid, accept, clientId, accountId, clientDetails, nextStartIndex);
            //Assert.IsInstanceOf<LoanSummaryResponse> (response, "response is LoanSummaryResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdLoansLoanAmountPaymentsPlansGet
        /// </summary>
        [Test]
        public void V1AccountsAccountIdLoansLoanAmountPaymentsPlansGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string loanAmount = null;
            //string tenor = null;
            //string clientDetails = null;
            //var response = instance.V1AccountsAccountIdLoansLoanAmountPaymentsPlansGet(authorization, uuid, accept, clientId, accountId, loanAmount, tenor, clientDetails);
            //Assert.IsInstanceOf<LoanBookingPlanResponse> (response, "response is LoanBookingPlanResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdLoansRepaymentSchedulesGet
        /// </summary>
        [Test]
        public void V1AccountsAccountIdLoansRepaymentSchedulesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //double? loanAmount = null;
            //decimal? tenor = null;
            //string clientDetails = null;
            //string nextStartIndex = null;
            //var response = instance.V1AccountsAccountIdLoansRepaymentSchedulesGet(authorization, uuid, accept, clientId, accountId, loanAmount, tenor, clientDetails, nextStartIndex);
            //Assert.IsInstanceOf<LoanRepaymentScheuleResponse> (response, "response is LoanRepaymentScheuleResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdStatementsGet
        /// </summary>
        [Test]
        public void V1AccountsAccountIdStatementsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string nextStartIndex = null;
            //string clientDetails = null;
            //var response = instance.V1AccountsAccountIdStatementsGet(authorization, uuid, accept, clientId, accountId, nextStartIndex, clientDetails);
            //Assert.IsInstanceOf<AccountStatementListResponse> (response, "response is AccountStatementListResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdStatementsStatementIdGet
        /// </summary>
        [Test]
        public void V1AccountsAccountIdStatementsStatementIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string statementId = null;
            //string clientDetails = null;
            //string currencyCode = null;
            //string nextStartIndex = null;
            //string statementDate = null;
            //var response = instance.V1AccountsAccountIdStatementsStatementIdGet(authorization, uuid, accept, clientId, accountId, statementId, clientDetails, currencyCode, nextStartIndex, statementDate);
            //Assert.IsInstanceOf<StatementsResponse> (response, "response is StatementsResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdTransactionsConfirmationPost
        /// </summary>
        [Test]
        public void V1AccountsAccountIdTransactionsConfirmationPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionDetailsConfirmationRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string controlFlowId = null;
            //string accountId = null;
            //string clientDetails = null;
            //var response = instance.V1AccountsAccountIdTransactionsConfirmationPost(body, authorization, uuid, accept, clientId, controlFlowId, accountId, clientDetails);
            //Assert.IsInstanceOf<TransactionDetailsConfirmationResponse> (response, "response is TransactionDetailsConfirmationResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdTransactionsLimitedDayRangeGet
        /// </summary>
        [Test]
        public void V1AccountsAccountIdTransactionsLimitedDayRangeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string transactionStatus = null;
            //string nextStartIndex = null;
            //decimal? requestSize = null;
            //string transactionFromDate = null;
            //string transactionToDate = null;
            //string amountFrom = null;
            //string amountTo = null;
            //string clientDetails = null;
            //var response = instance.V1AccountsAccountIdTransactionsLimitedDayRangeGet(accountId, authorization, uuid, accept, clientId, transactionStatus, nextStartIndex, requestSize, transactionFromDate, transactionToDate, amountFrom, amountTo, clientDetails);
            //Assert.IsInstanceOf<TransactionDetailsResponse> (response, "response is TransactionDetailsResponse");
        }
        /// <summary>
        /// Test V1AccountsAccountIdTransactionsTransactionReferenceIdDetailsGet
        /// </summary>
        [Test]
        public void V1AccountsAccountIdTransactionsTransactionReferenceIdDetailsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string transactionReferenceId = null;
            //string transactionCode = null;
            //string clientDetails = null;
            //var response = instance.V1AccountsAccountIdTransactionsTransactionReferenceIdDetailsGet(authorization, uuid, accept, clientId, accountId, transactionReferenceId, transactionCode, clientDetails);
            //Assert.IsInstanceOf<TransactionDetailedViewResponse> (response, "response is TransactionDetailedViewResponse");
        }
        /// <summary>
        /// Test V1AccountsLoansBookingsConfirmationPost
        /// </summary>
        [Test]
        public void V1AccountsLoansBookingsConfirmationPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LoanBookingConfirmationRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //var response = instance.V1AccountsLoansBookingsConfirmationPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            //Assert.IsInstanceOf<LoanBookingConfirmationResponse> (response, "response is LoanBookingConfirmationResponse");
        }
        /// <summary>
        /// Test V1AccountsLoansEligibilityGet
        /// </summary>
        [Test]
        public void V1AccountsLoansEligibilityGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string clientDetails = null;
            //string lopSupportedAccountGroup = null;
            //var response = instance.V1AccountsLoansEligibilityGet(authorization, uuid, accept, clientId, clientDetails, lopSupportedAccountGroup);
            //Assert.IsInstanceOf<LoanEligibilityCheckResponse> (response, "response is LoanEligibilityCheckResponse");
        }
        /// <summary>
        /// Test V1AccountsLoansLoanReferenceIdRepaymentSchedulesGet
        /// </summary>
        [Test]
        public void V1AccountsLoansLoanReferenceIdRepaymentSchedulesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string loanReferenceId = null;
            //string clientDetails = null;
            //string nextStartIndex = null;
            //var response = instance.V1AccountsLoansLoanReferenceIdRepaymentSchedulesGet(authorization, uuid, accept, clientId, loanReferenceId, clientDetails, nextStartIndex);
            //Assert.IsInstanceOf<LoanRepaymentScheuleResponse> (response, "response is LoanRepaymentScheuleResponse");
        }
        /// <summary>
        /// Test V1AccountsTransactionsSearchPost
        /// </summary>
        [Test]
        public void V1AccountsTransactionsSearchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CompositeTransactionDetailsRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //var response = instance.V1AccountsTransactionsSearchPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            //Assert.IsInstanceOf<CompositeTransactionDetailsResponse> (response, "response is CompositeTransactionDetailsResponse");
        }
        /// <summary>
        /// Test ViewTransactionDetailsDocument_
        /// </summary>
        [Test]
        public void ViewTransactionDetailsDocument_Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string accountId = null;
            //string downloadFormat = null;
            //string clientDetails = null;
            //DateTime? transactionStartDate = null;
            //DateTime? transactionEndDate = null;
            //string nextStartIndex = null;
            //var response = instance.ViewTransactionDetailsDocument_(authorization, uuid, accept, clientId, accountId, downloadFormat, clientDetails, transactionStartDate, transactionEndDate, nextStartIndex);
            //Assert.IsInstanceOf<ViewTransactionDetailsDocumentResponse> (response, "response is ViewTransactionDetailsDocumentResponse");
        }
    }

}
