/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse
    /// </summary>
    [DataContract]
        public partial class RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse :  IEquatable<RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse" /> class.
        /// </summary>
        /// <param name="fixedPaymentAmount">Fixed payment amount (required).</param>
        /// <param name="totalInterestAmount">Total interest amount (required).</param>
        /// <param name="effectiveInterestRate">Effective interest rate.</param>
        /// <param name="effectiveInterestRateWithFee">Effective interest rate with fee.</param>
        /// <param name="annualPercentageRate">Annual percentage rate.</param>
        /// <param name="loanScheduleDetails">loanScheduleDetails.</param>
        /// <param name="loanTopup">loanTopup.</param>
        public RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse(double? fixedPaymentAmount = default(double?), double? totalInterestAmount = default(double?), double? effectiveInterestRate = default(double?), double? effectiveInterestRateWithFee = default(double?), double? annualPercentageRate = default(double?), List<LoanScheduleDetails> loanScheduleDetails = default(List<LoanScheduleDetails>), List<LoanTopup> loanTopup = default(List<LoanTopup>))
        {
            // to ensure "fixedPaymentAmount" is required (not null)
            if (fixedPaymentAmount == null)
            {
                throw new InvalidDataException("fixedPaymentAmount is a required property for RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse and cannot be null");
            }
            else
            {
                this.FixedPaymentAmount = fixedPaymentAmount;
            }
            // to ensure "totalInterestAmount" is required (not null)
            if (totalInterestAmount == null)
            {
                throw new InvalidDataException("totalInterestAmount is a required property for RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse and cannot be null");
            }
            else
            {
                this.TotalInterestAmount = totalInterestAmount;
            }
            this.EffectiveInterestRate = effectiveInterestRate;
            this.EffectiveInterestRateWithFee = effectiveInterestRateWithFee;
            this.AnnualPercentageRate = annualPercentageRate;
            this.LoanScheduleDetails = loanScheduleDetails;
            this.LoanTopup = loanTopup;
        }
        
        /// <summary>
        /// Fixed payment amount
        /// </summary>
        /// <value>Fixed payment amount</value>
        [DataMember(Name="fixedPaymentAmount", EmitDefaultValue=false)]
        public double? FixedPaymentAmount { get; set; }

        /// <summary>
        /// Total interest amount
        /// </summary>
        /// <value>Total interest amount</value>
        [DataMember(Name="totalInterestAmount", EmitDefaultValue=false)]
        public double? TotalInterestAmount { get; set; }

        /// <summary>
        /// Effective interest rate
        /// </summary>
        /// <value>Effective interest rate</value>
        [DataMember(Name="effectiveInterestRate", EmitDefaultValue=false)]
        public double? EffectiveInterestRate { get; set; }

        /// <summary>
        /// Effective interest rate with fee
        /// </summary>
        /// <value>Effective interest rate with fee</value>
        [DataMember(Name="effectiveInterestRateWithFee", EmitDefaultValue=false)]
        public double? EffectiveInterestRateWithFee { get; set; }

        /// <summary>
        /// Annual percentage rate
        /// </summary>
        /// <value>Annual percentage rate</value>
        [DataMember(Name="annualPercentageRate", EmitDefaultValue=false)]
        public double? AnnualPercentageRate { get; set; }

        /// <summary>
        /// Gets or Sets LoanScheduleDetails
        /// </summary>
        [DataMember(Name="loanScheduleDetails", EmitDefaultValue=false)]
        public List<LoanScheduleDetails> LoanScheduleDetails { get; set; }

        /// <summary>
        /// Gets or Sets LoanTopup
        /// </summary>
        [DataMember(Name="loanTopup", EmitDefaultValue=false)]
        public List<LoanTopup> LoanTopup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse {\n");
            sb.Append("  FixedPaymentAmount: ").Append(FixedPaymentAmount).Append("\n");
            sb.Append("  TotalInterestAmount: ").Append(TotalInterestAmount).Append("\n");
            sb.Append("  EffectiveInterestRate: ").Append(EffectiveInterestRate).Append("\n");
            sb.Append("  EffectiveInterestRateWithFee: ").Append(EffectiveInterestRateWithFee).Append("\n");
            sb.Append("  AnnualPercentageRate: ").Append(AnnualPercentageRate).Append("\n");
            sb.Append("  LoanScheduleDetails: ").Append(LoanScheduleDetails).Append("\n");
            sb.Append("  LoanTopup: ").Append(LoanTopup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse);
        }

        /// <summary>
        /// Returns true if RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveApplicationProcessingUnsecuredLoanTopupRepaymentScheduleResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FixedPaymentAmount == input.FixedPaymentAmount ||
                    (this.FixedPaymentAmount != null &&
                    this.FixedPaymentAmount.Equals(input.FixedPaymentAmount))
                ) && 
                (
                    this.TotalInterestAmount == input.TotalInterestAmount ||
                    (this.TotalInterestAmount != null &&
                    this.TotalInterestAmount.Equals(input.TotalInterestAmount))
                ) && 
                (
                    this.EffectiveInterestRate == input.EffectiveInterestRate ||
                    (this.EffectiveInterestRate != null &&
                    this.EffectiveInterestRate.Equals(input.EffectiveInterestRate))
                ) && 
                (
                    this.EffectiveInterestRateWithFee == input.EffectiveInterestRateWithFee ||
                    (this.EffectiveInterestRateWithFee != null &&
                    this.EffectiveInterestRateWithFee.Equals(input.EffectiveInterestRateWithFee))
                ) && 
                (
                    this.AnnualPercentageRate == input.AnnualPercentageRate ||
                    (this.AnnualPercentageRate != null &&
                    this.AnnualPercentageRate.Equals(input.AnnualPercentageRate))
                ) && 
                (
                    this.LoanScheduleDetails == input.LoanScheduleDetails ||
                    this.LoanScheduleDetails != null &&
                    input.LoanScheduleDetails != null &&
                    this.LoanScheduleDetails.SequenceEqual(input.LoanScheduleDetails)
                ) && 
                (
                    this.LoanTopup == input.LoanTopup ||
                    this.LoanTopup != null &&
                    input.LoanTopup != null &&
                    this.LoanTopup.SequenceEqual(input.LoanTopup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FixedPaymentAmount != null)
                    hashCode = hashCode * 59 + this.FixedPaymentAmount.GetHashCode();
                if (this.TotalInterestAmount != null)
                    hashCode = hashCode * 59 + this.TotalInterestAmount.GetHashCode();
                if (this.EffectiveInterestRate != null)
                    hashCode = hashCode * 59 + this.EffectiveInterestRate.GetHashCode();
                if (this.EffectiveInterestRateWithFee != null)
                    hashCode = hashCode * 59 + this.EffectiveInterestRateWithFee.GetHashCode();
                if (this.AnnualPercentageRate != null)
                    hashCode = hashCode * 59 + this.AnnualPercentageRate.GetHashCode();
                if (this.LoanScheduleDetails != null)
                    hashCode = hashCode * 59 + this.LoanScheduleDetails.GetHashCode();
                if (this.LoanTopup != null)
                    hashCode = hashCode * 59 + this.LoanTopup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
