/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoanAccount
    /// </summary>
    [DataContract]
        public partial class LoanAccount :  IEquatable<LoanAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanAccount" /> class.
        /// </summary>
        /// <param name="productName">The name of the product.</param>
        /// <param name="productCode">A unique code that identifies the product.</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer (required).</param>
        /// <param name="originalPrincipalAmount">The amount borrowed.</param>
        /// <param name="currentPrincipalAmount">The remaining principal amount.</param>
        /// <param name="outstandingBalance">The amount of money owed..</param>
        /// <param name="currencyCode">The currency code in ISO 4217 format.</param>
        /// <param name="maturityDate">Loan maturity date in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="openingDate">Loan account opening date in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="lastPaymentDate">The date of the last payment in ISO 8601 format YYYY-MM-DD.</param>
        /// <param name="lastPaymentAmount">The amount of the last payment made.</param>
        /// <param name="interestAmount">Interest amount paid for the mentioned period.</param>
        /// <param name="interestAccumulationPeriod">The period of interest accumulation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestAccumulationPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="nextPaymentAmount">The next payment amount due.</param>
        /// <param name="nextPaymentDate">The date of the next payment in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="paymentFrequency">The payment frequency.</param>
        /// <param name="interestType">The interest type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="interestRate">Loan interest rate..</param>
        /// <param name="effectiveInterestRate">Loan effective interest rate.</param>
        /// <param name="installmentAmount">Installment loan payment amount.</param>
        /// <param name="remainingTermNumber">Term remaining..</param>
        /// <param name="pastDueAmount">Past due is a loan payment that has not been made as of its due date.</param>
        /// <param name="paidPrincipalAmount">The amount of principal returned to the bank.</param>
        /// <param name="lateChargeAmount">Late charge amount applicable when amount is not paid by the due date.</param>
        public LoanAccount(string productName = default(string), string productCode = default(string), string displayAccountNumber = default(string), double? originalPrincipalAmount = default(double?), double? currentPrincipalAmount = default(double?), double? outstandingBalance = default(double?), string currencyCode = default(string), DateTime? maturityDate = default(DateTime?), DateTime? openingDate = default(DateTime?), DateTime? lastPaymentDate = default(DateTime?), double? lastPaymentAmount = default(double?), double? interestAmount = default(double?), string interestAccumulationPeriod = default(string), double? nextPaymentAmount = default(double?), DateTime? nextPaymentDate = default(DateTime?), string paymentFrequency = default(string), string interestType = default(string), double? interestRate = default(double?), double? effectiveInterestRate = default(double?), double? installmentAmount = default(double?), decimal? remainingTermNumber = default(decimal?), double? pastDueAmount = default(double?), double? paidPrincipalAmount = default(double?), double? lateChargeAmount = default(double?))
        {
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for LoanAccount and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
            this.ProductName = productName;
            this.ProductCode = productCode;
            this.OriginalPrincipalAmount = originalPrincipalAmount;
            this.CurrentPrincipalAmount = currentPrincipalAmount;
            this.OutstandingBalance = outstandingBalance;
            this.CurrencyCode = currencyCode;
            this.MaturityDate = maturityDate;
            this.OpeningDate = openingDate;
            this.LastPaymentDate = lastPaymentDate;
            this.LastPaymentAmount = lastPaymentAmount;
            this.InterestAmount = interestAmount;
            this.InterestAccumulationPeriod = interestAccumulationPeriod;
            this.NextPaymentAmount = nextPaymentAmount;
            this.NextPaymentDate = nextPaymentDate;
            this.PaymentFrequency = paymentFrequency;
            this.InterestType = interestType;
            this.InterestRate = interestRate;
            this.EffectiveInterestRate = effectiveInterestRate;
            this.InstallmentAmount = installmentAmount;
            this.RemainingTermNumber = remainingTermNumber;
            this.PastDueAmount = pastDueAmount;
            this.PaidPrincipalAmount = paidPrincipalAmount;
            this.LateChargeAmount = lateChargeAmount;
        }
        
        /// <summary>
        /// The name of the product
        /// </summary>
        /// <value>The name of the product</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// A unique code that identifies the product
        /// </summary>
        /// <value>A unique code that identifies the product</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// The amount borrowed
        /// </summary>
        /// <value>The amount borrowed</value>
        [DataMember(Name="originalPrincipalAmount", EmitDefaultValue=false)]
        public double? OriginalPrincipalAmount { get; set; }

        /// <summary>
        /// The remaining principal amount
        /// </summary>
        /// <value>The remaining principal amount</value>
        [DataMember(Name="currentPrincipalAmount", EmitDefaultValue=false)]
        public double? CurrentPrincipalAmount { get; set; }

        /// <summary>
        /// The amount of money owed.
        /// </summary>
        /// <value>The amount of money owed.</value>
        [DataMember(Name="outstandingBalance", EmitDefaultValue=false)]
        public double? OutstandingBalance { get; set; }

        /// <summary>
        /// The currency code in ISO 4217 format
        /// </summary>
        /// <value>The currency code in ISO 4217 format</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Loan maturity date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Loan maturity date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// Loan account opening date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Loan account opening date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="openingDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OpeningDate { get; set; }

        /// <summary>
        /// The date of the last payment in ISO 8601 format YYYY-MM-DD
        /// </summary>
        /// <value>The date of the last payment in ISO 8601 format YYYY-MM-DD</value>
        [DataMember(Name="lastPaymentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastPaymentDate { get; set; }

        /// <summary>
        /// The amount of the last payment made
        /// </summary>
        /// <value>The amount of the last payment made</value>
        [DataMember(Name="lastPaymentAmount", EmitDefaultValue=false)]
        public double? LastPaymentAmount { get; set; }

        /// <summary>
        /// Interest amount paid for the mentioned period
        /// </summary>
        /// <value>Interest amount paid for the mentioned period</value>
        [DataMember(Name="interestAmount", EmitDefaultValue=false)]
        public double? InterestAmount { get; set; }

        /// <summary>
        /// The period of interest accumulation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestAccumulationPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>The period of interest accumulation. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestAccumulationPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="interestAccumulationPeriod", EmitDefaultValue=false)]
        public string InterestAccumulationPeriod { get; set; }

        /// <summary>
        /// The next payment amount due
        /// </summary>
        /// <value>The next payment amount due</value>
        [DataMember(Name="nextPaymentAmount", EmitDefaultValue=false)]
        public double? NextPaymentAmount { get; set; }

        /// <summary>
        /// The date of the next payment in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>The date of the next payment in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="nextPaymentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? NextPaymentDate { get; set; }

        /// <summary>
        /// The payment frequency
        /// </summary>
        /// <value>The payment frequency</value>
        [DataMember(Name="paymentFrequency", EmitDefaultValue=false)]
        public string PaymentFrequency { get; set; }

        /// <summary>
        /// The interest type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>The interest type. This is a reference data field. Please use /v1/apac/utilities/referenceData/{interestType} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="interestType", EmitDefaultValue=false)]
        public string InterestType { get; set; }

        /// <summary>
        /// Loan interest rate.
        /// </summary>
        /// <value>Loan interest rate.</value>
        [DataMember(Name="interestRate", EmitDefaultValue=false)]
        public double? InterestRate { get; set; }

        /// <summary>
        /// Loan effective interest rate
        /// </summary>
        /// <value>Loan effective interest rate</value>
        [DataMember(Name="effectiveInterestRate", EmitDefaultValue=false)]
        public double? EffectiveInterestRate { get; set; }

        /// <summary>
        /// Installment loan payment amount
        /// </summary>
        /// <value>Installment loan payment amount</value>
        [DataMember(Name="installmentAmount", EmitDefaultValue=false)]
        public double? InstallmentAmount { get; set; }

        /// <summary>
        /// Term remaining.
        /// </summary>
        /// <value>Term remaining.</value>
        [DataMember(Name="remainingTermNumber", EmitDefaultValue=false)]
        public decimal? RemainingTermNumber { get; set; }

        /// <summary>
        /// Past due is a loan payment that has not been made as of its due date
        /// </summary>
        /// <value>Past due is a loan payment that has not been made as of its due date</value>
        [DataMember(Name="pastDueAmount", EmitDefaultValue=false)]
        public double? PastDueAmount { get; set; }

        /// <summary>
        /// The amount of principal returned to the bank
        /// </summary>
        /// <value>The amount of principal returned to the bank</value>
        [DataMember(Name="paidPrincipalAmount", EmitDefaultValue=false)]
        public double? PaidPrincipalAmount { get; set; }

        /// <summary>
        /// Late charge amount applicable when amount is not paid by the due date
        /// </summary>
        /// <value>Late charge amount applicable when amount is not paid by the due date</value>
        [DataMember(Name="lateChargeAmount", EmitDefaultValue=false)]
        public double? LateChargeAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanAccount {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  OriginalPrincipalAmount: ").Append(OriginalPrincipalAmount).Append("\n");
            sb.Append("  CurrentPrincipalAmount: ").Append(CurrentPrincipalAmount).Append("\n");
            sb.Append("  OutstandingBalance: ").Append(OutstandingBalance).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  OpeningDate: ").Append(OpeningDate).Append("\n");
            sb.Append("  LastPaymentDate: ").Append(LastPaymentDate).Append("\n");
            sb.Append("  LastPaymentAmount: ").Append(LastPaymentAmount).Append("\n");
            sb.Append("  InterestAmount: ").Append(InterestAmount).Append("\n");
            sb.Append("  InterestAccumulationPeriod: ").Append(InterestAccumulationPeriod).Append("\n");
            sb.Append("  NextPaymentAmount: ").Append(NextPaymentAmount).Append("\n");
            sb.Append("  NextPaymentDate: ").Append(NextPaymentDate).Append("\n");
            sb.Append("  PaymentFrequency: ").Append(PaymentFrequency).Append("\n");
            sb.Append("  InterestType: ").Append(InterestType).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  EffectiveInterestRate: ").Append(EffectiveInterestRate).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("  RemainingTermNumber: ").Append(RemainingTermNumber).Append("\n");
            sb.Append("  PastDueAmount: ").Append(PastDueAmount).Append("\n");
            sb.Append("  PaidPrincipalAmount: ").Append(PaidPrincipalAmount).Append("\n");
            sb.Append("  LateChargeAmount: ").Append(LateChargeAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanAccount);
        }

        /// <summary>
        /// Returns true if LoanAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.OriginalPrincipalAmount == input.OriginalPrincipalAmount ||
                    (this.OriginalPrincipalAmount != null &&
                    this.OriginalPrincipalAmount.Equals(input.OriginalPrincipalAmount))
                ) && 
                (
                    this.CurrentPrincipalAmount == input.CurrentPrincipalAmount ||
                    (this.CurrentPrincipalAmount != null &&
                    this.CurrentPrincipalAmount.Equals(input.CurrentPrincipalAmount))
                ) && 
                (
                    this.OutstandingBalance == input.OutstandingBalance ||
                    (this.OutstandingBalance != null &&
                    this.OutstandingBalance.Equals(input.OutstandingBalance))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.OpeningDate == input.OpeningDate ||
                    (this.OpeningDate != null &&
                    this.OpeningDate.Equals(input.OpeningDate))
                ) && 
                (
                    this.LastPaymentDate == input.LastPaymentDate ||
                    (this.LastPaymentDate != null &&
                    this.LastPaymentDate.Equals(input.LastPaymentDate))
                ) && 
                (
                    this.LastPaymentAmount == input.LastPaymentAmount ||
                    (this.LastPaymentAmount != null &&
                    this.LastPaymentAmount.Equals(input.LastPaymentAmount))
                ) && 
                (
                    this.InterestAmount == input.InterestAmount ||
                    (this.InterestAmount != null &&
                    this.InterestAmount.Equals(input.InterestAmount))
                ) && 
                (
                    this.InterestAccumulationPeriod == input.InterestAccumulationPeriod ||
                    (this.InterestAccumulationPeriod != null &&
                    this.InterestAccumulationPeriod.Equals(input.InterestAccumulationPeriod))
                ) && 
                (
                    this.NextPaymentAmount == input.NextPaymentAmount ||
                    (this.NextPaymentAmount != null &&
                    this.NextPaymentAmount.Equals(input.NextPaymentAmount))
                ) && 
                (
                    this.NextPaymentDate == input.NextPaymentDate ||
                    (this.NextPaymentDate != null &&
                    this.NextPaymentDate.Equals(input.NextPaymentDate))
                ) && 
                (
                    this.PaymentFrequency == input.PaymentFrequency ||
                    (this.PaymentFrequency != null &&
                    this.PaymentFrequency.Equals(input.PaymentFrequency))
                ) && 
                (
                    this.InterestType == input.InterestType ||
                    (this.InterestType != null &&
                    this.InterestType.Equals(input.InterestType))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && 
                (
                    this.EffectiveInterestRate == input.EffectiveInterestRate ||
                    (this.EffectiveInterestRate != null &&
                    this.EffectiveInterestRate.Equals(input.EffectiveInterestRate))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                ) && 
                (
                    this.RemainingTermNumber == input.RemainingTermNumber ||
                    (this.RemainingTermNumber != null &&
                    this.RemainingTermNumber.Equals(input.RemainingTermNumber))
                ) && 
                (
                    this.PastDueAmount == input.PastDueAmount ||
                    (this.PastDueAmount != null &&
                    this.PastDueAmount.Equals(input.PastDueAmount))
                ) && 
                (
                    this.PaidPrincipalAmount == input.PaidPrincipalAmount ||
                    (this.PaidPrincipalAmount != null &&
                    this.PaidPrincipalAmount.Equals(input.PaidPrincipalAmount))
                ) && 
                (
                    this.LateChargeAmount == input.LateChargeAmount ||
                    (this.LateChargeAmount != null &&
                    this.LateChargeAmount.Equals(input.LateChargeAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.OriginalPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.OriginalPrincipalAmount.GetHashCode();
                if (this.CurrentPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.CurrentPrincipalAmount.GetHashCode();
                if (this.OutstandingBalance != null)
                    hashCode = hashCode * 59 + this.OutstandingBalance.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.OpeningDate != null)
                    hashCode = hashCode * 59 + this.OpeningDate.GetHashCode();
                if (this.LastPaymentDate != null)
                    hashCode = hashCode * 59 + this.LastPaymentDate.GetHashCode();
                if (this.LastPaymentAmount != null)
                    hashCode = hashCode * 59 + this.LastPaymentAmount.GetHashCode();
                if (this.InterestAmount != null)
                    hashCode = hashCode * 59 + this.InterestAmount.GetHashCode();
                if (this.InterestAccumulationPeriod != null)
                    hashCode = hashCode * 59 + this.InterestAccumulationPeriod.GetHashCode();
                if (this.NextPaymentAmount != null)
                    hashCode = hashCode * 59 + this.NextPaymentAmount.GetHashCode();
                if (this.NextPaymentDate != null)
                    hashCode = hashCode * 59 + this.NextPaymentDate.GetHashCode();
                if (this.PaymentFrequency != null)
                    hashCode = hashCode * 59 + this.PaymentFrequency.GetHashCode();
                if (this.InterestType != null)
                    hashCode = hashCode * 59 + this.InterestType.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                if (this.EffectiveInterestRate != null)
                    hashCode = hashCode * 59 + this.EffectiveInterestRate.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                if (this.RemainingTermNumber != null)
                    hashCode = hashCode * 59 + this.RemainingTermNumber.GetHashCode();
                if (this.PastDueAmount != null)
                    hashCode = hashCode * 59 + this.PastDueAmount.GetHashCode();
                if (this.PaidPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.PaidPrincipalAmount.GetHashCode();
                if (this.LateChargeAmount != null)
                    hashCode = hashCode * 59 + this.LateChargeAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
