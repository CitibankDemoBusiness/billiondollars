/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoanSummary
    /// </summary>
    [DataContract]
        public partial class LoanSummary :  IEquatable<LoanSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanSummary" /> class.
        /// </summary>
        /// <param name="loanAmount">Loan amount availed by customer.</param>
        /// <param name="loanTenure">Tenure of loan against card..</param>
        /// <param name="promotionId">Promotion ID for the loan offered.</param>
        /// <param name="interestRate">Interest rate for the loan.</param>
        /// <param name="interestRateEffectivityDate">Effectivity date of interest rate  in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="totalInterestAmount">Total interest amount for the loan.</param>
        /// <param name="totalLoanAmount">Total loan amount comprising of principal and interest.</param>
        /// <param name="loanRemainingTermNumber">Remaining term of installment loan.</param>
        public LoanSummary(double? loanAmount = default(double?), string loanTenure = default(string), string promotionId = default(string), double? interestRate = default(double?), DateTime? interestRateEffectivityDate = default(DateTime?), double? totalInterestAmount = default(double?), double? totalLoanAmount = default(double?), int? loanRemainingTermNumber = default(int?))
        {
            this.LoanAmount = loanAmount;
            this.LoanTenure = loanTenure;
            this.PromotionId = promotionId;
            this.InterestRate = interestRate;
            this.InterestRateEffectivityDate = interestRateEffectivityDate;
            this.TotalInterestAmount = totalInterestAmount;
            this.TotalLoanAmount = totalLoanAmount;
            this.LoanRemainingTermNumber = loanRemainingTermNumber;
        }
        
        /// <summary>
        /// Loan amount availed by customer
        /// </summary>
        /// <value>Loan amount availed by customer</value>
        [DataMember(Name="loanAmount", EmitDefaultValue=false)]
        public double? LoanAmount { get; set; }

        /// <summary>
        /// Tenure of loan against card.
        /// </summary>
        /// <value>Tenure of loan against card.</value>
        [DataMember(Name="loanTenure", EmitDefaultValue=false)]
        public string LoanTenure { get; set; }

        /// <summary>
        /// Promotion ID for the loan offered
        /// </summary>
        /// <value>Promotion ID for the loan offered</value>
        [DataMember(Name="promotionId", EmitDefaultValue=false)]
        public string PromotionId { get; set; }

        /// <summary>
        /// Interest rate for the loan
        /// </summary>
        /// <value>Interest rate for the loan</value>
        [DataMember(Name="interestRate", EmitDefaultValue=false)]
        public double? InterestRate { get; set; }

        /// <summary>
        /// Effectivity date of interest rate  in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Effectivity date of interest rate  in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="interestRateEffectivityDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? InterestRateEffectivityDate { get; set; }

        /// <summary>
        /// Total interest amount for the loan
        /// </summary>
        /// <value>Total interest amount for the loan</value>
        [DataMember(Name="totalInterestAmount", EmitDefaultValue=false)]
        public double? TotalInterestAmount { get; set; }

        /// <summary>
        /// Total loan amount comprising of principal and interest
        /// </summary>
        /// <value>Total loan amount comprising of principal and interest</value>
        [DataMember(Name="totalLoanAmount", EmitDefaultValue=false)]
        public double? TotalLoanAmount { get; set; }

        /// <summary>
        /// Remaining term of installment loan
        /// </summary>
        /// <value>Remaining term of installment loan</value>
        [DataMember(Name="loanRemainingTermNumber", EmitDefaultValue=false)]
        public int? LoanRemainingTermNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanSummary {\n");
            sb.Append("  LoanAmount: ").Append(LoanAmount).Append("\n");
            sb.Append("  LoanTenure: ").Append(LoanTenure).Append("\n");
            sb.Append("  PromotionId: ").Append(PromotionId).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  InterestRateEffectivityDate: ").Append(InterestRateEffectivityDate).Append("\n");
            sb.Append("  TotalInterestAmount: ").Append(TotalInterestAmount).Append("\n");
            sb.Append("  TotalLoanAmount: ").Append(TotalLoanAmount).Append("\n");
            sb.Append("  LoanRemainingTermNumber: ").Append(LoanRemainingTermNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanSummary);
        }

        /// <summary>
        /// Returns true if LoanSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanAmount == input.LoanAmount ||
                    (this.LoanAmount != null &&
                    this.LoanAmount.Equals(input.LoanAmount))
                ) && 
                (
                    this.LoanTenure == input.LoanTenure ||
                    (this.LoanTenure != null &&
                    this.LoanTenure.Equals(input.LoanTenure))
                ) && 
                (
                    this.PromotionId == input.PromotionId ||
                    (this.PromotionId != null &&
                    this.PromotionId.Equals(input.PromotionId))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && 
                (
                    this.InterestRateEffectivityDate == input.InterestRateEffectivityDate ||
                    (this.InterestRateEffectivityDate != null &&
                    this.InterestRateEffectivityDate.Equals(input.InterestRateEffectivityDate))
                ) && 
                (
                    this.TotalInterestAmount == input.TotalInterestAmount ||
                    (this.TotalInterestAmount != null &&
                    this.TotalInterestAmount.Equals(input.TotalInterestAmount))
                ) && 
                (
                    this.TotalLoanAmount == input.TotalLoanAmount ||
                    (this.TotalLoanAmount != null &&
                    this.TotalLoanAmount.Equals(input.TotalLoanAmount))
                ) && 
                (
                    this.LoanRemainingTermNumber == input.LoanRemainingTermNumber ||
                    (this.LoanRemainingTermNumber != null &&
                    this.LoanRemainingTermNumber.Equals(input.LoanRemainingTermNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanAmount != null)
                    hashCode = hashCode * 59 + this.LoanAmount.GetHashCode();
                if (this.LoanTenure != null)
                    hashCode = hashCode * 59 + this.LoanTenure.GetHashCode();
                if (this.PromotionId != null)
                    hashCode = hashCode * 59 + this.PromotionId.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                if (this.InterestRateEffectivityDate != null)
                    hashCode = hashCode * 59 + this.InterestRateEffectivityDate.GetHashCode();
                if (this.TotalInterestAmount != null)
                    hashCode = hashCode * 59 + this.TotalInterestAmount.GetHashCode();
                if (this.TotalLoanAmount != null)
                    hashCode = hashCode * 59 + this.TotalLoanAmount.GetHashCode();
                if (this.LoanRemainingTermNumber != null)
                    hashCode = hashCode * 59 + this.LoanRemainingTermNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
