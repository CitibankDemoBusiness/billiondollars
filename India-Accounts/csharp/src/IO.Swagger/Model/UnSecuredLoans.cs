/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UnSecuredLoans
    /// </summary>
    [DataContract]
        public partial class UnSecuredLoans :  IEquatable<UnSecuredLoans>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnSecuredLoans" /> class.
        /// </summary>
        /// <param name="originalDisclosedAmount">Original loan amount applied for equal payment plan.</param>
        /// <param name="originalTerm">Instalment Loan Original Term.</param>
        /// <param name="currentTerm">Instalment Loan Current Term.</param>
        /// <param name="remainingTerm">Instalment Loan remaining Term.</param>
        /// <param name="lastPaymentDate">Last Payment Date of Loans in ISO 8601 format YYYY-MM-DD.</param>
        /// <param name="installmentAmount">Instalment amount for loan.</param>
        public UnSecuredLoans(double? originalDisclosedAmount = default(double?), int? originalTerm = default(int?), int? currentTerm = default(int?), int? remainingTerm = default(int?), DateTime? lastPaymentDate = default(DateTime?), double? installmentAmount = default(double?))
        {
            this.OriginalDisclosedAmount = originalDisclosedAmount;
            this.OriginalTerm = originalTerm;
            this.CurrentTerm = currentTerm;
            this.RemainingTerm = remainingTerm;
            this.LastPaymentDate = lastPaymentDate;
            this.InstallmentAmount = installmentAmount;
        }
        
        /// <summary>
        /// Original loan amount applied for equal payment plan
        /// </summary>
        /// <value>Original loan amount applied for equal payment plan</value>
        [DataMember(Name="originalDisclosedAmount", EmitDefaultValue=false)]
        public double? OriginalDisclosedAmount { get; set; }

        /// <summary>
        /// Instalment Loan Original Term
        /// </summary>
        /// <value>Instalment Loan Original Term</value>
        [DataMember(Name="originalTerm", EmitDefaultValue=false)]
        public int? OriginalTerm { get; set; }

        /// <summary>
        /// Instalment Loan Current Term
        /// </summary>
        /// <value>Instalment Loan Current Term</value>
        [DataMember(Name="currentTerm", EmitDefaultValue=false)]
        public int? CurrentTerm { get; set; }

        /// <summary>
        /// Instalment Loan remaining Term
        /// </summary>
        /// <value>Instalment Loan remaining Term</value>
        [DataMember(Name="remainingTerm", EmitDefaultValue=false)]
        public int? RemainingTerm { get; set; }

        /// <summary>
        /// Last Payment Date of Loans in ISO 8601 format YYYY-MM-DD
        /// </summary>
        /// <value>Last Payment Date of Loans in ISO 8601 format YYYY-MM-DD</value>
        [DataMember(Name="lastPaymentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastPaymentDate { get; set; }

        /// <summary>
        /// Instalment amount for loan
        /// </summary>
        /// <value>Instalment amount for loan</value>
        [DataMember(Name="installmentAmount", EmitDefaultValue=false)]
        public double? InstallmentAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnSecuredLoans {\n");
            sb.Append("  OriginalDisclosedAmount: ").Append(OriginalDisclosedAmount).Append("\n");
            sb.Append("  OriginalTerm: ").Append(OriginalTerm).Append("\n");
            sb.Append("  CurrentTerm: ").Append(CurrentTerm).Append("\n");
            sb.Append("  RemainingTerm: ").Append(RemainingTerm).Append("\n");
            sb.Append("  LastPaymentDate: ").Append(LastPaymentDate).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnSecuredLoans);
        }

        /// <summary>
        /// Returns true if UnSecuredLoans instances are equal
        /// </summary>
        /// <param name="input">Instance of UnSecuredLoans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnSecuredLoans input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OriginalDisclosedAmount == input.OriginalDisclosedAmount ||
                    (this.OriginalDisclosedAmount != null &&
                    this.OriginalDisclosedAmount.Equals(input.OriginalDisclosedAmount))
                ) && 
                (
                    this.OriginalTerm == input.OriginalTerm ||
                    (this.OriginalTerm != null &&
                    this.OriginalTerm.Equals(input.OriginalTerm))
                ) && 
                (
                    this.CurrentTerm == input.CurrentTerm ||
                    (this.CurrentTerm != null &&
                    this.CurrentTerm.Equals(input.CurrentTerm))
                ) && 
                (
                    this.RemainingTerm == input.RemainingTerm ||
                    (this.RemainingTerm != null &&
                    this.RemainingTerm.Equals(input.RemainingTerm))
                ) && 
                (
                    this.LastPaymentDate == input.LastPaymentDate ||
                    (this.LastPaymentDate != null &&
                    this.LastPaymentDate.Equals(input.LastPaymentDate))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginalDisclosedAmount != null)
                    hashCode = hashCode * 59 + this.OriginalDisclosedAmount.GetHashCode();
                if (this.OriginalTerm != null)
                    hashCode = hashCode * 59 + this.OriginalTerm.GetHashCode();
                if (this.CurrentTerm != null)
                    hashCode = hashCode * 59 + this.CurrentTerm.GetHashCode();
                if (this.RemainingTerm != null)
                    hashCode = hashCode * 59 + this.RemainingTerm.GetHashCode();
                if (this.LastPaymentDate != null)
                    hashCode = hashCode * 59 + this.LastPaymentDate.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
