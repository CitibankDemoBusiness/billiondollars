/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse
    /// </summary>
    [DataContract]
        public partial class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse :  IEquatable<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse" /> class.
        /// </summary>
        /// <param name="loanPaymentPlans">loanPaymentPlans.</param>
        /// <param name="serviceCharge">Booking fee.</param>
        /// <param name="additionalServiceCharge">Additional service charge.</param>
        /// <param name="internalRateOfReturn">Internal rate of return.</param>
        /// <param name="listResponse">listResponse.</param>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse(List<LoanPaymentPlans> loanPaymentPlans = default(List<LoanPaymentPlans>), double? serviceCharge = default(double?), double? additionalServiceCharge = default(double?), double? internalRateOfReturn = default(double?), ListResponse listResponse = default(ListResponse))
        {
            this.LoanPaymentPlans = loanPaymentPlans;
            this.ServiceCharge = serviceCharge;
            this.AdditionalServiceCharge = additionalServiceCharge;
            this.InternalRateOfReturn = internalRateOfReturn;
            this.ListResponse = listResponse;
        }
        
        /// <summary>
        /// Gets or Sets LoanPaymentPlans
        /// </summary>
        [DataMember(Name="loanPaymentPlans", EmitDefaultValue=false)]
        public List<LoanPaymentPlans> LoanPaymentPlans { get; set; }

        /// <summary>
        /// Booking fee
        /// </summary>
        /// <value>Booking fee</value>
        [DataMember(Name="serviceCharge", EmitDefaultValue=false)]
        public double? ServiceCharge { get; set; }

        /// <summary>
        /// Additional service charge
        /// </summary>
        /// <value>Additional service charge</value>
        [DataMember(Name="additionalServiceCharge", EmitDefaultValue=false)]
        public double? AdditionalServiceCharge { get; set; }

        /// <summary>
        /// Internal rate of return
        /// </summary>
        /// <value>Internal rate of return</value>
        [DataMember(Name="internalRateOfReturn", EmitDefaultValue=false)]
        public double? InternalRateOfReturn { get; set; }

        /// <summary>
        /// Gets or Sets ListResponse
        /// </summary>
        [DataMember(Name="listResponse", EmitDefaultValue=false)]
        public ListResponse ListResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse {\n");
            sb.Append("  LoanPaymentPlans: ").Append(LoanPaymentPlans).Append("\n");
            sb.Append("  ServiceCharge: ").Append(ServiceCharge).Append("\n");
            sb.Append("  AdditionalServiceCharge: ").Append(AdditionalServiceCharge).Append("\n");
            sb.Append("  InternalRateOfReturn: ").Append(InternalRateOfReturn).Append("\n");
            sb.Append("  ListResponse: ").Append(ListResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse);
        }

        /// <summary>
        /// Returns true if RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanPaymentPlansResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanPaymentPlans == input.LoanPaymentPlans ||
                    this.LoanPaymentPlans != null &&
                    input.LoanPaymentPlans != null &&
                    this.LoanPaymentPlans.SequenceEqual(input.LoanPaymentPlans)
                ) && 
                (
                    this.ServiceCharge == input.ServiceCharge ||
                    (this.ServiceCharge != null &&
                    this.ServiceCharge.Equals(input.ServiceCharge))
                ) && 
                (
                    this.AdditionalServiceCharge == input.AdditionalServiceCharge ||
                    (this.AdditionalServiceCharge != null &&
                    this.AdditionalServiceCharge.Equals(input.AdditionalServiceCharge))
                ) && 
                (
                    this.InternalRateOfReturn == input.InternalRateOfReturn ||
                    (this.InternalRateOfReturn != null &&
                    this.InternalRateOfReturn.Equals(input.InternalRateOfReturn))
                ) && 
                (
                    this.ListResponse == input.ListResponse ||
                    (this.ListResponse != null &&
                    this.ListResponse.Equals(input.ListResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanPaymentPlans != null)
                    hashCode = hashCode * 59 + this.LoanPaymentPlans.GetHashCode();
                if (this.ServiceCharge != null)
                    hashCode = hashCode * 59 + this.ServiceCharge.GetHashCode();
                if (this.AdditionalServiceCharge != null)
                    hashCode = hashCode * 59 + this.AdditionalServiceCharge.GetHashCode();
                if (this.InternalRateOfReturn != null)
                    hashCode = hashCode * 59 + this.InternalRateOfReturn.GetHashCode();
                if (this.ListResponse != null)
                    hashCode = hashCode * 59 + this.ListResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
