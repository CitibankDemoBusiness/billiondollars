/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EmploymentDetails
    /// </summary>
    [DataContract]
        public partial class EmploymentDetails :  IEquatable<EmploymentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentDetails" /> class.
        /// </summary>
        /// <param name="employerName">Name of the employer..</param>
        /// <param name="jobTitle">Job Title. This is a reference data field. Please use /v1/utilities/referenceData/{jobTitle} resource to get valid value of this field with description..</param>
        /// <param name="industryCode">Code of the industry of employment. This is a reference data field. Please use /v1/utilities/referenceData/{industryCode} resource to get valid value of this field with description..</param>
        /// <param name="businessNature">Business nature of the applicant This is a reference data field. Please use /v1/utilities/referenceData/{businessNature} resource to get valid value of this field with description..</param>
        /// <param name="employmentDurationInYears">Employment duration in years.</param>
        /// <param name="employmentDurationInMonths">Employment duration in months.</param>
        /// <param name="employmentStatus">Status of the employment.This is a reference data field. Please use /v1/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description..</param>
        /// <param name="yearsInIndustry">Years spent in industry.</param>
        /// <param name="monthsInIndustry">Months spent in industry.</param>
        public EmploymentDetails(string employerName = default(string), string jobTitle = default(string), string industryCode = default(string), string businessNature = default(string), int? employmentDurationInYears = default(int?), int? employmentDurationInMonths = default(int?), string employmentStatus = default(string), int? yearsInIndustry = default(int?), int? monthsInIndustry = default(int?))
        {
            this.EmployerName = employerName;
            this.JobTitle = jobTitle;
            this.IndustryCode = industryCode;
            this.BusinessNature = businessNature;
            this.EmploymentDurationInYears = employmentDurationInYears;
            this.EmploymentDurationInMonths = employmentDurationInMonths;
            this.EmploymentStatus = employmentStatus;
            this.YearsInIndustry = yearsInIndustry;
            this.MonthsInIndustry = monthsInIndustry;
        }
        
        /// <summary>
        /// Name of the employer.
        /// </summary>
        /// <value>Name of the employer.</value>
        [DataMember(Name="employerName", EmitDefaultValue=false)]
        public string EmployerName { get; set; }

        /// <summary>
        /// Job Title. This is a reference data field. Please use /v1/utilities/referenceData/{jobTitle} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Job Title. This is a reference data field. Please use /v1/utilities/referenceData/{jobTitle} resource to get valid value of this field with description.</value>
        [DataMember(Name="jobTitle", EmitDefaultValue=false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// Code of the industry of employment. This is a reference data field. Please use /v1/utilities/referenceData/{industryCode} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Code of the industry of employment. This is a reference data field. Please use /v1/utilities/referenceData/{industryCode} resource to get valid value of this field with description.</value>
        [DataMember(Name="industryCode", EmitDefaultValue=false)]
        public string IndustryCode { get; set; }

        /// <summary>
        /// Business nature of the applicant This is a reference data field. Please use /v1/utilities/referenceData/{businessNature} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Business nature of the applicant This is a reference data field. Please use /v1/utilities/referenceData/{businessNature} resource to get valid value of this field with description.</value>
        [DataMember(Name="businessNature", EmitDefaultValue=false)]
        public string BusinessNature { get; set; }

        /// <summary>
        /// Employment duration in years
        /// </summary>
        /// <value>Employment duration in years</value>
        [DataMember(Name="employmentDurationInYears", EmitDefaultValue=false)]
        public int? EmploymentDurationInYears { get; set; }

        /// <summary>
        /// Employment duration in months
        /// </summary>
        /// <value>Employment duration in months</value>
        [DataMember(Name="employmentDurationInMonths", EmitDefaultValue=false)]
        public int? EmploymentDurationInMonths { get; set; }

        /// <summary>
        /// Status of the employment.This is a reference data field. Please use /v1/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Status of the employment.This is a reference data field. Please use /v1/utilities/referenceData/{employmentStatus} resource to get valid value of this field with description.</value>
        [DataMember(Name="employmentStatus", EmitDefaultValue=false)]
        public string EmploymentStatus { get; set; }

        /// <summary>
        /// Years spent in industry
        /// </summary>
        /// <value>Years spent in industry</value>
        [DataMember(Name="yearsInIndustry", EmitDefaultValue=false)]
        public int? YearsInIndustry { get; set; }

        /// <summary>
        /// Months spent in industry
        /// </summary>
        /// <value>Months spent in industry</value>
        [DataMember(Name="monthsInIndustry", EmitDefaultValue=false)]
        public int? MonthsInIndustry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmploymentDetails {\n");
            sb.Append("  EmployerName: ").Append(EmployerName).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  IndustryCode: ").Append(IndustryCode).Append("\n");
            sb.Append("  BusinessNature: ").Append(BusinessNature).Append("\n");
            sb.Append("  EmploymentDurationInYears: ").Append(EmploymentDurationInYears).Append("\n");
            sb.Append("  EmploymentDurationInMonths: ").Append(EmploymentDurationInMonths).Append("\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("  YearsInIndustry: ").Append(YearsInIndustry).Append("\n");
            sb.Append("  MonthsInIndustry: ").Append(MonthsInIndustry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmploymentDetails);
        }

        /// <summary>
        /// Returns true if EmploymentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of EmploymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmploymentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmployerName == input.EmployerName ||
                    (this.EmployerName != null &&
                    this.EmployerName.Equals(input.EmployerName))
                ) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && 
                (
                    this.IndustryCode == input.IndustryCode ||
                    (this.IndustryCode != null &&
                    this.IndustryCode.Equals(input.IndustryCode))
                ) && 
                (
                    this.BusinessNature == input.BusinessNature ||
                    (this.BusinessNature != null &&
                    this.BusinessNature.Equals(input.BusinessNature))
                ) && 
                (
                    this.EmploymentDurationInYears == input.EmploymentDurationInYears ||
                    (this.EmploymentDurationInYears != null &&
                    this.EmploymentDurationInYears.Equals(input.EmploymentDurationInYears))
                ) && 
                (
                    this.EmploymentDurationInMonths == input.EmploymentDurationInMonths ||
                    (this.EmploymentDurationInMonths != null &&
                    this.EmploymentDurationInMonths.Equals(input.EmploymentDurationInMonths))
                ) && 
                (
                    this.EmploymentStatus == input.EmploymentStatus ||
                    (this.EmploymentStatus != null &&
                    this.EmploymentStatus.Equals(input.EmploymentStatus))
                ) && 
                (
                    this.YearsInIndustry == input.YearsInIndustry ||
                    (this.YearsInIndustry != null &&
                    this.YearsInIndustry.Equals(input.YearsInIndustry))
                ) && 
                (
                    this.MonthsInIndustry == input.MonthsInIndustry ||
                    (this.MonthsInIndustry != null &&
                    this.MonthsInIndustry.Equals(input.MonthsInIndustry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmployerName != null)
                    hashCode = hashCode * 59 + this.EmployerName.GetHashCode();
                if (this.JobTitle != null)
                    hashCode = hashCode * 59 + this.JobTitle.GetHashCode();
                if (this.IndustryCode != null)
                    hashCode = hashCode * 59 + this.IndustryCode.GetHashCode();
                if (this.BusinessNature != null)
                    hashCode = hashCode * 59 + this.BusinessNature.GetHashCode();
                if (this.EmploymentDurationInYears != null)
                    hashCode = hashCode * 59 + this.EmploymentDurationInYears.GetHashCode();
                if (this.EmploymentDurationInMonths != null)
                    hashCode = hashCode * 59 + this.EmploymentDurationInMonths.GetHashCode();
                if (this.EmploymentStatus != null)
                    hashCode = hashCode * 59 + this.EmploymentStatus.GetHashCode();
                if (this.YearsInIndustry != null)
                    hashCode = hashCode * 59 + this.YearsInIndustry.GetHashCode();
                if (this.MonthsInIndustry != null)
                    hashCode = hashCode * 59 + this.MonthsInIndustry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
