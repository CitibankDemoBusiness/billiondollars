/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest
    /// </summary>
    [DataContract]
        public partial class ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest :  IEquatable<ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest" /> class.
        /// </summary>
        /// <param name="loanTopupAmount">Loan top-up Amount accepted by customer (required).</param>
        /// <param name="tenor">Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description. (required).</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer (required).</param>
        public ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest(double? loanTopupAmount = default(double?), string tenor = default(string), string displayAccountNumber = default(string))
        {
            // to ensure "loanTopupAmount" is required (not null)
            if (loanTopupAmount == null)
            {
                throw new InvalidDataException("loanTopupAmount is a required property for ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest and cannot be null");
            }
            else
            {
                this.LoanTopupAmount = loanTopupAmount;
            }
            // to ensure "tenor" is required (not null)
            if (tenor == null)
            {
                throw new InvalidDataException("tenor is a required property for ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest and cannot be null");
            }
            else
            {
                this.Tenor = tenor;
            }
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
        }
        
        /// <summary>
        /// Loan top-up Amount accepted by customer
        /// </summary>
        /// <value>Loan top-up Amount accepted by customer</value>
        [DataMember(Name="loanTopupAmount", EmitDefaultValue=false)]
        public double? LoanTopupAmount { get; set; }

        /// <summary>
        /// Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Tenure of loan. This is a reference data field. Please use /v1/utilities/referenceData/{tenor} resource to get valid value of this field with description.</value>
        [DataMember(Name="tenor", EmitDefaultValue=false)]
        public string Tenor { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest {\n");
            sb.Append("  LoanTopupAmount: ").Append(LoanTopupAmount).Append("\n");
            sb.Append("  Tenor: ").Append(Tenor).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest);
        }

        /// <summary>
        /// Returns true if ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExecuteApplicationProcessingUnsecuredLoanTopupOfferAcceptanceAndSubmissionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanTopupAmount == input.LoanTopupAmount ||
                    (this.LoanTopupAmount != null &&
                    this.LoanTopupAmount.Equals(input.LoanTopupAmount))
                ) && 
                (
                    this.Tenor == input.Tenor ||
                    (this.Tenor != null &&
                    this.Tenor.Equals(input.Tenor))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanTopupAmount != null)
                    hashCode = hashCode * 59 + this.LoanTopupAmount.GetHashCode();
                if (this.Tenor != null)
                    hashCode = hashCode * 59 + this.Tenor.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
