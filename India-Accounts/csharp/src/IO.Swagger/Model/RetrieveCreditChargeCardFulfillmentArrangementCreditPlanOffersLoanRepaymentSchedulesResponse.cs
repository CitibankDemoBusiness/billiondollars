/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse
    /// </summary>
    [DataContract]
        public partial class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse :  IEquatable<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse" /> class.
        /// </summary>
        /// <param name="nextStartIndex">The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex..</param>
        /// <param name="totalLoanCost">This amount is the full cost of credit which includes the total principal and total interest..</param>
        /// <param name="amortizationSchedule">amortizationSchedule.</param>
        /// <param name="binaryData">This field contains binary data of the Repayment Schedule..</param>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse(string nextStartIndex = default(string), double? totalLoanCost = default(double?), AmortizationSchedule amortizationSchedule = default(AmortizationSchedule), string binaryData = default(string))
        {
            this.NextStartIndex = nextStartIndex;
            this.TotalLoanCost = totalLoanCost;
            this.AmortizationSchedule = amortizationSchedule;
            this.BinaryData = binaryData;
        }
        
        /// <summary>
        /// The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.
        /// </summary>
        /// <value>The next start index that indicates the next set of records to be fetched, if there are available. Typically, this value should be populated if the first response has the value of nextStartIndex.</value>
        [DataMember(Name="nextStartIndex", EmitDefaultValue=false)]
        public string NextStartIndex { get; set; }

        /// <summary>
        /// This amount is the full cost of credit which includes the total principal and total interest.
        /// </summary>
        /// <value>This amount is the full cost of credit which includes the total principal and total interest.</value>
        [DataMember(Name="totalLoanCost", EmitDefaultValue=false)]
        public double? TotalLoanCost { get; set; }

        /// <summary>
        /// Gets or Sets AmortizationSchedule
        /// </summary>
        [DataMember(Name="amortizationSchedule", EmitDefaultValue=false)]
        public AmortizationSchedule AmortizationSchedule { get; set; }

        /// <summary>
        /// This field contains binary data of the Repayment Schedule.
        /// </summary>
        /// <value>This field contains binary data of the Repayment Schedule.</value>
        [DataMember(Name="binaryData", EmitDefaultValue=false)]
        public string BinaryData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse {\n");
            sb.Append("  NextStartIndex: ").Append(NextStartIndex).Append("\n");
            sb.Append("  TotalLoanCost: ").Append(TotalLoanCost).Append("\n");
            sb.Append("  AmortizationSchedule: ").Append(AmortizationSchedule).Append("\n");
            sb.Append("  BinaryData: ").Append(BinaryData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse);
        }

        /// <summary>
        /// Returns true if RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersLoanRepaymentSchedulesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NextStartIndex == input.NextStartIndex ||
                    (this.NextStartIndex != null &&
                    this.NextStartIndex.Equals(input.NextStartIndex))
                ) && 
                (
                    this.TotalLoanCost == input.TotalLoanCost ||
                    (this.TotalLoanCost != null &&
                    this.TotalLoanCost.Equals(input.TotalLoanCost))
                ) && 
                (
                    this.AmortizationSchedule == input.AmortizationSchedule ||
                    (this.AmortizationSchedule != null &&
                    this.AmortizationSchedule.Equals(input.AmortizationSchedule))
                ) && 
                (
                    this.BinaryData == input.BinaryData ||
                    (this.BinaryData != null &&
                    this.BinaryData.Equals(input.BinaryData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NextStartIndex != null)
                    hashCode = hashCode * 59 + this.NextStartIndex.GetHashCode();
                if (this.TotalLoanCost != null)
                    hashCode = hashCode * 59 + this.TotalLoanCost.GetHashCode();
                if (this.AmortizationSchedule != null)
                    hashCode = hashCode * 59 + this.AmortizationSchedule.GetHashCode();
                if (this.BinaryData != null)
                    hashCode = hashCode * 59 + this.BinaryData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
