/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse
    /// </summary>
    [DataContract]
        public partial class EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse :  IEquatable<EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse" /> class.
        /// </summary>
        /// <param name="customerName">This refers to the name of the customer. (required).</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer.</param>
        /// <param name="accountGroup">Account Group associated with the source Account.This is a reference data field. Please use /v1/utilities/referenceData/{accountGroup} resource to get valid value of this field with description..</param>
        /// <param name="maximumEligibleLoanAmount">The maximum amount of credit that extend to a customer (required).</param>
        /// <param name="minimumEligibleLoanAmount">The minimum amount of credit that extend to a customer (required).</param>
        /// <param name="offerIndicator">Indicator to determine if offer is rate or fee based. This is a reference data field. Please use /v1/apac/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description. (required).</param>
        /// <param name="loanBookingPlan">loanBookingPlan.</param>
        /// <param name="lopCategory">Indicator to determine the type of LOP Offer. This is a reference data field. Please use /v1/utilities/referenceData/{lopCategory} resource to get valid value of this field with description..</param>
        public EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse(string customerName = default(string), string displayAccountNumber = default(string), string accountGroup = default(string), double? maximumEligibleLoanAmount = default(double?), double? minimumEligibleLoanAmount = default(double?), string offerIndicator = default(string), List<LoanBookingPlan> loanBookingPlan = default(List<LoanBookingPlan>), string lopCategory = default(string))
        {
            // to ensure "customerName" is required (not null)
            if (customerName == null)
            {
                throw new InvalidDataException("customerName is a required property for EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse and cannot be null");
            }
            else
            {
                this.CustomerName = customerName;
            }
            // to ensure "maximumEligibleLoanAmount" is required (not null)
            if (maximumEligibleLoanAmount == null)
            {
                throw new InvalidDataException("maximumEligibleLoanAmount is a required property for EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse and cannot be null");
            }
            else
            {
                this.MaximumEligibleLoanAmount = maximumEligibleLoanAmount;
            }
            // to ensure "minimumEligibleLoanAmount" is required (not null)
            if (minimumEligibleLoanAmount == null)
            {
                throw new InvalidDataException("minimumEligibleLoanAmount is a required property for EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse and cannot be null");
            }
            else
            {
                this.MinimumEligibleLoanAmount = minimumEligibleLoanAmount;
            }
            // to ensure "offerIndicator" is required (not null)
            if (offerIndicator == null)
            {
                throw new InvalidDataException("offerIndicator is a required property for EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse and cannot be null");
            }
            else
            {
                this.OfferIndicator = offerIndicator;
            }
            this.DisplayAccountNumber = displayAccountNumber;
            this.AccountGroup = accountGroup;
            this.LoanBookingPlan = loanBookingPlan;
            this.LopCategory = lopCategory;
        }
        
        /// <summary>
        /// This refers to the name of the customer.
        /// </summary>
        /// <value>This refers to the name of the customer.</value>
        [DataMember(Name="customerName", EmitDefaultValue=false)]
        public string CustomerName { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// Account Group associated with the source Account.This is a reference data field. Please use /v1/utilities/referenceData/{accountGroup} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Account Group associated with the source Account.This is a reference data field. Please use /v1/utilities/referenceData/{accountGroup} resource to get valid value of this field with description.</value>
        [DataMember(Name="accountGroup", EmitDefaultValue=false)]
        public string AccountGroup { get; set; }

        /// <summary>
        /// The maximum amount of credit that extend to a customer
        /// </summary>
        /// <value>The maximum amount of credit that extend to a customer</value>
        [DataMember(Name="maximumEligibleLoanAmount", EmitDefaultValue=false)]
        public double? MaximumEligibleLoanAmount { get; set; }

        /// <summary>
        /// The minimum amount of credit that extend to a customer
        /// </summary>
        /// <value>The minimum amount of credit that extend to a customer</value>
        [DataMember(Name="minimumEligibleLoanAmount", EmitDefaultValue=false)]
        public double? MinimumEligibleLoanAmount { get; set; }

        /// <summary>
        /// Indicator to determine if offer is rate or fee based. This is a reference data field. Please use /v1/apac/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Indicator to determine if offer is rate or fee based. This is a reference data field. Please use /v1/apac/utilities/referenceData/{offerIndicator} resource to get valid value of this field with description.</value>
        [DataMember(Name="offerIndicator", EmitDefaultValue=false)]
        public string OfferIndicator { get; set; }

        /// <summary>
        /// Gets or Sets LoanBookingPlan
        /// </summary>
        [DataMember(Name="loanBookingPlan", EmitDefaultValue=false)]
        public List<LoanBookingPlan> LoanBookingPlan { get; set; }

        /// <summary>
        /// Indicator to determine the type of LOP Offer. This is a reference data field. Please use /v1/utilities/referenceData/{lopCategory} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Indicator to determine the type of LOP Offer. This is a reference data field. Please use /v1/utilities/referenceData/{lopCategory} resource to get valid value of this field with description.</value>
        [DataMember(Name="lopCategory", EmitDefaultValue=false)]
        public string LopCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse {\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  AccountGroup: ").Append(AccountGroup).Append("\n");
            sb.Append("  MaximumEligibleLoanAmount: ").Append(MaximumEligibleLoanAmount).Append("\n");
            sb.Append("  MinimumEligibleLoanAmount: ").Append(MinimumEligibleLoanAmount).Append("\n");
            sb.Append("  OfferIndicator: ").Append(OfferIndicator).Append("\n");
            sb.Append("  LoanBookingPlan: ").Append(LoanBookingPlan).Append("\n");
            sb.Append("  LopCategory: ").Append(LopCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse);
        }

        /// <summary>
        /// Returns true if EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvaluateCustomerEligibilityAssessmentCheckPreLoginResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.AccountGroup == input.AccountGroup ||
                    (this.AccountGroup != null &&
                    this.AccountGroup.Equals(input.AccountGroup))
                ) && 
                (
                    this.MaximumEligibleLoanAmount == input.MaximumEligibleLoanAmount ||
                    (this.MaximumEligibleLoanAmount != null &&
                    this.MaximumEligibleLoanAmount.Equals(input.MaximumEligibleLoanAmount))
                ) && 
                (
                    this.MinimumEligibleLoanAmount == input.MinimumEligibleLoanAmount ||
                    (this.MinimumEligibleLoanAmount != null &&
                    this.MinimumEligibleLoanAmount.Equals(input.MinimumEligibleLoanAmount))
                ) && 
                (
                    this.OfferIndicator == input.OfferIndicator ||
                    (this.OfferIndicator != null &&
                    this.OfferIndicator.Equals(input.OfferIndicator))
                ) && 
                (
                    this.LoanBookingPlan == input.LoanBookingPlan ||
                    this.LoanBookingPlan != null &&
                    input.LoanBookingPlan != null &&
                    this.LoanBookingPlan.SequenceEqual(input.LoanBookingPlan)
                ) && 
                (
                    this.LopCategory == input.LopCategory ||
                    (this.LopCategory != null &&
                    this.LopCategory.Equals(input.LopCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.AccountGroup != null)
                    hashCode = hashCode * 59 + this.AccountGroup.GetHashCode();
                if (this.MaximumEligibleLoanAmount != null)
                    hashCode = hashCode * 59 + this.MaximumEligibleLoanAmount.GetHashCode();
                if (this.MinimumEligibleLoanAmount != null)
                    hashCode = hashCode * 59 + this.MinimumEligibleLoanAmount.GetHashCode();
                if (this.OfferIndicator != null)
                    hashCode = hashCode * 59 + this.OfferIndicator.GetHashCode();
                if (this.LoanBookingPlan != null)
                    hashCode = hashCode * 59 + this.LoanBookingPlan.GetHashCode();
                if (this.LopCategory != null)
                    hashCode = hashCode * 59 + this.LopCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
