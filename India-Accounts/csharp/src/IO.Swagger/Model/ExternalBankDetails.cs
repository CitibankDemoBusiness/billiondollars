/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExternalBankDetails
    /// </summary>
    [DataContract]
        public partial class ExternalBankDetails :  IEquatable<ExternalBankDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalBankDetails" /> class.
        /// </summary>
        /// <param name="bankCode">This field is to indicate the bank code. Code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions code (required).</param>
        /// <param name="destinationAccountId">The destination account identifier in encrypted format.Typically, this is not displayed to the customer. (required).</param>
        /// <param name="displayDestinationAccountNumber">A masked account number that can be displayed to the customer.</param>
        public ExternalBankDetails(string bankCode = default(string), string destinationAccountId = default(string), string displayDestinationAccountNumber = default(string))
        {
            // to ensure "bankCode" is required (not null)
            if (bankCode == null)
            {
                throw new InvalidDataException("bankCode is a required property for ExternalBankDetails and cannot be null");
            }
            else
            {
                this.BankCode = bankCode;
            }
            // to ensure "destinationAccountId" is required (not null)
            if (destinationAccountId == null)
            {
                throw new InvalidDataException("destinationAccountId is a required property for ExternalBankDetails and cannot be null");
            }
            else
            {
                this.DestinationAccountId = destinationAccountId;
            }
            this.DisplayDestinationAccountNumber = displayDestinationAccountNumber;
        }
        
        /// <summary>
        /// This field is to indicate the bank code. Code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions code
        /// </summary>
        /// <value>This field is to indicate the bank code. Code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions code</value>
        [DataMember(Name="bankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }

        /// <summary>
        /// The destination account identifier in encrypted format.Typically, this is not displayed to the customer.
        /// </summary>
        /// <value>The destination account identifier in encrypted format.Typically, this is not displayed to the customer.</value>
        [DataMember(Name="destinationAccountId", EmitDefaultValue=false)]
        public string DestinationAccountId { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayDestinationAccountNumber", EmitDefaultValue=false)]
        public string DisplayDestinationAccountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalBankDetails {\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  DestinationAccountId: ").Append(DestinationAccountId).Append("\n");
            sb.Append("  DisplayDestinationAccountNumber: ").Append(DisplayDestinationAccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalBankDetails);
        }

        /// <summary>
        /// Returns true if ExternalBankDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalBankDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalBankDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.DestinationAccountId == input.DestinationAccountId ||
                    (this.DestinationAccountId != null &&
                    this.DestinationAccountId.Equals(input.DestinationAccountId))
                ) && 
                (
                    this.DisplayDestinationAccountNumber == input.DisplayDestinationAccountNumber ||
                    (this.DisplayDestinationAccountNumber != null &&
                    this.DisplayDestinationAccountNumber.Equals(input.DisplayDestinationAccountNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.DestinationAccountId != null)
                    hashCode = hashCode * 59 + this.DestinationAccountId.GetHashCode();
                if (this.DisplayDestinationAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayDestinationAccountNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
