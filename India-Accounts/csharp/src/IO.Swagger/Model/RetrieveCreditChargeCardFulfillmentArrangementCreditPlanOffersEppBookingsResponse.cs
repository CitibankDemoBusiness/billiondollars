/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse
    /// </summary>
    [DataContract]
        public partial class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse :  IEquatable<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse" /> class.
        /// </summary>
        /// <param name="loanReferenceId">The unique  reference Id used to identify this Loan from all the other Loans (required).</param>
        /// <param name="installmentAmount">Installment amount to be paid by customer in order to repay the loan..</param>
        /// <param name="principalAmount">The portion of the Principal Amount Paid for the loan..</param>
        /// <param name="installmentInterestAmount">The interest amount to be paid as installment..</param>
        /// <param name="initialInterestAmount">Initial interest amount charged to customer from the epp booking date to the first installment start date.</param>
        /// <param name="statementUnpaidBalanceAmount">This field indicates the remaining statement balance amount that remains due and payable..</param>
        /// <param name="statementMinimumDueBalanceAmount">Minimum due amount for a payment cycle.</param>
        /// <param name="statementPaymentDueDate">Next payment due date in ISO 8601 date format YYYY-MM-DD.</param>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse(string loanReferenceId = default(string), double? installmentAmount = default(double?), double? principalAmount = default(double?), double? installmentInterestAmount = default(double?), double? initialInterestAmount = default(double?), double? statementUnpaidBalanceAmount = default(double?), double? statementMinimumDueBalanceAmount = default(double?), DateTime? statementPaymentDueDate = default(DateTime?))
        {
            // to ensure "loanReferenceId" is required (not null)
            if (loanReferenceId == null)
            {
                throw new InvalidDataException("loanReferenceId is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse and cannot be null");
            }
            else
            {
                this.LoanReferenceId = loanReferenceId;
            }
            this.InstallmentAmount = installmentAmount;
            this.PrincipalAmount = principalAmount;
            this.InstallmentInterestAmount = installmentInterestAmount;
            this.InitialInterestAmount = initialInterestAmount;
            this.StatementUnpaidBalanceAmount = statementUnpaidBalanceAmount;
            this.StatementMinimumDueBalanceAmount = statementMinimumDueBalanceAmount;
            this.StatementPaymentDueDate = statementPaymentDueDate;
        }
        
        /// <summary>
        /// The unique  reference Id used to identify this Loan from all the other Loans
        /// </summary>
        /// <value>The unique  reference Id used to identify this Loan from all the other Loans</value>
        [DataMember(Name="loanReferenceId", EmitDefaultValue=false)]
        public string LoanReferenceId { get; set; }

        /// <summary>
        /// Installment amount to be paid by customer in order to repay the loan.
        /// </summary>
        /// <value>Installment amount to be paid by customer in order to repay the loan.</value>
        [DataMember(Name="installmentAmount", EmitDefaultValue=false)]
        public double? InstallmentAmount { get; set; }

        /// <summary>
        /// The portion of the Principal Amount Paid for the loan.
        /// </summary>
        /// <value>The portion of the Principal Amount Paid for the loan.</value>
        [DataMember(Name="principalAmount", EmitDefaultValue=false)]
        public double? PrincipalAmount { get; set; }

        /// <summary>
        /// The interest amount to be paid as installment.
        /// </summary>
        /// <value>The interest amount to be paid as installment.</value>
        [DataMember(Name="installmentInterestAmount", EmitDefaultValue=false)]
        public double? InstallmentInterestAmount { get; set; }

        /// <summary>
        /// Initial interest amount charged to customer from the epp booking date to the first installment start date
        /// </summary>
        /// <value>Initial interest amount charged to customer from the epp booking date to the first installment start date</value>
        [DataMember(Name="initialInterestAmount", EmitDefaultValue=false)]
        public double? InitialInterestAmount { get; set; }

        /// <summary>
        /// This field indicates the remaining statement balance amount that remains due and payable.
        /// </summary>
        /// <value>This field indicates the remaining statement balance amount that remains due and payable.</value>
        [DataMember(Name="statementUnpaidBalanceAmount", EmitDefaultValue=false)]
        public double? StatementUnpaidBalanceAmount { get; set; }

        /// <summary>
        /// Minimum due amount for a payment cycle
        /// </summary>
        /// <value>Minimum due amount for a payment cycle</value>
        [DataMember(Name="statementMinimumDueBalanceAmount", EmitDefaultValue=false)]
        public double? StatementMinimumDueBalanceAmount { get; set; }

        /// <summary>
        /// Next payment due date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Next payment due date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="statementPaymentDueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StatementPaymentDueDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse {\n");
            sb.Append("  LoanReferenceId: ").Append(LoanReferenceId).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("  PrincipalAmount: ").Append(PrincipalAmount).Append("\n");
            sb.Append("  InstallmentInterestAmount: ").Append(InstallmentInterestAmount).Append("\n");
            sb.Append("  InitialInterestAmount: ").Append(InitialInterestAmount).Append("\n");
            sb.Append("  StatementUnpaidBalanceAmount: ").Append(StatementUnpaidBalanceAmount).Append("\n");
            sb.Append("  StatementMinimumDueBalanceAmount: ").Append(StatementMinimumDueBalanceAmount).Append("\n");
            sb.Append("  StatementPaymentDueDate: ").Append(StatementPaymentDueDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse);
        }

        /// <summary>
        /// Returns true if RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanOffersEppBookingsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanReferenceId == input.LoanReferenceId ||
                    (this.LoanReferenceId != null &&
                    this.LoanReferenceId.Equals(input.LoanReferenceId))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                ) && 
                (
                    this.PrincipalAmount == input.PrincipalAmount ||
                    (this.PrincipalAmount != null &&
                    this.PrincipalAmount.Equals(input.PrincipalAmount))
                ) && 
                (
                    this.InstallmentInterestAmount == input.InstallmentInterestAmount ||
                    (this.InstallmentInterestAmount != null &&
                    this.InstallmentInterestAmount.Equals(input.InstallmentInterestAmount))
                ) && 
                (
                    this.InitialInterestAmount == input.InitialInterestAmount ||
                    (this.InitialInterestAmount != null &&
                    this.InitialInterestAmount.Equals(input.InitialInterestAmount))
                ) && 
                (
                    this.StatementUnpaidBalanceAmount == input.StatementUnpaidBalanceAmount ||
                    (this.StatementUnpaidBalanceAmount != null &&
                    this.StatementUnpaidBalanceAmount.Equals(input.StatementUnpaidBalanceAmount))
                ) && 
                (
                    this.StatementMinimumDueBalanceAmount == input.StatementMinimumDueBalanceAmount ||
                    (this.StatementMinimumDueBalanceAmount != null &&
                    this.StatementMinimumDueBalanceAmount.Equals(input.StatementMinimumDueBalanceAmount))
                ) && 
                (
                    this.StatementPaymentDueDate == input.StatementPaymentDueDate ||
                    (this.StatementPaymentDueDate != null &&
                    this.StatementPaymentDueDate.Equals(input.StatementPaymentDueDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanReferenceId != null)
                    hashCode = hashCode * 59 + this.LoanReferenceId.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                if (this.PrincipalAmount != null)
                    hashCode = hashCode * 59 + this.PrincipalAmount.GetHashCode();
                if (this.InstallmentInterestAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentInterestAmount.GetHashCode();
                if (this.InitialInterestAmount != null)
                    hashCode = hashCode * 59 + this.InitialInterestAmount.GetHashCode();
                if (this.StatementUnpaidBalanceAmount != null)
                    hashCode = hashCode * 59 + this.StatementUnpaidBalanceAmount.GetHashCode();
                if (this.StatementMinimumDueBalanceAmount != null)
                    hashCode = hashCode * 59 + this.StatementMinimumDueBalanceAmount.GetHashCode();
                if (this.StatementPaymentDueDate != null)
                    hashCode = hashCode * 59 + this.StatementPaymentDueDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
