/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Statements
    /// </summary>
    [DataContract]
        public partial class Statements :  IEquatable<Statements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Statements" /> class.
        /// </summary>
        /// <param name="statmentId">Unique Identifier associated with the statement generated for a customer for a particular period. (required).</param>
        /// <param name="statementDate">Date on which the account statement has been generated in ISO 8601 date format YYYY-MM-DD. (required).</param>
        public Statements(string statmentId = default(string), DateTime? statementDate = default(DateTime?))
        {
            // to ensure "statmentId" is required (not null)
            if (statmentId == null)
            {
                throw new InvalidDataException("statmentId is a required property for Statements and cannot be null");
            }
            else
            {
                this.StatmentId = statmentId;
            }
            // to ensure "statementDate" is required (not null)
            if (statementDate == null)
            {
                throw new InvalidDataException("statementDate is a required property for Statements and cannot be null");
            }
            else
            {
                this.StatementDate = statementDate;
            }
        }
        
        /// <summary>
        /// Unique Identifier associated with the statement generated for a customer for a particular period.
        /// </summary>
        /// <value>Unique Identifier associated with the statement generated for a customer for a particular period.</value>
        [DataMember(Name="statmentId", EmitDefaultValue=false)]
        public string StatmentId { get; set; }

        /// <summary>
        /// Date on which the account statement has been generated in ISO 8601 date format YYYY-MM-DD.
        /// </summary>
        /// <value>Date on which the account statement has been generated in ISO 8601 date format YYYY-MM-DD.</value>
        [DataMember(Name="statementDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StatementDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Statements {\n");
            sb.Append("  StatmentId: ").Append(StatmentId).Append("\n");
            sb.Append("  StatementDate: ").Append(StatementDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Statements);
        }

        /// <summary>
        /// Returns true if Statements instances are equal
        /// </summary>
        /// <param name="input">Instance of Statements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Statements input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatmentId == input.StatmentId ||
                    (this.StatmentId != null &&
                    this.StatmentId.Equals(input.StatmentId))
                ) && 
                (
                    this.StatementDate == input.StatementDate ||
                    (this.StatementDate != null &&
                    this.StatementDate.Equals(input.StatementDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatmentId != null)
                    hashCode = hashCode * 59 + this.StatmentId.GetHashCode();
                if (this.StatementDate != null)
                    hashCode = hashCode * 59 + this.StatementDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
