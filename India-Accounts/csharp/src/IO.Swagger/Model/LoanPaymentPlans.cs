/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoanPaymentPlans
    /// </summary>
    [DataContract]
        public partial class LoanPaymentPlans :  IEquatable<LoanPaymentPlans>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanPaymentPlans" /> class.
        /// </summary>
        /// <param name="loanTenure">Tenure of loan against card (required).</param>
        /// <param name="baseInterestRate">Base Interest rate.</param>
        /// <param name="annualPercentageRate">Annual percentage rate of the loan.</param>
        /// <param name="installmentAmount">Installment amount to be payed by customer in order to repay the loan..</param>
        /// <param name="interestRate">Interest rate for the loan.</param>
        /// <param name="installmentInterestAmount">The interest amount to be paid as installment.</param>
        /// <param name="firstTotalInstallmentAmount">Monthly total (Interest + Amount).</param>
        /// <param name="loanCetPercentage">Loan CET Percentage.</param>
        /// <param name="fixedInterestRate">Fixed interest rate.</param>
        /// <param name="loanBookingFeeIndicator">Loan booking fee indicator.</param>
        /// <param name="loanBookingFee">Loan booking fee.</param>
        /// <param name="loanBookingFeePercentage">Loan booking fee percentage.</param>
        /// <param name="initialInterestAmount">Initial interest(0th interest).</param>
        /// <param name="initialFeeAmount">Initial fee amount charged to customer.</param>
        public LoanPaymentPlans(string loanTenure = default(string), double? baseInterestRate = default(double?), double? annualPercentageRate = default(double?), double? installmentAmount = default(double?), double? interestRate = default(double?), double? installmentInterestAmount = default(double?), double? firstTotalInstallmentAmount = default(double?), double? loanCetPercentage = default(double?), double? fixedInterestRate = default(double?), string loanBookingFeeIndicator = default(string), double? loanBookingFee = default(double?), double? loanBookingFeePercentage = default(double?), double? initialInterestAmount = default(double?), double? initialFeeAmount = default(double?))
        {
            // to ensure "loanTenure" is required (not null)
            if (loanTenure == null)
            {
                throw new InvalidDataException("loanTenure is a required property for LoanPaymentPlans and cannot be null");
            }
            else
            {
                this.LoanTenure = loanTenure;
            }
            this.BaseInterestRate = baseInterestRate;
            this.AnnualPercentageRate = annualPercentageRate;
            this.InstallmentAmount = installmentAmount;
            this.InterestRate = interestRate;
            this.InstallmentInterestAmount = installmentInterestAmount;
            this.FirstTotalInstallmentAmount = firstTotalInstallmentAmount;
            this.LoanCetPercentage = loanCetPercentage;
            this.FixedInterestRate = fixedInterestRate;
            this.LoanBookingFeeIndicator = loanBookingFeeIndicator;
            this.LoanBookingFee = loanBookingFee;
            this.LoanBookingFeePercentage = loanBookingFeePercentage;
            this.InitialInterestAmount = initialInterestAmount;
            this.InitialFeeAmount = initialFeeAmount;
        }
        
        /// <summary>
        /// Tenure of loan against card
        /// </summary>
        /// <value>Tenure of loan against card</value>
        [DataMember(Name="loanTenure", EmitDefaultValue=false)]
        public string LoanTenure { get; set; }

        /// <summary>
        /// Base Interest rate
        /// </summary>
        /// <value>Base Interest rate</value>
        [DataMember(Name="baseInterestRate", EmitDefaultValue=false)]
        public double? BaseInterestRate { get; set; }

        /// <summary>
        /// Annual percentage rate of the loan
        /// </summary>
        /// <value>Annual percentage rate of the loan</value>
        [DataMember(Name="annualPercentageRate", EmitDefaultValue=false)]
        public double? AnnualPercentageRate { get; set; }

        /// <summary>
        /// Installment amount to be payed by customer in order to repay the loan.
        /// </summary>
        /// <value>Installment amount to be payed by customer in order to repay the loan.</value>
        [DataMember(Name="installmentAmount", EmitDefaultValue=false)]
        public double? InstallmentAmount { get; set; }

        /// <summary>
        /// Interest rate for the loan
        /// </summary>
        /// <value>Interest rate for the loan</value>
        [DataMember(Name="interestRate", EmitDefaultValue=false)]
        public double? InterestRate { get; set; }

        /// <summary>
        /// The interest amount to be paid as installment
        /// </summary>
        /// <value>The interest amount to be paid as installment</value>
        [DataMember(Name="installmentInterestAmount", EmitDefaultValue=false)]
        public double? InstallmentInterestAmount { get; set; }

        /// <summary>
        /// Monthly total (Interest + Amount)
        /// </summary>
        /// <value>Monthly total (Interest + Amount)</value>
        [DataMember(Name="firstTotalInstallmentAmount", EmitDefaultValue=false)]
        public double? FirstTotalInstallmentAmount { get; set; }

        /// <summary>
        /// Loan CET Percentage
        /// </summary>
        /// <value>Loan CET Percentage</value>
        [DataMember(Name="loanCetPercentage", EmitDefaultValue=false)]
        public double? LoanCetPercentage { get; set; }

        /// <summary>
        /// Fixed interest rate
        /// </summary>
        /// <value>Fixed interest rate</value>
        [DataMember(Name="fixedInterestRate", EmitDefaultValue=false)]
        public double? FixedInterestRate { get; set; }

        /// <summary>
        /// Loan booking fee indicator
        /// </summary>
        /// <value>Loan booking fee indicator</value>
        [DataMember(Name="loanBookingFeeIndicator", EmitDefaultValue=false)]
        public string LoanBookingFeeIndicator { get; set; }

        /// <summary>
        /// Loan booking fee
        /// </summary>
        /// <value>Loan booking fee</value>
        [DataMember(Name="loanBookingFee", EmitDefaultValue=false)]
        public double? LoanBookingFee { get; set; }

        /// <summary>
        /// Loan booking fee percentage
        /// </summary>
        /// <value>Loan booking fee percentage</value>
        [DataMember(Name="loanBookingFeePercentage", EmitDefaultValue=false)]
        public double? LoanBookingFeePercentage { get; set; }

        /// <summary>
        /// Initial interest(0th interest)
        /// </summary>
        /// <value>Initial interest(0th interest)</value>
        [DataMember(Name="initialInterestAmount", EmitDefaultValue=false)]
        public double? InitialInterestAmount { get; set; }

        /// <summary>
        /// Initial fee amount charged to customer
        /// </summary>
        /// <value>Initial fee amount charged to customer</value>
        [DataMember(Name="initialFeeAmount", EmitDefaultValue=false)]
        public double? InitialFeeAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanPaymentPlans {\n");
            sb.Append("  LoanTenure: ").Append(LoanTenure).Append("\n");
            sb.Append("  BaseInterestRate: ").Append(BaseInterestRate).Append("\n");
            sb.Append("  AnnualPercentageRate: ").Append(AnnualPercentageRate).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  InstallmentInterestAmount: ").Append(InstallmentInterestAmount).Append("\n");
            sb.Append("  FirstTotalInstallmentAmount: ").Append(FirstTotalInstallmentAmount).Append("\n");
            sb.Append("  LoanCetPercentage: ").Append(LoanCetPercentage).Append("\n");
            sb.Append("  FixedInterestRate: ").Append(FixedInterestRate).Append("\n");
            sb.Append("  LoanBookingFeeIndicator: ").Append(LoanBookingFeeIndicator).Append("\n");
            sb.Append("  LoanBookingFee: ").Append(LoanBookingFee).Append("\n");
            sb.Append("  LoanBookingFeePercentage: ").Append(LoanBookingFeePercentage).Append("\n");
            sb.Append("  InitialInterestAmount: ").Append(InitialInterestAmount).Append("\n");
            sb.Append("  InitialFeeAmount: ").Append(InitialFeeAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanPaymentPlans);
        }

        /// <summary>
        /// Returns true if LoanPaymentPlans instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanPaymentPlans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanPaymentPlans input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanTenure == input.LoanTenure ||
                    (this.LoanTenure != null &&
                    this.LoanTenure.Equals(input.LoanTenure))
                ) && 
                (
                    this.BaseInterestRate == input.BaseInterestRate ||
                    (this.BaseInterestRate != null &&
                    this.BaseInterestRate.Equals(input.BaseInterestRate))
                ) && 
                (
                    this.AnnualPercentageRate == input.AnnualPercentageRate ||
                    (this.AnnualPercentageRate != null &&
                    this.AnnualPercentageRate.Equals(input.AnnualPercentageRate))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && 
                (
                    this.InstallmentInterestAmount == input.InstallmentInterestAmount ||
                    (this.InstallmentInterestAmount != null &&
                    this.InstallmentInterestAmount.Equals(input.InstallmentInterestAmount))
                ) && 
                (
                    this.FirstTotalInstallmentAmount == input.FirstTotalInstallmentAmount ||
                    (this.FirstTotalInstallmentAmount != null &&
                    this.FirstTotalInstallmentAmount.Equals(input.FirstTotalInstallmentAmount))
                ) && 
                (
                    this.LoanCetPercentage == input.LoanCetPercentage ||
                    (this.LoanCetPercentage != null &&
                    this.LoanCetPercentage.Equals(input.LoanCetPercentage))
                ) && 
                (
                    this.FixedInterestRate == input.FixedInterestRate ||
                    (this.FixedInterestRate != null &&
                    this.FixedInterestRate.Equals(input.FixedInterestRate))
                ) && 
                (
                    this.LoanBookingFeeIndicator == input.LoanBookingFeeIndicator ||
                    (this.LoanBookingFeeIndicator != null &&
                    this.LoanBookingFeeIndicator.Equals(input.LoanBookingFeeIndicator))
                ) && 
                (
                    this.LoanBookingFee == input.LoanBookingFee ||
                    (this.LoanBookingFee != null &&
                    this.LoanBookingFee.Equals(input.LoanBookingFee))
                ) && 
                (
                    this.LoanBookingFeePercentage == input.LoanBookingFeePercentage ||
                    (this.LoanBookingFeePercentage != null &&
                    this.LoanBookingFeePercentage.Equals(input.LoanBookingFeePercentage))
                ) && 
                (
                    this.InitialInterestAmount == input.InitialInterestAmount ||
                    (this.InitialInterestAmount != null &&
                    this.InitialInterestAmount.Equals(input.InitialInterestAmount))
                ) && 
                (
                    this.InitialFeeAmount == input.InitialFeeAmount ||
                    (this.InitialFeeAmount != null &&
                    this.InitialFeeAmount.Equals(input.InitialFeeAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanTenure != null)
                    hashCode = hashCode * 59 + this.LoanTenure.GetHashCode();
                if (this.BaseInterestRate != null)
                    hashCode = hashCode * 59 + this.BaseInterestRate.GetHashCode();
                if (this.AnnualPercentageRate != null)
                    hashCode = hashCode * 59 + this.AnnualPercentageRate.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                if (this.InstallmentInterestAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentInterestAmount.GetHashCode();
                if (this.FirstTotalInstallmentAmount != null)
                    hashCode = hashCode * 59 + this.FirstTotalInstallmentAmount.GetHashCode();
                if (this.LoanCetPercentage != null)
                    hashCode = hashCode * 59 + this.LoanCetPercentage.GetHashCode();
                if (this.FixedInterestRate != null)
                    hashCode = hashCode * 59 + this.FixedInterestRate.GetHashCode();
                if (this.LoanBookingFeeIndicator != null)
                    hashCode = hashCode * 59 + this.LoanBookingFeeIndicator.GetHashCode();
                if (this.LoanBookingFee != null)
                    hashCode = hashCode * 59 + this.LoanBookingFee.GetHashCode();
                if (this.LoanBookingFeePercentage != null)
                    hashCode = hashCode * 59 + this.LoanBookingFeePercentage.GetHashCode();
                if (this.InitialInterestAmount != null)
                    hashCode = hashCode * 59 + this.InitialInterestAmount.GetHashCode();
                if (this.InitialFeeAmount != null)
                    hashCode = hashCode * 59 + this.InitialFeeAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
