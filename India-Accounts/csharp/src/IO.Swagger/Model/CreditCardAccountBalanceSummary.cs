/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditCardAccountBalanceSummary
    /// </summary>
    [DataContract]
        public partial class CreditCardAccountBalanceSummary :  IEquatable<CreditCardAccountBalanceSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardAccountBalanceSummary" /> class.
        /// </summary>
        /// <param name="totalDisputedTransactionAmount">This is the total disputed transaction amount..</param>
        /// <param name="currentOutstandingAmount">This includes the current intra-day transactions which yet to be posted on card. (required).</param>
        /// <param name="currentAccruedInterest">Interest which has been accrued till last accrual date. (required).</param>
        /// <param name="paymentDueAmount">Total amount customer needs to pay in order to clear the balance. (required).</param>
        /// <param name="availablePointBalance">Available reward points on the credit card.</param>
        /// <param name="partialResponseInformation">Partial success response.</param>
        public CreditCardAccountBalanceSummary(double? totalDisputedTransactionAmount = default(double?), double? currentOutstandingAmount = default(double?), double? currentAccruedInterest = default(double?), double? paymentDueAmount = default(double?), double? availablePointBalance = default(double?), List<PartialResponseInformation> partialResponseInformation = default(List<PartialResponseInformation>))
        {
            // to ensure "currentOutstandingAmount" is required (not null)
            if (currentOutstandingAmount == null)
            {
                throw new InvalidDataException("currentOutstandingAmount is a required property for CreditCardAccountBalanceSummary and cannot be null");
            }
            else
            {
                this.CurrentOutstandingAmount = currentOutstandingAmount;
            }
            // to ensure "currentAccruedInterest" is required (not null)
            if (currentAccruedInterest == null)
            {
                throw new InvalidDataException("currentAccruedInterest is a required property for CreditCardAccountBalanceSummary and cannot be null");
            }
            else
            {
                this.CurrentAccruedInterest = currentAccruedInterest;
            }
            // to ensure "paymentDueAmount" is required (not null)
            if (paymentDueAmount == null)
            {
                throw new InvalidDataException("paymentDueAmount is a required property for CreditCardAccountBalanceSummary and cannot be null");
            }
            else
            {
                this.PaymentDueAmount = paymentDueAmount;
            }
            this.TotalDisputedTransactionAmount = totalDisputedTransactionAmount;
            this.AvailablePointBalance = availablePointBalance;
            this.PartialResponseInformation = partialResponseInformation;
        }
        
        /// <summary>
        /// This is the total disputed transaction amount.
        /// </summary>
        /// <value>This is the total disputed transaction amount.</value>
        [DataMember(Name="totalDisputedTransactionAmount", EmitDefaultValue=false)]
        public double? TotalDisputedTransactionAmount { get; set; }

        /// <summary>
        /// This includes the current intra-day transactions which yet to be posted on card.
        /// </summary>
        /// <value>This includes the current intra-day transactions which yet to be posted on card.</value>
        [DataMember(Name="currentOutstandingAmount", EmitDefaultValue=false)]
        public double? CurrentOutstandingAmount { get; set; }

        /// <summary>
        /// Interest which has been accrued till last accrual date.
        /// </summary>
        /// <value>Interest which has been accrued till last accrual date.</value>
        [DataMember(Name="currentAccruedInterest", EmitDefaultValue=false)]
        public double? CurrentAccruedInterest { get; set; }

        /// <summary>
        /// Total amount customer needs to pay in order to clear the balance.
        /// </summary>
        /// <value>Total amount customer needs to pay in order to clear the balance.</value>
        [DataMember(Name="paymentDueAmount", EmitDefaultValue=false)]
        public double? PaymentDueAmount { get; set; }

        /// <summary>
        /// Available reward points on the credit card
        /// </summary>
        /// <value>Available reward points on the credit card</value>
        [DataMember(Name="availablePointBalance", EmitDefaultValue=false)]
        public double? AvailablePointBalance { get; set; }

        /// <summary>
        /// Partial success response
        /// </summary>
        /// <value>Partial success response</value>
        [DataMember(Name="partialResponseInformation", EmitDefaultValue=false)]
        public List<PartialResponseInformation> PartialResponseInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardAccountBalanceSummary {\n");
            sb.Append("  TotalDisputedTransactionAmount: ").Append(TotalDisputedTransactionAmount).Append("\n");
            sb.Append("  CurrentOutstandingAmount: ").Append(CurrentOutstandingAmount).Append("\n");
            sb.Append("  CurrentAccruedInterest: ").Append(CurrentAccruedInterest).Append("\n");
            sb.Append("  PaymentDueAmount: ").Append(PaymentDueAmount).Append("\n");
            sb.Append("  AvailablePointBalance: ").Append(AvailablePointBalance).Append("\n");
            sb.Append("  PartialResponseInformation: ").Append(PartialResponseInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardAccountBalanceSummary);
        }

        /// <summary>
        /// Returns true if CreditCardAccountBalanceSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardAccountBalanceSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardAccountBalanceSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalDisputedTransactionAmount == input.TotalDisputedTransactionAmount ||
                    (this.TotalDisputedTransactionAmount != null &&
                    this.TotalDisputedTransactionAmount.Equals(input.TotalDisputedTransactionAmount))
                ) && 
                (
                    this.CurrentOutstandingAmount == input.CurrentOutstandingAmount ||
                    (this.CurrentOutstandingAmount != null &&
                    this.CurrentOutstandingAmount.Equals(input.CurrentOutstandingAmount))
                ) && 
                (
                    this.CurrentAccruedInterest == input.CurrentAccruedInterest ||
                    (this.CurrentAccruedInterest != null &&
                    this.CurrentAccruedInterest.Equals(input.CurrentAccruedInterest))
                ) && 
                (
                    this.PaymentDueAmount == input.PaymentDueAmount ||
                    (this.PaymentDueAmount != null &&
                    this.PaymentDueAmount.Equals(input.PaymentDueAmount))
                ) && 
                (
                    this.AvailablePointBalance == input.AvailablePointBalance ||
                    (this.AvailablePointBalance != null &&
                    this.AvailablePointBalance.Equals(input.AvailablePointBalance))
                ) && 
                (
                    this.PartialResponseInformation == input.PartialResponseInformation ||
                    this.PartialResponseInformation != null &&
                    input.PartialResponseInformation != null &&
                    this.PartialResponseInformation.SequenceEqual(input.PartialResponseInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalDisputedTransactionAmount != null)
                    hashCode = hashCode * 59 + this.TotalDisputedTransactionAmount.GetHashCode();
                if (this.CurrentOutstandingAmount != null)
                    hashCode = hashCode * 59 + this.CurrentOutstandingAmount.GetHashCode();
                if (this.CurrentAccruedInterest != null)
                    hashCode = hashCode * 59 + this.CurrentAccruedInterest.GetHashCode();
                if (this.PaymentDueAmount != null)
                    hashCode = hashCode * 59 + this.PaymentDueAmount.GetHashCode();
                if (this.AvailablePointBalance != null)
                    hashCode = hashCode * 59 + this.AvailablePointBalance.GetHashCode();
                if (this.PartialResponseInformation != null)
                    hashCode = hashCode * 59 + this.PartialResponseInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
