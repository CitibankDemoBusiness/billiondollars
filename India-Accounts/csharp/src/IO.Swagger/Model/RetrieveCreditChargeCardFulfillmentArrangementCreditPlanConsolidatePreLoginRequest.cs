/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest
    /// </summary>
    [DataContract]
        public partial class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest :  IEquatable<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest" /> class.
        /// </summary>
        /// <param name="oldLoanList">oldLoanList.</param>
        /// <param name="totalLoanAmount">Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount. (required).</param>
        /// <param name="loanTenureInmonths">Tenure of loan against credit card. It is considered in terms of number of months. (required).</param>
        /// <param name="topUpAmount">Additonal Topup Amount (required).</param>
        /// <param name="loanDescription">New Loan Description (required).</param>
        /// <param name="disbursementOption">This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description (required).</param>
        /// <param name="accountNumber">Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account..</param>
        /// <param name="payeeId">Payee Indicator to be mapped against Payee Detail Key.</param>
        /// <param name="birthYear">Year of birth of customer.</param>
        /// <param name="beneficiaryBankDetail">beneficiaryBankDetail.</param>
        /// <param name="loanPurpose">This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description..</param>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest(List<Loan> oldLoanList = default(List<Loan>), double? totalLoanAmount = default(double?), int? loanTenureInmonths = default(int?), double? topUpAmount = default(double?), string loanDescription = default(string), string disbursementOption = default(string), string accountNumber = default(string), string payeeId = default(string), decimal? birthYear = default(decimal?), BeneficiaryBankDetail beneficiaryBankDetail = default(BeneficiaryBankDetail), string loanPurpose = default(string))
        {
            // to ensure "totalLoanAmount" is required (not null)
            if (totalLoanAmount == null)
            {
                throw new InvalidDataException("totalLoanAmount is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest and cannot be null");
            }
            else
            {
                this.TotalLoanAmount = totalLoanAmount;
            }
            // to ensure "loanTenureInmonths" is required (not null)
            if (loanTenureInmonths == null)
            {
                throw new InvalidDataException("loanTenureInmonths is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest and cannot be null");
            }
            else
            {
                this.LoanTenureInmonths = loanTenureInmonths;
            }
            // to ensure "topUpAmount" is required (not null)
            if (topUpAmount == null)
            {
                throw new InvalidDataException("topUpAmount is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest and cannot be null");
            }
            else
            {
                this.TopUpAmount = topUpAmount;
            }
            // to ensure "loanDescription" is required (not null)
            if (loanDescription == null)
            {
                throw new InvalidDataException("loanDescription is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest and cannot be null");
            }
            else
            {
                this.LoanDescription = loanDescription;
            }
            // to ensure "disbursementOption" is required (not null)
            if (disbursementOption == null)
            {
                throw new InvalidDataException("disbursementOption is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest and cannot be null");
            }
            else
            {
                this.DisbursementOption = disbursementOption;
            }
            this.OldLoanList = oldLoanList;
            this.AccountNumber = accountNumber;
            this.PayeeId = payeeId;
            this.BirthYear = birthYear;
            this.BeneficiaryBankDetail = beneficiaryBankDetail;
            this.LoanPurpose = loanPurpose;
        }
        
        /// <summary>
        /// Gets or Sets OldLoanList
        /// </summary>
        [DataMember(Name="oldLoanList", EmitDefaultValue=false)]
        public List<Loan> OldLoanList { get; set; }

        /// <summary>
        /// Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount.
        /// </summary>
        /// <value>Total amount borrowed by customer as Loan ie., Old Loan Amount+Top up Amount.</value>
        [DataMember(Name="totalLoanAmount", EmitDefaultValue=false)]
        public double? TotalLoanAmount { get; set; }

        /// <summary>
        /// Tenure of loan against credit card. It is considered in terms of number of months.
        /// </summary>
        /// <value>Tenure of loan against credit card. It is considered in terms of number of months.</value>
        [DataMember(Name="loanTenureInmonths", EmitDefaultValue=false)]
        public int? LoanTenureInmonths { get; set; }

        /// <summary>
        /// Additonal Topup Amount
        /// </summary>
        /// <value>Additonal Topup Amount</value>
        [DataMember(Name="topUpAmount", EmitDefaultValue=false)]
        public double? TopUpAmount { get; set; }

        /// <summary>
        /// New Loan Description
        /// </summary>
        /// <value>New Loan Description</value>
        [DataMember(Name="loanDescription", EmitDefaultValue=false)]
        public string LoanDescription { get; set; }

        /// <summary>
        /// This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description
        /// </summary>
        /// <value>This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{disbursementOption} resource to get valid value of this field with description</value>
        [DataMember(Name="disbursementOption", EmitDefaultValue=false)]
        public string DisbursementOption { get; set; }

        /// <summary>
        /// Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account.
        /// </summary>
        /// <value>Customers Account Number with the Bank.   An account number is the primary identifier for ownership of an account, whether a checking account or savings account or credit card account or investment account, or a loan account.</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Payee Indicator to be mapped against Payee Detail Key
        /// </summary>
        /// <value>Payee Indicator to be mapped against Payee Detail Key</value>
        [DataMember(Name="payeeId", EmitDefaultValue=false)]
        public string PayeeId { get; set; }

        /// <summary>
        /// Year of birth of customer
        /// </summary>
        /// <value>Year of birth of customer</value>
        [DataMember(Name="birthYear", EmitDefaultValue=false)]
        public decimal? BirthYear { get; set; }

        /// <summary>
        /// Gets or Sets BeneficiaryBankDetail
        /// </summary>
        [DataMember(Name="beneficiaryBankDetail", EmitDefaultValue=false)]
        public BeneficiaryBankDetail BeneficiaryBankDetail { get; set; }

        /// <summary>
        /// This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.
        /// </summary>
        /// <value>This field indicates the options/mode in which the loan amount will be disbursed. This is a reference data field. Please use /v1/utilities/referenceData/{loanPurpose} resource to get valid value of this field with description.</value>
        [DataMember(Name="loanPurpose", EmitDefaultValue=false)]
        public string LoanPurpose { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest {\n");
            sb.Append("  OldLoanList: ").Append(OldLoanList).Append("\n");
            sb.Append("  TotalLoanAmount: ").Append(TotalLoanAmount).Append("\n");
            sb.Append("  LoanTenureInmonths: ").Append(LoanTenureInmonths).Append("\n");
            sb.Append("  TopUpAmount: ").Append(TopUpAmount).Append("\n");
            sb.Append("  LoanDescription: ").Append(LoanDescription).Append("\n");
            sb.Append("  DisbursementOption: ").Append(DisbursementOption).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  BirthYear: ").Append(BirthYear).Append("\n");
            sb.Append("  BeneficiaryBankDetail: ").Append(BeneficiaryBankDetail).Append("\n");
            sb.Append("  LoanPurpose: ").Append(LoanPurpose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest);
        }

        /// <summary>
        /// Returns true if RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanConsolidatePreLoginRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OldLoanList == input.OldLoanList ||
                    this.OldLoanList != null &&
                    input.OldLoanList != null &&
                    this.OldLoanList.SequenceEqual(input.OldLoanList)
                ) && 
                (
                    this.TotalLoanAmount == input.TotalLoanAmount ||
                    (this.TotalLoanAmount != null &&
                    this.TotalLoanAmount.Equals(input.TotalLoanAmount))
                ) && 
                (
                    this.LoanTenureInmonths == input.LoanTenureInmonths ||
                    (this.LoanTenureInmonths != null &&
                    this.LoanTenureInmonths.Equals(input.LoanTenureInmonths))
                ) && 
                (
                    this.TopUpAmount == input.TopUpAmount ||
                    (this.TopUpAmount != null &&
                    this.TopUpAmount.Equals(input.TopUpAmount))
                ) && 
                (
                    this.LoanDescription == input.LoanDescription ||
                    (this.LoanDescription != null &&
                    this.LoanDescription.Equals(input.LoanDescription))
                ) && 
                (
                    this.DisbursementOption == input.DisbursementOption ||
                    (this.DisbursementOption != null &&
                    this.DisbursementOption.Equals(input.DisbursementOption))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.BirthYear == input.BirthYear ||
                    (this.BirthYear != null &&
                    this.BirthYear.Equals(input.BirthYear))
                ) && 
                (
                    this.BeneficiaryBankDetail == input.BeneficiaryBankDetail ||
                    (this.BeneficiaryBankDetail != null &&
                    this.BeneficiaryBankDetail.Equals(input.BeneficiaryBankDetail))
                ) && 
                (
                    this.LoanPurpose == input.LoanPurpose ||
                    (this.LoanPurpose != null &&
                    this.LoanPurpose.Equals(input.LoanPurpose))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OldLoanList != null)
                    hashCode = hashCode * 59 + this.OldLoanList.GetHashCode();
                if (this.TotalLoanAmount != null)
                    hashCode = hashCode * 59 + this.TotalLoanAmount.GetHashCode();
                if (this.LoanTenureInmonths != null)
                    hashCode = hashCode * 59 + this.LoanTenureInmonths.GetHashCode();
                if (this.TopUpAmount != null)
                    hashCode = hashCode * 59 + this.TopUpAmount.GetHashCode();
                if (this.LoanDescription != null)
                    hashCode = hashCode * 59 + this.LoanDescription.GetHashCode();
                if (this.DisbursementOption != null)
                    hashCode = hashCode * 59 + this.DisbursementOption.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.BirthYear != null)
                    hashCode = hashCode * 59 + this.BirthYear.GetHashCode();
                if (this.BeneficiaryBankDetail != null)
                    hashCode = hashCode * 59 + this.BeneficiaryBankDetail.GetHashCode();
                if (this.LoanPurpose != null)
                    hashCode = hashCode * 59 + this.LoanPurpose.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
