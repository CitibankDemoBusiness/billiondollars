/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Loans
    /// </summary>
    [DataContract]
        public partial class Loans :  IEquatable<Loans>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Loans" /> class.
        /// </summary>
        /// <param name="loanReferenceId">Reference Id to uniquely identify the loan.  (required).</param>
        /// <param name="displayAccountNumber">Last 4 digits of account number. .</param>
        /// <param name="transactionDate">Transaction date in YYYY-MM-DD format value conforming to ISO 8601. (required).</param>
        /// <param name="transactionDescription">Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country. (required).</param>
        /// <param name="installmentAmount">Installment loan payment amount (required).</param>
        /// <param name="nextInstallmentAmount">Next installment amount in local currency..</param>
        /// <param name="outstandingBalanceAmount">The amount of money owed. (required).</param>
        /// <param name="tenor">Tenure of loan in months. (required).</param>
        /// <param name="outstandingTenor">Number of months remaining for completion of loan..</param>
        /// <param name="originalLoanAmount">Original loan amount borrowed by customer. (required).</param>
        /// <param name="annualPercentageRate">Interest rate for a whole year. This includes any fees or additional cost associated. (required).</param>
        /// <param name="effectiveInterestRate">Effective Percentage Rate.</param>
        /// <param name="processingChargeAmount">Charges levied on applicant by the bank to process the loan..</param>
        /// <param name="outstandingInterestAmount">Total Outstanding Interest Amount..</param>
        /// <param name="selfEarlyLoanClosureAllowedFlag">Flag to identify if the loan is allowed to be early self closed by customer or not...</param>
        /// <param name="installmentCycle">Intallment Cycle.</param>
        public Loans(string loanReferenceId = default(string), string displayAccountNumber = default(string), DateTime? transactionDate = default(DateTime?), string transactionDescription = default(string), double? installmentAmount = default(double?), double? nextInstallmentAmount = default(double?), double? outstandingBalanceAmount = default(double?), decimal? tenor = default(decimal?), decimal? outstandingTenor = default(decimal?), double? originalLoanAmount = default(double?), double? annualPercentageRate = default(double?), double? effectiveInterestRate = default(double?), double? processingChargeAmount = default(double?), double? outstandingInterestAmount = default(double?), bool? selfEarlyLoanClosureAllowedFlag = default(bool?), int? installmentCycle = default(int?))
        {
            // to ensure "loanReferenceId" is required (not null)
            if (loanReferenceId == null)
            {
                throw new InvalidDataException("loanReferenceId is a required property for Loans and cannot be null");
            }
            else
            {
                this.LoanReferenceId = loanReferenceId;
            }
            // to ensure "transactionDate" is required (not null)
            if (transactionDate == null)
            {
                throw new InvalidDataException("transactionDate is a required property for Loans and cannot be null");
            }
            else
            {
                this.TransactionDate = transactionDate;
            }
            // to ensure "transactionDescription" is required (not null)
            if (transactionDescription == null)
            {
                throw new InvalidDataException("transactionDescription is a required property for Loans and cannot be null");
            }
            else
            {
                this.TransactionDescription = transactionDescription;
            }
            // to ensure "installmentAmount" is required (not null)
            if (installmentAmount == null)
            {
                throw new InvalidDataException("installmentAmount is a required property for Loans and cannot be null");
            }
            else
            {
                this.InstallmentAmount = installmentAmount;
            }
            // to ensure "outstandingBalanceAmount" is required (not null)
            if (outstandingBalanceAmount == null)
            {
                throw new InvalidDataException("outstandingBalanceAmount is a required property for Loans and cannot be null");
            }
            else
            {
                this.OutstandingBalanceAmount = outstandingBalanceAmount;
            }
            // to ensure "tenor" is required (not null)
            if (tenor == null)
            {
                throw new InvalidDataException("tenor is a required property for Loans and cannot be null");
            }
            else
            {
                this.Tenor = tenor;
            }
            // to ensure "originalLoanAmount" is required (not null)
            if (originalLoanAmount == null)
            {
                throw new InvalidDataException("originalLoanAmount is a required property for Loans and cannot be null");
            }
            else
            {
                this.OriginalLoanAmount = originalLoanAmount;
            }
            // to ensure "annualPercentageRate" is required (not null)
            if (annualPercentageRate == null)
            {
                throw new InvalidDataException("annualPercentageRate is a required property for Loans and cannot be null");
            }
            else
            {
                this.AnnualPercentageRate = annualPercentageRate;
            }
            this.DisplayAccountNumber = displayAccountNumber;
            this.NextInstallmentAmount = nextInstallmentAmount;
            this.OutstandingTenor = outstandingTenor;
            this.EffectiveInterestRate = effectiveInterestRate;
            this.ProcessingChargeAmount = processingChargeAmount;
            this.OutstandingInterestAmount = outstandingInterestAmount;
            this.SelfEarlyLoanClosureAllowedFlag = selfEarlyLoanClosureAllowedFlag;
            this.InstallmentCycle = installmentCycle;
        }
        
        /// <summary>
        /// Reference Id to uniquely identify the loan. 
        /// </summary>
        /// <value>Reference Id to uniquely identify the loan. </value>
        [DataMember(Name="loanReferenceId", EmitDefaultValue=false)]
        public string LoanReferenceId { get; set; }

        /// <summary>
        /// Last 4 digits of account number. 
        /// </summary>
        /// <value>Last 4 digits of account number. </value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// Transaction date in YYYY-MM-DD format value conforming to ISO 8601.
        /// </summary>
        /// <value>Transaction date in YYYY-MM-DD format value conforming to ISO 8601.</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
        /// </summary>
        /// <value>Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.</value>
        [DataMember(Name="transactionDescription", EmitDefaultValue=false)]
        public string TransactionDescription { get; set; }

        /// <summary>
        /// Installment loan payment amount
        /// </summary>
        /// <value>Installment loan payment amount</value>
        [DataMember(Name="installmentAmount", EmitDefaultValue=false)]
        public double? InstallmentAmount { get; set; }

        /// <summary>
        /// Next installment amount in local currency.
        /// </summary>
        /// <value>Next installment amount in local currency.</value>
        [DataMember(Name="nextInstallmentAmount", EmitDefaultValue=false)]
        public double? NextInstallmentAmount { get; set; }

        /// <summary>
        /// The amount of money owed.
        /// </summary>
        /// <value>The amount of money owed.</value>
        [DataMember(Name="outstandingBalanceAmount", EmitDefaultValue=false)]
        public double? OutstandingBalanceAmount { get; set; }

        /// <summary>
        /// Tenure of loan in months.
        /// </summary>
        /// <value>Tenure of loan in months.</value>
        [DataMember(Name="tenor", EmitDefaultValue=false)]
        public decimal? Tenor { get; set; }

        /// <summary>
        /// Number of months remaining for completion of loan.
        /// </summary>
        /// <value>Number of months remaining for completion of loan.</value>
        [DataMember(Name="outstandingTenor", EmitDefaultValue=false)]
        public decimal? OutstandingTenor { get; set; }

        /// <summary>
        /// Original loan amount borrowed by customer.
        /// </summary>
        /// <value>Original loan amount borrowed by customer.</value>
        [DataMember(Name="originalLoanAmount", EmitDefaultValue=false)]
        public double? OriginalLoanAmount { get; set; }

        /// <summary>
        /// Interest rate for a whole year. This includes any fees or additional cost associated.
        /// </summary>
        /// <value>Interest rate for a whole year. This includes any fees or additional cost associated.</value>
        [DataMember(Name="annualPercentageRate", EmitDefaultValue=false)]
        public double? AnnualPercentageRate { get; set; }

        /// <summary>
        /// Effective Percentage Rate
        /// </summary>
        /// <value>Effective Percentage Rate</value>
        [DataMember(Name="effectiveInterestRate", EmitDefaultValue=false)]
        public double? EffectiveInterestRate { get; set; }

        /// <summary>
        /// Charges levied on applicant by the bank to process the loan.
        /// </summary>
        /// <value>Charges levied on applicant by the bank to process the loan.</value>
        [DataMember(Name="processingChargeAmount", EmitDefaultValue=false)]
        public double? ProcessingChargeAmount { get; set; }

        /// <summary>
        /// Total Outstanding Interest Amount.
        /// </summary>
        /// <value>Total Outstanding Interest Amount.</value>
        [DataMember(Name="outstandingInterestAmount", EmitDefaultValue=false)]
        public double? OutstandingInterestAmount { get; set; }

        /// <summary>
        /// Flag to identify if the loan is allowed to be early self closed by customer or not..
        /// </summary>
        /// <value>Flag to identify if the loan is allowed to be early self closed by customer or not..</value>
        [DataMember(Name="selfEarlyLoanClosureAllowedFlag", EmitDefaultValue=false)]
        public bool? SelfEarlyLoanClosureAllowedFlag { get; set; }

        /// <summary>
        /// Intallment Cycle
        /// </summary>
        /// <value>Intallment Cycle</value>
        [DataMember(Name="installmentCycle", EmitDefaultValue=false)]
        public int? InstallmentCycle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Loans {\n");
            sb.Append("  LoanReferenceId: ").Append(LoanReferenceId).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("  NextInstallmentAmount: ").Append(NextInstallmentAmount).Append("\n");
            sb.Append("  OutstandingBalanceAmount: ").Append(OutstandingBalanceAmount).Append("\n");
            sb.Append("  Tenor: ").Append(Tenor).Append("\n");
            sb.Append("  OutstandingTenor: ").Append(OutstandingTenor).Append("\n");
            sb.Append("  OriginalLoanAmount: ").Append(OriginalLoanAmount).Append("\n");
            sb.Append("  AnnualPercentageRate: ").Append(AnnualPercentageRate).Append("\n");
            sb.Append("  EffectiveInterestRate: ").Append(EffectiveInterestRate).Append("\n");
            sb.Append("  ProcessingChargeAmount: ").Append(ProcessingChargeAmount).Append("\n");
            sb.Append("  OutstandingInterestAmount: ").Append(OutstandingInterestAmount).Append("\n");
            sb.Append("  SelfEarlyLoanClosureAllowedFlag: ").Append(SelfEarlyLoanClosureAllowedFlag).Append("\n");
            sb.Append("  InstallmentCycle: ").Append(InstallmentCycle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Loans);
        }

        /// <summary>
        /// Returns true if Loans instances are equal
        /// </summary>
        /// <param name="input">Instance of Loans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Loans input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanReferenceId == input.LoanReferenceId ||
                    (this.LoanReferenceId != null &&
                    this.LoanReferenceId.Equals(input.LoanReferenceId))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.TransactionDescription == input.TransactionDescription ||
                    (this.TransactionDescription != null &&
                    this.TransactionDescription.Equals(input.TransactionDescription))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                ) && 
                (
                    this.NextInstallmentAmount == input.NextInstallmentAmount ||
                    (this.NextInstallmentAmount != null &&
                    this.NextInstallmentAmount.Equals(input.NextInstallmentAmount))
                ) && 
                (
                    this.OutstandingBalanceAmount == input.OutstandingBalanceAmount ||
                    (this.OutstandingBalanceAmount != null &&
                    this.OutstandingBalanceAmount.Equals(input.OutstandingBalanceAmount))
                ) && 
                (
                    this.Tenor == input.Tenor ||
                    (this.Tenor != null &&
                    this.Tenor.Equals(input.Tenor))
                ) && 
                (
                    this.OutstandingTenor == input.OutstandingTenor ||
                    (this.OutstandingTenor != null &&
                    this.OutstandingTenor.Equals(input.OutstandingTenor))
                ) && 
                (
                    this.OriginalLoanAmount == input.OriginalLoanAmount ||
                    (this.OriginalLoanAmount != null &&
                    this.OriginalLoanAmount.Equals(input.OriginalLoanAmount))
                ) && 
                (
                    this.AnnualPercentageRate == input.AnnualPercentageRate ||
                    (this.AnnualPercentageRate != null &&
                    this.AnnualPercentageRate.Equals(input.AnnualPercentageRate))
                ) && 
                (
                    this.EffectiveInterestRate == input.EffectiveInterestRate ||
                    (this.EffectiveInterestRate != null &&
                    this.EffectiveInterestRate.Equals(input.EffectiveInterestRate))
                ) && 
                (
                    this.ProcessingChargeAmount == input.ProcessingChargeAmount ||
                    (this.ProcessingChargeAmount != null &&
                    this.ProcessingChargeAmount.Equals(input.ProcessingChargeAmount))
                ) && 
                (
                    this.OutstandingInterestAmount == input.OutstandingInterestAmount ||
                    (this.OutstandingInterestAmount != null &&
                    this.OutstandingInterestAmount.Equals(input.OutstandingInterestAmount))
                ) && 
                (
                    this.SelfEarlyLoanClosureAllowedFlag == input.SelfEarlyLoanClosureAllowedFlag ||
                    (this.SelfEarlyLoanClosureAllowedFlag != null &&
                    this.SelfEarlyLoanClosureAllowedFlag.Equals(input.SelfEarlyLoanClosureAllowedFlag))
                ) && 
                (
                    this.InstallmentCycle == input.InstallmentCycle ||
                    (this.InstallmentCycle != null &&
                    this.InstallmentCycle.Equals(input.InstallmentCycle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanReferenceId != null)
                    hashCode = hashCode * 59 + this.LoanReferenceId.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.TransactionDescription != null)
                    hashCode = hashCode * 59 + this.TransactionDescription.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                if (this.NextInstallmentAmount != null)
                    hashCode = hashCode * 59 + this.NextInstallmentAmount.GetHashCode();
                if (this.OutstandingBalanceAmount != null)
                    hashCode = hashCode * 59 + this.OutstandingBalanceAmount.GetHashCode();
                if (this.Tenor != null)
                    hashCode = hashCode * 59 + this.Tenor.GetHashCode();
                if (this.OutstandingTenor != null)
                    hashCode = hashCode * 59 + this.OutstandingTenor.GetHashCode();
                if (this.OriginalLoanAmount != null)
                    hashCode = hashCode * 59 + this.OriginalLoanAmount.GetHashCode();
                if (this.AnnualPercentageRate != null)
                    hashCode = hashCode * 59 + this.AnnualPercentageRate.GetHashCode();
                if (this.EffectiveInterestRate != null)
                    hashCode = hashCode * 59 + this.EffectiveInterestRate.GetHashCode();
                if (this.ProcessingChargeAmount != null)
                    hashCode = hashCode * 59 + this.ProcessingChargeAmount.GetHashCode();
                if (this.OutstandingInterestAmount != null)
                    hashCode = hashCode * 59 + this.OutstandingInterestAmount.GetHashCode();
                if (this.SelfEarlyLoanClosureAllowedFlag != null)
                    hashCode = hashCode * 59 + this.SelfEarlyLoanClosureAllowedFlag.GetHashCode();
                if (this.InstallmentCycle != null)
                    hashCode = hashCode * 59 + this.InstallmentCycle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
