/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FinancialInformation
    /// </summary>
    [DataContract]
        public partial class FinancialInformation :  IEquatable<FinancialInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialInformation" /> class.
        /// </summary>
        /// <param name="expenseDetails">expenseDetails.</param>
        /// <param name="incomeDetails">incomeDetails.</param>
        public FinancialInformation(List<ExpenseDetails> expenseDetails = default(List<ExpenseDetails>), List<IncomeDetails> incomeDetails = default(List<IncomeDetails>))
        {
            this.ExpenseDetails = expenseDetails;
            this.IncomeDetails = incomeDetails;
        }
        
        /// <summary>
        /// Gets or Sets ExpenseDetails
        /// </summary>
        [DataMember(Name="expenseDetails", EmitDefaultValue=false)]
        public List<ExpenseDetails> ExpenseDetails { get; set; }

        /// <summary>
        /// Gets or Sets IncomeDetails
        /// </summary>
        [DataMember(Name="incomeDetails", EmitDefaultValue=false)]
        public List<IncomeDetails> IncomeDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialInformation {\n");
            sb.Append("  ExpenseDetails: ").Append(ExpenseDetails).Append("\n");
            sb.Append("  IncomeDetails: ").Append(IncomeDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialInformation);
        }

        /// <summary>
        /// Returns true if FinancialInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpenseDetails == input.ExpenseDetails ||
                    this.ExpenseDetails != null &&
                    input.ExpenseDetails != null &&
                    this.ExpenseDetails.SequenceEqual(input.ExpenseDetails)
                ) && 
                (
                    this.IncomeDetails == input.IncomeDetails ||
                    this.IncomeDetails != null &&
                    input.IncomeDetails != null &&
                    this.IncomeDetails.SequenceEqual(input.IncomeDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpenseDetails != null)
                    hashCode = hashCode * 59 + this.ExpenseDetails.GetHashCode();
                if (this.IncomeDetails != null)
                    hashCode = hashCode * 59 + this.IncomeDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
