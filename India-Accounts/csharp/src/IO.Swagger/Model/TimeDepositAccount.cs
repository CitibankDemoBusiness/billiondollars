/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TimeDepositAccount
    /// </summary>
    [DataContract]
        public partial class TimeDepositAccount :  IEquatable<TimeDepositAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeDepositAccount" /> class.
        /// </summary>
        /// <param name="productName">The name of the product.</param>
        /// <param name="productCode">A unique code that identifies the product.</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer (required).</param>
        /// <param name="originalPrincipalAmount">The original principal amount when account opened..</param>
        /// <param name="currencyCode">The currency code of the account in ISO 4217 format.</param>
        /// <param name="interestRate">The rate of interest applicable for the time deposit.</param>
        /// <param name="openingDate">The opening date of the time deposit, in ISO 8601 format YYYY-MM-DD.</param>
        /// <param name="maturityDate">The date when the time deposit will mature, in ISO 8601 format YYYY-MM-DD.</param>
        /// <param name="nextInterestPaymentDate">The date when interest will be paid by Citibank, in ISO8601 format YYYY-MM-DD.</param>
        /// <param name="interestAmountDue">The accrued interest amount which has not yet been paid by Citibank.</param>
        /// <param name="renewalInstructions">The instructions for time deposit renewal. This is a reference data field. Please use /v1/apac/utilities/referenceData/{renewalInstructions} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="tenorTerm">The tenor term for the deposit, expressed as a whole number.</param>
        /// <param name="tenorPeriod">The unit of the tenor term. This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="baseCurrencyMaturityAmount">The investment amount and accrued interest in base currency.</param>
        /// <param name="maturityInterestAmount">The accrued interest in base currency..</param>
        /// <param name="lastInterestPaymentAmount">Last interest amount for the time deposit account.</param>
        public TimeDepositAccount(string productName = default(string), string productCode = default(string), string displayAccountNumber = default(string), double? originalPrincipalAmount = default(double?), string currencyCode = default(string), double? interestRate = default(double?), DateTime? openingDate = default(DateTime?), DateTime? maturityDate = default(DateTime?), DateTime? nextInterestPaymentDate = default(DateTime?), double? interestAmountDue = default(double?), string renewalInstructions = default(string), int? tenorTerm = default(int?), string tenorPeriod = default(string), double? baseCurrencyMaturityAmount = default(double?), double? maturityInterestAmount = default(double?), double? lastInterestPaymentAmount = default(double?))
        {
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for TimeDepositAccount and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
            this.ProductName = productName;
            this.ProductCode = productCode;
            this.OriginalPrincipalAmount = originalPrincipalAmount;
            this.CurrencyCode = currencyCode;
            this.InterestRate = interestRate;
            this.OpeningDate = openingDate;
            this.MaturityDate = maturityDate;
            this.NextInterestPaymentDate = nextInterestPaymentDate;
            this.InterestAmountDue = interestAmountDue;
            this.RenewalInstructions = renewalInstructions;
            this.TenorTerm = tenorTerm;
            this.TenorPeriod = tenorPeriod;
            this.BaseCurrencyMaturityAmount = baseCurrencyMaturityAmount;
            this.MaturityInterestAmount = maturityInterestAmount;
            this.LastInterestPaymentAmount = lastInterestPaymentAmount;
        }
        
        /// <summary>
        /// The name of the product
        /// </summary>
        /// <value>The name of the product</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// A unique code that identifies the product
        /// </summary>
        /// <value>A unique code that identifies the product</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// The original principal amount when account opened.
        /// </summary>
        /// <value>The original principal amount when account opened.</value>
        [DataMember(Name="originalPrincipalAmount", EmitDefaultValue=false)]
        public double? OriginalPrincipalAmount { get; set; }

        /// <summary>
        /// The currency code of the account in ISO 4217 format
        /// </summary>
        /// <value>The currency code of the account in ISO 4217 format</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The rate of interest applicable for the time deposit
        /// </summary>
        /// <value>The rate of interest applicable for the time deposit</value>
        [DataMember(Name="interestRate", EmitDefaultValue=false)]
        public double? InterestRate { get; set; }

        /// <summary>
        /// The opening date of the time deposit, in ISO 8601 format YYYY-MM-DD
        /// </summary>
        /// <value>The opening date of the time deposit, in ISO 8601 format YYYY-MM-DD</value>
        [DataMember(Name="openingDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OpeningDate { get; set; }

        /// <summary>
        /// The date when the time deposit will mature, in ISO 8601 format YYYY-MM-DD
        /// </summary>
        /// <value>The date when the time deposit will mature, in ISO 8601 format YYYY-MM-DD</value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// The date when interest will be paid by Citibank, in ISO8601 format YYYY-MM-DD
        /// </summary>
        /// <value>The date when interest will be paid by Citibank, in ISO8601 format YYYY-MM-DD</value>
        [DataMember(Name="nextInterestPaymentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? NextInterestPaymentDate { get; set; }

        /// <summary>
        /// The accrued interest amount which has not yet been paid by Citibank
        /// </summary>
        /// <value>The accrued interest amount which has not yet been paid by Citibank</value>
        [DataMember(Name="interestAmountDue", EmitDefaultValue=false)]
        public double? InterestAmountDue { get; set; }

        /// <summary>
        /// The instructions for time deposit renewal. This is a reference data field. Please use /v1/apac/utilities/referenceData/{renewalInstructions} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>The instructions for time deposit renewal. This is a reference data field. Please use /v1/apac/utilities/referenceData/{renewalInstructions} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="renewalInstructions", EmitDefaultValue=false)]
        public string RenewalInstructions { get; set; }

        /// <summary>
        /// The tenor term for the deposit, expressed as a whole number
        /// </summary>
        /// <value>The tenor term for the deposit, expressed as a whole number</value>
        [DataMember(Name="tenorTerm", EmitDefaultValue=false)]
        public int? TenorTerm { get; set; }

        /// <summary>
        /// The unit of the tenor term. This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>The unit of the tenor term. This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="tenorPeriod", EmitDefaultValue=false)]
        public string TenorPeriod { get; set; }

        /// <summary>
        /// The investment amount and accrued interest in base currency
        /// </summary>
        /// <value>The investment amount and accrued interest in base currency</value>
        [DataMember(Name="baseCurrencyMaturityAmount", EmitDefaultValue=false)]
        public double? BaseCurrencyMaturityAmount { get; set; }

        /// <summary>
        /// The accrued interest in base currency.
        /// </summary>
        /// <value>The accrued interest in base currency.</value>
        [DataMember(Name="maturityInterestAmount", EmitDefaultValue=false)]
        public double? MaturityInterestAmount { get; set; }

        /// <summary>
        /// Last interest amount for the time deposit account
        /// </summary>
        /// <value>Last interest amount for the time deposit account</value>
        [DataMember(Name="lastInterestPaymentAmount", EmitDefaultValue=false)]
        public double? LastInterestPaymentAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeDepositAccount {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  OriginalPrincipalAmount: ").Append(OriginalPrincipalAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  OpeningDate: ").Append(OpeningDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  NextInterestPaymentDate: ").Append(NextInterestPaymentDate).Append("\n");
            sb.Append("  InterestAmountDue: ").Append(InterestAmountDue).Append("\n");
            sb.Append("  RenewalInstructions: ").Append(RenewalInstructions).Append("\n");
            sb.Append("  TenorTerm: ").Append(TenorTerm).Append("\n");
            sb.Append("  TenorPeriod: ").Append(TenorPeriod).Append("\n");
            sb.Append("  BaseCurrencyMaturityAmount: ").Append(BaseCurrencyMaturityAmount).Append("\n");
            sb.Append("  MaturityInterestAmount: ").Append(MaturityInterestAmount).Append("\n");
            sb.Append("  LastInterestPaymentAmount: ").Append(LastInterestPaymentAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeDepositAccount);
        }

        /// <summary>
        /// Returns true if TimeDepositAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeDepositAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeDepositAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.OriginalPrincipalAmount == input.OriginalPrincipalAmount ||
                    (this.OriginalPrincipalAmount != null &&
                    this.OriginalPrincipalAmount.Equals(input.OriginalPrincipalAmount))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && 
                (
                    this.OpeningDate == input.OpeningDate ||
                    (this.OpeningDate != null &&
                    this.OpeningDate.Equals(input.OpeningDate))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.NextInterestPaymentDate == input.NextInterestPaymentDate ||
                    (this.NextInterestPaymentDate != null &&
                    this.NextInterestPaymentDate.Equals(input.NextInterestPaymentDate))
                ) && 
                (
                    this.InterestAmountDue == input.InterestAmountDue ||
                    (this.InterestAmountDue != null &&
                    this.InterestAmountDue.Equals(input.InterestAmountDue))
                ) && 
                (
                    this.RenewalInstructions == input.RenewalInstructions ||
                    (this.RenewalInstructions != null &&
                    this.RenewalInstructions.Equals(input.RenewalInstructions))
                ) && 
                (
                    this.TenorTerm == input.TenorTerm ||
                    (this.TenorTerm != null &&
                    this.TenorTerm.Equals(input.TenorTerm))
                ) && 
                (
                    this.TenorPeriod == input.TenorPeriod ||
                    (this.TenorPeriod != null &&
                    this.TenorPeriod.Equals(input.TenorPeriod))
                ) && 
                (
                    this.BaseCurrencyMaturityAmount == input.BaseCurrencyMaturityAmount ||
                    (this.BaseCurrencyMaturityAmount != null &&
                    this.BaseCurrencyMaturityAmount.Equals(input.BaseCurrencyMaturityAmount))
                ) && 
                (
                    this.MaturityInterestAmount == input.MaturityInterestAmount ||
                    (this.MaturityInterestAmount != null &&
                    this.MaturityInterestAmount.Equals(input.MaturityInterestAmount))
                ) && 
                (
                    this.LastInterestPaymentAmount == input.LastInterestPaymentAmount ||
                    (this.LastInterestPaymentAmount != null &&
                    this.LastInterestPaymentAmount.Equals(input.LastInterestPaymentAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.OriginalPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.OriginalPrincipalAmount.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                if (this.OpeningDate != null)
                    hashCode = hashCode * 59 + this.OpeningDate.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.NextInterestPaymentDate != null)
                    hashCode = hashCode * 59 + this.NextInterestPaymentDate.GetHashCode();
                if (this.InterestAmountDue != null)
                    hashCode = hashCode * 59 + this.InterestAmountDue.GetHashCode();
                if (this.RenewalInstructions != null)
                    hashCode = hashCode * 59 + this.RenewalInstructions.GetHashCode();
                if (this.TenorTerm != null)
                    hashCode = hashCode * 59 + this.TenorTerm.GetHashCode();
                if (this.TenorPeriod != null)
                    hashCode = hashCode * 59 + this.TenorPeriod.GetHashCode();
                if (this.BaseCurrencyMaturityAmount != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyMaturityAmount.GetHashCode();
                if (this.MaturityInterestAmount != null)
                    hashCode = hashCode * 59 + this.MaturityInterestAmount.GetHashCode();
                if (this.LastInterestPaymentAmount != null)
                    hashCode = hashCode * 59 + this.LastInterestPaymentAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
