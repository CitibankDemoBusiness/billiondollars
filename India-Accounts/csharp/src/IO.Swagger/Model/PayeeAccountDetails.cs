/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PayeeAccountDetails
    /// </summary>
    [DataContract]
        public partial class PayeeAccountDetails :  IEquatable<PayeeAccountDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayeeAccountDetails" /> class.
        /// </summary>
        /// <param name="payeeNickName">The nick name of the payee assigned by the customer..</param>
        /// <param name="payeeName">Name of the payee..</param>
        /// <param name="displayPayeeAccountNumber">The display account number of the destination account.</param>
        /// <param name="iban">IBAN stands for International Bank Account Number and is a number attached to all accounts in the EU countries plus Norway, Switzerland, Liechtenstein and Hungary. The IBAN is made up of a code that identifies the country the account belongs to, the account holders bank and the account number itself.</param>
        /// <param name="payeeId">Unique identifier associated with the payee.Typically, this is not displayed to the customer..</param>
        /// <param name="payeeBankName">Name of the bank..</param>
        /// <param name="paymentType">The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description..</param>
        /// <param name="bankCode">Bank Code of the Payee.</param>
        public PayeeAccountDetails(string payeeNickName = default(string), string payeeName = default(string), string displayPayeeAccountNumber = default(string), string iban = default(string), string payeeId = default(string), string payeeBankName = default(string), string paymentType = default(string), string bankCode = default(string))
        {
            this.PayeeNickName = payeeNickName;
            this.PayeeName = payeeName;
            this.DisplayPayeeAccountNumber = displayPayeeAccountNumber;
            this.Iban = iban;
            this.PayeeId = payeeId;
            this.PayeeBankName = payeeBankName;
            this.PaymentType = paymentType;
            this.BankCode = bankCode;
        }
        
        /// <summary>
        /// The nick name of the payee assigned by the customer.
        /// </summary>
        /// <value>The nick name of the payee assigned by the customer.</value>
        [DataMember(Name="payeeNickName", EmitDefaultValue=false)]
        public string PayeeNickName { get; set; }

        /// <summary>
        /// Name of the payee.
        /// </summary>
        /// <value>Name of the payee.</value>
        [DataMember(Name="payeeName", EmitDefaultValue=false)]
        public string PayeeName { get; set; }

        /// <summary>
        /// The display account number of the destination account
        /// </summary>
        /// <value>The display account number of the destination account</value>
        [DataMember(Name="displayPayeeAccountNumber", EmitDefaultValue=false)]
        public string DisplayPayeeAccountNumber { get; set; }

        /// <summary>
        /// IBAN stands for International Bank Account Number and is a number attached to all accounts in the EU countries plus Norway, Switzerland, Liechtenstein and Hungary. The IBAN is made up of a code that identifies the country the account belongs to, the account holders bank and the account number itself
        /// </summary>
        /// <value>IBAN stands for International Bank Account Number and is a number attached to all accounts in the EU countries plus Norway, Switzerland, Liechtenstein and Hungary. The IBAN is made up of a code that identifies the country the account belongs to, the account holders bank and the account number itself</value>
        [DataMember(Name="iban", EmitDefaultValue=false)]
        public string Iban { get; set; }

        /// <summary>
        /// Unique identifier associated with the payee.Typically, this is not displayed to the customer.
        /// </summary>
        /// <value>Unique identifier associated with the payee.Typically, this is not displayed to the customer.</value>
        [DataMember(Name="payeeId", EmitDefaultValue=false)]
        public string PayeeId { get; set; }

        /// <summary>
        /// Name of the bank.
        /// </summary>
        /// <value>Name of the bank.</value>
        [DataMember(Name="payeeBankName", EmitDefaultValue=false)]
        public string PayeeBankName { get; set; }

        /// <summary>
        /// The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.
        /// </summary>
        /// <value>The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.</value>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Bank Code of the Payee
        /// </summary>
        /// <value>Bank Code of the Payee</value>
        [DataMember(Name="bankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayeeAccountDetails {\n");
            sb.Append("  PayeeNickName: ").Append(PayeeNickName).Append("\n");
            sb.Append("  PayeeName: ").Append(PayeeName).Append("\n");
            sb.Append("  DisplayPayeeAccountNumber: ").Append(DisplayPayeeAccountNumber).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  PayeeBankName: ").Append(PayeeBankName).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayeeAccountDetails);
        }

        /// <summary>
        /// Returns true if PayeeAccountDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PayeeAccountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayeeAccountDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayeeNickName == input.PayeeNickName ||
                    (this.PayeeNickName != null &&
                    this.PayeeNickName.Equals(input.PayeeNickName))
                ) && 
                (
                    this.PayeeName == input.PayeeName ||
                    (this.PayeeName != null &&
                    this.PayeeName.Equals(input.PayeeName))
                ) && 
                (
                    this.DisplayPayeeAccountNumber == input.DisplayPayeeAccountNumber ||
                    (this.DisplayPayeeAccountNumber != null &&
                    this.DisplayPayeeAccountNumber.Equals(input.DisplayPayeeAccountNumber))
                ) && 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.PayeeBankName == input.PayeeBankName ||
                    (this.PayeeBankName != null &&
                    this.PayeeBankName.Equals(input.PayeeBankName))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayeeNickName != null)
                    hashCode = hashCode * 59 + this.PayeeNickName.GetHashCode();
                if (this.PayeeName != null)
                    hashCode = hashCode * 59 + this.PayeeName.GetHashCode();
                if (this.DisplayPayeeAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayPayeeAccountNumber.GetHashCode();
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.PayeeBankName != null)
                    hashCode = hashCode * 59 + this.PayeeBankName.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
