/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccountClosureRequest
    /// </summary>
    [DataContract]
        public partial class AccountClosureRequest :  IEquatable<AccountClosureRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountClosureRequest" /> class.
        /// </summary>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer (required).</param>
        /// <param name="accountClosureReasonCode">Account closure reason code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClosureReasonCode} resource to get valid value of this field with description..</param>
        /// <param name="consentGivenFlag">This is consent flag from the customer to pay back if any outstanding on that account while closure (required).</param>
        public AccountClosureRequest(string accountId = default(string), string accountClosureReasonCode = default(string), bool? consentGivenFlag = default(bool?))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for AccountClosureRequest and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            // to ensure "consentGivenFlag" is required (not null)
            if (consentGivenFlag == null)
            {
                throw new InvalidDataException("consentGivenFlag is a required property for AccountClosureRequest and cannot be null");
            }
            else
            {
                this.ConsentGivenFlag = consentGivenFlag;
            }
            this.AccountClosureReasonCode = accountClosureReasonCode;
        }
        
        /// <summary>
        /// The account identifier in encrypted format.Typically, this is not displayed to the customer
        /// </summary>
        /// <value>The account identifier in encrypted format.Typically, this is not displayed to the customer</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Account closure reason code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClosureReasonCode} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Account closure reason code. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClosureReasonCode} resource to get valid value of this field with description.</value>
        [DataMember(Name="accountClosureReasonCode", EmitDefaultValue=false)]
        public string AccountClosureReasonCode { get; set; }

        /// <summary>
        /// This is consent flag from the customer to pay back if any outstanding on that account while closure
        /// </summary>
        /// <value>This is consent flag from the customer to pay back if any outstanding on that account while closure</value>
        [DataMember(Name="consentGivenFlag", EmitDefaultValue=false)]
        public bool? ConsentGivenFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountClosureRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountClosureReasonCode: ").Append(AccountClosureReasonCode).Append("\n");
            sb.Append("  ConsentGivenFlag: ").Append(ConsentGivenFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountClosureRequest);
        }

        /// <summary>
        /// Returns true if AccountClosureRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountClosureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountClosureRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AccountClosureReasonCode == input.AccountClosureReasonCode ||
                    (this.AccountClosureReasonCode != null &&
                    this.AccountClosureReasonCode.Equals(input.AccountClosureReasonCode))
                ) && 
                (
                    this.ConsentGivenFlag == input.ConsentGivenFlag ||
                    (this.ConsentGivenFlag != null &&
                    this.ConsentGivenFlag.Equals(input.ConsentGivenFlag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AccountClosureReasonCode != null)
                    hashCode = hashCode * 59 + this.AccountClosureReasonCode.GetHashCode();
                if (this.ConsentGivenFlag != null)
                    hashCode = hashCode * 59 + this.ConsentGivenFlag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
