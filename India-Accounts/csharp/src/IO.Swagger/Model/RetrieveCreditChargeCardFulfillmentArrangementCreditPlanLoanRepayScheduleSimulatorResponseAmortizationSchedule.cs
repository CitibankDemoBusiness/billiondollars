/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule
    /// </summary>
    [DataContract]
        public partial class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule :  IEquatable<RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule" /> class.
        /// </summary>
        /// <param name="installmentNumber">Installment number (required).</param>
        /// <param name="principalAmount">The portion of the Principal Amount Paid for the loan in local currency (required).</param>
        /// <param name="installmentInterestAmount">The interest  amount to be paid as installment. (required).</param>
        public RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule(string installmentNumber = default(string), double? principalAmount = default(double?), double? installmentInterestAmount = default(double?))
        {
            // to ensure "installmentNumber" is required (not null)
            if (installmentNumber == null)
            {
                throw new InvalidDataException("installmentNumber is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule and cannot be null");
            }
            else
            {
                this.InstallmentNumber = installmentNumber;
            }
            // to ensure "principalAmount" is required (not null)
            if (principalAmount == null)
            {
                throw new InvalidDataException("principalAmount is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule and cannot be null");
            }
            else
            {
                this.PrincipalAmount = principalAmount;
            }
            // to ensure "installmentInterestAmount" is required (not null)
            if (installmentInterestAmount == null)
            {
                throw new InvalidDataException("installmentInterestAmount is a required property for RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule and cannot be null");
            }
            else
            {
                this.InstallmentInterestAmount = installmentInterestAmount;
            }
        }
        
        /// <summary>
        /// Installment number
        /// </summary>
        /// <value>Installment number</value>
        [DataMember(Name="installmentNumber", EmitDefaultValue=false)]
        public string InstallmentNumber { get; set; }

        /// <summary>
        /// The portion of the Principal Amount Paid for the loan in local currency
        /// </summary>
        /// <value>The portion of the Principal Amount Paid for the loan in local currency</value>
        [DataMember(Name="principalAmount", EmitDefaultValue=false)]
        public double? PrincipalAmount { get; set; }

        /// <summary>
        /// The interest  amount to be paid as installment.
        /// </summary>
        /// <value>The interest  amount to be paid as installment.</value>
        [DataMember(Name="installmentInterestAmount", EmitDefaultValue=false)]
        public double? InstallmentInterestAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule {\n");
            sb.Append("  InstallmentNumber: ").Append(InstallmentNumber).Append("\n");
            sb.Append("  PrincipalAmount: ").Append(PrincipalAmount).Append("\n");
            sb.Append("  InstallmentInterestAmount: ").Append(InstallmentInterestAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule);
        }

        /// <summary>
        /// Returns true if RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveCreditChargeCardFulfillmentArrangementCreditPlanLoanRepayScheduleSimulatorResponseAmortizationSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstallmentNumber == input.InstallmentNumber ||
                    (this.InstallmentNumber != null &&
                    this.InstallmentNumber.Equals(input.InstallmentNumber))
                ) && 
                (
                    this.PrincipalAmount == input.PrincipalAmount ||
                    (this.PrincipalAmount != null &&
                    this.PrincipalAmount.Equals(input.PrincipalAmount))
                ) && 
                (
                    this.InstallmentInterestAmount == input.InstallmentInterestAmount ||
                    (this.InstallmentInterestAmount != null &&
                    this.InstallmentInterestAmount.Equals(input.InstallmentInterestAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstallmentNumber != null)
                    hashCode = hashCode * 59 + this.InstallmentNumber.GetHashCode();
                if (this.PrincipalAmount != null)
                    hashCode = hashCode * 59 + this.PrincipalAmount.GetHashCode();
                if (this.InstallmentInterestAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentInterestAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
