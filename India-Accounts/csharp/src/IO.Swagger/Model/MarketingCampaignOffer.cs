/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MarketingCampaignOffer
    /// </summary>
    [DataContract]
        public partial class MarketingCampaignOffer :  IEquatable<MarketingCampaignOffer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketingCampaignOffer" /> class.
        /// </summary>
        /// <param name="campaignId">Unique identifier for a specific campaign being offered to the channel (required).</param>
        /// <param name="waveId">Unique identifier for the wave under specific campaign being offered to the channel (required).</param>
        /// <param name="channelId">This field is used to store the channel through which the particular offer has been created (required).</param>
        /// <param name="offerExpiryDate">Offer expiry date in ISO 8601 date format YYYY-MM-DD (required).</param>
        /// <param name="offerStatus">Offer status to indicate the status of the offer. (required).</param>
        public MarketingCampaignOffer(string campaignId = default(string), string waveId = default(string), string channelId = default(string), DateTime? offerExpiryDate = default(DateTime?), string offerStatus = default(string))
        {
            // to ensure "campaignId" is required (not null)
            if (campaignId == null)
            {
                throw new InvalidDataException("campaignId is a required property for MarketingCampaignOffer and cannot be null");
            }
            else
            {
                this.CampaignId = campaignId;
            }
            // to ensure "waveId" is required (not null)
            if (waveId == null)
            {
                throw new InvalidDataException("waveId is a required property for MarketingCampaignOffer and cannot be null");
            }
            else
            {
                this.WaveId = waveId;
            }
            // to ensure "channelId" is required (not null)
            if (channelId == null)
            {
                throw new InvalidDataException("channelId is a required property for MarketingCampaignOffer and cannot be null");
            }
            else
            {
                this.ChannelId = channelId;
            }
            // to ensure "offerExpiryDate" is required (not null)
            if (offerExpiryDate == null)
            {
                throw new InvalidDataException("offerExpiryDate is a required property for MarketingCampaignOffer and cannot be null");
            }
            else
            {
                this.OfferExpiryDate = offerExpiryDate;
            }
            // to ensure "offerStatus" is required (not null)
            if (offerStatus == null)
            {
                throw new InvalidDataException("offerStatus is a required property for MarketingCampaignOffer and cannot be null");
            }
            else
            {
                this.OfferStatus = offerStatus;
            }
        }
        
        /// <summary>
        /// Unique identifier for a specific campaign being offered to the channel
        /// </summary>
        /// <value>Unique identifier for a specific campaign being offered to the channel</value>
        [DataMember(Name="campaignId", EmitDefaultValue=false)]
        public string CampaignId { get; set; }

        /// <summary>
        /// Unique identifier for the wave under specific campaign being offered to the channel
        /// </summary>
        /// <value>Unique identifier for the wave under specific campaign being offered to the channel</value>
        [DataMember(Name="waveId", EmitDefaultValue=false)]
        public string WaveId { get; set; }

        /// <summary>
        /// This field is used to store the channel through which the particular offer has been created
        /// </summary>
        /// <value>This field is used to store the channel through which the particular offer has been created</value>
        [DataMember(Name="channelId", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Offer expiry date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Offer expiry date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="offerExpiryDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OfferExpiryDate { get; set; }

        /// <summary>
        /// Offer status to indicate the status of the offer.
        /// </summary>
        /// <value>Offer status to indicate the status of the offer.</value>
        [DataMember(Name="offerStatus", EmitDefaultValue=false)]
        public string OfferStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketingCampaignOffer {\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  WaveId: ").Append(WaveId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  OfferExpiryDate: ").Append(OfferExpiryDate).Append("\n");
            sb.Append("  OfferStatus: ").Append(OfferStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketingCampaignOffer);
        }

        /// <summary>
        /// Returns true if MarketingCampaignOffer instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketingCampaignOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketingCampaignOffer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CampaignId == input.CampaignId ||
                    (this.CampaignId != null &&
                    this.CampaignId.Equals(input.CampaignId))
                ) && 
                (
                    this.WaveId == input.WaveId ||
                    (this.WaveId != null &&
                    this.WaveId.Equals(input.WaveId))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.OfferExpiryDate == input.OfferExpiryDate ||
                    (this.OfferExpiryDate != null &&
                    this.OfferExpiryDate.Equals(input.OfferExpiryDate))
                ) && 
                (
                    this.OfferStatus == input.OfferStatus ||
                    (this.OfferStatus != null &&
                    this.OfferStatus.Equals(input.OfferStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CampaignId != null)
                    hashCode = hashCode * 59 + this.CampaignId.GetHashCode();
                if (this.WaveId != null)
                    hashCode = hashCode * 59 + this.WaveId.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.OfferExpiryDate != null)
                    hashCode = hashCode * 59 + this.OfferExpiryDate.GetHashCode();
                if (this.OfferStatus != null)
                    hashCode = hashCode * 59 + this.OfferStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
