/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Detailed account information
    /// </summary>
    [DataContract]
        public partial class AccountDetailsResponse :  IEquatable<AccountDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDetailsResponse" /> class.
        /// </summary>
        /// <param name="creditCardAccount">creditCardAccount.</param>
        /// <param name="readyCreditAccount">readyCreditAccount.</param>
        /// <param name="checkingAccount">checkingAccount.</param>
        /// <param name="savingsAccount">savingsAccount.</param>
        /// <param name="timeDepositAccount">timeDepositAccount.</param>
        /// <param name="loanAccount">loanAccount.</param>
        /// <param name="mutualFundAccount">mutualFundAccount.</param>
        /// <param name="securitiesBrokerageAccount">securitiesBrokerageAccount.</param>
        /// <param name="callDepositAccount">callDepositAccount.</param>
        /// <param name="premiumDepositAccount">premiumDepositAccount.</param>
        public AccountDetailsResponse(CreditCardAccount creditCardAccount = default(CreditCardAccount), ReadyCreditAccount readyCreditAccount = default(ReadyCreditAccount), CheckingAccount checkingAccount = default(CheckingAccount), SavingsAccount savingsAccount = default(SavingsAccount), TimeDepositAccount timeDepositAccount = default(TimeDepositAccount), LoanAccount loanAccount = default(LoanAccount), MutualFundAccount mutualFundAccount = default(MutualFundAccount), SecuritiesBrokerageAccount securitiesBrokerageAccount = default(SecuritiesBrokerageAccount), CallDepositAccount callDepositAccount = default(CallDepositAccount), PremiumDepositAccount premiumDepositAccount = default(PremiumDepositAccount))
        {
            this.CreditCardAccount = creditCardAccount;
            this.ReadyCreditAccount = readyCreditAccount;
            this.CheckingAccount = checkingAccount;
            this.SavingsAccount = savingsAccount;
            this.TimeDepositAccount = timeDepositAccount;
            this.LoanAccount = loanAccount;
            this.MutualFundAccount = mutualFundAccount;
            this.SecuritiesBrokerageAccount = securitiesBrokerageAccount;
            this.CallDepositAccount = callDepositAccount;
            this.PremiumDepositAccount = premiumDepositAccount;
        }
        
        /// <summary>
        /// Gets or Sets CreditCardAccount
        /// </summary>
        [DataMember(Name="creditCardAccount", EmitDefaultValue=false)]
        public CreditCardAccount CreditCardAccount { get; set; }

        /// <summary>
        /// Gets or Sets ReadyCreditAccount
        /// </summary>
        [DataMember(Name="readyCreditAccount", EmitDefaultValue=false)]
        public ReadyCreditAccount ReadyCreditAccount { get; set; }

        /// <summary>
        /// Gets or Sets CheckingAccount
        /// </summary>
        [DataMember(Name="checkingAccount", EmitDefaultValue=false)]
        public CheckingAccount CheckingAccount { get; set; }

        /// <summary>
        /// Gets or Sets SavingsAccount
        /// </summary>
        [DataMember(Name="savingsAccount", EmitDefaultValue=false)]
        public SavingsAccount SavingsAccount { get; set; }

        /// <summary>
        /// Gets or Sets TimeDepositAccount
        /// </summary>
        [DataMember(Name="timeDepositAccount", EmitDefaultValue=false)]
        public TimeDepositAccount TimeDepositAccount { get; set; }

        /// <summary>
        /// Gets or Sets LoanAccount
        /// </summary>
        [DataMember(Name="loanAccount", EmitDefaultValue=false)]
        public LoanAccount LoanAccount { get; set; }

        /// <summary>
        /// Gets or Sets MutualFundAccount
        /// </summary>
        [DataMember(Name="mutualFundAccount", EmitDefaultValue=false)]
        public MutualFundAccount MutualFundAccount { get; set; }

        /// <summary>
        /// Gets or Sets SecuritiesBrokerageAccount
        /// </summary>
        [DataMember(Name="securitiesBrokerageAccount", EmitDefaultValue=false)]
        public SecuritiesBrokerageAccount SecuritiesBrokerageAccount { get; set; }

        /// <summary>
        /// Gets or Sets CallDepositAccount
        /// </summary>
        [DataMember(Name="callDepositAccount", EmitDefaultValue=false)]
        public CallDepositAccount CallDepositAccount { get; set; }

        /// <summary>
        /// Gets or Sets PremiumDepositAccount
        /// </summary>
        [DataMember(Name="premiumDepositAccount", EmitDefaultValue=false)]
        public PremiumDepositAccount PremiumDepositAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDetailsResponse {\n");
            sb.Append("  CreditCardAccount: ").Append(CreditCardAccount).Append("\n");
            sb.Append("  ReadyCreditAccount: ").Append(ReadyCreditAccount).Append("\n");
            sb.Append("  CheckingAccount: ").Append(CheckingAccount).Append("\n");
            sb.Append("  SavingsAccount: ").Append(SavingsAccount).Append("\n");
            sb.Append("  TimeDepositAccount: ").Append(TimeDepositAccount).Append("\n");
            sb.Append("  LoanAccount: ").Append(LoanAccount).Append("\n");
            sb.Append("  MutualFundAccount: ").Append(MutualFundAccount).Append("\n");
            sb.Append("  SecuritiesBrokerageAccount: ").Append(SecuritiesBrokerageAccount).Append("\n");
            sb.Append("  CallDepositAccount: ").Append(CallDepositAccount).Append("\n");
            sb.Append("  PremiumDepositAccount: ").Append(PremiumDepositAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDetailsResponse);
        }

        /// <summary>
        /// Returns true if AccountDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDetailsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreditCardAccount == input.CreditCardAccount ||
                    (this.CreditCardAccount != null &&
                    this.CreditCardAccount.Equals(input.CreditCardAccount))
                ) && 
                (
                    this.ReadyCreditAccount == input.ReadyCreditAccount ||
                    (this.ReadyCreditAccount != null &&
                    this.ReadyCreditAccount.Equals(input.ReadyCreditAccount))
                ) && 
                (
                    this.CheckingAccount == input.CheckingAccount ||
                    (this.CheckingAccount != null &&
                    this.CheckingAccount.Equals(input.CheckingAccount))
                ) && 
                (
                    this.SavingsAccount == input.SavingsAccount ||
                    (this.SavingsAccount != null &&
                    this.SavingsAccount.Equals(input.SavingsAccount))
                ) && 
                (
                    this.TimeDepositAccount == input.TimeDepositAccount ||
                    (this.TimeDepositAccount != null &&
                    this.TimeDepositAccount.Equals(input.TimeDepositAccount))
                ) && 
                (
                    this.LoanAccount == input.LoanAccount ||
                    (this.LoanAccount != null &&
                    this.LoanAccount.Equals(input.LoanAccount))
                ) && 
                (
                    this.MutualFundAccount == input.MutualFundAccount ||
                    (this.MutualFundAccount != null &&
                    this.MutualFundAccount.Equals(input.MutualFundAccount))
                ) && 
                (
                    this.SecuritiesBrokerageAccount == input.SecuritiesBrokerageAccount ||
                    (this.SecuritiesBrokerageAccount != null &&
                    this.SecuritiesBrokerageAccount.Equals(input.SecuritiesBrokerageAccount))
                ) && 
                (
                    this.CallDepositAccount == input.CallDepositAccount ||
                    (this.CallDepositAccount != null &&
                    this.CallDepositAccount.Equals(input.CallDepositAccount))
                ) && 
                (
                    this.PremiumDepositAccount == input.PremiumDepositAccount ||
                    (this.PremiumDepositAccount != null &&
                    this.PremiumDepositAccount.Equals(input.PremiumDepositAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreditCardAccount != null)
                    hashCode = hashCode * 59 + this.CreditCardAccount.GetHashCode();
                if (this.ReadyCreditAccount != null)
                    hashCode = hashCode * 59 + this.ReadyCreditAccount.GetHashCode();
                if (this.CheckingAccount != null)
                    hashCode = hashCode * 59 + this.CheckingAccount.GetHashCode();
                if (this.SavingsAccount != null)
                    hashCode = hashCode * 59 + this.SavingsAccount.GetHashCode();
                if (this.TimeDepositAccount != null)
                    hashCode = hashCode * 59 + this.TimeDepositAccount.GetHashCode();
                if (this.LoanAccount != null)
                    hashCode = hashCode * 59 + this.LoanAccount.GetHashCode();
                if (this.MutualFundAccount != null)
                    hashCode = hashCode * 59 + this.MutualFundAccount.GetHashCode();
                if (this.SecuritiesBrokerageAccount != null)
                    hashCode = hashCode * 59 + this.SecuritiesBrokerageAccount.GetHashCode();
                if (this.CallDepositAccount != null)
                    hashCode = hashCode * 59 + this.CallDepositAccount.GetHashCode();
                if (this.PremiumDepositAccount != null)
                    hashCode = hashCode * 59 + this.PremiumDepositAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
