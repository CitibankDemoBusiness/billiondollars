/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditCardStatement
    /// </summary>
    [DataContract]
        public partial class CreditCardStatement :  IEquatable<CreditCardStatement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardStatement" /> class.
        /// </summary>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer (required).</param>
        /// <param name="statementDate">The statement date in ISO 8601 format YYYY-MM-DD (required).</param>
        /// <param name="statementSummary">statementSummary.</param>
        /// <param name="unSecuredLoans">unSecuredLoans.</param>
        /// <param name="transactions">transactions.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data..</param>
        public CreditCardStatement(string displayAccountNumber = default(string), DateTime? statementDate = default(DateTime?), StatementSummary statementSummary = default(StatementSummary), List<UnSecuredLoans> unSecuredLoans = default(List<UnSecuredLoans>), List<Transactions> transactions = default(List<Transactions>), string nextStartIndex = default(string))
        {
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for CreditCardStatement and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
            // to ensure "statementDate" is required (not null)
            if (statementDate == null)
            {
                throw new InvalidDataException("statementDate is a required property for CreditCardStatement and cannot be null");
            }
            else
            {
                this.StatementDate = statementDate;
            }
            this.StatementSummary = statementSummary;
            this.UnSecuredLoans = unSecuredLoans;
            this.Transactions = transactions;
            this.NextStartIndex = nextStartIndex;
        }
        
        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// The statement date in ISO 8601 format YYYY-MM-DD
        /// </summary>
        /// <value>The statement date in ISO 8601 format YYYY-MM-DD</value>
        [DataMember(Name="statementDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StatementDate { get; set; }

        /// <summary>
        /// Gets or Sets StatementSummary
        /// </summary>
        [DataMember(Name="statementSummary", EmitDefaultValue=false)]
        public StatementSummary StatementSummary { get; set; }

        /// <summary>
        /// Gets or Sets UnSecuredLoans
        /// </summary>
        [DataMember(Name="unSecuredLoans", EmitDefaultValue=false)]
        public List<UnSecuredLoans> UnSecuredLoans { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<Transactions> Transactions { get; set; }

        /// <summary>
        /// In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
        /// </summary>
        /// <value>In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.</value>
        [DataMember(Name="nextStartIndex", EmitDefaultValue=false)]
        public string NextStartIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardStatement {\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  StatementDate: ").Append(StatementDate).Append("\n");
            sb.Append("  StatementSummary: ").Append(StatementSummary).Append("\n");
            sb.Append("  UnSecuredLoans: ").Append(UnSecuredLoans).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  NextStartIndex: ").Append(NextStartIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardStatement);
        }

        /// <summary>
        /// Returns true if CreditCardStatement instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardStatement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardStatement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.StatementDate == input.StatementDate ||
                    (this.StatementDate != null &&
                    this.StatementDate.Equals(input.StatementDate))
                ) && 
                (
                    this.StatementSummary == input.StatementSummary ||
                    (this.StatementSummary != null &&
                    this.StatementSummary.Equals(input.StatementSummary))
                ) && 
                (
                    this.UnSecuredLoans == input.UnSecuredLoans ||
                    this.UnSecuredLoans != null &&
                    input.UnSecuredLoans != null &&
                    this.UnSecuredLoans.SequenceEqual(input.UnSecuredLoans)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.NextStartIndex == input.NextStartIndex ||
                    (this.NextStartIndex != null &&
                    this.NextStartIndex.Equals(input.NextStartIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.StatementDate != null)
                    hashCode = hashCode * 59 + this.StatementDate.GetHashCode();
                if (this.StatementSummary != null)
                    hashCode = hashCode * 59 + this.StatementSummary.GetHashCode();
                if (this.UnSecuredLoans != null)
                    hashCode = hashCode * 59 + this.UnSecuredLoans.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.NextStartIndex != null)
                    hashCode = hashCode * 59 + this.NextStartIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
