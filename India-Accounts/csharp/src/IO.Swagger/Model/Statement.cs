/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Statement
    /// </summary>
    [DataContract]
        public partial class Statement :  IEquatable<Statement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Statement" /> class.
        /// </summary>
        /// <param name="eppMaximumEligibleAmount">Maximum eligible amount for which Equal Payment Plan can be booked. (required).</param>
        /// <param name="eppMinimumEligibleAmount">Minimum eligible amount for which Equal Payment Plan can be booked. (required).</param>
        /// <param name="statementBalanceAmount">Statement balance amount on the statement date. (required).</param>
        public Statement(double? eppMaximumEligibleAmount = default(double?), double? eppMinimumEligibleAmount = default(double?), double? statementBalanceAmount = default(double?))
        {
            // to ensure "eppMaximumEligibleAmount" is required (not null)
            if (eppMaximumEligibleAmount == null)
            {
                throw new InvalidDataException("eppMaximumEligibleAmount is a required property for Statement and cannot be null");
            }
            else
            {
                this.EppMaximumEligibleAmount = eppMaximumEligibleAmount;
            }
            // to ensure "eppMinimumEligibleAmount" is required (not null)
            if (eppMinimumEligibleAmount == null)
            {
                throw new InvalidDataException("eppMinimumEligibleAmount is a required property for Statement and cannot be null");
            }
            else
            {
                this.EppMinimumEligibleAmount = eppMinimumEligibleAmount;
            }
            // to ensure "statementBalanceAmount" is required (not null)
            if (statementBalanceAmount == null)
            {
                throw new InvalidDataException("statementBalanceAmount is a required property for Statement and cannot be null");
            }
            else
            {
                this.StatementBalanceAmount = statementBalanceAmount;
            }
        }
        
        /// <summary>
        /// Maximum eligible amount for which Equal Payment Plan can be booked.
        /// </summary>
        /// <value>Maximum eligible amount for which Equal Payment Plan can be booked.</value>
        [DataMember(Name="eppMaximumEligibleAmount", EmitDefaultValue=false)]
        public double? EppMaximumEligibleAmount { get; set; }

        /// <summary>
        /// Minimum eligible amount for which Equal Payment Plan can be booked.
        /// </summary>
        /// <value>Minimum eligible amount for which Equal Payment Plan can be booked.</value>
        [DataMember(Name="eppMinimumEligibleAmount", EmitDefaultValue=false)]
        public double? EppMinimumEligibleAmount { get; set; }

        /// <summary>
        /// Statement balance amount on the statement date.
        /// </summary>
        /// <value>Statement balance amount on the statement date.</value>
        [DataMember(Name="statementBalanceAmount", EmitDefaultValue=false)]
        public double? StatementBalanceAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Statement {\n");
            sb.Append("  EppMaximumEligibleAmount: ").Append(EppMaximumEligibleAmount).Append("\n");
            sb.Append("  EppMinimumEligibleAmount: ").Append(EppMinimumEligibleAmount).Append("\n");
            sb.Append("  StatementBalanceAmount: ").Append(StatementBalanceAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Statement);
        }

        /// <summary>
        /// Returns true if Statement instances are equal
        /// </summary>
        /// <param name="input">Instance of Statement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Statement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EppMaximumEligibleAmount == input.EppMaximumEligibleAmount ||
                    (this.EppMaximumEligibleAmount != null &&
                    this.EppMaximumEligibleAmount.Equals(input.EppMaximumEligibleAmount))
                ) && 
                (
                    this.EppMinimumEligibleAmount == input.EppMinimumEligibleAmount ||
                    (this.EppMinimumEligibleAmount != null &&
                    this.EppMinimumEligibleAmount.Equals(input.EppMinimumEligibleAmount))
                ) && 
                (
                    this.StatementBalanceAmount == input.StatementBalanceAmount ||
                    (this.StatementBalanceAmount != null &&
                    this.StatementBalanceAmount.Equals(input.StatementBalanceAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EppMaximumEligibleAmount != null)
                    hashCode = hashCode * 59 + this.EppMaximumEligibleAmount.GetHashCode();
                if (this.EppMinimumEligibleAmount != null)
                    hashCode = hashCode * 59 + this.EppMinimumEligibleAmount.GetHashCode();
                if (this.StatementBalanceAmount != null)
                    hashCode = hashCode * 59 + this.StatementBalanceAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
