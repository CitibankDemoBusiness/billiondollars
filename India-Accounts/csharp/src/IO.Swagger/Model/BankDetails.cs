/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BankDetails
    /// </summary>
    [DataContract]
        public partial class BankDetails :  IEquatable<BankDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankDetails" /> class.
        /// </summary>
        /// <param name="bankCode">Bank Identification Code to which the loan will be credited..</param>
        /// <param name="accountNumber">Account Number to which the loan will be credited..</param>
        /// <param name="branchCode">Bank Branch Code to which the loan will be credited..</param>
        /// <param name="bankName">This refer to the name of the bank.</param>
        /// <param name="payeeName">Name of the Beneficiary to whom the loam amount will be disbursed..</param>
        /// <param name="remarks">Loan Transfer Notes. Free text from screen..</param>
        public BankDetails(string bankCode = default(string), string accountNumber = default(string), string branchCode = default(string), string bankName = default(string), string payeeName = default(string), string remarks = default(string))
        {
            this.BankCode = bankCode;
            this.AccountNumber = accountNumber;
            this.BranchCode = branchCode;
            this.BankName = bankName;
            this.PayeeName = payeeName;
            this.Remarks = remarks;
        }
        
        /// <summary>
        /// Bank Identification Code to which the loan will be credited.
        /// </summary>
        /// <value>Bank Identification Code to which the loan will be credited.</value>
        [DataMember(Name="bankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }

        /// <summary>
        /// Account Number to which the loan will be credited.
        /// </summary>
        /// <value>Account Number to which the loan will be credited.</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Bank Branch Code to which the loan will be credited.
        /// </summary>
        /// <value>Bank Branch Code to which the loan will be credited.</value>
        [DataMember(Name="branchCode", EmitDefaultValue=false)]
        public string BranchCode { get; set; }

        /// <summary>
        /// This refer to the name of the bank
        /// </summary>
        /// <value>This refer to the name of the bank</value>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// Name of the Beneficiary to whom the loam amount will be disbursed.
        /// </summary>
        /// <value>Name of the Beneficiary to whom the loam amount will be disbursed.</value>
        [DataMember(Name="payeeName", EmitDefaultValue=false)]
        public string PayeeName { get; set; }

        /// <summary>
        /// Loan Transfer Notes. Free text from screen.
        /// </summary>
        /// <value>Loan Transfer Notes. Free text from screen.</value>
        [DataMember(Name="remarks", EmitDefaultValue=false)]
        public string Remarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankDetails {\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  PayeeName: ").Append(PayeeName).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankDetails);
        }

        /// <summary>
        /// Returns true if BankDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BankDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.BranchCode == input.BranchCode ||
                    (this.BranchCode != null &&
                    this.BranchCode.Equals(input.BranchCode))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.PayeeName == input.PayeeName ||
                    (this.PayeeName != null &&
                    this.PayeeName.Equals(input.PayeeName))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.BranchCode != null)
                    hashCode = hashCode * 59 + this.BranchCode.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.PayeeName != null)
                    hashCode = hashCode * 59 + this.PayeeName.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
