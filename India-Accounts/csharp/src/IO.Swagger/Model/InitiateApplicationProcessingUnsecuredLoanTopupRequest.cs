/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InitiateApplicationProcessingUnsecuredLoanTopupRequest
    /// </summary>
    [DataContract]
        public partial class InitiateApplicationProcessingUnsecuredLoanTopupRequest :  IEquatable<InitiateApplicationProcessingUnsecuredLoanTopupRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiateApplicationProcessingUnsecuredLoanTopupRequest" /> class.
        /// </summary>
        /// <param name="marketingCampaignOffer">marketingCampaignOffer.</param>
        /// <param name="accountId">Account number of customer in encrypted form..</param>
        /// <param name="cardId">Card number of customer in encrypted form..</param>
        /// <param name="product">product.</param>
        /// <param name="requestedLoanAmount">Requested loan amount.</param>
        /// <param name="loanTopupApplicationType">Identifies if application is for cross-sell application for new personal loan (PIL) or loan top-up. This is a reference data data field. Please use /v1/utilities/referenceData/{loanTopupApplicationType} resource to get valid value of this field with description. (required).</param>
        /// <param name="spokenLanguageCode">Code for spoken language of applicant. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description. (required).</param>
        public InitiateApplicationProcessingUnsecuredLoanTopupRequest(MarketingCampaignOffer marketingCampaignOffer = default(MarketingCampaignOffer), string accountId = default(string), string cardId = default(string), Product product = default(Product), double? requestedLoanAmount = default(double?), string loanTopupApplicationType = default(string), string spokenLanguageCode = default(string))
        {
            // to ensure "loanTopupApplicationType" is required (not null)
            if (loanTopupApplicationType == null)
            {
                throw new InvalidDataException("loanTopupApplicationType is a required property for InitiateApplicationProcessingUnsecuredLoanTopupRequest and cannot be null");
            }
            else
            {
                this.LoanTopupApplicationType = loanTopupApplicationType;
            }
            // to ensure "spokenLanguageCode" is required (not null)
            if (spokenLanguageCode == null)
            {
                throw new InvalidDataException("spokenLanguageCode is a required property for InitiateApplicationProcessingUnsecuredLoanTopupRequest and cannot be null");
            }
            else
            {
                this.SpokenLanguageCode = spokenLanguageCode;
            }
            this.MarketingCampaignOffer = marketingCampaignOffer;
            this.AccountId = accountId;
            this.CardId = cardId;
            this.Product = product;
            this.RequestedLoanAmount = requestedLoanAmount;
        }
        
        /// <summary>
        /// Gets or Sets MarketingCampaignOffer
        /// </summary>
        [DataMember(Name="marketingCampaignOffer", EmitDefaultValue=false)]
        public MarketingCampaignOffer MarketingCampaignOffer { get; set; }

        /// <summary>
        /// Account number of customer in encrypted form.
        /// </summary>
        /// <value>Account number of customer in encrypted form.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Card number of customer in encrypted form.
        /// </summary>
        /// <value>Card number of customer in encrypted form.</value>
        [DataMember(Name="cardId", EmitDefaultValue=false)]
        public string CardId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public Product Product { get; set; }

        /// <summary>
        /// Requested loan amount
        /// </summary>
        /// <value>Requested loan amount</value>
        [DataMember(Name="requestedLoanAmount", EmitDefaultValue=false)]
        public double? RequestedLoanAmount { get; set; }

        /// <summary>
        /// Identifies if application is for cross-sell application for new personal loan (PIL) or loan top-up. This is a reference data data field. Please use /v1/utilities/referenceData/{loanTopupApplicationType} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Identifies if application is for cross-sell application for new personal loan (PIL) or loan top-up. This is a reference data data field. Please use /v1/utilities/referenceData/{loanTopupApplicationType} resource to get valid value of this field with description.</value>
        [DataMember(Name="loanTopupApplicationType", EmitDefaultValue=false)]
        public string LoanTopupApplicationType { get; set; }

        /// <summary>
        /// Code for spoken language of applicant. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Code for spoken language of applicant. Please use /v1/utilities/referenceData/{spokenLanguageCode} resource to get valid value of this field with description.</value>
        [DataMember(Name="spokenLanguageCode", EmitDefaultValue=false)]
        public string SpokenLanguageCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InitiateApplicationProcessingUnsecuredLoanTopupRequest {\n");
            sb.Append("  MarketingCampaignOffer: ").Append(MarketingCampaignOffer).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  RequestedLoanAmount: ").Append(RequestedLoanAmount).Append("\n");
            sb.Append("  LoanTopupApplicationType: ").Append(LoanTopupApplicationType).Append("\n");
            sb.Append("  SpokenLanguageCode: ").Append(SpokenLanguageCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InitiateApplicationProcessingUnsecuredLoanTopupRequest);
        }

        /// <summary>
        /// Returns true if InitiateApplicationProcessingUnsecuredLoanTopupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InitiateApplicationProcessingUnsecuredLoanTopupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InitiateApplicationProcessingUnsecuredLoanTopupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketingCampaignOffer == input.MarketingCampaignOffer ||
                    (this.MarketingCampaignOffer != null &&
                    this.MarketingCampaignOffer.Equals(input.MarketingCampaignOffer))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.RequestedLoanAmount == input.RequestedLoanAmount ||
                    (this.RequestedLoanAmount != null &&
                    this.RequestedLoanAmount.Equals(input.RequestedLoanAmount))
                ) && 
                (
                    this.LoanTopupApplicationType == input.LoanTopupApplicationType ||
                    (this.LoanTopupApplicationType != null &&
                    this.LoanTopupApplicationType.Equals(input.LoanTopupApplicationType))
                ) && 
                (
                    this.SpokenLanguageCode == input.SpokenLanguageCode ||
                    (this.SpokenLanguageCode != null &&
                    this.SpokenLanguageCode.Equals(input.SpokenLanguageCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketingCampaignOffer != null)
                    hashCode = hashCode * 59 + this.MarketingCampaignOffer.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.RequestedLoanAmount != null)
                    hashCode = hashCode * 59 + this.RequestedLoanAmount.GetHashCode();
                if (this.LoanTopupApplicationType != null)
                    hashCode = hashCode * 59 + this.LoanTopupApplicationType.GetHashCode();
                if (this.SpokenLanguageCode != null)
                    hashCode = hashCode * 59 + this.SpokenLanguageCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
