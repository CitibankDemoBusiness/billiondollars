/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoanBookingPlan
    /// </summary>
    [DataContract]
        public partial class LoanBookingPlan :  IEquatable<LoanBookingPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanBookingPlan" /> class.
        /// </summary>
        /// <param name="tenor">Period of time for which the Loan is taken. This will be reference data. (required).</param>
        /// <param name="effectiveInterestRate">The interest rate applicable on Loan Amount..</param>
        /// <param name="annualPercentageRate">Interest rate for a whole year. This includes any fees or additional cost associated..</param>
        /// <param name="installmentAmount">The montly emi for the loan amount taken based on Tenor.</param>
        /// <param name="oneTimeProcessingFeeIndicator">One time processing fee indicator. This is a reference data field. Please use /v1/apac/utilities/referenceData/{oneTimeProcessingFeeIndicator} resource to get valid value of this field with description..</param>
        /// <param name="oneTimeProcessingFeeAmount">Fee charged as part of one time processing..</param>
        /// <param name="initialFeeAmount">First month fee/interest charge incurred from booking date to next statement cycle date..</param>
        /// <param name="oneTimeProcessingFeePercentage">Percentage of one time processing fee charged..</param>
        public LoanBookingPlan(int? tenor = default(int?), double? effectiveInterestRate = default(double?), double? annualPercentageRate = default(double?), double? installmentAmount = default(double?), string oneTimeProcessingFeeIndicator = default(string), double? oneTimeProcessingFeeAmount = default(double?), double? initialFeeAmount = default(double?), double? oneTimeProcessingFeePercentage = default(double?))
        {
            // to ensure "tenor" is required (not null)
            if (tenor == null)
            {
                throw new InvalidDataException("tenor is a required property for LoanBookingPlan and cannot be null");
            }
            else
            {
                this.Tenor = tenor;
            }
            this.EffectiveInterestRate = effectiveInterestRate;
            this.AnnualPercentageRate = annualPercentageRate;
            this.InstallmentAmount = installmentAmount;
            this.OneTimeProcessingFeeIndicator = oneTimeProcessingFeeIndicator;
            this.OneTimeProcessingFeeAmount = oneTimeProcessingFeeAmount;
            this.InitialFeeAmount = initialFeeAmount;
            this.OneTimeProcessingFeePercentage = oneTimeProcessingFeePercentage;
        }
        
        /// <summary>
        /// Period of time for which the Loan is taken. This will be reference data.
        /// </summary>
        /// <value>Period of time for which the Loan is taken. This will be reference data.</value>
        [DataMember(Name="tenor", EmitDefaultValue=false)]
        public int? Tenor { get; set; }

        /// <summary>
        /// The interest rate applicable on Loan Amount.
        /// </summary>
        /// <value>The interest rate applicable on Loan Amount.</value>
        [DataMember(Name="effectiveInterestRate", EmitDefaultValue=false)]
        public double? EffectiveInterestRate { get; set; }

        /// <summary>
        /// Interest rate for a whole year. This includes any fees or additional cost associated.
        /// </summary>
        /// <value>Interest rate for a whole year. This includes any fees or additional cost associated.</value>
        [DataMember(Name="annualPercentageRate", EmitDefaultValue=false)]
        public double? AnnualPercentageRate { get; set; }

        /// <summary>
        /// The montly emi for the loan amount taken based on Tenor
        /// </summary>
        /// <value>The montly emi for the loan amount taken based on Tenor</value>
        [DataMember(Name="installmentAmount", EmitDefaultValue=false)]
        public double? InstallmentAmount { get; set; }

        /// <summary>
        /// One time processing fee indicator. This is a reference data field. Please use /v1/apac/utilities/referenceData/{oneTimeProcessingFeeIndicator} resource to get valid value of this field with description.
        /// </summary>
        /// <value>One time processing fee indicator. This is a reference data field. Please use /v1/apac/utilities/referenceData/{oneTimeProcessingFeeIndicator} resource to get valid value of this field with description.</value>
        [DataMember(Name="oneTimeProcessingFeeIndicator", EmitDefaultValue=false)]
        public string OneTimeProcessingFeeIndicator { get; set; }

        /// <summary>
        /// Fee charged as part of one time processing.
        /// </summary>
        /// <value>Fee charged as part of one time processing.</value>
        [DataMember(Name="oneTimeProcessingFeeAmount", EmitDefaultValue=false)]
        public double? OneTimeProcessingFeeAmount { get; set; }

        /// <summary>
        /// First month fee/interest charge incurred from booking date to next statement cycle date.
        /// </summary>
        /// <value>First month fee/interest charge incurred from booking date to next statement cycle date.</value>
        [DataMember(Name="initialFeeAmount", EmitDefaultValue=false)]
        public double? InitialFeeAmount { get; set; }

        /// <summary>
        /// Percentage of one time processing fee charged.
        /// </summary>
        /// <value>Percentage of one time processing fee charged.</value>
        [DataMember(Name="oneTimeProcessingFeePercentage", EmitDefaultValue=false)]
        public double? OneTimeProcessingFeePercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanBookingPlan {\n");
            sb.Append("  Tenor: ").Append(Tenor).Append("\n");
            sb.Append("  EffectiveInterestRate: ").Append(EffectiveInterestRate).Append("\n");
            sb.Append("  AnnualPercentageRate: ").Append(AnnualPercentageRate).Append("\n");
            sb.Append("  InstallmentAmount: ").Append(InstallmentAmount).Append("\n");
            sb.Append("  OneTimeProcessingFeeIndicator: ").Append(OneTimeProcessingFeeIndicator).Append("\n");
            sb.Append("  OneTimeProcessingFeeAmount: ").Append(OneTimeProcessingFeeAmount).Append("\n");
            sb.Append("  InitialFeeAmount: ").Append(InitialFeeAmount).Append("\n");
            sb.Append("  OneTimeProcessingFeePercentage: ").Append(OneTimeProcessingFeePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanBookingPlan);
        }

        /// <summary>
        /// Returns true if LoanBookingPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanBookingPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanBookingPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tenor == input.Tenor ||
                    (this.Tenor != null &&
                    this.Tenor.Equals(input.Tenor))
                ) && 
                (
                    this.EffectiveInterestRate == input.EffectiveInterestRate ||
                    (this.EffectiveInterestRate != null &&
                    this.EffectiveInterestRate.Equals(input.EffectiveInterestRate))
                ) && 
                (
                    this.AnnualPercentageRate == input.AnnualPercentageRate ||
                    (this.AnnualPercentageRate != null &&
                    this.AnnualPercentageRate.Equals(input.AnnualPercentageRate))
                ) && 
                (
                    this.InstallmentAmount == input.InstallmentAmount ||
                    (this.InstallmentAmount != null &&
                    this.InstallmentAmount.Equals(input.InstallmentAmount))
                ) && 
                (
                    this.OneTimeProcessingFeeIndicator == input.OneTimeProcessingFeeIndicator ||
                    (this.OneTimeProcessingFeeIndicator != null &&
                    this.OneTimeProcessingFeeIndicator.Equals(input.OneTimeProcessingFeeIndicator))
                ) && 
                (
                    this.OneTimeProcessingFeeAmount == input.OneTimeProcessingFeeAmount ||
                    (this.OneTimeProcessingFeeAmount != null &&
                    this.OneTimeProcessingFeeAmount.Equals(input.OneTimeProcessingFeeAmount))
                ) && 
                (
                    this.InitialFeeAmount == input.InitialFeeAmount ||
                    (this.InitialFeeAmount != null &&
                    this.InitialFeeAmount.Equals(input.InitialFeeAmount))
                ) && 
                (
                    this.OneTimeProcessingFeePercentage == input.OneTimeProcessingFeePercentage ||
                    (this.OneTimeProcessingFeePercentage != null &&
                    this.OneTimeProcessingFeePercentage.Equals(input.OneTimeProcessingFeePercentage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tenor != null)
                    hashCode = hashCode * 59 + this.Tenor.GetHashCode();
                if (this.EffectiveInterestRate != null)
                    hashCode = hashCode * 59 + this.EffectiveInterestRate.GetHashCode();
                if (this.AnnualPercentageRate != null)
                    hashCode = hashCode * 59 + this.AnnualPercentageRate.GetHashCode();
                if (this.InstallmentAmount != null)
                    hashCode = hashCode * 59 + this.InstallmentAmount.GetHashCode();
                if (this.OneTimeProcessingFeeIndicator != null)
                    hashCode = hashCode * 59 + this.OneTimeProcessingFeeIndicator.GetHashCode();
                if (this.OneTimeProcessingFeeAmount != null)
                    hashCode = hashCode * 59 + this.OneTimeProcessingFeeAmount.GetHashCode();
                if (this.InitialFeeAmount != null)
                    hashCode = hashCode * 59 + this.InitialFeeAmount.GetHashCode();
                if (this.OneTimeProcessingFeePercentage != null)
                    hashCode = hashCode * 59 + this.OneTimeProcessingFeePercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
