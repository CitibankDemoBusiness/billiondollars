/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditCardAccountSummary
    /// </summary>
    [DataContract]
        public partial class CreditCardAccountSummary :  IEquatable<CreditCardAccountSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardAccountSummary" /> class.
        /// </summary>
        /// <param name="productName">The name of the product.</param>
        /// <param name="productCode">A unique code that identifies the product.</param>
        /// <param name="accountNickname">The nickname of the account assigned by the customer.</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer.</param>
        /// <param name="accountId">The customer account identifier in encrypted format..</param>
        /// <param name="currencyCode">The currency code in ISO 4217 format.</param>
        /// <param name="accountClassification">Classification of account either as ASSET or LIABILITY. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClassification} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="accountStatus">Status of the account. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="outstandingBalance">The amount of money owed on the credit account. It is the outstanding balance in applicable level (either card, account or relationship levels).</param>
        /// <param name="availableCredit">Available Credit limit on the credit card.</param>
        /// <param name="creditLimit">The maximum amount of credit that extend to a customer.</param>
        /// <param name="minimumDueAmount">Minimum due amount for a payment cycle.</param>
        /// <param name="paymentDueDate">The payment due date in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="alternateCurrency">The alternate currency.</param>
        /// <param name="alternateCurrencyCurrentBalance">The current balance in alternate currency.</param>
        /// <param name="cardHolderType">Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description..</param>
        public CreditCardAccountSummary(string productName = default(string), string productCode = default(string), string accountNickname = default(string), string displayAccountNumber = default(string), string accountId = default(string), string currencyCode = default(string), string accountClassification = default(string), string accountStatus = default(string), double? outstandingBalance = default(double?), double? availableCredit = default(double?), double? creditLimit = default(double?), double? minimumDueAmount = default(double?), DateTime? paymentDueDate = default(DateTime?), string alternateCurrency = default(string), double? alternateCurrencyCurrentBalance = default(double?), string cardHolderType = default(string))
        {
            this.ProductName = productName;
            this.ProductCode = productCode;
            this.AccountNickname = accountNickname;
            this.DisplayAccountNumber = displayAccountNumber;
            this.AccountId = accountId;
            this.CurrencyCode = currencyCode;
            this.AccountClassification = accountClassification;
            this.AccountStatus = accountStatus;
            this.OutstandingBalance = outstandingBalance;
            this.AvailableCredit = availableCredit;
            this.CreditLimit = creditLimit;
            this.MinimumDueAmount = minimumDueAmount;
            this.PaymentDueDate = paymentDueDate;
            this.AlternateCurrency = alternateCurrency;
            this.AlternateCurrencyCurrentBalance = alternateCurrencyCurrentBalance;
            this.CardHolderType = cardHolderType;
        }
        
        /// <summary>
        /// The name of the product
        /// </summary>
        /// <value>The name of the product</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// A unique code that identifies the product
        /// </summary>
        /// <value>A unique code that identifies the product</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// The nickname of the account assigned by the customer
        /// </summary>
        /// <value>The nickname of the account assigned by the customer</value>
        [DataMember(Name="accountNickname", EmitDefaultValue=false)]
        public string AccountNickname { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// The customer account identifier in encrypted format.
        /// </summary>
        /// <value>The customer account identifier in encrypted format.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The currency code in ISO 4217 format
        /// </summary>
        /// <value>The currency code in ISO 4217 format</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Classification of account either as ASSET or LIABILITY. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClassification} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Classification of account either as ASSET or LIABILITY. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountClassification} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="accountClassification", EmitDefaultValue=false)]
        public string AccountClassification { get; set; }

        /// <summary>
        /// Status of the account. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Status of the account. This is a reference data field. Please use /v1/apac/utilities/referenceData/{accountStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="accountStatus", EmitDefaultValue=false)]
        public string AccountStatus { get; set; }

        /// <summary>
        /// The amount of money owed on the credit account. It is the outstanding balance in applicable level (either card, account or relationship levels)
        /// </summary>
        /// <value>The amount of money owed on the credit account. It is the outstanding balance in applicable level (either card, account or relationship levels)</value>
        [DataMember(Name="outstandingBalance", EmitDefaultValue=false)]
        public double? OutstandingBalance { get; set; }

        /// <summary>
        /// Available Credit limit on the credit card
        /// </summary>
        /// <value>Available Credit limit on the credit card</value>
        [DataMember(Name="availableCredit", EmitDefaultValue=false)]
        public double? AvailableCredit { get; set; }

        /// <summary>
        /// The maximum amount of credit that extend to a customer
        /// </summary>
        /// <value>The maximum amount of credit that extend to a customer</value>
        [DataMember(Name="creditLimit", EmitDefaultValue=false)]
        public double? CreditLimit { get; set; }

        /// <summary>
        /// Minimum due amount for a payment cycle
        /// </summary>
        /// <value>Minimum due amount for a payment cycle</value>
        [DataMember(Name="minimumDueAmount", EmitDefaultValue=false)]
        public double? MinimumDueAmount { get; set; }

        /// <summary>
        /// The payment due date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>The payment due date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="paymentDueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? PaymentDueDate { get; set; }

        /// <summary>
        /// The alternate currency
        /// </summary>
        /// <value>The alternate currency</value>
        [DataMember(Name="alternateCurrency", EmitDefaultValue=false)]
        public string AlternateCurrency { get; set; }

        /// <summary>
        /// The current balance in alternate currency
        /// </summary>
        /// <value>The current balance in alternate currency</value>
        [DataMember(Name="alternateCurrencyCurrentBalance", EmitDefaultValue=false)]
        public double? AlternateCurrencyCurrentBalance { get; set; }

        /// <summary>
        /// Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Indicator to specify whether the card is primary or supplementary. This is a reference data field. Please use /v1/apac/utilities/referenceData/{cardHolderType} resource to get valid value of this field with description.</value>
        [DataMember(Name="cardHolderType", EmitDefaultValue=false)]
        public string CardHolderType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardAccountSummary {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  AccountNickname: ").Append(AccountNickname).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  AccountClassification: ").Append(AccountClassification).Append("\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  OutstandingBalance: ").Append(OutstandingBalance).Append("\n");
            sb.Append("  AvailableCredit: ").Append(AvailableCredit).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  MinimumDueAmount: ").Append(MinimumDueAmount).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  AlternateCurrency: ").Append(AlternateCurrency).Append("\n");
            sb.Append("  AlternateCurrencyCurrentBalance: ").Append(AlternateCurrencyCurrentBalance).Append("\n");
            sb.Append("  CardHolderType: ").Append(CardHolderType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardAccountSummary);
        }

        /// <summary>
        /// Returns true if CreditCardAccountSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardAccountSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardAccountSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.AccountNickname == input.AccountNickname ||
                    (this.AccountNickname != null &&
                    this.AccountNickname.Equals(input.AccountNickname))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.AccountClassification == input.AccountClassification ||
                    (this.AccountClassification != null &&
                    this.AccountClassification.Equals(input.AccountClassification))
                ) && 
                (
                    this.AccountStatus == input.AccountStatus ||
                    (this.AccountStatus != null &&
                    this.AccountStatus.Equals(input.AccountStatus))
                ) && 
                (
                    this.OutstandingBalance == input.OutstandingBalance ||
                    (this.OutstandingBalance != null &&
                    this.OutstandingBalance.Equals(input.OutstandingBalance))
                ) && 
                (
                    this.AvailableCredit == input.AvailableCredit ||
                    (this.AvailableCredit != null &&
                    this.AvailableCredit.Equals(input.AvailableCredit))
                ) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    (this.CreditLimit != null &&
                    this.CreditLimit.Equals(input.CreditLimit))
                ) && 
                (
                    this.MinimumDueAmount == input.MinimumDueAmount ||
                    (this.MinimumDueAmount != null &&
                    this.MinimumDueAmount.Equals(input.MinimumDueAmount))
                ) && 
                (
                    this.PaymentDueDate == input.PaymentDueDate ||
                    (this.PaymentDueDate != null &&
                    this.PaymentDueDate.Equals(input.PaymentDueDate))
                ) && 
                (
                    this.AlternateCurrency == input.AlternateCurrency ||
                    (this.AlternateCurrency != null &&
                    this.AlternateCurrency.Equals(input.AlternateCurrency))
                ) && 
                (
                    this.AlternateCurrencyCurrentBalance == input.AlternateCurrencyCurrentBalance ||
                    (this.AlternateCurrencyCurrentBalance != null &&
                    this.AlternateCurrencyCurrentBalance.Equals(input.AlternateCurrencyCurrentBalance))
                ) && 
                (
                    this.CardHolderType == input.CardHolderType ||
                    (this.CardHolderType != null &&
                    this.CardHolderType.Equals(input.CardHolderType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.AccountNickname != null)
                    hashCode = hashCode * 59 + this.AccountNickname.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.AccountClassification != null)
                    hashCode = hashCode * 59 + this.AccountClassification.GetHashCode();
                if (this.AccountStatus != null)
                    hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                if (this.OutstandingBalance != null)
                    hashCode = hashCode * 59 + this.OutstandingBalance.GetHashCode();
                if (this.AvailableCredit != null)
                    hashCode = hashCode * 59 + this.AvailableCredit.GetHashCode();
                if (this.CreditLimit != null)
                    hashCode = hashCode * 59 + this.CreditLimit.GetHashCode();
                if (this.MinimumDueAmount != null)
                    hashCode = hashCode * 59 + this.MinimumDueAmount.GetHashCode();
                if (this.PaymentDueDate != null)
                    hashCode = hashCode * 59 + this.PaymentDueDate.GetHashCode();
                if (this.AlternateCurrency != null)
                    hashCode = hashCode * 59 + this.AlternateCurrency.GetHashCode();
                if (this.AlternateCurrencyCurrentBalance != null)
                    hashCode = hashCode * 59 + this.AlternateCurrencyCurrentBalance.GetHashCode();
                if (this.CardHolderType != null)
                    hashCode = hashCode * 59 + this.CardHolderType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
