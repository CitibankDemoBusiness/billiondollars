/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BalanceTransferEligibilityDetails
    /// </summary>
    [DataContract]
        public partial class BalanceTransferEligibilityDetails :  IEquatable<BalanceTransferEligibilityDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceTransferEligibilityDetails" /> class.
        /// </summary>
        /// <param name="accountId">The account id  in encrypted format. (required).</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer. (required).</param>
        /// <param name="btSupportedAccountGroup">This field refers the account group supported by Balance Transfer. This is a reference data field. Please use /v1/utilities/referenceData/{btSupportedAccountGroup} resource to get valid value of this field with description..</param>
        /// <param name="maximumEligibleLoanAmount">This field indicates the maximum eligible amount for loan. (required).</param>
        /// <param name="minimumEligibleLoanAmount">This field indicates the minimum eligible amount for loan..</param>
        /// <param name="btDisbursementOptions">btDisbursementOptions (required).</param>
        /// <param name="paymentPans">paymentPans.</param>
        public BalanceTransferEligibilityDetails(string accountId = default(string), string displayAccountNumber = default(string), string btSupportedAccountGroup = default(string), double? maximumEligibleLoanAmount = default(double?), double? minimumEligibleLoanAmount = default(double?), List<BtDisbursementOptions> btDisbursementOptions = default(List<BtDisbursementOptions>), List<PaymentPans> paymentPans = default(List<PaymentPans>))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for BalanceTransferEligibilityDetails and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for BalanceTransferEligibilityDetails and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
            // to ensure "maximumEligibleLoanAmount" is required (not null)
            if (maximumEligibleLoanAmount == null)
            {
                throw new InvalidDataException("maximumEligibleLoanAmount is a required property for BalanceTransferEligibilityDetails and cannot be null");
            }
            else
            {
                this.MaximumEligibleLoanAmount = maximumEligibleLoanAmount;
            }
            // to ensure "btDisbursementOptions" is required (not null)
            if (btDisbursementOptions == null)
            {
                throw new InvalidDataException("btDisbursementOptions is a required property for BalanceTransferEligibilityDetails and cannot be null");
            }
            else
            {
                this.BtDisbursementOptions = btDisbursementOptions;
            }
            this.BtSupportedAccountGroup = btSupportedAccountGroup;
            this.MinimumEligibleLoanAmount = minimumEligibleLoanAmount;
            this.PaymentPans = paymentPans;
        }
        
        /// <summary>
        /// The account id  in encrypted format.
        /// </summary>
        /// <value>The account id  in encrypted format.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer.
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer.</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// This field refers the account group supported by Balance Transfer. This is a reference data field. Please use /v1/utilities/referenceData/{btSupportedAccountGroup} resource to get valid value of this field with description.
        /// </summary>
        /// <value>This field refers the account group supported by Balance Transfer. This is a reference data field. Please use /v1/utilities/referenceData/{btSupportedAccountGroup} resource to get valid value of this field with description.</value>
        [DataMember(Name="btSupportedAccountGroup", EmitDefaultValue=false)]
        public string BtSupportedAccountGroup { get; set; }

        /// <summary>
        /// This field indicates the maximum eligible amount for loan.
        /// </summary>
        /// <value>This field indicates the maximum eligible amount for loan.</value>
        [DataMember(Name="maximumEligibleLoanAmount", EmitDefaultValue=false)]
        public double? MaximumEligibleLoanAmount { get; set; }

        /// <summary>
        /// This field indicates the minimum eligible amount for loan.
        /// </summary>
        /// <value>This field indicates the minimum eligible amount for loan.</value>
        [DataMember(Name="minimumEligibleLoanAmount", EmitDefaultValue=false)]
        public double? MinimumEligibleLoanAmount { get; set; }

        /// <summary>
        /// Gets or Sets BtDisbursementOptions
        /// </summary>
        [DataMember(Name="btDisbursementOptions", EmitDefaultValue=false)]
        public List<BtDisbursementOptions> BtDisbursementOptions { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPans
        /// </summary>
        [DataMember(Name="paymentPans", EmitDefaultValue=false)]
        public List<PaymentPans> PaymentPans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceTransferEligibilityDetails {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  BtSupportedAccountGroup: ").Append(BtSupportedAccountGroup).Append("\n");
            sb.Append("  MaximumEligibleLoanAmount: ").Append(MaximumEligibleLoanAmount).Append("\n");
            sb.Append("  MinimumEligibleLoanAmount: ").Append(MinimumEligibleLoanAmount).Append("\n");
            sb.Append("  BtDisbursementOptions: ").Append(BtDisbursementOptions).Append("\n");
            sb.Append("  PaymentPans: ").Append(PaymentPans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceTransferEligibilityDetails);
        }

        /// <summary>
        /// Returns true if BalanceTransferEligibilityDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceTransferEligibilityDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceTransferEligibilityDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.BtSupportedAccountGroup == input.BtSupportedAccountGroup ||
                    (this.BtSupportedAccountGroup != null &&
                    this.BtSupportedAccountGroup.Equals(input.BtSupportedAccountGroup))
                ) && 
                (
                    this.MaximumEligibleLoanAmount == input.MaximumEligibleLoanAmount ||
                    (this.MaximumEligibleLoanAmount != null &&
                    this.MaximumEligibleLoanAmount.Equals(input.MaximumEligibleLoanAmount))
                ) && 
                (
                    this.MinimumEligibleLoanAmount == input.MinimumEligibleLoanAmount ||
                    (this.MinimumEligibleLoanAmount != null &&
                    this.MinimumEligibleLoanAmount.Equals(input.MinimumEligibleLoanAmount))
                ) && 
                (
                    this.BtDisbursementOptions == input.BtDisbursementOptions ||
                    this.BtDisbursementOptions != null &&
                    input.BtDisbursementOptions != null &&
                    this.BtDisbursementOptions.SequenceEqual(input.BtDisbursementOptions)
                ) && 
                (
                    this.PaymentPans == input.PaymentPans ||
                    this.PaymentPans != null &&
                    input.PaymentPans != null &&
                    this.PaymentPans.SequenceEqual(input.PaymentPans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.BtSupportedAccountGroup != null)
                    hashCode = hashCode * 59 + this.BtSupportedAccountGroup.GetHashCode();
                if (this.MaximumEligibleLoanAmount != null)
                    hashCode = hashCode * 59 + this.MaximumEligibleLoanAmount.GetHashCode();
                if (this.MinimumEligibleLoanAmount != null)
                    hashCode = hashCode * 59 + this.MinimumEligibleLoanAmount.GetHashCode();
                if (this.BtDisbursementOptions != null)
                    hashCode = hashCode * 59 + this.BtDisbursementOptions.GetHashCode();
                if (this.PaymentPans != null)
                    hashCode = hashCode * 59 + this.PaymentPans.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
