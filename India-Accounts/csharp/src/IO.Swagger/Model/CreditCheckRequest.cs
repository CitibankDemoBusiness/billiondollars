/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditCheckRequest
    /// </summary>
    [DataContract]
        public partial class CreditCheckRequest :  IEquatable<CreditCheckRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCheckRequest" /> class.
        /// </summary>
        /// <param name="monthlyIncome">This field is to indicate the monthly income of the customer. (required).</param>
        /// <param name="totalMonthlySecuredLoanRepaymentAmount">Total monthly repayment amount outside of Citibank for mortgage installment, secured loans and all in-progress loan applications..</param>
        /// <param name="totalMonthlyUnsecuredLoanRepaymentAmount">Total monthly repayment amount of unsecured loans in non-bank money lenders..</param>
        public CreditCheckRequest(double? monthlyIncome = default(double?), double? totalMonthlySecuredLoanRepaymentAmount = default(double?), double? totalMonthlyUnsecuredLoanRepaymentAmount = default(double?))
        {
            // to ensure "monthlyIncome" is required (not null)
            if (monthlyIncome == null)
            {
                throw new InvalidDataException("monthlyIncome is a required property for CreditCheckRequest and cannot be null");
            }
            else
            {
                this.MonthlyIncome = monthlyIncome;
            }
            this.TotalMonthlySecuredLoanRepaymentAmount = totalMonthlySecuredLoanRepaymentAmount;
            this.TotalMonthlyUnsecuredLoanRepaymentAmount = totalMonthlyUnsecuredLoanRepaymentAmount;
        }
        
        /// <summary>
        /// This field is to indicate the monthly income of the customer.
        /// </summary>
        /// <value>This field is to indicate the monthly income of the customer.</value>
        [DataMember(Name="monthlyIncome", EmitDefaultValue=false)]
        public double? MonthlyIncome { get; set; }

        /// <summary>
        /// Total monthly repayment amount outside of Citibank for mortgage installment, secured loans and all in-progress loan applications.
        /// </summary>
        /// <value>Total monthly repayment amount outside of Citibank for mortgage installment, secured loans and all in-progress loan applications.</value>
        [DataMember(Name="totalMonthlySecuredLoanRepaymentAmount", EmitDefaultValue=false)]
        public double? TotalMonthlySecuredLoanRepaymentAmount { get; set; }

        /// <summary>
        /// Total monthly repayment amount of unsecured loans in non-bank money lenders.
        /// </summary>
        /// <value>Total monthly repayment amount of unsecured loans in non-bank money lenders.</value>
        [DataMember(Name="totalMonthlyUnsecuredLoanRepaymentAmount", EmitDefaultValue=false)]
        public double? TotalMonthlyUnsecuredLoanRepaymentAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCheckRequest {\n");
            sb.Append("  MonthlyIncome: ").Append(MonthlyIncome).Append("\n");
            sb.Append("  TotalMonthlySecuredLoanRepaymentAmount: ").Append(TotalMonthlySecuredLoanRepaymentAmount).Append("\n");
            sb.Append("  TotalMonthlyUnsecuredLoanRepaymentAmount: ").Append(TotalMonthlyUnsecuredLoanRepaymentAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCheckRequest);
        }

        /// <summary>
        /// Returns true if CreditCheckRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCheckRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCheckRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MonthlyIncome == input.MonthlyIncome ||
                    (this.MonthlyIncome != null &&
                    this.MonthlyIncome.Equals(input.MonthlyIncome))
                ) && 
                (
                    this.TotalMonthlySecuredLoanRepaymentAmount == input.TotalMonthlySecuredLoanRepaymentAmount ||
                    (this.TotalMonthlySecuredLoanRepaymentAmount != null &&
                    this.TotalMonthlySecuredLoanRepaymentAmount.Equals(input.TotalMonthlySecuredLoanRepaymentAmount))
                ) && 
                (
                    this.TotalMonthlyUnsecuredLoanRepaymentAmount == input.TotalMonthlyUnsecuredLoanRepaymentAmount ||
                    (this.TotalMonthlyUnsecuredLoanRepaymentAmount != null &&
                    this.TotalMonthlyUnsecuredLoanRepaymentAmount.Equals(input.TotalMonthlyUnsecuredLoanRepaymentAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MonthlyIncome != null)
                    hashCode = hashCode * 59 + this.MonthlyIncome.GetHashCode();
                if (this.TotalMonthlySecuredLoanRepaymentAmount != null)
                    hashCode = hashCode * 59 + this.TotalMonthlySecuredLoanRepaymentAmount.GetHashCode();
                if (this.TotalMonthlyUnsecuredLoanRepaymentAmount != null)
                    hashCode = hashCode * 59 + this.TotalMonthlyUnsecuredLoanRepaymentAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
