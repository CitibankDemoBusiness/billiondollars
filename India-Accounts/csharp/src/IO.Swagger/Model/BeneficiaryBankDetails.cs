/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BeneficiaryBankDetails
    /// </summary>
    [DataContract]
        public partial class BeneficiaryBankDetails :  IEquatable<BeneficiaryBankDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BeneficiaryBankDetails" /> class.
        /// </summary>
        /// <param name="fullName">Name of the Beneficiary. (required).</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer (required).</param>
        /// <param name="bankName">Name of the bank. (required).</param>
        /// <param name="bankCode">The bank code of the external payee account. (required).</param>
        /// <param name="accountNumber">Account number of the beneficiary..</param>
        public BeneficiaryBankDetails(string fullName = default(string), string displayAccountNumber = default(string), string bankName = default(string), string bankCode = default(string), string accountNumber = default(string))
        {
            // to ensure "fullName" is required (not null)
            if (fullName == null)
            {
                throw new InvalidDataException("fullName is a required property for BeneficiaryBankDetails and cannot be null");
            }
            else
            {
                this.FullName = fullName;
            }
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for BeneficiaryBankDetails and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
            // to ensure "bankName" is required (not null)
            if (bankName == null)
            {
                throw new InvalidDataException("bankName is a required property for BeneficiaryBankDetails and cannot be null");
            }
            else
            {
                this.BankName = bankName;
            }
            // to ensure "bankCode" is required (not null)
            if (bankCode == null)
            {
                throw new InvalidDataException("bankCode is a required property for BeneficiaryBankDetails and cannot be null");
            }
            else
            {
                this.BankCode = bankCode;
            }
            this.AccountNumber = accountNumber;
        }
        
        /// <summary>
        /// Name of the Beneficiary.
        /// </summary>
        /// <value>Name of the Beneficiary.</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// Name of the bank.
        /// </summary>
        /// <value>Name of the bank.</value>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// The bank code of the external payee account.
        /// </summary>
        /// <value>The bank code of the external payee account.</value>
        [DataMember(Name="bankCode", EmitDefaultValue=false)]
        public string BankCode { get; set; }

        /// <summary>
        /// Account number of the beneficiary.
        /// </summary>
        /// <value>Account number of the beneficiary.</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeneficiaryBankDetails {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BeneficiaryBankDetails);
        }

        /// <summary>
        /// Returns true if BeneficiaryBankDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BeneficiaryBankDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeneficiaryBankDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankCode == input.BankCode ||
                    (this.BankCode != null &&
                    this.BankCode.Equals(input.BankCode))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BankCode != null)
                    hashCode = hashCode * 59 + this.BankCode.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
