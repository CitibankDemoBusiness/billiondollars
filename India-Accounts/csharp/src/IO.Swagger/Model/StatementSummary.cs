/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StatementSummary
    /// </summary>
    [DataContract]
        public partial class StatementSummary :  IEquatable<StatementSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatementSummary" /> class.
        /// </summary>
        /// <param name="outstandingBalance">Outstanding balance amount on the statement date.</param>
        /// <param name="creditLimit">The maximum amount of credit that extend to a customer.</param>
        /// <param name="activeEqualPaymentPlanCount">Number of active plans under equal payment plan.</param>
        /// <param name="beginningBalanceAmount">Balance as on Last Statement Date.</param>
        /// <param name="totalDebitAmount">Total debits made during the statement period.</param>
        /// <param name="totalCreditAmount">Total payments made during the statement period..</param>
        /// <param name="netInterestAmount">Total interest amount of monetary transactions posted to cardholder account.</param>
        /// <param name="paymentDueDate">Next payment due date in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="pastDueAmount">Past due amount to be paid.</param>
        /// <param name="cashAdvanceLimit">Some percentage of credit limit to withdraw cash.</param>
        /// <param name="cycleToDateFeeAmount">The total fee applied in the cycle.</param>
        /// <param name="interestPaidAmount">Interest amount paid on the credit card from the last billing cycle..</param>
        /// <param name="billingCurrencyCode">Billing currency code in  in ISO 4217 format.</param>
        /// <param name="cashAdvanceAvailableAmount">Available Cash Amount for withdrawal.</param>
        /// <param name="retailCycleInterestRate">Retail Interest Rate for merchant transactions..</param>
        /// <param name="cashCycleInterestRate">Cash Interest Rate for withdrawal.</param>
        /// <param name="privateLabelCreditCards">privateLabelCreditCards.</param>
        public StatementSummary(double? outstandingBalance = default(double?), double? creditLimit = default(double?), double? activeEqualPaymentPlanCount = default(double?), double? beginningBalanceAmount = default(double?), double? totalDebitAmount = default(double?), double? totalCreditAmount = default(double?), double? netInterestAmount = default(double?), DateTime? paymentDueDate = default(DateTime?), double? pastDueAmount = default(double?), double? cashAdvanceLimit = default(double?), double? cycleToDateFeeAmount = default(double?), double? interestPaidAmount = default(double?), string billingCurrencyCode = default(string), double? cashAdvanceAvailableAmount = default(double?), double? retailCycleInterestRate = default(double?), double? cashCycleInterestRate = default(double?), PrivateLabelCreditCards privateLabelCreditCards = default(PrivateLabelCreditCards))
        {
            this.OutstandingBalance = outstandingBalance;
            this.CreditLimit = creditLimit;
            this.ActiveEqualPaymentPlanCount = activeEqualPaymentPlanCount;
            this.BeginningBalanceAmount = beginningBalanceAmount;
            this.TotalDebitAmount = totalDebitAmount;
            this.TotalCreditAmount = totalCreditAmount;
            this.NetInterestAmount = netInterestAmount;
            this.PaymentDueDate = paymentDueDate;
            this.PastDueAmount = pastDueAmount;
            this.CashAdvanceLimit = cashAdvanceLimit;
            this.CycleToDateFeeAmount = cycleToDateFeeAmount;
            this.InterestPaidAmount = interestPaidAmount;
            this.BillingCurrencyCode = billingCurrencyCode;
            this.CashAdvanceAvailableAmount = cashAdvanceAvailableAmount;
            this.RetailCycleInterestRate = retailCycleInterestRate;
            this.CashCycleInterestRate = cashCycleInterestRate;
            this.PrivateLabelCreditCards = privateLabelCreditCards;
        }
        
        /// <summary>
        /// Outstanding balance amount on the statement date
        /// </summary>
        /// <value>Outstanding balance amount on the statement date</value>
        [DataMember(Name="outstandingBalance", EmitDefaultValue=false)]
        public double? OutstandingBalance { get; set; }

        /// <summary>
        /// The maximum amount of credit that extend to a customer
        /// </summary>
        /// <value>The maximum amount of credit that extend to a customer</value>
        [DataMember(Name="creditLimit", EmitDefaultValue=false)]
        public double? CreditLimit { get; set; }

        /// <summary>
        /// Number of active plans under equal payment plan
        /// </summary>
        /// <value>Number of active plans under equal payment plan</value>
        [DataMember(Name="activeEqualPaymentPlanCount", EmitDefaultValue=false)]
        public double? ActiveEqualPaymentPlanCount { get; set; }

        /// <summary>
        /// Balance as on Last Statement Date
        /// </summary>
        /// <value>Balance as on Last Statement Date</value>
        [DataMember(Name="beginningBalanceAmount", EmitDefaultValue=false)]
        public double? BeginningBalanceAmount { get; set; }

        /// <summary>
        /// Total debits made during the statement period
        /// </summary>
        /// <value>Total debits made during the statement period</value>
        [DataMember(Name="totalDebitAmount", EmitDefaultValue=false)]
        public double? TotalDebitAmount { get; set; }

        /// <summary>
        /// Total payments made during the statement period.
        /// </summary>
        /// <value>Total payments made during the statement period.</value>
        [DataMember(Name="totalCreditAmount", EmitDefaultValue=false)]
        public double? TotalCreditAmount { get; set; }

        /// <summary>
        /// Total interest amount of monetary transactions posted to cardholder account
        /// </summary>
        /// <value>Total interest amount of monetary transactions posted to cardholder account</value>
        [DataMember(Name="netInterestAmount", EmitDefaultValue=false)]
        public double? NetInterestAmount { get; set; }

        /// <summary>
        /// Next payment due date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Next payment due date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="paymentDueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? PaymentDueDate { get; set; }

        /// <summary>
        /// Past due amount to be paid
        /// </summary>
        /// <value>Past due amount to be paid</value>
        [DataMember(Name="pastDueAmount", EmitDefaultValue=false)]
        public double? PastDueAmount { get; set; }

        /// <summary>
        /// Some percentage of credit limit to withdraw cash
        /// </summary>
        /// <value>Some percentage of credit limit to withdraw cash</value>
        [DataMember(Name="cashAdvanceLimit", EmitDefaultValue=false)]
        public double? CashAdvanceLimit { get; set; }

        /// <summary>
        /// The total fee applied in the cycle
        /// </summary>
        /// <value>The total fee applied in the cycle</value>
        [DataMember(Name="cycleToDateFeeAmount", EmitDefaultValue=false)]
        public double? CycleToDateFeeAmount { get; set; }

        /// <summary>
        /// Interest amount paid on the credit card from the last billing cycle.
        /// </summary>
        /// <value>Interest amount paid on the credit card from the last billing cycle.</value>
        [DataMember(Name="interestPaidAmount", EmitDefaultValue=false)]
        public double? InterestPaidAmount { get; set; }

        /// <summary>
        /// Billing currency code in  in ISO 4217 format
        /// </summary>
        /// <value>Billing currency code in  in ISO 4217 format</value>
        [DataMember(Name="billingCurrencyCode", EmitDefaultValue=false)]
        public string BillingCurrencyCode { get; set; }

        /// <summary>
        /// Available Cash Amount for withdrawal
        /// </summary>
        /// <value>Available Cash Amount for withdrawal</value>
        [DataMember(Name="cashAdvanceAvailableAmount", EmitDefaultValue=false)]
        public double? CashAdvanceAvailableAmount { get; set; }

        /// <summary>
        /// Retail Interest Rate for merchant transactions.
        /// </summary>
        /// <value>Retail Interest Rate for merchant transactions.</value>
        [DataMember(Name="retailCycleInterestRate", EmitDefaultValue=false)]
        public double? RetailCycleInterestRate { get; set; }

        /// <summary>
        /// Cash Interest Rate for withdrawal
        /// </summary>
        /// <value>Cash Interest Rate for withdrawal</value>
        [DataMember(Name="cashCycleInterestRate", EmitDefaultValue=false)]
        public double? CashCycleInterestRate { get; set; }

        /// <summary>
        /// Gets or Sets PrivateLabelCreditCards
        /// </summary>
        [DataMember(Name="privateLabelCreditCards", EmitDefaultValue=false)]
        public PrivateLabelCreditCards PrivateLabelCreditCards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatementSummary {\n");
            sb.Append("  OutstandingBalance: ").Append(OutstandingBalance).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  ActiveEqualPaymentPlanCount: ").Append(ActiveEqualPaymentPlanCount).Append("\n");
            sb.Append("  BeginningBalanceAmount: ").Append(BeginningBalanceAmount).Append("\n");
            sb.Append("  TotalDebitAmount: ").Append(TotalDebitAmount).Append("\n");
            sb.Append("  TotalCreditAmount: ").Append(TotalCreditAmount).Append("\n");
            sb.Append("  NetInterestAmount: ").Append(NetInterestAmount).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  PastDueAmount: ").Append(PastDueAmount).Append("\n");
            sb.Append("  CashAdvanceLimit: ").Append(CashAdvanceLimit).Append("\n");
            sb.Append("  CycleToDateFeeAmount: ").Append(CycleToDateFeeAmount).Append("\n");
            sb.Append("  InterestPaidAmount: ").Append(InterestPaidAmount).Append("\n");
            sb.Append("  BillingCurrencyCode: ").Append(BillingCurrencyCode).Append("\n");
            sb.Append("  CashAdvanceAvailableAmount: ").Append(CashAdvanceAvailableAmount).Append("\n");
            sb.Append("  RetailCycleInterestRate: ").Append(RetailCycleInterestRate).Append("\n");
            sb.Append("  CashCycleInterestRate: ").Append(CashCycleInterestRate).Append("\n");
            sb.Append("  PrivateLabelCreditCards: ").Append(PrivateLabelCreditCards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatementSummary);
        }

        /// <summary>
        /// Returns true if StatementSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of StatementSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatementSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OutstandingBalance == input.OutstandingBalance ||
                    (this.OutstandingBalance != null &&
                    this.OutstandingBalance.Equals(input.OutstandingBalance))
                ) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    (this.CreditLimit != null &&
                    this.CreditLimit.Equals(input.CreditLimit))
                ) && 
                (
                    this.ActiveEqualPaymentPlanCount == input.ActiveEqualPaymentPlanCount ||
                    (this.ActiveEqualPaymentPlanCount != null &&
                    this.ActiveEqualPaymentPlanCount.Equals(input.ActiveEqualPaymentPlanCount))
                ) && 
                (
                    this.BeginningBalanceAmount == input.BeginningBalanceAmount ||
                    (this.BeginningBalanceAmount != null &&
                    this.BeginningBalanceAmount.Equals(input.BeginningBalanceAmount))
                ) && 
                (
                    this.TotalDebitAmount == input.TotalDebitAmount ||
                    (this.TotalDebitAmount != null &&
                    this.TotalDebitAmount.Equals(input.TotalDebitAmount))
                ) && 
                (
                    this.TotalCreditAmount == input.TotalCreditAmount ||
                    (this.TotalCreditAmount != null &&
                    this.TotalCreditAmount.Equals(input.TotalCreditAmount))
                ) && 
                (
                    this.NetInterestAmount == input.NetInterestAmount ||
                    (this.NetInterestAmount != null &&
                    this.NetInterestAmount.Equals(input.NetInterestAmount))
                ) && 
                (
                    this.PaymentDueDate == input.PaymentDueDate ||
                    (this.PaymentDueDate != null &&
                    this.PaymentDueDate.Equals(input.PaymentDueDate))
                ) && 
                (
                    this.PastDueAmount == input.PastDueAmount ||
                    (this.PastDueAmount != null &&
                    this.PastDueAmount.Equals(input.PastDueAmount))
                ) && 
                (
                    this.CashAdvanceLimit == input.CashAdvanceLimit ||
                    (this.CashAdvanceLimit != null &&
                    this.CashAdvanceLimit.Equals(input.CashAdvanceLimit))
                ) && 
                (
                    this.CycleToDateFeeAmount == input.CycleToDateFeeAmount ||
                    (this.CycleToDateFeeAmount != null &&
                    this.CycleToDateFeeAmount.Equals(input.CycleToDateFeeAmount))
                ) && 
                (
                    this.InterestPaidAmount == input.InterestPaidAmount ||
                    (this.InterestPaidAmount != null &&
                    this.InterestPaidAmount.Equals(input.InterestPaidAmount))
                ) && 
                (
                    this.BillingCurrencyCode == input.BillingCurrencyCode ||
                    (this.BillingCurrencyCode != null &&
                    this.BillingCurrencyCode.Equals(input.BillingCurrencyCode))
                ) && 
                (
                    this.CashAdvanceAvailableAmount == input.CashAdvanceAvailableAmount ||
                    (this.CashAdvanceAvailableAmount != null &&
                    this.CashAdvanceAvailableAmount.Equals(input.CashAdvanceAvailableAmount))
                ) && 
                (
                    this.RetailCycleInterestRate == input.RetailCycleInterestRate ||
                    (this.RetailCycleInterestRate != null &&
                    this.RetailCycleInterestRate.Equals(input.RetailCycleInterestRate))
                ) && 
                (
                    this.CashCycleInterestRate == input.CashCycleInterestRate ||
                    (this.CashCycleInterestRate != null &&
                    this.CashCycleInterestRate.Equals(input.CashCycleInterestRate))
                ) && 
                (
                    this.PrivateLabelCreditCards == input.PrivateLabelCreditCards ||
                    (this.PrivateLabelCreditCards != null &&
                    this.PrivateLabelCreditCards.Equals(input.PrivateLabelCreditCards))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OutstandingBalance != null)
                    hashCode = hashCode * 59 + this.OutstandingBalance.GetHashCode();
                if (this.CreditLimit != null)
                    hashCode = hashCode * 59 + this.CreditLimit.GetHashCode();
                if (this.ActiveEqualPaymentPlanCount != null)
                    hashCode = hashCode * 59 + this.ActiveEqualPaymentPlanCount.GetHashCode();
                if (this.BeginningBalanceAmount != null)
                    hashCode = hashCode * 59 + this.BeginningBalanceAmount.GetHashCode();
                if (this.TotalDebitAmount != null)
                    hashCode = hashCode * 59 + this.TotalDebitAmount.GetHashCode();
                if (this.TotalCreditAmount != null)
                    hashCode = hashCode * 59 + this.TotalCreditAmount.GetHashCode();
                if (this.NetInterestAmount != null)
                    hashCode = hashCode * 59 + this.NetInterestAmount.GetHashCode();
                if (this.PaymentDueDate != null)
                    hashCode = hashCode * 59 + this.PaymentDueDate.GetHashCode();
                if (this.PastDueAmount != null)
                    hashCode = hashCode * 59 + this.PastDueAmount.GetHashCode();
                if (this.CashAdvanceLimit != null)
                    hashCode = hashCode * 59 + this.CashAdvanceLimit.GetHashCode();
                if (this.CycleToDateFeeAmount != null)
                    hashCode = hashCode * 59 + this.CycleToDateFeeAmount.GetHashCode();
                if (this.InterestPaidAmount != null)
                    hashCode = hashCode * 59 + this.InterestPaidAmount.GetHashCode();
                if (this.BillingCurrencyCode != null)
                    hashCode = hashCode * 59 + this.BillingCurrencyCode.GetHashCode();
                if (this.CashAdvanceAvailableAmount != null)
                    hashCode = hashCode * 59 + this.CashAdvanceAvailableAmount.GetHashCode();
                if (this.RetailCycleInterestRate != null)
                    hashCode = hashCode * 59 + this.RetailCycleInterestRate.GetHashCode();
                if (this.CashCycleInterestRate != null)
                    hashCode = hashCode * 59 + this.CashCycleInterestRate.GetHashCode();
                if (this.PrivateLabelCreditCards != null)
                    hashCode = hashCode * 59 + this.PrivateLabelCreditCards.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
