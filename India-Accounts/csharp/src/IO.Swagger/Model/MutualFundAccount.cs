/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MutualFundAccount
    /// </summary>
    [DataContract]
        public partial class MutualFundAccount :  IEquatable<MutualFundAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MutualFundAccount" /> class.
        /// </summary>
        /// <param name="productName">The name of the product.</param>
        /// <param name="productCode">A unique code that identifies the product.</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer (required).</param>
        /// <param name="currencyCode">The currency code of the account in ISO 4217 format.</param>
        /// <param name="totalNetAssetValueAmount">Total of net asset value of mutual funds.</param>
        /// <param name="totalTransactionAmount">Total transaction amount in local currency.</param>
        /// <param name="totalUnrealizedGains">Total unrealized gains amount, profitable position that has yet to be cashed in.</param>
        /// <param name="relationship">relationship.</param>
        /// <param name="mutualFund">mutualFund.</param>
        public MutualFundAccount(string productName = default(string), string productCode = default(string), string displayAccountNumber = default(string), string currencyCode = default(string), double? totalNetAssetValueAmount = default(double?), double? totalTransactionAmount = default(double?), double? totalUnrealizedGains = default(double?), Relationship relationship = default(Relationship), List<MutualFund> mutualFund = default(List<MutualFund>))
        {
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for MutualFundAccount and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
            this.ProductName = productName;
            this.ProductCode = productCode;
            this.CurrencyCode = currencyCode;
            this.TotalNetAssetValueAmount = totalNetAssetValueAmount;
            this.TotalTransactionAmount = totalTransactionAmount;
            this.TotalUnrealizedGains = totalUnrealizedGains;
            this.Relationship = relationship;
            this.MutualFund = mutualFund;
        }
        
        /// <summary>
        /// The name of the product
        /// </summary>
        /// <value>The name of the product</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// A unique code that identifies the product
        /// </summary>
        /// <value>A unique code that identifies the product</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// The currency code of the account in ISO 4217 format
        /// </summary>
        /// <value>The currency code of the account in ISO 4217 format</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Total of net asset value of mutual funds
        /// </summary>
        /// <value>Total of net asset value of mutual funds</value>
        [DataMember(Name="totalNetAssetValueAmount", EmitDefaultValue=false)]
        public double? TotalNetAssetValueAmount { get; set; }

        /// <summary>
        /// Total transaction amount in local currency
        /// </summary>
        /// <value>Total transaction amount in local currency</value>
        [DataMember(Name="totalTransactionAmount", EmitDefaultValue=false)]
        public double? TotalTransactionAmount { get; set; }

        /// <summary>
        /// Total unrealized gains amount, profitable position that has yet to be cashed in
        /// </summary>
        /// <value>Total unrealized gains amount, profitable position that has yet to be cashed in</value>
        [DataMember(Name="totalUnrealizedGains", EmitDefaultValue=false)]
        public double? TotalUnrealizedGains { get; set; }

        /// <summary>
        /// Gets or Sets Relationship
        /// </summary>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public Relationship Relationship { get; set; }

        /// <summary>
        /// Gets or Sets MutualFund
        /// </summary>
        [DataMember(Name="mutualFund", EmitDefaultValue=false)]
        public List<MutualFund> MutualFund { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MutualFundAccount {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  TotalNetAssetValueAmount: ").Append(TotalNetAssetValueAmount).Append("\n");
            sb.Append("  TotalTransactionAmount: ").Append(TotalTransactionAmount).Append("\n");
            sb.Append("  TotalUnrealizedGains: ").Append(TotalUnrealizedGains).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  MutualFund: ").Append(MutualFund).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MutualFundAccount);
        }

        /// <summary>
        /// Returns true if MutualFundAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of MutualFundAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MutualFundAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.TotalNetAssetValueAmount == input.TotalNetAssetValueAmount ||
                    (this.TotalNetAssetValueAmount != null &&
                    this.TotalNetAssetValueAmount.Equals(input.TotalNetAssetValueAmount))
                ) && 
                (
                    this.TotalTransactionAmount == input.TotalTransactionAmount ||
                    (this.TotalTransactionAmount != null &&
                    this.TotalTransactionAmount.Equals(input.TotalTransactionAmount))
                ) && 
                (
                    this.TotalUnrealizedGains == input.TotalUnrealizedGains ||
                    (this.TotalUnrealizedGains != null &&
                    this.TotalUnrealizedGains.Equals(input.TotalUnrealizedGains))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.MutualFund == input.MutualFund ||
                    this.MutualFund != null &&
                    input.MutualFund != null &&
                    this.MutualFund.SequenceEqual(input.MutualFund)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.TotalNetAssetValueAmount != null)
                    hashCode = hashCode * 59 + this.TotalNetAssetValueAmount.GetHashCode();
                if (this.TotalTransactionAmount != null)
                    hashCode = hashCode * 59 + this.TotalTransactionAmount.GetHashCode();
                if (this.TotalUnrealizedGains != null)
                    hashCode = hashCode * 59 + this.TotalUnrealizedGains.GetHashCode();
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                if (this.MutualFund != null)
                    hashCode = hashCode * 59 + this.MutualFund.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
