/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OriginalCreditorDetails
    /// </summary>
    [DataContract]
        public partial class OriginalCreditorDetails :  IEquatable<OriginalCreditorDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginalCreditorDetails" /> class.
        /// </summary>
        /// <param name="originalCreditorName">Original Creditor Name.</param>
        /// <param name="originalCreditorProxyIdType">Proxy ID Type used for the payee account identification.</param>
        /// <param name="originalCreditorProxyIdValue">Proxy ID value used for the payee account identification.</param>
        public OriginalCreditorDetails(string originalCreditorName = default(string), string originalCreditorProxyIdType = default(string), string originalCreditorProxyIdValue = default(string))
        {
            this.OriginalCreditorName = originalCreditorName;
            this.OriginalCreditorProxyIdType = originalCreditorProxyIdType;
            this.OriginalCreditorProxyIdValue = originalCreditorProxyIdValue;
        }
        
        /// <summary>
        /// Original Creditor Name
        /// </summary>
        /// <value>Original Creditor Name</value>
        [DataMember(Name="originalCreditorName", EmitDefaultValue=false)]
        public string OriginalCreditorName { get; set; }

        /// <summary>
        /// Proxy ID Type used for the payee account identification
        /// </summary>
        /// <value>Proxy ID Type used for the payee account identification</value>
        [DataMember(Name="originalCreditorProxyIdType", EmitDefaultValue=false)]
        public string OriginalCreditorProxyIdType { get; set; }

        /// <summary>
        /// Proxy ID value used for the payee account identification
        /// </summary>
        /// <value>Proxy ID value used for the payee account identification</value>
        [DataMember(Name="originalCreditorProxyIdValue", EmitDefaultValue=false)]
        public string OriginalCreditorProxyIdValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OriginalCreditorDetails {\n");
            sb.Append("  OriginalCreditorName: ").Append(OriginalCreditorName).Append("\n");
            sb.Append("  OriginalCreditorProxyIdType: ").Append(OriginalCreditorProxyIdType).Append("\n");
            sb.Append("  OriginalCreditorProxyIdValue: ").Append(OriginalCreditorProxyIdValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OriginalCreditorDetails);
        }

        /// <summary>
        /// Returns true if OriginalCreditorDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of OriginalCreditorDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OriginalCreditorDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OriginalCreditorName == input.OriginalCreditorName ||
                    (this.OriginalCreditorName != null &&
                    this.OriginalCreditorName.Equals(input.OriginalCreditorName))
                ) && 
                (
                    this.OriginalCreditorProxyIdType == input.OriginalCreditorProxyIdType ||
                    (this.OriginalCreditorProxyIdType != null &&
                    this.OriginalCreditorProxyIdType.Equals(input.OriginalCreditorProxyIdType))
                ) && 
                (
                    this.OriginalCreditorProxyIdValue == input.OriginalCreditorProxyIdValue ||
                    (this.OriginalCreditorProxyIdValue != null &&
                    this.OriginalCreditorProxyIdValue.Equals(input.OriginalCreditorProxyIdValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginalCreditorName != null)
                    hashCode = hashCode * 59 + this.OriginalCreditorName.GetHashCode();
                if (this.OriginalCreditorProxyIdType != null)
                    hashCode = hashCode * 59 + this.OriginalCreditorProxyIdType.GetHashCode();
                if (this.OriginalCreditorProxyIdValue != null)
                    hashCode = hashCode * 59 + this.OriginalCreditorProxyIdValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
