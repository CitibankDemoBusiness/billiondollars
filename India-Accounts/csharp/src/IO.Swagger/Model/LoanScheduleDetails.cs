/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoanScheduleDetails
    /// </summary>
    [DataContract]
        public partial class LoanScheduleDetails :  IEquatable<LoanScheduleDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanScheduleDetails" /> class.
        /// </summary>
        /// <param name="paymentCycleNumber">Payment no.</param>
        /// <param name="appliedFinancedAmount">Financed amount applied.</param>
        /// <param name="appliedInterestAmount">Interest amount applied.</param>
        /// <param name="appliedCreditUsageFeeAmount">Credit usage fee amount applied.</param>
        public LoanScheduleDetails(string paymentCycleNumber = default(string), double? appliedFinancedAmount = default(double?), double? appliedInterestAmount = default(double?), double? appliedCreditUsageFeeAmount = default(double?))
        {
            this.PaymentCycleNumber = paymentCycleNumber;
            this.AppliedFinancedAmount = appliedFinancedAmount;
            this.AppliedInterestAmount = appliedInterestAmount;
            this.AppliedCreditUsageFeeAmount = appliedCreditUsageFeeAmount;
        }
        
        /// <summary>
        /// Payment no
        /// </summary>
        /// <value>Payment no</value>
        [DataMember(Name="paymentCycleNumber", EmitDefaultValue=false)]
        public string PaymentCycleNumber { get; set; }

        /// <summary>
        /// Financed amount applied
        /// </summary>
        /// <value>Financed amount applied</value>
        [DataMember(Name="appliedFinancedAmount", EmitDefaultValue=false)]
        public double? AppliedFinancedAmount { get; set; }

        /// <summary>
        /// Interest amount applied
        /// </summary>
        /// <value>Interest amount applied</value>
        [DataMember(Name="appliedInterestAmount", EmitDefaultValue=false)]
        public double? AppliedInterestAmount { get; set; }

        /// <summary>
        /// Credit usage fee amount applied
        /// </summary>
        /// <value>Credit usage fee amount applied</value>
        [DataMember(Name="appliedCreditUsageFeeAmount", EmitDefaultValue=false)]
        public double? AppliedCreditUsageFeeAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanScheduleDetails {\n");
            sb.Append("  PaymentCycleNumber: ").Append(PaymentCycleNumber).Append("\n");
            sb.Append("  AppliedFinancedAmount: ").Append(AppliedFinancedAmount).Append("\n");
            sb.Append("  AppliedInterestAmount: ").Append(AppliedInterestAmount).Append("\n");
            sb.Append("  AppliedCreditUsageFeeAmount: ").Append(AppliedCreditUsageFeeAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanScheduleDetails);
        }

        /// <summary>
        /// Returns true if LoanScheduleDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanScheduleDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanScheduleDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentCycleNumber == input.PaymentCycleNumber ||
                    (this.PaymentCycleNumber != null &&
                    this.PaymentCycleNumber.Equals(input.PaymentCycleNumber))
                ) && 
                (
                    this.AppliedFinancedAmount == input.AppliedFinancedAmount ||
                    (this.AppliedFinancedAmount != null &&
                    this.AppliedFinancedAmount.Equals(input.AppliedFinancedAmount))
                ) && 
                (
                    this.AppliedInterestAmount == input.AppliedInterestAmount ||
                    (this.AppliedInterestAmount != null &&
                    this.AppliedInterestAmount.Equals(input.AppliedInterestAmount))
                ) && 
                (
                    this.AppliedCreditUsageFeeAmount == input.AppliedCreditUsageFeeAmount ||
                    (this.AppliedCreditUsageFeeAmount != null &&
                    this.AppliedCreditUsageFeeAmount.Equals(input.AppliedCreditUsageFeeAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentCycleNumber != null)
                    hashCode = hashCode * 59 + this.PaymentCycleNumber.GetHashCode();
                if (this.AppliedFinancedAmount != null)
                    hashCode = hashCode * 59 + this.AppliedFinancedAmount.GetHashCode();
                if (this.AppliedInterestAmount != null)
                    hashCode = hashCode * 59 + this.AppliedInterestAmount.GetHashCode();
                if (this.AppliedCreditUsageFeeAmount != null)
                    hashCode = hashCode * 59 + this.AppliedCreditUsageFeeAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
