/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PendingTransaction
    /// </summary>
    [DataContract]
        public partial class PendingTransaction :  IEquatable<PendingTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PendingTransaction" /> class.
        /// </summary>
        /// <param name="transactionDate">Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting, (required).</param>
        /// <param name="transactionDescription">Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country. (required).</param>
        /// <param name="transactionAuthorizationCode">Transaction authorization code is a unique to a sales credit card transaction to indicate that the sale has been authorized. This is applicable only for pending transactions..</param>
        /// <param name="transactionReferenceId">Reference Id to uniquely identify the transaction..</param>
        /// <param name="merchantName">Transaction merchant name..</param>
        /// <param name="transactionAmount">Transaction amount in local currency. (required).</param>
        public PendingTransaction(DateTime? transactionDate = default(DateTime?), string transactionDescription = default(string), string transactionAuthorizationCode = default(string), string transactionReferenceId = default(string), string merchantName = default(string), double? transactionAmount = default(double?))
        {
            // to ensure "transactionDate" is required (not null)
            if (transactionDate == null)
            {
                throw new InvalidDataException("transactionDate is a required property for PendingTransaction and cannot be null");
            }
            else
            {
                this.TransactionDate = transactionDate;
            }
            // to ensure "transactionDescription" is required (not null)
            if (transactionDescription == null)
            {
                throw new InvalidDataException("transactionDescription is a required property for PendingTransaction and cannot be null");
            }
            else
            {
                this.TransactionDescription = transactionDescription;
            }
            // to ensure "transactionAmount" is required (not null)
            if (transactionAmount == null)
            {
                throw new InvalidDataException("transactionAmount is a required property for PendingTransaction and cannot be null");
            }
            else
            {
                this.TransactionAmount = transactionAmount;
            }
            this.TransactionAuthorizationCode = transactionAuthorizationCode;
            this.TransactionReferenceId = transactionReferenceId;
            this.MerchantName = merchantName;
        }
        
        /// <summary>
        /// Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,
        /// </summary>
        /// <value>Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
        /// </summary>
        /// <value>Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.</value>
        [DataMember(Name="transactionDescription", EmitDefaultValue=false)]
        public string TransactionDescription { get; set; }

        /// <summary>
        /// Transaction authorization code is a unique to a sales credit card transaction to indicate that the sale has been authorized. This is applicable only for pending transactions.
        /// </summary>
        /// <value>Transaction authorization code is a unique to a sales credit card transaction to indicate that the sale has been authorized. This is applicable only for pending transactions.</value>
        [DataMember(Name="transactionAuthorizationCode", EmitDefaultValue=false)]
        public string TransactionAuthorizationCode { get; set; }

        /// <summary>
        /// Reference Id to uniquely identify the transaction.
        /// </summary>
        /// <value>Reference Id to uniquely identify the transaction.</value>
        [DataMember(Name="transactionReferenceId", EmitDefaultValue=false)]
        public string TransactionReferenceId { get; set; }

        /// <summary>
        /// Transaction merchant name.
        /// </summary>
        /// <value>Transaction merchant name.</value>
        [DataMember(Name="merchantName", EmitDefaultValue=false)]
        public string MerchantName { get; set; }

        /// <summary>
        /// Transaction amount in local currency.
        /// </summary>
        /// <value>Transaction amount in local currency.</value>
        [DataMember(Name="transactionAmount", EmitDefaultValue=false)]
        public double? TransactionAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PendingTransaction {\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("  TransactionAuthorizationCode: ").Append(TransactionAuthorizationCode).Append("\n");
            sb.Append("  TransactionReferenceId: ").Append(TransactionReferenceId).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PendingTransaction);
        }

        /// <summary>
        /// Returns true if PendingTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of PendingTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PendingTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.TransactionDescription == input.TransactionDescription ||
                    (this.TransactionDescription != null &&
                    this.TransactionDescription.Equals(input.TransactionDescription))
                ) && 
                (
                    this.TransactionAuthorizationCode == input.TransactionAuthorizationCode ||
                    (this.TransactionAuthorizationCode != null &&
                    this.TransactionAuthorizationCode.Equals(input.TransactionAuthorizationCode))
                ) && 
                (
                    this.TransactionReferenceId == input.TransactionReferenceId ||
                    (this.TransactionReferenceId != null &&
                    this.TransactionReferenceId.Equals(input.TransactionReferenceId))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.TransactionDescription != null)
                    hashCode = hashCode * 59 + this.TransactionDescription.GetHashCode();
                if (this.TransactionAuthorizationCode != null)
                    hashCode = hashCode * 59 + this.TransactionAuthorizationCode.GetHashCode();
                if (this.TransactionReferenceId != null)
                    hashCode = hashCode * 59 + this.TransactionReferenceId.GetHashCode();
                if (this.MerchantName != null)
                    hashCode = hashCode * 59 + this.MerchantName.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
