/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GroupBalance
    /// </summary>
    [DataContract]
        public partial class GroupBalance :  IEquatable<GroupBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupBalance" /> class.
        /// </summary>
        /// <param name="localCurrencyCode">The currency code for local country in ISO 4217 format.</param>
        /// <param name="localCurrencyBalanceAmount">Summarized balances in local currency.</param>
        /// <param name="foreignCurrencyCode">The foreign currency code for foreign country in ISO 4217 format.</param>
        /// <param name="foreignCurrencyBalanceAmount">Summarized balances in foreign currency.</param>
        public GroupBalance(string localCurrencyCode = default(string), double? localCurrencyBalanceAmount = default(double?), string foreignCurrencyCode = default(string), double? foreignCurrencyBalanceAmount = default(double?))
        {
            this.LocalCurrencyCode = localCurrencyCode;
            this.LocalCurrencyBalanceAmount = localCurrencyBalanceAmount;
            this.ForeignCurrencyCode = foreignCurrencyCode;
            this.ForeignCurrencyBalanceAmount = foreignCurrencyBalanceAmount;
        }
        
        /// <summary>
        /// The currency code for local country in ISO 4217 format
        /// </summary>
        /// <value>The currency code for local country in ISO 4217 format</value>
        [DataMember(Name="localCurrencyCode", EmitDefaultValue=false)]
        public string LocalCurrencyCode { get; set; }

        /// <summary>
        /// Summarized balances in local currency
        /// </summary>
        /// <value>Summarized balances in local currency</value>
        [DataMember(Name="localCurrencyBalanceAmount", EmitDefaultValue=false)]
        public double? LocalCurrencyBalanceAmount { get; set; }

        /// <summary>
        /// The foreign currency code for foreign country in ISO 4217 format
        /// </summary>
        /// <value>The foreign currency code for foreign country in ISO 4217 format</value>
        [DataMember(Name="foreignCurrencyCode", EmitDefaultValue=false)]
        public string ForeignCurrencyCode { get; set; }

        /// <summary>
        /// Summarized balances in foreign currency
        /// </summary>
        /// <value>Summarized balances in foreign currency</value>
        [DataMember(Name="foreignCurrencyBalanceAmount", EmitDefaultValue=false)]
        public double? ForeignCurrencyBalanceAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupBalance {\n");
            sb.Append("  LocalCurrencyCode: ").Append(LocalCurrencyCode).Append("\n");
            sb.Append("  LocalCurrencyBalanceAmount: ").Append(LocalCurrencyBalanceAmount).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  ForeignCurrencyBalanceAmount: ").Append(ForeignCurrencyBalanceAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupBalance);
        }

        /// <summary>
        /// Returns true if GroupBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupBalance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocalCurrencyCode == input.LocalCurrencyCode ||
                    (this.LocalCurrencyCode != null &&
                    this.LocalCurrencyCode.Equals(input.LocalCurrencyCode))
                ) && 
                (
                    this.LocalCurrencyBalanceAmount == input.LocalCurrencyBalanceAmount ||
                    (this.LocalCurrencyBalanceAmount != null &&
                    this.LocalCurrencyBalanceAmount.Equals(input.LocalCurrencyBalanceAmount))
                ) && 
                (
                    this.ForeignCurrencyCode == input.ForeignCurrencyCode ||
                    (this.ForeignCurrencyCode != null &&
                    this.ForeignCurrencyCode.Equals(input.ForeignCurrencyCode))
                ) && 
                (
                    this.ForeignCurrencyBalanceAmount == input.ForeignCurrencyBalanceAmount ||
                    (this.ForeignCurrencyBalanceAmount != null &&
                    this.ForeignCurrencyBalanceAmount.Equals(input.ForeignCurrencyBalanceAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocalCurrencyCode != null)
                    hashCode = hashCode * 59 + this.LocalCurrencyCode.GetHashCode();
                if (this.LocalCurrencyBalanceAmount != null)
                    hashCode = hashCode * 59 + this.LocalCurrencyBalanceAmount.GetHashCode();
                if (this.ForeignCurrencyCode != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyCode.GetHashCode();
                if (this.ForeignCurrencyBalanceAmount != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyBalanceAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
