/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InvestmentTransaction
    /// </summary>
    [DataContract]
        public partial class InvestmentTransaction :  IEquatable<InvestmentTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestmentTransaction" /> class.
        /// </summary>
        /// <param name="orderDate">Order date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting.</param>
        /// <param name="orderReferenceId">Reference Id to uniquely identify the investment transaction.</param>
        /// <param name="orderType">This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderType} resource to get possible value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="code">Order code to uniquely identify the transaction,.</param>
        /// <param name="name">Unique name  for fund/stock.</param>
        /// <param name="currencyCode">The currency code of the transaction in ISO 4217 format,.</param>
        /// <param name="transactionAmount">Transaction amount in local currency..</param>
        /// <param name="price">Order price of  trade.</param>
        /// <param name="orderStatus">This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderStatus} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="grossAmount">The total amount of the transaction.</param>
        /// <param name="orderQuantity">Total number of units ordered.</param>
        /// <param name="orderMedium">The medium used by customer to place order.This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderMedium} resource to get possible values of This field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="filledQuantity">Number of units received.</param>
        /// <param name="balanceQuantity">Number of units not received.</param>
        /// <param name="stockMarketCode">Trading market code for securities.</param>
        public InvestmentTransaction(DateTime? orderDate = default(DateTime?), string orderReferenceId = default(string), string orderType = default(string), string code = default(string), string name = default(string), string currencyCode = default(string), double? transactionAmount = default(double?), double? price = default(double?), string orderStatus = default(string), double? grossAmount = default(double?), double? orderQuantity = default(double?), string orderMedium = default(string), double? filledQuantity = default(double?), double? balanceQuantity = default(double?), string stockMarketCode = default(string))
        {
            this.OrderDate = orderDate;
            this.OrderReferenceId = orderReferenceId;
            this.OrderType = orderType;
            this.Code = code;
            this.Name = name;
            this.CurrencyCode = currencyCode;
            this.TransactionAmount = transactionAmount;
            this.Price = price;
            this.OrderStatus = orderStatus;
            this.GrossAmount = grossAmount;
            this.OrderQuantity = orderQuantity;
            this.OrderMedium = orderMedium;
            this.FilledQuantity = filledQuantity;
            this.BalanceQuantity = balanceQuantity;
            this.StockMarketCode = stockMarketCode;
        }
        
        /// <summary>
        /// Order date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting
        /// </summary>
        /// <value>Order date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting</value>
        [DataMember(Name="orderDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Reference Id to uniquely identify the investment transaction
        /// </summary>
        /// <value>Reference Id to uniquely identify the investment transaction</value>
        [DataMember(Name="orderReferenceId", EmitDefaultValue=false)]
        public string OrderReferenceId { get; set; }

        /// <summary>
        /// This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderType} resource to get possible value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderType} resource to get possible value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="orderType", EmitDefaultValue=false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Order code to uniquely identify the transaction,
        /// </summary>
        /// <value>Order code to uniquely identify the transaction,</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Unique name  for fund/stock
        /// </summary>
        /// <value>Unique name  for fund/stock</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The currency code of the transaction in ISO 4217 format,
        /// </summary>
        /// <value>The currency code of the transaction in ISO 4217 format,</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Transaction amount in local currency.
        /// </summary>
        /// <value>Transaction amount in local currency.</value>
        [DataMember(Name="transactionAmount", EmitDefaultValue=false)]
        public double? TransactionAmount { get; set; }

        /// <summary>
        /// Order price of  trade
        /// </summary>
        /// <value>Order price of  trade</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderStatus} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderStatus} resource to get possible value of This field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="orderStatus", EmitDefaultValue=false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// The total amount of the transaction
        /// </summary>
        /// <value>The total amount of the transaction</value>
        [DataMember(Name="grossAmount", EmitDefaultValue=false)]
        public double? GrossAmount { get; set; }

        /// <summary>
        /// Total number of units ordered
        /// </summary>
        /// <value>Total number of units ordered</value>
        [DataMember(Name="orderQuantity", EmitDefaultValue=false)]
        public double? OrderQuantity { get; set; }

        /// <summary>
        /// The medium used by customer to place order.This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderMedium} resource to get possible values of This field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>The medium used by customer to place order.This is a reference data field. Please use /v1/apac/utilities/referenceData/{orderMedium} resource to get possible values of This field with descriptions. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="orderMedium", EmitDefaultValue=false)]
        public string OrderMedium { get; set; }

        /// <summary>
        /// Number of units received
        /// </summary>
        /// <value>Number of units received</value>
        [DataMember(Name="filledQuantity", EmitDefaultValue=false)]
        public double? FilledQuantity { get; set; }

        /// <summary>
        /// Number of units not received
        /// </summary>
        /// <value>Number of units not received</value>
        [DataMember(Name="balanceQuantity", EmitDefaultValue=false)]
        public double? BalanceQuantity { get; set; }

        /// <summary>
        /// Trading market code for securities
        /// </summary>
        /// <value>Trading market code for securities</value>
        [DataMember(Name="stockMarketCode", EmitDefaultValue=false)]
        public string StockMarketCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvestmentTransaction {\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OrderReferenceId: ").Append(OrderReferenceId).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  GrossAmount: ").Append(GrossAmount).Append("\n");
            sb.Append("  OrderQuantity: ").Append(OrderQuantity).Append("\n");
            sb.Append("  OrderMedium: ").Append(OrderMedium).Append("\n");
            sb.Append("  FilledQuantity: ").Append(FilledQuantity).Append("\n");
            sb.Append("  BalanceQuantity: ").Append(BalanceQuantity).Append("\n");
            sb.Append("  StockMarketCode: ").Append(StockMarketCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvestmentTransaction);
        }

        /// <summary>
        /// Returns true if InvestmentTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of InvestmentTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvestmentTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.OrderReferenceId == input.OrderReferenceId ||
                    (this.OrderReferenceId != null &&
                    this.OrderReferenceId.Equals(input.OrderReferenceId))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.GrossAmount == input.GrossAmount ||
                    (this.GrossAmount != null &&
                    this.GrossAmount.Equals(input.GrossAmount))
                ) && 
                (
                    this.OrderQuantity == input.OrderQuantity ||
                    (this.OrderQuantity != null &&
                    this.OrderQuantity.Equals(input.OrderQuantity))
                ) && 
                (
                    this.OrderMedium == input.OrderMedium ||
                    (this.OrderMedium != null &&
                    this.OrderMedium.Equals(input.OrderMedium))
                ) && 
                (
                    this.FilledQuantity == input.FilledQuantity ||
                    (this.FilledQuantity != null &&
                    this.FilledQuantity.Equals(input.FilledQuantity))
                ) && 
                (
                    this.BalanceQuantity == input.BalanceQuantity ||
                    (this.BalanceQuantity != null &&
                    this.BalanceQuantity.Equals(input.BalanceQuantity))
                ) && 
                (
                    this.StockMarketCode == input.StockMarketCode ||
                    (this.StockMarketCode != null &&
                    this.StockMarketCode.Equals(input.StockMarketCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.OrderReferenceId != null)
                    hashCode = hashCode * 59 + this.OrderReferenceId.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.GrossAmount != null)
                    hashCode = hashCode * 59 + this.GrossAmount.GetHashCode();
                if (this.OrderQuantity != null)
                    hashCode = hashCode * 59 + this.OrderQuantity.GetHashCode();
                if (this.OrderMedium != null)
                    hashCode = hashCode * 59 + this.OrderMedium.GetHashCode();
                if (this.FilledQuantity != null)
                    hashCode = hashCode * 59 + this.FilledQuantity.GetHashCode();
                if (this.BalanceQuantity != null)
                    hashCode = hashCode * 59 + this.BalanceQuantity.GetHashCode();
                if (this.StockMarketCode != null)
                    hashCode = hashCode * 59 + this.StockMarketCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
