/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TransactionDetailsResponse
    /// </summary>
    [DataContract]
        public partial class TransactionDetailsResponse :  IEquatable<TransactionDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionDetailsResponse" /> class.
        /// </summary>
        /// <param name="transactions">Transactions list.</param>
        /// <param name="investmentTransaction">Investment Transactions list.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data..</param>
        public TransactionDetailsResponse(List<Transaction> transactions = default(List<Transaction>), List<InvestmentTransaction> investmentTransaction = default(List<InvestmentTransaction>), string nextStartIndex = default(string))
        {
            this.Transactions = transactions;
            this.InvestmentTransaction = investmentTransaction;
            this.NextStartIndex = nextStartIndex;
        }
        
        /// <summary>
        /// Transactions list
        /// </summary>
        /// <value>Transactions list</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<Transaction> Transactions { get; set; }

        /// <summary>
        /// Investment Transactions list
        /// </summary>
        /// <value>Investment Transactions list</value>
        [DataMember(Name="investmentTransaction", EmitDefaultValue=false)]
        public List<InvestmentTransaction> InvestmentTransaction { get; set; }

        /// <summary>
        /// In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.
        /// </summary>
        /// <value>In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data.</value>
        [DataMember(Name="nextStartIndex", EmitDefaultValue=false)]
        public string NextStartIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionDetailsResponse {\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  InvestmentTransaction: ").Append(InvestmentTransaction).Append("\n");
            sb.Append("  NextStartIndex: ").Append(NextStartIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionDetailsResponse);
        }

        /// <summary>
        /// Returns true if TransactionDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionDetailsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.InvestmentTransaction == input.InvestmentTransaction ||
                    this.InvestmentTransaction != null &&
                    input.InvestmentTransaction != null &&
                    this.InvestmentTransaction.SequenceEqual(input.InvestmentTransaction)
                ) && 
                (
                    this.NextStartIndex == input.NextStartIndex ||
                    (this.NextStartIndex != null &&
                    this.NextStartIndex.Equals(input.NextStartIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.InvestmentTransaction != null)
                    hashCode = hashCode * 59 + this.InvestmentTransaction.GetHashCode();
                if (this.NextStartIndex != null)
                    hashCode = hashCode * 59 + this.NextStartIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
