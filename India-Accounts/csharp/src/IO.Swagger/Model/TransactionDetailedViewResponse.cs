/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TransactionDetailedViewResponse
    /// </summary>
    [DataContract]
        public partial class TransactionDetailedViewResponse :  IEquatable<TransactionDetailedViewResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionDetailedViewResponse" /> class.
        /// </summary>
        /// <param name="displaySourceAccountNumber">A masked account number that can be displayed to the customer.</param>
        /// <param name="paymentType">The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (required).</param>
        /// <param name="transactionDescription">Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country..</param>
        /// <param name="transactionAmount">Transaction amount in account currency. (required).</param>
        /// <param name="transactionCurrencyCode">The currency code for the transaction amount in ISO 4217 format. (required).</param>
        /// <param name="transactionDate">Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting, (required).</param>
        /// <param name="foreignTransactionAmount">The transaction amount in the foreign account current.</param>
        /// <param name="foreignCurrencyCode">The currency code for the foreign transaction amount in ISO 4217 format..</param>
        /// <param name="foreignExchangeRate">The exchange rate at the time the foreign transaction was done.</param>
        /// <param name="transactionStatus">The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions..</param>
        /// <param name="transactionPostingDate">Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601..</param>
        /// <param name="customerName">customerName.</param>
        /// <param name="customerAddress">customerAddress.</param>
        /// <param name="beneficiaryBankDetails">beneficiaryBankDetails.</param>
        /// <param name="customerMerchantReferenceDetails">customerMerchantReferenceDetails.</param>
        /// <param name="remarks">Payment notes. Free text from screen.</param>
        /// <param name="paymentPriorityCode">This code is used to indicate the priority payments.</param>
        /// <param name="merchantCode">The code to identify merchant.</param>
        /// <param name="merchantName">The name of the merchant.</param>
        /// <param name="transactionReversalDescription">Transaction reversal description as provided by the returnee.</param>
        /// <param name="originalTransactionDetails">originalTransactionDetails.</param>
        /// <param name="endToEndIdentification">End to End Identification status.</param>
        /// <param name="creditorDetails">creditorDetails.</param>
        /// <param name="debtorDetails">debtorDetails.</param>
        /// <param name="sourceBankName">Name of the bank..</param>
        /// <param name="sourceBankCode">The bank code of the payer account.</param>
        /// <param name="clearingTimeStamp">Clearing Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS.</param>
        /// <param name="settlementTimeStamp">Settlement Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS.</param>
        /// <param name="centralBankTransactionReferenceId">Transaction ID identifying the transaction across banks.</param>
        /// <param name="originalCreditorDetails">originalCreditorDetails.</param>
        /// <param name="originalCreditAccountDetails">originalCreditAccountDetails.</param>
        /// <param name="originalDebtorName">Original Debtor Name.</param>
        /// <param name="originalDebitAccountDetails">originalDebitAccountDetails.</param>
        /// <param name="transactionDebitFeeAmount">Fees charged for the debit..</param>
        /// <param name="bankMemberId">Bank Member ID.</param>
        /// <param name="beneficiaryLegalName">Legal Name of the Beneficiary.</param>
        /// <param name="beneficiaryAddress">beneficiaryAddress.</param>
        /// <param name="beneficiaryTaxId">Beneficiary Tax ID.</param>
        public TransactionDetailedViewResponse(string displaySourceAccountNumber = default(string), string paymentType = default(string), string transactionDescription = default(string), double? transactionAmount = default(double?), string transactionCurrencyCode = default(string), DateTime? transactionDate = default(DateTime?), decimal? foreignTransactionAmount = default(decimal?), string foreignCurrencyCode = default(string), decimal? foreignExchangeRate = default(decimal?), string transactionStatus = default(string), DateTime? transactionPostingDate = default(DateTime?), CustomerName customerName = default(CustomerName), CustomerAddress customerAddress = default(CustomerAddress), BeneficiaryBankDetails beneficiaryBankDetails = default(BeneficiaryBankDetails), List<CustomerMerchantReferenceDetails> customerMerchantReferenceDetails = default(List<CustomerMerchantReferenceDetails>), string remarks = default(string), string paymentPriorityCode = default(string), string merchantCode = default(string), string merchantName = default(string), string transactionReversalDescription = default(string), OriginalTransactionDetails originalTransactionDetails = default(OriginalTransactionDetails), string endToEndIdentification = default(string), CreditorDetails creditorDetails = default(CreditorDetails), DebtorDetails debtorDetails = default(DebtorDetails), string sourceBankName = default(string), string sourceBankCode = default(string), string clearingTimeStamp = default(string), string settlementTimeStamp = default(string), string centralBankTransactionReferenceId = default(string), OriginalCreditorDetails originalCreditorDetails = default(OriginalCreditorDetails), OriginalCreditAccountDetails originalCreditAccountDetails = default(OriginalCreditAccountDetails), string originalDebtorName = default(string), OriginalDebitAccountDetails originalDebitAccountDetails = default(OriginalDebitAccountDetails), double? transactionDebitFeeAmount = default(double?), string bankMemberId = default(string), string beneficiaryLegalName = default(string), List<BeneficiaryAddress> beneficiaryAddress = default(List<BeneficiaryAddress>), string beneficiaryTaxId = default(string))
        {
            // to ensure "paymentType" is required (not null)
            if (paymentType == null)
            {
                throw new InvalidDataException("paymentType is a required property for TransactionDetailedViewResponse and cannot be null");
            }
            else
            {
                this.PaymentType = paymentType;
            }
            // to ensure "transactionAmount" is required (not null)
            if (transactionAmount == null)
            {
                throw new InvalidDataException("transactionAmount is a required property for TransactionDetailedViewResponse and cannot be null");
            }
            else
            {
                this.TransactionAmount = transactionAmount;
            }
            // to ensure "transactionCurrencyCode" is required (not null)
            if (transactionCurrencyCode == null)
            {
                throw new InvalidDataException("transactionCurrencyCode is a required property for TransactionDetailedViewResponse and cannot be null");
            }
            else
            {
                this.TransactionCurrencyCode = transactionCurrencyCode;
            }
            // to ensure "transactionDate" is required (not null)
            if (transactionDate == null)
            {
                throw new InvalidDataException("transactionDate is a required property for TransactionDetailedViewResponse and cannot be null");
            }
            else
            {
                this.TransactionDate = transactionDate;
            }
            this.DisplaySourceAccountNumber = displaySourceAccountNumber;
            this.TransactionDescription = transactionDescription;
            this.ForeignTransactionAmount = foreignTransactionAmount;
            this.ForeignCurrencyCode = foreignCurrencyCode;
            this.ForeignExchangeRate = foreignExchangeRate;
            this.TransactionStatus = transactionStatus;
            this.TransactionPostingDate = transactionPostingDate;
            this.CustomerName = customerName;
            this.CustomerAddress = customerAddress;
            this.BeneficiaryBankDetails = beneficiaryBankDetails;
            this.CustomerMerchantReferenceDetails = customerMerchantReferenceDetails;
            this.Remarks = remarks;
            this.PaymentPriorityCode = paymentPriorityCode;
            this.MerchantCode = merchantCode;
            this.MerchantName = merchantName;
            this.TransactionReversalDescription = transactionReversalDescription;
            this.OriginalTransactionDetails = originalTransactionDetails;
            this.EndToEndIdentification = endToEndIdentification;
            this.CreditorDetails = creditorDetails;
            this.DebtorDetails = debtorDetails;
            this.SourceBankName = sourceBankName;
            this.SourceBankCode = sourceBankCode;
            this.ClearingTimeStamp = clearingTimeStamp;
            this.SettlementTimeStamp = settlementTimeStamp;
            this.CentralBankTransactionReferenceId = centralBankTransactionReferenceId;
            this.OriginalCreditorDetails = originalCreditorDetails;
            this.OriginalCreditAccountDetails = originalCreditAccountDetails;
            this.OriginalDebtorName = originalDebtorName;
            this.OriginalDebitAccountDetails = originalDebitAccountDetails;
            this.TransactionDebitFeeAmount = transactionDebitFeeAmount;
            this.BankMemberId = bankMemberId;
            this.BeneficiaryLegalName = beneficiaryLegalName;
            this.BeneficiaryAddress = beneficiaryAddress;
            this.BeneficiaryTaxId = beneficiaryTaxId;
        }
        
        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displaySourceAccountNumber", EmitDefaultValue=false)]
        public string DisplaySourceAccountNumber { get; set; }

        /// <summary>
        /// The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.
        /// </summary>
        /// <value>The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description.</value>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.
        /// </summary>
        /// <value>Transaction description from the merchant, POS or bank. If there are foreign currency transactions on checking /saving account(s) then description includes exchange rate, city and country.</value>
        [DataMember(Name="transactionDescription", EmitDefaultValue=false)]
        public string TransactionDescription { get; set; }

        /// <summary>
        /// Transaction amount in account currency.
        /// </summary>
        /// <value>Transaction amount in account currency.</value>
        [DataMember(Name="transactionAmount", EmitDefaultValue=false)]
        public double? TransactionAmount { get; set; }

        /// <summary>
        /// The currency code for the transaction amount in ISO 4217 format.
        /// </summary>
        /// <value>The currency code for the transaction amount in ISO 4217 format.</value>
        [DataMember(Name="transactionCurrencyCode", EmitDefaultValue=false)]
        public string TransactionCurrencyCode { get; set; }

        /// <summary>
        /// Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,
        /// </summary>
        /// <value>Transaction date in YYYY-MM-DD format value conforming to ISO 8601. This needs to be formatted in front-end for country/locale specific display purposes. This is the field used for default sorting,</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// The transaction amount in the foreign account current
        /// </summary>
        /// <value>The transaction amount in the foreign account current</value>
        [DataMember(Name="foreignTransactionAmount", EmitDefaultValue=false)]
        public decimal? ForeignTransactionAmount { get; set; }

        /// <summary>
        /// The currency code for the foreign transaction amount in ISO 4217 format.
        /// </summary>
        /// <value>The currency code for the foreign transaction amount in ISO 4217 format.</value>
        [DataMember(Name="foreignCurrencyCode", EmitDefaultValue=false)]
        public string ForeignCurrencyCode { get; set; }

        /// <summary>
        /// The exchange rate at the time the foreign transaction was done
        /// </summary>
        /// <value>The exchange rate at the time the foreign transaction was done</value>
        [DataMember(Name="foreignExchangeRate", EmitDefaultValue=false)]
        public decimal? ForeignExchangeRate { get; set; }

        /// <summary>
        /// The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.
        /// </summary>
        /// <value>The status of the transaction.  Applicable for credit cards only.. This is a reference data field. Please use /v1/utilities/referenceData/{transactionStatus} resource to get possible values of this field with descriptions.</value>
        [DataMember(Name="transactionStatus", EmitDefaultValue=false)]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601.
        /// </summary>
        /// <value>Transaction posting date in YYYY-MM-DD format value conforming to ISO 8601.</value>
        [DataMember(Name="transactionPostingDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TransactionPostingDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name="customerName", EmitDefaultValue=false)]
        public CustomerName CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets CustomerAddress
        /// </summary>
        [DataMember(Name="customerAddress", EmitDefaultValue=false)]
        public CustomerAddress CustomerAddress { get; set; }

        /// <summary>
        /// Gets or Sets BeneficiaryBankDetails
        /// </summary>
        [DataMember(Name="beneficiaryBankDetails", EmitDefaultValue=false)]
        public BeneficiaryBankDetails BeneficiaryBankDetails { get; set; }

        /// <summary>
        /// Gets or Sets CustomerMerchantReferenceDetails
        /// </summary>
        [DataMember(Name="customerMerchantReferenceDetails", EmitDefaultValue=false)]
        public List<CustomerMerchantReferenceDetails> CustomerMerchantReferenceDetails { get; set; }

        /// <summary>
        /// Payment notes. Free text from screen
        /// </summary>
        /// <value>Payment notes. Free text from screen</value>
        [DataMember(Name="remarks", EmitDefaultValue=false)]
        public string Remarks { get; set; }

        /// <summary>
        /// This code is used to indicate the priority payments
        /// </summary>
        /// <value>This code is used to indicate the priority payments</value>
        [DataMember(Name="paymentPriorityCode", EmitDefaultValue=false)]
        public string PaymentPriorityCode { get; set; }

        /// <summary>
        /// The code to identify merchant
        /// </summary>
        /// <value>The code to identify merchant</value>
        [DataMember(Name="merchantCode", EmitDefaultValue=false)]
        public string MerchantCode { get; set; }

        /// <summary>
        /// The name of the merchant
        /// </summary>
        /// <value>The name of the merchant</value>
        [DataMember(Name="merchantName", EmitDefaultValue=false)]
        public string MerchantName { get; set; }

        /// <summary>
        /// Transaction reversal description as provided by the returnee
        /// </summary>
        /// <value>Transaction reversal description as provided by the returnee</value>
        [DataMember(Name="transactionReversalDescription", EmitDefaultValue=false)]
        public string TransactionReversalDescription { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTransactionDetails
        /// </summary>
        [DataMember(Name="originalTransactionDetails", EmitDefaultValue=false)]
        public OriginalTransactionDetails OriginalTransactionDetails { get; set; }

        /// <summary>
        /// End to End Identification status
        /// </summary>
        /// <value>End to End Identification status</value>
        [DataMember(Name="endToEndIdentification", EmitDefaultValue=false)]
        public string EndToEndIdentification { get; set; }

        /// <summary>
        /// Gets or Sets CreditorDetails
        /// </summary>
        [DataMember(Name="creditorDetails", EmitDefaultValue=false)]
        public CreditorDetails CreditorDetails { get; set; }

        /// <summary>
        /// Gets or Sets DebtorDetails
        /// </summary>
        [DataMember(Name="debtorDetails", EmitDefaultValue=false)]
        public DebtorDetails DebtorDetails { get; set; }

        /// <summary>
        /// Name of the bank.
        /// </summary>
        /// <value>Name of the bank.</value>
        [DataMember(Name="sourceBankName", EmitDefaultValue=false)]
        public string SourceBankName { get; set; }

        /// <summary>
        /// The bank code of the payer account
        /// </summary>
        /// <value>The bank code of the payer account</value>
        [DataMember(Name="sourceBankCode", EmitDefaultValue=false)]
        public string SourceBankCode { get; set; }

        /// <summary>
        /// Clearing Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS
        /// </summary>
        /// <value>Clearing Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS</value>
        [DataMember(Name="clearingTimeStamp", EmitDefaultValue=false)]
        public string ClearingTimeStamp { get; set; }

        /// <summary>
        /// Settlement Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS
        /// </summary>
        /// <value>Settlement Date time as reported by the central bank in ISO 8601 date format YYYY-MM-DDTHH:MM:SS</value>
        [DataMember(Name="settlementTimeStamp", EmitDefaultValue=false)]
        public string SettlementTimeStamp { get; set; }

        /// <summary>
        /// Transaction ID identifying the transaction across banks
        /// </summary>
        /// <value>Transaction ID identifying the transaction across banks</value>
        [DataMember(Name="centralBankTransactionReferenceId", EmitDefaultValue=false)]
        public string CentralBankTransactionReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalCreditorDetails
        /// </summary>
        [DataMember(Name="originalCreditorDetails", EmitDefaultValue=false)]
        public OriginalCreditorDetails OriginalCreditorDetails { get; set; }

        /// <summary>
        /// Gets or Sets OriginalCreditAccountDetails
        /// </summary>
        [DataMember(Name="originalCreditAccountDetails", EmitDefaultValue=false)]
        public OriginalCreditAccountDetails OriginalCreditAccountDetails { get; set; }

        /// <summary>
        /// Original Debtor Name
        /// </summary>
        /// <value>Original Debtor Name</value>
        [DataMember(Name="originalDebtorName", EmitDefaultValue=false)]
        public string OriginalDebtorName { get; set; }

        /// <summary>
        /// Gets or Sets OriginalDebitAccountDetails
        /// </summary>
        [DataMember(Name="originalDebitAccountDetails", EmitDefaultValue=false)]
        public OriginalDebitAccountDetails OriginalDebitAccountDetails { get; set; }

        /// <summary>
        /// Fees charged for the debit.
        /// </summary>
        /// <value>Fees charged for the debit.</value>
        [DataMember(Name="transactionDebitFeeAmount", EmitDefaultValue=false)]
        public double? TransactionDebitFeeAmount { get; set; }

        /// <summary>
        /// Bank Member ID
        /// </summary>
        /// <value>Bank Member ID</value>
        [DataMember(Name="bankMemberId", EmitDefaultValue=false)]
        public string BankMemberId { get; set; }

        /// <summary>
        /// Legal Name of the Beneficiary
        /// </summary>
        /// <value>Legal Name of the Beneficiary</value>
        [DataMember(Name="beneficiaryLegalName", EmitDefaultValue=false)]
        public string BeneficiaryLegalName { get; set; }

        /// <summary>
        /// Gets or Sets BeneficiaryAddress
        /// </summary>
        [DataMember(Name="beneficiaryAddress", EmitDefaultValue=false)]
        public List<BeneficiaryAddress> BeneficiaryAddress { get; set; }

        /// <summary>
        /// Beneficiary Tax ID
        /// </summary>
        /// <value>Beneficiary Tax ID</value>
        [DataMember(Name="beneficiaryTaxId", EmitDefaultValue=false)]
        public string BeneficiaryTaxId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionDetailedViewResponse {\n");
            sb.Append("  DisplaySourceAccountNumber: ").Append(DisplaySourceAccountNumber).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  TransactionCurrencyCode: ").Append(TransactionCurrencyCode).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  ForeignTransactionAmount: ").Append(ForeignTransactionAmount).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  ForeignExchangeRate: ").Append(ForeignExchangeRate).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  TransactionPostingDate: ").Append(TransactionPostingDate).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  CustomerAddress: ").Append(CustomerAddress).Append("\n");
            sb.Append("  BeneficiaryBankDetails: ").Append(BeneficiaryBankDetails).Append("\n");
            sb.Append("  CustomerMerchantReferenceDetails: ").Append(CustomerMerchantReferenceDetails).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  PaymentPriorityCode: ").Append(PaymentPriorityCode).Append("\n");
            sb.Append("  MerchantCode: ").Append(MerchantCode).Append("\n");
            sb.Append("  MerchantName: ").Append(MerchantName).Append("\n");
            sb.Append("  TransactionReversalDescription: ").Append(TransactionReversalDescription).Append("\n");
            sb.Append("  OriginalTransactionDetails: ").Append(OriginalTransactionDetails).Append("\n");
            sb.Append("  EndToEndIdentification: ").Append(EndToEndIdentification).Append("\n");
            sb.Append("  CreditorDetails: ").Append(CreditorDetails).Append("\n");
            sb.Append("  DebtorDetails: ").Append(DebtorDetails).Append("\n");
            sb.Append("  SourceBankName: ").Append(SourceBankName).Append("\n");
            sb.Append("  SourceBankCode: ").Append(SourceBankCode).Append("\n");
            sb.Append("  ClearingTimeStamp: ").Append(ClearingTimeStamp).Append("\n");
            sb.Append("  SettlementTimeStamp: ").Append(SettlementTimeStamp).Append("\n");
            sb.Append("  CentralBankTransactionReferenceId: ").Append(CentralBankTransactionReferenceId).Append("\n");
            sb.Append("  OriginalCreditorDetails: ").Append(OriginalCreditorDetails).Append("\n");
            sb.Append("  OriginalCreditAccountDetails: ").Append(OriginalCreditAccountDetails).Append("\n");
            sb.Append("  OriginalDebtorName: ").Append(OriginalDebtorName).Append("\n");
            sb.Append("  OriginalDebitAccountDetails: ").Append(OriginalDebitAccountDetails).Append("\n");
            sb.Append("  TransactionDebitFeeAmount: ").Append(TransactionDebitFeeAmount).Append("\n");
            sb.Append("  BankMemberId: ").Append(BankMemberId).Append("\n");
            sb.Append("  BeneficiaryLegalName: ").Append(BeneficiaryLegalName).Append("\n");
            sb.Append("  BeneficiaryAddress: ").Append(BeneficiaryAddress).Append("\n");
            sb.Append("  BeneficiaryTaxId: ").Append(BeneficiaryTaxId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionDetailedViewResponse);
        }

        /// <summary>
        /// Returns true if TransactionDetailedViewResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionDetailedViewResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionDetailedViewResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplaySourceAccountNumber == input.DisplaySourceAccountNumber ||
                    (this.DisplaySourceAccountNumber != null &&
                    this.DisplaySourceAccountNumber.Equals(input.DisplaySourceAccountNumber))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.TransactionDescription == input.TransactionDescription ||
                    (this.TransactionDescription != null &&
                    this.TransactionDescription.Equals(input.TransactionDescription))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.TransactionCurrencyCode == input.TransactionCurrencyCode ||
                    (this.TransactionCurrencyCode != null &&
                    this.TransactionCurrencyCode.Equals(input.TransactionCurrencyCode))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.ForeignTransactionAmount == input.ForeignTransactionAmount ||
                    (this.ForeignTransactionAmount != null &&
                    this.ForeignTransactionAmount.Equals(input.ForeignTransactionAmount))
                ) && 
                (
                    this.ForeignCurrencyCode == input.ForeignCurrencyCode ||
                    (this.ForeignCurrencyCode != null &&
                    this.ForeignCurrencyCode.Equals(input.ForeignCurrencyCode))
                ) && 
                (
                    this.ForeignExchangeRate == input.ForeignExchangeRate ||
                    (this.ForeignExchangeRate != null &&
                    this.ForeignExchangeRate.Equals(input.ForeignExchangeRate))
                ) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    (this.TransactionStatus != null &&
                    this.TransactionStatus.Equals(input.TransactionStatus))
                ) && 
                (
                    this.TransactionPostingDate == input.TransactionPostingDate ||
                    (this.TransactionPostingDate != null &&
                    this.TransactionPostingDate.Equals(input.TransactionPostingDate))
                ) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.CustomerAddress == input.CustomerAddress ||
                    (this.CustomerAddress != null &&
                    this.CustomerAddress.Equals(input.CustomerAddress))
                ) && 
                (
                    this.BeneficiaryBankDetails == input.BeneficiaryBankDetails ||
                    (this.BeneficiaryBankDetails != null &&
                    this.BeneficiaryBankDetails.Equals(input.BeneficiaryBankDetails))
                ) && 
                (
                    this.CustomerMerchantReferenceDetails == input.CustomerMerchantReferenceDetails ||
                    this.CustomerMerchantReferenceDetails != null &&
                    input.CustomerMerchantReferenceDetails != null &&
                    this.CustomerMerchantReferenceDetails.SequenceEqual(input.CustomerMerchantReferenceDetails)
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.PaymentPriorityCode == input.PaymentPriorityCode ||
                    (this.PaymentPriorityCode != null &&
                    this.PaymentPriorityCode.Equals(input.PaymentPriorityCode))
                ) && 
                (
                    this.MerchantCode == input.MerchantCode ||
                    (this.MerchantCode != null &&
                    this.MerchantCode.Equals(input.MerchantCode))
                ) && 
                (
                    this.MerchantName == input.MerchantName ||
                    (this.MerchantName != null &&
                    this.MerchantName.Equals(input.MerchantName))
                ) && 
                (
                    this.TransactionReversalDescription == input.TransactionReversalDescription ||
                    (this.TransactionReversalDescription != null &&
                    this.TransactionReversalDescription.Equals(input.TransactionReversalDescription))
                ) && 
                (
                    this.OriginalTransactionDetails == input.OriginalTransactionDetails ||
                    (this.OriginalTransactionDetails != null &&
                    this.OriginalTransactionDetails.Equals(input.OriginalTransactionDetails))
                ) && 
                (
                    this.EndToEndIdentification == input.EndToEndIdentification ||
                    (this.EndToEndIdentification != null &&
                    this.EndToEndIdentification.Equals(input.EndToEndIdentification))
                ) && 
                (
                    this.CreditorDetails == input.CreditorDetails ||
                    (this.CreditorDetails != null &&
                    this.CreditorDetails.Equals(input.CreditorDetails))
                ) && 
                (
                    this.DebtorDetails == input.DebtorDetails ||
                    (this.DebtorDetails != null &&
                    this.DebtorDetails.Equals(input.DebtorDetails))
                ) && 
                (
                    this.SourceBankName == input.SourceBankName ||
                    (this.SourceBankName != null &&
                    this.SourceBankName.Equals(input.SourceBankName))
                ) && 
                (
                    this.SourceBankCode == input.SourceBankCode ||
                    (this.SourceBankCode != null &&
                    this.SourceBankCode.Equals(input.SourceBankCode))
                ) && 
                (
                    this.ClearingTimeStamp == input.ClearingTimeStamp ||
                    (this.ClearingTimeStamp != null &&
                    this.ClearingTimeStamp.Equals(input.ClearingTimeStamp))
                ) && 
                (
                    this.SettlementTimeStamp == input.SettlementTimeStamp ||
                    (this.SettlementTimeStamp != null &&
                    this.SettlementTimeStamp.Equals(input.SettlementTimeStamp))
                ) && 
                (
                    this.CentralBankTransactionReferenceId == input.CentralBankTransactionReferenceId ||
                    (this.CentralBankTransactionReferenceId != null &&
                    this.CentralBankTransactionReferenceId.Equals(input.CentralBankTransactionReferenceId))
                ) && 
                (
                    this.OriginalCreditorDetails == input.OriginalCreditorDetails ||
                    (this.OriginalCreditorDetails != null &&
                    this.OriginalCreditorDetails.Equals(input.OriginalCreditorDetails))
                ) && 
                (
                    this.OriginalCreditAccountDetails == input.OriginalCreditAccountDetails ||
                    (this.OriginalCreditAccountDetails != null &&
                    this.OriginalCreditAccountDetails.Equals(input.OriginalCreditAccountDetails))
                ) && 
                (
                    this.OriginalDebtorName == input.OriginalDebtorName ||
                    (this.OriginalDebtorName != null &&
                    this.OriginalDebtorName.Equals(input.OriginalDebtorName))
                ) && 
                (
                    this.OriginalDebitAccountDetails == input.OriginalDebitAccountDetails ||
                    (this.OriginalDebitAccountDetails != null &&
                    this.OriginalDebitAccountDetails.Equals(input.OriginalDebitAccountDetails))
                ) && 
                (
                    this.TransactionDebitFeeAmount == input.TransactionDebitFeeAmount ||
                    (this.TransactionDebitFeeAmount != null &&
                    this.TransactionDebitFeeAmount.Equals(input.TransactionDebitFeeAmount))
                ) && 
                (
                    this.BankMemberId == input.BankMemberId ||
                    (this.BankMemberId != null &&
                    this.BankMemberId.Equals(input.BankMemberId))
                ) && 
                (
                    this.BeneficiaryLegalName == input.BeneficiaryLegalName ||
                    (this.BeneficiaryLegalName != null &&
                    this.BeneficiaryLegalName.Equals(input.BeneficiaryLegalName))
                ) && 
                (
                    this.BeneficiaryAddress == input.BeneficiaryAddress ||
                    this.BeneficiaryAddress != null &&
                    input.BeneficiaryAddress != null &&
                    this.BeneficiaryAddress.SequenceEqual(input.BeneficiaryAddress)
                ) && 
                (
                    this.BeneficiaryTaxId == input.BeneficiaryTaxId ||
                    (this.BeneficiaryTaxId != null &&
                    this.BeneficiaryTaxId.Equals(input.BeneficiaryTaxId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplaySourceAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplaySourceAccountNumber.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.TransactionDescription != null)
                    hashCode = hashCode * 59 + this.TransactionDescription.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.TransactionCurrencyCode != null)
                    hashCode = hashCode * 59 + this.TransactionCurrencyCode.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.ForeignTransactionAmount != null)
                    hashCode = hashCode * 59 + this.ForeignTransactionAmount.GetHashCode();
                if (this.ForeignCurrencyCode != null)
                    hashCode = hashCode * 59 + this.ForeignCurrencyCode.GetHashCode();
                if (this.ForeignExchangeRate != null)
                    hashCode = hashCode * 59 + this.ForeignExchangeRate.GetHashCode();
                if (this.TransactionStatus != null)
                    hashCode = hashCode * 59 + this.TransactionStatus.GetHashCode();
                if (this.TransactionPostingDate != null)
                    hashCode = hashCode * 59 + this.TransactionPostingDate.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.CustomerAddress != null)
                    hashCode = hashCode * 59 + this.CustomerAddress.GetHashCode();
                if (this.BeneficiaryBankDetails != null)
                    hashCode = hashCode * 59 + this.BeneficiaryBankDetails.GetHashCode();
                if (this.CustomerMerchantReferenceDetails != null)
                    hashCode = hashCode * 59 + this.CustomerMerchantReferenceDetails.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.PaymentPriorityCode != null)
                    hashCode = hashCode * 59 + this.PaymentPriorityCode.GetHashCode();
                if (this.MerchantCode != null)
                    hashCode = hashCode * 59 + this.MerchantCode.GetHashCode();
                if (this.MerchantName != null)
                    hashCode = hashCode * 59 + this.MerchantName.GetHashCode();
                if (this.TransactionReversalDescription != null)
                    hashCode = hashCode * 59 + this.TransactionReversalDescription.GetHashCode();
                if (this.OriginalTransactionDetails != null)
                    hashCode = hashCode * 59 + this.OriginalTransactionDetails.GetHashCode();
                if (this.EndToEndIdentification != null)
                    hashCode = hashCode * 59 + this.EndToEndIdentification.GetHashCode();
                if (this.CreditorDetails != null)
                    hashCode = hashCode * 59 + this.CreditorDetails.GetHashCode();
                if (this.DebtorDetails != null)
                    hashCode = hashCode * 59 + this.DebtorDetails.GetHashCode();
                if (this.SourceBankName != null)
                    hashCode = hashCode * 59 + this.SourceBankName.GetHashCode();
                if (this.SourceBankCode != null)
                    hashCode = hashCode * 59 + this.SourceBankCode.GetHashCode();
                if (this.ClearingTimeStamp != null)
                    hashCode = hashCode * 59 + this.ClearingTimeStamp.GetHashCode();
                if (this.SettlementTimeStamp != null)
                    hashCode = hashCode * 59 + this.SettlementTimeStamp.GetHashCode();
                if (this.CentralBankTransactionReferenceId != null)
                    hashCode = hashCode * 59 + this.CentralBankTransactionReferenceId.GetHashCode();
                if (this.OriginalCreditorDetails != null)
                    hashCode = hashCode * 59 + this.OriginalCreditorDetails.GetHashCode();
                if (this.OriginalCreditAccountDetails != null)
                    hashCode = hashCode * 59 + this.OriginalCreditAccountDetails.GetHashCode();
                if (this.OriginalDebtorName != null)
                    hashCode = hashCode * 59 + this.OriginalDebtorName.GetHashCode();
                if (this.OriginalDebitAccountDetails != null)
                    hashCode = hashCode * 59 + this.OriginalDebitAccountDetails.GetHashCode();
                if (this.TransactionDebitFeeAmount != null)
                    hashCode = hashCode * 59 + this.TransactionDebitFeeAmount.GetHashCode();
                if (this.BankMemberId != null)
                    hashCode = hashCode * 59 + this.BankMemberId.GetHashCode();
                if (this.BeneficiaryLegalName != null)
                    hashCode = hashCode * 59 + this.BeneficiaryLegalName.GetHashCode();
                if (this.BeneficiaryAddress != null)
                    hashCode = hashCode * 59 + this.BeneficiaryAddress.GetHashCode();
                if (this.BeneficiaryTaxId != null)
                    hashCode = hashCode * 59 + this.BeneficiaryTaxId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
