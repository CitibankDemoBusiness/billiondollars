/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BeneficiaryDetail
    /// </summary>
    [DataContract]
        public partial class BeneficiaryDetail :  IEquatable<BeneficiaryDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BeneficiaryDetail" /> class.
        /// </summary>
        /// <param name="accountNumber">Customers Account Number with the Bank.</param>
        /// <param name="beneficiaryBankCode">Bank Code of the Beneficiary Account Number.</param>
        /// <param name="beneficiaryBranchCode">Branch Code of the Beneficiary Account Number.</param>
        /// <param name="bankName">Name of the bank where the branch is associated.</param>
        /// <param name="beneficiaryName">Beneficiary Name.</param>
        public BeneficiaryDetail(string accountNumber = default(string), string beneficiaryBankCode = default(string), string beneficiaryBranchCode = default(string), string bankName = default(string), string beneficiaryName = default(string))
        {
            this.AccountNumber = accountNumber;
            this.BeneficiaryBankCode = beneficiaryBankCode;
            this.BeneficiaryBranchCode = beneficiaryBranchCode;
            this.BankName = bankName;
            this.BeneficiaryName = beneficiaryName;
        }
        
        /// <summary>
        /// Customers Account Number with the Bank
        /// </summary>
        /// <value>Customers Account Number with the Bank</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Bank Code of the Beneficiary Account Number
        /// </summary>
        /// <value>Bank Code of the Beneficiary Account Number</value>
        [DataMember(Name="beneficiaryBankCode", EmitDefaultValue=false)]
        public string BeneficiaryBankCode { get; set; }

        /// <summary>
        /// Branch Code of the Beneficiary Account Number
        /// </summary>
        /// <value>Branch Code of the Beneficiary Account Number</value>
        [DataMember(Name="beneficiaryBranchCode", EmitDefaultValue=false)]
        public string BeneficiaryBranchCode { get; set; }

        /// <summary>
        /// Name of the bank where the branch is associated
        /// </summary>
        /// <value>Name of the bank where the branch is associated</value>
        [DataMember(Name="bankName", EmitDefaultValue=false)]
        public string BankName { get; set; }

        /// <summary>
        /// Beneficiary Name
        /// </summary>
        /// <value>Beneficiary Name</value>
        [DataMember(Name="beneficiaryName", EmitDefaultValue=false)]
        public string BeneficiaryName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeneficiaryDetail {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  BeneficiaryBankCode: ").Append(BeneficiaryBankCode).Append("\n");
            sb.Append("  BeneficiaryBranchCode: ").Append(BeneficiaryBranchCode).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BeneficiaryName: ").Append(BeneficiaryName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BeneficiaryDetail);
        }

        /// <summary>
        /// Returns true if BeneficiaryDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of BeneficiaryDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeneficiaryDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.BeneficiaryBankCode == input.BeneficiaryBankCode ||
                    (this.BeneficiaryBankCode != null &&
                    this.BeneficiaryBankCode.Equals(input.BeneficiaryBankCode))
                ) && 
                (
                    this.BeneficiaryBranchCode == input.BeneficiaryBranchCode ||
                    (this.BeneficiaryBranchCode != null &&
                    this.BeneficiaryBranchCode.Equals(input.BeneficiaryBranchCode))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BeneficiaryName == input.BeneficiaryName ||
                    (this.BeneficiaryName != null &&
                    this.BeneficiaryName.Equals(input.BeneficiaryName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.BeneficiaryBankCode != null)
                    hashCode = hashCode * 59 + this.BeneficiaryBankCode.GetHashCode();
                if (this.BeneficiaryBranchCode != null)
                    hashCode = hashCode * 59 + this.BeneficiaryBranchCode.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                if (this.BeneficiaryName != null)
                    hashCode = hashCode * 59 + this.BeneficiaryName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
