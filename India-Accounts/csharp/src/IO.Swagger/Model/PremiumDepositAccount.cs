/* 
 * Accounts
 *
 * The Accounts API allows you to retrieve account and transaction data for Citi Customers who have authorized your app. In most cases, you'll want to request a summary of all accounts first, which will return basic account information and accountIds. Once you have this information, you can request additional account details and/or transactions.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PremiumDepositAccount
    /// </summary>
    [DataContract]
        public partial class PremiumDepositAccount :  IEquatable<PremiumDepositAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PremiumDepositAccount" /> class.
        /// </summary>
        /// <param name="productName">The name of the product.</param>
        /// <param name="productCode">A unique code that identifies the product.</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer (required).</param>
        /// <param name="baseCurrencyPrincipalAmount">The investment amount in base currency.</param>
        /// <param name="baseCurrencyCode">The base currency code in ISO 4217 format.</param>
        /// <param name="alternateCurrencyPrincipalAmount">The investment amount in alternate currency.</param>
        /// <param name="openingDate">Premium deposit open date in ISO 8601 date format YYYY-MM-DD.</param>
        /// <param name="alternateCurrencyCode">The alternate currency code in ISO 4217 format.</param>
        /// <param name="baseCurrencyDisposalAccount">The account number to deposit returns of base currency, upon maturity.</param>
        /// <param name="alternateCurrencyDisposalAccount">The account number to deposit returns of alternate currency, upon maturity.</param>
        /// <param name="baseCurrencyInterestAmount">The accrued interest amount in base currency.</param>
        /// <param name="alternateCurrencyInterestAmount">The accrued interest amount in alternate currency.</param>
        /// <param name="baseCurrencyMaturityAmount">The investment amount and accrued interest in base currency.</param>
        /// <param name="alternateCurrencyMaturityAmount">The investment amount and accrued interest in alternate currency.</param>
        /// <param name="baseCurrencyPremiumAmount">A part or all of the interest the customer earns on the Premium Account represents the premium that the bank pays the customer for the currency option.</param>
        /// <param name="maturityDate">The date when the premium deposit will mature, in ISO8601 date format YYYY-MM-DD.</param>
        /// <param name="strikePrice">The Pre-agreed exchange rate.</param>
        /// <param name="customerInterestRate">The customer interest rate applicable for the premium deposit.</param>
        /// <param name="accruedInterestRate">The accrued interest rate applicable for the premium deposit.</param>
        /// <param name="benchmarkInterestRate">The benchmark interest rate applicable for the premium deposit.</param>
        /// <param name="dealStatus">The deal status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{dealStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="expiryDate">The date when the premium deposit deal will expire, in ISO8601 date format YYYY-MM-DD.</param>
        /// <param name="tenorTerm">The tenor term for deposit.</param>
        /// <param name="tenorPeriod">This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values..</param>
        /// <param name="relationship">relationship.</param>
        public PremiumDepositAccount(string productName = default(string), string productCode = default(string), string displayAccountNumber = default(string), double? baseCurrencyPrincipalAmount = default(double?), string baseCurrencyCode = default(string), double? alternateCurrencyPrincipalAmount = default(double?), DateTime? openingDate = default(DateTime?), string alternateCurrencyCode = default(string), string baseCurrencyDisposalAccount = default(string), string alternateCurrencyDisposalAccount = default(string), double? baseCurrencyInterestAmount = default(double?), double? alternateCurrencyInterestAmount = default(double?), double? baseCurrencyMaturityAmount = default(double?), double? alternateCurrencyMaturityAmount = default(double?), double? baseCurrencyPremiumAmount = default(double?), DateTime? maturityDate = default(DateTime?), double? strikePrice = default(double?), double? customerInterestRate = default(double?), double? accruedInterestRate = default(double?), double? benchmarkInterestRate = default(double?), string dealStatus = default(string), DateTime? expiryDate = default(DateTime?), int? tenorTerm = default(int?), string tenorPeriod = default(string), Relationship relationship = default(Relationship))
        {
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for PremiumDepositAccount and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
            this.ProductName = productName;
            this.ProductCode = productCode;
            this.BaseCurrencyPrincipalAmount = baseCurrencyPrincipalAmount;
            this.BaseCurrencyCode = baseCurrencyCode;
            this.AlternateCurrencyPrincipalAmount = alternateCurrencyPrincipalAmount;
            this.OpeningDate = openingDate;
            this.AlternateCurrencyCode = alternateCurrencyCode;
            this.BaseCurrencyDisposalAccount = baseCurrencyDisposalAccount;
            this.AlternateCurrencyDisposalAccount = alternateCurrencyDisposalAccount;
            this.BaseCurrencyInterestAmount = baseCurrencyInterestAmount;
            this.AlternateCurrencyInterestAmount = alternateCurrencyInterestAmount;
            this.BaseCurrencyMaturityAmount = baseCurrencyMaturityAmount;
            this.AlternateCurrencyMaturityAmount = alternateCurrencyMaturityAmount;
            this.BaseCurrencyPremiumAmount = baseCurrencyPremiumAmount;
            this.MaturityDate = maturityDate;
            this.StrikePrice = strikePrice;
            this.CustomerInterestRate = customerInterestRate;
            this.AccruedInterestRate = accruedInterestRate;
            this.BenchmarkInterestRate = benchmarkInterestRate;
            this.DealStatus = dealStatus;
            this.ExpiryDate = expiryDate;
            this.TenorTerm = tenorTerm;
            this.TenorPeriod = tenorPeriod;
            this.Relationship = relationship;
        }
        
        /// <summary>
        /// The name of the product
        /// </summary>
        /// <value>The name of the product</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// A unique code that identifies the product
        /// </summary>
        /// <value>A unique code that identifies the product</value>
        [DataMember(Name="productCode", EmitDefaultValue=false)]
        public string ProductCode { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// The investment amount in base currency
        /// </summary>
        /// <value>The investment amount in base currency</value>
        [DataMember(Name="baseCurrencyPrincipalAmount", EmitDefaultValue=false)]
        public double? BaseCurrencyPrincipalAmount { get; set; }

        /// <summary>
        /// The base currency code in ISO 4217 format
        /// </summary>
        /// <value>The base currency code in ISO 4217 format</value>
        [DataMember(Name="baseCurrencyCode", EmitDefaultValue=false)]
        public string BaseCurrencyCode { get; set; }

        /// <summary>
        /// The investment amount in alternate currency
        /// </summary>
        /// <value>The investment amount in alternate currency</value>
        [DataMember(Name="alternateCurrencyPrincipalAmount", EmitDefaultValue=false)]
        public double? AlternateCurrencyPrincipalAmount { get; set; }

        /// <summary>
        /// Premium deposit open date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>Premium deposit open date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="openingDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OpeningDate { get; set; }

        /// <summary>
        /// The alternate currency code in ISO 4217 format
        /// </summary>
        /// <value>The alternate currency code in ISO 4217 format</value>
        [DataMember(Name="alternateCurrencyCode", EmitDefaultValue=false)]
        public string AlternateCurrencyCode { get; set; }

        /// <summary>
        /// The account number to deposit returns of base currency, upon maturity
        /// </summary>
        /// <value>The account number to deposit returns of base currency, upon maturity</value>
        [DataMember(Name="baseCurrencyDisposalAccount", EmitDefaultValue=false)]
        public string BaseCurrencyDisposalAccount { get; set; }

        /// <summary>
        /// The account number to deposit returns of alternate currency, upon maturity
        /// </summary>
        /// <value>The account number to deposit returns of alternate currency, upon maturity</value>
        [DataMember(Name="alternateCurrencyDisposalAccount", EmitDefaultValue=false)]
        public string AlternateCurrencyDisposalAccount { get; set; }

        /// <summary>
        /// The accrued interest amount in base currency
        /// </summary>
        /// <value>The accrued interest amount in base currency</value>
        [DataMember(Name="baseCurrencyInterestAmount", EmitDefaultValue=false)]
        public double? BaseCurrencyInterestAmount { get; set; }

        /// <summary>
        /// The accrued interest amount in alternate currency
        /// </summary>
        /// <value>The accrued interest amount in alternate currency</value>
        [DataMember(Name="alternateCurrencyInterestAmount", EmitDefaultValue=false)]
        public double? AlternateCurrencyInterestAmount { get; set; }

        /// <summary>
        /// The investment amount and accrued interest in base currency
        /// </summary>
        /// <value>The investment amount and accrued interest in base currency</value>
        [DataMember(Name="baseCurrencyMaturityAmount", EmitDefaultValue=false)]
        public double? BaseCurrencyMaturityAmount { get; set; }

        /// <summary>
        /// The investment amount and accrued interest in alternate currency
        /// </summary>
        /// <value>The investment amount and accrued interest in alternate currency</value>
        [DataMember(Name="alternateCurrencyMaturityAmount", EmitDefaultValue=false)]
        public double? AlternateCurrencyMaturityAmount { get; set; }

        /// <summary>
        /// A part or all of the interest the customer earns on the Premium Account represents the premium that the bank pays the customer for the currency option
        /// </summary>
        /// <value>A part or all of the interest the customer earns on the Premium Account represents the premium that the bank pays the customer for the currency option</value>
        [DataMember(Name="baseCurrencyPremiumAmount", EmitDefaultValue=false)]
        public double? BaseCurrencyPremiumAmount { get; set; }

        /// <summary>
        /// The date when the premium deposit will mature, in ISO8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>The date when the premium deposit will mature, in ISO8601 date format YYYY-MM-DD</value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// The Pre-agreed exchange rate
        /// </summary>
        /// <value>The Pre-agreed exchange rate</value>
        [DataMember(Name="strikePrice", EmitDefaultValue=false)]
        public double? StrikePrice { get; set; }

        /// <summary>
        /// The customer interest rate applicable for the premium deposit
        /// </summary>
        /// <value>The customer interest rate applicable for the premium deposit</value>
        [DataMember(Name="customerInterestRate", EmitDefaultValue=false)]
        public double? CustomerInterestRate { get; set; }

        /// <summary>
        /// The accrued interest rate applicable for the premium deposit
        /// </summary>
        /// <value>The accrued interest rate applicable for the premium deposit</value>
        [DataMember(Name="accruedInterestRate", EmitDefaultValue=false)]
        public double? AccruedInterestRate { get; set; }

        /// <summary>
        /// The benchmark interest rate applicable for the premium deposit
        /// </summary>
        /// <value>The benchmark interest rate applicable for the premium deposit</value>
        [DataMember(Name="benchmarkInterestRate", EmitDefaultValue=false)]
        public double? BenchmarkInterestRate { get; set; }

        /// <summary>
        /// The deal status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{dealStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>The deal status. This is a reference data field. Please use /v1/apac/utilities/referenceData/{dealStatus} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="dealStatus", EmitDefaultValue=false)]
        public string DealStatus { get; set; }

        /// <summary>
        /// The date when the premium deposit deal will expire, in ISO8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>The date when the premium deposit deal will expire, in ISO8601 date format YYYY-MM-DD</value>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// The tenor term for deposit
        /// </summary>
        /// <value>The tenor term for deposit</value>
        [DataMember(Name="tenorTerm", EmitDefaultValue=false)]
        public int? TenorTerm { get; set; }

        /// <summary>
        /// This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>This is a reference data field. Please use /v1/apac/utilities/referenceData/{tenorPeriod} resource to get valid value of this field with description. You can use the field name as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="tenorPeriod", EmitDefaultValue=false)]
        public string TenorPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Relationship
        /// </summary>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public Relationship Relationship { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PremiumDepositAccount {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  BaseCurrencyPrincipalAmount: ").Append(BaseCurrencyPrincipalAmount).Append("\n");
            sb.Append("  BaseCurrencyCode: ").Append(BaseCurrencyCode).Append("\n");
            sb.Append("  AlternateCurrencyPrincipalAmount: ").Append(AlternateCurrencyPrincipalAmount).Append("\n");
            sb.Append("  OpeningDate: ").Append(OpeningDate).Append("\n");
            sb.Append("  AlternateCurrencyCode: ").Append(AlternateCurrencyCode).Append("\n");
            sb.Append("  BaseCurrencyDisposalAccount: ").Append(BaseCurrencyDisposalAccount).Append("\n");
            sb.Append("  AlternateCurrencyDisposalAccount: ").Append(AlternateCurrencyDisposalAccount).Append("\n");
            sb.Append("  BaseCurrencyInterestAmount: ").Append(BaseCurrencyInterestAmount).Append("\n");
            sb.Append("  AlternateCurrencyInterestAmount: ").Append(AlternateCurrencyInterestAmount).Append("\n");
            sb.Append("  BaseCurrencyMaturityAmount: ").Append(BaseCurrencyMaturityAmount).Append("\n");
            sb.Append("  AlternateCurrencyMaturityAmount: ").Append(AlternateCurrencyMaturityAmount).Append("\n");
            sb.Append("  BaseCurrencyPremiumAmount: ").Append(BaseCurrencyPremiumAmount).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("  CustomerInterestRate: ").Append(CustomerInterestRate).Append("\n");
            sb.Append("  AccruedInterestRate: ").Append(AccruedInterestRate).Append("\n");
            sb.Append("  BenchmarkInterestRate: ").Append(BenchmarkInterestRate).Append("\n");
            sb.Append("  DealStatus: ").Append(DealStatus).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  TenorTerm: ").Append(TenorTerm).Append("\n");
            sb.Append("  TenorPeriod: ").Append(TenorPeriod).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PremiumDepositAccount);
        }

        /// <summary>
        /// Returns true if PremiumDepositAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of PremiumDepositAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PremiumDepositAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.ProductCode == input.ProductCode ||
                    (this.ProductCode != null &&
                    this.ProductCode.Equals(input.ProductCode))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.BaseCurrencyPrincipalAmount == input.BaseCurrencyPrincipalAmount ||
                    (this.BaseCurrencyPrincipalAmount != null &&
                    this.BaseCurrencyPrincipalAmount.Equals(input.BaseCurrencyPrincipalAmount))
                ) && 
                (
                    this.BaseCurrencyCode == input.BaseCurrencyCode ||
                    (this.BaseCurrencyCode != null &&
                    this.BaseCurrencyCode.Equals(input.BaseCurrencyCode))
                ) && 
                (
                    this.AlternateCurrencyPrincipalAmount == input.AlternateCurrencyPrincipalAmount ||
                    (this.AlternateCurrencyPrincipalAmount != null &&
                    this.AlternateCurrencyPrincipalAmount.Equals(input.AlternateCurrencyPrincipalAmount))
                ) && 
                (
                    this.OpeningDate == input.OpeningDate ||
                    (this.OpeningDate != null &&
                    this.OpeningDate.Equals(input.OpeningDate))
                ) && 
                (
                    this.AlternateCurrencyCode == input.AlternateCurrencyCode ||
                    (this.AlternateCurrencyCode != null &&
                    this.AlternateCurrencyCode.Equals(input.AlternateCurrencyCode))
                ) && 
                (
                    this.BaseCurrencyDisposalAccount == input.BaseCurrencyDisposalAccount ||
                    (this.BaseCurrencyDisposalAccount != null &&
                    this.BaseCurrencyDisposalAccount.Equals(input.BaseCurrencyDisposalAccount))
                ) && 
                (
                    this.AlternateCurrencyDisposalAccount == input.AlternateCurrencyDisposalAccount ||
                    (this.AlternateCurrencyDisposalAccount != null &&
                    this.AlternateCurrencyDisposalAccount.Equals(input.AlternateCurrencyDisposalAccount))
                ) && 
                (
                    this.BaseCurrencyInterestAmount == input.BaseCurrencyInterestAmount ||
                    (this.BaseCurrencyInterestAmount != null &&
                    this.BaseCurrencyInterestAmount.Equals(input.BaseCurrencyInterestAmount))
                ) && 
                (
                    this.AlternateCurrencyInterestAmount == input.AlternateCurrencyInterestAmount ||
                    (this.AlternateCurrencyInterestAmount != null &&
                    this.AlternateCurrencyInterestAmount.Equals(input.AlternateCurrencyInterestAmount))
                ) && 
                (
                    this.BaseCurrencyMaturityAmount == input.BaseCurrencyMaturityAmount ||
                    (this.BaseCurrencyMaturityAmount != null &&
                    this.BaseCurrencyMaturityAmount.Equals(input.BaseCurrencyMaturityAmount))
                ) && 
                (
                    this.AlternateCurrencyMaturityAmount == input.AlternateCurrencyMaturityAmount ||
                    (this.AlternateCurrencyMaturityAmount != null &&
                    this.AlternateCurrencyMaturityAmount.Equals(input.AlternateCurrencyMaturityAmount))
                ) && 
                (
                    this.BaseCurrencyPremiumAmount == input.BaseCurrencyPremiumAmount ||
                    (this.BaseCurrencyPremiumAmount != null &&
                    this.BaseCurrencyPremiumAmount.Equals(input.BaseCurrencyPremiumAmount))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.StrikePrice == input.StrikePrice ||
                    (this.StrikePrice != null &&
                    this.StrikePrice.Equals(input.StrikePrice))
                ) && 
                (
                    this.CustomerInterestRate == input.CustomerInterestRate ||
                    (this.CustomerInterestRate != null &&
                    this.CustomerInterestRate.Equals(input.CustomerInterestRate))
                ) && 
                (
                    this.AccruedInterestRate == input.AccruedInterestRate ||
                    (this.AccruedInterestRate != null &&
                    this.AccruedInterestRate.Equals(input.AccruedInterestRate))
                ) && 
                (
                    this.BenchmarkInterestRate == input.BenchmarkInterestRate ||
                    (this.BenchmarkInterestRate != null &&
                    this.BenchmarkInterestRate.Equals(input.BenchmarkInterestRate))
                ) && 
                (
                    this.DealStatus == input.DealStatus ||
                    (this.DealStatus != null &&
                    this.DealStatus.Equals(input.DealStatus))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.TenorTerm == input.TenorTerm ||
                    (this.TenorTerm != null &&
                    this.TenorTerm.Equals(input.TenorTerm))
                ) && 
                (
                    this.TenorPeriod == input.TenorPeriod ||
                    (this.TenorPeriod != null &&
                    this.TenorPeriod.Equals(input.TenorPeriod))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.ProductCode != null)
                    hashCode = hashCode * 59 + this.ProductCode.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.BaseCurrencyPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyPrincipalAmount.GetHashCode();
                if (this.BaseCurrencyCode != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyCode.GetHashCode();
                if (this.AlternateCurrencyPrincipalAmount != null)
                    hashCode = hashCode * 59 + this.AlternateCurrencyPrincipalAmount.GetHashCode();
                if (this.OpeningDate != null)
                    hashCode = hashCode * 59 + this.OpeningDate.GetHashCode();
                if (this.AlternateCurrencyCode != null)
                    hashCode = hashCode * 59 + this.AlternateCurrencyCode.GetHashCode();
                if (this.BaseCurrencyDisposalAccount != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyDisposalAccount.GetHashCode();
                if (this.AlternateCurrencyDisposalAccount != null)
                    hashCode = hashCode * 59 + this.AlternateCurrencyDisposalAccount.GetHashCode();
                if (this.BaseCurrencyInterestAmount != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyInterestAmount.GetHashCode();
                if (this.AlternateCurrencyInterestAmount != null)
                    hashCode = hashCode * 59 + this.AlternateCurrencyInterestAmount.GetHashCode();
                if (this.BaseCurrencyMaturityAmount != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyMaturityAmount.GetHashCode();
                if (this.AlternateCurrencyMaturityAmount != null)
                    hashCode = hashCode * 59 + this.AlternateCurrencyMaturityAmount.GetHashCode();
                if (this.BaseCurrencyPremiumAmount != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyPremiumAmount.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.StrikePrice != null)
                    hashCode = hashCode * 59 + this.StrikePrice.GetHashCode();
                if (this.CustomerInterestRate != null)
                    hashCode = hashCode * 59 + this.CustomerInterestRate.GetHashCode();
                if (this.AccruedInterestRate != null)
                    hashCode = hashCode * 59 + this.AccruedInterestRate.GetHashCode();
                if (this.BenchmarkInterestRate != null)
                    hashCode = hashCode * 59 + this.BenchmarkInterestRate.GetHashCode();
                if (this.DealStatus != null)
                    hashCode = hashCode * 59 + this.DealStatus.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.TenorTerm != null)
                    hashCode = hashCode * 59 + this.TenorTerm.GetHashCode();
                if (this.TenorPeriod != null)
                    hashCode = hashCode * 59 + this.TenorPeriod.GetHashCode();
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
