/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet
        /// </summary>
        [Test]
        public void V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string nextStartIndex = null;
            //var response = instance.V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet(authorization, uuid, accept, clientId, nextStartIndex);
            //Assert.IsInstanceOf<SepaTransfersAccountPayeeEligibilityResponse> (response, "response is SepaTransfersAccountPayeeEligibilityResponse");
        }
        /// <summary>
        /// Test V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost
        /// </summary>
        [Test]
        public void V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AdhocSepaTransfersPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<AdhocSepaTransfersPreprocessResponse> (response, "response is AdhocSepaTransfersPreprocessResponse");
        }
        /// <summary>
        /// Test V1EmeaMoneyMovementSepaTransfersPreprocessPost
        /// </summary>
        [Test]
        public void V1EmeaMoneyMovementSepaTransfersPreprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SepaTransfersPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1EmeaMoneyMovementSepaTransfersPreprocessPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<SepaTransfersPreprocessResponse> (response, "response is SepaTransfersPreprocessResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementBillPaymentsMerchantsGet
        /// </summary>
        [Test]
        public void V1MoneyMovementBillPaymentsMerchantsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string billerCategoryCode = null;
            //var response = instance.V1MoneyMovementBillPaymentsMerchantsGet(authorization, uuid, accept, clientId, billerCategoryCode);
            //Assert.IsInstanceOf<MerchantListResponse> (response, "response is MerchantListResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet
        /// </summary>
        [Test]
        public void V1MoneyMovementBillPaymentsMerchantsMerchantNumberGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string merchantNumber = null;
            //var response = instance.V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet(authorization, uuid, accept, clientId, merchantNumber);
            //Assert.IsInstanceOf<MerchantDetailsResponse> (response, "response is MerchantDetailsResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementBillPaymentsPayeesSourceAccountsGet
        /// </summary>
        [Test]
        public void V1MoneyMovementBillPaymentsPayeesSourceAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string nextStartIndex = null;
            //var response = instance.V1MoneyMovementBillPaymentsPayeesSourceAccountsGet(authorization, uuid, accept, clientId, nextStartIndex);
            //Assert.IsInstanceOf<BillPaymentAccountPayeeEligibilityResponse> (response, "response is BillPaymentAccountPayeeEligibilityResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementBillPaymentsPost
        /// </summary>
        [Test]
        public void V1MoneyMovementBillPaymentsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BillPaymentsRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementBillPaymentsPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<BillPaymentsResponse> (response, "response is BillPaymentsResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementBillPaymentsPreprocessAdhocPost
        /// </summary>
        [Test]
        public void V1MoneyMovementBillPaymentsPreprocessAdhocPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BillPaymentsPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementBillPaymentsPreprocessAdhocPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<BillPaymentsPreprocessResponse> (response, "response is BillPaymentsPreprocessResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementBillPaymentsPreprocessPost
        /// </summary>
        [Test]
        public void V1MoneyMovementBillPaymentsPreprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BillPaymentsPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementBillPaymentsPreprocessPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<BillPaymentsPreprocessResponse> (response, "response is BillPaymentsPreprocessResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet
        /// </summary>
        [Test]
        public void V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string nextStartIndex = null;
            //var response = instance.V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet(authorization, uuid, accept, clientId, nextStartIndex);
            //Assert.IsInstanceOf<CitiGlobalTransfersAccountPayeeEligibilityResponse> (response, "response is CitiGlobalTransfersAccountPayeeEligibilityResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementCitiGlobalTransfersPost
        /// </summary>
        [Test]
        public void V1MoneyMovementCitiGlobalTransfersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CitiGlobalTransfersRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //var response = instance.V1MoneyMovementCitiGlobalTransfersPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            //Assert.IsInstanceOf<CitiGlobalTransfersResponse> (response, "response is CitiGlobalTransfersResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost
        /// </summary>
        [Test]
        public void V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AdhocCitiGlobalTransfersPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<AdhocCitiGlobalTransfersPreprocessResponse> (response, "response is AdhocCitiGlobalTransfersPreprocessResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementCitiGlobalTransfersPreprocessPost
        /// </summary>
        [Test]
        public void V1MoneyMovementCitiGlobalTransfersPreprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CitiGlobalTransfersPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementCitiGlobalTransfersPreprocessPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<CitiGlobalTransfersPreprocessResponse> (response, "response is CitiGlobalTransfersPreprocessResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet
        /// </summary>
        [Test]
        public void V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string nextStartIndex = null;
            //var response = instance.V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet(authorization, uuid, accept, clientId, nextStartIndex);
            //Assert.IsInstanceOf<CrossBorderWireTransfersAccountPayeeEligibilityResponse> (response, "response is CrossBorderWireTransfersAccountPayeeEligibilityResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementCrossBorderWireTransfersPost
        /// </summary>
        [Test]
        public void V1MoneyMovementCrossBorderWireTransfersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CrossBorderWireTransfersRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //var response = instance.V1MoneyMovementCrossBorderWireTransfersPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            //Assert.IsInstanceOf<CrossBorderWireTransfersResponse> (response, "response is CrossBorderWireTransfersResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost
        /// </summary>
        [Test]
        public void V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AdhocCrossBorderWireTransfersPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<AdhocCrossBorderWireTransfersPreprocessResponse> (response, "response is AdhocCrossBorderWireTransfersPreprocessResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementCrossBorderWireTransfersPreprocessPost
        /// </summary>
        [Test]
        public void V1MoneyMovementCrossBorderWireTransfersPreprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CrossBorderWireTransfersPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementCrossBorderWireTransfersPreprocessPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<CrossBorderWireTransfersPreprocessResponse> (response, "response is CrossBorderWireTransfersPreprocessResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementExternalDomesticTransferPreprocessPost
        /// </summary>
        [Test]
        public void V1MoneyMovementExternalDomesticTransferPreprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PreprocessFundTransferRequestExternalTransfer body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementExternalDomesticTransferPreprocessPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<PreprocessForFundTransferResponse> (response, "response is PreprocessForFundTransferResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet
        /// </summary>
        [Test]
        public void V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string nextStartIndex = null;
            //var response = instance.V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet(authorization, uuid, accept, clientId, nextStartIndex);
            //Assert.IsInstanceOf<ExtDmstcValidPayeeDestAcctsResponse> (response, "response is ExtDmstcValidPayeeDestAcctsResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementExternalDomesticTransfersPost
        /// </summary>
        [Test]
        public void V1MoneyMovementExternalDomesticTransfersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExternalDomesticTransferRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementExternalDomesticTransfersPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<ExternalDomesticTransferResponse> (response, "response is ExternalDomesticTransferResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost
        /// </summary>
        [Test]
        public void V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AdhocExtDmstcTransferPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<AdhocExtDmstcTransferPreprocessResponse> (response, "response is AdhocExtDmstcTransferPreprocessResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet
        /// </summary>
        [Test]
        public void V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string nextStartIndex = null;
            //var response = instance.V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet(authorization, uuid, accept, clientId, nextStartIndex);
            //Assert.IsInstanceOf<InternalDomesticValidSourceDestinationAcccountsResponse> (response, "response is InternalDomesticValidSourceDestinationAcccountsResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementInternalDomesticTransfersPost
        /// </summary>
        [Test]
        public void V1MoneyMovementInternalDomesticTransfersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InternalDomesticTransferRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementInternalDomesticTransfersPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<InternalDomesticTransferResponse> (response, "response is InternalDomesticTransferResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost
        /// </summary>
        [Test]
        public void V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AdhocInternalDmstcTransferPreprocessRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<AdhocInternalDmstcTransferPreprocessResponse> (response, "response is AdhocInternalDmstcTransferPreprocessResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementInternalDomesticTransfersPreprocessPost
        /// </summary>
        [Test]
        public void V1MoneyMovementInternalDomesticTransfersPreprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PreprocessFundTransferRequestInternalTransfer body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementInternalDomesticTransfersPreprocessPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<PreprocessForFundTransferResponse> (response, "response is PreprocessForFundTransferResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementPayeesGet
        /// </summary>
        [Test]
        public void V1MoneyMovementPayeesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string paymentType = null;
            //string nextStartIndex = null;
            //var response = instance.V1MoneyMovementPayeesGet(authorization, uuid, accept, clientId, paymentType, nextStartIndex);
            //Assert.IsInstanceOf<PayeeListResponse> (response, "response is PayeeListResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementPayeesPayeeIdGet
        /// </summary>
        [Test]
        public void V1MoneyMovementPayeesPayeeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string payeeId = null;
            //var response = instance.V1MoneyMovementPayeesPayeeIdGet(authorization, uuid, accept, clientId, payeeId);
            //Assert.IsInstanceOf<PayeeDetailsResponse> (response, "response is PayeeDetailsResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementPayeesSourceAccountsGet
        /// </summary>
        [Test]
        public void V1MoneyMovementPayeesSourceAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string paymentType = null;
            //string nextStartIndex = null;
            //var response = instance.V1MoneyMovementPayeesSourceAccountsGet(authorization, uuid, accept, clientId, paymentType, nextStartIndex);
            //Assert.IsInstanceOf<ValidSourceDestinationAccountsResponse> (response, "response is ValidSourceDestinationAccountsResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet
        /// </summary>
        [Test]
        public void V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //var response = instance.V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet(authorization, uuid, accept, clientId);
            //Assert.IsInstanceOf<PersonalDomesticValidSrcDesAcctRes> (response, "response is PersonalDomesticValidSrcDesAcctRes");
        }
        /// <summary>
        /// Test V1MoneyMovementPersonalDomesticTransfersPost
        /// </summary>
        [Test]
        public void V1MoneyMovementPersonalDomesticTransfersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PersonalDomesticTransferRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementPersonalDomesticTransfersPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<PersonalDomesticTransferResponse> (response, "response is PersonalDomesticTransferResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementPersonalDomesticTransfersPreprocessPost
        /// </summary>
        [Test]
        public void V1MoneyMovementPersonalDomesticTransfersPreprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PreprocessFundTransferRequestPersonalTransfer body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //var response = instance.V1MoneyMovementPersonalDomesticTransfersPreprocessPost(body, authorization, uuid, accept, clientId, contentType);
            //Assert.IsInstanceOf<PreprocessForFundTransferResponse> (response, "response is PreprocessForFundTransferResponse");
        }
        /// <summary>
        /// Test V1MoneyMovementSepaTransfersPost
        /// </summary>
        [Test]
        public void V1MoneyMovementSepaTransfersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SepaTransferRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //var response = instance.V1MoneyMovementSepaTransfersPost(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            //Assert.IsInstanceOf<SepaTransferResponse> (response, "response is SepaTransferResponse");
        }
    }

}
