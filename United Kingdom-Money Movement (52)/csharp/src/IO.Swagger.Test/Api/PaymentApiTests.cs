/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PaymentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PaymentApiTests
    {
        private PaymentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PaymentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PaymentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PaymentApi
            //Assert.IsInstanceOfType(typeof(PaymentApi), instance, "instance is a PaymentApi");
        }

        /// <summary>
        /// Test ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync
        /// </summary>
        [Test]
        public void ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //string nextStartIndex = null;
            //var response = instance.ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync(body, authorization, uuid, accept, clientId, contentType, clientDetails, nextStartIndex);
            //Assert.IsInstanceOf<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse> (response, "response is ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse");
        }
        /// <summary>
        /// Test ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync
        /// </summary>
        [Test]
        public void ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest body = null;
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string contentType = null;
            //string clientDetails = null;
            //var response = instance.ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync(body, authorization, uuid, accept, clientId, contentType, clientDetails);
            //Assert.IsInstanceOf<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse> (response, "response is ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse");
        }
        /// <summary>
        /// Test RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility
        /// </summary>
        [Test]
        public void RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string clientDetails = null;
            //string nextStartIndex = null;
            //var response = instance.RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility(authorization, uuid, accept, clientId, clientDetails, nextStartIndex);
            //Assert.IsInstanceOf<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse> (response, "response is RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse");
        }
        /// <summary>
        /// Test RetrievePaymentInitiationTransactionMultipleTransfersStatus
        /// </summary>
        [Test]
        public void RetrievePaymentInitiationTransactionMultipleTransfersStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string uuid = null;
            //string accept = null;
            //string clientId = null;
            //string citiBundleId = null;
            //string clientDetails = null;
            //string startIndex = null;
            //var response = instance.RetrievePaymentInitiationTransactionMultipleTransfersStatus(authorization, uuid, accept, clientId, citiBundleId, clientDetails, startIndex);
            //Assert.IsInstanceOf<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse> (response, "response is RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse");
        }
    }

}
