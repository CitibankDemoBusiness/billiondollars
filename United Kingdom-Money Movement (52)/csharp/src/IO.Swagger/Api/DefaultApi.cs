/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Destination Source Account SEPA
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of SEPA transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>SepaTransfersAccountPayeeEligibilityResponse</returns>
        SepaTransfersAccountPayeeEligibilityResponse V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account SEPA
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of SEPA transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of SepaTransfersAccountPayeeEligibilityResponse</returns>
        ApiResponse<SepaTransfersAccountPayeeEligibilityResponse> V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Create adhoc SEPA transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new SEPA transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocSepaTransfersPreprocessResponse</returns>
        AdhocSepaTransfersPreprocessResponse V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost (AdhocSepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create adhoc SEPA transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new SEPA transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocSepaTransfersPreprocessResponse</returns>
        ApiResponse<AdhocSepaTransfersPreprocessResponse> V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPostWithHttpInfo (AdhocSepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create SEPA Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new SEPA transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>SepaTransfersPreprocessResponse</returns>
        SepaTransfersPreprocessResponse V1EmeaMoneyMovementSepaTransfersPreprocessPost (SepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create SEPA Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new SEPA transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of SepaTransfersPreprocessResponse</returns>
        ApiResponse<SepaTransfersPreprocessResponse> V1EmeaMoneyMovementSepaTransfersPreprocessPostWithHttpInfo (SepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Merchant List
        /// </summary>
        /// <remarks>
        /// This API is used  to retrieve list of merchants based on Biller category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="billerCategoryCode">Biller Category Code is a classification code that is assigned by a bank to a biller.This is a reference data field. Please use /v1/utilities/referenceData/{billerCategoryCode} resource to get valid value of this field with description (optional)</param>
        /// <returns>MerchantListResponse</returns>
        MerchantListResponse V1MoneyMovementBillPaymentsMerchantsGet (string authorization, string uuid, string accept, string clientId, string billerCategoryCode = null);

        /// <summary>
        /// Retrieve Merchant List
        /// </summary>
        /// <remarks>
        /// This API is used  to retrieve list of merchants based on Biller category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="billerCategoryCode">Biller Category Code is a classification code that is assigned by a bank to a biller.This is a reference data field. Please use /v1/utilities/referenceData/{billerCategoryCode} resource to get valid value of this field with description (optional)</param>
        /// <returns>ApiResponse of MerchantListResponse</returns>
        ApiResponse<MerchantListResponse> V1MoneyMovementBillPaymentsMerchantsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string billerCategoryCode = null);
        /// <summary>
        /// Retrieve Merchant Details
        /// </summary>
        /// <remarks>
        /// This API is used to returns additional merchant information for a specific merchant during add payee or bill payment
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="merchantNumber">A string that uniquely identifies a merchant.</param>
        /// <returns>MerchantDetailsResponse</returns>
        MerchantDetailsResponse V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet (string authorization, string uuid, string accept, string clientId, string merchantNumber);

        /// <summary>
        /// Retrieve Merchant Details
        /// </summary>
        /// <remarks>
        /// This API is used to returns additional merchant information for a specific merchant during add payee or bill payment
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="merchantNumber">A string that uniquely identifies a merchant.</param>
        /// <returns>ApiResponse of MerchantDetailsResponse</returns>
        ApiResponse<MerchantDetailsResponse> V1MoneyMovementBillPaymentsMerchantsMerchantNumberGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string merchantNumber);
        /// <summary>
        /// Retrieve Destination Source Account Bill Pay
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of domestic bill pay destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>BillPaymentAccountPayeeEligibilityResponse</returns>
        BillPaymentAccountPayeeEligibilityResponse V1MoneyMovementBillPaymentsPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account Bill Pay
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of domestic bill pay destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of BillPaymentAccountPayeeEligibilityResponse</returns>
        ApiResponse<BillPaymentAccountPayeeEligibilityResponse> V1MoneyMovementBillPaymentsPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm Bill Payment
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the domestic bill payment. It should be called after successfully creating an domestic bill payment. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>BillPaymentsResponse</returns>
        BillPaymentsResponse V1MoneyMovementBillPaymentsPost (BillPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Confirm Bill Payment
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the domestic bill payment. It should be called after successfully creating an domestic bill payment. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of BillPaymentsResponse</returns>
        ApiResponse<BillPaymentsResponse> V1MoneyMovementBillPaymentsPostWithHttpInfo (BillPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Adhoc Bill Payment
        /// </summary>
        /// <remarks>
        /// This API creates a new domestic bill payment to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>BillPaymentsPreprocessResponse</returns>
        BillPaymentsPreprocessResponse V1MoneyMovementBillPaymentsPreprocessAdhocPost (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc Bill Payment
        /// </summary>
        /// <remarks>
        /// This API creates a new domestic bill payment to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of BillPaymentsPreprocessResponse</returns>
        ApiResponse<BillPaymentsPreprocessResponse> V1MoneyMovementBillPaymentsPreprocessAdhocPostWithHttpInfo (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Bill Payment
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new domestic bill payment and verify  that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>BillPaymentsPreprocessResponse</returns>
        BillPaymentsPreprocessResponse V1MoneyMovementBillPaymentsPreprocessPost (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Bill Payment
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new domestic bill payment and verify  that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of BillPaymentsPreprocessResponse</returns>
        ApiResponse<BillPaymentsPreprocessResponse> V1MoneyMovementBillPaymentsPreprocessPostWithHttpInfo (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Destination Source Account Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to return the valid combinations of Citi global transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>CitiGlobalTransfersAccountPayeeEligibilityResponse</returns>
        CitiGlobalTransfersAccountPayeeEligibilityResponse V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to return the valid combinations of Citi global transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of CitiGlobalTransfersAccountPayeeEligibilityResponse</returns>
        ApiResponse<CitiGlobalTransfersAccountPayeeEligibilityResponse> V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the Citi global transfer. It should be called after successfully creating the Citi global transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>CitiGlobalTransfersResponse</returns>
        CitiGlobalTransfersResponse V1MoneyMovementCitiGlobalTransfersPost (CitiGlobalTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Confirm Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the Citi global transfer. It should be called after successfully creating the Citi global transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of CitiGlobalTransfersResponse</returns>
        ApiResponse<CitiGlobalTransfersResponse> V1MoneyMovementCitiGlobalTransfersPostWithHttpInfo (CitiGlobalTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Create Adhoc Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new Citi global transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocCitiGlobalTransfersPreprocessResponse</returns>
        AdhocCitiGlobalTransfersPreprocessResponse V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost (AdhocCitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new Citi global transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocCitiGlobalTransfersPreprocessResponse</returns>
        ApiResponse<AdhocCitiGlobalTransfersPreprocessResponse> V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPostWithHttpInfo (AdhocCitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new Citi global transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>CitiGlobalTransfersPreprocessResponse</returns>
        CitiGlobalTransfersPreprocessResponse V1MoneyMovementCitiGlobalTransfersPreprocessPost (CitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new Citi global transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of CitiGlobalTransfersPreprocessResponse</returns>
        ApiResponse<CitiGlobalTransfersPreprocessResponse> V1MoneyMovementCitiGlobalTransfersPreprocessPostWithHttpInfo (CitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Destination Source Account Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of cross border transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>CrossBorderWireTransfersAccountPayeeEligibilityResponse</returns>
        CrossBorderWireTransfersAccountPayeeEligibilityResponse V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of cross border transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of CrossBorderWireTransfersAccountPayeeEligibilityResponse</returns>
        ApiResponse<CrossBorderWireTransfersAccountPayeeEligibilityResponse> V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to confirms the cross border transfer. It should be called after successfully creating the cross border transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>CrossBorderWireTransfersResponse</returns>
        CrossBorderWireTransfersResponse V1MoneyMovementCrossBorderWireTransfersPost (CrossBorderWireTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Confirm Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to confirms the cross border transfer. It should be called after successfully creating the cross border transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of CrossBorderWireTransfersResponse</returns>
        ApiResponse<CrossBorderWireTransfersResponse> V1MoneyMovementCrossBorderWireTransfersPostWithHttpInfo (CrossBorderWireTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Create Adhoc Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new cross border transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocCrossBorderWireTransfersPreprocessResponse</returns>
        AdhocCrossBorderWireTransfersPreprocessResponse V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost (AdhocCrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new cross border transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocCrossBorderWireTransfersPreprocessResponse</returns>
        ApiResponse<AdhocCrossBorderWireTransfersPreprocessResponse> V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPostWithHttpInfo (AdhocCrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new cross border transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>CrossBorderWireTransfersPreprocessResponse</returns>
        CrossBorderWireTransfersPreprocessResponse V1MoneyMovementCrossBorderWireTransfersPreprocessPost (CrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new cross border transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of CrossBorderWireTransfersPreprocessResponse</returns>
        ApiResponse<CrossBorderWireTransfersPreprocessResponse> V1MoneyMovementCrossBorderWireTransfersPreprocessPostWithHttpInfo (CrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create External Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new external domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>PreprocessForFundTransferResponse</returns>
        PreprocessForFundTransferResponse V1MoneyMovementExternalDomesticTransferPreprocessPost (PreprocessFundTransferRequestExternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create External Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new external domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of PreprocessForFundTransferResponse</returns>
        ApiResponse<PreprocessForFundTransferResponse> V1MoneyMovementExternalDomesticTransferPreprocessPostWithHttpInfo (PreprocessFundTransferRequestExternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Destination Source Account - External Transfers
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of external domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ExtDmstcValidPayeeDestAcctsResponse</returns>
        ExtDmstcValidPayeeDestAcctsResponse V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account - External Transfers
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of external domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of ExtDmstcValidPayeeDestAcctsResponse</returns>
        ApiResponse<ExtDmstcValidPayeeDestAcctsResponse> V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm External Transfer
        /// </summary>
        /// <remarks>
        /// This API confirms the external domestic transfer. It should be called after successfully creating the external domestic transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ExternalDomesticTransferResponse</returns>
        ExternalDomesticTransferResponse V1MoneyMovementExternalDomesticTransfersPost (ExternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Confirm External Transfer
        /// </summary>
        /// <remarks>
        /// This API confirms the external domestic transfer. It should be called after successfully creating the external domestic transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of ExternalDomesticTransferResponse</returns>
        ApiResponse<ExternalDomesticTransferResponse> V1MoneyMovementExternalDomesticTransfersPostWithHttpInfo (ExternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Adhoc External Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new external domestic transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocExtDmstcTransferPreprocessResponse</returns>
        AdhocExtDmstcTransferPreprocessResponse V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost (AdhocExtDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc External Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new external domestic transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocExtDmstcTransferPreprocessResponse</returns>
        ApiResponse<AdhocExtDmstcTransferPreprocessResponse> V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPostWithHttpInfo (AdhocExtDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Destination Source Account - Internal Transfers
        /// </summary>
        /// <remarks>
        /// This API Returns the valid combinations of the internal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>InternalDomesticValidSourceDestinationAcccountsResponse</returns>
        InternalDomesticValidSourceDestinationAcccountsResponse V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account - Internal Transfers
        /// </summary>
        /// <remarks>
        /// This API Returns the valid combinations of the internal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of InternalDomesticValidSourceDestinationAcccountsResponse</returns>
        ApiResponse<InternalDomesticValidSourceDestinationAcccountsResponse> V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API confirms the internal domestic transfer. It should be called after successfully creating the internal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>InternalDomesticTransferResponse</returns>
        InternalDomesticTransferResponse V1MoneyMovementInternalDomesticTransfersPost (InternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Confirm Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API confirms the internal domestic transfer. It should be called after successfully creating the internal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of InternalDomesticTransferResponse</returns>
        ApiResponse<InternalDomesticTransferResponse> V1MoneyMovementInternalDomesticTransfersPostWithHttpInfo (InternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Adhoc Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to create a new Internal domestic transfer to an adhoc destination and verify there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocInternalDmstcTransferPreprocessResponse</returns>
        AdhocInternalDmstcTransferPreprocessResponse V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost (AdhocInternalDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to create a new Internal domestic transfer to an adhoc destination and verify there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocInternalDmstcTransferPreprocessResponse</returns>
        ApiResponse<AdhocInternalDmstcTransferPreprocessResponse> V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPostWithHttpInfo (AdhocInternalDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to create  a new Internal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>PreprocessForFundTransferResponse</returns>
        PreprocessForFundTransferResponse V1MoneyMovementInternalDomesticTransfersPreprocessPost (PreprocessFundTransferRequestInternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to create  a new Internal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of PreprocessForFundTransferResponse</returns>
        ApiResponse<PreprocessForFundTransferResponse> V1MoneyMovementInternalDomesticTransfersPreprocessPostWithHttpInfo (PreprocessFundTransferRequestInternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Payee List
        /// </summary>
        /// <remarks>
        /// This API is used to return a list of payees (active and inactive) or destination accounts for the customer who authorized your app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer on-boarding</param>
        /// <param name="paymentType">The payment type. This is a reference data field. Please use /v1/utilities//referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as referenceCode parameter to retrieve the values. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>PayeeListResponse</returns>
        PayeeListResponse V1MoneyMovementPayeesGet (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Payee List
        /// </summary>
        /// <remarks>
        /// This API is used to return a list of payees (active and inactive) or destination accounts for the customer who authorized your app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer on-boarding</param>
        /// <param name="paymentType">The payment type. This is a reference data field. Please use /v1/utilities//referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as referenceCode parameter to retrieve the values. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of PayeeListResponse</returns>
        ApiResponse<PayeeListResponse> V1MoneyMovementPayeesGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null);
        /// <summary>
        /// Retrieve Payee Details by Payee Id
        /// </summary>
        /// <remarks>
        /// This API returns the complete payee details associated with a payee id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="payeeId">Unique identifier associated with the payee.</param>
        /// <returns>PayeeDetailsResponse</returns>
        PayeeDetailsResponse V1MoneyMovementPayeesPayeeIdGet (string authorization, string uuid, string accept, string clientId, string payeeId);

        /// <summary>
        /// Retrieve Payee Details by Payee Id
        /// </summary>
        /// <remarks>
        /// This API returns the complete payee details associated with a payee id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="payeeId">Unique identifier associated with the payee.</param>
        /// <returns>ApiResponse of PayeeDetailsResponse</returns>
        ApiResponse<PayeeDetailsResponse> V1MoneyMovementPayeesPayeeIdGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string payeeId);
        /// <summary>
        /// Retrieve Destination Source Account
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of destination and source accounts of all payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">Payment Type. This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ValidSourceDestinationAccountsResponse</returns>
        ValidSourceDestinationAccountsResponse V1MoneyMovementPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of destination and source accounts of all payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">Payment Type. This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of ValidSourceDestinationAccountsResponse</returns>
        ApiResponse<ValidSourceDestinationAccountsResponse> V1MoneyMovementPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null);
        /// <summary>
        /// Retrieve Destination Source Account - Personal Transfers
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of personal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <returns>PersonalDomesticValidSrcDesAcctRes</returns>
        PersonalDomesticValidSrcDesAcctRes V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet (string authorization, string uuid, string accept, string clientId);

        /// <summary>
        /// Retrieve Destination Source Account - Personal Transfers
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of personal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <returns>ApiResponse of PersonalDomesticValidSrcDesAcctRes</returns>
        ApiResponse<PersonalDomesticValidSrcDesAcctRes> V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId);
        /// <summary>
        /// Confirm Personal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the personal transfer. It should be called after successfully creating the personal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>PersonalDomesticTransferResponse</returns>
        PersonalDomesticTransferResponse V1MoneyMovementPersonalDomesticTransfersPost (PersonalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Confirm Personal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the personal transfer. It should be called after successfully creating the personal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of PersonalDomesticTransferResponse</returns>
        ApiResponse<PersonalDomesticTransferResponse> V1MoneyMovementPersonalDomesticTransfersPostWithHttpInfo (PersonalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Personal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new personal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation tpage so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>PreprocessForFundTransferResponse</returns>
        PreprocessForFundTransferResponse V1MoneyMovementPersonalDomesticTransfersPreprocessPost (PreprocessFundTransferRequestPersonalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Personal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new personal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation tpage so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of PreprocessForFundTransferResponse</returns>
        ApiResponse<PreprocessForFundTransferResponse> V1MoneyMovementPersonalDomesticTransfersPreprocessPostWithHttpInfo (PreprocessFundTransferRequestPersonalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Confirm SEPA transfer
        /// </summary>
        /// <remarks>
        /// This API is used to confirm the SEPA transfer. It should be called after successfully creating the SEPA transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>SepaTransferResponse</returns>
        SepaTransferResponse V1MoneyMovementSepaTransfersPost (SepaTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Confirm SEPA transfer
        /// </summary>
        /// <remarks>
        /// This API is used to confirm the SEPA transfer. It should be called after successfully creating the SEPA transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of SepaTransferResponse</returns>
        ApiResponse<SepaTransferResponse> V1MoneyMovementSepaTransfersPostWithHttpInfo (SepaTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Destination Source Account SEPA
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of SEPA transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of SepaTransfersAccountPayeeEligibilityResponse</returns>
        System.Threading.Tasks.Task<SepaTransfersAccountPayeeEligibilityResponse> V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account SEPA
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of SEPA transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (SepaTransfersAccountPayeeEligibilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SepaTransfersAccountPayeeEligibilityResponse>> V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Create adhoc SEPA transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new SEPA transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocSepaTransfersPreprocessResponse</returns>
        System.Threading.Tasks.Task<AdhocSepaTransfersPreprocessResponse> V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPostAsync (AdhocSepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create adhoc SEPA transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new SEPA transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocSepaTransfersPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdhocSepaTransfersPreprocessResponse>> V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocSepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create SEPA Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new SEPA transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of SepaTransfersPreprocessResponse</returns>
        System.Threading.Tasks.Task<SepaTransfersPreprocessResponse> V1EmeaMoneyMovementSepaTransfersPreprocessPostAsync (SepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create SEPA Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new SEPA transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (SepaTransfersPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SepaTransfersPreprocessResponse>> V1EmeaMoneyMovementSepaTransfersPreprocessPostAsyncWithHttpInfo (SepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Merchant List
        /// </summary>
        /// <remarks>
        /// This API is used  to retrieve list of merchants based on Biller category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="billerCategoryCode">Biller Category Code is a classification code that is assigned by a bank to a biller.This is a reference data field. Please use /v1/utilities/referenceData/{billerCategoryCode} resource to get valid value of this field with description (optional)</param>
        /// <returns>Task of MerchantListResponse</returns>
        System.Threading.Tasks.Task<MerchantListResponse> V1MoneyMovementBillPaymentsMerchantsGetAsync (string authorization, string uuid, string accept, string clientId, string billerCategoryCode = null);

        /// <summary>
        /// Retrieve Merchant List
        /// </summary>
        /// <remarks>
        /// This API is used  to retrieve list of merchants based on Biller category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="billerCategoryCode">Biller Category Code is a classification code that is assigned by a bank to a biller.This is a reference data field. Please use /v1/utilities/referenceData/{billerCategoryCode} resource to get valid value of this field with description (optional)</param>
        /// <returns>Task of ApiResponse (MerchantListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantListResponse>> V1MoneyMovementBillPaymentsMerchantsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string billerCategoryCode = null);
        /// <summary>
        /// Retrieve Merchant Details
        /// </summary>
        /// <remarks>
        /// This API is used to returns additional merchant information for a specific merchant during add payee or bill payment
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="merchantNumber">A string that uniquely identifies a merchant.</param>
        /// <returns>Task of MerchantDetailsResponse</returns>
        System.Threading.Tasks.Task<MerchantDetailsResponse> V1MoneyMovementBillPaymentsMerchantsMerchantNumberGetAsync (string authorization, string uuid, string accept, string clientId, string merchantNumber);

        /// <summary>
        /// Retrieve Merchant Details
        /// </summary>
        /// <remarks>
        /// This API is used to returns additional merchant information for a specific merchant during add payee or bill payment
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="merchantNumber">A string that uniquely identifies a merchant.</param>
        /// <returns>Task of ApiResponse (MerchantDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantDetailsResponse>> V1MoneyMovementBillPaymentsMerchantsMerchantNumberGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string merchantNumber);
        /// <summary>
        /// Retrieve Destination Source Account Bill Pay
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of domestic bill pay destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of BillPaymentAccountPayeeEligibilityResponse</returns>
        System.Threading.Tasks.Task<BillPaymentAccountPayeeEligibilityResponse> V1MoneyMovementBillPaymentsPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account Bill Pay
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of domestic bill pay destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (BillPaymentAccountPayeeEligibilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillPaymentAccountPayeeEligibilityResponse>> V1MoneyMovementBillPaymentsPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm Bill Payment
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the domestic bill payment. It should be called after successfully creating an domestic bill payment. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of BillPaymentsResponse</returns>
        System.Threading.Tasks.Task<BillPaymentsResponse> V1MoneyMovementBillPaymentsPostAsync (BillPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Confirm Bill Payment
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the domestic bill payment. It should be called after successfully creating an domestic bill payment. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (BillPaymentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillPaymentsResponse>> V1MoneyMovementBillPaymentsPostAsyncWithHttpInfo (BillPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Adhoc Bill Payment
        /// </summary>
        /// <remarks>
        /// This API creates a new domestic bill payment to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of BillPaymentsPreprocessResponse</returns>
        System.Threading.Tasks.Task<BillPaymentsPreprocessResponse> V1MoneyMovementBillPaymentsPreprocessAdhocPostAsync (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc Bill Payment
        /// </summary>
        /// <remarks>
        /// This API creates a new domestic bill payment to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (BillPaymentsPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillPaymentsPreprocessResponse>> V1MoneyMovementBillPaymentsPreprocessAdhocPostAsyncWithHttpInfo (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Bill Payment
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new domestic bill payment and verify  that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of BillPaymentsPreprocessResponse</returns>
        System.Threading.Tasks.Task<BillPaymentsPreprocessResponse> V1MoneyMovementBillPaymentsPreprocessPostAsync (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Bill Payment
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new domestic bill payment and verify  that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (BillPaymentsPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillPaymentsPreprocessResponse>> V1MoneyMovementBillPaymentsPreprocessPostAsyncWithHttpInfo (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Destination Source Account Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to return the valid combinations of Citi global transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of CitiGlobalTransfersAccountPayeeEligibilityResponse</returns>
        System.Threading.Tasks.Task<CitiGlobalTransfersAccountPayeeEligibilityResponse> V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to return the valid combinations of Citi global transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (CitiGlobalTransfersAccountPayeeEligibilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CitiGlobalTransfersAccountPayeeEligibilityResponse>> V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the Citi global transfer. It should be called after successfully creating the Citi global transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of CitiGlobalTransfersResponse</returns>
        System.Threading.Tasks.Task<CitiGlobalTransfersResponse> V1MoneyMovementCitiGlobalTransfersPostAsync (CitiGlobalTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Confirm Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the Citi global transfer. It should be called after successfully creating the Citi global transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (CitiGlobalTransfersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CitiGlobalTransfersResponse>> V1MoneyMovementCitiGlobalTransfersPostAsyncWithHttpInfo (CitiGlobalTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Create Adhoc Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new Citi global transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocCitiGlobalTransfersPreprocessResponse</returns>
        System.Threading.Tasks.Task<AdhocCitiGlobalTransfersPreprocessResponse> V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPostAsync (AdhocCitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new Citi global transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocCitiGlobalTransfersPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdhocCitiGlobalTransfersPreprocessResponse>> V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocCitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new Citi global transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of CitiGlobalTransfersPreprocessResponse</returns>
        System.Threading.Tasks.Task<CitiGlobalTransfersPreprocessResponse> V1MoneyMovementCitiGlobalTransfersPreprocessPostAsync (CitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Citi Global Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new Citi global transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (CitiGlobalTransfersPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CitiGlobalTransfersPreprocessResponse>> V1MoneyMovementCitiGlobalTransfersPreprocessPostAsyncWithHttpInfo (CitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Destination Source Account Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of cross border transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of CrossBorderWireTransfersAccountPayeeEligibilityResponse</returns>
        System.Threading.Tasks.Task<CrossBorderWireTransfersAccountPayeeEligibilityResponse> V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of cross border transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (CrossBorderWireTransfersAccountPayeeEligibilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrossBorderWireTransfersAccountPayeeEligibilityResponse>> V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to confirms the cross border transfer. It should be called after successfully creating the cross border transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of CrossBorderWireTransfersResponse</returns>
        System.Threading.Tasks.Task<CrossBorderWireTransfersResponse> V1MoneyMovementCrossBorderWireTransfersPostAsync (CrossBorderWireTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Confirm Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to confirms the cross border transfer. It should be called after successfully creating the cross border transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (CrossBorderWireTransfersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrossBorderWireTransfersResponse>> V1MoneyMovementCrossBorderWireTransfersPostAsyncWithHttpInfo (CrossBorderWireTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Create Adhoc Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new cross border transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocCrossBorderWireTransfersPreprocessResponse</returns>
        System.Threading.Tasks.Task<AdhocCrossBorderWireTransfersPreprocessResponse> V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPostAsync (AdhocCrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new cross border transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocCrossBorderWireTransfersPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdhocCrossBorderWireTransfersPreprocessResponse>> V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocCrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new cross border transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of CrossBorderWireTransfersPreprocessResponse</returns>
        System.Threading.Tasks.Task<CrossBorderWireTransfersPreprocessResponse> V1MoneyMovementCrossBorderWireTransfersPreprocessPostAsync (CrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Cross Border Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new cross border transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (CrossBorderWireTransfersPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CrossBorderWireTransfersPreprocessResponse>> V1MoneyMovementCrossBorderWireTransfersPreprocessPostAsyncWithHttpInfo (CrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create External Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new external domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of PreprocessForFundTransferResponse</returns>
        System.Threading.Tasks.Task<PreprocessForFundTransferResponse> V1MoneyMovementExternalDomesticTransferPreprocessPostAsync (PreprocessFundTransferRequestExternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create External Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new external domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (PreprocessForFundTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreprocessForFundTransferResponse>> V1MoneyMovementExternalDomesticTransferPreprocessPostAsyncWithHttpInfo (PreprocessFundTransferRequestExternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Destination Source Account - External Transfers
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of external domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ExtDmstcValidPayeeDestAcctsResponse</returns>
        System.Threading.Tasks.Task<ExtDmstcValidPayeeDestAcctsResponse> V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account - External Transfers
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of external domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (ExtDmstcValidPayeeDestAcctsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtDmstcValidPayeeDestAcctsResponse>> V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm External Transfer
        /// </summary>
        /// <remarks>
        /// This API confirms the external domestic transfer. It should be called after successfully creating the external domestic transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ExternalDomesticTransferResponse</returns>
        System.Threading.Tasks.Task<ExternalDomesticTransferResponse> V1MoneyMovementExternalDomesticTransfersPostAsync (ExternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Confirm External Transfer
        /// </summary>
        /// <remarks>
        /// This API confirms the external domestic transfer. It should be called after successfully creating the external domestic transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (ExternalDomesticTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalDomesticTransferResponse>> V1MoneyMovementExternalDomesticTransfersPostAsyncWithHttpInfo (ExternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Adhoc External Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new external domestic transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocExtDmstcTransferPreprocessResponse</returns>
        System.Threading.Tasks.Task<AdhocExtDmstcTransferPreprocessResponse> V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPostAsync (AdhocExtDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc External Transfer
        /// </summary>
        /// <remarks>
        /// This API creates a new external domestic transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocExtDmstcTransferPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdhocExtDmstcTransferPreprocessResponse>> V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocExtDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Destination Source Account - Internal Transfers
        /// </summary>
        /// <remarks>
        /// This API Returns the valid combinations of the internal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of InternalDomesticValidSourceDestinationAcccountsResponse</returns>
        System.Threading.Tasks.Task<InternalDomesticValidSourceDestinationAcccountsResponse> V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account - Internal Transfers
        /// </summary>
        /// <remarks>
        /// This API Returns the valid combinations of the internal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (InternalDomesticValidSourceDestinationAcccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InternalDomesticValidSourceDestinationAcccountsResponse>> V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null);
        /// <summary>
        /// Confirm Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API confirms the internal domestic transfer. It should be called after successfully creating the internal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of InternalDomesticTransferResponse</returns>
        System.Threading.Tasks.Task<InternalDomesticTransferResponse> V1MoneyMovementInternalDomesticTransfersPostAsync (InternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Confirm Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API confirms the internal domestic transfer. It should be called after successfully creating the internal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (InternalDomesticTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InternalDomesticTransferResponse>> V1MoneyMovementInternalDomesticTransfersPostAsyncWithHttpInfo (InternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Adhoc Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to create a new Internal domestic transfer to an adhoc destination and verify there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocInternalDmstcTransferPreprocessResponse</returns>
        System.Threading.Tasks.Task<AdhocInternalDmstcTransferPreprocessResponse> V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPostAsync (AdhocInternalDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Adhoc Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to create a new Internal domestic transfer to an adhoc destination and verify there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocInternalDmstcTransferPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdhocInternalDmstcTransferPreprocessResponse>> V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocInternalDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to create  a new Internal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of PreprocessForFundTransferResponse</returns>
        System.Threading.Tasks.Task<PreprocessForFundTransferResponse> V1MoneyMovementInternalDomesticTransfersPreprocessPostAsync (PreprocessFundTransferRequestInternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Internal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to create  a new Internal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (PreprocessForFundTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreprocessForFundTransferResponse>> V1MoneyMovementInternalDomesticTransfersPreprocessPostAsyncWithHttpInfo (PreprocessFundTransferRequestInternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Retrieve Payee List
        /// </summary>
        /// <remarks>
        /// This API is used to return a list of payees (active and inactive) or destination accounts for the customer who authorized your app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer on-boarding</param>
        /// <param name="paymentType">The payment type. This is a reference data field. Please use /v1/utilities//referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as referenceCode parameter to retrieve the values. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of PayeeListResponse</returns>
        System.Threading.Tasks.Task<PayeeListResponse> V1MoneyMovementPayeesGetAsync (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Payee List
        /// </summary>
        /// <remarks>
        /// This API is used to return a list of payees (active and inactive) or destination accounts for the customer who authorized your app.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer on-boarding</param>
        /// <param name="paymentType">The payment type. This is a reference data field. Please use /v1/utilities//referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as referenceCode parameter to retrieve the values. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (PayeeListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayeeListResponse>> V1MoneyMovementPayeesGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null);
        /// <summary>
        /// Retrieve Payee Details by Payee Id
        /// </summary>
        /// <remarks>
        /// This API returns the complete payee details associated with a payee id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="payeeId">Unique identifier associated with the payee.</param>
        /// <returns>Task of PayeeDetailsResponse</returns>
        System.Threading.Tasks.Task<PayeeDetailsResponse> V1MoneyMovementPayeesPayeeIdGetAsync (string authorization, string uuid, string accept, string clientId, string payeeId);

        /// <summary>
        /// Retrieve Payee Details by Payee Id
        /// </summary>
        /// <remarks>
        /// This API returns the complete payee details associated with a payee id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="payeeId">Unique identifier associated with the payee.</param>
        /// <returns>Task of ApiResponse (PayeeDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayeeDetailsResponse>> V1MoneyMovementPayeesPayeeIdGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string payeeId);
        /// <summary>
        /// Retrieve Destination Source Account
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of destination and source accounts of all payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">Payment Type. This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ValidSourceDestinationAccountsResponse</returns>
        System.Threading.Tasks.Task<ValidSourceDestinationAccountsResponse> V1MoneyMovementPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null);

        /// <summary>
        /// Retrieve Destination Source Account
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of destination and source accounts of all payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">Payment Type. This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (ValidSourceDestinationAccountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidSourceDestinationAccountsResponse>> V1MoneyMovementPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null);
        /// <summary>
        /// Retrieve Destination Source Account - Personal Transfers
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of personal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <returns>Task of PersonalDomesticValidSrcDesAcctRes</returns>
        System.Threading.Tasks.Task<PersonalDomesticValidSrcDesAcctRes> V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId);

        /// <summary>
        /// Retrieve Destination Source Account - Personal Transfers
        /// </summary>
        /// <remarks>
        /// This API returns the valid combinations of personal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <returns>Task of ApiResponse (PersonalDomesticValidSrcDesAcctRes)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalDomesticValidSrcDesAcctRes>> V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId);
        /// <summary>
        /// Confirm Personal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the personal transfer. It should be called after successfully creating the personal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of PersonalDomesticTransferResponse</returns>
        System.Threading.Tasks.Task<PersonalDomesticTransferResponse> V1MoneyMovementPersonalDomesticTransfersPostAsync (PersonalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Confirm Personal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Confirm the personal transfer. It should be called after successfully creating the personal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (PersonalDomesticTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalDomesticTransferResponse>> V1MoneyMovementPersonalDomesticTransfersPostAsyncWithHttpInfo (PersonalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Create Personal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new personal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation tpage so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of PreprocessForFundTransferResponse</returns>
        System.Threading.Tasks.Task<PreprocessForFundTransferResponse> V1MoneyMovementPersonalDomesticTransfersPreprocessPostAsync (PreprocessFundTransferRequestPersonalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);

        /// <summary>
        /// Create Personal Transfer
        /// </summary>
        /// <remarks>
        /// This API is used to Create a new personal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation tpage so the customer can review the transaction before confirming.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (PreprocessForFundTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreprocessForFundTransferResponse>> V1MoneyMovementPersonalDomesticTransfersPreprocessPostAsyncWithHttpInfo (PreprocessFundTransferRequestPersonalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType);
        /// <summary>
        /// Confirm SEPA transfer
        /// </summary>
        /// <remarks>
        /// This API is used to confirm the SEPA transfer. It should be called after successfully creating the SEPA transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of SepaTransferResponse</returns>
        System.Threading.Tasks.Task<SepaTransferResponse> V1MoneyMovementSepaTransfersPostAsync (SepaTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Confirm SEPA transfer
        /// </summary>
        /// <remarks>
        /// This API is used to confirm the SEPA transfer. It should be called after successfully creating the SEPA transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (SepaTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SepaTransferResponse>> V1MoneyMovementSepaTransfersPostAsyncWithHttpInfo (SepaTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieve Destination Source Account SEPA This API returns the valid combinations of SEPA transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>SepaTransfersAccountPayeeEligibilityResponse</returns>
        public SepaTransfersAccountPayeeEligibilityResponse V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<SepaTransfersAccountPayeeEligibilityResponse> localVarResponse = V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGetWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Destination Source Account SEPA This API returns the valid combinations of SEPA transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of SepaTransfersAccountPayeeEligibilityResponse</returns>
        public ApiResponse< SepaTransfersAccountPayeeEligibilityResponse > V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/emea/moneyMovement/sepaTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SepaTransfersAccountPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SepaTransfersAccountPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SepaTransfersAccountPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account SEPA This API returns the valid combinations of SEPA transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of SepaTransfersAccountPayeeEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<SepaTransfersAccountPayeeEligibilityResponse> V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<SepaTransfersAccountPayeeEligibilityResponse> localVarResponse = await V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Destination Source Account SEPA This API returns the valid combinations of SEPA transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (SepaTransfersAccountPayeeEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SepaTransfersAccountPayeeEligibilityResponse>> V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/emea/moneyMovement/sepaTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EmeaMoneyMovementSepaTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SepaTransfersAccountPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SepaTransfersAccountPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SepaTransfersAccountPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Create adhoc SEPA transfer This API creates a new SEPA transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocSepaTransfersPreprocessResponse</returns>
        public AdhocSepaTransfersPreprocessResponse V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost (AdhocSepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocSepaTransfersPreprocessResponse> localVarResponse = V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create adhoc SEPA transfer This API creates a new SEPA transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocSepaTransfersPreprocessResponse</returns>
        public ApiResponse< AdhocSepaTransfersPreprocessResponse > V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPostWithHttpInfo (AdhocSepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/emea/moneyMovement/sepaTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocSepaTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocSepaTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocSepaTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create adhoc SEPA transfer This API creates a new SEPA transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocSepaTransfersPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<AdhocSepaTransfersPreprocessResponse> V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPostAsync (AdhocSepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocSepaTransfersPreprocessResponse> localVarResponse = await V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create adhoc SEPA transfer This API creates a new SEPA transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocSepaTransfersPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdhocSepaTransfersPreprocessResponse>> V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocSepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/emea/moneyMovement/sepaTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EmeaMoneyMovementSepaTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocSepaTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocSepaTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocSepaTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create SEPA Transfer This API creates a new SEPA transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>SepaTransfersPreprocessResponse</returns>
        public SepaTransfersPreprocessResponse V1EmeaMoneyMovementSepaTransfersPreprocessPost (SepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<SepaTransfersPreprocessResponse> localVarResponse = V1EmeaMoneyMovementSepaTransfersPreprocessPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create SEPA Transfer This API creates a new SEPA transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of SepaTransfersPreprocessResponse</returns>
        public ApiResponse< SepaTransfersPreprocessResponse > V1EmeaMoneyMovementSepaTransfersPreprocessPostWithHttpInfo (SepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");

            var localVarPath = "/v1/emea/moneyMovement/sepaTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EmeaMoneyMovementSepaTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SepaTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SepaTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SepaTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create SEPA Transfer This API creates a new SEPA transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of SepaTransfersPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<SepaTransfersPreprocessResponse> V1EmeaMoneyMovementSepaTransfersPreprocessPostAsync (SepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<SepaTransfersPreprocessResponse> localVarResponse = await V1EmeaMoneyMovementSepaTransfersPreprocessPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create SEPA Transfer This API creates a new SEPA transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (SepaTransfersPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SepaTransfersPreprocessResponse>> V1EmeaMoneyMovementSepaTransfersPreprocessPostAsyncWithHttpInfo (SepaTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1EmeaMoneyMovementSepaTransfersPreprocessPost");

            var localVarPath = "/v1/emea/moneyMovement/sepaTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1EmeaMoneyMovementSepaTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SepaTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SepaTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SepaTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Retrieve Merchant List This API is used  to retrieve list of merchants based on Biller category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="billerCategoryCode">Biller Category Code is a classification code that is assigned by a bank to a biller.This is a reference data field. Please use /v1/utilities/referenceData/{billerCategoryCode} resource to get valid value of this field with description (optional)</param>
        /// <returns>MerchantListResponse</returns>
        public MerchantListResponse V1MoneyMovementBillPaymentsMerchantsGet (string authorization, string uuid, string accept, string clientId, string billerCategoryCode = null)
        {
             ApiResponse<MerchantListResponse> localVarResponse = V1MoneyMovementBillPaymentsMerchantsGetWithHttpInfo(authorization, uuid, accept, clientId, billerCategoryCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Merchant List This API is used  to retrieve list of merchants based on Biller category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="billerCategoryCode">Biller Category Code is a classification code that is assigned by a bank to a biller.This is a reference data field. Please use /v1/utilities/referenceData/{billerCategoryCode} resource to get valid value of this field with description (optional)</param>
        /// <returns>ApiResponse of MerchantListResponse</returns>
        public ApiResponse< MerchantListResponse > V1MoneyMovementBillPaymentsMerchantsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string billerCategoryCode = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsGet");

            var localVarPath = "/v1/moneyMovement/billPayments/merchants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billerCategoryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billerCategoryCode", billerCategoryCode)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsMerchantsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantListResponse)));
        }

        /// <summary>
        /// Retrieve Merchant List This API is used  to retrieve list of merchants based on Biller category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="billerCategoryCode">Biller Category Code is a classification code that is assigned by a bank to a biller.This is a reference data field. Please use /v1/utilities/referenceData/{billerCategoryCode} resource to get valid value of this field with description (optional)</param>
        /// <returns>Task of MerchantListResponse</returns>
        public async System.Threading.Tasks.Task<MerchantListResponse> V1MoneyMovementBillPaymentsMerchantsGetAsync (string authorization, string uuid, string accept, string clientId, string billerCategoryCode = null)
        {
             ApiResponse<MerchantListResponse> localVarResponse = await V1MoneyMovementBillPaymentsMerchantsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, billerCategoryCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Merchant List This API is used  to retrieve list of merchants based on Biller category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="billerCategoryCode">Biller Category Code is a classification code that is assigned by a bank to a biller.This is a reference data field. Please use /v1/utilities/referenceData/{billerCategoryCode} resource to get valid value of this field with description (optional)</param>
        /// <returns>Task of ApiResponse (MerchantListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantListResponse>> V1MoneyMovementBillPaymentsMerchantsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string billerCategoryCode = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsGet");

            var localVarPath = "/v1/moneyMovement/billPayments/merchants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billerCategoryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billerCategoryCode", billerCategoryCode)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsMerchantsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantListResponse)));
        }

        /// <summary>
        /// Retrieve Merchant Details This API is used to returns additional merchant information for a specific merchant during add payee or bill payment
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="merchantNumber">A string that uniquely identifies a merchant.</param>
        /// <returns>MerchantDetailsResponse</returns>
        public MerchantDetailsResponse V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet (string authorization, string uuid, string accept, string clientId, string merchantNumber)
        {
             ApiResponse<MerchantDetailsResponse> localVarResponse = V1MoneyMovementBillPaymentsMerchantsMerchantNumberGetWithHttpInfo(authorization, uuid, accept, clientId, merchantNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Merchant Details This API is used to returns additional merchant information for a specific merchant during add payee or bill payment
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="merchantNumber">A string that uniquely identifies a merchant.</param>
        /// <returns>ApiResponse of MerchantDetailsResponse</returns>
        public ApiResponse< MerchantDetailsResponse > V1MoneyMovementBillPaymentsMerchantsMerchantNumberGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string merchantNumber)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");

            var localVarPath = "/v1/moneyMovement/billPayments/merchants/{merchantNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantNumber != null) localVarPathParams.Add("merchantNumber", this.Configuration.ApiClient.ParameterToString(merchantNumber)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantDetailsResponse)));
        }

        /// <summary>
        /// Retrieve Merchant Details This API is used to returns additional merchant information for a specific merchant during add payee or bill payment
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="merchantNumber">A string that uniquely identifies a merchant.</param>
        /// <returns>Task of MerchantDetailsResponse</returns>
        public async System.Threading.Tasks.Task<MerchantDetailsResponse> V1MoneyMovementBillPaymentsMerchantsMerchantNumberGetAsync (string authorization, string uuid, string accept, string clientId, string merchantNumber)
        {
             ApiResponse<MerchantDetailsResponse> localVarResponse = await V1MoneyMovementBillPaymentsMerchantsMerchantNumberGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, merchantNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Merchant Details This API is used to returns additional merchant information for a specific merchant during add payee or bill payment
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="merchantNumber">A string that uniquely identifies a merchant.</param>
        /// <returns>Task of ApiResponse (MerchantDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantDetailsResponse>> V1MoneyMovementBillPaymentsMerchantsMerchantNumberGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string merchantNumber)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling DefaultApi->V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet");

            var localVarPath = "/v1/moneyMovement/billPayments/merchants/{merchantNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantNumber != null) localVarPathParams.Add("merchantNumber", this.Configuration.ApiClient.ParameterToString(merchantNumber)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsMerchantsMerchantNumberGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantDetailsResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account Bill Pay This API returns the valid combinations of domestic bill pay destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>BillPaymentAccountPayeeEligibilityResponse</returns>
        public BillPaymentAccountPayeeEligibilityResponse V1MoneyMovementBillPaymentsPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<BillPaymentAccountPayeeEligibilityResponse> localVarResponse = V1MoneyMovementBillPaymentsPayeesSourceAccountsGetWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Destination Source Account Bill Pay This API returns the valid combinations of domestic bill pay destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of BillPaymentAccountPayeeEligibilityResponse</returns>
        public ApiResponse< BillPaymentAccountPayeeEligibilityResponse > V1MoneyMovementBillPaymentsPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/billPayments/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPaymentAccountPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillPaymentAccountPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPaymentAccountPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account Bill Pay This API returns the valid combinations of domestic bill pay destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of BillPaymentAccountPayeeEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<BillPaymentAccountPayeeEligibilityResponse> V1MoneyMovementBillPaymentsPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<BillPaymentAccountPayeeEligibilityResponse> localVarResponse = await V1MoneyMovementBillPaymentsPayeesSourceAccountsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Destination Source Account Bill Pay This API returns the valid combinations of domestic bill pay destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (BillPaymentAccountPayeeEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillPaymentAccountPayeeEligibilityResponse>> V1MoneyMovementBillPaymentsPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/billPayments/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPaymentAccountPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillPaymentAccountPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPaymentAccountPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Confirm Bill Payment This API is used to Confirm the domestic bill payment. It should be called after successfully creating an domestic bill payment. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>BillPaymentsResponse</returns>
        public BillPaymentsResponse V1MoneyMovementBillPaymentsPost (BillPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<BillPaymentsResponse> localVarResponse = V1MoneyMovementBillPaymentsPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm Bill Payment This API is used to Confirm the domestic bill payment. It should be called after successfully creating an domestic bill payment. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of BillPaymentsResponse</returns>
        public ApiResponse< BillPaymentsResponse > V1MoneyMovementBillPaymentsPostWithHttpInfo (BillPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");

            var localVarPath = "/v1/moneyMovement/billPayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPaymentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillPaymentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPaymentsResponse)));
        }

        /// <summary>
        /// Confirm Bill Payment This API is used to Confirm the domestic bill payment. It should be called after successfully creating an domestic bill payment. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of BillPaymentsResponse</returns>
        public async System.Threading.Tasks.Task<BillPaymentsResponse> V1MoneyMovementBillPaymentsPostAsync (BillPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<BillPaymentsResponse> localVarResponse = await V1MoneyMovementBillPaymentsPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm Bill Payment This API is used to Confirm the domestic bill payment. It should be called after successfully creating an domestic bill payment. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (BillPaymentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillPaymentsResponse>> V1MoneyMovementBillPaymentsPostAsyncWithHttpInfo (BillPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementBillPaymentsPost");

            var localVarPath = "/v1/moneyMovement/billPayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPaymentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillPaymentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPaymentsResponse)));
        }

        /// <summary>
        /// Create Adhoc Bill Payment This API creates a new domestic bill payment to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>BillPaymentsPreprocessResponse</returns>
        public BillPaymentsPreprocessResponse V1MoneyMovementBillPaymentsPreprocessAdhocPost (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<BillPaymentsPreprocessResponse> localVarResponse = V1MoneyMovementBillPaymentsPreprocessAdhocPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Adhoc Bill Payment This API creates a new domestic bill payment to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of BillPaymentsPreprocessResponse</returns>
        public ApiResponse< BillPaymentsPreprocessResponse > V1MoneyMovementBillPaymentsPreprocessAdhocPostWithHttpInfo (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/billPayments/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPaymentsPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillPaymentsPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPaymentsPreprocessResponse)));
        }

        /// <summary>
        /// Create Adhoc Bill Payment This API creates a new domestic bill payment to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of BillPaymentsPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<BillPaymentsPreprocessResponse> V1MoneyMovementBillPaymentsPreprocessAdhocPostAsync (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<BillPaymentsPreprocessResponse> localVarResponse = await V1MoneyMovementBillPaymentsPreprocessAdhocPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Adhoc Bill Payment This API creates a new domestic bill payment to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (BillPaymentsPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillPaymentsPreprocessResponse>> V1MoneyMovementBillPaymentsPreprocessAdhocPostAsyncWithHttpInfo (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/billPayments/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPaymentsPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillPaymentsPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPaymentsPreprocessResponse)));
        }

        /// <summary>
        /// Create Bill Payment This API is used to Create a new domestic bill payment and verify  that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>BillPaymentsPreprocessResponse</returns>
        public BillPaymentsPreprocessResponse V1MoneyMovementBillPaymentsPreprocessPost (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<BillPaymentsPreprocessResponse> localVarResponse = V1MoneyMovementBillPaymentsPreprocessPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Bill Payment This API is used to Create a new domestic bill payment and verify  that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of BillPaymentsPreprocessResponse</returns>
        public ApiResponse< BillPaymentsPreprocessResponse > V1MoneyMovementBillPaymentsPreprocessPostWithHttpInfo (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");

            var localVarPath = "/v1/moneyMovement/billPayments/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPaymentsPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillPaymentsPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPaymentsPreprocessResponse)));
        }

        /// <summary>
        /// Create Bill Payment This API is used to Create a new domestic bill payment and verify  that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of BillPaymentsPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<BillPaymentsPreprocessResponse> V1MoneyMovementBillPaymentsPreprocessPostAsync (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<BillPaymentsPreprocessResponse> localVarResponse = await V1MoneyMovementBillPaymentsPreprocessPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Bill Payment This API is used to Create a new domestic bill payment and verify  that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (BillPaymentsPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillPaymentsPreprocessResponse>> V1MoneyMovementBillPaymentsPreprocessPostAsyncWithHttpInfo (BillPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementBillPaymentsPreprocessPost");

            var localVarPath = "/v1/moneyMovement/billPayments/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementBillPaymentsPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillPaymentsPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillPaymentsPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillPaymentsPreprocessResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account Citi Global Transfer This API is used to return the valid combinations of Citi global transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>CitiGlobalTransfersAccountPayeeEligibilityResponse</returns>
        public CitiGlobalTransfersAccountPayeeEligibilityResponse V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<CitiGlobalTransfersAccountPayeeEligibilityResponse> localVarResponse = V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGetWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Destination Source Account Citi Global Transfer This API is used to return the valid combinations of Citi global transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of CitiGlobalTransfersAccountPayeeEligibilityResponse</returns>
        public ApiResponse< CitiGlobalTransfersAccountPayeeEligibilityResponse > V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/citiGlobalTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitiGlobalTransfersAccountPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CitiGlobalTransfersAccountPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitiGlobalTransfersAccountPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account Citi Global Transfer This API is used to return the valid combinations of Citi global transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of CitiGlobalTransfersAccountPayeeEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<CitiGlobalTransfersAccountPayeeEligibilityResponse> V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<CitiGlobalTransfersAccountPayeeEligibilityResponse> localVarResponse = await V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Destination Source Account Citi Global Transfer This API is used to return the valid combinations of Citi global transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (CitiGlobalTransfersAccountPayeeEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CitiGlobalTransfersAccountPayeeEligibilityResponse>> V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/citiGlobalTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCitiGlobalTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitiGlobalTransfersAccountPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CitiGlobalTransfersAccountPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitiGlobalTransfersAccountPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Confirm Citi Global Transfer This API is used to Confirm the Citi global transfer. It should be called after successfully creating the Citi global transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>CitiGlobalTransfersResponse</returns>
        public CitiGlobalTransfersResponse V1MoneyMovementCitiGlobalTransfersPost (CitiGlobalTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<CitiGlobalTransfersResponse> localVarResponse = V1MoneyMovementCitiGlobalTransfersPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm Citi Global Transfer This API is used to Confirm the Citi global transfer. It should be called after successfully creating the Citi global transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of CitiGlobalTransfersResponse</returns>
        public ApiResponse< CitiGlobalTransfersResponse > V1MoneyMovementCitiGlobalTransfersPostWithHttpInfo (CitiGlobalTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");

            var localVarPath = "/v1/moneyMovement/citiGlobalTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCitiGlobalTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitiGlobalTransfersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CitiGlobalTransfersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitiGlobalTransfersResponse)));
        }

        /// <summary>
        /// Confirm Citi Global Transfer This API is used to Confirm the Citi global transfer. It should be called after successfully creating the Citi global transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of CitiGlobalTransfersResponse</returns>
        public async System.Threading.Tasks.Task<CitiGlobalTransfersResponse> V1MoneyMovementCitiGlobalTransfersPostAsync (CitiGlobalTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<CitiGlobalTransfersResponse> localVarResponse = await V1MoneyMovementCitiGlobalTransfersPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm Citi Global Transfer This API is used to Confirm the Citi global transfer. It should be called after successfully creating the Citi global transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (CitiGlobalTransfersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CitiGlobalTransfersResponse>> V1MoneyMovementCitiGlobalTransfersPostAsyncWithHttpInfo (CitiGlobalTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPost");

            var localVarPath = "/v1/moneyMovement/citiGlobalTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCitiGlobalTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitiGlobalTransfersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CitiGlobalTransfersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitiGlobalTransfersResponse)));
        }

        /// <summary>
        /// Create Adhoc Citi Global Transfer This API creates a new Citi global transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocCitiGlobalTransfersPreprocessResponse</returns>
        public AdhocCitiGlobalTransfersPreprocessResponse V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost (AdhocCitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocCitiGlobalTransfersPreprocessResponse> localVarResponse = V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Adhoc Citi Global Transfer This API creates a new Citi global transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocCitiGlobalTransfersPreprocessResponse</returns>
        public ApiResponse< AdhocCitiGlobalTransfersPreprocessResponse > V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPostWithHttpInfo (AdhocCitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/citiGlobalTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocCitiGlobalTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocCitiGlobalTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocCitiGlobalTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create Adhoc Citi Global Transfer This API creates a new Citi global transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocCitiGlobalTransfersPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<AdhocCitiGlobalTransfersPreprocessResponse> V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPostAsync (AdhocCitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocCitiGlobalTransfersPreprocessResponse> localVarResponse = await V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Adhoc Citi Global Transfer This API creates a new Citi global transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocCitiGlobalTransfersPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdhocCitiGlobalTransfersPreprocessResponse>> V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocCitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/citiGlobalTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCitiGlobalTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocCitiGlobalTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocCitiGlobalTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocCitiGlobalTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create Citi Global Transfer This API creates a new Citi global transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>CitiGlobalTransfersPreprocessResponse</returns>
        public CitiGlobalTransfersPreprocessResponse V1MoneyMovementCitiGlobalTransfersPreprocessPost (CitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<CitiGlobalTransfersPreprocessResponse> localVarResponse = V1MoneyMovementCitiGlobalTransfersPreprocessPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Citi Global Transfer This API creates a new Citi global transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of CitiGlobalTransfersPreprocessResponse</returns>
        public ApiResponse< CitiGlobalTransfersPreprocessResponse > V1MoneyMovementCitiGlobalTransfersPreprocessPostWithHttpInfo (CitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");

            var localVarPath = "/v1/moneyMovement/citiGlobalTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCitiGlobalTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitiGlobalTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CitiGlobalTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitiGlobalTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create Citi Global Transfer This API creates a new Citi global transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of CitiGlobalTransfersPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<CitiGlobalTransfersPreprocessResponse> V1MoneyMovementCitiGlobalTransfersPreprocessPostAsync (CitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<CitiGlobalTransfersPreprocessResponse> localVarResponse = await V1MoneyMovementCitiGlobalTransfersPreprocessPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Citi Global Transfer This API creates a new Citi global transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (CitiGlobalTransfersPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CitiGlobalTransfersPreprocessResponse>> V1MoneyMovementCitiGlobalTransfersPreprocessPostAsyncWithHttpInfo (CitiGlobalTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCitiGlobalTransfersPreprocessPost");

            var localVarPath = "/v1/moneyMovement/citiGlobalTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCitiGlobalTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitiGlobalTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CitiGlobalTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitiGlobalTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account Cross Border Transfer This API returns the valid combinations of cross border transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>CrossBorderWireTransfersAccountPayeeEligibilityResponse</returns>
        public CrossBorderWireTransfersAccountPayeeEligibilityResponse V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<CrossBorderWireTransfersAccountPayeeEligibilityResponse> localVarResponse = V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGetWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Destination Source Account Cross Border Transfer This API returns the valid combinations of cross border transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of CrossBorderWireTransfersAccountPayeeEligibilityResponse</returns>
        public ApiResponse< CrossBorderWireTransfersAccountPayeeEligibilityResponse > V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/crossBorderWireTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrossBorderWireTransfersAccountPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CrossBorderWireTransfersAccountPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrossBorderWireTransfersAccountPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account Cross Border Transfer This API returns the valid combinations of cross border transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of CrossBorderWireTransfersAccountPayeeEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<CrossBorderWireTransfersAccountPayeeEligibilityResponse> V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<CrossBorderWireTransfersAccountPayeeEligibilityResponse> localVarResponse = await V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Destination Source Account Cross Border Transfer This API returns the valid combinations of cross border transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (CrossBorderWireTransfersAccountPayeeEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrossBorderWireTransfersAccountPayeeEligibilityResponse>> V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/crossBorderWireTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCrossBorderWireTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrossBorderWireTransfersAccountPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CrossBorderWireTransfersAccountPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrossBorderWireTransfersAccountPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Confirm Cross Border Transfer This API is used to confirms the cross border transfer. It should be called after successfully creating the cross border transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>CrossBorderWireTransfersResponse</returns>
        public CrossBorderWireTransfersResponse V1MoneyMovementCrossBorderWireTransfersPost (CrossBorderWireTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<CrossBorderWireTransfersResponse> localVarResponse = V1MoneyMovementCrossBorderWireTransfersPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm Cross Border Transfer This API is used to confirms the cross border transfer. It should be called after successfully creating the cross border transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of CrossBorderWireTransfersResponse</returns>
        public ApiResponse< CrossBorderWireTransfersResponse > V1MoneyMovementCrossBorderWireTransfersPostWithHttpInfo (CrossBorderWireTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");

            var localVarPath = "/v1/moneyMovement/crossBorderWireTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCrossBorderWireTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrossBorderWireTransfersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CrossBorderWireTransfersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrossBorderWireTransfersResponse)));
        }

        /// <summary>
        /// Confirm Cross Border Transfer This API is used to confirms the cross border transfer. It should be called after successfully creating the cross border transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of CrossBorderWireTransfersResponse</returns>
        public async System.Threading.Tasks.Task<CrossBorderWireTransfersResponse> V1MoneyMovementCrossBorderWireTransfersPostAsync (CrossBorderWireTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<CrossBorderWireTransfersResponse> localVarResponse = await V1MoneyMovementCrossBorderWireTransfersPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm Cross Border Transfer This API is used to confirms the cross border transfer. It should be called after successfully creating the cross border transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (CrossBorderWireTransfersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrossBorderWireTransfersResponse>> V1MoneyMovementCrossBorderWireTransfersPostAsyncWithHttpInfo (CrossBorderWireTransfersRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPost");

            var localVarPath = "/v1/moneyMovement/crossBorderWireTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCrossBorderWireTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrossBorderWireTransfersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CrossBorderWireTransfersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrossBorderWireTransfersResponse)));
        }

        /// <summary>
        /// Create Adhoc Cross Border Transfer This API creates a new cross border transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocCrossBorderWireTransfersPreprocessResponse</returns>
        public AdhocCrossBorderWireTransfersPreprocessResponse V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost (AdhocCrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocCrossBorderWireTransfersPreprocessResponse> localVarResponse = V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Adhoc Cross Border Transfer This API creates a new cross border transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocCrossBorderWireTransfersPreprocessResponse</returns>
        public ApiResponse< AdhocCrossBorderWireTransfersPreprocessResponse > V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPostWithHttpInfo (AdhocCrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/crossBorderWireTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocCrossBorderWireTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocCrossBorderWireTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocCrossBorderWireTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create Adhoc Cross Border Transfer This API creates a new cross border transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocCrossBorderWireTransfersPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<AdhocCrossBorderWireTransfersPreprocessResponse> V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPostAsync (AdhocCrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocCrossBorderWireTransfersPreprocessResponse> localVarResponse = await V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Adhoc Cross Border Transfer This API creates a new cross border transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocCrossBorderWireTransfersPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdhocCrossBorderWireTransfersPreprocessResponse>> V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocCrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/crossBorderWireTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCrossBorderWireTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocCrossBorderWireTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocCrossBorderWireTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocCrossBorderWireTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create Cross Border Transfer This API creates a new cross border transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>CrossBorderWireTransfersPreprocessResponse</returns>
        public CrossBorderWireTransfersPreprocessResponse V1MoneyMovementCrossBorderWireTransfersPreprocessPost (CrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<CrossBorderWireTransfersPreprocessResponse> localVarResponse = V1MoneyMovementCrossBorderWireTransfersPreprocessPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Cross Border Transfer This API creates a new cross border transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of CrossBorderWireTransfersPreprocessResponse</returns>
        public ApiResponse< CrossBorderWireTransfersPreprocessResponse > V1MoneyMovementCrossBorderWireTransfersPreprocessPostWithHttpInfo (CrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");

            var localVarPath = "/v1/moneyMovement/crossBorderWireTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCrossBorderWireTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrossBorderWireTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CrossBorderWireTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrossBorderWireTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create Cross Border Transfer This API creates a new cross border transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of CrossBorderWireTransfersPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<CrossBorderWireTransfersPreprocessResponse> V1MoneyMovementCrossBorderWireTransfersPreprocessPostAsync (CrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<CrossBorderWireTransfersPreprocessResponse> localVarResponse = await V1MoneyMovementCrossBorderWireTransfersPreprocessPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Cross Border Transfer This API creates a new cross border transfer and verifies that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (CrossBorderWireTransfersPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CrossBorderWireTransfersPreprocessResponse>> V1MoneyMovementCrossBorderWireTransfersPreprocessPostAsyncWithHttpInfo (CrossBorderWireTransfersPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementCrossBorderWireTransfersPreprocessPost");

            var localVarPath = "/v1/moneyMovement/crossBorderWireTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementCrossBorderWireTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CrossBorderWireTransfersPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CrossBorderWireTransfersPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CrossBorderWireTransfersPreprocessResponse)));
        }

        /// <summary>
        /// Create External Transfer This API is used to Create a new external domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>PreprocessForFundTransferResponse</returns>
        public PreprocessForFundTransferResponse V1MoneyMovementExternalDomesticTransferPreprocessPost (PreprocessFundTransferRequestExternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<PreprocessForFundTransferResponse> localVarResponse = V1MoneyMovementExternalDomesticTransferPreprocessPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create External Transfer This API is used to Create a new external domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of PreprocessForFundTransferResponse</returns>
        public ApiResponse< PreprocessForFundTransferResponse > V1MoneyMovementExternalDomesticTransferPreprocessPostWithHttpInfo (PreprocessFundTransferRequestExternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");

            var localVarPath = "/v1/moneyMovement/externalDomesticTransfer/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementExternalDomesticTransferPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreprocessForFundTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreprocessForFundTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreprocessForFundTransferResponse)));
        }

        /// <summary>
        /// Create External Transfer This API is used to Create a new external domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of PreprocessForFundTransferResponse</returns>
        public async System.Threading.Tasks.Task<PreprocessForFundTransferResponse> V1MoneyMovementExternalDomesticTransferPreprocessPostAsync (PreprocessFundTransferRequestExternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<PreprocessForFundTransferResponse> localVarResponse = await V1MoneyMovementExternalDomesticTransferPreprocessPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create External Transfer This API is used to Create a new external domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (PreprocessForFundTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PreprocessForFundTransferResponse>> V1MoneyMovementExternalDomesticTransferPreprocessPostAsyncWithHttpInfo (PreprocessFundTransferRequestExternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementExternalDomesticTransferPreprocessPost");

            var localVarPath = "/v1/moneyMovement/externalDomesticTransfer/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementExternalDomesticTransferPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreprocessForFundTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreprocessForFundTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreprocessForFundTransferResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account - External Transfers This API returns the valid combinations of external domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ExtDmstcValidPayeeDestAcctsResponse</returns>
        public ExtDmstcValidPayeeDestAcctsResponse V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<ExtDmstcValidPayeeDestAcctsResponse> localVarResponse = V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGetWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Destination Source Account - External Transfers This API returns the valid combinations of external domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of ExtDmstcValidPayeeDestAcctsResponse</returns>
        public ApiResponse< ExtDmstcValidPayeeDestAcctsResponse > V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/externalDomesticTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtDmstcValidPayeeDestAcctsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtDmstcValidPayeeDestAcctsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtDmstcValidPayeeDestAcctsResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account - External Transfers This API returns the valid combinations of external domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ExtDmstcValidPayeeDestAcctsResponse</returns>
        public async System.Threading.Tasks.Task<ExtDmstcValidPayeeDestAcctsResponse> V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<ExtDmstcValidPayeeDestAcctsResponse> localVarResponse = await V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Destination Source Account - External Transfers This API returns the valid combinations of external domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (ExtDmstcValidPayeeDestAcctsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtDmstcValidPayeeDestAcctsResponse>> V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/externalDomesticTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementExternalDomesticTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtDmstcValidPayeeDestAcctsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExtDmstcValidPayeeDestAcctsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtDmstcValidPayeeDestAcctsResponse)));
        }

        /// <summary>
        /// Confirm External Transfer This API confirms the external domestic transfer. It should be called after successfully creating the external domestic transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ExternalDomesticTransferResponse</returns>
        public ExternalDomesticTransferResponse V1MoneyMovementExternalDomesticTransfersPost (ExternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<ExternalDomesticTransferResponse> localVarResponse = V1MoneyMovementExternalDomesticTransfersPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm External Transfer This API confirms the external domestic transfer. It should be called after successfully creating the external domestic transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of ExternalDomesticTransferResponse</returns>
        public ApiResponse< ExternalDomesticTransferResponse > V1MoneyMovementExternalDomesticTransfersPostWithHttpInfo (ExternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");

            var localVarPath = "/v1/moneyMovement/externalDomesticTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementExternalDomesticTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalDomesticTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExternalDomesticTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalDomesticTransferResponse)));
        }

        /// <summary>
        /// Confirm External Transfer This API confirms the external domestic transfer. It should be called after successfully creating the external domestic transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ExternalDomesticTransferResponse</returns>
        public async System.Threading.Tasks.Task<ExternalDomesticTransferResponse> V1MoneyMovementExternalDomesticTransfersPostAsync (ExternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<ExternalDomesticTransferResponse> localVarResponse = await V1MoneyMovementExternalDomesticTransfersPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm External Transfer This API confirms the external domestic transfer. It should be called after successfully creating the external domestic transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (ExternalDomesticTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalDomesticTransferResponse>> V1MoneyMovementExternalDomesticTransfersPostAsyncWithHttpInfo (ExternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPost");

            var localVarPath = "/v1/moneyMovement/externalDomesticTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementExternalDomesticTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalDomesticTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExternalDomesticTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalDomesticTransferResponse)));
        }

        /// <summary>
        /// Create Adhoc External Transfer This API creates a new external domestic transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocExtDmstcTransferPreprocessResponse</returns>
        public AdhocExtDmstcTransferPreprocessResponse V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost (AdhocExtDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocExtDmstcTransferPreprocessResponse> localVarResponse = V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Adhoc External Transfer This API creates a new external domestic transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocExtDmstcTransferPreprocessResponse</returns>
        public ApiResponse< AdhocExtDmstcTransferPreprocessResponse > V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPostWithHttpInfo (AdhocExtDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/externalDomesticTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocExtDmstcTransferPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocExtDmstcTransferPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocExtDmstcTransferPreprocessResponse)));
        }

        /// <summary>
        /// Create Adhoc External Transfer This API creates a new external domestic transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocExtDmstcTransferPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<AdhocExtDmstcTransferPreprocessResponse> V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPostAsync (AdhocExtDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocExtDmstcTransferPreprocessResponse> localVarResponse = await V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Adhoc External Transfer This API creates a new external domestic transfer to an adhoc destination and verifies there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocExtDmstcTransferPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdhocExtDmstcTransferPreprocessResponse>> V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocExtDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/externalDomesticTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementExternalDomesticTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocExtDmstcTransferPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocExtDmstcTransferPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocExtDmstcTransferPreprocessResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account - Internal Transfers This API Returns the valid combinations of the internal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>InternalDomesticValidSourceDestinationAcccountsResponse</returns>
        public InternalDomesticValidSourceDestinationAcccountsResponse V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<InternalDomesticValidSourceDestinationAcccountsResponse> localVarResponse = V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGetWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Destination Source Account - Internal Transfers This API Returns the valid combinations of the internal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of InternalDomesticValidSourceDestinationAcccountsResponse</returns>
        public ApiResponse< InternalDomesticValidSourceDestinationAcccountsResponse > V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/internalDomesticTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InternalDomesticValidSourceDestinationAcccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InternalDomesticValidSourceDestinationAcccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InternalDomesticValidSourceDestinationAcccountsResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account - Internal Transfers This API Returns the valid combinations of the internal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of InternalDomesticValidSourceDestinationAcccountsResponse</returns>
        public async System.Threading.Tasks.Task<InternalDomesticValidSourceDestinationAcccountsResponse> V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
             ApiResponse<InternalDomesticValidSourceDestinationAcccountsResponse> localVarResponse = await V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Destination Source Account - Internal Transfers This API Returns the valid combinations of the internal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (InternalDomesticValidSourceDestinationAcccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InternalDomesticValidSourceDestinationAcccountsResponse>> V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/internalDomesticTransfers/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementInternalDomesticTransfersPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InternalDomesticValidSourceDestinationAcccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InternalDomesticValidSourceDestinationAcccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InternalDomesticValidSourceDestinationAcccountsResponse)));
        }

        /// <summary>
        /// Confirm Internal Transfer This API confirms the internal domestic transfer. It should be called after successfully creating the internal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>InternalDomesticTransferResponse</returns>
        public InternalDomesticTransferResponse V1MoneyMovementInternalDomesticTransfersPost (InternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<InternalDomesticTransferResponse> localVarResponse = V1MoneyMovementInternalDomesticTransfersPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm Internal Transfer This API confirms the internal domestic transfer. It should be called after successfully creating the internal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of InternalDomesticTransferResponse</returns>
        public ApiResponse< InternalDomesticTransferResponse > V1MoneyMovementInternalDomesticTransfersPostWithHttpInfo (InternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");

            var localVarPath = "/v1/moneyMovement/internalDomesticTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementInternalDomesticTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InternalDomesticTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InternalDomesticTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InternalDomesticTransferResponse)));
        }

        /// <summary>
        /// Confirm Internal Transfer This API confirms the internal domestic transfer. It should be called after successfully creating the internal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of InternalDomesticTransferResponse</returns>
        public async System.Threading.Tasks.Task<InternalDomesticTransferResponse> V1MoneyMovementInternalDomesticTransfersPostAsync (InternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<InternalDomesticTransferResponse> localVarResponse = await V1MoneyMovementInternalDomesticTransfersPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm Internal Transfer This API confirms the internal domestic transfer. It should be called after successfully creating the internal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (InternalDomesticTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InternalDomesticTransferResponse>> V1MoneyMovementInternalDomesticTransfersPostAsyncWithHttpInfo (InternalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPost");

            var localVarPath = "/v1/moneyMovement/internalDomesticTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementInternalDomesticTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InternalDomesticTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InternalDomesticTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InternalDomesticTransferResponse)));
        }

        /// <summary>
        /// Create Adhoc Internal Transfer This API is used to create a new Internal domestic transfer to an adhoc destination and verify there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>AdhocInternalDmstcTransferPreprocessResponse</returns>
        public AdhocInternalDmstcTransferPreprocessResponse V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost (AdhocInternalDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocInternalDmstcTransferPreprocessResponse> localVarResponse = V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Adhoc Internal Transfer This API is used to create a new Internal domestic transfer to an adhoc destination and verify there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of AdhocInternalDmstcTransferPreprocessResponse</returns>
        public ApiResponse< AdhocInternalDmstcTransferPreprocessResponse > V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPostWithHttpInfo (AdhocInternalDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/internalDomesticTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocInternalDmstcTransferPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocInternalDmstcTransferPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocInternalDmstcTransferPreprocessResponse)));
        }

        /// <summary>
        /// Create Adhoc Internal Transfer This API is used to create a new Internal domestic transfer to an adhoc destination and verify there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of AdhocInternalDmstcTransferPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<AdhocInternalDmstcTransferPreprocessResponse> V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPostAsync (AdhocInternalDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<AdhocInternalDmstcTransferPreprocessResponse> localVarResponse = await V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Adhoc Internal Transfer This API is used to create a new Internal domestic transfer to an adhoc destination and verify there are no errors. The destination does not need to be in a payee list. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (AdhocInternalDmstcTransferPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdhocInternalDmstcTransferPreprocessResponse>> V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPostAsyncWithHttpInfo (AdhocInternalDmstcTransferPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost");

            var localVarPath = "/v1/moneyMovement/internalDomesticTransfers/preprocess/adhoc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementInternalDomesticTransfersPreprocessAdhocPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdhocInternalDmstcTransferPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AdhocInternalDmstcTransferPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdhocInternalDmstcTransferPreprocessResponse)));
        }

        /// <summary>
        /// Create Internal Transfer This API is used to create  a new Internal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>PreprocessForFundTransferResponse</returns>
        public PreprocessForFundTransferResponse V1MoneyMovementInternalDomesticTransfersPreprocessPost (PreprocessFundTransferRequestInternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<PreprocessForFundTransferResponse> localVarResponse = V1MoneyMovementInternalDomesticTransfersPreprocessPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Internal Transfer This API is used to create  a new Internal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of PreprocessForFundTransferResponse</returns>
        public ApiResponse< PreprocessForFundTransferResponse > V1MoneyMovementInternalDomesticTransfersPreprocessPostWithHttpInfo (PreprocessFundTransferRequestInternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");

            var localVarPath = "/v1/moneyMovement/internalDomesticTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementInternalDomesticTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreprocessForFundTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreprocessForFundTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreprocessForFundTransferResponse)));
        }

        /// <summary>
        /// Create Internal Transfer This API is used to create  a new Internal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of PreprocessForFundTransferResponse</returns>
        public async System.Threading.Tasks.Task<PreprocessForFundTransferResponse> V1MoneyMovementInternalDomesticTransfersPreprocessPostAsync (PreprocessFundTransferRequestInternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<PreprocessForFundTransferResponse> localVarResponse = await V1MoneyMovementInternalDomesticTransfersPreprocessPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Internal Transfer This API is used to create  a new Internal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation page so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (PreprocessForFundTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PreprocessForFundTransferResponse>> V1MoneyMovementInternalDomesticTransfersPreprocessPostAsyncWithHttpInfo (PreprocessFundTransferRequestInternalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementInternalDomesticTransfersPreprocessPost");

            var localVarPath = "/v1/moneyMovement/internalDomesticTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementInternalDomesticTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreprocessForFundTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreprocessForFundTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreprocessForFundTransferResponse)));
        }

        /// <summary>
        /// Retrieve Payee List This API is used to return a list of payees (active and inactive) or destination accounts for the customer who authorized your app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer on-boarding</param>
        /// <param name="paymentType">The payment type. This is a reference data field. Please use /v1/utilities//referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as referenceCode parameter to retrieve the values. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>PayeeListResponse</returns>
        public PayeeListResponse V1MoneyMovementPayeesGet (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null)
        {
             ApiResponse<PayeeListResponse> localVarResponse = V1MoneyMovementPayeesGetWithHttpInfo(authorization, uuid, accept, clientId, paymentType, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Payee List This API is used to return a list of payees (active and inactive) or destination accounts for the customer who authorized your app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer on-boarding</param>
        /// <param name="paymentType">The payment type. This is a reference data field. Please use /v1/utilities//referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as referenceCode parameter to retrieve the values. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of PayeeListResponse</returns>
        public ApiResponse< PayeeListResponse > V1MoneyMovementPayeesGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPayeesGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPayeesGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPayeesGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPayeesGet");

            var localVarPath = "/v1/moneyMovement/payees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentType", paymentType)); // query parameter
            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPayeesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayeeListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PayeeListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayeeListResponse)));
        }

        /// <summary>
        /// Retrieve Payee List This API is used to return a list of payees (active and inactive) or destination accounts for the customer who authorized your app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer on-boarding</param>
        /// <param name="paymentType">The payment type. This is a reference data field. Please use /v1/utilities//referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as referenceCode parameter to retrieve the values. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of PayeeListResponse</returns>
        public async System.Threading.Tasks.Task<PayeeListResponse> V1MoneyMovementPayeesGetAsync (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null)
        {
             ApiResponse<PayeeListResponse> localVarResponse = await V1MoneyMovementPayeesGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, paymentType, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Payee List This API is used to return a list of payees (active and inactive) or destination accounts for the customer who authorized your app.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">client id generated during consumer on-boarding</param>
        /// <param name="paymentType">The payment type. This is a reference data field. Please use /v1/utilities//referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as referenceCode parameter to retrieve the values. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (PayeeListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayeeListResponse>> V1MoneyMovementPayeesGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPayeesGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPayeesGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPayeesGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPayeesGet");

            var localVarPath = "/v1/moneyMovement/payees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentType", paymentType)); // query parameter
            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPayeesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayeeListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PayeeListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayeeListResponse)));
        }

        /// <summary>
        /// Retrieve Payee Details by Payee Id This API returns the complete payee details associated with a payee id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="payeeId">Unique identifier associated with the payee.</param>
        /// <returns>PayeeDetailsResponse</returns>
        public PayeeDetailsResponse V1MoneyMovementPayeesPayeeIdGet (string authorization, string uuid, string accept, string clientId, string payeeId)
        {
             ApiResponse<PayeeDetailsResponse> localVarResponse = V1MoneyMovementPayeesPayeeIdGetWithHttpInfo(authorization, uuid, accept, clientId, payeeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Payee Details by Payee Id This API returns the complete payee details associated with a payee id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="payeeId">Unique identifier associated with the payee.</param>
        /// <returns>ApiResponse of PayeeDetailsResponse</returns>
        public ApiResponse< PayeeDetailsResponse > V1MoneyMovementPayeesPayeeIdGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string payeeId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");
            // verify the required parameter 'payeeId' is set
            if (payeeId == null)
                throw new ApiException(400, "Missing required parameter 'payeeId' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");

            var localVarPath = "/v1/moneyMovement/payees/{payeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payeeId != null) localVarPathParams.Add("payeeId", this.Configuration.ApiClient.ParameterToString(payeeId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPayeesPayeeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayeeDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PayeeDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayeeDetailsResponse)));
        }

        /// <summary>
        /// Retrieve Payee Details by Payee Id This API returns the complete payee details associated with a payee id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="payeeId">Unique identifier associated with the payee.</param>
        /// <returns>Task of PayeeDetailsResponse</returns>
        public async System.Threading.Tasks.Task<PayeeDetailsResponse> V1MoneyMovementPayeesPayeeIdGetAsync (string authorization, string uuid, string accept, string clientId, string payeeId)
        {
             ApiResponse<PayeeDetailsResponse> localVarResponse = await V1MoneyMovementPayeesPayeeIdGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, payeeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Payee Details by Payee Id This API returns the complete payee details associated with a payee id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="payeeId">Unique identifier associated with the payee.</param>
        /// <returns>Task of ApiResponse (PayeeDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PayeeDetailsResponse>> V1MoneyMovementPayeesPayeeIdGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string payeeId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");
            // verify the required parameter 'payeeId' is set
            if (payeeId == null)
                throw new ApiException(400, "Missing required parameter 'payeeId' when calling DefaultApi->V1MoneyMovementPayeesPayeeIdGet");

            var localVarPath = "/v1/moneyMovement/payees/{payeeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payeeId != null) localVarPathParams.Add("payeeId", this.Configuration.ApiClient.ParameterToString(payeeId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPayeesPayeeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PayeeDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PayeeDetailsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PayeeDetailsResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account This API returns the valid combinations of destination and source accounts of all payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">Payment Type. This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ValidSourceDestinationAccountsResponse</returns>
        public ValidSourceDestinationAccountsResponse V1MoneyMovementPayeesSourceAccountsGet (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null)
        {
             ApiResponse<ValidSourceDestinationAccountsResponse> localVarResponse = V1MoneyMovementPayeesSourceAccountsGetWithHttpInfo(authorization, uuid, accept, clientId, paymentType, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Destination Source Account This API returns the valid combinations of destination and source accounts of all payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">Payment Type. This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of ValidSourceDestinationAccountsResponse</returns>
        public ApiResponse< ValidSourceDestinationAccountsResponse > V1MoneyMovementPayeesSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentType", paymentType)); // query parameter
            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidSourceDestinationAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidSourceDestinationAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidSourceDestinationAccountsResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account This API returns the valid combinations of destination and source accounts of all payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">Payment Type. This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ValidSourceDestinationAccountsResponse</returns>
        public async System.Threading.Tasks.Task<ValidSourceDestinationAccountsResponse> V1MoneyMovementPayeesSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null)
        {
             ApiResponse<ValidSourceDestinationAccountsResponse> localVarResponse = await V1MoneyMovementPayeesSourceAccountsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId, paymentType, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Destination Source Account This API returns the valid combinations of destination and source accounts of all payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">Payment Type. This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (ValidSourceDestinationAccountsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ValidSourceDestinationAccountsResponse>> V1MoneyMovementPayeesSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPayeesSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPayeesSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPayeesSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPayeesSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/payees/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentType", paymentType)); // query parameter
            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPayeesSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ValidSourceDestinationAccountsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ValidSourceDestinationAccountsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ValidSourceDestinationAccountsResponse)));
        }

        /// <summary>
        /// Retrieve Destination Source Account - Personal Transfers This API returns the valid combinations of personal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <returns>PersonalDomesticValidSrcDesAcctRes</returns>
        public PersonalDomesticValidSrcDesAcctRes V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet (string authorization, string uuid, string accept, string clientId)
        {
             ApiResponse<PersonalDomesticValidSrcDesAcctRes> localVarResponse = V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGetWithHttpInfo(authorization, uuid, accept, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Destination Source Account - Personal Transfers This API returns the valid combinations of personal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <returns>ApiResponse of PersonalDomesticValidSrcDesAcctRes</returns>
        public ApiResponse< PersonalDomesticValidSrcDesAcctRes > V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGetWithHttpInfo (string authorization, string uuid, string accept, string clientId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/personalDomesticTransfers/destinationAccounts/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalDomesticValidSrcDesAcctRes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalDomesticValidSrcDesAcctRes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalDomesticValidSrcDesAcctRes)));
        }

        /// <summary>
        /// Retrieve Destination Source Account - Personal Transfers This API returns the valid combinations of personal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <returns>Task of PersonalDomesticValidSrcDesAcctRes</returns>
        public async System.Threading.Tasks.Task<PersonalDomesticValidSrcDesAcctRes> V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGetAsync (string authorization, string uuid, string accept, string clientId)
        {
             ApiResponse<PersonalDomesticValidSrcDesAcctRes> localVarResponse = await V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGetAsyncWithHttpInfo(authorization, uuid, accept, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Destination Source Account - Personal Transfers This API returns the valid combinations of personal domestic transfer destination and source accounts. This information may be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <returns>Task of ApiResponse (PersonalDomesticValidSrcDesAcctRes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalDomesticValidSrcDesAcctRes>> V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGetAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet");

            var localVarPath = "/v1/moneyMovement/personalDomesticTransfers/destinationAccounts/sourceAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPersonalDomesticTransfersDestinationAccountsSourceAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalDomesticValidSrcDesAcctRes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalDomesticValidSrcDesAcctRes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalDomesticValidSrcDesAcctRes)));
        }

        /// <summary>
        /// Confirm Personal Transfer This API is used to Confirm the personal transfer. It should be called after successfully creating the personal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>PersonalDomesticTransferResponse</returns>
        public PersonalDomesticTransferResponse V1MoneyMovementPersonalDomesticTransfersPost (PersonalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<PersonalDomesticTransferResponse> localVarResponse = V1MoneyMovementPersonalDomesticTransfersPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm Personal Transfer This API is used to Confirm the personal transfer. It should be called after successfully creating the personal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of PersonalDomesticTransferResponse</returns>
        public ApiResponse< PersonalDomesticTransferResponse > V1MoneyMovementPersonalDomesticTransfersPostWithHttpInfo (PersonalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");

            var localVarPath = "/v1/moneyMovement/personalDomesticTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPersonalDomesticTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalDomesticTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalDomesticTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalDomesticTransferResponse)));
        }

        /// <summary>
        /// Confirm Personal Transfer This API is used to Confirm the personal transfer. It should be called after successfully creating the personal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of PersonalDomesticTransferResponse</returns>
        public async System.Threading.Tasks.Task<PersonalDomesticTransferResponse> V1MoneyMovementPersonalDomesticTransfersPostAsync (PersonalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<PersonalDomesticTransferResponse> localVarResponse = await V1MoneyMovementPersonalDomesticTransfersPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm Personal Transfer This API is used to Confirm the personal transfer. It should be called after successfully creating the personal transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (PersonalDomesticTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonalDomesticTransferResponse>> V1MoneyMovementPersonalDomesticTransfersPostAsyncWithHttpInfo (PersonalDomesticTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPost");

            var localVarPath = "/v1/moneyMovement/personalDomesticTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPersonalDomesticTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonalDomesticTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PersonalDomesticTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonalDomesticTransferResponse)));
        }

        /// <summary>
        /// Create Personal Transfer This API is used to Create a new personal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation tpage so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>PreprocessForFundTransferResponse</returns>
        public PreprocessForFundTransferResponse V1MoneyMovementPersonalDomesticTransfersPreprocessPost (PreprocessFundTransferRequestPersonalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<PreprocessForFundTransferResponse> localVarResponse = V1MoneyMovementPersonalDomesticTransfersPreprocessPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Personal Transfer This API is used to Create a new personal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation tpage so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>ApiResponse of PreprocessForFundTransferResponse</returns>
        public ApiResponse< PreprocessForFundTransferResponse > V1MoneyMovementPersonalDomesticTransfersPreprocessPostWithHttpInfo (PreprocessFundTransferRequestPersonalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");

            var localVarPath = "/v1/moneyMovement/personalDomesticTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPersonalDomesticTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreprocessForFundTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreprocessForFundTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreprocessForFundTransferResponse)));
        }

        /// <summary>
        /// Create Personal Transfer This API is used to Create a new personal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation tpage so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of PreprocessForFundTransferResponse</returns>
        public async System.Threading.Tasks.Task<PreprocessForFundTransferResponse> V1MoneyMovementPersonalDomesticTransfersPreprocessPostAsync (PreprocessFundTransferRequestPersonalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
             ApiResponse<PreprocessForFundTransferResponse> localVarResponse = await V1MoneyMovementPersonalDomesticTransfersPreprocessPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Personal Transfer This API is used to Create a new personal domestic transfer and verify that there are no errors. The response from this resource should be used to construct a pre-confirmation tpage so the customer can review the transaction before confirming.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <returns>Task of ApiResponse (PreprocessForFundTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PreprocessForFundTransferResponse>> V1MoneyMovementPersonalDomesticTransfersPreprocessPostAsyncWithHttpInfo (PreprocessFundTransferRequestPersonalTransfer body, string authorization, string uuid, string accept, string clientId, string contentType)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementPersonalDomesticTransfersPreprocessPost");

            var localVarPath = "/v1/moneyMovement/personalDomesticTransfers/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementPersonalDomesticTransfersPreprocessPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PreprocessForFundTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PreprocessForFundTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PreprocessForFundTransferResponse)));
        }

        /// <summary>
        /// Confirm SEPA transfer This API is used to confirm the SEPA transfer. It should be called after successfully creating the SEPA transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>SepaTransferResponse</returns>
        public SepaTransferResponse V1MoneyMovementSepaTransfersPost (SepaTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<SepaTransferResponse> localVarResponse = V1MoneyMovementSepaTransfersPostWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm SEPA transfer This API is used to confirm the SEPA transfer. It should be called after successfully creating the SEPA transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of SepaTransferResponse</returns>
        public ApiResponse< SepaTransferResponse > V1MoneyMovementSepaTransfersPostWithHttpInfo (SepaTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");

            var localVarPath = "/v1/moneyMovement/sepaTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementSepaTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SepaTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SepaTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SepaTransferResponse)));
        }

        /// <summary>
        /// Confirm SEPA transfer This API is used to confirm the SEPA transfer. It should be called after successfully creating the SEPA transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of SepaTransferResponse</returns>
        public async System.Threading.Tasks.Task<SepaTransferResponse> V1MoneyMovementSepaTransfersPostAsync (SepaTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<SepaTransferResponse> localVarResponse = await V1MoneyMovementSepaTransfersPostAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Confirm SEPA transfer This API is used to confirm the SEPA transfer. It should be called after successfully creating the SEPA transfer. If successful, it will return a confirmation number that should be displayed and stored.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (SepaTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SepaTransferResponse>> V1MoneyMovementSepaTransfersPostAsyncWithHttpInfo (SepaTransferRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->V1MoneyMovementSepaTransfersPost");

            var localVarPath = "/v1/moneyMovement/sepaTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1MoneyMovementSepaTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SepaTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SepaTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SepaTransferResponse)));
        }

    }
}
