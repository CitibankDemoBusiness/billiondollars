/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPaymentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Execute Multiple Transfers for Adhoc Payees
        /// </summary>
        /// <remarks>
        /// This API is used for Citi Business customers to process multiple payment requests for Adhoc payees.  In case authorization is required, this API will throw mfa Requried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse</returns>
        ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null, string nextStartIndex = null);

        /// <summary>
        /// Execute Multiple Transfers for Adhoc Payees
        /// </summary>
        /// <remarks>
        /// This API is used for Citi Business customers to process multiple payment requests for Adhoc payees.  In case authorization is required, this API will throw mfa Requried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse</returns>
        ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse> ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncWithHttpInfo (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null, string nextStartIndex = null);
        /// <summary>
        /// Execute Multiple Transfers Confirmation for Adhoc Payees
        /// </summary>
        /// <remarks>
        /// This API is used for confirmation of multiple transfers to adhoc payees In case authorization is required, customer will be redirected to authorization page. Once authorization is confirmed as successful, this API will be used to trigger confirmation of multiple payments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse</returns>
        ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Execute Multiple Transfers Confirmation for Adhoc Payees
        /// </summary>
        /// <remarks>
        /// This API is used for confirmation of multiple transfers to adhoc payees In case authorization is required, customer will be redirected to authorization page. Once authorization is confirmed as successful, this API will be used to trigger confirmation of multiple payments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse</returns>
        ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse> ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncWithHttpInfo (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Bulk Source Account Payee Eligibility Inquiry
        /// </summary>
        /// <remarks>
        /// This API is used to inquire the eligibility source accounts for specific payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse</returns>
        RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string nextStartIndex = null);

        /// <summary>
        /// Bulk Source Account Payee Eligibility Inquiry
        /// </summary>
        /// <remarks>
        /// This API is used to inquire the eligibility source accounts for specific payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse</returns>
        ApiResponse<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse> RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string nextStartIndex = null);
        /// <summary>
        /// Retrieve the status of all transactions executed in one bundle
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the status of all transactions executed in one bundle as part of ExecutePaymentInitiationTransactionMultipleTransfersAsync/ExecutePaymentInitiationTransactionAdhocMultipleTransfersAsync
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="citiBundleId">This is bundle id or unique identifier for bulk transfers shared when the transactions order was taken</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="startIndex">to request subsequent transactions in the bundle, the nextstartindex given in the previous call should be passed here (optional)</param>
        /// <returns>RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse</returns>
        RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse RetrievePaymentInitiationTransactionMultipleTransfersStatus (string authorization, string uuid, string accept, string clientId, string citiBundleId, string clientDetails = null, string startIndex = null);

        /// <summary>
        /// Retrieve the status of all transactions executed in one bundle
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the status of all transactions executed in one bundle as part of ExecutePaymentInitiationTransactionMultipleTransfersAsync/ExecutePaymentInitiationTransactionAdhocMultipleTransfersAsync
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="citiBundleId">This is bundle id or unique identifier for bulk transfers shared when the transactions order was taken</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="startIndex">to request subsequent transactions in the bundle, the nextstartindex given in the previous call should be passed here (optional)</param>
        /// <returns>ApiResponse of RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse</returns>
        ApiResponse<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse> RetrievePaymentInitiationTransactionMultipleTransfersStatusWithHttpInfo (string authorization, string uuid, string accept, string clientId, string citiBundleId, string clientDetails = null, string startIndex = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Execute Multiple Transfers for Adhoc Payees
        /// </summary>
        /// <remarks>
        /// This API is used for Citi Business customers to process multiple payment requests for Adhoc payees.  In case authorization is required, this API will throw mfa Requried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse</returns>
        System.Threading.Tasks.Task<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse> ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncAsync (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null, string nextStartIndex = null);

        /// <summary>
        /// Execute Multiple Transfers for Adhoc Payees
        /// </summary>
        /// <remarks>
        /// This API is used for Citi Business customers to process multiple payment requests for Adhoc payees.  In case authorization is required, this API will throw mfa Requried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse>> ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncAsyncWithHttpInfo (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null, string nextStartIndex = null);
        /// <summary>
        /// Execute Multiple Transfers Confirmation for Adhoc Payees
        /// </summary>
        /// <remarks>
        /// This API is used for confirmation of multiple transfers to adhoc payees In case authorization is required, customer will be redirected to authorization page. Once authorization is confirmed as successful, this API will be used to trigger confirmation of multiple payments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse</returns>
        System.Threading.Tasks.Task<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse> ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncAsync (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Execute Multiple Transfers Confirmation for Adhoc Payees
        /// </summary>
        /// <remarks>
        /// This API is used for confirmation of multiple transfers to adhoc payees In case authorization is required, customer will be redirected to authorization page. Once authorization is confirmed as successful, this API will be used to trigger confirmation of multiple payments.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse>> ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncAsyncWithHttpInfo (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Bulk Source Account Payee Eligibility Inquiry
        /// </summary>
        /// <remarks>
        /// This API is used to inquire the eligibility source accounts for specific payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse</returns>
        System.Threading.Tasks.Task<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse> RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityAsync (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string nextStartIndex = null);

        /// <summary>
        /// Bulk Source Account Payee Eligibility Inquiry
        /// </summary>
        /// <remarks>
        /// This API is used to inquire the eligibility source accounts for specific payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse>> RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string nextStartIndex = null);
        /// <summary>
        /// Retrieve the status of all transactions executed in one bundle
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the status of all transactions executed in one bundle as part of ExecutePaymentInitiationTransactionMultipleTransfersAsync/ExecutePaymentInitiationTransactionAdhocMultipleTransfersAsync
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="citiBundleId">This is bundle id or unique identifier for bulk transfers shared when the transactions order was taken</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="startIndex">to request subsequent transactions in the bundle, the nextstartindex given in the previous call should be passed here (optional)</param>
        /// <returns>Task of RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse</returns>
        System.Threading.Tasks.Task<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse> RetrievePaymentInitiationTransactionMultipleTransfersStatusAsync (string authorization, string uuid, string accept, string clientId, string citiBundleId, string clientDetails = null, string startIndex = null);

        /// <summary>
        /// Retrieve the status of all transactions executed in one bundle
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve the status of all transactions executed in one bundle as part of ExecutePaymentInitiationTransactionMultipleTransfersAsync/ExecutePaymentInitiationTransactionAdhocMultipleTransfersAsync
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="citiBundleId">This is bundle id or unique identifier for bulk transfers shared when the transactions order was taken</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="startIndex">to request subsequent transactions in the bundle, the nextstartindex given in the previous call should be passed here (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse>> RetrievePaymentInitiationTransactionMultipleTransfersStatusAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string citiBundleId, string clientDetails = null, string startIndex = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PaymentApi : IPaymentApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Execute Multiple Transfers for Adhoc Payees This API is used for Citi Business customers to process multiple payment requests for Adhoc payees.  In case authorization is required, this API will throw mfa Requried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse</returns>
        public ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null, string nextStartIndex = null)
        {
             ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse> localVarResponse = ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Multiple Transfers for Adhoc Payees This API is used for Citi Business customers to process multiple payment requests for Adhoc payees.  In case authorization is required, this API will throw mfa Requried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse</returns>
        public ApiResponse< ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse > ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncWithHttpInfo (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null, string nextStartIndex = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");

            var localVarPath = "/v1/paymentInitiation/adhoc/multipleTransfers/async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse)));
        }

        /// <summary>
        /// Execute Multiple Transfers for Adhoc Payees This API is used for Citi Business customers to process multiple payment requests for Adhoc payees.  In case authorization is required, this API will throw mfa Requried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse</returns>
        public async System.Threading.Tasks.Task<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse> ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncAsync (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null, string nextStartIndex = null)
        {
             ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse> localVarResponse = await ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute Multiple Transfers for Adhoc Payees This API is used for Citi Business customers to process multiple payment requests for Adhoc payees.  In case authorization is required, this API will throw mfa Requried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse>> ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncAsyncWithHttpInfo (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null, string nextStartIndex = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync");

            var localVarPath = "/v1/paymentInitiation/adhoc/multipleTransfers/async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePaymentInitiationTransactionAdhocMultipleTransferAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePaymentInitiationTransactionAdhocMultipleTransferAsyncResponse)));
        }

        /// <summary>
        /// Execute Multiple Transfers Confirmation for Adhoc Payees This API is used for confirmation of multiple transfers to adhoc payees In case authorization is required, customer will be redirected to authorization page. Once authorization is confirmed as successful, this API will be used to trigger confirmation of multiple payments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse</returns>
        public ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse> localVarResponse = ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Multiple Transfers Confirmation for Adhoc Payees This API is used for confirmation of multiple transfers to adhoc payees In case authorization is required, customer will be redirected to authorization page. Once authorization is confirmed as successful, this API will be used to trigger confirmation of multiple payments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse</returns>
        public ApiResponse< ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse > ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncWithHttpInfo (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");

            var localVarPath = "/v1/paymentInitiation/adhoc/multipleTransfers/confirmation/async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse)));
        }

        /// <summary>
        /// Execute Multiple Transfers Confirmation for Adhoc Payees This API is used for confirmation of multiple transfers to adhoc payees In case authorization is required, customer will be redirected to authorization page. Once authorization is confirmed as successful, this API will be used to trigger confirmation of multiple payments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse</returns>
        public async System.Threading.Tasks.Task<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse> ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncAsync (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse> localVarResponse = await ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute Multiple Transfers Confirmation for Adhoc Payees This API is used for confirmation of multiple transfers to adhoc payees In case authorization is required, customer will be redirected to authorization page. Once authorization is confirmed as successful, this API will be used to trigger confirmation of multiple payments.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse>> ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncAsyncWithHttpInfo (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentApi->ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync");

            var localVarPath = "/v1/paymentInitiation/adhoc/multipleTransfers/confirmation/async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePaymentInitiationTransactionAdhocMultipleTransferConfirmationAsyncResponse)));
        }

        /// <summary>
        /// Bulk Source Account Payee Eligibility Inquiry This API is used to inquire the eligibility source accounts for specific payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse</returns>
        public RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string nextStartIndex = null)
        {
             ApiResponse<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse> localVarResponse = RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityWithHttpInfo(authorization, uuid, accept, clientId, clientDetails, nextStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk Source Account Payee Eligibility Inquiry This API is used to inquire the eligibility source accounts for specific payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>ApiResponse of RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse</returns>
        public ApiResponse< RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse > RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentApi->RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentApi->RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentApi->RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility");

            var localVarPath = "/v1/paymentInitiation/bulk/sourceAccountAndPayees/eligibility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Bulk Source Account Payee Eligibility Inquiry This API is used to inquire the eligibility source accounts for specific payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse> RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityAsync (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string nextStartIndex = null)
        {
             ApiResponse<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse> localVarResponse = await RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityAsyncWithHttpInfo(authorization, uuid, accept, clientId, clientDetails, nextStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk Source Account Payee Eligibility Inquiry This API is used to inquire the eligibility source accounts for specific payment types for an authenticated Citi Customer. This information can be used to prepare a valid source list for a selected destination, or vice versa.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse>> RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string clientDetails = null, string nextStartIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentApi->RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentApi->RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentApi->RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility");

            var localVarPath = "/v1/paymentInitiation/bulk/sourceAccountAndPayees/eligibility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibilityResponse)));
        }

        /// <summary>
        /// Retrieve the status of all transactions executed in one bundle This API is used to retrieve the status of all transactions executed in one bundle as part of ExecutePaymentInitiationTransactionMultipleTransfersAsync/ExecutePaymentInitiationTransactionAdhocMultipleTransfersAsync
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="citiBundleId">This is bundle id or unique identifier for bulk transfers shared when the transactions order was taken</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="startIndex">to request subsequent transactions in the bundle, the nextstartindex given in the previous call should be passed here (optional)</param>
        /// <returns>RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse</returns>
        public RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse RetrievePaymentInitiationTransactionMultipleTransfersStatus (string authorization, string uuid, string accept, string clientId, string citiBundleId, string clientDetails = null, string startIndex = null)
        {
             ApiResponse<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse> localVarResponse = RetrievePaymentInitiationTransactionMultipleTransfersStatusWithHttpInfo(authorization, uuid, accept, clientId, citiBundleId, clientDetails, startIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the status of all transactions executed in one bundle This API is used to retrieve the status of all transactions executed in one bundle as part of ExecutePaymentInitiationTransactionMultipleTransfersAsync/ExecutePaymentInitiationTransactionAdhocMultipleTransfersAsync
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="citiBundleId">This is bundle id or unique identifier for bulk transfers shared when the transactions order was taken</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="startIndex">to request subsequent transactions in the bundle, the nextstartindex given in the previous call should be passed here (optional)</param>
        /// <returns>ApiResponse of RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse</returns>
        public ApiResponse< RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse > RetrievePaymentInitiationTransactionMultipleTransfersStatusWithHttpInfo (string authorization, string uuid, string accept, string clientId, string citiBundleId, string clientDetails = null, string startIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");
            // verify the required parameter 'citiBundleId' is set
            if (citiBundleId == null)
                throw new ApiException(400, "Missing required parameter 'citiBundleId' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");

            var localVarPath = "/v1/paymentInitiation/multipleTransfers/{citiBundleId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (citiBundleId != null) localVarPathParams.Add("citiBundleId", this.Configuration.ApiClient.ParameterToString(citiBundleId)); // path parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePaymentInitiationTransactionMultipleTransfersStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse)));
        }

        /// <summary>
        /// Retrieve the status of all transactions executed in one bundle This API is used to retrieve the status of all transactions executed in one bundle as part of ExecutePaymentInitiationTransactionMultipleTransfersAsync/ExecutePaymentInitiationTransactionAdhocMultipleTransfersAsync
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="citiBundleId">This is bundle id or unique identifier for bulk transfers shared when the transactions order was taken</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="startIndex">to request subsequent transactions in the bundle, the nextstartindex given in the previous call should be passed here (optional)</param>
        /// <returns>Task of RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse</returns>
        public async System.Threading.Tasks.Task<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse> RetrievePaymentInitiationTransactionMultipleTransfersStatusAsync (string authorization, string uuid, string accept, string clientId, string citiBundleId, string clientDetails = null, string startIndex = null)
        {
             ApiResponse<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse> localVarResponse = await RetrievePaymentInitiationTransactionMultipleTransfersStatusAsyncWithHttpInfo(authorization, uuid, accept, clientId, citiBundleId, clientDetails, startIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the status of all transactions executed in one bundle This API is used to retrieve the status of all transactions executed in one bundle as part of ExecutePaymentInitiationTransactionMultipleTransfersAsync/ExecutePaymentInitiationTransactionAdhocMultipleTransfersAsync
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="citiBundleId">This is bundle id or unique identifier for bulk transfers shared when the transactions order was taken</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <param name="startIndex">to request subsequent transactions in the bundle, the nextstartindex given in the previous call should be passed here (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse>> RetrievePaymentInitiationTransactionMultipleTransfersStatusAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string citiBundleId, string clientDetails = null, string startIndex = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");
            // verify the required parameter 'citiBundleId' is set
            if (citiBundleId == null)
                throw new ApiException(400, "Missing required parameter 'citiBundleId' when calling PaymentApi->RetrievePaymentInitiationTransactionMultipleTransfersStatus");

            var localVarPath = "/v1/paymentInitiation/multipleTransfers/{citiBundleId}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (citiBundleId != null) localVarPathParams.Add("citiBundleId", this.Configuration.ApiClient.ParameterToString(citiBundleId)); // path parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePaymentInitiationTransactionMultipleTransfersStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePaymentInitiationTransactionMultipleTransfersStatusResponse)));
        }

    }
}
