/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Execute Multiple Transfers
        /// </summary>
        /// <remarks>
        /// This API is used for retail Citi Customers to process multiple payment requests for predefined payees. In case authorization is required, this API will throw mfaRequried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts and payees combination from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse</returns>
        ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse ExecutePaymentInitiationTransactionMultipleTransfersAsync (ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Execute Multiple Transfers
        /// </summary>
        /// <remarks>
        /// This API is used for retail Citi Customers to process multiple payment requests for predefined payees. In case authorization is required, this API will throw mfaRequried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts and payees combination from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse</returns>
        ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse> ExecutePaymentInitiationTransactionMultipleTransfersAsyncWithHttpInfo (ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Execute Multiple Transfers Confirmation
        /// </summary>
        /// <remarks>
        /// This API is a confirmation API of multiple transfer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse</returns>
        ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Execute Multiple Transfers Confirmation
        /// </summary>
        /// <remarks>
        /// This API is a confirmation API of multiple transfer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse</returns>
        ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse> ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncWithHttpInfo (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Standing Instruction Inquiry for Specific Payment Type
        /// </summary>
        /// <remarks>
        /// This API makes an inquiry of Standing Instruction of specific payment transfer type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">This defines the type of payment made by customer for which SI needs to be enabled.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrievePaymentInitiationTransactionRepeatingPaymentsResponse</returns>
        RetrievePaymentInitiationTransactionRepeatingPaymentsResponse RetrievePaymentInitiationTransactionRepeatingPayments (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null, string clientDetails = null);

        /// <summary>
        /// Standing Instruction Inquiry for Specific Payment Type
        /// </summary>
        /// <remarks>
        /// This API makes an inquiry of Standing Instruction of specific payment transfer type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">This defines the type of payment made by customer for which SI needs to be enabled.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrievePaymentInitiationTransactionRepeatingPaymentsResponse</returns>
        ApiResponse<RetrievePaymentInitiationTransactionRepeatingPaymentsResponse> RetrievePaymentInitiationTransactionRepeatingPaymentsWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null, string clientDetails = null);
        /// <summary>
        /// Delete the Standing Instruction for a Specific Transfer Type
        /// </summary>
        /// <remarks>
        /// This API lets the customer remove Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer.</param>
        /// <param name="transactionReferenceId">The unique SI reference Id used to identify the payee type/ transfer from all the other transfers</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void TerminatePaymentInitiationTransactionRepeatingPayments (string authorization, string uuid, string accept, string clientId, string contentType, string accountId, string transactionReferenceId, string clientDetails = null);

        /// <summary>
        /// Delete the Standing Instruction for a Specific Transfer Type
        /// </summary>
        /// <remarks>
        /// This API lets the customer remove Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer.</param>
        /// <param name="transactionReferenceId">The unique SI reference Id used to identify the payee type/ transfer from all the other transfers</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TerminatePaymentInitiationTransactionRepeatingPaymentsWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string accountId, string transactionReferenceId, string clientDetails = null);
        /// <summary>
        /// Update Standing Instruction for Specific Transfer Type
        /// </summary>
        /// <remarks>
        /// This API lets the customer update Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        void UpdatePaymentInitiationTransactionRepeatingPayments (UpdatePaymentInitiationTransactionRepeatingPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Update Standing Instruction for Specific Transfer Type
        /// </summary>
        /// <remarks>
        /// This API lets the customer update Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePaymentInitiationTransactionRepeatingPaymentsWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Update Standing Instruction Confirmation
        /// </summary>
        /// <remarks>
        /// This API confirms the updated Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse</returns>
        UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Update Standing Instruction Confirmation
        /// </summary>
        /// <remarks>
        /// This API confirms the updated Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse</returns>
        ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse> UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Pre Process for Standing Instruction Update
        /// </summary>
        /// <remarks>
        /// This API shows the pre process page for customer to update Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse</returns>
        UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Pre Process for Standing Instruction Update
        /// </summary>
        /// <remarks>
        /// This API shows the pre process page for customer to update Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse</returns>
        ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse> UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Execute Multiple Transfers
        /// </summary>
        /// <remarks>
        /// This API is used for retail Citi Customers to process multiple payment requests for predefined payees. In case authorization is required, this API will throw mfaRequried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts and payees combination from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse</returns>
        System.Threading.Tasks.Task<ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse> ExecutePaymentInitiationTransactionMultipleTransfersAsyncAsync (ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Execute Multiple Transfers
        /// </summary>
        /// <remarks>
        /// This API is used for retail Citi Customers to process multiple payment requests for predefined payees. In case authorization is required, this API will throw mfaRequried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts and payees combination from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse>> ExecutePaymentInitiationTransactionMultipleTransfersAsyncAsyncWithHttpInfo (ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Execute Multiple Transfers Confirmation
        /// </summary>
        /// <remarks>
        /// This API is a confirmation API of multiple transfer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse</returns>
        System.Threading.Tasks.Task<ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse> ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncAsync (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Execute Multiple Transfers Confirmation
        /// </summary>
        /// <remarks>
        /// This API is a confirmation API of multiple transfer
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse>> ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncAsyncWithHttpInfo (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Standing Instruction Inquiry for Specific Payment Type
        /// </summary>
        /// <remarks>
        /// This API makes an inquiry of Standing Instruction of specific payment transfer type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">This defines the type of payment made by customer for which SI needs to be enabled.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrievePaymentInitiationTransactionRepeatingPaymentsResponse</returns>
        System.Threading.Tasks.Task<RetrievePaymentInitiationTransactionRepeatingPaymentsResponse> RetrievePaymentInitiationTransactionRepeatingPaymentsAsync (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null, string clientDetails = null);

        /// <summary>
        /// Standing Instruction Inquiry for Specific Payment Type
        /// </summary>
        /// <remarks>
        /// This API makes an inquiry of Standing Instruction of specific payment transfer type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">This defines the type of payment made by customer for which SI needs to be enabled.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePaymentInitiationTransactionRepeatingPaymentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrievePaymentInitiationTransactionRepeatingPaymentsResponse>> RetrievePaymentInitiationTransactionRepeatingPaymentsAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null, string clientDetails = null);
        /// <summary>
        /// Delete the Standing Instruction for a Specific Transfer Type
        /// </summary>
        /// <remarks>
        /// This API lets the customer remove Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer.</param>
        /// <param name="transactionReferenceId">The unique SI reference Id used to identify the payee type/ transfer from all the other transfers</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TerminatePaymentInitiationTransactionRepeatingPaymentsAsync (string authorization, string uuid, string accept, string clientId, string contentType, string accountId, string transactionReferenceId, string clientDetails = null);

        /// <summary>
        /// Delete the Standing Instruction for a Specific Transfer Type
        /// </summary>
        /// <remarks>
        /// This API lets the customer remove Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer.</param>
        /// <param name="transactionReferenceId">The unique SI reference Id used to identify the payee type/ transfer from all the other transfers</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TerminatePaymentInitiationTransactionRepeatingPaymentsAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string accountId, string transactionReferenceId, string clientDetails = null);
        /// <summary>
        /// Update Standing Instruction for Specific Transfer Type
        /// </summary>
        /// <remarks>
        /// This API lets the customer update Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePaymentInitiationTransactionRepeatingPaymentsAsync (UpdatePaymentInitiationTransactionRepeatingPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Update Standing Instruction for Specific Transfer Type
        /// </summary>
        /// <remarks>
        /// This API lets the customer update Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePaymentInitiationTransactionRepeatingPaymentsAsyncWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Update Standing Instruction Confirmation
        /// </summary>
        /// <remarks>
        /// This API confirms the updated Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse</returns>
        System.Threading.Tasks.Task<UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse> UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationAsync (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Update Standing Instruction Confirmation
        /// </summary>
        /// <remarks>
        /// This API confirms the updated Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse>> UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationAsyncWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        /// <summary>
        /// Pre Process for Standing Instruction Update
        /// </summary>
        /// <remarks>
        /// This API shows the pre process page for customer to update Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse</returns>
        System.Threading.Tasks.Task<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse> UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessAsync (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);

        /// <summary>
        /// Pre Process for Standing Instruction Update
        /// </summary>
        /// <remarks>
        /// This API shows the pre process page for customer to update Standing instructions for a specific transfer type/ payee type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse>> UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessAsyncWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PaymentsApi : IPaymentsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Execute Multiple Transfers This API is used for retail Citi Customers to process multiple payment requests for predefined payees. In case authorization is required, this API will throw mfaRequried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts and payees combination from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse</returns>
        public ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse ExecutePaymentInitiationTransactionMultipleTransfersAsync (ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse> localVarResponse = ExecutePaymentInitiationTransactionMultipleTransfersAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Multiple Transfers This API is used for retail Citi Customers to process multiple payment requests for predefined payees. In case authorization is required, this API will throw mfaRequried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts and payees combination from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse</returns>
        public ApiResponse< ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse > ExecutePaymentInitiationTransactionMultipleTransfersAsyncWithHttpInfo (ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");

            var localVarPath = "/v1/paymentInitiation/multipleTransfers/async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePaymentInitiationTransactionMultipleTransfersAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse)));
        }

        /// <summary>
        /// Execute Multiple Transfers This API is used for retail Citi Customers to process multiple payment requests for predefined payees. In case authorization is required, this API will throw mfaRequried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts and payees combination from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse</returns>
        public async System.Threading.Tasks.Task<ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse> ExecutePaymentInitiationTransactionMultipleTransfersAsyncAsync (ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse> localVarResponse = await ExecutePaymentInitiationTransactionMultipleTransfersAsyncAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute Multiple Transfers This API is used for retail Citi Customers to process multiple payment requests for predefined payees. In case authorization is required, this API will throw mfaRequried error.  Prerequisite: Retrieve the applicable payment types, eligible source accounts and payees combination from RetrievePaymentInitiationTransactionBulkSourceAccountAndPayeeEligibility API
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse>> ExecutePaymentInitiationTransactionMultipleTransfersAsyncAsyncWithHttpInfo (ExecutePaymentInitiationTransactionMultipleTransfersAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersAsync");

            var localVarPath = "/v1/paymentInitiation/multipleTransfers/async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePaymentInitiationTransactionMultipleTransfersAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePaymentInitiationTransactionMultipleTransfersAsyncResponse)));
        }

        /// <summary>
        /// Execute Multiple Transfers Confirmation This API is a confirmation API of multiple transfer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse</returns>
        public ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse> localVarResponse = ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Multiple Transfers Confirmation This API is a confirmation API of multiple transfer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse</returns>
        public ApiResponse< ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse > ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncWithHttpInfo (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");

            var localVarPath = "/v1/paymentInitiation/multipleTransfers/confirmation/async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse)));
        }

        /// <summary>
        /// Execute Multiple Transfers Confirmation This API is a confirmation API of multiple transfer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse</returns>
        public async System.Threading.Tasks.Task<ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse> ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncAsync (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse> localVarResponse = await ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute Multiple Transfers Confirmation This API is a confirmation API of multiple transfer
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse>> ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncAsyncWithHttpInfo (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync");

            var localVarPath = "/v1/paymentInitiation/multipleTransfers/confirmation/async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePaymentInitiationTransactionMultipleTransfersConfirmationAsyncResponse)));
        }

        /// <summary>
        /// Standing Instruction Inquiry for Specific Payment Type This API makes an inquiry of Standing Instruction of specific payment transfer type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">This defines the type of payment made by customer for which SI needs to be enabled.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>RetrievePaymentInitiationTransactionRepeatingPaymentsResponse</returns>
        public RetrievePaymentInitiationTransactionRepeatingPaymentsResponse RetrievePaymentInitiationTransactionRepeatingPayments (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null, string clientDetails = null)
        {
             ApiResponse<RetrievePaymentInitiationTransactionRepeatingPaymentsResponse> localVarResponse = RetrievePaymentInitiationTransactionRepeatingPaymentsWithHttpInfo(authorization, uuid, accept, clientId, paymentType, nextStartIndex, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Standing Instruction Inquiry for Specific Payment Type This API makes an inquiry of Standing Instruction of specific payment transfer type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">This defines the type of payment made by customer for which SI needs to be enabled.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of RetrievePaymentInitiationTransactionRepeatingPaymentsResponse</returns>
        public ApiResponse< RetrievePaymentInitiationTransactionRepeatingPaymentsResponse > RetrievePaymentInitiationTransactionRepeatingPaymentsWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->RetrievePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->RetrievePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->RetrievePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->RetrievePaymentInitiationTransactionRepeatingPayments");

            var localVarPath = "/v1/paymentInitiation/repeatingPayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentType", paymentType)); // query parameter
            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePaymentInitiationTransactionRepeatingPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePaymentInitiationTransactionRepeatingPaymentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrievePaymentInitiationTransactionRepeatingPaymentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePaymentInitiationTransactionRepeatingPaymentsResponse)));
        }

        /// <summary>
        /// Standing Instruction Inquiry for Specific Payment Type This API makes an inquiry of Standing Instruction of specific payment transfer type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">This defines the type of payment made by customer for which SI needs to be enabled.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of RetrievePaymentInitiationTransactionRepeatingPaymentsResponse</returns>
        public async System.Threading.Tasks.Task<RetrievePaymentInitiationTransactionRepeatingPaymentsResponse> RetrievePaymentInitiationTransactionRepeatingPaymentsAsync (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null, string clientDetails = null)
        {
             ApiResponse<RetrievePaymentInitiationTransactionRepeatingPaymentsResponse> localVarResponse = await RetrievePaymentInitiationTransactionRepeatingPaymentsAsyncWithHttpInfo(authorization, uuid, accept, clientId, paymentType, nextStartIndex, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Standing Instruction Inquiry for Specific Payment Type This API makes an inquiry of Standing Instruction of specific payment transfer type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="paymentType">This defines the type of payment made by customer for which SI needs to be enabled.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. (optional)</param>
        /// <param name="nextStartIndex">In some cases there is more data than what can be returned in a single response. If there is additional data available a nextStartIndex will be returned. Pass the nextStartIndex in your next request to retrieve the next set of data. (optional)</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePaymentInitiationTransactionRepeatingPaymentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrievePaymentInitiationTransactionRepeatingPaymentsResponse>> RetrievePaymentInitiationTransactionRepeatingPaymentsAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string paymentType = null, string nextStartIndex = null, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->RetrievePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->RetrievePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->RetrievePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->RetrievePaymentInitiationTransactionRepeatingPayments");

            var localVarPath = "/v1/paymentInitiation/repeatingPayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentType", paymentType)); // query parameter
            if (nextStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nextStartIndex", nextStartIndex)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePaymentInitiationTransactionRepeatingPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePaymentInitiationTransactionRepeatingPaymentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrievePaymentInitiationTransactionRepeatingPaymentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePaymentInitiationTransactionRepeatingPaymentsResponse)));
        }

        /// <summary>
        /// Delete the Standing Instruction for a Specific Transfer Type This API lets the customer remove Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer.</param>
        /// <param name="transactionReferenceId">The unique SI reference Id used to identify the payee type/ transfer from all the other transfers</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void TerminatePaymentInitiationTransactionRepeatingPayments (string authorization, string uuid, string accept, string clientId, string contentType, string accountId, string transactionReferenceId, string clientDetails = null)
        {
             TerminatePaymentInitiationTransactionRepeatingPaymentsWithHttpInfo(authorization, uuid, accept, clientId, contentType, accountId, transactionReferenceId, clientDetails);
        }

        /// <summary>
        /// Delete the Standing Instruction for a Specific Transfer Type This API lets the customer remove Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer.</param>
        /// <param name="transactionReferenceId">The unique SI reference Id used to identify the payee type/ transfer from all the other transfers</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TerminatePaymentInitiationTransactionRepeatingPaymentsWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string accountId, string transactionReferenceId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'transactionReferenceId' is set
            if (transactionReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'transactionReferenceId' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");

            var localVarPath = "/v1/paymentInitiation/{accountId}/repeatingPayments/{transactionReferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (transactionReferenceId != null) localVarPathParams.Add("transactionReferenceId", this.Configuration.ApiClient.ParameterToString(transactionReferenceId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TerminatePaymentInitiationTransactionRepeatingPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete the Standing Instruction for a Specific Transfer Type This API lets the customer remove Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer.</param>
        /// <param name="transactionReferenceId">The unique SI reference Id used to identify the payee type/ transfer from all the other transfers</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TerminatePaymentInitiationTransactionRepeatingPaymentsAsync (string authorization, string uuid, string accept, string clientId, string contentType, string accountId, string transactionReferenceId, string clientDetails = null)
        {
             await TerminatePaymentInitiationTransactionRepeatingPaymentsAsyncWithHttpInfo(authorization, uuid, accept, clientId, contentType, accountId, transactionReferenceId, clientDetails);

        }

        /// <summary>
        /// Delete the Standing Instruction for a Specific Transfer Type This API lets the customer remove Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer.</param>
        /// <param name="transactionReferenceId">The unique SI reference Id used to identify the payee type/ transfer from all the other transfers</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TerminatePaymentInitiationTransactionRepeatingPaymentsAsyncWithHttpInfo (string authorization, string uuid, string accept, string clientId, string contentType, string accountId, string transactionReferenceId, string clientDetails = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'transactionReferenceId' is set
            if (transactionReferenceId == null)
                throw new ApiException(400, "Missing required parameter 'transactionReferenceId' when calling PaymentsApi->TerminatePaymentInitiationTransactionRepeatingPayments");

            var localVarPath = "/v1/paymentInitiation/{accountId}/repeatingPayments/{transactionReferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (transactionReferenceId != null) localVarPathParams.Add("transactionReferenceId", this.Configuration.ApiClient.ParameterToString(transactionReferenceId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TerminatePaymentInitiationTransactionRepeatingPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Standing Instruction for Specific Transfer Type This API lets the customer update Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns></returns>
        public void UpdatePaymentInitiationTransactionRepeatingPayments (UpdatePaymentInitiationTransactionRepeatingPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             UpdatePaymentInitiationTransactionRepeatingPaymentsWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
        }

        /// <summary>
        /// Update Standing Instruction for Specific Transfer Type This API lets the customer update Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePaymentInitiationTransactionRepeatingPaymentsWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");

            var localVarPath = "/v1/paymentInitiation/repeatingPayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentInitiationTransactionRepeatingPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Standing Instruction for Specific Transfer Type This API lets the customer update Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePaymentInitiationTransactionRepeatingPaymentsAsync (UpdatePaymentInitiationTransactionRepeatingPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             await UpdatePaymentInitiationTransactionRepeatingPaymentsAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);

        }

        /// <summary>
        /// Update Standing Instruction for Specific Transfer Type This API lets the customer update Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePaymentInitiationTransactionRepeatingPaymentsAsyncWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPayments");

            var localVarPath = "/v1/paymentInitiation/repeatingPayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentInitiationTransactionRepeatingPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Standing Instruction Confirmation This API confirms the updated Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse</returns>
        public UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse> localVarResponse = UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Standing Instruction Confirmation This API confirms the updated Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse</returns>
        public ApiResponse< UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse > UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");

            var localVarPath = "/v1/paymentInitiation/repeatingPayments/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse)));
        }

        /// <summary>
        /// Update Standing Instruction Confirmation This API confirms the updated Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse> UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationAsync (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse> localVarResponse = await UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Standing Instruction Confirmation This API confirms the updated Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse>> UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationAsyncWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation");

            var localVarPath = "/v1/paymentInitiation/repeatingPayments/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePaymentInitiationTransactionRepeatingPaymentsConfirmationResponse)));
        }

        /// <summary>
        /// Pre Process for Standing Instruction Update This API shows the pre process page for customer to update Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse</returns>
        public UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse> localVarResponse = UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pre Process for Standing Instruction Update This API shows the pre process page for customer to update Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>ApiResponse of UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse</returns>
        public ApiResponse< UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse > UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");

            var localVarPath = "/v1/paymentInitiation/repeatingPayments/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse)));
        }

        /// <summary>
        /// Pre Process for Standing Instruction Update This API shows the pre process page for customer to update Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse> UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessAsync (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
             ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse> localVarResponse = await UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessAsyncWithHttpInfo(body, authorization, uuid, accept, clientId, contentType, clientDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pre Process for Standing Instruction Update This API shows the pre process page for customer to update Standing instructions for a specific transfer type/ payee type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest</param>
        /// <param name="authorization">The most recent Authorization token. This will have the format Bearer + {space} + {accessToken}. Example: Bearer KGNsaWVudF9pZDpjbGllbnRfc2VjcmV0KQ&#x3D;&#x3D;.</param>
        /// <param name="uuid">128 bit random UUID generated uniquely for every request.</param>
        /// <param name="accept">Content-Type that are acceptable for the response.</param>
        /// <param name="clientId">Client ID generated during application registration.</param>
        /// <param name="contentType">application/json</param>
        /// <param name="clientDetails">This field is used to capture device,browser and network information. Refer the developer portal for more information.These are the fields which will be passed as part of the header devicePrint,deviceTokenCookie,userIpAddress,userAgent,hardwareId,simId,deviceModel,deviceName,deviceOsName,deviceOsVersion,multitaskingSupportFlag,languageSupport,wifiMacAddress,cellTowerId,locationAreaCode,rsaApplicationKey,wapClientId,mobileCarrierCode,mobileCountryCode,osId,geoLongitude,geoLatitude,geoHorizontalAccuracy,geoAltitude,geoAltitudeAccuracy,geoSpeed,geoTimestamp,geoStatus,basicServiceSetId,signalStrength,wifiChannel,serviceSetId (optional)</param>
        /// <returns>Task of ApiResponse (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse>> UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessAsyncWithHttpInfo (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest body, string authorization, string uuid, string accept, string clientId, string contentType, string clientDetails = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'accept' is set
            if (accept == null)
                throw new ApiException(400, "Missing required parameter 'accept' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess");

            var localVarPath = "/v1/paymentInitiation/repeatingPayments/preprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uuid != null) localVarHeaderParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", this.Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (clientDetails != null) localVarHeaderParams.Add("clientDetails", this.Configuration.ApiClient.ParameterToString(clientDetails)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessResponse)));
        }

    }
}
