/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PaymentCountry
    /// </summary>
    [DataContract]
        public partial class PaymentCountry :  IEquatable<PaymentCountry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCountry" /> class.
        /// </summary>
        /// <param name="countryName">This field is to indicate the country name of the payee. This is a reference data field. Please use /v1/utilities/referenceData/{countryName} resource to get valid value of this field with description. (required).</param>
        /// <param name="countryCode">ISO country code. This is a reference data field. Please use /utilities/referenceData/{country} resource to get possible values of this field with descriptions. (required).</param>
        /// <param name="localCurrencyCode">This is the local currency code in ISO 4217 Format..</param>
        /// <param name="countryBankBranchIdentifier">This field is to indicate the name of the bank branch identifier supported for the country..</param>
        /// <param name="countryIbanFlag">This field is used to indicate if the country supports IBAN..</param>
        public PaymentCountry(string countryName = default(string), string countryCode = default(string), string localCurrencyCode = default(string), string countryBankBranchIdentifier = default(string), bool? countryIbanFlag = default(bool?))
        {
            // to ensure "countryName" is required (not null)
            if (countryName == null)
            {
                throw new InvalidDataException("countryName is a required property for PaymentCountry and cannot be null");
            }
            else
            {
                this.CountryName = countryName;
            }
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for PaymentCountry and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
            this.LocalCurrencyCode = localCurrencyCode;
            this.CountryBankBranchIdentifier = countryBankBranchIdentifier;
            this.CountryIbanFlag = countryIbanFlag;
        }
        
        /// <summary>
        /// This field is to indicate the country name of the payee. This is a reference data field. Please use /v1/utilities/referenceData/{countryName} resource to get valid value of this field with description.
        /// </summary>
        /// <value>This field is to indicate the country name of the payee. This is a reference data field. Please use /v1/utilities/referenceData/{countryName} resource to get valid value of this field with description.</value>
        [DataMember(Name="countryName", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// ISO country code. This is a reference data field. Please use /utilities/referenceData/{country} resource to get possible values of this field with descriptions.
        /// </summary>
        /// <value>ISO country code. This is a reference data field. Please use /utilities/referenceData/{country} resource to get possible values of this field with descriptions.</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// This is the local currency code in ISO 4217 Format.
        /// </summary>
        /// <value>This is the local currency code in ISO 4217 Format.</value>
        [DataMember(Name="localCurrencyCode", EmitDefaultValue=false)]
        public string LocalCurrencyCode { get; set; }

        /// <summary>
        /// This field is to indicate the name of the bank branch identifier supported for the country.
        /// </summary>
        /// <value>This field is to indicate the name of the bank branch identifier supported for the country.</value>
        [DataMember(Name="countryBankBranchIdentifier", EmitDefaultValue=false)]
        public string CountryBankBranchIdentifier { get; set; }

        /// <summary>
        /// This field is used to indicate if the country supports IBAN.
        /// </summary>
        /// <value>This field is used to indicate if the country supports IBAN.</value>
        [DataMember(Name="countryIbanFlag", EmitDefaultValue=false)]
        public bool? CountryIbanFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCountry {\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  LocalCurrencyCode: ").Append(LocalCurrencyCode).Append("\n");
            sb.Append("  CountryBankBranchIdentifier: ").Append(CountryBankBranchIdentifier).Append("\n");
            sb.Append("  CountryIbanFlag: ").Append(CountryIbanFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentCountry);
        }

        /// <summary>
        /// Returns true if PaymentCountry instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentCountry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCountry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.LocalCurrencyCode == input.LocalCurrencyCode ||
                    (this.LocalCurrencyCode != null &&
                    this.LocalCurrencyCode.Equals(input.LocalCurrencyCode))
                ) && 
                (
                    this.CountryBankBranchIdentifier == input.CountryBankBranchIdentifier ||
                    (this.CountryBankBranchIdentifier != null &&
                    this.CountryBankBranchIdentifier.Equals(input.CountryBankBranchIdentifier))
                ) && 
                (
                    this.CountryIbanFlag == input.CountryIbanFlag ||
                    (this.CountryIbanFlag != null &&
                    this.CountryIbanFlag.Equals(input.CountryIbanFlag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.LocalCurrencyCode != null)
                    hashCode = hashCode * 59 + this.LocalCurrencyCode.GetHashCode();
                if (this.CountryBankBranchIdentifier != null)
                    hashCode = hashCode * 59 + this.CountryBankBranchIdentifier.GetHashCode();
                if (this.CountryIbanFlag != null)
                    hashCode = hashCode * 59 + this.CountryIbanFlag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
