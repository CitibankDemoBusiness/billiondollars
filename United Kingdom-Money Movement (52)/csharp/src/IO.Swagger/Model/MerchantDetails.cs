/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MerchantDetails
    /// </summary>
    [DataContract]
        public partial class MerchantDetails :  IEquatable<MerchantDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantDetails" /> class.
        /// </summary>
        /// <param name="merchantCustomerRelationshipType">The relationship of the customer with the merchant. (required).</param>
        /// <param name="merchantCustomerRelationshipTypeCode">The relationship code of the customer with the merchant..</param>
        /// <param name="merchantCustomerRelationshipTypeLocal">The relationship of the customer with the merchant in local language..</param>
        public MerchantDetails(string merchantCustomerRelationshipType = default(string), string merchantCustomerRelationshipTypeCode = default(string), string merchantCustomerRelationshipTypeLocal = default(string))
        {
            // to ensure "merchantCustomerRelationshipType" is required (not null)
            if (merchantCustomerRelationshipType == null)
            {
                throw new InvalidDataException("merchantCustomerRelationshipType is a required property for MerchantDetails and cannot be null");
            }
            else
            {
                this.MerchantCustomerRelationshipType = merchantCustomerRelationshipType;
            }
            this.MerchantCustomerRelationshipTypeCode = merchantCustomerRelationshipTypeCode;
            this.MerchantCustomerRelationshipTypeLocal = merchantCustomerRelationshipTypeLocal;
        }
        
        /// <summary>
        /// The relationship of the customer with the merchant.
        /// </summary>
        /// <value>The relationship of the customer with the merchant.</value>
        [DataMember(Name="merchantCustomerRelationshipType", EmitDefaultValue=false)]
        public string MerchantCustomerRelationshipType { get; set; }

        /// <summary>
        /// The relationship code of the customer with the merchant.
        /// </summary>
        /// <value>The relationship code of the customer with the merchant.</value>
        [DataMember(Name="merchantCustomerRelationshipTypeCode", EmitDefaultValue=false)]
        public string MerchantCustomerRelationshipTypeCode { get; set; }

        /// <summary>
        /// The relationship of the customer with the merchant in local language.
        /// </summary>
        /// <value>The relationship of the customer with the merchant in local language.</value>
        [DataMember(Name="merchantCustomerRelationshipTypeLocal", EmitDefaultValue=false)]
        public string MerchantCustomerRelationshipTypeLocal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantDetails {\n");
            sb.Append("  MerchantCustomerRelationshipType: ").Append(MerchantCustomerRelationshipType).Append("\n");
            sb.Append("  MerchantCustomerRelationshipTypeCode: ").Append(MerchantCustomerRelationshipTypeCode).Append("\n");
            sb.Append("  MerchantCustomerRelationshipTypeLocal: ").Append(MerchantCustomerRelationshipTypeLocal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantDetails);
        }

        /// <summary>
        /// Returns true if MerchantDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantCustomerRelationshipType == input.MerchantCustomerRelationshipType ||
                    (this.MerchantCustomerRelationshipType != null &&
                    this.MerchantCustomerRelationshipType.Equals(input.MerchantCustomerRelationshipType))
                ) && 
                (
                    this.MerchantCustomerRelationshipTypeCode == input.MerchantCustomerRelationshipTypeCode ||
                    (this.MerchantCustomerRelationshipTypeCode != null &&
                    this.MerchantCustomerRelationshipTypeCode.Equals(input.MerchantCustomerRelationshipTypeCode))
                ) && 
                (
                    this.MerchantCustomerRelationshipTypeLocal == input.MerchantCustomerRelationshipTypeLocal ||
                    (this.MerchantCustomerRelationshipTypeLocal != null &&
                    this.MerchantCustomerRelationshipTypeLocal.Equals(input.MerchantCustomerRelationshipTypeLocal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantCustomerRelationshipType != null)
                    hashCode = hashCode * 59 + this.MerchantCustomerRelationshipType.GetHashCode();
                if (this.MerchantCustomerRelationshipTypeCode != null)
                    hashCode = hashCode * 59 + this.MerchantCustomerRelationshipTypeCode.GetHashCode();
                if (this.MerchantCustomerRelationshipTypeLocal != null)
                    hashCode = hashCode * 59 + this.MerchantCustomerRelationshipTypeLocal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
