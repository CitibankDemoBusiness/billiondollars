/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TaxPaymentDetails
    /// </summary>
    [DataContract]
        public partial class TaxPaymentDetails :  IEquatable<TaxPaymentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxPaymentDetails" /> class.
        /// </summary>
        /// <param name="idType">Type of Identification document. This is a reference data field. Please use /v1/utilities/referenceData/{idType} resource to get valid values of this field with descriptions (required).</param>
        /// <param name="idNumber">Unique identifier of identification document. (required).</param>
        /// <param name="taxDeclarationType">This field is to indicate the type of tax declaration.This is a reference data field. Please use /v1/utilities/referenceData/{taxDeclarationType} resource to get valid values of this field with descriptions (required).</param>
        /// <param name="taxPaymentYear">This field is to indicate the tax payment year. (required).</param>
        /// <param name="taxPaymentMonth">This field is to indicate the tax payment month. Applicable when taxPaymentPeriod&#x3D;DECADE or DATE..</param>
        /// <param name="taxPaymentDay">This field is to indicate the tax payment day. Applicable when taxPaymentPeriod&#x3D;DATE..</param>
        /// <param name="taxPaymentPeriod">This field is to indicate the period of the tax payment. This is a reference data field. Please use /v1/utilities/referenceData/{taxPaymentPeriod} resource to get valid values of this field with descriptions.</param>
        /// <param name="taxPaymentPeriodNumber">This field is to indicate the period number of the tax payment..</param>
        public TaxPaymentDetails(string idType = default(string), string idNumber = default(string), string taxDeclarationType = default(string), string taxPaymentYear = default(string), string taxPaymentMonth = default(string), string taxPaymentDay = default(string), string taxPaymentPeriod = default(string), string taxPaymentPeriodNumber = default(string))
        {
            // to ensure "idType" is required (not null)
            if (idType == null)
            {
                throw new InvalidDataException("idType is a required property for TaxPaymentDetails and cannot be null");
            }
            else
            {
                this.IdType = idType;
            }
            // to ensure "idNumber" is required (not null)
            if (idNumber == null)
            {
                throw new InvalidDataException("idNumber is a required property for TaxPaymentDetails and cannot be null");
            }
            else
            {
                this.IdNumber = idNumber;
            }
            // to ensure "taxDeclarationType" is required (not null)
            if (taxDeclarationType == null)
            {
                throw new InvalidDataException("taxDeclarationType is a required property for TaxPaymentDetails and cannot be null");
            }
            else
            {
                this.TaxDeclarationType = taxDeclarationType;
            }
            // to ensure "taxPaymentYear" is required (not null)
            if (taxPaymentYear == null)
            {
                throw new InvalidDataException("taxPaymentYear is a required property for TaxPaymentDetails and cannot be null");
            }
            else
            {
                this.TaxPaymentYear = taxPaymentYear;
            }
            this.TaxPaymentMonth = taxPaymentMonth;
            this.TaxPaymentDay = taxPaymentDay;
            this.TaxPaymentPeriod = taxPaymentPeriod;
            this.TaxPaymentPeriodNumber = taxPaymentPeriodNumber;
        }
        
        /// <summary>
        /// Type of Identification document. This is a reference data field. Please use /v1/utilities/referenceData/{idType} resource to get valid values of this field with descriptions
        /// </summary>
        /// <value>Type of Identification document. This is a reference data field. Please use /v1/utilities/referenceData/{idType} resource to get valid values of this field with descriptions</value>
        [DataMember(Name="idType", EmitDefaultValue=false)]
        public string IdType { get; set; }

        /// <summary>
        /// Unique identifier of identification document.
        /// </summary>
        /// <value>Unique identifier of identification document.</value>
        [DataMember(Name="idNumber", EmitDefaultValue=false)]
        public string IdNumber { get; set; }

        /// <summary>
        /// This field is to indicate the type of tax declaration.This is a reference data field. Please use /v1/utilities/referenceData/{taxDeclarationType} resource to get valid values of this field with descriptions
        /// </summary>
        /// <value>This field is to indicate the type of tax declaration.This is a reference data field. Please use /v1/utilities/referenceData/{taxDeclarationType} resource to get valid values of this field with descriptions</value>
        [DataMember(Name="taxDeclarationType", EmitDefaultValue=false)]
        public string TaxDeclarationType { get; set; }

        /// <summary>
        /// This field is to indicate the tax payment year.
        /// </summary>
        /// <value>This field is to indicate the tax payment year.</value>
        [DataMember(Name="taxPaymentYear", EmitDefaultValue=false)]
        public string TaxPaymentYear { get; set; }

        /// <summary>
        /// This field is to indicate the tax payment month. Applicable when taxPaymentPeriod&#x3D;DECADE or DATE.
        /// </summary>
        /// <value>This field is to indicate the tax payment month. Applicable when taxPaymentPeriod&#x3D;DECADE or DATE.</value>
        [DataMember(Name="taxPaymentMonth", EmitDefaultValue=false)]
        public string TaxPaymentMonth { get; set; }

        /// <summary>
        /// This field is to indicate the tax payment day. Applicable when taxPaymentPeriod&#x3D;DATE.
        /// </summary>
        /// <value>This field is to indicate the tax payment day. Applicable when taxPaymentPeriod&#x3D;DATE.</value>
        [DataMember(Name="taxPaymentDay", EmitDefaultValue=false)]
        public string TaxPaymentDay { get; set; }

        /// <summary>
        /// This field is to indicate the period of the tax payment. This is a reference data field. Please use /v1/utilities/referenceData/{taxPaymentPeriod} resource to get valid values of this field with descriptions
        /// </summary>
        /// <value>This field is to indicate the period of the tax payment. This is a reference data field. Please use /v1/utilities/referenceData/{taxPaymentPeriod} resource to get valid values of this field with descriptions</value>
        [DataMember(Name="taxPaymentPeriod", EmitDefaultValue=false)]
        public string TaxPaymentPeriod { get; set; }

        /// <summary>
        /// This field is to indicate the period number of the tax payment.
        /// </summary>
        /// <value>This field is to indicate the period number of the tax payment.</value>
        [DataMember(Name="taxPaymentPeriodNumber", EmitDefaultValue=false)]
        public string TaxPaymentPeriodNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxPaymentDetails {\n");
            sb.Append("  IdType: ").Append(IdType).Append("\n");
            sb.Append("  IdNumber: ").Append(IdNumber).Append("\n");
            sb.Append("  TaxDeclarationType: ").Append(TaxDeclarationType).Append("\n");
            sb.Append("  TaxPaymentYear: ").Append(TaxPaymentYear).Append("\n");
            sb.Append("  TaxPaymentMonth: ").Append(TaxPaymentMonth).Append("\n");
            sb.Append("  TaxPaymentDay: ").Append(TaxPaymentDay).Append("\n");
            sb.Append("  TaxPaymentPeriod: ").Append(TaxPaymentPeriod).Append("\n");
            sb.Append("  TaxPaymentPeriodNumber: ").Append(TaxPaymentPeriodNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxPaymentDetails);
        }

        /// <summary>
        /// Returns true if TaxPaymentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxPaymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxPaymentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdType == input.IdType ||
                    (this.IdType != null &&
                    this.IdType.Equals(input.IdType))
                ) && 
                (
                    this.IdNumber == input.IdNumber ||
                    (this.IdNumber != null &&
                    this.IdNumber.Equals(input.IdNumber))
                ) && 
                (
                    this.TaxDeclarationType == input.TaxDeclarationType ||
                    (this.TaxDeclarationType != null &&
                    this.TaxDeclarationType.Equals(input.TaxDeclarationType))
                ) && 
                (
                    this.TaxPaymentYear == input.TaxPaymentYear ||
                    (this.TaxPaymentYear != null &&
                    this.TaxPaymentYear.Equals(input.TaxPaymentYear))
                ) && 
                (
                    this.TaxPaymentMonth == input.TaxPaymentMonth ||
                    (this.TaxPaymentMonth != null &&
                    this.TaxPaymentMonth.Equals(input.TaxPaymentMonth))
                ) && 
                (
                    this.TaxPaymentDay == input.TaxPaymentDay ||
                    (this.TaxPaymentDay != null &&
                    this.TaxPaymentDay.Equals(input.TaxPaymentDay))
                ) && 
                (
                    this.TaxPaymentPeriod == input.TaxPaymentPeriod ||
                    (this.TaxPaymentPeriod != null &&
                    this.TaxPaymentPeriod.Equals(input.TaxPaymentPeriod))
                ) && 
                (
                    this.TaxPaymentPeriodNumber == input.TaxPaymentPeriodNumber ||
                    (this.TaxPaymentPeriodNumber != null &&
                    this.TaxPaymentPeriodNumber.Equals(input.TaxPaymentPeriodNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdType != null)
                    hashCode = hashCode * 59 + this.IdType.GetHashCode();
                if (this.IdNumber != null)
                    hashCode = hashCode * 59 + this.IdNumber.GetHashCode();
                if (this.TaxDeclarationType != null)
                    hashCode = hashCode * 59 + this.TaxDeclarationType.GetHashCode();
                if (this.TaxPaymentYear != null)
                    hashCode = hashCode * 59 + this.TaxPaymentYear.GetHashCode();
                if (this.TaxPaymentMonth != null)
                    hashCode = hashCode * 59 + this.TaxPaymentMonth.GetHashCode();
                if (this.TaxPaymentDay != null)
                    hashCode = hashCode * 59 + this.TaxPaymentDay.GetHashCode();
                if (this.TaxPaymentPeriod != null)
                    hashCode = hashCode * 59 + this.TaxPaymentPeriod.GetHashCode();
                if (this.TaxPaymentPeriodNumber != null)
                    hashCode = hashCode * 59 + this.TaxPaymentPeriodNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
