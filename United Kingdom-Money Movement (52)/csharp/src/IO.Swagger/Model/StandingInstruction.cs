/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StandingInstruction
    /// </summary>
    [DataContract]
        public partial class StandingInstruction :  IEquatable<StandingInstruction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandingInstruction" /> class.
        /// </summary>
        /// <param name="standingInstructionStartDate">Standing instruction start date in ISO 8601 format YYYY-MM-DD. (required).</param>
        /// <param name="paymentFrequency">The frequency of payment. This is a reference data. Please use /v1/utilities/referenceData/{paymentFrequency} resource to get valid value of this field. (required).</param>
        /// <param name="perpetualFlag">Flag to indicate if the standing instruction will be continued until cancellation..</param>
        /// <param name="standingInstructionEndDate">Standing instruction end date in ISO 8601 date format YYYY-MM-DD..</param>
        public StandingInstruction(DateTime? standingInstructionStartDate = default(DateTime?), string paymentFrequency = default(string), bool? perpetualFlag = default(bool?), DateTime? standingInstructionEndDate = default(DateTime?))
        {
            // to ensure "standingInstructionStartDate" is required (not null)
            if (standingInstructionStartDate == null)
            {
                throw new InvalidDataException("standingInstructionStartDate is a required property for StandingInstruction and cannot be null");
            }
            else
            {
                this.StandingInstructionStartDate = standingInstructionStartDate;
            }
            // to ensure "paymentFrequency" is required (not null)
            if (paymentFrequency == null)
            {
                throw new InvalidDataException("paymentFrequency is a required property for StandingInstruction and cannot be null");
            }
            else
            {
                this.PaymentFrequency = paymentFrequency;
            }
            this.PerpetualFlag = perpetualFlag;
            this.StandingInstructionEndDate = standingInstructionEndDate;
        }
        
        /// <summary>
        /// Standing instruction start date in ISO 8601 format YYYY-MM-DD.
        /// </summary>
        /// <value>Standing instruction start date in ISO 8601 format YYYY-MM-DD.</value>
        [DataMember(Name="standingInstructionStartDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StandingInstructionStartDate { get; set; }

        /// <summary>
        /// The frequency of payment. This is a reference data. Please use /v1/utilities/referenceData/{paymentFrequency} resource to get valid value of this field.
        /// </summary>
        /// <value>The frequency of payment. This is a reference data. Please use /v1/utilities/referenceData/{paymentFrequency} resource to get valid value of this field.</value>
        [DataMember(Name="paymentFrequency", EmitDefaultValue=false)]
        public string PaymentFrequency { get; set; }

        /// <summary>
        /// Flag to indicate if the standing instruction will be continued until cancellation.
        /// </summary>
        /// <value>Flag to indicate if the standing instruction will be continued until cancellation.</value>
        [DataMember(Name="perpetualFlag", EmitDefaultValue=false)]
        public bool? PerpetualFlag { get; set; }

        /// <summary>
        /// Standing instruction end date in ISO 8601 date format YYYY-MM-DD.
        /// </summary>
        /// <value>Standing instruction end date in ISO 8601 date format YYYY-MM-DD.</value>
        [DataMember(Name="standingInstructionEndDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StandingInstructionEndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandingInstruction {\n");
            sb.Append("  StandingInstructionStartDate: ").Append(StandingInstructionStartDate).Append("\n");
            sb.Append("  PaymentFrequency: ").Append(PaymentFrequency).Append("\n");
            sb.Append("  PerpetualFlag: ").Append(PerpetualFlag).Append("\n");
            sb.Append("  StandingInstructionEndDate: ").Append(StandingInstructionEndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandingInstruction);
        }

        /// <summary>
        /// Returns true if StandingInstruction instances are equal
        /// </summary>
        /// <param name="input">Instance of StandingInstruction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandingInstruction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StandingInstructionStartDate == input.StandingInstructionStartDate ||
                    (this.StandingInstructionStartDate != null &&
                    this.StandingInstructionStartDate.Equals(input.StandingInstructionStartDate))
                ) && 
                (
                    this.PaymentFrequency == input.PaymentFrequency ||
                    (this.PaymentFrequency != null &&
                    this.PaymentFrequency.Equals(input.PaymentFrequency))
                ) && 
                (
                    this.PerpetualFlag == input.PerpetualFlag ||
                    (this.PerpetualFlag != null &&
                    this.PerpetualFlag.Equals(input.PerpetualFlag))
                ) && 
                (
                    this.StandingInstructionEndDate == input.StandingInstructionEndDate ||
                    (this.StandingInstructionEndDate != null &&
                    this.StandingInstructionEndDate.Equals(input.StandingInstructionEndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StandingInstructionStartDate != null)
                    hashCode = hashCode * 59 + this.StandingInstructionStartDate.GetHashCode();
                if (this.PaymentFrequency != null)
                    hashCode = hashCode * 59 + this.PaymentFrequency.GetHashCode();
                if (this.PerpetualFlag != null)
                    hashCode = hashCode * 59 + this.PerpetualFlag.GetHashCode();
                if (this.StandingInstructionEndDate != null)
                    hashCode = hashCode * 59 + this.StandingInstructionEndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
