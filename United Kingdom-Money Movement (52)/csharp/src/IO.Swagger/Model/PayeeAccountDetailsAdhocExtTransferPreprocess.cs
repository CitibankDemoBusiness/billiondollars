/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PayeeAccountDetailsAdhocExtTransferPreprocess
    /// </summary>
    [DataContract]
        public partial class PayeeAccountDetailsAdhocExtTransferPreprocess :  IEquatable<PayeeAccountDetailsAdhocExtTransferPreprocess>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayeeAccountDetailsAdhocExtTransferPreprocess" /> class.
        /// </summary>
        /// <param name="payeeAccountNumber">The account number of the destination account (required).</param>
        /// <param name="payeeName">Name of the beneficiary..</param>
        /// <param name="payeeNickName">The nick name of the beneficiary assigned by the customer..</param>
        /// <param name="payeeCurrencyCode">The currency code of the destination account in ISO 4217 format (required).</param>
        /// <param name="payeeAddress">payeeAddress.</param>
        /// <param name="bankDetails">bankDetails.</param>
        public PayeeAccountDetailsAdhocExtTransferPreprocess(string payeeAccountNumber = default(string), string payeeName = default(string), string payeeNickName = default(string), string payeeCurrencyCode = default(string), PayeeAddress payeeAddress = default(PayeeAddress), BankDetailsExtTransfer bankDetails = default(BankDetailsExtTransfer))
        {
            // to ensure "payeeAccountNumber" is required (not null)
            if (payeeAccountNumber == null)
            {
                throw new InvalidDataException("payeeAccountNumber is a required property for PayeeAccountDetailsAdhocExtTransferPreprocess and cannot be null");
            }
            else
            {
                this.PayeeAccountNumber = payeeAccountNumber;
            }
            // to ensure "payeeCurrencyCode" is required (not null)
            if (payeeCurrencyCode == null)
            {
                throw new InvalidDataException("payeeCurrencyCode is a required property for PayeeAccountDetailsAdhocExtTransferPreprocess and cannot be null");
            }
            else
            {
                this.PayeeCurrencyCode = payeeCurrencyCode;
            }
            this.PayeeName = payeeName;
            this.PayeeNickName = payeeNickName;
            this.PayeeAddress = payeeAddress;
            this.BankDetails = bankDetails;
        }
        
        /// <summary>
        /// The account number of the destination account
        /// </summary>
        /// <value>The account number of the destination account</value>
        [DataMember(Name="payeeAccountNumber", EmitDefaultValue=false)]
        public string PayeeAccountNumber { get; set; }

        /// <summary>
        /// Name of the beneficiary.
        /// </summary>
        /// <value>Name of the beneficiary.</value>
        [DataMember(Name="payeeName", EmitDefaultValue=false)]
        public string PayeeName { get; set; }

        /// <summary>
        /// The nick name of the beneficiary assigned by the customer.
        /// </summary>
        /// <value>The nick name of the beneficiary assigned by the customer.</value>
        [DataMember(Name="payeeNickName", EmitDefaultValue=false)]
        public string PayeeNickName { get; set; }

        /// <summary>
        /// The currency code of the destination account in ISO 4217 format
        /// </summary>
        /// <value>The currency code of the destination account in ISO 4217 format</value>
        [DataMember(Name="payeeCurrencyCode", EmitDefaultValue=false)]
        public string PayeeCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets PayeeAddress
        /// </summary>
        [DataMember(Name="payeeAddress", EmitDefaultValue=false)]
        public PayeeAddress PayeeAddress { get; set; }

        /// <summary>
        /// Gets or Sets BankDetails
        /// </summary>
        [DataMember(Name="bankDetails", EmitDefaultValue=false)]
        public BankDetailsExtTransfer BankDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayeeAccountDetailsAdhocExtTransferPreprocess {\n");
            sb.Append("  PayeeAccountNumber: ").Append(PayeeAccountNumber).Append("\n");
            sb.Append("  PayeeName: ").Append(PayeeName).Append("\n");
            sb.Append("  PayeeNickName: ").Append(PayeeNickName).Append("\n");
            sb.Append("  PayeeCurrencyCode: ").Append(PayeeCurrencyCode).Append("\n");
            sb.Append("  PayeeAddress: ").Append(PayeeAddress).Append("\n");
            sb.Append("  BankDetails: ").Append(BankDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayeeAccountDetailsAdhocExtTransferPreprocess);
        }

        /// <summary>
        /// Returns true if PayeeAccountDetailsAdhocExtTransferPreprocess instances are equal
        /// </summary>
        /// <param name="input">Instance of PayeeAccountDetailsAdhocExtTransferPreprocess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayeeAccountDetailsAdhocExtTransferPreprocess input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayeeAccountNumber == input.PayeeAccountNumber ||
                    (this.PayeeAccountNumber != null &&
                    this.PayeeAccountNumber.Equals(input.PayeeAccountNumber))
                ) && 
                (
                    this.PayeeName == input.PayeeName ||
                    (this.PayeeName != null &&
                    this.PayeeName.Equals(input.PayeeName))
                ) && 
                (
                    this.PayeeNickName == input.PayeeNickName ||
                    (this.PayeeNickName != null &&
                    this.PayeeNickName.Equals(input.PayeeNickName))
                ) && 
                (
                    this.PayeeCurrencyCode == input.PayeeCurrencyCode ||
                    (this.PayeeCurrencyCode != null &&
                    this.PayeeCurrencyCode.Equals(input.PayeeCurrencyCode))
                ) && 
                (
                    this.PayeeAddress == input.PayeeAddress ||
                    (this.PayeeAddress != null &&
                    this.PayeeAddress.Equals(input.PayeeAddress))
                ) && 
                (
                    this.BankDetails == input.BankDetails ||
                    (this.BankDetails != null &&
                    this.BankDetails.Equals(input.BankDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayeeAccountNumber != null)
                    hashCode = hashCode * 59 + this.PayeeAccountNumber.GetHashCode();
                if (this.PayeeName != null)
                    hashCode = hashCode * 59 + this.PayeeName.GetHashCode();
                if (this.PayeeNickName != null)
                    hashCode = hashCode * 59 + this.PayeeNickName.GetHashCode();
                if (this.PayeeCurrencyCode != null)
                    hashCode = hashCode * 59 + this.PayeeCurrencyCode.GetHashCode();
                if (this.PayeeAddress != null)
                    hashCode = hashCode * 59 + this.PayeeAddress.GetHashCode();
                if (this.BankDetails != null)
                    hashCode = hashCode * 59 + this.BankDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
