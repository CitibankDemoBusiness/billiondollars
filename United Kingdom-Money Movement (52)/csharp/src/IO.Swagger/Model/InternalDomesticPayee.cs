/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InternalDomesticPayee
    /// </summary>
    [DataContract]
        public partial class InternalDomesticPayee :  IEquatable<InternalDomesticPayee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InternalDomesticPayee" /> class.
        /// </summary>
        /// <param name="payeeType">Identifies the type of payee based on the destination of the payee.This is a reference data field. Please use /v1/utilities/referenceData/{payeeType} resource to get valid value of this field with description. (required).</param>
        /// <param name="payeeStatus">The payee status. This is a reference data field. Please use /v1/utilities/referenceData/{payeeStatus} resource to get valid value of this field with description..</param>
        /// <param name="currencyCode">The currency code of the payee account in ISO 4217 format.</param>
        /// <param name="payeeName">Name of the payee. (required).</param>
        /// <param name="payeeNickName">The nick name of the payee assigned by the customer. (required).</param>
        /// <param name="paymentPriority">Priority to the payment used to identify urgency. This is a reference data field. Please use /v1/utilities/referenceData/{paymentPriority} resource to get valid value of this field with description..</param>
        /// <param name="payeeNotes">Free text that usually describes purpose of payment. (required).</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer..</param>
        /// <param name="accountId">The account identifier of the payee in encrypted format..</param>
        /// <param name="displayCardNumber">A masked card number that can be displayed to the customer..</param>
        /// <param name="cardId">The card id  in encrypted format.</param>
        public InternalDomesticPayee(string payeeType = default(string), string payeeStatus = default(string), string currencyCode = default(string), string payeeName = default(string), string payeeNickName = default(string), string paymentPriority = default(string), string payeeNotes = default(string), string displayAccountNumber = default(string), string accountId = default(string), string displayCardNumber = default(string), string cardId = default(string))
        {
            // to ensure "payeeType" is required (not null)
            if (payeeType == null)
            {
                throw new InvalidDataException("payeeType is a required property for InternalDomesticPayee and cannot be null");
            }
            else
            {
                this.PayeeType = payeeType;
            }
            // to ensure "payeeName" is required (not null)
            if (payeeName == null)
            {
                throw new InvalidDataException("payeeName is a required property for InternalDomesticPayee and cannot be null");
            }
            else
            {
                this.PayeeName = payeeName;
            }
            // to ensure "payeeNickName" is required (not null)
            if (payeeNickName == null)
            {
                throw new InvalidDataException("payeeNickName is a required property for InternalDomesticPayee and cannot be null");
            }
            else
            {
                this.PayeeNickName = payeeNickName;
            }
            // to ensure "payeeNotes" is required (not null)
            if (payeeNotes == null)
            {
                throw new InvalidDataException("payeeNotes is a required property for InternalDomesticPayee and cannot be null");
            }
            else
            {
                this.PayeeNotes = payeeNotes;
            }
            this.PayeeStatus = payeeStatus;
            this.CurrencyCode = currencyCode;
            this.PaymentPriority = paymentPriority;
            this.DisplayAccountNumber = displayAccountNumber;
            this.AccountId = accountId;
            this.DisplayCardNumber = displayCardNumber;
            this.CardId = cardId;
        }
        
        /// <summary>
        /// Identifies the type of payee based on the destination of the payee.This is a reference data field. Please use /v1/utilities/referenceData/{payeeType} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Identifies the type of payee based on the destination of the payee.This is a reference data field. Please use /v1/utilities/referenceData/{payeeType} resource to get valid value of this field with description.</value>
        [DataMember(Name="payeeType", EmitDefaultValue=false)]
        public string PayeeType { get; set; }

        /// <summary>
        /// The payee status. This is a reference data field. Please use /v1/utilities/referenceData/{payeeStatus} resource to get valid value of this field with description.
        /// </summary>
        /// <value>The payee status. This is a reference data field. Please use /v1/utilities/referenceData/{payeeStatus} resource to get valid value of this field with description.</value>
        [DataMember(Name="payeeStatus", EmitDefaultValue=false)]
        public string PayeeStatus { get; set; }

        /// <summary>
        /// The currency code of the payee account in ISO 4217 format
        /// </summary>
        /// <value>The currency code of the payee account in ISO 4217 format</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Name of the payee.
        /// </summary>
        /// <value>Name of the payee.</value>
        [DataMember(Name="payeeName", EmitDefaultValue=false)]
        public string PayeeName { get; set; }

        /// <summary>
        /// The nick name of the payee assigned by the customer.
        /// </summary>
        /// <value>The nick name of the payee assigned by the customer.</value>
        [DataMember(Name="payeeNickName", EmitDefaultValue=false)]
        public string PayeeNickName { get; set; }

        /// <summary>
        /// Priority to the payment used to identify urgency. This is a reference data field. Please use /v1/utilities/referenceData/{paymentPriority} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Priority to the payment used to identify urgency. This is a reference data field. Please use /v1/utilities/referenceData/{paymentPriority} resource to get valid value of this field with description.</value>
        [DataMember(Name="paymentPriority", EmitDefaultValue=false)]
        public string PaymentPriority { get; set; }

        /// <summary>
        /// Free text that usually describes purpose of payment.
        /// </summary>
        /// <value>Free text that usually describes purpose of payment.</value>
        [DataMember(Name="payeeNotes", EmitDefaultValue=false)]
        public string PayeeNotes { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer.
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer.</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// The account identifier of the payee in encrypted format.
        /// </summary>
        /// <value>The account identifier of the payee in encrypted format.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// A masked card number that can be displayed to the customer.
        /// </summary>
        /// <value>A masked card number that can be displayed to the customer.</value>
        [DataMember(Name="displayCardNumber", EmitDefaultValue=false)]
        public string DisplayCardNumber { get; set; }

        /// <summary>
        /// The card id  in encrypted format
        /// </summary>
        /// <value>The card id  in encrypted format</value>
        [DataMember(Name="cardId", EmitDefaultValue=false)]
        public string CardId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InternalDomesticPayee {\n");
            sb.Append("  PayeeType: ").Append(PayeeType).Append("\n");
            sb.Append("  PayeeStatus: ").Append(PayeeStatus).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  PayeeName: ").Append(PayeeName).Append("\n");
            sb.Append("  PayeeNickName: ").Append(PayeeNickName).Append("\n");
            sb.Append("  PaymentPriority: ").Append(PaymentPriority).Append("\n");
            sb.Append("  PayeeNotes: ").Append(PayeeNotes).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  DisplayCardNumber: ").Append(DisplayCardNumber).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InternalDomesticPayee);
        }

        /// <summary>
        /// Returns true if InternalDomesticPayee instances are equal
        /// </summary>
        /// <param name="input">Instance of InternalDomesticPayee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InternalDomesticPayee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayeeType == input.PayeeType ||
                    (this.PayeeType != null &&
                    this.PayeeType.Equals(input.PayeeType))
                ) && 
                (
                    this.PayeeStatus == input.PayeeStatus ||
                    (this.PayeeStatus != null &&
                    this.PayeeStatus.Equals(input.PayeeStatus))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.PayeeName == input.PayeeName ||
                    (this.PayeeName != null &&
                    this.PayeeName.Equals(input.PayeeName))
                ) && 
                (
                    this.PayeeNickName == input.PayeeNickName ||
                    (this.PayeeNickName != null &&
                    this.PayeeNickName.Equals(input.PayeeNickName))
                ) && 
                (
                    this.PaymentPriority == input.PaymentPriority ||
                    (this.PaymentPriority != null &&
                    this.PaymentPriority.Equals(input.PaymentPriority))
                ) && 
                (
                    this.PayeeNotes == input.PayeeNotes ||
                    (this.PayeeNotes != null &&
                    this.PayeeNotes.Equals(input.PayeeNotes))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.DisplayCardNumber == input.DisplayCardNumber ||
                    (this.DisplayCardNumber != null &&
                    this.DisplayCardNumber.Equals(input.DisplayCardNumber))
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayeeType != null)
                    hashCode = hashCode * 59 + this.PayeeType.GetHashCode();
                if (this.PayeeStatus != null)
                    hashCode = hashCode * 59 + this.PayeeStatus.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.PayeeName != null)
                    hashCode = hashCode * 59 + this.PayeeName.GetHashCode();
                if (this.PayeeNickName != null)
                    hashCode = hashCode * 59 + this.PayeeNickName.GetHashCode();
                if (this.PaymentPriority != null)
                    hashCode = hashCode * 59 + this.PaymentPriority.GetHashCode();
                if (this.PayeeNotes != null)
                    hashCode = hashCode * 59 + this.PayeeNotes.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.DisplayCardNumber != null)
                    hashCode = hashCode * 59 + this.DisplayCardNumber.GetHashCode();
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
