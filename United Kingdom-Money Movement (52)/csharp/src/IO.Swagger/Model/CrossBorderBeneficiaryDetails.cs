/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CrossBorderBeneficiaryDetails
    /// </summary>
    [DataContract]
        public partial class CrossBorderBeneficiaryDetails :  IEquatable<CrossBorderBeneficiaryDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderBeneficiaryDetails" /> class.
        /// </summary>
        /// <param name="beneficiaryType">Type of beneficiary.This is a reference data field. Please use /v1/utilities/referenceData/{beneficiaryType} resource to get valid value of this field with description.</param>
        /// <param name="transactionCategory">Type of transaction.This is a reference data field. Please use /v1/utilities/referenceData/{transactionCategory} resource to get valid value of this field with description.</param>
        /// <param name="beneficiaryTaxId">Tax Payer Identification Code.</param>
        /// <param name="legalTaxId">Tax Payer Identification Code for legal Entities assigned by the Tax Authorities.</param>
        /// <param name="beneficiaryNationalIdNumber">Computerized National Identity Card/Smart National Identity Card Number.</param>
        /// <param name="beneficiaryNationalIdType">national Id type. This is a reference data field. Please use /v1/utilities/referenceData/{beneficiaryNationalIdType} resource to get valid value of this field with description.</param>
        /// <param name="beneficiaryNationality">Beneficiary nationality.</param>
        /// <param name="beneficiaryDateOfBirth">Beneficiary date of birth in ISO 8601 date format YYYY-MM-DD..</param>
        public CrossBorderBeneficiaryDetails(string beneficiaryType = default(string), string transactionCategory = default(string), string beneficiaryTaxId = default(string), string legalTaxId = default(string), string beneficiaryNationalIdNumber = default(string), string beneficiaryNationalIdType = default(string), string beneficiaryNationality = default(string), string beneficiaryDateOfBirth = default(string))
        {
            this.BeneficiaryType = beneficiaryType;
            this.TransactionCategory = transactionCategory;
            this.BeneficiaryTaxId = beneficiaryTaxId;
            this.LegalTaxId = legalTaxId;
            this.BeneficiaryNationalIdNumber = beneficiaryNationalIdNumber;
            this.BeneficiaryNationalIdType = beneficiaryNationalIdType;
            this.BeneficiaryNationality = beneficiaryNationality;
            this.BeneficiaryDateOfBirth = beneficiaryDateOfBirth;
        }
        
        /// <summary>
        /// Type of beneficiary.This is a reference data field. Please use /v1/utilities/referenceData/{beneficiaryType} resource to get valid value of this field with description
        /// </summary>
        /// <value>Type of beneficiary.This is a reference data field. Please use /v1/utilities/referenceData/{beneficiaryType} resource to get valid value of this field with description</value>
        [DataMember(Name="beneficiaryType", EmitDefaultValue=false)]
        public string BeneficiaryType { get; set; }

        /// <summary>
        /// Type of transaction.This is a reference data field. Please use /v1/utilities/referenceData/{transactionCategory} resource to get valid value of this field with description
        /// </summary>
        /// <value>Type of transaction.This is a reference data field. Please use /v1/utilities/referenceData/{transactionCategory} resource to get valid value of this field with description</value>
        [DataMember(Name="transactionCategory", EmitDefaultValue=false)]
        public string TransactionCategory { get; set; }

        /// <summary>
        /// Tax Payer Identification Code
        /// </summary>
        /// <value>Tax Payer Identification Code</value>
        [DataMember(Name="beneficiaryTaxId", EmitDefaultValue=false)]
        public string BeneficiaryTaxId { get; set; }

        /// <summary>
        /// Tax Payer Identification Code for legal Entities assigned by the Tax Authorities
        /// </summary>
        /// <value>Tax Payer Identification Code for legal Entities assigned by the Tax Authorities</value>
        [DataMember(Name="legalTaxId", EmitDefaultValue=false)]
        public string LegalTaxId { get; set; }

        /// <summary>
        /// Computerized National Identity Card/Smart National Identity Card Number
        /// </summary>
        /// <value>Computerized National Identity Card/Smart National Identity Card Number</value>
        [DataMember(Name="beneficiaryNationalIdNumber", EmitDefaultValue=false)]
        public string BeneficiaryNationalIdNumber { get; set; }

        /// <summary>
        /// national Id type. This is a reference data field. Please use /v1/utilities/referenceData/{beneficiaryNationalIdType} resource to get valid value of this field with description
        /// </summary>
        /// <value>national Id type. This is a reference data field. Please use /v1/utilities/referenceData/{beneficiaryNationalIdType} resource to get valid value of this field with description</value>
        [DataMember(Name="beneficiaryNationalIdType", EmitDefaultValue=false)]
        public string BeneficiaryNationalIdType { get; set; }

        /// <summary>
        /// Beneficiary nationality
        /// </summary>
        /// <value>Beneficiary nationality</value>
        [DataMember(Name="beneficiaryNationality", EmitDefaultValue=false)]
        public string BeneficiaryNationality { get; set; }

        /// <summary>
        /// Beneficiary date of birth in ISO 8601 date format YYYY-MM-DD.
        /// </summary>
        /// <value>Beneficiary date of birth in ISO 8601 date format YYYY-MM-DD.</value>
        [DataMember(Name="beneficiaryDateOfBirth", EmitDefaultValue=false)]
        public string BeneficiaryDateOfBirth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossBorderBeneficiaryDetails {\n");
            sb.Append("  BeneficiaryType: ").Append(BeneficiaryType).Append("\n");
            sb.Append("  TransactionCategory: ").Append(TransactionCategory).Append("\n");
            sb.Append("  BeneficiaryTaxId: ").Append(BeneficiaryTaxId).Append("\n");
            sb.Append("  LegalTaxId: ").Append(LegalTaxId).Append("\n");
            sb.Append("  BeneficiaryNationalIdNumber: ").Append(BeneficiaryNationalIdNumber).Append("\n");
            sb.Append("  BeneficiaryNationalIdType: ").Append(BeneficiaryNationalIdType).Append("\n");
            sb.Append("  BeneficiaryNationality: ").Append(BeneficiaryNationality).Append("\n");
            sb.Append("  BeneficiaryDateOfBirth: ").Append(BeneficiaryDateOfBirth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossBorderBeneficiaryDetails);
        }

        /// <summary>
        /// Returns true if CrossBorderBeneficiaryDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossBorderBeneficiaryDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossBorderBeneficiaryDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BeneficiaryType == input.BeneficiaryType ||
                    (this.BeneficiaryType != null &&
                    this.BeneficiaryType.Equals(input.BeneficiaryType))
                ) && 
                (
                    this.TransactionCategory == input.TransactionCategory ||
                    (this.TransactionCategory != null &&
                    this.TransactionCategory.Equals(input.TransactionCategory))
                ) && 
                (
                    this.BeneficiaryTaxId == input.BeneficiaryTaxId ||
                    (this.BeneficiaryTaxId != null &&
                    this.BeneficiaryTaxId.Equals(input.BeneficiaryTaxId))
                ) && 
                (
                    this.LegalTaxId == input.LegalTaxId ||
                    (this.LegalTaxId != null &&
                    this.LegalTaxId.Equals(input.LegalTaxId))
                ) && 
                (
                    this.BeneficiaryNationalIdNumber == input.BeneficiaryNationalIdNumber ||
                    (this.BeneficiaryNationalIdNumber != null &&
                    this.BeneficiaryNationalIdNumber.Equals(input.BeneficiaryNationalIdNumber))
                ) && 
                (
                    this.BeneficiaryNationalIdType == input.BeneficiaryNationalIdType ||
                    (this.BeneficiaryNationalIdType != null &&
                    this.BeneficiaryNationalIdType.Equals(input.BeneficiaryNationalIdType))
                ) && 
                (
                    this.BeneficiaryNationality == input.BeneficiaryNationality ||
                    (this.BeneficiaryNationality != null &&
                    this.BeneficiaryNationality.Equals(input.BeneficiaryNationality))
                ) && 
                (
                    this.BeneficiaryDateOfBirth == input.BeneficiaryDateOfBirth ||
                    (this.BeneficiaryDateOfBirth != null &&
                    this.BeneficiaryDateOfBirth.Equals(input.BeneficiaryDateOfBirth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BeneficiaryType != null)
                    hashCode = hashCode * 59 + this.BeneficiaryType.GetHashCode();
                if (this.TransactionCategory != null)
                    hashCode = hashCode * 59 + this.TransactionCategory.GetHashCode();
                if (this.BeneficiaryTaxId != null)
                    hashCode = hashCode * 59 + this.BeneficiaryTaxId.GetHashCode();
                if (this.LegalTaxId != null)
                    hashCode = hashCode * 59 + this.LegalTaxId.GetHashCode();
                if (this.BeneficiaryNationalIdNumber != null)
                    hashCode = hashCode * 59 + this.BeneficiaryNationalIdNumber.GetHashCode();
                if (this.BeneficiaryNationalIdType != null)
                    hashCode = hashCode * 59 + this.BeneficiaryNationalIdType.GetHashCode();
                if (this.BeneficiaryNationality != null)
                    hashCode = hashCode * 59 + this.BeneficiaryNationality.GetHashCode();
                if (this.BeneficiaryDateOfBirth != null)
                    hashCode = hashCode * 59 + this.BeneficiaryDateOfBirth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
