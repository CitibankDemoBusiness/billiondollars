/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TransactionDetails
    /// </summary>
    [DataContract]
        public partial class TransactionDetails :  IEquatable<TransactionDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionDetails" /> class.
        /// </summary>
        /// <param name="individualBundleId">This is the individual bundle id assigned to the transaction (required).</param>
        /// <param name="transactionId">id assigned to the transaction if it is successful.</param>
        /// <param name="beneficiaryName">Name of the beneficiary.</param>
        /// <param name="beneficiaryBankName">Name of the beneficiary Bank.</param>
        /// <param name="transactionAmount">Transaction Amount.</param>
        /// <param name="transactionCurrencyCode">Transaction Currency.</param>
        /// <param name="transactionDate">Date when the transaction was booked.</param>
        /// <param name="transactionStatus">Transaction Status.</param>
        /// <param name="transactionType">to define if transaction was future dated or same day.</param>
        public TransactionDetails(string individualBundleId = default(string), string transactionId = default(string), string beneficiaryName = default(string), string beneficiaryBankName = default(string), double? transactionAmount = default(double?), string transactionCurrencyCode = default(string), DateTime? transactionDate = default(DateTime?), string transactionStatus = default(string), string transactionType = default(string))
        {
            // to ensure "individualBundleId" is required (not null)
            if (individualBundleId == null)
            {
                throw new InvalidDataException("individualBundleId is a required property for TransactionDetails and cannot be null");
            }
            else
            {
                this.IndividualBundleId = individualBundleId;
            }
            this.TransactionId = transactionId;
            this.BeneficiaryName = beneficiaryName;
            this.BeneficiaryBankName = beneficiaryBankName;
            this.TransactionAmount = transactionAmount;
            this.TransactionCurrencyCode = transactionCurrencyCode;
            this.TransactionDate = transactionDate;
            this.TransactionStatus = transactionStatus;
            this.TransactionType = transactionType;
        }
        
        /// <summary>
        /// This is the individual bundle id assigned to the transaction
        /// </summary>
        /// <value>This is the individual bundle id assigned to the transaction</value>
        [DataMember(Name="individualBundleId", EmitDefaultValue=false)]
        public string IndividualBundleId { get; set; }

        /// <summary>
        /// id assigned to the transaction if it is successful
        /// </summary>
        /// <value>id assigned to the transaction if it is successful</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Name of the beneficiary
        /// </summary>
        /// <value>Name of the beneficiary</value>
        [DataMember(Name="beneficiaryName", EmitDefaultValue=false)]
        public string BeneficiaryName { get; set; }

        /// <summary>
        /// Name of the beneficiary Bank
        /// </summary>
        /// <value>Name of the beneficiary Bank</value>
        [DataMember(Name="beneficiaryBankName", EmitDefaultValue=false)]
        public string BeneficiaryBankName { get; set; }

        /// <summary>
        /// Transaction Amount
        /// </summary>
        /// <value>Transaction Amount</value>
        [DataMember(Name="transactionAmount", EmitDefaultValue=false)]
        public double? TransactionAmount { get; set; }

        /// <summary>
        /// Transaction Currency
        /// </summary>
        /// <value>Transaction Currency</value>
        [DataMember(Name="transactionCurrencyCode", EmitDefaultValue=false)]
        public string TransactionCurrencyCode { get; set; }

        /// <summary>
        /// Date when the transaction was booked
        /// </summary>
        /// <value>Date when the transaction was booked</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TransactionDate { get; set; }

        /// <summary>
        /// Transaction Status
        /// </summary>
        /// <value>Transaction Status</value>
        [DataMember(Name="transactionStatus", EmitDefaultValue=false)]
        public string TransactionStatus { get; set; }

        /// <summary>
        /// to define if transaction was future dated or same day
        /// </summary>
        /// <value>to define if transaction was future dated or same day</value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionDetails {\n");
            sb.Append("  IndividualBundleId: ").Append(IndividualBundleId).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  BeneficiaryName: ").Append(BeneficiaryName).Append("\n");
            sb.Append("  BeneficiaryBankName: ").Append(BeneficiaryBankName).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  TransactionCurrencyCode: ").Append(TransactionCurrencyCode).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionDetails);
        }

        /// <summary>
        /// Returns true if TransactionDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IndividualBundleId == input.IndividualBundleId ||
                    (this.IndividualBundleId != null &&
                    this.IndividualBundleId.Equals(input.IndividualBundleId))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.BeneficiaryName == input.BeneficiaryName ||
                    (this.BeneficiaryName != null &&
                    this.BeneficiaryName.Equals(input.BeneficiaryName))
                ) && 
                (
                    this.BeneficiaryBankName == input.BeneficiaryBankName ||
                    (this.BeneficiaryBankName != null &&
                    this.BeneficiaryBankName.Equals(input.BeneficiaryBankName))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.TransactionCurrencyCode == input.TransactionCurrencyCode ||
                    (this.TransactionCurrencyCode != null &&
                    this.TransactionCurrencyCode.Equals(input.TransactionCurrencyCode))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    (this.TransactionStatus != null &&
                    this.TransactionStatus.Equals(input.TransactionStatus))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IndividualBundleId != null)
                    hashCode = hashCode * 59 + this.IndividualBundleId.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.BeneficiaryName != null)
                    hashCode = hashCode * 59 + this.BeneficiaryName.GetHashCode();
                if (this.BeneficiaryBankName != null)
                    hashCode = hashCode * 59 + this.BeneficiaryBankName.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.TransactionCurrencyCode != null)
                    hashCode = hashCode * 59 + this.TransactionCurrencyCode.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.TransactionStatus != null)
                    hashCode = hashCode * 59 + this.TransactionStatus.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
