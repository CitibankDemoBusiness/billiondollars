/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SourceAccount
    /// </summary>
    [DataContract]
        public partial class SourceAccount :  IEquatable<SourceAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceAccount" /> class.
        /// </summary>
        /// <param name="displaySourceAccountNumber">The display account number of the source account. (required).</param>
        /// <param name="sourceAccountAvailableBalance">This is the amount after external domestic transfer completion. (required).</param>
        /// <param name="sourceCurrencyCode">Currency code of the source account in  ISO 4217 format..</param>
        public SourceAccount(string displaySourceAccountNumber = default(string), double? sourceAccountAvailableBalance = default(double?), string sourceCurrencyCode = default(string))
        {
            // to ensure "displaySourceAccountNumber" is required (not null)
            if (displaySourceAccountNumber == null)
            {
                throw new InvalidDataException("displaySourceAccountNumber is a required property for SourceAccount and cannot be null");
            }
            else
            {
                this.DisplaySourceAccountNumber = displaySourceAccountNumber;
            }
            // to ensure "sourceAccountAvailableBalance" is required (not null)
            if (sourceAccountAvailableBalance == null)
            {
                throw new InvalidDataException("sourceAccountAvailableBalance is a required property for SourceAccount and cannot be null");
            }
            else
            {
                this.SourceAccountAvailableBalance = sourceAccountAvailableBalance;
            }
            this.SourceCurrencyCode = sourceCurrencyCode;
        }
        
        /// <summary>
        /// The display account number of the source account.
        /// </summary>
        /// <value>The display account number of the source account.</value>
        [DataMember(Name="displaySourceAccountNumber", EmitDefaultValue=false)]
        public string DisplaySourceAccountNumber { get; set; }

        /// <summary>
        /// This is the amount after external domestic transfer completion.
        /// </summary>
        /// <value>This is the amount after external domestic transfer completion.</value>
        [DataMember(Name="sourceAccountAvailableBalance", EmitDefaultValue=false)]
        public double? SourceAccountAvailableBalance { get; set; }

        /// <summary>
        /// Currency code of the source account in  ISO 4217 format.
        /// </summary>
        /// <value>Currency code of the source account in  ISO 4217 format.</value>
        [DataMember(Name="sourceCurrencyCode", EmitDefaultValue=false)]
        public string SourceCurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SourceAccount {\n");
            sb.Append("  DisplaySourceAccountNumber: ").Append(DisplaySourceAccountNumber).Append("\n");
            sb.Append("  SourceAccountAvailableBalance: ").Append(SourceAccountAvailableBalance).Append("\n");
            sb.Append("  SourceCurrencyCode: ").Append(SourceCurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceAccount);
        }

        /// <summary>
        /// Returns true if SourceAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplaySourceAccountNumber == input.DisplaySourceAccountNumber ||
                    (this.DisplaySourceAccountNumber != null &&
                    this.DisplaySourceAccountNumber.Equals(input.DisplaySourceAccountNumber))
                ) && 
                (
                    this.SourceAccountAvailableBalance == input.SourceAccountAvailableBalance ||
                    (this.SourceAccountAvailableBalance != null &&
                    this.SourceAccountAvailableBalance.Equals(input.SourceAccountAvailableBalance))
                ) && 
                (
                    this.SourceCurrencyCode == input.SourceCurrencyCode ||
                    (this.SourceCurrencyCode != null &&
                    this.SourceCurrencyCode.Equals(input.SourceCurrencyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplaySourceAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplaySourceAccountNumber.GetHashCode();
                if (this.SourceAccountAvailableBalance != null)
                    hashCode = hashCode * 59 + this.SourceAccountAvailableBalance.GetHashCode();
                if (this.SourceCurrencyCode != null)
                    hashCode = hashCode * 59 + this.SourceCurrencyCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
