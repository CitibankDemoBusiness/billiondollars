/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CrossBorderWireTransfersResponse
    /// </summary>
    [DataContract]
        public partial class CrossBorderWireTransfersResponse :  IEquatable<CrossBorderWireTransfersResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderWireTransfersResponse" /> class.
        /// </summary>
        /// <param name="transactionReferenceId">The unique transaction reference Id used to identify this transaction from all the other transactions (required).</param>
        /// <param name="sourceAccountDetails">sourceAccountDetails (required).</param>
        public CrossBorderWireTransfersResponse(string transactionReferenceId = default(string), SourceAccountDetails sourceAccountDetails = default(SourceAccountDetails))
        {
            // to ensure "transactionReferenceId" is required (not null)
            if (transactionReferenceId == null)
            {
                throw new InvalidDataException("transactionReferenceId is a required property for CrossBorderWireTransfersResponse and cannot be null");
            }
            else
            {
                this.TransactionReferenceId = transactionReferenceId;
            }
            // to ensure "sourceAccountDetails" is required (not null)
            if (sourceAccountDetails == null)
            {
                throw new InvalidDataException("sourceAccountDetails is a required property for CrossBorderWireTransfersResponse and cannot be null");
            }
            else
            {
                this.SourceAccountDetails = sourceAccountDetails;
            }
        }
        
        /// <summary>
        /// The unique transaction reference Id used to identify this transaction from all the other transactions
        /// </summary>
        /// <value>The unique transaction reference Id used to identify this transaction from all the other transactions</value>
        [DataMember(Name="transactionReferenceId", EmitDefaultValue=false)]
        public string TransactionReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets SourceAccountDetails
        /// </summary>
        [DataMember(Name="sourceAccountDetails", EmitDefaultValue=false)]
        public SourceAccountDetails SourceAccountDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossBorderWireTransfersResponse {\n");
            sb.Append("  TransactionReferenceId: ").Append(TransactionReferenceId).Append("\n");
            sb.Append("  SourceAccountDetails: ").Append(SourceAccountDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossBorderWireTransfersResponse);
        }

        /// <summary>
        /// Returns true if CrossBorderWireTransfersResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossBorderWireTransfersResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossBorderWireTransfersResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionReferenceId == input.TransactionReferenceId ||
                    (this.TransactionReferenceId != null &&
                    this.TransactionReferenceId.Equals(input.TransactionReferenceId))
                ) && 
                (
                    this.SourceAccountDetails == input.SourceAccountDetails ||
                    (this.SourceAccountDetails != null &&
                    this.SourceAccountDetails.Equals(input.SourceAccountDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionReferenceId != null)
                    hashCode = hashCode * 59 + this.TransactionReferenceId.GetHashCode();
                if (this.SourceAccountDetails != null)
                    hashCode = hashCode * 59 + this.SourceAccountDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
