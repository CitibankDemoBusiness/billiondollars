/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PersonalDomesticDestinationSourceAcctCombinations
    /// </summary>
    [DataContract]
        public partial class PersonalDomesticDestinationSourceAcctCombinations :  IEquatable<PersonalDomesticDestinationSourceAcctCombinations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalDomesticDestinationSourceAcctCombinations" /> class.
        /// </summary>
        /// <param name="destinationAccountId">The destination account identifier in encrypted format. Typically, this is not displayed to the customer,use displayDestinationAccountNumber instead. (required).</param>
        /// <param name="displayDestinationAccountNumber">A masked account number that can be displayed to the customer (required).</param>
        /// <param name="destinationAccountCurrencyCode">The currency code of the payee account in ISO 4217 format (required).</param>
        /// <param name="availableBalance">The amount available  to withdraw or transfer immediately..</param>
        /// <param name="nextPaymentAmount">The next payment amount due..</param>
        /// <param name="outstandingBalance">Previous balance amount..</param>
        /// <param name="minimumDueAmount">Minimum due amount for a payment cycle..</param>
        /// <param name="lastStatementDate">The date of the last statement in ISO 8601 date format YYYY-MM-DD..</param>
        /// <param name="paymentDueDate">The payment due date in ISO 8601 date format YYYY-MM-DD..</param>
        /// <param name="sourceAccountIds">sourceAccountIds (required).</param>
        /// <param name="productName">The name of the product. This is for destination account.</param>
        /// <param name="accountNickName">Nick name of the destination account.</param>
        public PersonalDomesticDestinationSourceAcctCombinations(string destinationAccountId = default(string), string displayDestinationAccountNumber = default(string), string destinationAccountCurrencyCode = default(string), double? availableBalance = default(double?), double? nextPaymentAmount = default(double?), double? outstandingBalance = default(double?), double? minimumDueAmount = default(double?), DateTime? lastStatementDate = default(DateTime?), DateTime? paymentDueDate = default(DateTime?), List<SourceAccountIds> sourceAccountIds = default(List<SourceAccountIds>), string productName = default(string), string accountNickName = default(string))
        {
            // to ensure "destinationAccountId" is required (not null)
            if (destinationAccountId == null)
            {
                throw new InvalidDataException("destinationAccountId is a required property for PersonalDomesticDestinationSourceAcctCombinations and cannot be null");
            }
            else
            {
                this.DestinationAccountId = destinationAccountId;
            }
            // to ensure "displayDestinationAccountNumber" is required (not null)
            if (displayDestinationAccountNumber == null)
            {
                throw new InvalidDataException("displayDestinationAccountNumber is a required property for PersonalDomesticDestinationSourceAcctCombinations and cannot be null");
            }
            else
            {
                this.DisplayDestinationAccountNumber = displayDestinationAccountNumber;
            }
            // to ensure "destinationAccountCurrencyCode" is required (not null)
            if (destinationAccountCurrencyCode == null)
            {
                throw new InvalidDataException("destinationAccountCurrencyCode is a required property for PersonalDomesticDestinationSourceAcctCombinations and cannot be null");
            }
            else
            {
                this.DestinationAccountCurrencyCode = destinationAccountCurrencyCode;
            }
            // to ensure "sourceAccountIds" is required (not null)
            if (sourceAccountIds == null)
            {
                throw new InvalidDataException("sourceAccountIds is a required property for PersonalDomesticDestinationSourceAcctCombinations and cannot be null");
            }
            else
            {
                this.SourceAccountIds = sourceAccountIds;
            }
            this.AvailableBalance = availableBalance;
            this.NextPaymentAmount = nextPaymentAmount;
            this.OutstandingBalance = outstandingBalance;
            this.MinimumDueAmount = minimumDueAmount;
            this.LastStatementDate = lastStatementDate;
            this.PaymentDueDate = paymentDueDate;
            this.ProductName = productName;
            this.AccountNickName = accountNickName;
        }
        
        /// <summary>
        /// The destination account identifier in encrypted format. Typically, this is not displayed to the customer,use displayDestinationAccountNumber instead.
        /// </summary>
        /// <value>The destination account identifier in encrypted format. Typically, this is not displayed to the customer,use displayDestinationAccountNumber instead.</value>
        [DataMember(Name="destinationAccountId", EmitDefaultValue=false)]
        public string DestinationAccountId { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer</value>
        [DataMember(Name="displayDestinationAccountNumber", EmitDefaultValue=false)]
        public string DisplayDestinationAccountNumber { get; set; }

        /// <summary>
        /// The currency code of the payee account in ISO 4217 format
        /// </summary>
        /// <value>The currency code of the payee account in ISO 4217 format</value>
        [DataMember(Name="destinationAccountCurrencyCode", EmitDefaultValue=false)]
        public string DestinationAccountCurrencyCode { get; set; }

        /// <summary>
        /// The amount available  to withdraw or transfer immediately.
        /// </summary>
        /// <value>The amount available  to withdraw or transfer immediately.</value>
        [DataMember(Name="availableBalance", EmitDefaultValue=false)]
        public double? AvailableBalance { get; set; }

        /// <summary>
        /// The next payment amount due.
        /// </summary>
        /// <value>The next payment amount due.</value>
        [DataMember(Name="nextPaymentAmount", EmitDefaultValue=false)]
        public double? NextPaymentAmount { get; set; }

        /// <summary>
        /// Previous balance amount.
        /// </summary>
        /// <value>Previous balance amount.</value>
        [DataMember(Name="outstandingBalance", EmitDefaultValue=false)]
        public double? OutstandingBalance { get; set; }

        /// <summary>
        /// Minimum due amount for a payment cycle.
        /// </summary>
        /// <value>Minimum due amount for a payment cycle.</value>
        [DataMember(Name="minimumDueAmount", EmitDefaultValue=false)]
        public double? MinimumDueAmount { get; set; }

        /// <summary>
        /// The date of the last statement in ISO 8601 date format YYYY-MM-DD.
        /// </summary>
        /// <value>The date of the last statement in ISO 8601 date format YYYY-MM-DD.</value>
        [DataMember(Name="lastStatementDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LastStatementDate { get; set; }

        /// <summary>
        /// The payment due date in ISO 8601 date format YYYY-MM-DD.
        /// </summary>
        /// <value>The payment due date in ISO 8601 date format YYYY-MM-DD.</value>
        [DataMember(Name="paymentDueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? PaymentDueDate { get; set; }

        /// <summary>
        /// Gets or Sets SourceAccountIds
        /// </summary>
        [DataMember(Name="sourceAccountIds", EmitDefaultValue=false)]
        public List<SourceAccountIds> SourceAccountIds { get; set; }

        /// <summary>
        /// The name of the product. This is for destination account
        /// </summary>
        /// <value>The name of the product. This is for destination account</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Nick name of the destination account
        /// </summary>
        /// <value>Nick name of the destination account</value>
        [DataMember(Name="accountNickName", EmitDefaultValue=false)]
        public string AccountNickName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalDomesticDestinationSourceAcctCombinations {\n");
            sb.Append("  DestinationAccountId: ").Append(DestinationAccountId).Append("\n");
            sb.Append("  DisplayDestinationAccountNumber: ").Append(DisplayDestinationAccountNumber).Append("\n");
            sb.Append("  DestinationAccountCurrencyCode: ").Append(DestinationAccountCurrencyCode).Append("\n");
            sb.Append("  AvailableBalance: ").Append(AvailableBalance).Append("\n");
            sb.Append("  NextPaymentAmount: ").Append(NextPaymentAmount).Append("\n");
            sb.Append("  OutstandingBalance: ").Append(OutstandingBalance).Append("\n");
            sb.Append("  MinimumDueAmount: ").Append(MinimumDueAmount).Append("\n");
            sb.Append("  LastStatementDate: ").Append(LastStatementDate).Append("\n");
            sb.Append("  PaymentDueDate: ").Append(PaymentDueDate).Append("\n");
            sb.Append("  SourceAccountIds: ").Append(SourceAccountIds).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  AccountNickName: ").Append(AccountNickName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonalDomesticDestinationSourceAcctCombinations);
        }

        /// <summary>
        /// Returns true if PersonalDomesticDestinationSourceAcctCombinations instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonalDomesticDestinationSourceAcctCombinations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalDomesticDestinationSourceAcctCombinations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DestinationAccountId == input.DestinationAccountId ||
                    (this.DestinationAccountId != null &&
                    this.DestinationAccountId.Equals(input.DestinationAccountId))
                ) && 
                (
                    this.DisplayDestinationAccountNumber == input.DisplayDestinationAccountNumber ||
                    (this.DisplayDestinationAccountNumber != null &&
                    this.DisplayDestinationAccountNumber.Equals(input.DisplayDestinationAccountNumber))
                ) && 
                (
                    this.DestinationAccountCurrencyCode == input.DestinationAccountCurrencyCode ||
                    (this.DestinationAccountCurrencyCode != null &&
                    this.DestinationAccountCurrencyCode.Equals(input.DestinationAccountCurrencyCode))
                ) && 
                (
                    this.AvailableBalance == input.AvailableBalance ||
                    (this.AvailableBalance != null &&
                    this.AvailableBalance.Equals(input.AvailableBalance))
                ) && 
                (
                    this.NextPaymentAmount == input.NextPaymentAmount ||
                    (this.NextPaymentAmount != null &&
                    this.NextPaymentAmount.Equals(input.NextPaymentAmount))
                ) && 
                (
                    this.OutstandingBalance == input.OutstandingBalance ||
                    (this.OutstandingBalance != null &&
                    this.OutstandingBalance.Equals(input.OutstandingBalance))
                ) && 
                (
                    this.MinimumDueAmount == input.MinimumDueAmount ||
                    (this.MinimumDueAmount != null &&
                    this.MinimumDueAmount.Equals(input.MinimumDueAmount))
                ) && 
                (
                    this.LastStatementDate == input.LastStatementDate ||
                    (this.LastStatementDate != null &&
                    this.LastStatementDate.Equals(input.LastStatementDate))
                ) && 
                (
                    this.PaymentDueDate == input.PaymentDueDate ||
                    (this.PaymentDueDate != null &&
                    this.PaymentDueDate.Equals(input.PaymentDueDate))
                ) && 
                (
                    this.SourceAccountIds == input.SourceAccountIds ||
                    this.SourceAccountIds != null &&
                    input.SourceAccountIds != null &&
                    this.SourceAccountIds.SequenceEqual(input.SourceAccountIds)
                ) && 
                (
                    this.ProductName == input.ProductName ||
                    (this.ProductName != null &&
                    this.ProductName.Equals(input.ProductName))
                ) && 
                (
                    this.AccountNickName == input.AccountNickName ||
                    (this.AccountNickName != null &&
                    this.AccountNickName.Equals(input.AccountNickName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationAccountId != null)
                    hashCode = hashCode * 59 + this.DestinationAccountId.GetHashCode();
                if (this.DisplayDestinationAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayDestinationAccountNumber.GetHashCode();
                if (this.DestinationAccountCurrencyCode != null)
                    hashCode = hashCode * 59 + this.DestinationAccountCurrencyCode.GetHashCode();
                if (this.AvailableBalance != null)
                    hashCode = hashCode * 59 + this.AvailableBalance.GetHashCode();
                if (this.NextPaymentAmount != null)
                    hashCode = hashCode * 59 + this.NextPaymentAmount.GetHashCode();
                if (this.OutstandingBalance != null)
                    hashCode = hashCode * 59 + this.OutstandingBalance.GetHashCode();
                if (this.MinimumDueAmount != null)
                    hashCode = hashCode * 59 + this.MinimumDueAmount.GetHashCode();
                if (this.LastStatementDate != null)
                    hashCode = hashCode * 59 + this.LastStatementDate.GetHashCode();
                if (this.PaymentDueDate != null)
                    hashCode = hashCode * 59 + this.PaymentDueDate.GetHashCode();
                if (this.SourceAccountIds != null)
                    hashCode = hashCode * 59 + this.SourceAccountIds.GetHashCode();
                if (this.ProductName != null)
                    hashCode = hashCode * 59 + this.ProductName.GetHashCode();
                if (this.AccountNickName != null)
                    hashCode = hashCode * 59 + this.AccountNickName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
