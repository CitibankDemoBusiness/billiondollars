/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest
    /// </summary>
    [DataContract]
        public partial class UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest :  IEquatable<UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest" /> class.
        /// </summary>
        /// <param name="accountId">The account identifier in encrypted format.Typically, this is not displayed to the customer. (required).</param>
        /// <param name="paymentMethod">The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{paymentMethod} resource to get valid value of this field with description (required).</param>
        /// <param name="bankSortCode">This is specific to UK.</param>
        /// <param name="transactionReferenceId">The unique SI reference Id used to identify the payee type/ transfer from all the other transfers (required).</param>
        /// <param name="transactionAmount">Transaction amount in local currency..</param>
        /// <param name="futureDatedTransaction">futureDatedTransaction.</param>
        /// <param name="standingInstruction">standingInstruction.</param>
        /// <param name="remarks">Bill payment notes. Free text from screen..</param>
        public UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest(string accountId = default(string), string paymentMethod = default(string), string bankSortCode = default(string), string transactionReferenceId = default(string), double? transactionAmount = default(double?), FutureDatedTransaction futureDatedTransaction = default(FutureDatedTransaction), StandingInstruction standingInstruction = default(StandingInstruction), string remarks = default(string))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            // to ensure "paymentMethod" is required (not null)
            if (paymentMethod == null)
            {
                throw new InvalidDataException("paymentMethod is a required property for UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest and cannot be null");
            }
            else
            {
                this.PaymentMethod = paymentMethod;
            }
            // to ensure "transactionReferenceId" is required (not null)
            if (transactionReferenceId == null)
            {
                throw new InvalidDataException("transactionReferenceId is a required property for UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest and cannot be null");
            }
            else
            {
                this.TransactionReferenceId = transactionReferenceId;
            }
            this.BankSortCode = bankSortCode;
            this.TransactionAmount = transactionAmount;
            this.FutureDatedTransaction = futureDatedTransaction;
            this.StandingInstruction = standingInstruction;
            this.Remarks = remarks;
        }
        
        /// <summary>
        /// The account identifier in encrypted format.Typically, this is not displayed to the customer.
        /// </summary>
        /// <value>The account identifier in encrypted format.Typically, this is not displayed to the customer.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{paymentMethod} resource to get valid value of this field with description
        /// </summary>
        /// <value>The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{paymentMethod} resource to get valid value of this field with description</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// This is specific to UK
        /// </summary>
        /// <value>This is specific to UK</value>
        [DataMember(Name="bankSortCode", EmitDefaultValue=false)]
        public string BankSortCode { get; set; }

        /// <summary>
        /// The unique SI reference Id used to identify the payee type/ transfer from all the other transfers
        /// </summary>
        /// <value>The unique SI reference Id used to identify the payee type/ transfer from all the other transfers</value>
        [DataMember(Name="transactionReferenceId", EmitDefaultValue=false)]
        public string TransactionReferenceId { get; set; }

        /// <summary>
        /// Transaction amount in local currency.
        /// </summary>
        /// <value>Transaction amount in local currency.</value>
        [DataMember(Name="transactionAmount", EmitDefaultValue=false)]
        public double? TransactionAmount { get; set; }

        /// <summary>
        /// Gets or Sets FutureDatedTransaction
        /// </summary>
        [DataMember(Name="futureDatedTransaction", EmitDefaultValue=false)]
        public FutureDatedTransaction FutureDatedTransaction { get; set; }

        /// <summary>
        /// Gets or Sets StandingInstruction
        /// </summary>
        [DataMember(Name="standingInstruction", EmitDefaultValue=false)]
        public StandingInstruction StandingInstruction { get; set; }

        /// <summary>
        /// Bill payment notes. Free text from screen.
        /// </summary>
        /// <value>Bill payment notes. Free text from screen.</value>
        [DataMember(Name="remarks", EmitDefaultValue=false)]
        public string Remarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  BankSortCode: ").Append(BankSortCode).Append("\n");
            sb.Append("  TransactionReferenceId: ").Append(TransactionReferenceId).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  FutureDatedTransaction: ").Append(FutureDatedTransaction).Append("\n");
            sb.Append("  StandingInstruction: ").Append(StandingInstruction).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest);
        }

        /// <summary>
        /// Returns true if UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePaymentInitiationTransactionRepeatingPaymentsPreprocessRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.BankSortCode == input.BankSortCode ||
                    (this.BankSortCode != null &&
                    this.BankSortCode.Equals(input.BankSortCode))
                ) && 
                (
                    this.TransactionReferenceId == input.TransactionReferenceId ||
                    (this.TransactionReferenceId != null &&
                    this.TransactionReferenceId.Equals(input.TransactionReferenceId))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.FutureDatedTransaction == input.FutureDatedTransaction ||
                    (this.FutureDatedTransaction != null &&
                    this.FutureDatedTransaction.Equals(input.FutureDatedTransaction))
                ) && 
                (
                    this.StandingInstruction == input.StandingInstruction ||
                    (this.StandingInstruction != null &&
                    this.StandingInstruction.Equals(input.StandingInstruction))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.BankSortCode != null)
                    hashCode = hashCode * 59 + this.BankSortCode.GetHashCode();
                if (this.TransactionReferenceId != null)
                    hashCode = hashCode * 59 + this.TransactionReferenceId.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.FutureDatedTransaction != null)
                    hashCode = hashCode * 59 + this.FutureDatedTransaction.GetHashCode();
                if (this.StandingInstruction != null)
                    hashCode = hashCode * 59 + this.StandingInstruction.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
