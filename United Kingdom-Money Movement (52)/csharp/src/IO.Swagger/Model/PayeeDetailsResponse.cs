/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PayeeDetailsResponse
    /// </summary>
    [DataContract]
        public partial class PayeeDetailsResponse :  IEquatable<PayeeDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayeeDetailsResponse" /> class.
        /// </summary>
        /// <param name="internalDomesticPayee">internalDomesticPayee.</param>
        /// <param name="externalDomesticPayee">externalDomesticPayee.</param>
        /// <param name="billPaymentPayee">billPaymentPayee.</param>
        /// <param name="ibbsPayee">ibbsPayee.</param>
        /// <param name="citiGlobalTransferpayee">citiGlobalTransferpayee.</param>
        /// <param name="crossBorderWireTransfersPayee">crossBorderWireTransfersPayee.</param>
        /// <param name="sepaTransferPayee">sepaTransferPayee.</param>
        public PayeeDetailsResponse(InternalDomesticPayee internalDomesticPayee = default(InternalDomesticPayee), ExternalDomesticPayee externalDomesticPayee = default(ExternalDomesticPayee), BillPaymentPayee billPaymentPayee = default(BillPaymentPayee), IbbsPayee ibbsPayee = default(IbbsPayee), CitiGlobalTransferpayee citiGlobalTransferpayee = default(CitiGlobalTransferpayee), CrossBorderWireTransfersPayee crossBorderWireTransfersPayee = default(CrossBorderWireTransfersPayee), SepaTransferPayee sepaTransferPayee = default(SepaTransferPayee))
        {
            this.InternalDomesticPayee = internalDomesticPayee;
            this.ExternalDomesticPayee = externalDomesticPayee;
            this.BillPaymentPayee = billPaymentPayee;
            this.IbbsPayee = ibbsPayee;
            this.CitiGlobalTransferpayee = citiGlobalTransferpayee;
            this.CrossBorderWireTransfersPayee = crossBorderWireTransfersPayee;
            this.SepaTransferPayee = sepaTransferPayee;
        }
        
        /// <summary>
        /// Gets or Sets InternalDomesticPayee
        /// </summary>
        [DataMember(Name="internalDomesticPayee", EmitDefaultValue=false)]
        public InternalDomesticPayee InternalDomesticPayee { get; set; }

        /// <summary>
        /// Gets or Sets ExternalDomesticPayee
        /// </summary>
        [DataMember(Name="externalDomesticPayee", EmitDefaultValue=false)]
        public ExternalDomesticPayee ExternalDomesticPayee { get; set; }

        /// <summary>
        /// Gets or Sets BillPaymentPayee
        /// </summary>
        [DataMember(Name="billPaymentPayee", EmitDefaultValue=false)]
        public BillPaymentPayee BillPaymentPayee { get; set; }

        /// <summary>
        /// Gets or Sets IbbsPayee
        /// </summary>
        [DataMember(Name="ibbsPayee", EmitDefaultValue=false)]
        public IbbsPayee IbbsPayee { get; set; }

        /// <summary>
        /// Gets or Sets CitiGlobalTransferpayee
        /// </summary>
        [DataMember(Name="citiGlobalTransferpayee", EmitDefaultValue=false)]
        public CitiGlobalTransferpayee CitiGlobalTransferpayee { get; set; }

        /// <summary>
        /// Gets or Sets CrossBorderWireTransfersPayee
        /// </summary>
        [DataMember(Name="crossBorderWireTransfersPayee", EmitDefaultValue=false)]
        public CrossBorderWireTransfersPayee CrossBorderWireTransfersPayee { get; set; }

        /// <summary>
        /// Gets or Sets SepaTransferPayee
        /// </summary>
        [DataMember(Name="sepaTransferPayee", EmitDefaultValue=false)]
        public SepaTransferPayee SepaTransferPayee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayeeDetailsResponse {\n");
            sb.Append("  InternalDomesticPayee: ").Append(InternalDomesticPayee).Append("\n");
            sb.Append("  ExternalDomesticPayee: ").Append(ExternalDomesticPayee).Append("\n");
            sb.Append("  BillPaymentPayee: ").Append(BillPaymentPayee).Append("\n");
            sb.Append("  IbbsPayee: ").Append(IbbsPayee).Append("\n");
            sb.Append("  CitiGlobalTransferpayee: ").Append(CitiGlobalTransferpayee).Append("\n");
            sb.Append("  CrossBorderWireTransfersPayee: ").Append(CrossBorderWireTransfersPayee).Append("\n");
            sb.Append("  SepaTransferPayee: ").Append(SepaTransferPayee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayeeDetailsResponse);
        }

        /// <summary>
        /// Returns true if PayeeDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PayeeDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayeeDetailsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InternalDomesticPayee == input.InternalDomesticPayee ||
                    (this.InternalDomesticPayee != null &&
                    this.InternalDomesticPayee.Equals(input.InternalDomesticPayee))
                ) && 
                (
                    this.ExternalDomesticPayee == input.ExternalDomesticPayee ||
                    (this.ExternalDomesticPayee != null &&
                    this.ExternalDomesticPayee.Equals(input.ExternalDomesticPayee))
                ) && 
                (
                    this.BillPaymentPayee == input.BillPaymentPayee ||
                    (this.BillPaymentPayee != null &&
                    this.BillPaymentPayee.Equals(input.BillPaymentPayee))
                ) && 
                (
                    this.IbbsPayee == input.IbbsPayee ||
                    (this.IbbsPayee != null &&
                    this.IbbsPayee.Equals(input.IbbsPayee))
                ) && 
                (
                    this.CitiGlobalTransferpayee == input.CitiGlobalTransferpayee ||
                    (this.CitiGlobalTransferpayee != null &&
                    this.CitiGlobalTransferpayee.Equals(input.CitiGlobalTransferpayee))
                ) && 
                (
                    this.CrossBorderWireTransfersPayee == input.CrossBorderWireTransfersPayee ||
                    (this.CrossBorderWireTransfersPayee != null &&
                    this.CrossBorderWireTransfersPayee.Equals(input.CrossBorderWireTransfersPayee))
                ) && 
                (
                    this.SepaTransferPayee == input.SepaTransferPayee ||
                    (this.SepaTransferPayee != null &&
                    this.SepaTransferPayee.Equals(input.SepaTransferPayee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InternalDomesticPayee != null)
                    hashCode = hashCode * 59 + this.InternalDomesticPayee.GetHashCode();
                if (this.ExternalDomesticPayee != null)
                    hashCode = hashCode * 59 + this.ExternalDomesticPayee.GetHashCode();
                if (this.BillPaymentPayee != null)
                    hashCode = hashCode * 59 + this.BillPaymentPayee.GetHashCode();
                if (this.IbbsPayee != null)
                    hashCode = hashCode * 59 + this.IbbsPayee.GetHashCode();
                if (this.CitiGlobalTransferpayee != null)
                    hashCode = hashCode * 59 + this.CitiGlobalTransferpayee.GetHashCode();
                if (this.CrossBorderWireTransfersPayee != null)
                    hashCode = hashCode * 59 + this.CrossBorderWireTransfersPayee.GetHashCode();
                if (this.SepaTransferPayee != null)
                    hashCode = hashCode * 59 + this.SepaTransferPayee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
