/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BillDetails
    /// </summary>
    [DataContract]
        public partial class BillDetails :  IEquatable<BillDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillDetails" /> class.
        /// </summary>
        /// <param name="billSequenceNumber">This field is used to refer the sequence number of the bill..</param>
        /// <param name="billAmount">Bill Amount in local currency. (required).</param>
        /// <param name="billDueDate">The bill due date in ISO 8601 date format YYYY-MM-DD (required).</param>
        public BillDetails(string billSequenceNumber = default(string), double? billAmount = default(double?), DateTime? billDueDate = default(DateTime?))
        {
            // to ensure "billAmount" is required (not null)
            if (billAmount == null)
            {
                throw new InvalidDataException("billAmount is a required property for BillDetails and cannot be null");
            }
            else
            {
                this.BillAmount = billAmount;
            }
            // to ensure "billDueDate" is required (not null)
            if (billDueDate == null)
            {
                throw new InvalidDataException("billDueDate is a required property for BillDetails and cannot be null");
            }
            else
            {
                this.BillDueDate = billDueDate;
            }
            this.BillSequenceNumber = billSequenceNumber;
        }
        
        /// <summary>
        /// This field is used to refer the sequence number of the bill.
        /// </summary>
        /// <value>This field is used to refer the sequence number of the bill.</value>
        [DataMember(Name="billSequenceNumber", EmitDefaultValue=false)]
        public string BillSequenceNumber { get; set; }

        /// <summary>
        /// Bill Amount in local currency.
        /// </summary>
        /// <value>Bill Amount in local currency.</value>
        [DataMember(Name="billAmount", EmitDefaultValue=false)]
        public double? BillAmount { get; set; }

        /// <summary>
        /// The bill due date in ISO 8601 date format YYYY-MM-DD
        /// </summary>
        /// <value>The bill due date in ISO 8601 date format YYYY-MM-DD</value>
        [DataMember(Name="billDueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BillDueDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillDetails {\n");
            sb.Append("  BillSequenceNumber: ").Append(BillSequenceNumber).Append("\n");
            sb.Append("  BillAmount: ").Append(BillAmount).Append("\n");
            sb.Append("  BillDueDate: ").Append(BillDueDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillDetails);
        }

        /// <summary>
        /// Returns true if BillDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BillDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillSequenceNumber == input.BillSequenceNumber ||
                    (this.BillSequenceNumber != null &&
                    this.BillSequenceNumber.Equals(input.BillSequenceNumber))
                ) && 
                (
                    this.BillAmount == input.BillAmount ||
                    (this.BillAmount != null &&
                    this.BillAmount.Equals(input.BillAmount))
                ) && 
                (
                    this.BillDueDate == input.BillDueDate ||
                    (this.BillDueDate != null &&
                    this.BillDueDate.Equals(input.BillDueDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillSequenceNumber != null)
                    hashCode = hashCode * 59 + this.BillSequenceNumber.GetHashCode();
                if (this.BillAmount != null)
                    hashCode = hashCode * 59 + this.BillAmount.GetHashCode();
                if (this.BillDueDate != null)
                    hashCode = hashCode * 59 + this.BillDueDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
