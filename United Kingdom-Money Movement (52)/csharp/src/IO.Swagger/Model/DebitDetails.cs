/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DebitDetails
    /// </summary>
    [DataContract]
        public partial class DebitDetails :  IEquatable<DebitDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebitDetails" /> class.
        /// </summary>
        /// <param name="transactionDebitAmount">The transaction debit amount..</param>
        /// <param name="currencyCode">The currency code for the debit amount in ISO 4217 format.</param>
        public DebitDetails(double? transactionDebitAmount = default(double?), string currencyCode = default(string))
        {
            this.TransactionDebitAmount = transactionDebitAmount;
            this.CurrencyCode = currencyCode;
        }
        
        /// <summary>
        /// The transaction debit amount.
        /// </summary>
        /// <value>The transaction debit amount.</value>
        [DataMember(Name="transactionDebitAmount", EmitDefaultValue=false)]
        public double? TransactionDebitAmount { get; set; }

        /// <summary>
        /// The currency code for the debit amount in ISO 4217 format
        /// </summary>
        /// <value>The currency code for the debit amount in ISO 4217 format</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DebitDetails {\n");
            sb.Append("  TransactionDebitAmount: ").Append(TransactionDebitAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebitDetails);
        }

        /// <summary>
        /// Returns true if DebitDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of DebitDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebitDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionDebitAmount == input.TransactionDebitAmount ||
                    (this.TransactionDebitAmount != null &&
                    this.TransactionDebitAmount.Equals(input.TransactionDebitAmount))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionDebitAmount != null)
                    hashCode = hashCode * 59 + this.TransactionDebitAmount.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
