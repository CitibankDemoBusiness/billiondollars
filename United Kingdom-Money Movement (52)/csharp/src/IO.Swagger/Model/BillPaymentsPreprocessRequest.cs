/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BillPaymentsPreprocessRequest
    /// </summary>
    [DataContract]
        public partial class BillPaymentsPreprocessRequest :  IEquatable<BillPaymentsPreprocessRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillPaymentsPreprocessRequest" /> class.
        /// </summary>
        /// <param name="sourceAccountId">The source account identifier in encrypted format.Typically, this is not displayed to the customer. (required).</param>
        /// <param name="transactionAmount">The transaction amount (required).</param>
        /// <param name="transferCurrencyIndicator">Indicator to specify whether the transfer is in source or destination account currency.The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{transferCurrencyIndicator} resource to get valid value of this field with description. You can use transferCurrencyIndicator as the referenceCode parameter to retrieve the values. (required).</param>
        /// <param name="payeeId">The payee identifier in encrypted format.Typically, this is not displayed to the customer. (required).</param>
        /// <param name="billTypeCode">Bill Type Code is the sub category for the Merchant. Bill Payment Transaction  can be uniquely identified by the combination of the merchant number and billTypeCode.</param>
        /// <param name="remarks">Bill payment notes. Free text from screen..</param>
        /// <param name="customerReferenceNumber">This is the unique identifier against the biller assigned for each transaction..</param>
        /// <param name="paymentScheduleType">The payment schedule type. This is a reference data. Please use /v1/utilities/referenceData/{paymentScheduleType} resource to get valid value of this field..</param>
        /// <param name="paymentMethod">The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{paymentMethod} resource to get valid value of this field with description..</param>
        /// <param name="futureDatedTransaction">futureDatedTransaction.</param>
        /// <param name="standingInstruction">standingInstruction.</param>
        public BillPaymentsPreprocessRequest(string sourceAccountId = default(string), double? transactionAmount = default(double?), string transferCurrencyIndicator = default(string), string payeeId = default(string), string billTypeCode = default(string), string remarks = default(string), string customerReferenceNumber = default(string), string paymentScheduleType = default(string), string paymentMethod = default(string), FutureDatedTransaction futureDatedTransaction = default(FutureDatedTransaction), StandingInstruction standingInstruction = default(StandingInstruction))
        {
            // to ensure "sourceAccountId" is required (not null)
            if (sourceAccountId == null)
            {
                throw new InvalidDataException("sourceAccountId is a required property for BillPaymentsPreprocessRequest and cannot be null");
            }
            else
            {
                this.SourceAccountId = sourceAccountId;
            }
            // to ensure "transactionAmount" is required (not null)
            if (transactionAmount == null)
            {
                throw new InvalidDataException("transactionAmount is a required property for BillPaymentsPreprocessRequest and cannot be null");
            }
            else
            {
                this.TransactionAmount = transactionAmount;
            }
            // to ensure "transferCurrencyIndicator" is required (not null)
            if (transferCurrencyIndicator == null)
            {
                throw new InvalidDataException("transferCurrencyIndicator is a required property for BillPaymentsPreprocessRequest and cannot be null");
            }
            else
            {
                this.TransferCurrencyIndicator = transferCurrencyIndicator;
            }
            // to ensure "payeeId" is required (not null)
            if (payeeId == null)
            {
                throw new InvalidDataException("payeeId is a required property for BillPaymentsPreprocessRequest and cannot be null");
            }
            else
            {
                this.PayeeId = payeeId;
            }
            this.BillTypeCode = billTypeCode;
            this.Remarks = remarks;
            this.CustomerReferenceNumber = customerReferenceNumber;
            this.PaymentScheduleType = paymentScheduleType;
            this.PaymentMethod = paymentMethod;
            this.FutureDatedTransaction = futureDatedTransaction;
            this.StandingInstruction = standingInstruction;
        }
        
        /// <summary>
        /// The source account identifier in encrypted format.Typically, this is not displayed to the customer.
        /// </summary>
        /// <value>The source account identifier in encrypted format.Typically, this is not displayed to the customer.</value>
        [DataMember(Name="sourceAccountId", EmitDefaultValue=false)]
        public string SourceAccountId { get; set; }

        /// <summary>
        /// The transaction amount
        /// </summary>
        /// <value>The transaction amount</value>
        [DataMember(Name="transactionAmount", EmitDefaultValue=false)]
        public double? TransactionAmount { get; set; }

        /// <summary>
        /// Indicator to specify whether the transfer is in source or destination account currency.The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{transferCurrencyIndicator} resource to get valid value of this field with description. You can use transferCurrencyIndicator as the referenceCode parameter to retrieve the values.
        /// </summary>
        /// <value>Indicator to specify whether the transfer is in source or destination account currency.The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{transferCurrencyIndicator} resource to get valid value of this field with description. You can use transferCurrencyIndicator as the referenceCode parameter to retrieve the values.</value>
        [DataMember(Name="transferCurrencyIndicator", EmitDefaultValue=false)]
        public string TransferCurrencyIndicator { get; set; }

        /// <summary>
        /// The payee identifier in encrypted format.Typically, this is not displayed to the customer.
        /// </summary>
        /// <value>The payee identifier in encrypted format.Typically, this is not displayed to the customer.</value>
        [DataMember(Name="payeeId", EmitDefaultValue=false)]
        public string PayeeId { get; set; }

        /// <summary>
        /// Bill Type Code is the sub category for the Merchant. Bill Payment Transaction  can be uniquely identified by the combination of the merchant number and billTypeCode
        /// </summary>
        /// <value>Bill Type Code is the sub category for the Merchant. Bill Payment Transaction  can be uniquely identified by the combination of the merchant number and billTypeCode</value>
        [DataMember(Name="billTypeCode", EmitDefaultValue=false)]
        public string BillTypeCode { get; set; }

        /// <summary>
        /// Bill payment notes. Free text from screen.
        /// </summary>
        /// <value>Bill payment notes. Free text from screen.</value>
        [DataMember(Name="remarks", EmitDefaultValue=false)]
        public string Remarks { get; set; }

        /// <summary>
        /// This is the unique identifier against the biller assigned for each transaction.
        /// </summary>
        /// <value>This is the unique identifier against the biller assigned for each transaction.</value>
        [DataMember(Name="customerReferenceNumber", EmitDefaultValue=false)]
        public string CustomerReferenceNumber { get; set; }

        /// <summary>
        /// The payment schedule type. This is a reference data. Please use /v1/utilities/referenceData/{paymentScheduleType} resource to get valid value of this field.
        /// </summary>
        /// <value>The payment schedule type. This is a reference data. Please use /v1/utilities/referenceData/{paymentScheduleType} resource to get valid value of this field.</value>
        [DataMember(Name="paymentScheduleType", EmitDefaultValue=false)]
        public string PaymentScheduleType { get; set; }

        /// <summary>
        /// The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{paymentMethod} resource to get valid value of this field with description.
        /// </summary>
        /// <value>The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{paymentMethod} resource to get valid value of this field with description.</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets FutureDatedTransaction
        /// </summary>
        [DataMember(Name="futureDatedTransaction", EmitDefaultValue=false)]
        public FutureDatedTransaction FutureDatedTransaction { get; set; }

        /// <summary>
        /// Gets or Sets StandingInstruction
        /// </summary>
        [DataMember(Name="standingInstruction", EmitDefaultValue=false)]
        public StandingInstruction StandingInstruction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillPaymentsPreprocessRequest {\n");
            sb.Append("  SourceAccountId: ").Append(SourceAccountId).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  TransferCurrencyIndicator: ").Append(TransferCurrencyIndicator).Append("\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  BillTypeCode: ").Append(BillTypeCode).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  CustomerReferenceNumber: ").Append(CustomerReferenceNumber).Append("\n");
            sb.Append("  PaymentScheduleType: ").Append(PaymentScheduleType).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  FutureDatedTransaction: ").Append(FutureDatedTransaction).Append("\n");
            sb.Append("  StandingInstruction: ").Append(StandingInstruction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillPaymentsPreprocessRequest);
        }

        /// <summary>
        /// Returns true if BillPaymentsPreprocessRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BillPaymentsPreprocessRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillPaymentsPreprocessRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceAccountId == input.SourceAccountId ||
                    (this.SourceAccountId != null &&
                    this.SourceAccountId.Equals(input.SourceAccountId))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.TransferCurrencyIndicator == input.TransferCurrencyIndicator ||
                    (this.TransferCurrencyIndicator != null &&
                    this.TransferCurrencyIndicator.Equals(input.TransferCurrencyIndicator))
                ) && 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.BillTypeCode == input.BillTypeCode ||
                    (this.BillTypeCode != null &&
                    this.BillTypeCode.Equals(input.BillTypeCode))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.CustomerReferenceNumber == input.CustomerReferenceNumber ||
                    (this.CustomerReferenceNumber != null &&
                    this.CustomerReferenceNumber.Equals(input.CustomerReferenceNumber))
                ) && 
                (
                    this.PaymentScheduleType == input.PaymentScheduleType ||
                    (this.PaymentScheduleType != null &&
                    this.PaymentScheduleType.Equals(input.PaymentScheduleType))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.FutureDatedTransaction == input.FutureDatedTransaction ||
                    (this.FutureDatedTransaction != null &&
                    this.FutureDatedTransaction.Equals(input.FutureDatedTransaction))
                ) && 
                (
                    this.StandingInstruction == input.StandingInstruction ||
                    (this.StandingInstruction != null &&
                    this.StandingInstruction.Equals(input.StandingInstruction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceAccountId != null)
                    hashCode = hashCode * 59 + this.SourceAccountId.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.TransferCurrencyIndicator != null)
                    hashCode = hashCode * 59 + this.TransferCurrencyIndicator.GetHashCode();
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.BillTypeCode != null)
                    hashCode = hashCode * 59 + this.BillTypeCode.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.CustomerReferenceNumber != null)
                    hashCode = hashCode * 59 + this.CustomerReferenceNumber.GetHashCode();
                if (this.PaymentScheduleType != null)
                    hashCode = hashCode * 59 + this.PaymentScheduleType.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.FutureDatedTransaction != null)
                    hashCode = hashCode * 59 + this.FutureDatedTransaction.GetHashCode();
                if (this.StandingInstruction != null)
                    hashCode = hashCode * 59 + this.StandingInstruction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
