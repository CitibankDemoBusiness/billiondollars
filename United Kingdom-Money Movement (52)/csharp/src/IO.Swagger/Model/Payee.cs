/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Payee
    /// </summary>
    [DataContract]
        public partial class Payee :  IEquatable<Payee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Payee" /> class.
        /// </summary>
        /// <param name="payeeId">The unique Id of the payee.Typically,this is not displayed to the customer. (required).</param>
        /// <param name="payeeName">The name of the payee (required).</param>
        /// <param name="payeeNickname">The nickname of the payee (required).</param>
        /// <param name="paymentType">The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as reference code parameter to retrieve the values. (required).</param>
        /// <param name="displayAccountNumber">A masked account number that can be displayed to the customer. (required).</param>
        /// <param name="accountId">The account identifier of the payee in encrypted format.Typically, this is not displayed to the customer,use displayAccountNumber instead. (required).</param>
        /// <param name="currencyCode">The currency code of the account in ISO 4217 format.</param>
        /// <param name="paymentMethods">paymentMethods.</param>
        /// <param name="payeeStatus">The payee status. This is a reference data field. Please use /v1/utilities/referenceData/{payeeStatus} resource to get valid value of this field with description. You can use payeeStatus as reference code parameter to retrieve the values (required).</param>
        /// <param name="merchantNumber">Unique identifier associated with the merchant. Applicable only for Australia..</param>
        /// <param name="billTypeCode">Bill Type Code is the sub category for the Merchant. Bill Payment Transaction  can be uniquely identified by the combination of the merchant number &amp; billTypeCode.</param>
        public Payee(string payeeId = default(string), string payeeName = default(string), string payeeNickname = default(string), string paymentType = default(string), string displayAccountNumber = default(string), string accountId = default(string), string currencyCode = default(string), List<PaymentMethod> paymentMethods = default(List<PaymentMethod>), string payeeStatus = default(string), string merchantNumber = default(string), string billTypeCode = default(string))
        {
            // to ensure "payeeId" is required (not null)
            if (payeeId == null)
            {
                throw new InvalidDataException("payeeId is a required property for Payee and cannot be null");
            }
            else
            {
                this.PayeeId = payeeId;
            }
            // to ensure "payeeName" is required (not null)
            if (payeeName == null)
            {
                throw new InvalidDataException("payeeName is a required property for Payee and cannot be null");
            }
            else
            {
                this.PayeeName = payeeName;
            }
            // to ensure "payeeNickname" is required (not null)
            if (payeeNickname == null)
            {
                throw new InvalidDataException("payeeNickname is a required property for Payee and cannot be null");
            }
            else
            {
                this.PayeeNickname = payeeNickname;
            }
            // to ensure "paymentType" is required (not null)
            if (paymentType == null)
            {
                throw new InvalidDataException("paymentType is a required property for Payee and cannot be null");
            }
            else
            {
                this.PaymentType = paymentType;
            }
            // to ensure "displayAccountNumber" is required (not null)
            if (displayAccountNumber == null)
            {
                throw new InvalidDataException("displayAccountNumber is a required property for Payee and cannot be null");
            }
            else
            {
                this.DisplayAccountNumber = displayAccountNumber;
            }
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for Payee and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            // to ensure "payeeStatus" is required (not null)
            if (payeeStatus == null)
            {
                throw new InvalidDataException("payeeStatus is a required property for Payee and cannot be null");
            }
            else
            {
                this.PayeeStatus = payeeStatus;
            }
            this.CurrencyCode = currencyCode;
            this.PaymentMethods = paymentMethods;
            this.MerchantNumber = merchantNumber;
            this.BillTypeCode = billTypeCode;
        }
        
        /// <summary>
        /// The unique Id of the payee.Typically,this is not displayed to the customer.
        /// </summary>
        /// <value>The unique Id of the payee.Typically,this is not displayed to the customer.</value>
        [DataMember(Name="payeeId", EmitDefaultValue=false)]
        public string PayeeId { get; set; }

        /// <summary>
        /// The name of the payee
        /// </summary>
        /// <value>The name of the payee</value>
        [DataMember(Name="payeeName", EmitDefaultValue=false)]
        public string PayeeName { get; set; }

        /// <summary>
        /// The nickname of the payee
        /// </summary>
        /// <value>The nickname of the payee</value>
        [DataMember(Name="payeeNickname", EmitDefaultValue=false)]
        public string PayeeNickname { get; set; }

        /// <summary>
        /// The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as reference code parameter to retrieve the values.
        /// </summary>
        /// <value>The payment type.This is a reference data field. Please use /v1/utilities/referenceData/{paymentType} resource to get valid value of this field with description. You can use paymentType as reference code parameter to retrieve the values.</value>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// A masked account number that can be displayed to the customer.
        /// </summary>
        /// <value>A masked account number that can be displayed to the customer.</value>
        [DataMember(Name="displayAccountNumber", EmitDefaultValue=false)]
        public string DisplayAccountNumber { get; set; }

        /// <summary>
        /// The account identifier of the payee in encrypted format.Typically, this is not displayed to the customer,use displayAccountNumber instead.
        /// </summary>
        /// <value>The account identifier of the payee in encrypted format.Typically, this is not displayed to the customer,use displayAccountNumber instead.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The currency code of the account in ISO 4217 format
        /// </summary>
        /// <value>The currency code of the account in ISO 4217 format</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethods
        /// </summary>
        [DataMember(Name="paymentMethods", EmitDefaultValue=false)]
        public List<PaymentMethod> PaymentMethods { get; set; }

        /// <summary>
        /// The payee status. This is a reference data field. Please use /v1/utilities/referenceData/{payeeStatus} resource to get valid value of this field with description. You can use payeeStatus as reference code parameter to retrieve the values
        /// </summary>
        /// <value>The payee status. This is a reference data field. Please use /v1/utilities/referenceData/{payeeStatus} resource to get valid value of this field with description. You can use payeeStatus as reference code parameter to retrieve the values</value>
        [DataMember(Name="payeeStatus", EmitDefaultValue=false)]
        public string PayeeStatus { get; set; }

        /// <summary>
        /// Unique identifier associated with the merchant. Applicable only for Australia.
        /// </summary>
        /// <value>Unique identifier associated with the merchant. Applicable only for Australia.</value>
        [DataMember(Name="merchantNumber", EmitDefaultValue=false)]
        public string MerchantNumber { get; set; }

        /// <summary>
        /// Bill Type Code is the sub category for the Merchant. Bill Payment Transaction  can be uniquely identified by the combination of the merchant number &amp; billTypeCode
        /// </summary>
        /// <value>Bill Type Code is the sub category for the Merchant. Bill Payment Transaction  can be uniquely identified by the combination of the merchant number &amp; billTypeCode</value>
        [DataMember(Name="billTypeCode", EmitDefaultValue=false)]
        public string BillTypeCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payee {\n");
            sb.Append("  PayeeId: ").Append(PayeeId).Append("\n");
            sb.Append("  PayeeName: ").Append(PayeeName).Append("\n");
            sb.Append("  PayeeNickname: ").Append(PayeeNickname).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  DisplayAccountNumber: ").Append(DisplayAccountNumber).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  PaymentMethods: ").Append(PaymentMethods).Append("\n");
            sb.Append("  PayeeStatus: ").Append(PayeeStatus).Append("\n");
            sb.Append("  MerchantNumber: ").Append(MerchantNumber).Append("\n");
            sb.Append("  BillTypeCode: ").Append(BillTypeCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payee);
        }

        /// <summary>
        /// Returns true if Payee instances are equal
        /// </summary>
        /// <param name="input">Instance of Payee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayeeId == input.PayeeId ||
                    (this.PayeeId != null &&
                    this.PayeeId.Equals(input.PayeeId))
                ) && 
                (
                    this.PayeeName == input.PayeeName ||
                    (this.PayeeName != null &&
                    this.PayeeName.Equals(input.PayeeName))
                ) && 
                (
                    this.PayeeNickname == input.PayeeNickname ||
                    (this.PayeeNickname != null &&
                    this.PayeeNickname.Equals(input.PayeeNickname))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.DisplayAccountNumber == input.DisplayAccountNumber ||
                    (this.DisplayAccountNumber != null &&
                    this.DisplayAccountNumber.Equals(input.DisplayAccountNumber))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.PaymentMethods == input.PaymentMethods ||
                    this.PaymentMethods != null &&
                    input.PaymentMethods != null &&
                    this.PaymentMethods.SequenceEqual(input.PaymentMethods)
                ) && 
                (
                    this.PayeeStatus == input.PayeeStatus ||
                    (this.PayeeStatus != null &&
                    this.PayeeStatus.Equals(input.PayeeStatus))
                ) && 
                (
                    this.MerchantNumber == input.MerchantNumber ||
                    (this.MerchantNumber != null &&
                    this.MerchantNumber.Equals(input.MerchantNumber))
                ) && 
                (
                    this.BillTypeCode == input.BillTypeCode ||
                    (this.BillTypeCode != null &&
                    this.BillTypeCode.Equals(input.BillTypeCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayeeId != null)
                    hashCode = hashCode * 59 + this.PayeeId.GetHashCode();
                if (this.PayeeName != null)
                    hashCode = hashCode * 59 + this.PayeeName.GetHashCode();
                if (this.PayeeNickname != null)
                    hashCode = hashCode * 59 + this.PayeeNickname.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.DisplayAccountNumber != null)
                    hashCode = hashCode * 59 + this.DisplayAccountNumber.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.PaymentMethods != null)
                    hashCode = hashCode * 59 + this.PaymentMethods.GetHashCode();
                if (this.PayeeStatus != null)
                    hashCode = hashCode * 59 + this.PayeeStatus.GetHashCode();
                if (this.MerchantNumber != null)
                    hashCode = hashCode * 59 + this.MerchantNumber.GetHashCode();
                if (this.BillTypeCode != null)
                    hashCode = hashCode * 59 + this.BillTypeCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
