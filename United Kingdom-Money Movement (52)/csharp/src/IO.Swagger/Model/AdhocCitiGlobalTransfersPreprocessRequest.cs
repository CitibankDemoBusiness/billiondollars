/* 
 * Money Movement
 *
 * <P>The Money Movement API allow you to move money from Citi customers account. Transfers can be made to predefined payees by customer and individuals not included in the payee list</P> The segment of API will allow to perform below category of transfers:<br><br><b>Personal Transfer-</b> Allowing customer to initiate the money transfers within customerï¿½s own Citi accounts.<br><br><b>Internal transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi accounts locally.<br><br><b>External transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other bank accounts locally.<br><br><b>Bill Payment-</b> Allowing customer to initiate the bill payment from customer Citi own accounts to billing organization.<br><br><b>Citi Global Transfer-</b> Allowing customer to initiate the money transfer from customer Citi own accounts to other Citi bank accounts across various Countries.<br><br><b>SEPA Transfer-</b> Allowing customer to initiate money transfer to other European bank accounts within the SEPA territory.<br><br><b>Cross border transfer-</b> Allowing customer to initiate money transfer from customer own account to cross border bank accounts.<br>
 *
 * OpenAPI spec version: 1.0.0e
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AdhocCitiGlobalTransfersPreprocessRequest
    /// </summary>
    [DataContract]
        public partial class AdhocCitiGlobalTransfersPreprocessRequest :  IEquatable<AdhocCitiGlobalTransfersPreprocessRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdhocCitiGlobalTransfersPreprocessRequest" /> class.
        /// </summary>
        /// <param name="sourceAccountId">The source account identifier in encrypted format.Typically, this is not displayed to the customer. (required).</param>
        /// <param name="payeeAccountDetails">payeeAccountDetails (required).</param>
        /// <param name="transactionAmount">The transaction amount (required).</param>
        /// <param name="transferCurrencyIndicator">Indicator to specify whether the transfer is in source or destination account currency.The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{transferCurrencyIndicator} resource to get valid value of this field with description. (required).</param>
        /// <param name="transferPurpose">This is to indicate the purpose of transfer. This is a reference data field.This is a reference data field. Please use /v1/utilities/referenceData/{transferPurpose} resource to get valid value of this field with description..</param>
        /// <param name="remarks">Free text that usually describes purpose of payment..</param>
        public AdhocCitiGlobalTransfersPreprocessRequest(string sourceAccountId = default(string), PayeeAccountDetailsAdhocCitiGlobalTransferPreprocess payeeAccountDetails = default(PayeeAccountDetailsAdhocCitiGlobalTransferPreprocess), double? transactionAmount = default(double?), string transferCurrencyIndicator = default(string), string transferPurpose = default(string), string remarks = default(string))
        {
            // to ensure "sourceAccountId" is required (not null)
            if (sourceAccountId == null)
            {
                throw new InvalidDataException("sourceAccountId is a required property for AdhocCitiGlobalTransfersPreprocessRequest and cannot be null");
            }
            else
            {
                this.SourceAccountId = sourceAccountId;
            }
            // to ensure "payeeAccountDetails" is required (not null)
            if (payeeAccountDetails == null)
            {
                throw new InvalidDataException("payeeAccountDetails is a required property for AdhocCitiGlobalTransfersPreprocessRequest and cannot be null");
            }
            else
            {
                this.PayeeAccountDetails = payeeAccountDetails;
            }
            // to ensure "transactionAmount" is required (not null)
            if (transactionAmount == null)
            {
                throw new InvalidDataException("transactionAmount is a required property for AdhocCitiGlobalTransfersPreprocessRequest and cannot be null");
            }
            else
            {
                this.TransactionAmount = transactionAmount;
            }
            // to ensure "transferCurrencyIndicator" is required (not null)
            if (transferCurrencyIndicator == null)
            {
                throw new InvalidDataException("transferCurrencyIndicator is a required property for AdhocCitiGlobalTransfersPreprocessRequest and cannot be null");
            }
            else
            {
                this.TransferCurrencyIndicator = transferCurrencyIndicator;
            }
            this.TransferPurpose = transferPurpose;
            this.Remarks = remarks;
        }
        
        /// <summary>
        /// The source account identifier in encrypted format.Typically, this is not displayed to the customer.
        /// </summary>
        /// <value>The source account identifier in encrypted format.Typically, this is not displayed to the customer.</value>
        [DataMember(Name="sourceAccountId", EmitDefaultValue=false)]
        public string SourceAccountId { get; set; }

        /// <summary>
        /// Gets or Sets PayeeAccountDetails
        /// </summary>
        [DataMember(Name="payeeAccountDetails", EmitDefaultValue=false)]
        public PayeeAccountDetailsAdhocCitiGlobalTransferPreprocess PayeeAccountDetails { get; set; }

        /// <summary>
        /// The transaction amount
        /// </summary>
        /// <value>The transaction amount</value>
        [DataMember(Name="transactionAmount", EmitDefaultValue=false)]
        public double? TransactionAmount { get; set; }

        /// <summary>
        /// Indicator to specify whether the transfer is in source or destination account currency.The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{transferCurrencyIndicator} resource to get valid value of this field with description.
        /// </summary>
        /// <value>Indicator to specify whether the transfer is in source or destination account currency.The acceptable forms of remittance for a given payments and transfer transaction.This is a reference data field. Please use /v1/utilities/referenceData/{transferCurrencyIndicator} resource to get valid value of this field with description.</value>
        [DataMember(Name="transferCurrencyIndicator", EmitDefaultValue=false)]
        public string TransferCurrencyIndicator { get; set; }

        /// <summary>
        /// This is to indicate the purpose of transfer. This is a reference data field.This is a reference data field. Please use /v1/utilities/referenceData/{transferPurpose} resource to get valid value of this field with description.
        /// </summary>
        /// <value>This is to indicate the purpose of transfer. This is a reference data field.This is a reference data field. Please use /v1/utilities/referenceData/{transferPurpose} resource to get valid value of this field with description.</value>
        [DataMember(Name="transferPurpose", EmitDefaultValue=false)]
        public string TransferPurpose { get; set; }

        /// <summary>
        /// Free text that usually describes purpose of payment.
        /// </summary>
        /// <value>Free text that usually describes purpose of payment.</value>
        [DataMember(Name="remarks", EmitDefaultValue=false)]
        public string Remarks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdhocCitiGlobalTransfersPreprocessRequest {\n");
            sb.Append("  SourceAccountId: ").Append(SourceAccountId).Append("\n");
            sb.Append("  PayeeAccountDetails: ").Append(PayeeAccountDetails).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  TransferCurrencyIndicator: ").Append(TransferCurrencyIndicator).Append("\n");
            sb.Append("  TransferPurpose: ").Append(TransferPurpose).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdhocCitiGlobalTransfersPreprocessRequest);
        }

        /// <summary>
        /// Returns true if AdhocCitiGlobalTransfersPreprocessRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AdhocCitiGlobalTransfersPreprocessRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdhocCitiGlobalTransfersPreprocessRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceAccountId == input.SourceAccountId ||
                    (this.SourceAccountId != null &&
                    this.SourceAccountId.Equals(input.SourceAccountId))
                ) && 
                (
                    this.PayeeAccountDetails == input.PayeeAccountDetails ||
                    (this.PayeeAccountDetails != null &&
                    this.PayeeAccountDetails.Equals(input.PayeeAccountDetails))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.TransferCurrencyIndicator == input.TransferCurrencyIndicator ||
                    (this.TransferCurrencyIndicator != null &&
                    this.TransferCurrencyIndicator.Equals(input.TransferCurrencyIndicator))
                ) && 
                (
                    this.TransferPurpose == input.TransferPurpose ||
                    (this.TransferPurpose != null &&
                    this.TransferPurpose.Equals(input.TransferPurpose))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceAccountId != null)
                    hashCode = hashCode * 59 + this.SourceAccountId.GetHashCode();
                if (this.PayeeAccountDetails != null)
                    hashCode = hashCode * 59 + this.PayeeAccountDetails.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.TransferCurrencyIndicator != null)
                    hashCode = hashCode * 59 + this.TransferCurrencyIndicator.GetHashCode();
                if (this.TransferPurpose != null)
                    hashCode = hashCode * 59 + this.TransferPurpose.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
